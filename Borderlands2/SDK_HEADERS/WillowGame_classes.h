/*
#############################################################################################
# Borderlands2 (1.0.228.55487) SDK
# Generated with KK UE3 SDK Generator v1.7.3.0 Fix by:KK QQ:2217936322
# ========================================================================================= #
# File: WillowGame_classes.h
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_DAMAGEFLAG_CriticalHit                             1
#define CONST_DAMAGEFLAG_Healing                                 2
#define CONST_DAMAGEFLAG_Resist                                  4
#define CONST_MAX_BEAMS                                          20
#define CONST_MAX_PROJECTILES                                    16
#define CONST_DISPLAY_DEBUG_STATS_PER_PAGE                       10
#define CONST_MAX_ACTIVE_DYNAMIC_ICONS                           18
#define CONST_MAX_ACTIVE_SKILL_STATION_ICONS                     28
#define CONST_SELECTION_WEIGHT_THRESHOLD                         0.00000001
#define CONST_NUM_MISSION_REWARD_CHOICES                         2
#define CONST_HolsteredWeaponSize_Small                          1
#define CONST_HolsteredWeaponSize_Medium                         2
#define CONST_HolsteredWeaponSize_Large                          4
#define CONST_HolsteredWeaponSize_ExtraLarge                     8
#define CONST_MAIN_GAME_SKU_ID                                   0
#define CONST_SKU_ID_BITS                                        8
#define CONST_LIB_TYPE_BITS                                      4
#define CONST_BADASS_REWARD_CHOICES                              5
#define CONST_NETWORK_NOTIFICATION_TIME                          3.0f
#define CONST_MAX_INV_SLOTS                                      4
#define CONST_WPS_CustomUnlocks_LAST                             350
#define CONST_WPS_CustomUnlocks_DLC49                            349
#define CONST_WPS_CustomUnlocks_DLC48                            348
#define CONST_WPS_CustomUnlocks_DLC47                            347
#define CONST_WPS_CustomUnlocks_DLC46                            346
#define CONST_WPS_CustomUnlocks_DLC45                            345
#define CONST_WPS_CustomUnlocks_DLC44                            344
#define CONST_WPS_CustomUnlocks_DLC43                            343
#define CONST_WPS_CustomUnlocks_DLC42                            342
#define CONST_WPS_CustomUnlocks_DLC41                            341
#define CONST_WPS_CustomUnlocks_DLC40                            340
#define CONST_WPS_CustomUnlocks_DLC39                            339
#define CONST_WPS_CustomUnlocks_DLC38                            338
#define CONST_WPS_CustomUnlocks_DLC37                            337
#define CONST_WPS_CustomUnlocks_DLC36                            336
#define CONST_WPS_CustomUnlocks_DLC35                            335
#define CONST_WPS_CustomUnlocks_DLC34                            334
#define CONST_WPS_CustomUnlocks_DLC33                            333
#define CONST_WPS_CustomUnlocks_DLC32                            332
#define CONST_WPS_CustomUnlocks_DLC31                            331
#define CONST_WPS_CustomUnlocks_DLC30                            330
#define CONST_WPS_CustomUnlocks_DLC29                            329
#define CONST_WPS_CustomUnlocks_DLC28                            328
#define CONST_WPS_CustomUnlocks_DLC27                            327
#define CONST_WPS_CustomUnlocks_DLC26                            326
#define CONST_WPS_CustomUnlocks_DLC25                            325
#define CONST_WPS_CustomUnlocks_DLC24                            324
#define CONST_WPS_CustomUnlocks_DLC23                            323
#define CONST_WPS_CustomUnlocks_DLC22                            322
#define CONST_WPS_CustomUnlocks_DLC21                            321
#define CONST_WPS_CustomUnlocks_DLC20                            320
#define CONST_WPS_CustomUnlocks_DLC19                            319
#define CONST_WPS_CustomUnlocks_DLC18                            318
#define CONST_WPS_CustomUnlocks_DLC17                            317
#define CONST_WPS_CustomUnlocks_DLC16                            316
#define CONST_WPS_CustomUnlocks_DLC15                            315
#define CONST_WPS_CustomUnlocks_DLC14                            314
#define CONST_WPS_CustomUnlocks_DLC13                            313
#define CONST_WPS_CustomUnlocks_DLC12                            312
#define CONST_WPS_CustomUnlocks_DLC11                            311
#define CONST_WPS_CustomUnlocks_DLC10                            310
#define CONST_WPS_CustomUnlocks_DLC09                            309
#define CONST_WPS_CustomUnlocks_DLC08                            308
#define CONST_WPS_CustomUnlocks_DLC07                            307
#define CONST_WPS_CustomUnlocks_DLC06                            306
#define CONST_WPS_CustomUnlocks_DLC05                            305
#define CONST_WPS_CustomUnlocks_DLC04                            304
#define CONST_WPS_CustomUnlocks_DLC03                            303
#define CONST_WPS_CustomUnlocks_DLC02                            302
#define CONST_WPS_CustomUnlocks_DLC01                            301
#define CONST_WPS_CustomUnlocks_MAIN                             300
#define CONST_WPS_CustomUnlocks_FIRST                            300
#define CONST_WPS_ColorBlindMode                                 168
#define CONST_WPS_MouseAutoAim                                   167
#define CONST_WPS_BackpackSortPreference                         166
#define CONST_WPS_InvertedReverseSteering                        165
#define CONST_WPS_BadassRewardsToOfferNext                       164
#define CONST_WPS_DisableUISway                                  163
#define CONST_WPS_GoldenKeysEarned                               162
#define CONST_WPS_RewardedForPlayingPreviousGame                 161
#define CONST_WPS_EasterEggOption                                160
#define CONST_WPS_GunzerkingAutoSwitch                           159
#define CONST_WPS_ControllerRebinding                            158
#define CONST_WPS_ShouldCensorContent                            157
#define CONST_WPS_GamepadInvertStrafe                            156
#define CONST_WPS_GamepadInvertMove                              155
#define CONST_WPS_GamepadInvertTurn                              154
#define CONST_WPS_TEST_ItemRotation                              153
#define CONST_WPS_MouseSmoothing                                 152
#define CONST_WPS_LastNewOfferVersion                            151
#define CONST_WPS_CheckedForPreviousGame                         150
#define CONST_WPS_KeyRebinding                                   149
#define CONST_WPS_TradingDisabled                                148
#define CONST_WPS_SplitDirection                                 147
#define CONST_WPS_VehicleSteering                                146
#define CONST_WPS_DriftCameraLock                                145
#define CONST_WPS_BadassRewardsEarned                            143
#define CONST_WPS_HUDScaleY                                      142
#define CONST_WPS_HUDScaleX                                      141
#define CONST_WPS_AbsoluteMinimap                                140
#define CONST_WPS_BadassTokensEarned                             139
#define CONST_WPS_BadassTokens                                   138
#define CONST_WPS_BadassPointsSpent                              137
#define CONST_WPS_BadassPoints                                   136
#define CONST_WPS_ZoomToggle                                     135
#define CONST_WPS_CrouchToggle                                   134
#define CONST_WPS_StashSlot3                                     133
#define CONST_WPS_StashSlot2                                     132
#define CONST_WPS_StashSlot1                                     131
#define CONST_WPS_StashSlot0                                     130
#define CONST_WPS_PlayerFOV                                      129
#define CONST_WPS_PerShotForceFeedback                           128
#define CONST_WPS_VOVolume                                       127
#define CONST_WPS_PushToTalk                                     125
#define CONST_WPS_VoiceVolume                                    124
#define CONST_WPS_DlcNotifications                               122
#define CONST_WPS_MouseSensitivity                               121
#define CONST_WPS_HUDScaleE                                      120
#define CONST_WPS_AmbientOcclusion                               119
#define CONST_WPS_DisableTrainingMessages                        118
#define CONST_WPS_DisableOptionalVO                              117
#define CONST_WPS_LastSavedId                                    116
#define CONST_WPS_ControllerPreset                               115
#define CONST_WPS_HasUnlockedViralAchievement                    114
#define CONST_WPS_AutoAim                                        113
#define CONST_WPS_Brightness                                     112
#define CONST_WPS_EnableSubtitles                                111
#define CONST_WPS_AcceptTrades                                   110
#define CONST_WPS_AcceptDuels                                    109
#define CONST_WPS_SFXVolume                                      108
#define CONST_WPS_MusicVolume                                    107
#define CONST_WPS_IntroMovieViewed                               106
#define CONST_WPS_InvertMouseLook                                105
#define CONST_WPS_ViewAccel                                      104
#define CONST_WPS_ControllerSensitivityY                         103
#define CONST_WPS_ControllerSensitivityX                         102
#define CONST_WPS_MasterVolume                                   101
#define CONST_CONTEXT_PRESENCE_PLAYING                           8
#define CONST_CONTEXT_PRESENCE_PLAYING01                         7
#define CONST_CONTEXT_PRESENCE_PLAYING02                         6
#define CONST_CONTEXT_PRESENCE_PLAYING03                         5
#define CONST_CONTEXT_PRESENCE_MENU                              4
#define CONST_CONTEXT_PRESENCE_MENU01                            3
#define CONST_CONTEXT_PRESENCE_MENU02                            2
#define CONST_CONTEXT_PRESENCE_MENU03                            1
#define CONST_CONTEXT_PRESENCE_IDLE                              0
#define CONST_CONTEXT_CHARACTER_CLASS_MECHROMANCER               4
#define CONST_CONTEXT_CHARACTER_CLASS_MERCENARY                  3
#define CONST_CONTEXT_CHARACTER_CLASS_SIREN                      2
#define CONST_CONTEXT_CHARACTER_CLASS_ASSASSIN                   1
#define CONST_CONTEXT_CHARACTER_CLASS_SOLDIER                    0
#define CONST_CONTEXT_CHARACTER_CLASS                            0
#define CONST_CONTEXT_GAME_MODE_NORMAL                           0
#define CONST_CONTEXT_GAME_MODE                                  0x0000800B
#define CONST_QUERY_CUSTOM                                       7
#define CONST_QUERY_BROAD                                        6
#define CONST_QUERY_NARROW                                       5
#define CONST_QUERY_SPECIFIC                                     2
#define CONST_QUERY_DEFAULT                                      0
#define CONST_PROPERTY_DLC_MAP_CONTENT_ID                        0x1000000D
#define CONST_PROPERTY_DLC_MAP_PACKAGE_ID                        0x10000029
#define CONST_PROPERTY_DLC_FLAG                                  0x10000028
#define CONST_PROPERTY_HOST_EXP_LEVEL                            0x10000027
#define CONST_PROPERTY_MAX_PLOT_MISSION                          0x10000026
#define CONST_PROPERTY_MIN_PLOT_MISSION                          0x10000025
#define CONST_PROPERTY_MAX_EXP_LEVEL                             0x10000024
#define CONST_PROPERTY_MIN_EXP_LEVEL                             0x10000023
#define CONST_PROPERTY_CURR_PLOT_MISSION                         0x10000022
#define CONST_PROPERTY_IS_PUBLIC                                 0x10000010
#define CONST_PROPERTY_CURRMISSION                               0x1000000C
#define CONST_PROPERTY_PLAYTHROUGH                               0x10000009
#define CONST_PROPERTY_EXP_LEVEL                                 0x10000001
#define CONST_HOLSTERED_ITEMS_HIDDEN_BIT                         0x4
#define CONST_MAX_REPLICATED_NOUNS                               20
#define CONST_HOLSTERED_WEAPONS_HIDDEN_BIT                       0x2
#define CONST_EQUIPPED_WEAPONS_HIDDEN_BIT                        0x1
#define CONST_MAX_NUM_HOLSTERED_WEAPON_SLOTS                     3
#define CONST_NUM_EQUIPMENT_LOCATIONS                            4
#define CONST_MINTIMEBETWEENPAINSOUNDS                           0.35
#define CONST_RECENTLY_RESISTED_ATTACK_HISTORY_LENGTH            16
#define CONST_GOLDEN_KEY_SOURCE_SPARK                            0
#define CONST_MAX_AMMO_RESOURCE_UPGRADES                         8
#define CONST_MAX_SPLIT_PLAYERS                                  2
#define CONST_MIN_TIME_BETWEEN_SAVES_AT_SAME_STATION             60
#define CONST_MAX_RECENT_KILLS                                   25
#define CONST_TIME_BETWEEN_LOCATION_STAT_UPDATES_MS              5000
#define CONST_MAX_ALLOWED_LOCATION_DELTA                         5000
#define CONST_MAX_PLAYER_DAMAGE_NOTIFICATIONS                    6
#define CONST_MAX_COMBINE_HITS_TIME                              0.2f
#define CONST_POSTAK_RTPCUpdated                                 2
#define CONST_STATE_INIT                                         0
#define CONST_STATE_CHOOSE_CHARACTER                             1
#define CONST_STATE_CUSTOMIZE_CHARACTER                          2
#define CONST_STATE_CHOOSE_CUSTOMIZATION                         3
#define CONST_STATE_CHARACTER_CONFIRMED                          4
#define CONST_STATE_LOADING_CUSTOMIZATIONS                       5
#define CONST_ENTRY_IDX_HEADS                                    0
#define CONST_ENTRY_IDX_SKINS                                    1
#define CONST_ENTRY_IDX_NAME                                     2
#define CONST_ENTRY_IDX_CONFIRM                                  3
#define CONST_CHARACTER_GRID_DIRECTION_UP                        0
#define CONST_CHARACTER_GRID_DIRECTION_DOWN                      1
#define CONST_CHARACTER_GRID_DIRECTION_LEFT                      2
#define CONST_CHARACTER_GRID_DIRECTION_RIGHT                     3
#define CONST_MAX_SECONDARY_PER_PRIMARY                          20
#define CONST_ENTRY_IDX_RESPEC                                   3
#define CONST_MaxButtons                                         5
#define CONST_MAX_LOCATION_MISSIONS                              4
#define CONST_SORT_GAME                                          0
#define CONST_SORT_ALPHABETICAL                                  1
#define CONST_COLOR_HEADER                                       5352150
#define CONST_COLOR_DEFAULT                                      14679039
#define CONST_NUM_LIST_ITEM_RENDERERS                            13
#define CONST_MAX_NUM_NPC_ALLIES                                 2
#define CONST_NUM_FAST_TRAVEL_BYTES                              16
#define CONST_MAX_COLISEUM_PLAYERS                               4
#define CONST_MAX_ACTIVE_AREA_WAYPOINTS                          4
#define CONST_MAX_ACTIVE_WAYPOINTS                               6
#define CONST_SHOP_TIMER_RESEND_RATE                             10
#define CONST_MAX_SPLITSCREEN_PLAYERS                            2
#define CONST_NETWORK_OPTIONS_EVENT_ID_FRIENDS_ONLY              0
#define CONST_NETWORK_OPTIONS_EVENT_ID_INVITE_ONLY               1
#define CONST_NETWORK_OPTIONS_EVENT_ID_PUBLIC                    2
#define CONST_NETWORK_OPTIONS_EVENT_ID_SYSTEM_LINK               3
#define CONST_NETWORK_OPTIONS_EVENT_ID_OFFLINE                   4
#define CONST_NETWORK_OPTIONS_EVENT_ID_BACK                      5
#define CONST_MOTD_STRUCT_KEY_HEADER                             "Header=\""
#define CONST_MOTD_STRUCT_KEY_BODY                               "\",Body=\""
#define CONST_MOTD_STRUCT_KEY_DISPLAYTIME                        "\",DisplayTime="
#define CONST_MAX_PLAYER_DETAILS_BUTTONS                         7
#define CONST_PLAYER_DETAILS_BUTTON_ID_JOIN                      0
#define CONST_PLAYER_DETAILS_BUTTON_ID_INVITE                    1
#define CONST_PLAYER_DETAILS_BUTTON_ID_GAMERCARD                 2
#define CONST_PLAYER_DETAILS_BUTTON_ID_MUTE                      3
#define CONST_PLAYER_DETAILS_BUTTON_ID_UNMUTE                    4
#define CONST_PLAYER_DETAILS_BUTTON_ID_KICK                      5
#define CONST_PLAYER_DETAILS_BUTTON_ID_BACK                      6
#define CONST_PARTY_TYPE_LOCAL                                   "myParty"
#define CONST_PARTY_TYPE_FRIEND                                  "friendParty"
#define CONST_NETWORK_TYPE_PUBLIC                                "public"
#define CONST_NETWORK_TYPE_INVITE_ONLY                           "inviteOnly"
#define CONST_NETWORK_TYPE_FRIENDS_ONLY                          "friendsOnly"
#define CONST_NETWORK_TYPE_LAN                                   "lan"
#define CONST_NETWORK_TYPE_OFFLINE                               "offline"
#define CONST_QUALITY_TYPE_GREAT                                 "great"
#define CONST_QUALITY_TYPE_GOOD                                  "good"
#define CONST_QUALITY_TYPE_ACCEPTABLE                            "acceptable"
#define CONST_QUALITY_TYPE_BAD                                   "bad"
#define CONST_QUALITY_TYPE_NONE                                  "none"
#define CONST_ROW_TYPE_ID_INVALID                                -1
#define CONST_ROW_TYPE_ID_PLAYER_INFO                            0
#define CONST_ROW_TYPE_ID_HEADER_INFO                            1
#define CONST_ROW_TYPE_ID_MESSAGE_PROMPT                         2
#define CONST_RESERVED_ROW_COUNT                                 5
#define CONST_MAX_IO_ICONS_PER_TYPE                              4
#define CONST_MAX_SHOPS_ICONS                                    8
#define CONST_MAX_VEHICLES                                       2
#define CONST_MINIMAP_WIDTH                                      58.0f
#define CONST_MINIMAP_HEIGHT                                     48.0f
#define CONST_NUM_RESULT_ENTRIES                                 4
#define CONST_WORKING_ICON_FRAME_NAME                            "working"
#define CONST_SUCCESS_ICON_FRAME_NAME                            "success"
#define CONST_FAILURE_ICON_FRAME_NAME                            "failure"
#define CONST_MAX_MISSION_OBJECTIVES                             20
#define CONST_MAX_MISSION_SUB_OBJECTIVE_SETS                     4
#define CONST_MAX_ACTIVE_MISSION_DIRECTORS                       14
#define CONST_MAX_DYNAMIC_MISSION_DIRECTIVES                     10
#define CONST_STARTING_MISSION_NUMBER                            0
#define CONST_NETWORK_TYPE_NONE                                  ""
#define CONST_TitleFormat                                        "<font size='13' color='#FFFFFF'>%message%</font>"
#define CONST_SubtitleFormat                                     "<font size='11' color='#CCCCCC'>%message%</font>"
#define CONST_MAX_BUTTON_HISTORY                                 10
#define CONST_SKIP_UPDATE_TIME_RELEVANCE                         0.1f
#define CONST_TIME_BETWEEN_IF_RELEVANT                           3.f
#define CONST_MAX_SKILL_TYPES                                    5
#define CONST_PICKUP_SHRINK_STEP_TIME                            0.1f
#define CONST_RECENT_DROP_CAP                                    200
#define CONST_BUTTON_INDEX_SKIN_TYPE                             3
#define CONST_BUTTON_INDEX_VEHICLE_TYPE                          2
#define CONST_BUTTON_INDEX_TELEPORT_TO_VEHICLE                   1
#define CONST_BUTTON_INDEX_SPAWN_VEHICLE                         0
#define CONST_VEHICLE_CHOICE_MODULE_STATE_INVALID                3
#define CONST_VEHICLE_CHOICE_MODULE_STATE_DEPLOYED               2
#define CONST_VEHICLE_CHOICE_MODULE_STATE_READY                  1
#define CONST_MAX_VEHICLE_CHOICE_MODULES                         2
#define CONST_FALLING_NODE_PASS_THRU_CHILD                       0
#define CONST_FALLING_NODE_START_CHILD                           1
#define CONST_FALLING_NODE_IDLE_CHILD                            2
#define CONST_FALLING_NODE_END_CHILD                             3
#define CONST_MAX_ITEM_CARD_MODIFIER_STATS                       5
#define CONST_USE_FAILURE_CHARACTER                              16
#define CONST_ZoomedFireModeNum                                  1
#define CONST_MAX_WEAPON_CARD_MODIFIER_STATS                     5
#define CONST_SpawnItemPool_SPAWNS_PER_SECOND                    50.0f
#define CONST_NUM_REPLICATED_PARAMETERS                          2
#define CONST_REPLICATED_PRECISION_SCALE                         100.0f
#define CONST_MAX_LOCAL_USERS                                    4
#define CONST_NUM_RULE_SLOTS                                     4
#define CONST_PS3_CHOOSE_CHAR_ID                                 -999
#define CONST_NUM_ALLY_CACHES                                    3
#define CONST_MAX_SKILLICON_TRIGRESP                             11
#define CONST_MAX_SKILLICON_FLASK                                1
#define CONST_MAX_SKILLICON_KILL                                 5
#define CONST_MAX_TRACKED_SKILLS                                 17
#define CONST_MAX_APPLIED_CUSTOMIZATIONS                         5
#define CONST_STASH_MAX                                          4
#define CONST_BUYBACK_SLOTS                                      20
#define CONST_FailsafeCheckPeriod                                5
#define CONST_CONNECTION_QUALITY_GREAT                           "three"
#define CONST_CONNECTION_QUALTIY_GOOD                            "two"
#define CONST_CONNECTION_QUALITY_OK                              "one"
#define CONST_CONNECTION_QUALITY_NONE                            "none"
#define CONST_MAX_EXIT_POINTS                                    4
#define CONST_MAX_ARMS_LEADING_ROTATION_HISTORY                  10
#define CONST_WEATHER_PSC_INSTANCE_DATA_NAME                     'WeatherParticle'
#define CONST_WEATHER_PSC_INSTANCE_DATA_NAME01                   'WeatherParticle_Screen'
#define CONST_EVENT_ID_BACK                                      -1
#define CONST_BASE_SYSTEM_SETTING_EVENT_ID                       1000
#define CONST_EVENT_ID_APPLY_CHANGES                             5000
#define CONST_EVENT_ID_CREDITS                                   0
#define CONST_EVENT_ID_GEARBOX_ACCOUNT                           1
#define CONST_EVENT_ID_WILLOW_ONE_SAVES                          2
#define CONST_EVENT_ID_CONTINUE                                  0
#define CONST_EVENT_ID_MATCHMAKING                               1
#define CONST_EVENT_ID_OPTIONS                                   2
#define CONST_EVENT_ID_EXTRAS                                    3
#define CONST_EVENT_ID_DLC                                       4
#define CONST_EVENT_ID_QUIT                                      5
#define CONST_EVENT_ID_NEW_GAME                                  6
#define CONST_EVENT_ID_LAN_BROWSER                               7
#define CONST_EVENT_ID_DISCONNECT                                8
#define CONST_EVENT_ID_COMPATPACK                                9
#define CONST_EVENT_ID_NETOPTIONS                                10
#define CONST_EVENT_ID_CHARSELECT                                11
#define CONST_EVENT_ID_KEYBINDINGS                               1000
#define CONST_EVENT_ID_RESETKEYBINDINGS                          1001
#define CONST_EVENT_ID_PLAY                                      0
#define CONST_EVENT_ID_EXIT                                      1
#define CONST_EVENT_ID_CHARSELECT01                              3
#define CONST_EVENT_ID_QUICK_MATCH                               0
#define CONST_EVENT_ID_CUSTOM_MATCH                              1
#define CONST_EVENT_ID_RESUME                                    0
#define CONST_EVENT_ID_ACHIEVEMENTS                              1
#define CONST_EVENT_ID_DEBUG                                     3
#define CONST_EVENT_ID_EXIT01                                    4
#define CONST_EVENT_ID_NETOPTIONS01                              5
#define CONST_EVENT_ID_GAME_OPTIONS                              0
#define CONST_EVENT_ID_AUDIO_OPTIONS                             1
#define CONST_EVENT_ID_VIDEO_OPTIONS                             2
#define CONST_EVENT_ID_KEYBOARD_MOUSE_OPTIONS                    3
#define CONST_EVENT_ID_GAMEPAD_OPTIONS                           4
#define CONST_EVENT_ID_CHANGE_STORAGE_DEVICE                     5
#define CONST_EVENT_ID_PREVIOUS_MENU                             99
#define CONST_EVENT_ID_RESOLUTION                                5000
#define CONST_EVENT_ID_WINDOW_MODE                               5001
#define CONST_MenuRefreshRate                                    0.5
#define CONST_SCROLL_ACCEL_RATE                                  0.85f
#define CONST_SCROLL_MIN_DELAY                                   0.02f
#define CONST_SCROLL_INITIAL_DELAY                               0.1f
#define CONST_INTERRUPT_FADE_OUT_TIME                            0.1f
#define CONST_CLOSE_FADE_OUT_TIME                                0.3f
#define CONST_TOOLTIP_SPACING                                    "    "
#define CONST_GEARBUILDER_MAX_CONFIGURABLE_ITEM_PARTS            9
#define CONST_GEARBUILDER_MAX_CONFIGURABLE_WEAPON_PARTS          9
#define CONST_InProgressMenu                                     0
#define CONST_NotStartedMenu                                     1
#define CONST_CompletedMenu                                      2
#define CONST_IneligibleMenu                                     3
#define CONST_FastTravelMenu                                     0
#define CONST_LevelTravelMenu                                    1
#define CONST_RPMToRadsPerSec                                    0.104719755119659773
#define CONST_MaxItemsInShop                                     30
#define CONST_DETECTION_TIME_INTERVAL                            0.5f

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum WillowGame.AchievementUtility.EAchievementUnlockType
/*enum EAchievementUnlockType
{
	AUT_ZoneIn                                         = 0,
	AUT_EarnMoney                                      = 1,
	AUT_LeveledUp                                      = 2,
	AUT_InstinctUp                                     = 3,
	AUT_FallHeight                                     = 4,
	AUT_HangTime                                       = 5,
	AUT_QuestCompleted                                 = 6,
	AUT_ActionSkillKill                                = 7,
	AUT_QuestCompletedCoOp                             = 8,
	AUT_SpeedyTravel                                   = 9,
	AUT_SpeedyKills                                    = 10,
	AUT_RushTime                                       = 11,
	AUT_InventorySlotChange                            = 12,
	AUT_KilledLeveledUpPawn                            = 13,
	AUT_TokensSpent                                    = 14,
	AUT_CustomizationsUnlocks                          = 15,
	AUT_SideMissionsCompleted                          = 16,
	AUT_PurchasedBlackMarketItem                       = 17,
	AUT_MAX                                            = 18
};*/

// Enum WillowGame.AchievementUtility.EWillowAchievementList
/*enum EWillowAchievementList
{
	WA_Invalid                                         = 0,
	WA_PlotMission1                                    = 1,
	WA_PlotMission2                                    = 2,
	WA_PlotMission3                                    = 3,
	WA_PlotMission4                                    = 4,
	WA_PlotMission5                                    = 5,
	WA_PlotMission6                                    = 6,
	WA_PlotMission7                                    = 7,
	WA_PlotMission8                                    = 8,
	WA_PlotMission9                                    = 9,
	WA_PlotMission10                                   = 10,
	WA_PlotMission11                                   = 11,
	WA_PlotMission12                                   = 12,
	WA_PlotMission13                                   = 13,
	WA_PlotMission14                                   = 14,
	WA_PlotMission15                                   = 15,
	WA_PlotMission16                                   = 16,
	WA_ChallengeAccepted                               = 17,
	WA_GoliathMeetDavid                                = 18,
	WA_WentFiveRounds                                  = 19,
	WA_NotQuiteDead                                    = 20,
	WA_BetterThanYouWere                               = 21,
	WA_AlwaysImproving                                 = 22,
	WA_CappedOutForNow                                 = 23,
	WA_ArcticExplorer                                  = 24,
	WA_UrbanExplorer                                   = 25,
	WA_HighlandsExplorer                               = 26,
	WA_BlightExplorer                                  = 27,
	WA_WorldTraveler                                   = 28,
	WA_SugarDaddy                                      = 29,
	WA_DeckedOut                                       = 30,
	WA_SabreRattler                                    = 31,
	WA_PhasedAndConfused                               = 32,
	WA_SoMuchBlood                                     = 33,
	WA_CuteLoot                                        = 34,
	WA_TributeToAVaultHunter                           = 35,
	WA_DefinitelyAnItalianPlumber                      = 36,
	WA_HighFlyingHurler                                = 37,
	WA_TokenGesture                                    = 38,
	WA_WhatDoesItMean                                  = 39,
	WA_UnseenPredator                                  = 40,
	WA_BuildBuster                                     = 41,
	WA_WellThatWasEasy                                 = 42,
	WA_HowDoILook                                      = 43,
	WA_ThresherThrashed                                = 44,
	WA_FriendshipRules                                 = 45,
	WA_BetterThanMoney                                 = 46,
	WA_UpHighDownLow                                   = 47,
	WA_BountyHunter                                    = 48,
	WA_DidItAll                                        = 49,
	WA_FeelsLikeTheFirstTime                           = 50,
	WA_DLC1_Achievement1                               = 51,
	WA_DLC1_Achievement2                               = 52,
	WA_DLC1_Achievement3                               = 53,
	WA_Iris_CompleteMainCampaign                       = 54,
	WA_Iris_CompleteSideMissions                       = 55,
	WA_Iris_CollectItems                               = 56,
	WA_Sage_CompleteMainCampaign                       = 57,
	WA_Sage_CompleteSideMissions                       = 58,
	WA_Sage_DiscoverAllAreas                           = 59,
	WA_DLCReserved                                     = 60,
	WA_DLCReserved01                                   = 61,
	WA_DLCReserved02                                   = 62,
	WA_DLCReserved03                                   = 63,
	WA_DLCReserved04                                   = 64,
	WA_DLCReserved05                                   = 65,
	WA_DLCReserved06                                   = 66,
	WA_DLCReserved07                                   = 67,
	WA_DLCReserved08                                   = 68,
	WA_DLCReserved09                                   = 69,
	WA_DLCReserved10                                   = 70,
	WA_DLCReserved11                                   = 71,
	WA_DLCReserved12                                   = 72,
	WA_DLCReserved13                                   = 73,
	WA_DLCReserved14                                   = 74,
	WA_DLCReserved15                                   = 75,
	WA_DLCReserved16                                   = 76,
	WA_DLCReserved17                                   = 77,
	WA_DLCReserved18                                   = 78,
	WA_DLCReserved19                                   = 79,
	WA_DLCReserved20                                   = 80,
	WA_DLCReserved21                                   = 81,
	WA_DLCReserved22                                   = 82,
	WA_DLCReserved23                                   = 83,
	WA_DLCReserved24                                   = 84,
	WA_DLCReserved25                                   = 85,
	WA_DLCReserved26                                   = 86,
	WA_DLCReserved27                                   = 87,
	WA_DLCReserved28                                   = 88,
	WA_DLCReserved29                                   = 89,
	WA_DLCReserved30                                   = 90,
	WA_DLCReserved31                                   = 91,
	WA_DLCReserved32                                   = 92,
	WA_DLCReserved33                                   = 93,
	WA_DLCReserved34                                   = 94,
	WA_DLCReserved35                                   = 95,
	WA_DLCReserved36                                   = 96,
	WA_DLCReserved37                                   = 97,
	WA_DLCReserved38                                   = 98,
	WA_DLCReserved39                                   = 99,
	WA_MAX                                             = 100
};*/

// Enum WillowGame.StanceTypeDefinition.EDefaultStance
/*enum EDefaultStance
{
	STANCE_Patrol                                      = 0,
	STANCE_Run                                         = 1,
	STANCE_Sprint                                      = 2,
	STANCE_Injured                                     = 3,
	STANCE_None                                        = 4,
	STANCE_Crouch                                      = 5,
	STANCE_MAX                                         = 6
};*/

// Enum WillowGame.StanceTypeDefinition.EMoveStyle
/*enum EMoveStyle
{
	MOVE_Strafe                                        = 0,
	MOVE_Forward                                       = 1,
	MOVE_MAX                                           = 2
};*/

// Enum WillowGame.WillowDamageTypeDefinition.EDamageType
/*enum EDamageType
{
	DAMAGE_TYPE_Unknown                                = 0,
	DAMAGE_TYPE_Incindiary                             = 1,
	DAMAGE_TYPE_Shock                                  = 2,
	DAMAGE_TYPE_Explosive                              = 3,
	DAMAGE_TYPE_Corrosive                              = 4,
	DAMAGE_TYPE_Impact                                 = 5,
	DAMAGE_TYPE_Healing                                = 6,
	DAMAGE_TYPE_Amp                                    = 7,
	DAMAGE_TYPE_MAX                                    = 8
};*/

// Enum WillowGame.BodyClassDefinition.ECloakStyle
/*enum ECloakStyle
{
	CLOAKSTYLE_None                                    = 0,
	CLOAKSTYLE_Hide                                    = 1,
	CLOAKSTYLE_Visible                                 = 2,
	CLOAKSTYLE_VisibleHUD                              = 3,
	CLOAKSTYLE_MAX                                     = 4
};*/

// Enum WillowGame.BodyClassDefinition.ECloakType
/*enum ECloakType
{
	CLOAK_Spawn                                        = 0,
	CLOAK_AttackMove                                   = 1,
	CLOAK_AttackAnim                                   = 2,
	CLOAK_PatrolPath                                   = 3,
	CLOAK_PatrolPerch                                  = 4,
	CLOAK_PatrolRandom                                 = 5,
	CLOAK_RunHome                                      = 6,
	CLOAK_Unprovoked                                   = 7,
	CLOAK_ScriptedMove                                 = 8,
	CLOAK_SpawnAnim                                    = 9,
	CLOAK_PhysicsJump                                  = 10,
	CLOAK_MAX                                          = 11
};*/

// Enum WillowGame.BodyClassDefinition.EFlinchSeverity
/*enum EFlinchSeverity
{
	EF_NoFlinch                                        = 0,
	EF_SmallFlinch                                     = 1,
	EF_MediumFlinch                                    = 2,
	EF_LargeFlinch                                     = 3,
	EF_CriticalFlinch                                  = 4,
	EF_MAX                                             = 5
};*/

// Enum WillowGame.AttackLocation_LineOfSight.ELineOfSight
/*enum ELineOfSight
{
	ELOS_Keep                                          = 0,
	ELOS_Avoid                                         = 1,
	ELOS_Arc                                           = 2,
	ELOS_MAX                                           = 3
};*/

// Enum WillowGame.Action_GenericAttack.EAttackValidity
/*enum EAttackValidity
{
	Validity_None                                      = 0,
	Validity_Partial                                   = 1,
	Validity_Full                                      = 2,
	Validity_MAX                                       = 3
};*/

// Enum WillowGame.Action_GenericAttack.EAttackType
/*enum EAttackType
{
	Attack_Far                                         = 0,
	Attack_Close                                       = 1,
	Attack_InPlace                                     = 2,
	Attack_MAX                                         = 3
};*/

// Enum WillowGame.Action_AnimAttack.EAimType
/*enum EAimType
{
	AimType_HoldStill                                  = 0,
	AimType_FollowTarget                               = 1,
	AimType_AlignToTarget                              = 2,
	AimType_MAX                                        = 3
};*/

// Enum WillowGame.Action_BasicAttack.ERangeType
/*enum ERangeType
{
	Range_None                                         = 0,
	Range_Zone                                         = 1,
	Range_Numbers                                      = 2,
	Range_MAX                                          = 3
};*/

// Enum WillowGame.WillowAIComponent.EThreatLevel
/*enum EThreatLevel
{
	ETL_NoThreat                                       = 0,
	ETL_InThreatRadius                                 = 1,
	ETL_SeenInThreatRadius                             = 2,
	ETL_Provoked                                       = 3,
	ETL_MAX                                            = 4
};*/

// Enum WillowGame.WillowAIComponent.TargetExposure
/*enum TargetExposure
{
	Exposure_None                                      = 0,
	Exposure_Half                                      = 1,
	Exposure_Full                                      = 2,
	Exposure_MAX                                       = 3
};*/

// Enum WillowGame.WillowAIComponent.ECombatPointLOS
/*enum ECombatPointLOS
{
	CPLOS_Ignore                                       = 0,
	CPLOS_UseLOS                                       = 1,
	CPLOS_AvoidLOS                                     = 2,
	CPLOS_MAX                                          = 3
};*/

// Enum WillowGame.Behavior_AICloak.ECloakOverride
/*enum ECloakOverride
{
	CLOAKOVERRIDE_None                                 = 0,
	CLOAKOVERRIDE_Cloak                                = 1,
	CLOAKOVERRIDE_Uncloak                              = 2,
	CLOAKOVERRIDE_MAX                                  = 3
};*/

// Enum WillowGame.Action_Idle.EFollowType
/*enum EFollowType
{
	Follow_None                                        = 0,
	Follow_Parent                                      = 1,
	Follow_Target                                      = 2,
	Follow_Master                                      = 3,
	Follow_MAX                                         = 4
};*/

// Enum WillowGame.Action_Drive_Pursuit.EPursuitState
/*enum EPursuitState
{
	PS_UnsetArea                                       = 0,
	PS_WeAreInSameArea                                 = 1,
	PS_WeAreInDifferentAreas                           = 2,
	PS_IAmOutsideMyArea                                = 3,
	PS_TargetHasNoArea                                 = 4,
	PS_MAX                                             = 5
};*/

// Enum WillowGame.WillowLightProjectileManager.EBeamSource
/*enum EBeamSource
{
	EBS_Weapon                                         = 0,
	EBS_Pawn                                           = 1,
	EBS_WorldBody                                      = 2,
	EBS_MAX                                            = 3
};*/

// Enum WillowGame.WillowLightProjectileManager.EBulletFromClip
/*enum EBulletFromClip
{
	BFC_Other                                          = 0,
	BFC_First                                          = 1,
	BFC_Last                                           = 2,
	BFC_MAX                                            = 3
};*/

// Enum WillowGame.Behavior_AISetFlight.EFlightMode
/*enum EFlightMode
{
	Flight_Land                                        = 0,
	Flight_TakeOff                                     = 1,
	Flight_MAX                                         = 2
};*/

// Enum WillowGame.Action_SweepAttack.ESweepDirection
/*enum ESweepDirection
{
	Sweep_Left                                         = 0,
	Sweep_Right                                        = 1,
	Sweep_Random                                       = 2,
	Sweep_MAX                                          = 3
};*/

// Enum WillowGame.Action_SwoopAttack.ESwoopOffset
/*enum ESwoopOffset
{
	SwoopOffset_Left                                   = 0,
	SwoopOffset_Right                                  = 1,
	SwoopOffset_Random                                 = 2,
	SwoopOffset_MAX                                    = 3
};*/

// Enum WillowGame.WillowPlayerStats.EDamageCauserType
/*enum EDamageCauserType
{
	DAMAGE_CAUSER_TYPE_Unknown                         = 0,
	DAMAGE_CAUSER_TYPE_Pistol                          = 1,
	DAMAGE_CAUSER_TYPE_Shotgun                         = 2,
	DAMAGE_CAUSER_TYPE_AssaultRifle                    = 3,
	DAMAGE_CAUSER_TYPE_SniperRifle                     = 4,
	DAMAGE_CAUSER_TYPE_SMG                             = 5,
	DAMAGE_CAUSER_TYPE_Frag_Grenade                    = 6,
	DAMAGE_CAUSER_TYPE_Protean_Grenade                 = 7,
	DAMAGE_CAUSER_TYPE_Vehicle                         = 8,
	DAMAGE_CAUSER_TYPE_VehicleWeapon                   = 9,
	DAMAGE_CAUSER_TYPE_Melee                           = 10,
	DAMAGE_CAUSER_TYPE_Turret                          = 11,
	DAMAGE_CAUSER_TYPE_Launcher                        = 12,
	DAMAGE_CAUSER_TYPE_ExtraWeapon1                    = 13,
	DAMAGE_CAUSER_TYPE_ExtraWeapon2                    = 14,
	DAMAGE_CAUSER_TYPE_ExtraWeapon3                    = 15,
	DAMAGE_CAUSER_TYPE_ExtraWeapon4                    = 16,
	DAMAGE_CAUSER_TYPE_MAX                             = 17
};*/

// Enum WillowGame.InteractiveObjectDefinition.EOnTouchEventOutputs
/*enum EOnTouchEventOutputs
{
	EONTOUCH_Player                                    = 0,
	EONTOUCH_NotPlayer                                 = 1,
	EONTOUCH_MAX                                       = 2
};*/

// Enum WillowGame.InteractiveObjectDefinition.ERelevanceDistance
/*enum ERelevanceDistance
{
	RELEVANCE_Lootable                                 = 0,
	RELEVANCE_Outpost                                  = 1,
	RELEVANCE_Huge                                     = 2,
	RELEVANCE_MAX                                      = 3
};*/

// Enum WillowGame.InteractionIconDefinition.EInteractionIcons
/*enum EInteractionIcons
{
	INTERACTION_ICON_None                              = 0,
	INTERACTION_ICON_Use                               = 1,
	INTERACTION_ICON_Talk                              = 2,
	INTERACTION_ICON_Heal                              = 3,
	INTERACTION_ICON_Shop                              = 4,
	INTERACTION_ICON_Computer                          = 5,
	INTERACTION_ICON_Driver                            = 6,
	INTERACTION_ICON_Gunner                            = 7,
	INTERACTION_ICON_Smash                             = 8,
	INTERACTION_ICON_CannotUse                         = 9,
	INTERACTION_ICON_FlipVehicle                       = 10,
	INTERACTION_ICON_VehicleMiddleLeftSeat             = 11,
	INTERACTION_ICON_VehicleMiddleRightSeat            = 12,
	INTERACTION_ICON_Open                              = 13,
	INTERACTION_ICON_Trade                             = 14,
	INTERACTION_ICON_Objective                         = 15,
	INTERACTION_ICON_PickUp                            = 16,
	INTERACTION_ICON_Full                              = 17,
	INTERACTION_ICON_FullFadeOut                       = 18,
	INTERACTION_ICON_MAX                               = 19
};*/

// Enum WillowGame.WillowRadarManager.ERadarIconType
/*enum ERadarIconType
{
	RadarIconType_None                                 = 0,
	RadarIconType_Gunfire                              = 1,
	RadarIconType_Threat                               = 2,
	RadarIconType_BountyBoard                          = 3,
	RadarIconType_Shop                                 = 4,
	RadarIconType_Health                               = 5,
	RadarIconType_NewU                                 = 6,
	RadarIconType_CatchARide                           = 7,
	RadarIconType_Settlement                           = 8,
	RadarIconType_MissionNPC                           = 9,
	RadarIconType_NamedNPC                             = 10,
	RadarIconType_Loot                                 = 11,
	RadarIconType_Objective                            = 12,
	RadarIconType_Checkpoint                           = 13,
	RadarIconType_TravelStation                        = 14,
	RadarIconType_CustomizationStation                 = 15,
	RadarIconType_LevelTransition                      = 16,
	RadarIconType_MAX                                  = 17
};*/

// Enum WillowGame.AIPawnBalanceDefinition.EAITransformed
/*enum EAITransformed
{
	EAIT_None                                          = 0,
	EAIT_Fire                                          = 1,
	EAIT_Shock                                         = 2,
	EAIT_Corrosive                                     = 3,
	EAIT_Custom                                        = 4,
	EAIT_Slagged                                       = 5,
	EAIT_MAX                                           = 6
};*/

// Enum WillowGame.AIPawnBalanceDefinition.EItemGameStageSource
/*enum EItemGameStageSource
{
	IGSS_ExpLevelOfBalancedActor                       = 0,
	IGSS_GameStageOfBalancedActor                      = 1,
	IGSS_MAX                                           = 2
};*/

// Enum WillowGame.IUpdatePostProcessOverride.EAttributeScalarParamOperand
/*enum EAttributeScalarParamOperand
{
	ASPO_None                                          = 0,
	ASPO_Add                                           = 1,
	ASPO_Subtract                                      = 2,
	ASPO_MAX                                           = 3
};*/

// Enum WillowGame.IScreenParticle.ScreenParticleScalingMode
/*enum ScreenParticleScalingMode
{
	ESPSM_FitToHorizontal                              = 0,
	ESPSM_FitToVertical                                = 1,
	ESPSM_FitToExterior                                = 2,
	ESPSM_FitToInterior                                = 3,
	ESPSM_FitToViewport                                = 4,
	ESPSM_MAX                                          = 5
};*/

// Enum WillowGame.IUpdatePostProcessOverride.EPostProcessOverrideUpdatePhase
/*enum EPostProcessOverrideUpdatePhase
{
	PPUPDATEPHASE_None                                 = 0,
	PPUPDATEPHASE_TransitionIn                         = 1,
	PPUPDATEPHASE_TransitionHold                       = 2,
	PPUPDATEPHASE_TransitionOut                        = 3,
	PPUPDATEPHASE_MAX                                  = 4
};*/

// Enum WillowGame.AnimNotify_UseBehavior.EUseBehaviorContext
/*enum EUseBehaviorContext
{
	EUBC_ActorSkelMeshIsAttachedTo                     = 0,
	EUBC_ObjectSkelMeshWasCreatedBy                    = 1,
	EUBC_MAX                                           = 2
};*/

// Enum WillowGame.WillowDeclarations.EStoragePanelBackground
/*enum EStoragePanelBackground
{
	ESPB_Inventory                                     = 0,
	ESPB_Health                                        = 1,
	ESPB_Weapons                                       = 2,
	ESPB_Ammo                                          = 3,
	ESPB_Bank                                          = 4,
	ESPB_Stash                                         = 5,
	EPSB_Blackmarket                                   = 6,
	EPSB_Custom                                        = 7,
	EStoragePanelBackground_MAX                        = 8
};*/

// Enum WillowGame.WillowDeclarations.EQuickWeaponSlot
/*enum EQuickWeaponSlot
{
	QuickSelectNone                                    = 0,
	QuickSelectUp                                      = 1,
	QuickSelectDown                                    = 2,
	QuickSelectLeft                                    = 3,
	QuickSelectRight                                   = 4,
	EQuickWeaponSlot_MAX                               = 5
};*/

// Enum WillowGame.WillowDeclarations.EEquipmentLoc
/*enum EEquipmentLoc
{
	EQUIPLOC_Shield                                    = 0,
	EQUIPLOC_GrenadeMod                                = 1,
	EQUIPLOC_ClassMod                                  = 2,
	EQUIPLOC_Artifact                                  = 3,
	EQUIPLOC_None                                      = 4,
	EQUIPLOC_MAX                                       = 5
};*/

// Enum WillowGame.WillowWeaponTypes.EWeaponType
/*enum EWeaponType
{
	WT_Pistol                                          = 0,
	WT_Shotgun                                         = 1,
	WT_SMG                                             = 2,
	WT_SniperRifle                                     = 3,
	WT_AssaultRifle                                    = 4,
	WT_RocketLauncher                                  = 5,
	WT_MAX                                             = 6
};*/

// Enum WillowGame.WillowWeaponTypes.EWeaponPartType
/*enum EWeaponPartType
{
	WP_Body                                            = 0,
	WP_Grip                                            = 1,
	WP_Barrel                                          = 2,
	WP_Sight                                           = 3,
	WP_Stock                                           = 4,
	WP_Elemental                                       = 5,
	WP_Accessory1                                      = 6,
	WP_Accessory2                                      = 7,
	WP_Material                                        = 8,
	WP_Prefix                                          = 9,
	WP_Title                                           = 10,
	WP_MAX                                             = 11
};*/

// Enum WillowGame.WillowWeaponTypes.EWeaponPartVariation
/*enum EWeaponPartVariation
{
	WeaponPartVar_Default                              = 0,
	WeaponPartVar_One                                  = 1,
	WeaponPartVar_Two                                  = 2,
	WeaponPartVar_Three                                = 3,
	WeaponPartVar_MAX                                  = 4
};*/

// Enum WillowGame.WillowWeaponTypes.EWeaponEventType
/*enum EWeaponEventType
{
	WEAPONEVENT_Advance                                = 0,
	WEAPONEVENT_Stop                                   = 1,
	WEAPONEVENT_Pause                                  = 2,
	WEAPONEVENT_UnPause                                = 3,
	WEAPONEVENT_MAX                                    = 4
};*/

// Enum WillowGame.WillowItemTypes.EItemPartType
/*enum EItemPartType
{
	IP_Alpha                                           = 0,
	IP_Beta                                            = 1,
	IP_Gamma                                           = 2,
	IP_Delta                                           = 3,
	IP_Epsilon                                         = 4,
	IP_Zeta                                            = 5,
	IP_Eta                                             = 6,
	IP_Theta                                           = 7,
	IP_Material                                        = 8,
	IP_Prefix                                          = 9,
	IP_Title                                           = 10,
	IP_MAX                                             = 11
};*/

// Enum WillowGame.WillowDeclarations.ERewardPopup
/*enum ERewardPopup
{
	ERP_BadassToken                                    = 0,
	ERP_CharacterHead                                  = 1,
	ERP_CharacterSkin                                  = 2,
	ERP_VehicleSkin                                    = 3,
	ERP_MAX                                            = 4
};*/

// Enum WillowGame.ArtifactPartDefinition.EArtifactPartType
/*enum EArtifactPartType
{
	ARTIFACT_PART_EnableFirstEffect                    = 0,
	ARTIFACT_PART_EnableSecondEffect                   = 1,
	ARTIFACT_PART_EnableThirdEffect                    = 2,
	ARTIFACT_PART_EnableFourthEffect                   = 3,
	ARTIFACT_PART_UpgradeEffect                        = 4,
	ARTIFACT_PART_Body                                 = 5,
	ARTIFACT_PART_MAX                                  = 6
};*/

// Enum WillowGame.AssetLibraryManager.EAssetLibrary
/*enum EAssetLibrary
{
	AL_WeaponTypes                                     = 0,
	AL_WeaponParts                                     = 1,
	AL_ItemTypes                                       = 2,
	AL_ItemParts                                       = 3,
	AL_Manufacturer                                    = 4,
	AL_Balance                                         = 5,
	AL_MAX                                             = 6
};*/

// Enum WillowGame.AttackLocation_Height.EHeightRestriction
/*enum EHeightRestriction
{
	HeightRestriction_Within                           = 0,
	HeightRestriction_Above                            = 1,
	HeightRestriction_Below                            = 2,
	HeightRestriction_MAX                              = 3
};*/

// Enum WillowGame.AttackLocation_ParentDistance.EParentDistance
/*enum EParentDistance
{
	EParentDist_Closer                                 = 0,
	EParentDist_Further                                = 1,
	EParentDist_MAX                                    = 2
};*/

// Enum WillowGame.AttributePresentationDefinition.EAttributeValueSignStyle
/*enum EAttributeValueSignStyle
{
	SIGNSTYLE_AsIs                                     = 0,
	SIGNSTYLE_Positive                                 = 1,
	SIGNSTYLE_Negative                                 = 2,
	SIGNSTYLE_AsIsAnyStyle                             = 3,
	SIGNSTYLE_OppositeSign                             = 4,
	SIGNSTYLE_MAX                                      = 5
};*/

// Enum WillowGame.AttributeSlotEffectAttributeValueResolver.EAttributeSlotEffectProperty
/*enum EAttributeSlotEffectProperty
{
	ATTRSLOTEFFECTPROP_Grade                           = 0,
	ATTRSLOTEFFECTPROP_ComputedModifierValue           = 1,
	ATTRSLOTEFFECTPROP_MAX                             = 2
};*/

// Enum WillowGame.AvatarAwardUtility.EWillowAvatarAwards
/*enum EWillowAvatarAwards
{
	WAA_Invalid                                        = 0,
	WAA_One                                            = 1,
	WAA_Two                                            = 2,
	WAA_Three                                          = 3,
	WAA_MAX                                            = 4
};*/

// Enum WillowGame.WillowPhysicalMaterialProperty.EImpactUsage
/*enum EImpactUsage
{
	IU_None                                            = 0,
	IU_Footstep                                        = 1,
	IU_Bullet                                          = 2,
	IU_MAX                                             = 3
};*/

// Enum WillowGame.WillowPhysicalMaterialProperty.EDamageSurfaceType
/*enum EDamageSurfaceType
{
	DMGSURFACE_Generic                                 = 0,
	DMGSURFACE_Flesh                                   = 1,
	DMGSURFACE_Armor                                   = 2,
	DMGSURFACE_Shield                                  = 3,
	DMGSURFACE_MAX                                     = 4
};*/

// Enum WillowGame.StatusEffectDefinition.EStatusEffectType
/*enum EStatusEffectType
{
	STATUS_EFFECT_Unknown                              = 0,
	STATUS_EFFECT_Ignite                               = 1,
	STATUS_EFFECT_Corrosive                            = 2,
	STATUS_EFFECT_Shock                                = 3,
	STATUS_EFFECT_Amp                                  = 4,
	STATUS_EFFECT_Slow                                 = 5,
	STATUS_EFFECT_Healing                              = 6,
	STATUS_EFFECT_MAX                                  = 7
};*/

// Enum WillowGame.GlobalsDefinition.EItemRarity
/*enum EItemRarity
{
	RARITY_Unknown                                     = 0,
	RARITY_Common                                      = 1,
	RARITY_Uncommon                                    = 2,
	RARITY_Rare                                        = 3,
	RARITY_VeryRare                                    = 4,
	RARITY_Legendary                                   = 5,
	RARITY_Seraph                                      = 6,
	RARITY_Rainbow                                     = 7,
	RARITY_MAX                                         = 8
};*/

// Enum WillowGame.GlobalsDefinition.EDropLifeSpanType
/*enum EDropLifeSpanType
{
	DROP_VeryShortLived                                = 0,
	DROP_ShortLived                                    = 1,
	DROP_LongLived                                     = 2,
	DROP_LiveForever                                   = 3,
	DROP_LiveAsLongAsLevel                             = 4,
	DROP_MAX                                           = 5
};*/

// Enum WillowGame.GlobalsDefinition.ENumClassPlayers
/*enum ENumClassPlayers
{
	NCP_OnePlayer                                      = 0,
	NCP_TwoPlayers                                     = 1,
	NCP_ThreePlayers                                   = 2,
	NCP_FourPlayers                                    = 3,
	NCP_MAX                                            = 4
};*/

// Enum WillowGame.WillowGFxMovie.ERTTType
/*enum ERTTType
{
	RTTT_Cell                                          = 0,
	RTTT_HalfCell                                      = 1,
	RTTT_Card                                          = 2,
	RTTT_QuickSlot                                     = 3,
	RTTT_MAX                                           = 4
};*/

// Enum WillowGame.IMission.EMissionStatus
/*enum EMissionStatus
{
	MS_NotStarted                                      = 0,
	MS_Active                                          = 1,
	MS_RequiredObjectivesComplete                      = 2,
	MS_ReadyToTurnIn                                   = 3,
	MS_Complete                                        = 4,
	MS_Failed                                          = 5,
	MS_MAX                                             = 6
};*/

// Enum WillowGame.IMission.EMissionEvent
/*enum EMissionEvent
{
	ME_LevelLoad                                       = 0,
	ME_StatusChanged                                   = 1,
	ME_ObjectiveSetChanged                             = 2,
	ME_ObjectiveUpdated                                = 3,
	ME_ObjectiveCleared                                = 4,
	ME_ObjectiveComplete                               = 5,
	ME_ActiveMission                                   = 6,
	ME_NoLongerActiveMission                           = 7,
	ME_MAX                                             = 8
};*/

// Enum WillowGame.IMissionDirector.EMissionBranchEnding
/*enum EMissionBranchEnding
{
	EMBE_None                                          = 0,
	EMBE_PathA                                         = 1,
	EMBE_PathB                                         = 2,
	EMBE_MAX                                           = 3
};*/

// Enum WillowGame.IMission.EObjectiveDependencyStatus
/*enum EObjectiveDependencyStatus
{
	EODS_Complete                                      = 0,
	EODS_Active                                        = 1,
	EODS_MAX                                           = 2
};*/

// Enum WillowGame.IMission.EMissionReaction
/*enum EMissionReaction
{
	MR_NotStarted                                      = 0,
	MR_Active                                          = 1,
	MR_ReadyToTurnIn                                   = 2,
	MR_Complete                                        = 3,
	MR_MAX                                             = 4
};*/

// Enum WillowGame.FastTravelStationDefinition.EFastTravelAccessibilityTime
/*enum EFastTravelAccessibilityTime
{
	FTAT_Always                                        = 0,
	FTAT_Halloween                                     = 1,
	FTAT_Thanksgiving                                  = 2,
	FTAT_Christmas                                     = 3,
	FTAT_MAX                                           = 4
};*/

// Enum WillowGame.WillowPlayerController.EWillowNetworkType
/*enum EWillowNetworkType
{
	WNT_Internet                                       = 0,
	WNT_SystemLink                                     = 1,
	WNT_Offline                                        = 2,
	WNT_MAX                                            = 3
};*/

// Enum WillowGame.WillowPlayerController.EOnlineMessageType
/*enum EOnlineMessageType
{
	OMT_None                                           = 0,
	OMT_Network                                        = 1,
	OMT_Dlc                                            = 2,
	OMT_Mission                                        = 3,
	OMT_Travel                                         = 4,
	OMT_Misc                                           = 5,
	OMT_MAX                                            = 6
};*/

// Enum WillowGame.WillowPlayerController.EBackButtonScreen
/*enum EBackButtonScreen
{
	CS_None                                            = 0,
	CS_MissionLog                                      = 1,
	CS_Map                                             = 2,
	CS_Inventory                                       = 3,
	CS_Skills                                          = 4,
	CS_Challenges                                      = 5,
	CS_MAX                                             = 6
};*/

// Enum WillowGame.WillowPlayerController.EQuickSelectSlotStatus
/*enum EQuickSelectSlotStatus
{
	QSSS_Available                                     = 0,
	QSSS_Locked                                        = 1,
	QSSS_Selected                                      = 2,
	QSSS_MAX                                           = 3
};*/

// Enum WillowGame.WillowPlayerController.ELoadGameResult
/*enum ELoadGameResult
{
	LGR_Failure                                        = 0,
	LGR_Success                                        = 1,
	LGR_Pending                                        = 2,
	LGR_CorruptedFailure                               = 3,
	LGR_UnloadedDLCFailure                             = 4,
	LGR_DuplicateFailure                               = 5,
	LGR_MAX                                            = 6
};*/

// Enum WillowGame.WillowPlayerController.EConnectionAttemptStatus
/*enum EConnectionAttemptStatus
{
	COAS_ServerFull                                    = 0,
	COAS_ServerUnavailable                             = 1,
	COAS_DLCMismatch                                   = 2,
	COAS_ClientOutdated                                = 3,
	COAS_ServerOutdated                                = 4,
	COAS_MAX                                           = 5
};*/

// Enum WillowGame.WillowTradeManager.PlayerTradingStance
/*enum PlayerTradingStance
{
	PTS_Deciding                                       = 0,
	PTS_TradeReady                                     = 1,
	PTS_DuelReady                                      = 2,
	PTS_Disconnected                                   = 3,
	PTS_MAX                                            = 4
};*/

// Enum WillowGame.WillowTradeManager.TradeManagerReason
/*enum TradeManagerReason
{
	TMR_PlayerBusy                                     = 0,
	TMR_PlayerOutOfRange                               = 1,
	TMR_PlayerRequestRefusedSelf                       = 2,
	TMR_PlayerRequestRefusedPartner                    = 3,
	TMR_PlayerRequestWithdrawnSelf                     = 4,
	TMR_PlayerRequestWithdrawnPartner                  = 5,
	TMR_RedundantRequest                               = 6,
	TMR_TradingDisabled                                = 7,
	TMR_CanceledBySelf                                 = 8,
	TMR_CanceledByPartner                              = 9,
	TMR_TradeCompleteSuccessfully                      = 10,
	TMR_DuelWon                                        = 11,
	TMR_DuelLost                                       = 12,
	TMR_DuelDraw                                       = 13,
	TMR_TradeCanceled                                  = 14,
	TMR_MAX                                            = 15
};*/

// Enum WillowGame.WillowLeviathanService.EDiagnosticEventType
/*enum EDiagnosticEventType
{
	EDET_DetectedLostProfile                           = 0,
	EDET_RestoredBadassPoints                          = 1,
	EDET_RestoredCustomizations                        = 2,
	EDET_ReattemptingProfileRead                       = 3,
	EDET_SuccessfulProfileReRead                       = 4,
	EDET_MAX                                           = 5
};*/

// Enum WillowGame.WillowLeviathanService.ECustomizationEventType
/*enum ECustomizationEventType
{
	ECET_CustomizationUnlocked                         = 0,
	ECET_CustomizationSelectNewCharacter               = 1,
	ECET_CustomizationSelectQuickChange                = 2,
	ECET_MAX                                           = 3
};*/

// Enum WillowGame.WillowLeviathanService.EPartnerJoinLeaveType
/*enum EPartnerJoinLeaveType
{
	PJLT_Host                                          = 0,
	PJLT_Client                                        = 1,
	PJLT_HostSplit                                     = 2,
	PJLT_ClientSplit                                   = 3,
	PJLT_MAX                                           = 4
};*/

// Enum WillowGame.WillowLeviathanService.EPointType
/*enum EPointType
{
	POINTTYPE_Skill                                    = 0,
	POINTTYPE_BadassToken                              = 1,
	POINTTYPE_UNUSED                                   = 2,
	POINTTYPE_UNUSED01                                 = 3,
	POINTTYPE_UNUSED02                                 = 4,
	POINTTYPE_UNUSED03                                 = 5,
	POINTTYPE_UNUSED04                                 = 6,
	POINTTYPE_UNUSED05                                 = 7,
	POINTTYPE_UNUSED06                                 = 8,
	POINTTYPE_UNUSED07                                 = 9,
	POINTTYPE_UNUSED08                                 = 10,
	POINTTYPE_PTExtension                              = 11,
	POINTTYPE_PTExtension01                            = 12,
	POINTTYPE_PTExtension02                            = 13,
	POINTTYPE_PTExtension03                            = 14,
	POINTTYPE_PTExtension04                            = 15,
	POINTTYPE_MAX                                      = 16
};*/

// Enum WillowGame.WillowLeviathanService.EMissionFastForwardResult
/*enum EMissionFastForwardResult
{
	EMFFR_PlayerAccepted                               = 0,
	EMFFR_PlayerDeclined                               = 1,
	EMFFR_InvalidPrompt                                = 2,
	EMFFR_MAX                                          = 3
};*/

// Enum WillowGame.WillowLeviathanService.EDuelResult
/*enum EDuelResult
{
	DR_Won                                             = 0,
	DR_Lost                                            = 1,
	DR_Drew                                            = 2,
	DR_MAX                                             = 3
};*/

// Enum WillowGame.WillowLeviathanService.EReviveReason
/*enum EReviveReason
{
	REVIVE_KilledEnemy                                 = 0,
	REVIVE_LeveledUp                                   = 1,
	REVIVE_PartnerRevived                              = 2,
	REVIVE_Respawned                                   = 3,
	REVIVE_OtherRevived                                = 4,
	REVIVE_AutoRevived                                 = 5,
	REVIVE_UNUSED                                      = 6,
	REVIVE_UNUSED01                                    = 7,
	REVIVE_UNUSED02                                    = 8,
	REVIVE_UNUSED03                                    = 9,
	REVIVE_UNUSED04                                    = 10,
	REVIVE_RevReasonExtension                          = 11,
	REVIVE_RevReasonExtension01                        = 12,
	REVIVE_RevReasonExtension02                        = 13,
	REVIVE_RevReasonExtension03                        = 14,
	REVIVE_RevReasonExtension04                        = 15,
	REVIVE_MAX                                         = 16
};*/

// Enum WillowGame.WillowLeviathanService.ECharacterKilledReason
/*enum ECharacterKilledReason
{
	ECKR_BledOut                                       = 0,
	ECKR_GaveUp                                        = 1,
	ECKR_KillVolume                                    = 2,
	ECKR_OutOfBounds                                   = 3,
	ECKR_UNUSED                                        = 4,
	ECKR_UNUSED01                                      = 5,
	ECKR_UNUSED02                                      = 6,
	ECKR_UNUSED03                                      = 7,
	ECKR_UNUSED04                                      = 8,
	ECKR_UNUSED05                                      = 9,
	ECKR_UNUSED06                                      = 10,
	ECKR_CharKillExtension                             = 11,
	ECKR_CharKillExtension01                           = 12,
	ECKR_CharKillExtension02                           = 13,
	ECKR_CharKillExtension03                           = 14,
	ECKR_CharKillExtension04                           = 15,
	ECKR_MAX                                           = 16
};*/

// Enum WillowGame.WillowLeviathanService.EEventId
/*enum EEventId
{
	EI_PerformanceSample                               = 0,
	EI_AdjustResource                                  = 1,
	EI_AdjustResourceLimit                             = 2,
	EI_EnemyKilled                                     = 3,
	EI_BulletFired                                     = 4,
	EI_LocationPulse                                   = 5,
	EI_ExperienceGained                                = 6,
	EI_Attack                                          = 7,
	EI_CharacterCreated                                = 8,
	EI_CharacterLoaded                                 = 9,
	EI_CharacterDeleted                                = 10,
	EI_GameplayStart                                   = 11,
	EI_ExitedGameplay                                  = 12,
	EI_ChangePlaythrough                               = 13,
	EI_NewExcursion                                    = 14,
	EI_ItemSpawned                                     = 15,
	EI_ItemToInventory                                 = 16,
	EI_ItemFromInventory                               = 17,
	EI_ItemMovedInInventory                            = 18,
	EI_BlackMarketUpgradePurchased                     = 19,
	EI_PointsEarned                                    = 20,
	EI_PointsSpent                                     = 21,
	EI_PointsReset                                     = 22,
	EI_PlayerCharacterGainedLevel                      = 23,
	EI_MinorAction                                     = 24,
	EI_RenameCharacter                                 = 25,
	EI_PartnerJoinedGame                               = 26,
	EI_PartnerLeftGame                                 = 27,
	EI_ResourceDepleted                                = 28,
	EI_CharacterDown                                   = 29,
	EI_CharacterKilled                                 = 30,
	EI_CharacterRevived                                = 31,
	EI_MissionStatusChanged                            = 32,
	EI_MissionObjectiveSetActivated                    = 33,
	EI_MissionObjectiveChanged                         = 34,
	EI_DuelStarted                                     = 35,
	EI_DeclinedDuel                                    = 36,
	EI_DuelEnded                                       = 37,
	EI_SpawnVehicle                                    = 38,
	EI_DestroyVehicle                                  = 39,
	EI_CustomizeCharacter                              = 40,
	EI_ChallengeLevelCompleted                         = 41,
	EI_DiscoverLocation                                = 42,
	EI_TeleportedToVehicle                             = 43,
	EI_WieldedWeaponChanged                            = 44,
	EI_BeginPlaySession                                = 45,
	EI_MissionFastForward                              = 46,
	EI_Diagnostic                                      = 47,
	EI_MAX                                             = 48
};*/

// Enum WillowGame.WillowLeviathanService.EVehicleDestructionReason
/*enum EVehicleDestructionReason
{
	EVDR_Damage                                        = 0,
	EVDR_VehDestOutOfBounds                            = 1,
	EVDR_VehDestRespawned                              = 2,
	EVDR_UNUSED                                        = 3,
	EVDR_UNUSED01                                      = 4,
	EVDR_UNUSED02                                      = 5,
	EVDR_UNUSED03                                      = 6,
	EVDR_UNUSED04                                      = 7,
	EVDR_UNUSED05                                      = 8,
	EVDR_UNUSED06                                      = 9,
	EVDR_UNUSED07                                      = 10,
	EVDR_VehDestExtension                              = 11,
	EVDR_VehDestExtension01                            = 12,
	EVDR_VehDestExtension02                            = 13,
	EVDR_VehDestExtension03                            = 14,
	EVDR_VehDestExtension04                            = 15,
	EVDR_MAX                                           = 16
};*/

// Enum WillowGame.WillowLeviathanService.EDeclineDuelReason
/*enum EDeclineDuelReason
{
	DDR_DuelingDisabled                                = 0,
	DDR_DuelTimedOut                                   = 1,
	DDR_MAX                                            = 2
};*/

// Enum WillowGame.WillowLeviathanService.EMinorActionType
/*enum EMinorActionType
{
	EMAT_DisableTraining                               = 0,
	EMAT_UseMouseKeyboard                              = 1,
	EMAT_UseController                                 = 2,
	EMAT_SplitScreenBegin                              = 3,
	EMAT_SplitScreenEnd                                = 4,
	EMAT_UseVending                                    = 5,
	EMAT_StoreCompare                                  = 6,
	EMAT_UNUSED                                        = 7,
	EMAT_UNUSED01                                      = 8,
	EMAT_UNUSED02                                      = 9,
	EMAT_UNUSED03                                      = 10,
	EMAT_MAExtension                                   = 11,
	EMAT_MAExtension01                                 = 12,
	EMAT_MAExtension02                                 = 13,
	EMAT_MAExtension03                                 = 14,
	EMAT_MAExtension04                                 = 15,
	EMAT_MAExtension05                                 = 16,
	EMAT_MAExtension06                                 = 17,
	EMAT_MAExtension07                                 = 18,
	EMAT_MAExtension08                                 = 19,
	EMAT_MAExtension09                                 = 20,
	EMAT_MAX                                           = 21
};*/

// Enum WillowGame.WillowLeviathanService.EReadiedWeaponState
/*enum EReadiedWeaponState
{
	ERWS_NotReadied                                    = 0,
	ERWS_MainHand                                      = 1,
	ERWS_OffHand                                       = 2,
	ERWS_NotWielded                                    = 3,
	ERWS_MAX                                           = 4
};*/

// Enum WillowGame.WillowLeviathanService.EItemLocation
/*enum EItemLocation
{
	EIL_ItemLocUnknown                                 = 0,
	EIL_Store                                          = 1,
	EIL_Ground                                         = 2,
	EIL_Award                                          = 3,
	EIL_Consumed                                       = 4,
	EIL_PlayerDrop                                     = 5,
	EIL_Container                                      = 6,
	EIL_Bank                                           = 7,
	EIL_Stash                                          = 8,
	EIL_TradePartner                                   = 9,
	EIL_Cheat                                          = 10,
	EIL_MarketingAward                                 = 11,
	EIL_BackpackInventory                              = 12,
	EIL_Buyback                                        = 13,
	EIL_SaveGame                                       = 14,
	EIL_Destroyed                                      = 15,
	EIL_MAX                                            = 16
};*/

// Enum WillowGame.WillowLeviathanService.EInventorySlot
/*enum EInventorySlot
{
	EIS_EquippedItem                                   = 0,
	EIS_QuickSelectUp                                  = 1,
	EIS_QuickSelectDown                                = 2,
	EIS_QuickSelectLeft                                = 3,
	EIS_QuickSelectRight                               = 4,
	EIS_Backpack                                       = 5,
	EIS_UNUSED                                         = 6,
	EIS_UNUSED01                                       = 7,
	EIS_UNUSED02                                       = 8,
	EIS_UNUSED03                                       = 9,
	EIS_UNUSED04                                       = 10,
	EIS_InvSlotExtension                               = 11,
	EIS_InvSlotExtension01                             = 12,
	EIS_InvSlotExtension02                             = 13,
	EIS_InvSlotExtension03                             = 14,
	EIS_InvSlotExtension04                             = 15,
	EIS_MAX                                            = 16
};*/

// Enum WillowGame.WillowLeviathanService.EExperienceSource
/*enum EExperienceSource
{
	EES_XPUnknown                                      = 0,
	EES_XPCombat                                       = 1,
	EES_PlotMissionAward                               = 2,
	EES_Discovery                                      = 3,
	EES_SideMissionAward                               = 4,
	EES_UNUSED                                         = 5,
	EES_UNUSED01                                       = 6,
	EES_UNUSED02                                       = 7,
	EES_UNUSED03                                       = 8,
	EES_UNUSED04                                       = 9,
	EES_UNUSED05                                       = 10,
	EES_XPExtension                                    = 11,
	EES_XPExtension01                                  = 12,
	EES_XPExtension02                                  = 13,
	EES_XPExtension03                                  = 14,
	EES_XPExtension04                                  = 15,
	EES_MAX                                            = 16
};*/

// Enum WillowGame.WillowLeviathanService.ESplitScreenConfiguration
/*enum ESplitScreenConfiguration
{
	SSC_Single1P                                       = 0,
	SSC_Vertical2P                                     = 1,
	SSC_Horizontal2P                                   = 2,
	SSC_Vertical3P                                     = 3,
	SSC_Horizontal3P                                   = 4,
	SSC_Quad4p                                         = 5,
	SSC_MAX                                            = 6
};*/

// Enum WillowGame.WillowTradeManager.TradeSlotStatus
/*enum TradeSlotStatus
{
	TSS_Empty                                          = 0,
	TSS_Item                                           = 1,
	TSS_Weapon                                         = 2,
	TSS_MAX                                            = 3
};*/

// Enum WillowGame.WillowTradeManager.TradeManagerStatus
/*enum TradeManagerStatus
{
	TMS_Uninitialized                                  = 0,
	TMS_OutgoingRequestPending                         = 1,
	TMS_IncomingRequestPending                         = 2,
	TMS_Trading                                        = 3,
	TMS_Dueling                                        = 4,
	TMS_ResolvingTrade                                 = 5,
	TMS_ResolvingDuelWon                               = 6,
	TMS_ResolvingDuelLost                              = 7,
	TMS_MAX                                            = 8
};*/

// Enum WillowGame.WillowPlayerController.EColiseumStatType
/*enum EColiseumStatType
{
	ECSTAT_Kills                                       = 0,
	ECSTAT_MAX                                         = 1
};*/

// Enum WillowGame.WillowPlayerController.EColiseumGameOver
/*enum EColiseumGameOver
{
	ECGM_TryAgain                                      = 0,
	ECGM_Lobby                                         = 1,
	ECGM_MAX                                           = 2
};*/

// Enum WillowGame.WillowHUD.ECountDownLength
/*enum ECountDownLength
{
	ECDL_Ten                                           = 0,
	ECDL_Five                                          = 1,
	ECDL_Four                                          = 2,
	ECDL_Three                                         = 3,
	ECDL_Two                                           = 4,
	ECDL_One                                           = 5,
	ECDL_None                                          = 6,
	ECDL_MAX                                           = 7
};*/

// Enum WillowGame.WillowHUD.EColiseumUpdateMode
/*enum EColiseumUpdateMode
{
	E_Toggle                                           = 0,
	E_TurnOff                                          = 1,
	E_TurnOn                                           = 2,
	E_MAX                                              = 3
};*/

// Enum WillowGame.WillowHUD.EHUDEquippedCardType
/*enum EHUDEquippedCardType
{
	HUDEquippedCard_Weapon                             = 0,
	HUDEquippedCard_Shield                             = 1,
	HUDEquippedCard_GrenadeMod                         = 2,
	HUDEquippedCard_ClassMod                           = 3,
	HUDEquippedCard_Artifact                           = 4,
	HUDEquippedCard_MAX                                = 5
};*/

// Enum WillowGame.WillowHUD.EColiseumNotifyType
/*enum EColiseumNotifyType
{
	ECNT_Resupply                                      = 0,
	ECNT_Refill                                        = 1,
	ECNT_WaveEnded                                     = 2,
	ECNT_MAX                                           = 3
};*/

// Enum WillowGame.WillowHUD.EHUDPickupCardType
/*enum EHUDPickupCardType
{
	HUDPickupCard_Weapon                               = 0,
	HUDPickupCard_Shield                               = 1,
	HUDPickupCard_GrenadeMod                           = 2,
	HUDPickupCard_ClassMod                             = 3,
	HUDPickupCard_Artifact                             = 4,
	HUDPickupCard_Item                                 = 5,
	HUDPickupCard_MAX                                  = 6
};*/

// Enum WillowGame.WillowProfileSettings.EDecalSettingOptions
/*enum EDecalSettingOptions
{
	DSO_Normal                                         = 0,
	DSO_High                                           = 1,
	DSO_MAX                                            = 2
};*/

// Enum WillowGame.WillowProfileSettings.EProfileViewDistanceOptions
/*enum EProfileViewDistanceOptions
{
	PVDO_Low                                           = 0,
	PVDO_Medium                                        = 1,
	PVDO_High                                          = 2,
	PVDO_UltraHigh                                     = 3,
	PVDO_MAX                                           = 4
};*/

// Enum WillowGame.WillowProfileSettings.ESplitDirectionOptions
/*enum ESplitDirectionOptions
{
	SDO_Horizontal                                     = 0,
	SDO_Vertical                                       = 1,
	SDO_MAX                                            = 2
};*/

// Enum WillowGame.WillowProfileSettings.EProfileColorBlindModeOptions
/*enum EProfileColorBlindModeOptions
{
	PCBMO_Invalid                                      = 0,
	PCBMO_Off                                          = 1,
	PCBMO_Deuteranopia                                 = 2,
	PCBMO_Protanopia                                   = 3,
	PCBMO_Tritanopia                                   = 4,
	PCBMO_MAX                                          = 5
};*/

// Enum WillowGame.WillowPlayerController.EInstinctSkillActions
/*enum EInstinctSkillActions
{
	ISA_Targeting                                      = 0,
	ISA_Targeted                                       = 1,
	ISA_KilledEnemy                                    = 2,
	ISA_AppliedStatusEffect                            = 3,
	ISA_CriticalHit                                    = 4,
	ISA_TookPhysicalDamage                             = 5,
	ISA_GaveDamage                                     = 6,
	ISA_TookStatusEffectDamage                         = 7,
	ISA_ScoredHit                                      = 8,
	ISA_DealtExplosiveDamage                           = 9,
	ISA_FriendWentDown                                 = 10,
	ISA_DealtStatusEffectDamage                        = 11,
	ISA_TookShieldDamage                               = 12,
	ISA_MAX                                            = 13
};*/

// Enum WillowGame.WillowSaveGameManager.ELoadPlayerBehavior
/*enum ELoadPlayerBehavior
{
	ELPB_LoadOnly                                      = 0,
	ELPB_LoadAndCache                                  = 1,
	ELPB_MAX                                           = 2
};*/

// Enum WillowGame.WillowSaveGameManager.ESaveGameManagerState
/*enum ESaveGameManagerState
{
	ESGMS_Idle                                         = 0,
	ESGMS_Saving                                       = 1,
	ESGMS_Deleting                                     = 2,
	ESGMS_Loading                                      = 3,
	ESGMS_ListLoading                                  = 4,
	ESGMS_LoadingWillowOneSave                         = 5,
	ESGMS_SavingProfile                                = 6,
	ESGMS_CountingCrossTitleSaveGames                  = 7,
	ESGMS_MAX                                          = 8
};*/

// Enum WillowGame.WillowSaveGameManager.CPAsync
/*enum CPAsync
{
	WORKRESULT_NONE                                    = 0,
	WORKRESULT_PENDING                                 = 1,
	WORKRESULT_SUCCESS                                 = 2,
	WORKRESULT_FAIL                                    = 3,
	WORKRESULT_FILENOTFOUND                            = 4,
	WORKRESULT_MAX                                     = 5
};*/

// Enum WillowGame.WillowSaveGameManager.ESaveVersionType
/*enum ESaveVersionType
{
	ESVT_File                                          = 0,
	ESVT_Player                                        = 1,
	ESVT_Graveyard                                     = 2,
	ESVT_MAX                                           = 3
};*/

// Enum WillowGame.BodyWeaponHoldDefinition.EBodyWeaponActionPosture
/*enum EBodyWeaponActionPosture
{
	BWAP_All                                           = 0,
	BWAP_Standing                                      = 1,
	BWAP_Crouched                                      = 2,
	BWAP_Injured                                       = 3,
	BWAP_MAX                                           = 4
};*/

// Enum WillowGame.BodyWeaponHoldDefinition.EBodyWeaponAction
/*enum EBodyWeaponAction
{
	BWA_Fire                                           = 0,
	BWA_FireRecoil                                     = 1,
	BWA_Melee                                          = 2,
	BWA_Reload                                         = 3,
	BWA_Equip                                          = 4,
	BWA_PutDown                                        = 5,
	BWA_PutDownSwap                                    = 6,
	BWA_ThrowGrenade                                   = 7,
	BWA_GrabEquip                                      = 8,
	BWA_MeleeSelf                                      = 9,
	BWA_MAX                                            = 10
};*/

// Enum WillowGame.PlayerEventProviderDefinition.EPlayerEventMessage
/*enum EPlayerEventMessage
{
	PEM_KilledChampion                                 = 0,
	PEM_SkillKill                                      = 1,
	PEM_KilledEnemy                                    = 2,
	PEM_KillStreak                                     = 3,
	PEM_ChallengeCompleted                             = 4,
	PEM_JoinedGame                                     = 5,
	PEM_SeatSwap                                       = 6,
	PEM_VehicleCatchAir                                = 7,
	PEM_KilledEnemyVehicle                             = 8,
	PEM_VehicleLowHealth                               = 9,
	PEM_VehicleFlipped                                 = 10,
	PEM_RanOverEnemy                                   = 11,
	PEM_VehicleSpawn                                   = 12,
	PEM_CriticalHitKill                                = 13,
	PEM_CriticalHit                                    = 14,
	PEM_OutOfAmmo                                      = 15,
	PEM_Reloading                                      = 16,
	PEM_RareWeaponEquipped                             = 17,
	PEM_PlayerIdle                                     = 18,
	PEM_PlayerDown                                     = 19,
	PEM_Death                                          = 20,
	PEM_DeathByFire                                    = 21,
	PEM_DeathByShock                                   = 22,
	PEM_EnemyDamaged                                   = 23,
	PEM_EnemyDamagedCritical                           = 24,
	PEM_EnemyShieldDown                                = 25,
	PEM_AchievedSecondWind                             = 26,
	PEM_RevivingPlayer                                 = 27,
	PEM_MissionTurnedIn                                = 28,
	PEM_IncomingChampion                               = 29,
	PEM_MapOpen                                        = 30,
	PEM_SkillPointToSpend                              = 31,
	PEM_CompareItems                                   = 32,
	PEM_TravelBlocked                                  = 33,
	PEM_MAX                                            = 34
};*/

// Enum WillowGame.GearLikenessMeshComponent.EGearLikenessSource
/*enum EGearLikenessSource
{
	LOOKLIKE_Source                                    = 0,
	LOOKLIKE_MainWeapon                                = 1,
	LOOKLIKE_OffhandWeapon                             = 2,
	LOOKLIKE_EquippedShield                            = 3,
	LOOKLIKE_EquippedGrenadeMod                        = 4,
	LOOKLIKE_EquippedClassMod                          = 5,
	LOOKLIKE_HolsteredSmallWeapon                      = 6,
	LOOKLIKE_HolsteredMediumWeapon                     = 7,
	LOOKLIKE_HolsteredLargeWeapon                      = 8,
	LOOKLIKE_HolsteredExtraLargeWeapon                 = 9,
	LOOKLIKE_MAX                                       = 10
};*/

// Enum WillowGame.IUsable.EUsabilityType
/*enum EUsabilityType
{
	UT_Primary                                         = 0,
	UT_Secondary                                       = 1,
	UT_MAX                                             = 2
};*/

// Enum WillowGame.IShop.EShopType
/*enum EShopType
{
	SType_Weapons                                      = 0,
	SType_Items                                        = 1,
	SType_Health                                       = 2,
	SType_BlackMarket                                  = 3,
	SType_MAX                                          = 4
};*/

// Enum WillowGame.IShop.EShopItemStatus
/*enum EShopItemStatus
{
	SIS_ItemCanBePurchased                             = 0,
	SIS_NotEnoughRoomForItem                           = 1,
	SIS_PlayerCannotAffordItem                         = 2,
	SIS_PlayerCannotUseItem                            = 3,
	SIS_InvalidItem                                    = 4,
	SIS_MAX                                            = 5
};*/

// Enum WillowGame.IShop.ETransactionStatus
/*enum ETransactionStatus
{
	TS_TransactionInProgress                           = 0,
	TS_TransactionComplete                             = 1,
	TS_TransactionFailed                               = 2,
	TS_MAX                                             = 3
};*/

// Enum WillowGame.WillowPawn.ESecondWindReason
/*enum ESecondWindReason
{
	ESECONDWIND_None                                   = 0,
	ESECONDWIND_KilledEnemy                            = 1,
	ESECONDWIND_LeveledUp                              = 2,
	ESECONDWIND_PartnerRevived                         = 3,
	ESECONDWIND_Skill_Res                              = 4,
	ESECONDWIND_AutoRevive                             = 5,
	ESECONDWIND_UNUSED                                 = 6,
	ESECONDWIND_UNUSED01                               = 7,
	ESECONDWIND_UNUSED02                               = 8,
	ESECONDWIND_UNUSED03                               = 9,
	ESECONDWIND_UNUSED04                               = 10,
	ESECONDWIND_ReasonExtension                        = 11,
	ESECONDWIND_ReasonExtension01                      = 12,
	ESECONDWIND_ReasonExtension02                      = 13,
	ESECONDWIND_ReasonExtension03                      = 14,
	ESECONDWIND_ReasonExtension04                      = 15,
	ESECONDWIND_MAX                                    = 16
};*/

// Enum WillowGame.WillowPawn.EResurrectReason
/*enum EResurrectReason
{
	ERR_Unknown                                        = 0,
	ERR_IDied                                          = 1,
	ERR_OtherDied                                      = 2,
	ERR_FellOutOfWorld                                 = 3,
	ERR_LDRes                                          = 4,
	ERR_Gibbed                                         = 5,
	ERR_OutsideWorldBounds                             = 6,
	ERR_LevelTravel                                    = 7,
	ERR_MAX                                            = 8
};*/

// Enum WillowGame.WillowPawn.EInjuredDeadState
/*enum EInjuredDeadState
{
	INJUREDDEAD_None                                   = 0,
	INJUREDDEAD_Start                                  = 1,
	INJUREDDEAD_StartCausePlayerDeath                  = 2,
	INJUREDDEAD_StartKillVolume                        = 3,
	INJUREDDEAD_InitRagdoll                            = 4,
	INJUREDDEAD_MAX                                    = 5
};*/

// Enum WillowGame.WillowPawn.EInjuredStage
/*enum EInjuredStage
{
	INJURED_Not                                        = 0,
	INJURED_Injured                                    = 1,
	INJURED_Targeted                                   = 2,
	INJURED_MostlyDead                                 = 3,
	INJURED_MAX                                        = 4
};*/

// Enum WillowGame.WillowWeaponTypes.EWeaponVisibleAmmoState
/*enum EWeaponVisibleAmmoState
{
	VISIBLE_AMMO_STATE_Default                         = 0,
	VISIBLE_AMMO_STATE_PendingReload                   = 1,
	VISIBLE_AMMO_STATE_MAX                             = 2
};*/

// Enum WillowGame.WillowWeaponTypes.EWeaponHand
/*enum EWeaponHand
{
	HAND_Right                                         = 0,
	HAND_Left                                          = 1,
	HAND_Centered                                      = 2,
	HAND_Hidden                                        = 3,
	HAND_MAX                                           = 4
};*/

// Enum WillowGame.WillowWeaponTypes.EWeaponBoneControllerType
/*enum EWeaponBoneControllerType
{
	WEAP_BONE_CONTROL_General                          = 0,
	WEAP_BONE_CONTROL_BarrelSpinner                    = 1,
	WEAP_BONE_CONTROL_MagazineSpinner                  = 2,
	WEAP_BONE_CONTROL_Flap                             = 3,
	WEAP_BONE_CONTROL_MAX                              = 4
};*/

// Enum WillowGame.WillowPawn.EInterpMode
/*enum EInterpMode
{
	EIM_None                                           = 0,
	EIM_Linear                                         = 1,
	EIM_NonLinear                                      = 2,
	EIM_MAX                                            = 3
};*/

// Enum WillowGame.BodyHitRegionDefinition.EGoreMode
/*enum EGoreMode
{
	GORE_Full                                          = 0,
	GORE_None                                          = 1,
	GORE_MAX                                           = 2
};*/

// Enum WillowGame.WillowPawn.EHolsteredGearState
/*enum EHolsteredGearState
{
	HGS_None                                           = 0,
	HGS_PendingFadeIn                                  = 1,
	HGS_FadingIn                                       = 2,
	HGS_FadingOut                                      = 3,
	HGS_MAX                                            = 4
};*/

// Enum WillowGame.ExperienceResourcePool.EExperienceType
/*enum EExperienceType
{
	EXPERIENCE_Generic                                 = 0,
	EXPERIENCE_Combat                                  = 1,
	EXPERIENCE_Mission                                 = 2,
	EXPERIENCE_MAX                                     = 3
};*/

// Enum WillowGame.SkillDefinition.ESkillKillEvents
/*enum ESkillKillEvents
{
	SKE_KilledEnemy                                    = 0,
	SKE_KilledByEnemy                                  = 1,
	SKE_MAX                                            = 2
};*/

// Enum WillowGame.SkillDefinition.ESkillKilledEventType
/*enum ESkillKilledEventType
{
	SKEVT_KilledEnemy                                  = 0,
	SKEVT_KilledFriendly                               = 1,
	SKEVT_KilledNeutral                                = 2,
	SKEVT_KilledByEnemy                                = 3,
	SKEVT_KilledByFriendly                             = 4,
	SKEVT_KilledByNeutral                              = 5,
	SKEVT_MAX                                          = 6
};*/

// Enum WillowGame.SkillDefinition.ESkillDamageEvents
/*enum ESkillDamageEvents
{
	SDE_DamagedEnemy                                   = 0,
	SDE_DamagedFriendly                                = 1,
	SDE_DamagedByEnemy                                 = 2,
	SDE_DamagedByFriendly                              = 3,
	SDE_DamagedNeutral_Deprecated                      = 4,
	SDE_DamagedByNeutral_Deprecated                    = 5,
	SDE_DamagedUnawareEnemy                            = 6,
	SDE_DamagedEnemyWithMeleeFromBehind                = 7,
	SDE_DamagedEnemyExposeDamageSurfaceType            = 8,
	SDE_MAX                                            = 9
};*/

// Enum WillowGame.SkillDefinition.ERequiredActionSkillState
/*enum ERequiredActionSkillState
{
	ERASS_Ignore                                       = 0,
	ERASS_MustBeRunning                                = 1,
	ERASS_MustNotBeRunning                             = 2,
	ERASS_MAX                                          = 3
};*/

// Enum WillowGame.SkillDefinition.ETrackedSkillType
/*enum ETrackedSkillType
{
	TRACKEDSKILL_Untracked                             = 0,
	TRACKEDSKILL_Kill                                  = 1,
	TRACKEDSKILL_Triggered                             = 2,
	TRACKEDSKILL_Respond                               = 3,
	TRACKEDSKILL_ConsumableBuff                        = 4,
	TRACKEDSKILL_MeleeOverride                         = 5,
	TRACKEDSKILL_TriggeredNotSkillTree                 = 6,
	TRACKEDSKILL_MAX                                   = 7
};*/

// Enum WillowGame.SkillDefinition.ESkillEventType
/*enum ESkillEventType
{
	SEVT_SkillActivated                                = 0,
	SEVT_SkillDeactivated                              = 1,
	SEVT_SkillPaused                                   = 2,
	SEVT_SkillResumed                                  = 3,
	SEVT_DamagedEnemy                                  = 4,
	SEVT_DamagedFriendly                               = 5,
	SEVT_DamagedNeutral                                = 6,
	SEVT_DamagedByEnemy                                = 7,
	SEVT_DamagedByFriendly                             = 8,
	SEVT_DamagedByNeutral                              = 9,
	SEVT_ShieldDepletedAfterBeingFull                  = 10,
	SEVT_KilledEnemy                                   = 11,
	SEVT_KilledFriendly                                = 12,
	SEVT_KilledNeutral                                 = 13,
	SEVT_KilledByEnemy                                 = 14,
	SEVT_KilledByFriendly                              = 15,
	SEVT_KilledByNeutral                               = 16,
	SEVT_WeaponZoomed                                  = 17,
	SEVT_WeaponUnzoomed                                = 18,
	SEVT_WeaponShotMissed                              = 19,
	SEVT_WeaponFired                                   = 20,
	SEVT_WeaponReloaded                                = 21,
	SEVT_PlayerDeathAverted                            = 22,
	SEVT_ActionSkillCooldownAbilityActivated           = 23,
	SEVT_ActionSkillActiveAbilityActivated             = 24,
	SEVT_DamagedUnawareEnemy                           = 25,
	SEVT_DamagedEnemyWithMeleeFromBehind               = 26,
	SEVT_MeleeOverrideSkillActivated                   = 27,
	SEVT_ThrowGrenadeOverrideSkillActivated            = 28,
	SEVT_WeaponSwapped                                 = 29,
	SEVT_PlayerRecoveredFromDownState                  = 30,
	SEVT_ShieldDepleted                                = 31,
	SEVT_ShieldFull                                    = 32,
	SEVT_WeaponStartReload                             = 33,
	SEVT_PlayerResurrected                             = 34,
	SEVT_WeaponManuallyReloaded                        = 35,
	SEVT_AppliedStatusEffectToEnemy                    = 36,
	SEVT_DownStateBegin                                = 37,
	SEVT_DownStateEnd                                  = 38,
	SEVT_BledOut                                       = 39,
	SEVT_OnStatusEffectTypeBegin                       = 40,
	SEVT_OnStatusEffectTypeEnd                         = 41,
	SEVT_MeleeAttack                                   = 42,
	SEVT_MAX                                           = 43
};*/

// Enum WillowGame.SkillDefinition.ESkillEventGradeType
/*enum ESkillEventGradeType
{
	SEVG_PlayerSkillGrade                              = 0,
	SEVG_HardcodedGrade                                = 1,
	SEVG_SameAsThisSkillGrade                          = 2,
	SEVG_MAX                                           = 3
};*/

// Enum WillowGame.SkillDefinition.ESkillDamagedEventType
/*enum ESkillDamagedEventType
{
	SDEVT_DamagedEnemy                                 = 0,
	SDEVT_DamagedFriendly                              = 1,
	SDEVT_DamagedNeutral                               = 2,
	SDEVT_DamagedByEnemy                               = 3,
	SDEVT_DamagedByFriendly                            = 4,
	SDEVT_DamagedByNeutral                             = 5,
	SDEVT_ShieldDepletedAfterBeingFull                 = 6,
	SDEVT_MAX                                          = 7
};*/

// Enum WillowGame.SkillDefinition.ESkillState
/*enum ESkillState
{
	SKILL_Deactivated                                  = 0,
	SKILL_Active                                       = 1,
	SKILL_Paused                                       = 2,
	SKILL_MAX                                          = 3
};*/

// Enum WillowGame.SkillDefinition.ETargetCriteria
/*enum ETargetCriteria
{
	CRITERIA_None                                      = 0,
	CRITERIA_Nearest                                   = 1,
	CRITERIA_MAX                                       = 2
};*/

// Enum WillowGame.SkillDefinition.EEffectTarget
/*enum EEffectTarget
{
	TARGET_None                                        = 0,
	TARGET_Self                                        = 1,
	TARGET_Allies                                      = 2,
	TARGET_Enemies                                     = 3,
	TARGET_All                                         = 4,
	TARGET_Pets                                        = 5,
	TARGET_MAX                                         = 6
};*/

// Enum WillowGame.SkillDefinition.EEffectDurationType
/*enum EEffectDurationType
{
	DURATION_Infinite                                  = 0,
	DURATION_Timed                                     = 1,
	DURATION_MAX                                       = 2
};*/

// Enum WillowGame.SkillDefinition.ESkillType
/*enum ESkillType
{
	SKILL_TYPE_Passive                                 = 0,
	SKILL_TYPE_Action                                  = 1,
	SKILL_TYPE_ActionAugment                           = 2,
	SKILL_TYPE_Kill                                    = 3,
	SKILL_TYPE_Proficiency                             = 4,
	SKILL_TYPE_MAX                                     = 5
};*/

// Enum WillowGame.WillowGFxUIManagerDefinition.EUILayout
/*enum EUILayout
{
	UILAYOUT_16x9                                      = 0,
	UILAYOUT_16x901                                    = 1,
	UILAYOUT_16x902                                    = 2,
	UILAYOUT_4x3                                       = 3,
	UILAYOUT_4x301                                     = 4,
	UILAYOUT_4x302                                     = 5,
	UILAYOUT_MAX                                       = 6
};*/

// Enum WillowGame.PlayerClassDefinition.EPlayerClassAchievementUnlockType
/*enum EPlayerClassAchievementUnlockType
{
	PCAUT_PetKills                                     = 0,
	PCAUT_TimeSpentInActionSkill                       = 1,
	PCAUT_TargetedActionSkillImpacts                   = 2,
	PCAUT_MAX                                          = 3
};*/

// Enum WillowGame.WillowPlayerController.EMissionFanfareType
/*enum EMissionFanfareType
{
	EMFT_NewMissionAccepted                            = 0,
	EMFT_NewMissionActive                              = 1,
	EMFT_NewPlotMissionActive                          = 2,
	EMFT_ObjectiveIncremented                          = 3,
	EMFT_ObjectiveComplete                             = 4,
	EMFT_ObjectiveCleared                              = 5,
	EMFT_MissionReadyToTurnIn                          = 6,
	EMFT_MissionCompleted                              = 7,
	EMFT_PingNonTrackedOnly                            = 8,
	EMFT_MAX                                           = 9
};*/

// Enum WillowGame.WillowPlayerController.EMissionSortType
/*enum EMissionSortType
{
	MSORT_Region                                       = 0,
	MSORT_Status                                       = 1,
	MSORT_Difficulty                                   = 2,
	MSORT_Chronological                                = 3,
	MSORT_Expansion                                    = 4,
	MSORT_MAX                                          = 5
};*/

// Enum WillowGame.WillowPlayerController.EPresenceModeContext
/*enum EPresenceModeContext
{
	EPMC_Any                                           = 0,
	EPMC_OnFoot                                        = 1,
	EPMC_Driving                                       = 2,
	EPMC_Dueling                                       = 3,
	EPMC_OpenSlots                                     = 4,
	EPMC_MAX                                           = 5
};*/

// Enum WillowGame.Skill.EAdjustModifierMode
/*enum EAdjustModifierMode
{
	WILLOW_ADJUST_InitialAddModifer                    = 0,
	WILLOW_ADJUST_AddModifer                           = 1,
	WILLOW_ADJUST_RemoveModifer                        = 2,
	WILLOW_ADJUST_MAX                                  = 3
};*/

// Enum WillowGame.Skill.PawnListSource
/*enum PawnListSource
{
	PAWN_Teammate                                      = 0,
	PAWN_Enemy                                         = 1,
	PAWN_MAX                                           = 2
};*/

// Enum WillowGame.ChallengeDefinition.EChallengeType
/*enum EChallengeType
{
	ECT_Stat                                           = 0,
	ECT_LevelObject                                    = 1,
	ECT_DesignerTriggered                              = 2,
	ECT_MAX                                            = 3
};*/

// Enum WillowGame.WillowPlayerController.EWillowInviteType
/*enum EWillowInviteType
{
	WIT_InviteRequired                                 = 0,
	WIT_FriendsOnly                                    = 1,
	WIT_Public                                         = 2,
	WIT_MAX                                            = 3
};*/

// Enum WillowGame.WillowDownloadableContentManager.EMarketplaceOfferType
/*enum EMarketplaceOfferType
{
	OFFER_CATEGORY_SeasonPass                          = 0,
	OFFER_CATEGORY_CompatibilityPack                   = 1,
	OFFER_CATEGORY_AddOn                               = 2,
	OFFER_CATEGORY_Misc                                = 3,
	OFFER_CATEGORY_MAX                                 = 4
};*/

// Enum WillowGame.WillowDownloadableContentManager.EDlcInstallState
/*enum EDlcInstallState
{
	DLC_INSTALL_None                                   = 0,
	DLC_INSTALL_InstallingBundles                      = 1,
	DLC_INSTALL_LoadingAsyncPackages                   = 2,
	DLC_INSTALL_InstallingContent                      = 3,
	DLC_INSTALL_InstallingOfferContent                 = 4,
	DLC_INSTALL_InstallComplete                        = 5,
	DLC_INSTALL_MAX                                    = 6
};*/

// Enum WillowGame.WillowGFxMovie3D.MovieFittingStyle
/*enum MovieFittingStyle
{
	MFS_FitWithoutCropping                             = 0,
	MFS_FitWithCropping                                = 1,
	MFS_FitHorizontal                                  = 2,
	MFS_FitVertical                                    = 3,
	MFS_MAX                                            = 4
};*/

// Enum WillowGame.GFxTextListContainer.ETextListMoveDir
/*enum ETextListMoveDir
{
	TLMD_Up                                            = 0,
	TLMD_Down                                          = 1,
	TLMD_PageUp                                        = 2,
	TLMD_PageDown                                      = 3,
	TLMD_First                                         = 4,
	TLMD_Last                                          = 5,
	TLMD_PreviousCategory                              = 6,
	TLMD_NextCategory                                  = 7,
	TLMD_MAX                                           = 8
};*/

// Enum WillowGame.GFxTextListContainer.EArrayKind
/*enum EArrayKind
{
	EAK_Source                                         = 0,
	EAK_Categories                                     = 1,
	EAK_InvalidEntry                                   = 2,
	EAK_Unloadable                                     = 3,
	EAK_MAX                                            = 4
};*/

// Enum WillowGame.InventoryDataProviderGFxObject.ECategoryAssignmentType
/*enum ECategoryAssignmentType
{
	CAType_None                                        = 0,
	CAType_InventoryType                               = 1,
	CAType_Manufacturers                               = 2,
	CAType_WeaponType                                  = 3,
	CAType_ClassRequirement                            = 4,
	CAType_PersonalOrShop                              = 5,
	CAType_Equipped                                    = 6,
	CAType_MAX                                         = 7
};*/

// Enum WillowGame.InventoryDataProviderGFxObject.EInventorySortType
/*enum EInventorySortType
{
	IST_EquippedThenMajorTypeThenRarityThenSubtype     = 0,
	IST_MajorTypeThenSubtypeThenRarity                 = 1,
	IST_MajorTypeThenRarityThenSubtype                 = 2,
	IST_Manufacturer                                   = 3,
	IST_ClassRequirementThenRarity                     = 4,
	IST_Value                                          = 5,
	IST_MAX                                            = 6
};*/

// Enum WillowGame.InventoryDataProviderGFxObject.EInventoryFilterType
/*enum EInventoryFilterType
{
	IFT_NoFilter                                       = 0,
	IFT_FilterUncomparable                             = 1,
	IFT_FilterWeapons                                  = 2,
	IFT_FilterNonWeapons                               = 3,
	IFT_FilterNonShields                               = 4,
	IFT_FilterNonGrenadeMods                           = 5,
	IFT_FilterNonClassMods                             = 6,
	IFT_FilterNonUpgrades                              = 7,
	IFT_FilterNonHealth                                = 8,
	IFT_FilterNonGenerics                              = 9,
	IFT_MAX                                            = 10
};*/

// Enum WillowGame.InventoryListPanelGFxObject.EInventoryListType
/*enum EInventoryListType
{
	ELT_Weapon                                         = 0,
	ELT_Shield                                         = 1,
	ELT_GrenadeMod                                     = 2,
	ELT_ClassMod                                       = 3,
	ELT_Artifact                                       = 4,
	ELT_None                                           = 5,
	ELT_MAX                                            = 6
};*/

// Enum WillowGame.BaseTopLevelPanelGFxObject.PanelPosition
/*enum PanelPosition
{
	PP_Focused                                         = 0,
	PP_Unfocused                                       = 1,
	PP_Compare                                         = 2,
	PP_MAX                                             = 3
};*/

// Enum WillowGame.Behavior_AddInventoryToStorage.EStorageType
/*enum EStorageType
{
	ST_BankType                                        = 0,
	ST_StashType                                       = 1,
	ST_MAX                                             = 2
};*/

// Enum WillowGame.Behavior_AddInventoryToStorage.EInventoryType
/*enum EInventoryType
{
	IT_ItemType                                        = 0,
	IT_WeaponType                                      = 1,
	IT_MAX                                             = 2
};*/

// Enum WillowGame.Behavior_AIFollow.EFollowAction
/*enum EFollowAction
{
	Follow_StartFollow                                 = 0,
	Follow_StopFollow                                  = 1,
	Follow_MAX                                         = 2
};*/

// Enum WillowGame.Behavior_BoolMath.EBinaryBooleanOperation
/*enum EBinaryBooleanOperation
{
	BOOLMATH_NoChange                                  = 0,
	BOOLMATH_And                                       = 1,
	BOOLMATH_Or                                        = 2,
	BOOLMATH_Xor                                       = 3,
	BOOLMATH_Not                                       = 4,
	BOOLMATH_MAX                                       = 5
};*/

// Enum WillowGame.Behavior_CauseDamage.EDamageTarget
/*enum EDamageTarget
{
	DT_BehaviorContext                                 = 0,
	DT_OtherEventParticipant                           = 1,
	DT_CustomTarget                                    = 2,
	DT_RadiusAroundContext                             = 3,
	DT_MAX                                             = 4
};*/

// Enum WillowGame.Behavior_ChangeEnvironmentTag.EEnvironmentTagAction
/*enum EEnvironmentTagAction
{
	EnviroTagAction_Add                                = 0,
	EnviroTagAction_Remove                             = 1,
	EnviroTagAction_MAX                                = 2
};*/

// Enum WillowGame.Behavior_Charm.ECharmAction
/*enum ECharmAction
{
	CharmAction_Charm                                  = 0,
	CharmAction_Uncharm                                = 1,
	CharmAction_MAX                                    = 2
};*/

// Enum WillowGame.Behavior_CombatPerch.ECombatPerchAction
/*enum ECombatPerchAction
{
	ECPA_Attach                                        = 0,
	ECPA_Detach                                        = 1,
	ECPA_MAX                                           = 2
};*/

// Enum WillowGame.Behavior_CompareObject.ECompareObjectOutputLinkIds
/*enum ECompareObjectOutputLinkIds
{
	OUTPUT_Same                                        = 0,
	OUTPUT_Different                                   = 1,
	OUTPUT_MAX                                         = 2
};*/

// Enum WillowGame.Behavior_Crane.ECraneAction
/*enum ECraneAction
{
	ECA_FindDummy                                      = 0,
	ECA_AttachDummy                                    = 1,
	ECA_DetachDummy                                    = 2,
	ECA_FollowDummy                                    = 3,
	ECA_DontDoShit                                     = 4,
	ECA_MAX                                            = 5
};*/

// Enum WillowGame.Behavior_DamageArea.EDamageArea
/*enum EDamageArea
{
	EDA_Enable                                         = 0,
	EDA_Disable                                        = 1,
	EDA_Toggle                                         = 2,
	EDA_MAX                                            = 3
};*/

// Enum WillowGame.Behavior_DamageClassSwitch.EDamageClassSwitchValues
/*enum EDamageClassSwitchValues
{
	DCSV_Player                                        = 0,
	DCSV_Pawn                                          = 1,
	DCSV_Vehicle                                       = 2,
	DCSV_InteractiveObject                             = 3,
	DCSV_MAX                                           = 4
};*/

// Enum WillowGame.Behavior_DamageSourceSwitch.EDamageSourceSwitchValues
/*enum EDamageSourceSwitchValues
{
	DSSV_Bullet                                        = 0,
	DSSV_Grenade                                       = 1,
	DSSV_Melee                                         = 2,
	DSSV_Rocket                                        = 3,
	DSSV_Skill                                         = 4,
	DSSV_StatusEffect                                  = 5,
	DSSV_VehicleRanInto                                = 6,
	DSSV_VehicleRanOver                                = 7,
	DSSV_Crushed                                       = 8,
	DSSV_Fell                                          = 9,
	DSSV_Pistol                                        = 10,
	DSSV_SubMachineGun                                 = 11,
	DSSV_Shotgun                                       = 12,
	DSSV_MachineGun                                    = 13,
	DSSV_Sniper                                        = 14,
	DSSV_DetonatedCrate                                = 15,
	DSSV_MAX                                           = 16
};*/

// Enum WillowGame.Behavior_DamageSurfaceTypeSwitch.EDamageSurfaceTypeSwitchValues
/*enum EDamageSurfaceTypeSwitchValues
{
	DSTSV_Generic                                      = 0,
	DSTSV_Flesh                                        = 1,
	DSTSV_Armor                                        = 2,
	DSTSV_Shield                                       = 3,
	DSTSV_MAX                                          = 4
};*/

// Enum WillowGame.Behavior_FireShot.EFireShotOutputLinks
/*enum EFireShotOutputLinks
{
	FSOL_Complete                                      = 0,
	FSOL_FiredShot                                     = 1,
	FSOL_MAX                                           = 2
};*/

// Enum WillowGame.Behavior_HasMissions.EHasMissionsOutputLinkIds
/*enum EHasMissionsOutputLinkIds
{
	OUTPUT_HasMissions                                 = 0,
	OUTPUT_NoMissions                                  = 1,
	OUTPUT_MAX                                         = 2
};*/

// Enum WillowGame.Behavior_SimpleMath.EBinaryMathOperation
/*enum EBinaryMathOperation
{
	BINARYMATH_Add                                     = 0,
	BINARYMATH_Sub                                     = 1,
	BINARYMATH_Mul                                     = 2,
	BINARYMATH_Div                                     = 3,
	BINARYMATH_Pow                                     = 4,
	BINARYMATH_Rand                                    = 5,
	BINARYMATH_Avg                                     = 6,
	BINARYMATH_Min                                     = 7,
	BINARYMATH_Maximum                                 = 8,
	BINARYMATH_NoChange                                = 9,
	BINARYMATH_MAX                                     = 10
};*/

// Enum WillowGame.Behavior_IsObjectPlayer.ECompareObjectOutputLinkIds
/*enum ECompareObjectOutputLinkIds
{
	OUTPUT_IsPlayer                                    = 0,
	OUTPUT_NotPlayer                                   = 1,
	OUTPUT_MAX                                         = 2
};*/

// Enum WillowGame.Behavior_IsObjectVehicle.ECompareObjectOutputLinkIds
/*enum ECompareObjectOutputLinkIds
{
	OUTPUT_IsVehicle                                   = 0,
	OUTPUT_NotVehicle                                  = 1,
	OUTPUT_MAX                                         = 2
};*/

// Enum WillowGame.Behavior_LeaderCommand.ELeaderType
/*enum ELeaderType
{
	ELT_Target                                         = 0,
	ELT_Formation                                      = 1,
	ELT_MAX                                            = 2
};*/

// Enum WillowGame.Behavior_LeaderCommand.ELeaderAction
/*enum ELeaderAction
{
	ELA_Set                                            = 0,
	ELA_Remove                                         = 1,
	ELA_MAX                                            = 2
};*/

// Enum WillowGame.Behavior_NetworkRoleSwitch.ENetworkRoleSwitchValues
/*enum ENetworkRoleSwitchValues
{
	NRS_Server                                         = 0,
	NRS_Client                                         = 1,
	NRS_MAX                                            = 2
};*/

// Enum WillowGame.Behavior_OpinionSwitch.EOpinionSwitchLinkIds
/*enum EOpinionSwitchLinkIds
{
	OUTPUT_Enemy                                       = 0,
	OUTPUT_Neutral                                     = 1,
	OUTPUT_Friendly                                    = 2,
	OUTPUT_MAX                                         = 3
};*/

// Enum WillowGame.Behavior_PostProcessChain.EPostProcessChainAction
/*enum EPostProcessChainAction
{
	PPCA_PushChain                                     = 0,
	PPCA_PopChain                                      = 1,
	PPCA_MAX                                           = 2
};*/

// Enum WillowGame.Behavior_QueryDayNightCycle.EDayNightCycleValues
/*enum EDayNightCycleValues
{
	DNCV_Daytime                                       = 0,
	DNCV_Nighttime                                     = 1,
	DNCV_MAX                                           = 2
};*/

// Enum WillowGame.Behavior_RadarIcon.ERadarIconAction
/*enum ERadarIconAction
{
	RIA_Add                                            = 0,
	RIA_Remove                                         = 1,
	RIA_MAX                                            = 2
};*/

// Enum WillowGame.Behavior_ScreenParticle.EScreenParticleAction
/*enum EScreenParticleAction
{
	SPA_Show                                           = 0,
	SPA_ShowAndHideWhenFinished                        = 1,
	SPA_Hide                                           = 2,
	SPA_HideButAllowToFinishFirst                      = 3,
	SPA_MAX                                            = 4
};*/

// Enum WillowGame.Behavior_SetLookAtSpeed.ESetLookAtSpeedAction
/*enum ESetLookAtSpeedAction
{
	ESLASA_SetSpeed                                    = 0,
	ESLASA_SetDefault                                  = 1,
	ESLASA_MAX                                         = 2
};*/

// Enum WillowGame.Behavior_SetStance.EStanceSetType
/*enum EStanceSetType
{
	StanceSet_Set                                      = 0,
	StanceSet_Clear                                    = 1,
	StanceSet_MAX                                      = 2
};*/

// Enum WillowGame.Behavior_SpawnFromPopulationSystem.SpawnLocationRotationInheritanceType
/*enum SpawnLocationRotationInheritanceType
{
	SLRIT_Context                                      = 0,
	SLRIT_Attachment                                   = 1,
	SLRIT_Self                                         = 2,
	SLRIT_MAX                                          = 3
};*/

// Enum WillowGame.Behavior_SpawnLootAroundPoint.ESpawnAroundPointBasis
/*enum ESpawnAroundPointBasis
{
	SPAWNAROUNDPOINTBASIS_SpawnPoint                   = 0,
	SPAWNAROUNDPOINTBASIS_WorldSpace                   = 1,
	SPAWNAROUNDPOINTBASIS_CustomLocation               = 2,
	SPAWNAROUNDPOINTBASIS_ContextActor                 = 3,
	SPAWNAROUNDPOINTBASIS_MAX                          = 4
};*/

// Enum WillowGame.Behavior_SpawnLootAtPoints.ESpawnLootAtPointsBasis
/*enum ESpawnLootAtPointsBasis
{
	SPAWNATPOINTSBASIS_WorldSpace                      = 0,
	SPAWNATPOINTSBASIS_SpawnPoint                      = 1,
	SPAWNATPOINTSBASIS_ContextActor                    = 2,
	SPAWNATPOINTSBASIS_MAX                             = 3
};*/

// Enum WillowGame.Behavior_SpawnProjectile.ESpawnProjectileOutputLinks
/*enum ESpawnProjectileOutputLinks
{
	SPOL_Complete                                      = 0,
	SPOL_SpawnedProjectile                             = 1,
	SPOL_MAX                                           = 2
};*/

// Enum WillowGame.Behavior_SpawnProjectile.ESpawnDistributionType
/*enum ESpawnDistributionType
{
	SPSDT_Cone                                         = 0,
	SPSDT_Arc                                          = 1,
	SPSDT_VerticalArc                                  = 2,
	SPSDT_MAX                                          = 3
};*/

// Enum WillowGame.Behavior_SpawnProjectile.EProjectileSelectionBehavior
/*enum EProjectileSelectionBehavior
{
	PROJECTILESELECT_UseSpecified                      = 0,
	PROJECTILESELECT_UseCurrent                        = 1,
	PROJECTILESELECT_MAX                               = 2
};*/

// Enum WillowGame.Behavior_StatusEffectSwitch.EStatusEffectSwitchValues
/*enum EStatusEffectSwitchValues
{
	OUTPUT_None                                        = 0,
	OUTPUT_Ignite                                      = 1,
	OUTPUT_Corrosive                                   = 2,
	OUTPUT_Shock                                       = 3,
	OUTPUT_Amp                                         = 4,
	OUTPUT_Slow                                        = 5,
	OUTPUT_Healing                                     = 6,
	OUTPUT_MAX                                         = 7
};*/

// Enum WillowGame.Behavior_ToggleObstacle.EObstacleToggle
/*enum EObstacleToggle
{
	ObstacleToggle_TurnOn                              = 0,
	ObstacleToggle_TurnOff                             = 1,
	ObstacleToggle_Toggle                              = 2,
	ObstacleToggle_MAX                                 = 3
};*/

// Enum WillowGame.Behavior_VectorMath.EVectorMathOperation
/*enum EVectorMathOperation
{
	VECTORMATH_NoChange                                = 0,
	VECTORMATH_Add                                     = 1,
	VECTORMATH_Sub                                     = 2,
	VECTORMATH_Mul                                     = 3,
	VECTORMATH_Div                                     = 4,
	VECTORMATH_RandomNormal                            = 5,
	VECTORMATH_RandomCone                              = 6,
	VECTORMATH_Projection                              = 7,
	VECTORMATH_NormalizeA                              = 8,
	VECTORMATH_Cross                                   = 9,
	VECTORMATH_ToRotator                               = 10,
	VECTORMATH_FromRotator                             = 11,
	VECTORMATH_Dot                                     = 12,
	VECTORMATH_AX                                      = 13,
	VECTORMATH_AY                                      = 14,
	VECTORMATH_AZ                                      = 15,
	VECTORMATH_MAX                                     = 16
};*/

// Enum WillowGame.Behavior_WeaponGlowEffect.EWeaponGlowEffectAction
/*enum EWeaponGlowEffectAction
{
	GLOW_ACTION_Play                                   = 0,
	GLOW_ACTION_Stop                                   = 1,
	GLOW_ACTION_StopAny                                = 2,
	GLOW_ACTION_MAX                                    = 3
};*/

// Enum WillowGame.BehaviorVolume.EBehaviorVolumeAction
/*enum EBehaviorVolumeAction
{
	EBVA_Entry                                         = 0,
	EBVA_Exit                                          = 1,
	EBVA_Shoot                                         = 2,
	EBVA_MAX                                           = 3
};*/

// Enum WillowGame.WeaponTypeDefinition.EGbxWeaponLock
/*enum EGbxWeaponLock
{
	GBXWEAPLOCK_None                                   = 0,
	GBXWEAPLOCK_PaintAndHold                           = 1,
	GBXWEAPLOCK_MAX                                    = 2
};*/

// Enum WillowGame.WeaponTypeDefinition.EBarrelSpinMode
/*enum EBarrelSpinMode
{
	BSM_None                                           = 0,
	BSM_SpinUpToFullFireRate                           = 1,
	BSM_SpinBarrelWithEachShot                         = 2,
	BSM_MAX                                            = 3
};*/

// Enum WillowGame.ChallengeFeedbackMessage.EChallengeFeedback
/*enum EChallengeFeedback
{
	CHAL_FEEDBACK_Completed                            = 0,
	CHAL_FEEDBACK_Received                             = 1,
	CHAL_FEEDBACK_MAX                                  = 2
};*/

// Enum WillowGame.ChallengesPanelGFxObject.EChallengePanelSortMode
/*enum EChallengePanelSortMode
{
	ECPSM_Category                                     = 0,
	ECPSM_LevelCompletion                              = 1,
	ECPSM_Max                                          = 2
};*/

// Enum WillowGame.ChallengesScreenGFxObject.EChallengePanel
/*enum EChallengePanel
{
	ECP_Badass                                         = 0,
	ECP_Challenges                                     = 1,
	ECP_MAX                                            = 2
};*/

// Enum WillowGame.ChassisDefinition.EAIVehicleSeatPosition
/*enum EAIVehicleSeatPosition
{
	VSEAT_None                                         = 0,
	VSEAT_Front                                        = 1,
	VSEAT_Rear                                         = 2,
	VSEAT_Right                                        = 3,
	VSEAT_Left                                         = 4,
	VSEAT_MAX                                          = 5
};*/

// Enum WillowGame.ChassisDefinition.EVehicleSide
/*enum EVehicleSide
{
	VSIDE_Left                                         = 0,
	VSIDE_Right                                        = 1,
	VSIDE_Front                                        = 2,
	VSIDE_Back                                         = 3,
	VSIDE_MAX                                          = 4
};*/

// Enum WillowGame.ChassisDefinition.EOccupantDamageTransfer
/*enum EOccupantDamageTransfer
{
	VEHDMGTRANS_None                                   = 0,
	VEHDMGTRANS_Transfer                               = 1,
	VEHDMGTRANS_MAX                                    = 2
};*/

// Enum WillowGame.ChassisDefinition.ESeatDamageRules
/*enum ESeatDamageRules
{
	SDRULES_OccupantInvincible                         = 0,
	SDRULES_PlayerOccupantInvincible                   = 1,
	SDRULES_AIOccupantInvincible                       = 2,
	SDRULES_OccupantTakesDamage                        = 3,
	SDRULES_MAX                                        = 4
};*/

// Enum WillowGame.InventoryPartListCollectionDefinition.EPartReplacementMode
/*enum EPartReplacementMode
{
	EPRM_Additive                                      = 0,
	EPRM_Selective                                     = 1,
	EPRM_Complete                                      = 2,
	EPRM_MAX                                           = 3
};*/

// Enum WillowGame.ClassModPartDefinition.EClassModPartType
/*enum EClassModPartType
{
	CLASSMOD_PART_Body                                 = 0,
	CLASSMOD_PART_LeftSide                             = 1,
	CLASSMOD_PART_RightSide                            = 2,
	CLASSMOD_PART_Material                             = 3,
	CLASSMOD_PART_Prefix                               = 4,
	CLASSMOD_PART_Title                                = 5,
	CLASSMOD_PART_MAX                                  = 6
};*/

// Enum WillowGame.CombatMusicManager.ECombatMusicManagerState
/*enum ECombatMusicManagerState
{
	CMMS_Playing                                       = 0,
	CMMS_VolumeFading                                  = 1,
	CMMS_Idle                                          = 2,
	CMMS_MAX                                           = 3
};*/

// Enum WillowGame.CoordinatedEffectDefinition.ECoordinatedParticleScaleMode
/*enum ECoordinatedParticleScaleMode
{
	CPSM_None                                          = 0,
	CPSM_LargestAxis                                   = 1,
	CPSM_SmallestAxis                                  = 2,
	CPSM_HorizontalAxis                                = 3,
	CPSM_VerticalAxis                                  = 4,
	CPSM_EachAxis                                      = 5,
	CPSM_MAX                                           = 6
};*/

// Enum WillowGame.DeathtrapActionSkill.EMedicBeamState
/*enum EMedicBeamState
{
	MedicBeam_Inactive                                 = 0,
	MedicBeam_Active                                   = 1,
	MedicBeam_Blocked                                  = 2,
	MedicBeam_MAX                                      = 3
};*/

// Enum WillowGame.WillowAIPawn.EDenStat
/*enum EDenStat
{
	DenStat_None                                       = 0,
	DenStat_Injured                                    = 1,
	DenStat_OnFire                                     = 2,
	DenStat_Corrosive                                  = 3,
	DenStat_Shocked                                    = 4,
	DenStat_Slagged                                    = 5,
	DenStat_Slowed                                     = 6,
	DenStat_Healing                                    = 7,
	DenStat_MAX                                        = 8
};*/

// Enum WillowGame.WillowAIPawn.EStaggerState
/*enum EStaggerState
{
	ESTAGGER_Staggered                                 = 0,
	ESTAGGER_Unstaggering                              = 1,
	ESTAGGER_BlendAnimStart                            = 2,
	ESTAGGER_BlendAnimEnd                              = 3,
	ESTAGGER_MAX                                       = 4
};*/

// Enum WillowGame.DesignerAttributeDefinition.EDesignerAtttributeScope
/*enum EDesignerAtttributeScope
{
	DASCOPE_Global                                     = 0,
	DASCOPE_Local                                      = 1,
	DASCOPE_MAX                                        = 2
};*/

// Enum WillowGame.DeveloperPerksDefinition.EGamerPic
/*enum EGamerPic
{
	GAMERPIC_Min                                       = 0,
	GAMERPIC_MAX                                       = 1
};*/

// Enum WillowGame.DeveloperPerksDefinition.EDeveloperPerksPlatforms
/*enum EDeveloperPerksPlatforms
{
	DPP_PC                                             = 0,
	DPP                                                = 1,
	DPP_PS3                                            = 2,
	DPP_Any                                            = 3,
	DPP_MAX                                            = 4
};*/

// Enum WillowGame.FastTravelStationGFxMovie.ELocationMissionStatus
/*enum ELocationMissionStatus
{
	LMS_ReadyToTurnIn                                  = 0,
	LMS_New                                            = 1,
	LMS_InProgress                                     = 2,
	LMS_InProgressStory                                = 3,
	LMS_AndMuchMore                                    = 4,
	LMS_Invalid                                        = 5,
	LMS_MAX                                            = 6
};*/

// Enum WillowGame.FiringModeDefinition.EWillowWeaponFireType
/*enum EWillowWeaponFireType
{
	EWWFT_Bullet                                       = 0,
	EWWFT_Beam                                         = 1,
	EWWFT_Rocket                                       = 2,
	EWWFT_HitScan                                      = 3,
	EWWFT_MAX                                          = 4
};*/

// Enum WillowGame.FiringModeDefinition.ELightBeamLock
/*enum ELightBeamLock
{
	LBL_Never                                          = 0,
	LBL_Always                                         = 1,
	LBL_LockOn                                         = 2,
	LBL_MAX                                            = 3
};*/

// Enum WillowGame.WillowGameReplicationInfo.EMatchmakingState
/*enum EMatchmakingState
{
	MMS_Inactive                                       = 0,
	MMS_Searching1                                     = 1,
	MMS_Searching2                                     = 2,
	MMS_Searching3                                     = 3,
	MMS_MatchFound                                     = 4,
	MMS_NoMatchFound                                   = 5,
	MMS_MAX                                            = 6
};*/

// Enum WillowGame.WillowGameInfo.EStartGameState
/*enum EStartGameState
{
	SGS_None                                           = 0,
	SGS_IntroMovie                                     = 1,
	SGS_CharacterSelect                                = 2,
	SGS_WaitingForPlayerPawns                          = 3,
	SGS_Started                                        = 4,
	SGS_MAX                                            = 5
};*/

// Enum WillowGame.GlobalAttributeValueResolver.EGlobalAttributes
/*enum EGlobalAttributes
{
	GATTR_ExperiencePointTestLevel                     = 0,
	GATTR_BadassTokenTestRank                          = 1,
	GATTR_MAX                                          = 2
};*/

// Enum WillowGame.GrenadeModPartDefinition.EGrenadeModPartType
/*enum EGrenadeModPartType
{
	GRENADEMOD_PART_Body                               = 0,
	GRENADEMOD_PART_Delivery                           = 1,
	GRENADEMOD_PART_Trigger                            = 2,
	GRENADEMOD_PART_Accessory                          = 3,
	GRENADEMOD_PART_Material                           = 4,
	GRENADEMOD_PART_Prefix                             = 5,
	GRENADEMOD_PART_Title                              = 6,
	GRENADEMOD_PART_Property1                          = 7,
	GRENADEMOD_PART_Property2                          = 8,
	GRENADEMOD_PART_Property3                          = 9,
	GRENADEMOD_PART_Property4                          = 10,
	GRENADEMOD_PART_MAX                                = 11
};*/

// Enum WillowGame.HUDWidget_Crosshairs.ECrosshairColor
/*enum ECrosshairColor
{
	ECC_None                                           = 0,
	ECC_White                                          = 1,
	ECC_Red                                            = 2,
	ECC_Green                                          = 3,
	ECC_MAX                                            = 4
};*/

// Enum WillowGame.HUDWidget_Missions.EMissionWidgetMessageType
/*enum EMissionWidgetMessageType
{
	EMWT_None                                          = 0,
	EMWT_Init                                          = 1,
	EMWT_SetMission                                    = 2,
	EMWT_AddObjective                                  = 3,
	EMWT_RemoveObjective                               = 4,
	EMWT_SwapInObjective                               = 5,
	EMWT_SwapOutObjective                              = 6,
	EMWT_CompleteObjective                             = 7,
	EMWT_ClearObjective                                = 8,
	EMWT_UpdateObjectiveCount                          = 9,
	EMWT_EnableTurnIn                                  = 10,
	EMWT_EnableOr                                      = 11,
	EMWT_EnableFailed                                  = 12,
	EMWT_EnableTimer                                   = 13,
	EMWT_TickTimer                                     = 14,
	EMWT_EnableDefense                                 = 15,
	EMWT_TickDefense                                   = 16,
	EMWT_FlyingCheckmark                               = 17,
	EMWT_MAX                                           = 18
};*/

// Enum WillowGame.HUDWidget_Missions.EMissionWidgetMessageCategory
/*enum EMissionWidgetMessageCategory
{
	EMWC_None                                          = 0,
	EMWC_Init                                          = 1,
	EMWC_PreComplete                                   = 2,
	EMWC_Complete                                      = 3,
	EMWC_Remove                                        = 4,
	EMWC_Add                                           = 5,
	EMWC_MAX                                           = 6
};*/

// Enum WillowGame.HUDWidget_WorldSpace.EPlayerIconState
/*enum EPlayerIconState
{
	EPIS_Normal                                        = 0,
	EPIS_Injured                                       = 1,
	EPIS_Reviving                                      = 2,
	EPIS_MAX                                           = 3
};*/

// Enum WillowGame.InventoryCardGFx.ETopStatArrow
/*enum ETopStatArrow
{
	ETSA_Blank                                         = 0,
	ETSA_Up                                            = 1,
	ETSA_Down                                          = 2,
	ETSA_Same                                          = 3,
	ETSA_MAX                                           = 4
};*/

// Enum WillowGame.InputActionDefinition.EInputActionEvent
/*enum EInputActionEvent
{
	INPUT_ACTION_Begin                                 = 0,
	INPUT_ACTION_End                                   = 1,
	INPUT_ACTION_MAX                                   = 2
};*/

// Enum WillowGame.InputDeviceDefinition.EAxisParameter
/*enum EAxisParameter
{
	AXIS_PARAM_aBaseX                                  = 0,
	AXIS_PARAM_aBaseY                                  = 1,
	AXIS_PARAM_aBaseZ                                  = 2,
	AXIS_PARAM_aMouseX                                 = 3,
	AXIS_PARAM_aMouseY                                 = 4,
	AXIS_PARAM_aForward                                = 5,
	AXIS_PARAM_aTurn                                   = 6,
	AXIS_PARAM_aStrafe                                 = 7,
	AXIS_PARAM_aUp                                     = 8,
	AXIS_PARAM_aLookUp                                 = 9,
	AXIS_PARAM_aPS3AccelX                              = 10,
	AXIS_PARAM_aPS3AccelY                              = 11,
	AXIS_PARAM_aPS3AccelZ                              = 12,
	AXIS_PARAM_aPS3Gyro                                = 13,
	AXIS_PARAM_MAX                                     = 14
};*/

// Enum WillowGame.IProjectileBehavior.EProjectilePayloadType
/*enum EProjectilePayloadType
{
	PPT_Standard                                       = 0,
	PPT_AreaEffect                                     = 1,
	PPT_BouncingBetty                                  = 2,
	PPT_MIRV                                           = 3,
	PPT_Singularity                                    = 4,
	PPT_TedioreReload                                  = 5,
	PPT_Transfusion                                    = 6,
	PPT_MAX                                            = 7
};*/

// Enum WillowGame.IProjectileBehavior.EHomingTargetType
/*enum EHomingTargetType
{
	HTARGET_None                                       = 0,
	HTARGET_Instigator                                 = 1,
	HTARGET_ViewGuidePawn                              = 2,
	HTARGET_ViewGuideLocation                          = 3,
	HTARGET_NearestActor                               = 4,
	HTARGET_NearestFriend                              = 5,
	HTARGET_NearestFoe                                 = 6,
	HTARGET_NearestFriendNotInstigator                 = 7,
	HTARGET_MAX                                        = 8
};*/

// Enum WillowGame.LANServerBrowserGFxMovie.ESortType
/*enum ESortType
{
	SORT_PlayerCount                                   = 0,
	SORT_Name                                          = 1,
	SORT_Level                                         = 2,
	SORT_Mission                                       = 3,
	SORT_Ping                                          = 4,
	SORT_MAX                                           = 5
};*/

// Enum WillowGame.LANServerBrowserGFxMovie.ESortDirection
/*enum ESortDirection
{
	SORTDIR_Ascending                                  = 0,
	SORTDIR_Descending                                 = 1,
	SORTDIR_MAX                                        = 2
};*/

// Enum WillowGame.LiftActionSkill.EPhaselockState
/*enum EPhaselockState
{
	EPLS_None                                          = 0,
	EPLS_Intro                                         = 1,
	EPLS_Outro                                         = 2,
	EPLS_Locked                                        = 3,
	EPLS_Ruin                                          = 4,
	EPLS_Subsequence                                   = 5,
	EPLS_MAX                                           = 6
};*/

// Enum WillowGame.LocalMapChangeMessage.EMapChangeMessages
/*enum EMapChangeMessages
{
	MAPCHANGE_None                                     = 0,
	MAPCHANGE_PlayerDown                               = 1,
	MAPCHANGE_CanceledPlayerDown                       = 2,
	MAPCHANGE_PlayerInMenu                             = 3,
	MAPCHANGE_CanceledPlayerMenu                       = 4,
	MAPCHANGE_PlayerIsSaving                           = 5,
	MAPCHANGE_CanceledPlayerIsSaving                   = 6,
	MAPCHANGE_MissingDLC                               = 7,
	MAPCHANGE_Initiated                                = 8,
	MAPCHANGE_PlayerJoining                            = 9,
	MAPCHANGE_CanceledPlayerJoining                    = 10,
	MAPCHANGE_PlayerDueling                            = 11,
	MAPCHANGE_CanceledPlayerDueling                    = 12,
	MAPCHANGE_PlayerRespawn                            = 13,
	MAPCHANGE_CanceledPlayerRespawn                    = 14,
	MAPCHANGE_CountdownTimer                           = 15,
	MAPCHANGE_MAX                                      = 16
};*/

// Enum WillowGame.LockoutDefinition.ELockoutStyle
/*enum ELockoutStyle
{
	LOCKOUT_Relative                                   = 0,
	LOCKOUT_NextDay                                    = 1,
	LOCKOUT_NextWeek                                   = 2,
	LOCKOUT_MAX                                        = 3
};*/

// Enum WillowGame.MissionDefinition.EDefendMission
/*enum EDefendMission
{
	EDM_None                                           = 0,
	EDM_NoFail                                         = 1,
	EDM_Failable                                       = 2,
	EDM_MAX                                            = 3
};*/

// Enum WillowGame.MissionPopulationAspect.EPopulationWaypointActorSetting
/*enum EPopulationWaypointActorSetting
{
	PWAS_ALL                                           = 0,
	PWAS_SpawnedActors                                 = 1,
	PWAS_Opportunity                                   = 2,
	PWAS_OpportunityIfNoActors                         = 3,
	PWAS_MAX                                           = 4
};*/

// Enum WillowGame.MissionPopulationAspect.EPopulationWaypointSetting
/*enum EPopulationWaypointSetting
{
	PWS_None                                           = 0,
	PWS_MissionObjective                               = 1,
	PWS_KillOverride                                   = 2,
	PWS_All                                            = 3,
	PWS_MAX                                            = 4
};*/

// Enum WillowGame.MissionPopulationAspect.EObjectivePopulationActivation
/*enum EObjectivePopulationActivation
{
	OPA_External                                       = 0,
	OPA_AlwaysActive                                   = 1,
	OPA_ActiveWhenObjectiveActive                      = 2,
	OPA_ActiveWhenObjectiveNotComplete                 = 3,
	OPA_ActiveWhenObjectiveNotInactive                 = 4,
	OPA_ActiveWhenObjectiveComplete                    = 5,
	OPA_MAX                                            = 6
};*/

// Enum WillowGame.MissionPopulationAspect.EObjectiveUpdateSetting
/*enum EObjectiveUpdateSetting
{
	OUS_None                                           = 0,
	OUS_MissionObjectiveOnDeath                        = 1,
	OUS_OverrideObjectiveOnDeath                       = 2,
	OUS_MissionAndOverrideObjectiveOnDeath             = 3,
	OUS_MissionObjectiveOnStatAdd                      = 4,
	OUS_MissionObjectiveOnStatAddRemove                = 5,
	OUS_OverrideObjectiveOnStatAdd                     = 6,
	OUS_OverrideObjectiveOnStatAddRemove               = 7,
	OUS_MissionObjectiveOnAllDead                      = 8,
	OUS_OverrideObjectiveOnAllDead                     = 9,
	OUS_MissionAndOverrideObjectiveOnAllDead           = 10,
	OUS_MAX                                            = 11
};*/

// Enum WillowGame.MissionTracker.EAdvanceTrackedMissionResult
/*enum EAdvanceTrackedMissionResult
{
	ATMR_Success                                       = 0,
	ATMR_NothingToDo                                   = 1,
	ATMR_Error                                         = 2,
	ATMR_DidNotAdvanceObjectiveSet                     = 3,
	ATMR_MAX                                           = 4
};*/

// Enum WillowGame.PassengerCameraDefinition.ECameraTargetForPassenger
/*enum ECameraTargetForPassenger
{
	PASSENGERCAMTARG_SeatAnchor                        = 0,
	PASSENGERCAMTARG_PawnHead                          = 1,
	PASSENGERCAMTARG_PrevSeatAnchor                    = 2,
	PASSENGERCAMTARG_MAX                               = 3
};*/

// Enum WillowGame.PassengerCameraDefinition.ECameraInitialRotation
/*enum ECameraInitialRotation
{
	CAMROT_UseControllerRot                            = 0,
	CAMROT_UseFrameZeroRot                             = 1,
	CAMROT_MAX                                         = 2
};*/

// Enum WillowGame.PassengerCameraDefinition.ECameraRotationThisFrame
/*enum ECameraRotationThisFrame
{
	CAMROTTHISFRAME_FreeLook                           = 0,
	CAMROTTHISFRAME_FixedView                          = 1,
	CAMROTTHISFRAME_LerpView                           = 2,
	CAMROTTHISFRAME_MAX                                = 3
};*/

// Enum WillowGame.PassengerCameraDefinition.EVehicleCameraLerpStyle
/*enum EVehicleCameraLerpStyle
{
	VCAMLERP_Linear                                    = 0,
	VCAMLERP_Squared                                   = 1,
	VCAMLERP_Cubed                                     = 2,
	VCAMLERP_Sine                                      = 3,
	VCAMLERP_MAX                                       = 4
};*/

// Enum WillowGame.WillowAIMoveNode.EVehicleNodeType
/*enum EVehicleNodeType
{
	VEHNODE_Patrol                                     = 0,
	VEHNODE_ScriptedPath                               = 1,
	VEHNODE_MAX                                        = 2
};*/

// Enum WillowGame.Perch.EPerchAnimType
/*enum EPerchAnimType
{
	PAT_Start                                          = 0,
	PAT_Idle                                           = 1,
	PAT_Stop                                           = 2,
	PAT_MAX                                            = 3
};*/

// Enum WillowGame.WillowPreviewComponent.EPreviewStyle
/*enum EPreviewStyle
{
	EPS_None                                           = 0,
	EPS_Still                                          = 1,
	EPS_Playing                                        = 2,
	EPS_MAX                                            = 3
};*/

// Enum WillowGame.PhysicsJumpPreviewComponent.EPhysicsJumpPreview
/*enum EPhysicsJumpPreview
{
	JumpPreview_Launch                                 = 0,
	JumpPreview_Idle                                   = 1,
	JumpPreview_Land                                   = 2,
	JumpPreview_MAX                                    = 3
};*/

// Enum WillowGame.PlayerActionExpressionEvaluator.EPlayerEvalAction
/*enum EPlayerEvalAction
{
	EVAL_ACTION_Melee                                  = 0,
	EVAL_ACTION_Reload                                 = 1,
	EVAL_ACTION_WeaponFire                             = 2,
	EVAL_ACTION_Grenade                                = 3,
	EVAL_ACTION_WeaponZoom                             = 4,
	EVAL_ACTION_Sprint                                 = 5,
	EVAL_ACTION_Duck                                   = 6,
	EVAL_ACTION_WeaponZoomIn                           = 7,
	EVAL_ACTION_MAX                                    = 8
};*/

// Enum WillowGame.PopulationFactoryWillowVehicle.WillowVehicleRoles
/*enum WillowVehicleRoles
{
	WILLOWVEHICLEROLE_Driver                           = 0,
	WILLOWVEHICLEROLE_Gunner                           = 1,
	WILLOWVEHICLEROLE_SideClinger                      = 2,
	WILLOWVEHICLEROLE_MAX                              = 3
};*/

// Enum WillowGame.PopulationFactoryWillowVehicle.EVehicleBalanceOption
/*enum EVehicleBalanceOption
{
	VEHICLEBALANCE_ForPlayers                          = 0,
	VEHICLEBALANCE_ForEnemyAI                          = 1,
	VEHICLEBALANCE_MAX                                 = 2
};*/

// Enum WillowGame.ProjectileBehavior_Detonate.ETargetAllegiance
/*enum ETargetAllegiance
{
	TARGET_ALLEG_Friendly                              = 0,
	TARGET_ALLEG_Enemy                                 = 1,
	TARGET_ALLEG_Any                                   = 2,
	TARGET_ALLEG_MAX                                   = 3
};*/

// Enum WillowGame.ProjectileDefinition.EHomingTargetChangeType
/*enum EHomingTargetChangeType
{
	HTC_AnyTarget                                      = 0,
	HTC_NewTarget                                      = 1,
	HTC_LostTarget                                     = 2,
	HTC_MAX                                            = 3
};*/

// Enum WillowGame.ProjectileDefinition.EProjectileType
/*enum EProjectileType
{
	PROJECTILE_TYPE_Unknown                            = 0,
	PROJECTILE_TYPE_Frag_Grenade                       = 1,
	PROJECTILE_TYPE_Protean_Grenade                    = 2,
	PROJECTILE_TYPE_Rocket                             = 3,
	PROJECTILE_TYPE_MAX                                = 4
};*/

// Enum WillowGame.ProjectileDefinition.EProjectileOnHitOutputs
/*enum EProjectileOnHitOutputs
{
	ProjectileOnHit_All                                = 0,
	ProjectileOnHit_Enemy                              = 1,
	ProjectileOnHit_Friendly                           = 2,
	ProjectileOnHit_Neutral                            = 3,
	ProjectileOnHit_MAX                                = 4
};*/

// Enum WillowGame.ReceivedAmmoMessage.EAmmoMessageSwitch
/*enum EAmmoMessageSwitch
{
	RECEIVEDAMMO_CombatRifle                           = 0,
	RECEIVEDAMMO_SMG                                   = 1,
	RECEIVEDAMMO_Revolver                              = 2,
	RECEIVEDAMMO_Repeater                              = 3,
	RECEIVEDAMMO_Shotgun                               = 4,
	RECEIVEDAMMO_SniperRifle                           = 5,
	RECEIVEDAMMO_Rocket                                = 6,
	RECEIVEDAMMO_Grenade                               = 7,
	RECEIVEDAMMO_MAX                                   = 8
};*/

// Enum WillowGame.SeqAct_ExecuteSkill.EExecuteSkillSequenceInput
/*enum EExecuteSkillSequenceInput
{
	SEQUENCE_ActivateSkill                             = 0,
	SEQUENCE_DeactivateSkill                           = 1,
	SEQUENCE_ToggleSkill                               = 2,
	SEQUENCE_MAX                                       = 3
};*/

// Enum WillowGame.SeqAct_MathBase.ESeqAct_MathOperation
/*enum ESeqAct_MathOperation
{
	SQAMO_Add                                          = 0,
	SQAMO_Subtract                                     = 1,
	SQAMO_Multiply                                     = 2,
	SQAMO_Divide                                       = 3,
	SQAMO_Modulus                                      = 4,
	SQAMO_MAX                                          = 5
};*/

// Enum WillowGame.SeqAct_ModifyHUDElement.EHUDElement
/*enum EHUDElement
{
	HUD_ResourcePool                                   = 0,
	HUD_Ammo                                           = 1,
	HUD_Compass                                        = 2,
	HUD_Skills                                         = 3,
	HUD_XP                                             = 4,
	HUD_MAX                                            = 5
};*/

// Enum WillowGame.SeqAct_ProceduralSwitch.EChoiceProbability
/*enum EChoiceProbability
{
	PROBABILITY_NoBias                                 = 0,
	PROBABILITY_Rare                                   = 1,
	PROBABILITY_Common                                 = 2,
	PROBABILITY_MAX                                    = 3
};*/

// Enum WillowGame.SeqAct_SetNameList.EListDefinitionSetType
/*enum EListDefinitionSetType
{
	ListDefSet_Set                                     = 0,
	ListDefSet_Clear                                   = 1,
	ListDefSet_MAX                                     = 2
};*/

// Enum WillowGame.ShieldDefinition.EShieldType
/*enum EShieldType
{
	SHT_Absorption                                     = 0,
	SHT_Booster                                        = 1,
	SHT_Chimera                                        = 2,
	SHT_Impact                                         = 3,
	SHT_Juggernaut                                     = 4,
	SHT_Nova                                           = 5,
	SHT_Roid                                           = 6,
	SHT_Spike                                          = 7,
	SHT_Standard                                       = 8,
	SHT_Custom1                                        = 9,
	SHT_Custom2                                        = 10,
	SHT_Custom3                                        = 11,
	SHT_Custom4                                        = 12,
	SHT_Custom5                                        = 13,
	SHT_MAX                                            = 14
};*/

// Enum WillowGame.ShieldDefinition.EShieldPrimeMechanism
/*enum EShieldPrimeMechanism
{
	SPM_NoPrime                                        = 0,
	SPM_PrimeOnFull                                    = 1,
	SPM_PrimeOnEmptyAfterFullRecharge                  = 2,
	SPM_PrimeOnEmpty                                   = 3,
	SPM_AlwaysPrimed                                   = 4,
	SPM_PrimedWhenNotEmpty                             = 5,
	SPM_PrimedWhenNotEmptyAfterFullRecharge            = 6,
	SPM_MAX                                            = 7
};*/

// Enum WillowGame.ShieldPartDefinition.EShieldPartType
/*enum EShieldPartType
{
	SHIELD_PART_Body                                   = 0,
	SHIELD_PART_Battery                                = 1,
	SHIELD_PART_Capacitor                              = 2,
	SHIELD_PART_Property1                              = 3,
	SHIELD_PART_Property2                              = 4,
	SHIELD_PART_Property3                              = 5,
	SHIELD_PART_Property4                              = 6,
	SHIELD_PART_Accessory                              = 7,
	SHIELD_PART_Material                               = 8,
	SHIELD_PART_Prefix                                 = 9,
	SHIELD_PART_Title                                  = 10,
	SHIELD_PART_MAX                                    = 11
};*/

// Enum WillowGame.SkillExpressionEvaluator.ESkillRunState
/*enum ESkillRunState
{
	ESS_Running                                        = 0,
	ESS_NotRunning                                     = 1,
	ESS_MAX                                            = 2
};*/

// Enum WillowGame.SkillTreeGFxObject.ESkillTreeFailureReason
/*enum ESkillTreeFailureReason
{
	eFR_NoSkillPoints                                  = 0,
	eFR_SkillLocked                                    = 1,
	eFR_SkillMaxed                                     = 2,
	eFR_DataIssue                                      = 3,
	eFR_NoFailure                                      = 4,
	eFR_MAX                                            = 5
};*/

// Enum WillowGame.SkillTreeGFxObject.ESkillIconState
/*enum ESkillIconState
{
	eSIS_Disabled                                      = 0,
	eSIS_Enabled                                       = 1,
	eSIS_Partial                                       = 2,
	eSIS_Maxed                                         = 3,
	eSIS_MAX                                           = 4
};*/

// Enum WillowGame.SkillTreeGFxObject.ENavDirection
/*enum ENavDirection
{
	EN_Up                                              = 0,
	EN_Down                                            = 1,
	EN_Left                                            = 2,
	EN_Right                                           = 3,
	EN_None                                            = 4,
	EN_MAX                                             = 5
};*/

// Enum WillowGame.SpecialMove_Vehicle.EVehicleTransitionType
/*enum EVehicleTransitionType
{
	EVEHTRANS_Undefined                                = 0,
	EVEHTRANS_SeatEntry                                = 1,
	EVEHTRANS_SeatExit                                 = 2,
	EVEHTRANS_SeatSwitch                               = 3,
	EVEHTRANS_SeatIdle                                 = 4,
	EVEHTRANS_MAX                                      = 5
};*/

// Enum WillowGame.StanceExpressionEvaluator.EStanceOption
/*enum EStanceOption
{
	StanceOption_Active                                = 0,
	StanceOption_NotActive                             = 1,
	StanceOption_MAX                                   = 2
};*/

// Enum WillowGame.StatusEffectExpressionEvaluator.EStatusEffectState
/*enum EStatusEffectState
{
	SEC_Active                                         = 0,
	SEC_NotActive                                      = 1,
	SEC_MAX                                            = 2
};*/

// Enum WillowGame.StatusMenuExGFxMovie.ECellState
/*enum ECellState
{
	CELL_Selected                                      = 0,
	CELL_Both                                          = 1,
	CELL_Normal                                        = 2,
	CELL_Highlight                                     = 3,
	CELL_Locked                                        = 4,
	CELL_MAX                                           = 5
};*/

// Enum WillowGame.StatusMenuInventoryPanelGFxObject.EInventoryPanel
/*enum EInventoryPanel
{
	EIP_Backpack                                       = 0,
	EIP_Equipped                                       = 1,
	EIP_MAX                                            = 2
};*/

// Enum WillowGame.TargetableAttributeValueResolver.ETargetableValue
/*enum ETargetableValue
{
	TARGETABLE_IsChampion                              = 0,
	TARGETABLE_MAX                                     = 1
};*/

// Enum WillowGame.TradingPanelGFxObject.ETradingPanel
/*enum ETradingPanel
{
	ETP_Backpack                                       = 0,
	ETP_Offers                                         = 1,
	ETP_MAX                                            = 2
};*/

// Enum WillowGame.VehicleSpawnStationTerminal.EVSSVehicleState
/*enum EVSSVehicleState
{
	EVSSVS_Ready                                       = 0,
	EVSSVS_Deployed                                    = 1,
	EVSSVS_Occupied                                    = 2,
	EVSSVS_MAX                                         = 3
};*/

// Enum WillowGame.WillowPopulationMaster.EVehicleSpawnStationSlot
/*enum EVehicleSpawnStationSlot
{
	VSS_Slot1                                          = 0,
	VSS_Slot2                                          = 1,
	VSS_MAX                                            = 2
};*/

// Enum WillowGame.VehicleClassDefinition.EVehicleCollisionType
/*enum EVehicleCollisionType
{
	VEHICLE_COLLIDE_World                              = 0,
	VEHICLE_COLLIDE_Enemy                              = 1,
	VEHICLE_COLLIDE_Friendly                           = 2,
	VEHICLE_COLLIDE_Neutral                            = 3,
	VEHICLE_COLLIDE_MAX                                = 4
};*/

// Enum WillowGame.VSSUIDefinition.EVehicleSpawnStationAvailability
/*enum EVehicleSpawnStationAvailability
{
	EVSSAVAIL_Land                                     = 0,
	EVSSAVAIL_Desert                                   = 1,
	EVSSAVAIL_Ice                                      = 2,
	EVSSAVAIL_Water                                    = 3,
	EVSSAVAIL_Wheeled                                  = 4,
	EVSSAVAIL_Hovercraft                               = 5,
	EVSSAVAIL_Aircraft                                 = 6,
	EVSSAVAIL_Watercraft                               = 7,
	EVSSAVAIL_Sleds                                    = 8,
	EVSSAVAIL_Reserved10                               = 9,
	EVSSAVAIL_Reserved11                               = 10,
	EVSSAVAIL_Reserved12                               = 11,
	EVSSAVAIL_Reserved13                               = 12,
	EVSSAVAIL_Reserved14                               = 13,
	EVSSAVAIL_Reserved15                               = 14,
	EVSSAVAIL_Reserved16                               = 15,
	EVSSAVAIL_Reserved17                               = 16,
	EVSSAVAIL_Reserved18                               = 17,
	EVSSAVAIL_Reserved19                               = 18,
	EVSSAVAIL_Reserved20                               = 19,
	EVSSAVAIL_BL2Main                                  = 20,
	EVSSAVAIL_DLCOrchid                                = 21,
	EVSSAVAIL_DLC2                                     = 22,
	EVSSAVAIL_DLCSage                                  = 23,
	EVSSAVAIL_DLC4                                     = 24,
	EVSSAVAIL_DLC5                                     = 25,
	EVSSAVAIL_DLC6                                     = 26,
	EVSSAVAIL_Reserved28                               = 27,
	EVSSAVAIL_Reserved29                               = 28,
	EVSSAVAIL_Reserved30                               = 29,
	EVSSAVAIL_MAX                                      = 30
};*/

// Enum WillowGame.VehicleSeatSwap_PlayerInteractionServer.VehicleSeatSwapMessages
/*enum VehicleSeatSwapMessages
{
	VSSM_StartAsInstigator                             = 0,
	VSSM_StartAsTarget                                 = 1,
	VSSM_TargetAccepted                                = 2,
	VSSM_TargetDeclined                                = 3,
	VSSM_InstigatorCanceled                            = 4,
	VSSM_MAX                                           = 5
};*/

// Enum WillowGame.VehicleSpawnStationGFxMovie.EVSSStage
/*enum EVSSStage
{
	VSSSTAGE_Start                                     = 0,
	VSSSTAGE_WaitingOnReplicatedData                   = 1,
	VSSSTAGE_VehicleFamilySelection                    = 2,
	VSSSTAGE_MainLogicLoop                             = 3,
	VSSSTAGE_ForcedExit                                = 4,
	VSSSTAGE_MAX                                       = 5
};*/

// Enum WillowGame.VendingMachineExGFxMovie.EShopMode
/*enum EShopMode
{
	SHOPMODE_Sell                                      = 0,
	SHOPMODE_Buy                                       = 1,
	SHOPMODE_BuyBack                                   = 2,
	SHOPMODE_MAX                                       = 3
};*/

// Enum WillowGame.WillowAnimNode_AimState.EAimAnimState
/*enum EAimAnimState
{
	AimAnimState_Idle                                  = 0,
	AimAnimState_IronSights                            = 1,
	AimAnimState_MAX                                   = 2
};*/

// Enum WillowGame.WillowAnimNode_MovementTransition.EMoveTransChannel
/*enum EMoveTransChannel
{
	EMTC_Idle                                          = 0,
	EMTC_Movement                                      = 1,
	EMTC_Transition                                    = 2,
	EMTC_MAX                                           = 3
};*/

// Enum WillowGame.WillowAnimNode_MovementTransition.EMoveState
/*enum EMoveState
{
	MOVESTATE_Idle                                     = 0,
	MOVESTATE_LaunchDelay                              = 1,
	MOVESTATE_Launching                                = 2,
	MOVESTATE_Cycling                                  = 3,
	MOVESTATE_Stopping                                 = 4,
	MOVESTATE_MAX                                      = 5
};*/

// Enum WillowGame.WillowItemTypes.EFlashCardIndex
/*enum EFlashCardIndex
{
	FCI_None                                           = 0,
	FCI_Weapon                                         = 1,
	FCI_Shield                                         = 2,
	FCI_GrenadeMod                                     = 3,
	FCI_ClassMod                                       = 4,
	FCI_Item                                           = 5,
	FCI_Blank                                          = 6,
	FCI_Artifact                                       = 7,
	FCI_MissionItem                                    = 8,
	FCI_MAX                                            = 9
};*/

// Enum WillowGame.WillowAutoTestManager.BACK_MENU_TYPE
/*enum BACK_MENU_TYPE
{
	BACK_LOGS                                          = 0,
	BACK_MAP                                           = 1,
	BACK_INVENTORY                                     = 2,
	BACK_SKILLS                                        = 3,
	BACK_CHALLENGES                                    = 4,
	BACK_MENU                                          = 5,
	BACK_MAX                                           = 6
};*/

// Enum WillowGame.WillowAwarenessZoneDefinition.EProvocationState
/*enum EProvocationState
{
	PROVOC_Normal                                      = 0,
	PROVOC_Warning                                     = 1,
	PROVOC_ImminentThreat                              = 2,
	PROVOC_MAX                                         = 3
};*/

// Enum WillowGame.WillowWeapon.EWeaponAnimation
/*enum EWeaponAnimation
{
	WEAPON_ANIM_Weapon                                 = 0,
	WEAPON_ANIM_Arm                                    = 1,
	WEAPON_ANIM_MAX                                    = 2
};*/

// Enum WillowGame.WillowWeapon.EWeaponSpinState
/*enum EWeaponSpinState
{
	SPIN_STATE_None                                    = 0,
	SPIN_STATE_SpinningUp                              = 1,
	SPIN_STATE_FullySpunUp                             = 2,
	SPIN_STATE_MAX                                     = 3
};*/

// Enum WillowGame.WillowWeapon.EWeaponReloadState
/*enum EWeaponReloadState
{
	RELOADSTATE_None                                   = 0,
	RELOADSTATE_Reloading                              = 1,
	RELOADSTATE_Aborted                                = 2,
	RELOADSTATE_MAX                                    = 3
};*/

// Enum WillowGame.WillowWeapon.EZoomState
/*enum EZoomState
{
	ZST_NotZoomed                                      = 0,
	ZST_ZoomingIn                                      = 1,
	ZST_Zoomed                                         = 2,
	ZST_ZoomingOut                                     = 3,
	ZST_MAX                                            = 4
};*/

// Enum WillowGame.WillowWeapon.EWeaponAnimPutDownState
/*enum EWeaponAnimPutDownState
{
	WAPDS_None                                         = 0,
	WAPDS_PutDown                                      = 1,
	WAPDS_PutDownSwap                                  = 2,
	WAPDS_PutDownInterrupted                           = 3,
	WAPDS_MAX                                          = 4
};*/

// Enum WillowGame.WillowNavigationHandle.EFlightMode
/*enum EFlightMode
{
	FlightMode_None                                    = 0,
	FlightMode_Flying                                  = 1,
	FlightMode_Stuck                                   = 2,
	FlightMode_Landing                                 = 3,
	FlightMode_Walking                                 = 4,
	FlightMode_MAX                                     = 5
};*/

// Enum WillowGame.WillowNavigationHandle.PathFixMode
/*enum PathFixMode
{
	PathFix_None                                       = 0,
	PathFix_Waiting                                    = 1,
	PathFix_Moving                                     = 2,
	PathFix_Lerping                                    = 3,
	PathFix_Failed                                     = 4,
	PathFix_MAX                                        = 5
};*/

// Enum WillowGame.WillowDamageArea.ECollisionPrimitive
/*enum ECollisionPrimitive
{
	CP_StaticMesh                                      = 0,
	CP_Cylinder                                        = 1,
	CP_Sphere                                          = 2,
	CP_MAX                                             = 3
};*/

// Enum WillowGame.WillowDialogAct_MissionSwitch.EMissionTrackedState
/*enum EMissionTrackedState
{
	MISSION_TRACKED_Either                             = 0,
	MISSION_TRACKED_Tracked                            = 1,
	MISSION_TRACKED_Untracked                          = 2,
	MISSION_TRACKED_MAX                                = 3
};*/

// Enum WillowGame.WillowDialogAct_RandomBranch.ERandSeqType
/*enum ERandSeqType
{
	RST_Random                                         = 0,
	RST_Sequential                                     = 1,
	RST_Shuffle                                        = 2,
	RST_MAX                                            = 3
};*/

// Enum WillowGame.WillowDialogNameTag.EchoPortraitType
/*enum EchoPortraitType
{
	ECHO_PORTRAIT_Scaleform                            = 0,
	ECHO_PORTRAIT_Video                                = 1,
	ECHO_PORTRAIT_MAX                                  = 2
};*/

// Enum WillowGame.WillowElevator.ElevatorButtonUsage
/*enum ElevatorButtonUsage
{
	EBU_Cycle                                          = 0,
	EBU_Call                                           = 1,
	EBU_Previous                                       = 2,
	EBU_Next                                           = 3,
	EBU_MAX                                            = 4
};*/

// Enum WillowGame.WillowElevatorButton.EElevButtonState
/*enum EElevButtonState
{
	BS_Enabled                                         = 0,
	BS_Disabled                                        = 1,
	BS_InUse                                           = 2,
	BS_MAX                                             = 3
};*/

// Enum WillowGame.WillowGameEngine.ELevelChangeState
/*enum ELevelChangeState
{
	LCS_None                                           = 0,
	LCS_SyncingCommit                                  = 1,
	LCS_SyncingUnPause                                 = 2,
	LCS_MAX                                            = 3
};*/

// Enum WillowGame.WillowGameMessage.EWillowGameMessage
/*enum EWillowGameMessage
{
	WGM_PlayerEnteredGame                              = 0,
	WGM_PlayerLeftGame                                 = 1,
	WGM_CreaturesGrowStronger                          = 2,
	WGM_CreaturesWeaken                                = 3,
	WGM_MAX                                            = 4
};*/

// Enum WillowGame.WillowGameViewportClient.EDeviceSelectionState
/*enum EDeviceSelectionState
{
	EDSS_None                                          = 0,
	EDSS_Pending                                       = 1,
	EDSS_Succeeded                                     = 2,
	EDSS_Failed                                        = 3,
	EDSS_MAX                                           = 4
};*/

// Enum WillowGame.WillowGFxColiseumOverlayMovie.EColiseumLatentScreen
/*enum EColiseumLatentScreen
{
	ECLS_RoundDefeated                                 = 0,
	ECLS_RoundSurvived                                 = 1,
	ECLS_Certificate                                   = 2,
	ECLS_MAX                                           = 3
};*/

// Enum WillowGame.WillowGFxMoviePressStart.EEggCodeKey
/*enum EEggCodeKey
{
	EGG_None                                           = 0,
	EGG_Up                                             = 1,
	EGG_Down                                           = 2,
	EGG_Left                                           = 3,
	EGG_Right                                          = 4,
	EGG_B                                              = 5,
	EGG_A                                              = 6,
	EGG_MAX                                            = 7
};*/

// Enum WillowGame.WillowGFxMoviePressStart.EStartupStep
/*enum EStartupStep
{
	STARTUP_NotStarted                                 = 0,
	STARTUP_DlcEnumeration                             = 1,
	STARTUP_PatcherDownload                            = 2,
	STARTUP_SparkAuthentication                        = 3,
	STARTUP_DeviceSelection                            = 4,
	STARTUP_CreateSession                              = 5,
	STARTUP_Complete                                   = 6,
	STARTUP_MAX                                        = 7
};*/

// Enum WillowGame.WillowHUDGFxMovie.EAmmoBar
/*enum EAmmoBar
{
	EAB_Default                                        = 0,
	EAB_DualWieldLeft                                  = 1,
	EAB_DualWieldRight                                 = 2,
	EAB_MAX                                            = 3
};*/

// Enum WillowGame.WillowMind.AIWeaponState
/*enum AIWeaponState
{
	AIWeaponState_Firing                               = 0,
	AIWeaponState_NotFiring                            = 1,
	AIWeaponState_FiringPaused                         = 2,
	AIWeaponState_MAX                                  = 3
};*/

// Enum WillowGame.WillowMind.EScriptFocus
/*enum EScriptFocus
{
	ESF_Path                                           = 0,
	ESF_Target                                         = 1,
	ESF_MAX                                            = 2
};*/

// Enum WillowGame.WillowPlayerInput.EButtonState
/*enum EButtonState
{
	BUTTON_STATE_Pressed                               = 0,
	BUTTON_STATE_Held                                  = 1,
	BUTTON_STATE_Released                              = 2,
	BUTTON_STATE_Cleared                               = 3,
	BUTTON_STATE_MAX                                   = 4
};*/

// Enum WillowGame.WillowPlayerPawn.ERegionList
/*enum ERegionList
{
	ERL_Firestone                                      = 0,
	ERL_NewHaven                                       = 1,
	ERL_MAX                                            = 2
};*/

// Enum WillowGame.WillowPlayerPawn.EInjuredPreDeathState
/*enum EInjuredPreDeathState
{
	INJUREDPREDEATH_None                               = 0,
	INJUREDPREDEATH_Start                              = 1,
	INJUREDPREDEATH_Stop                               = 2,
	INJUREDPREDEATH_MAX                                = 3
};*/

// Enum WillowGame.WillowPlayerPawnDataManager.DataRequestType
/*enum DataRequestType
{
	DRT_PlayerPawn                                     = 0,
	DRT_SkillTreeDef                                   = 1,
	DRT_VehicleDef                                     = 2,
	DRT_MAX                                            = 3
};*/

// Enum WillowGame.WillowPopulationPoint.EStretchyType
/*enum EStretchyType
{
	Stretchy_Linear                                    = 0,
	Stretchy_Parabola                                  = 1,
	Stretchy_MAX                                       = 2
};*/

// Enum WillowGame.WillowSeqAct_AICombatVolume.ECombatVolumeOption
/*enum ECombatVolumeOption
{
	ECVO_Set                                           = 0,
	ECVO_Clear                                         = 1,
	ECVO_MAX                                           = 2
};*/

// Enum WillowGame.WillowSeqAct_AIScriptedHold.EScriptedHoldOption
/*enum EScriptedHoldOption
{
	ScriptedHold_Hold                                  = 0,
	ScriptedHold_Release                               = 1,
	ScriptedHold_MAX                                   = 2
};*/

// Enum WillowGame.WillowSeqAct_KillPawnBasedOnAllegiance.EAllegianceRelationship
/*enum EAllegianceRelationship
{
	ALLEG_Enemy                                        = 0,
	ALLEG_Friendly                                     = 1,
	ALLEG_JustThisAllegiance                           = 2,
	ALLEG_MAX                                          = 3
};*/

// Enum WillowGame.WillowSeqAct_PlayArmAnimation.EAnimationType
/*enum EAnimationType
{
	AT_Equip                                           = 0,
	AT_PutDown                                         = 1,
	AT_MAX                                             = 2
};*/

// Enum WillowGame.WillowSkelControl_RotationRateBySpeed.ESpeedComponent
/*enum ESpeedComponent
{
	ESC_Forward                                        = 0,
	ESC_Strafe                                         = 1,
	ESC_Horizontal                                     = 2,
	ESC_Vertical                                       = 3,
	ESC_Full                                           = 4,
	ESC_MAX                                            = 5
};*/

// Enum WillowGame.WillowStaggerAnimNodeBlend.EReferencePointType
/*enum EReferencePointType
{
	REFPOINT_TYPE_Bone                                 = 0,
	REFPOINT_TYPE_Socket                               = 1,
	REFPOINT_TYPE_MAX                                  = 2
};*/

// Enum WillowGame.WillowTI_PrioritizeHealth.EHealthPriority
/*enum EHealthPriority
{
	HealthPriority_PrioritizeWeak                      = 0,
	HealthPriority_PrioritizeHealthy                   = 1,
	HealthPriority_MAX                                 = 2
};*/

// Enum WillowGame.WillowUIInteraction.EAttributeDebugSort
/*enum EAttributeDebugSort
{
	ATTDEBUGSORT_NameUp                                = 0,
	ATTDEBUGSORT_NameDn                                = 1,
	ATTDEBUGSORT_MAX                                   = 2
};*/

// Enum WillowGame.WillowUIInteraction.EFontSize
/*enum EFontSize
{
	FONT_Medium                                        = 0,
	FONT_Tiny                                          = 1,
	FONT_Small                                         = 2,
	FONT_Large                                         = 3,
	FONT_MAX                                           = 4
};*/

// Enum WillowGame.WillowUIInteraction.ETextHAlignment
/*enum ETextHAlignment
{
	HALIGN_FixedPos                                    = 0,
	HALIGN_Left                                        = 1,
	HALIGN_Center                                      = 2,
	HALIGN_MAX                                         = 3
};*/

// Enum WillowGame.WillowUIInteraction.EItemTypeForUI
/*enum EItemTypeForUI
{
	ITEMUI_Armor                                       = 0,
	ITEMUI_Item                                        = 1,
	ITEMUI_Ammo                                        = 2,
	ITEMUI_MAX                                         = 3
};*/

// Enum WillowGame.WillowUIInteraction.ETextVAlignment
/*enum ETextVAlignment
{
	VALIGN_FixedPos                                    = 0,
	VALIGN_Center                                      = 1,
	VALIGN_Bottom                                      = 2,
	VALIGN_MAX                                         = 3
};*/

// Enum WillowGame.WillowUIInteraction.EMemoryDetailsSortStyle
/*enum EMemoryDetailsSortStyle
{
	MEMDETAILSORT_ResourceNameAToZ                     = 0,
	MEMDETAILSORT_ResourceNameZToA                     = 1,
	MEMDETAILSORT_SizeSmallToLarge                     = 2,
	MEMDETAILSORT_SizeLargeToSmall                     = 3,
	MEMDETAILSORT_CountHighToLow                       = 4,
	MEMDETAILSORT_MAX                                  = 5
};*/

// Enum WillowGame.WillowUIInteraction.ENetworkActorChannelSortStyle
/*enum ENetworkActorChannelSortStyle
{
	NETACTORSORT_ActorNameAToZ                         = 0,
	NETACTORSORT_ActornameZToA                         = 1,
	NETACTORSORT_CountHighToLow                        = 2,
	NETACTORSORT_CountLowToHigh                        = 3,
	NETACTORSORT_MAX                                   = 4
};*/

// Enum WillowGame.WillowUIInteraction.EGearBuilderSortMode
/*enum EGearBuilderSortMode
{
	GBSM_None                                          = 0,
	GBSM_WeightHighToLow                               = 1,
	GBSM_WeightLowToHigh                               = 2,
	GBSM_Invalid                                       = 3,
	GBSM_MAX                                           = 4
};*/

// Enum WillowGame.WillowVehicleBase.SightOriginOption
/*enum SightOriginOption
{
	SIGHTORIGIN_LocationPlusOffset                     = 0,
	SIGHTORIGIN_Socket                                 = 1,
	SIGHTORIGIN_MAX                                    = 2
};*/

// Enum WillowGame.WillowVehicleControlDefinition.EVehCamera
/*enum EVehCamera
{
	EVC_Free                                           = 0,
	EVC_Constrained                                    = 1,
	EVC_FollowsSteering                                = 2,
	EVC_MAX                                            = 3
};*/

// Enum WillowGame.WillowVehicleControlDefinition.EVehSteering
/*enum EVehSteering
{
	EVS_VehicleRelative                                = 0,
	EVS_CameraRelative                                 = 1,
	EVS_FollowsCamera                                  = 2,
	EVS_MAX                                            = 3
};*/

// Enum WillowGame.WillowVehicle.EVehicleDeathStatus
/*enum EVehicleDeathStatus
{
	VEHDEATH_Alive                                     = 0,
	VEHDEATH_Instant                                   = 1,
	VEHDEATH_Explode                                   = 2,
	VEHDEATH_DeRez                                     = 3,
	VEHDEATH_MAX                                       = 4
};*/

// Enum WillowGame.WillowVehicle.EVehicleFOVState
/*enum EVehicleFOVState
{
	VEHICLE_FOV_Default                                = 0,
	VEHICLE_FOV_AfterburnerOn                          = 1,
	VEHICLE_FOV_AfterburnerOff                         = 2,
	VEHICLE_FOV_MAX                                    = 3
};*/

// Enum WillowGame.WillowVehicle_Tank.TankSensorType
/*enum TankSensorType
{
	TST_Front                                          = 0,
	TST_Right                                          = 1,
	TST_Left                                           = 2,
	TST_Back                                           = 3,
	TST_MAX                                            = 4
};*/

// Enum WillowGame.WillowVersusDuelGlobals.EDuelMsg
/*enum EDuelMsg
{
	DMSG_DUELINGDISABLED                               = 0,
	DMSG_ALREADYDUELING                                = 1,
	DMSG_ALREADYCHALLENGED                             = 2,
	DMSG_DUELTIMEOUT                                   = 3,
	DMSG_ISSUEDCHALLENGE                               = 4,
	DMSG_RECEIVEDCHALLENGE                             = 5,
	DMSG_ACCEPTEDCHALLENGE                             = 6,
	DMSG_DUELSTART                                     = 7,
	DMSG_ARENAWARNING                                  = 8,
	DMSG_DUELDRAW                                      = 9,
	DMSG_DUELWIN                                       = 10,
	DMSG_NOTRIGHTNOW                                   = 11,
	DMSG_MAX                                           = 12
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class WillowGame.AchievementUtility
// 0x0000 (0x003C - 0x003C)
class UAchievementUtility : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3594 ];

		return pClassPointer;
	};

	TArray< unsigned char > ShouldUnlockAchievementFromUnlockType ( unsigned char UnlockType, struct FString StringData, int IntData, unsigned long bCanBeGreater, unsigned long bCheckStringAndIntData, unsigned long bCanBeLess );
};

UClass* UAchievementUtility::pClassPointer = NULL;

// Class WillowGame.ActionSkill
// 0x00AC (0x0234 - 0x0188)
class AActionSkill : public AActor
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IITimerBehavior;                          		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IICustomEvent;                            		// 0x0190 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x0194 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0198 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x019C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              TickRate;                                         		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              NextTick;                                         		// 0x01A4 (0x0004) [0x0000000000000000]              
	class AController*                                 MyController;                                     		// 0x01A8 (0x0004) [0x0000000000000000]              
	class AWillowPawn*                                 MyWillowPawn;                                     		// 0x01AC (0x0004) [0x0000000000000000]              
	class AWillowPlayerPawn*                           MyWillowPlayerPawn;                               		// 0x01B0 (0x0004) [0x0000000000000000]              
	class AWillowPlayerController*                     MyWillowPC;                                       		// 0x01B4 (0x0004) [0x0000000000000000]              
	class AWillowMind*                                 MyWillowMind;                                     		// 0x01B8 (0x0004) [0x0000000000000000]              
	class AWillowPawn*                                 TargetPawn;                                       		// 0x01BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FInstanceDataSet                            InstanceState;                                    		// 0x01C0 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x01CC (0x0004) [0x0000000000000000]              
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                  		// 0x01D0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                          		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FTimerBehaviorUserState                     ActionSkillTimers;                                		// 0x01E4 (0x0024) [0x0000000000000000]              
	struct FActionSkillCustomEventReplicationData      CustomEventReplication;                           		// 0x0208 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bInitialized : 1;                                 		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDebugEnabled : 1;                                		// 0x0214 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBlockDeactivate : 1;                             		// 0x0214 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWantsDeactivate : 1;                             		// 0x0214 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWantsDestroy : 1;                                		// 0x0214 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bActionSkillNearingCompletionEventFired : 1;      		// 0x0214 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAllowAutomaticActiveAbilityActivation : 1;       		// 0x0214 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRestrictActiveAbilityByCount : 1;                		// 0x0214 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRestrictActiveAbilityByTimeFrequency : 1;        		// 0x0214 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowAutomaticCooldownAbilityActivation : 1;     		// 0x0214 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRestrictCooldownAbilityByCount : 1;              		// 0x0214 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRestrictCooldownAbilityByTimeFrequency : 1;      		// 0x0214 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	float                                              ActionSkillNearingCompletionTime;                 		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxActivationCountPerActiveCycle;                 		// 0x021C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ActiveAbilityActivationTimeFrequency;             		// 0x0220 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxActivationCountPerCooldownCycle;               		// 0x0224 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CooldownAbilityActivationTimeFrequency;           		// 0x0228 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            MeleeOverrideSkill;                               		// 0x022C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TimeStarted;                                      		// 0x0230 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3596 ];

		return pClassPointer;
	};

	bool ShouldResetOnInterruptedGrenadeThrow ( );
	bool CanResetActionSkill ( );
	bool eventOverrideCrosshairVisibility ( unsigned long bVisible, unsigned long bForScope );
	float eventGetDeferredActionSkillTime ( );
	void eventTickActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie, float ActionSkillTime, float DeltaTime );
	void eventDisableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void eventEnableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	class UObject* GetActionSkillEventContextObject ( );
	void eventRunCustomEvent ( struct FName EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData );
	void eventHandleTimerEvent ( unsigned char EventType, struct FBehaviorParameters EventData );
	bool SetTimerState ( unsigned char TimerId, struct FBehaviorTimerState TimerState );
	bool GetTimerState ( unsigned char TimerId, struct FBehaviorTimerState* TimerState );
	float GetTimeSeconds ( );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	void EnableDebug ( unsigned long DebugEnabled );
	void NotifyActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn );
	void StartActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn );
	void ClientStartActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn );
	bool AllowNewActiveAbilityActivation ( int* CurrentActionSkillActiveAbilityCount, float* NextActionSkillActiveAbilityTime );
	bool AllowAutomaticActiveAbilityActivation ( );
	bool AllowNewCooldownAbilityActivation ( int* CurrentActionSkillCooldownAbilityCount, float* NextActionSkillCooldownAbilityTime );
	bool AllowAutomaticCooldownAbilityActivation ( );
	void eventOnActionSkillTick ( float DeltaTime );
	bool OverridesStandardMelee ( );
	bool ReadyToInterceptMelee ( class AWillowPawn* AutoAimTarget );
	void OnActionSkillOwnerMelee ( class AWillowPawn* TargetIfAvailable );
	void OnActionSkillWeaponsRestricted ( unsigned long bWeaponsRestricted );
	void OnActionSkillOwnerInjured ( );
	void OnActionSkillKilledEnemy ( class AWillowPawn* KilledPawn );
	void OnActionSkillShowBackMenu ( unsigned long bOpened );
	void OnActionSkillFakePause ( unsigned long bPaused );
	void OnActionSkillOwnerTouchedActor ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void OnActionSkillOwnerHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void OnActionSkillOwnerStoppedWalking ( );
	void OnActionSkillOwnerBeganWalking ( unsigned char PreviousPhysics );
	void OnActionSkillOwnerBeganFalling ( unsigned char PreviousPhysics );
	void eventOnActionSkillOwnerAllieganceChanged ( class UPawnAllegiance* NewAllegiance );
	void OnActionSkillOwnerWeaponSwitched ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void OnActionSkillOwnerDied ( );
	void eventOwnerLostAutoAimTarget ( class UITargetable* OldTargetable );
	void eventOwnerAcquiredAutoAimTarget ( class UITargetable* NewTargetable );
	void eventTornOff ( );
	void TearOff ( );
	void OnActionSkillEnded ( );
	bool eventIsDeactivateBlocked ( );
	void ClientActionSkillWantsToDeactivate ( );
	void eventOnActionSkillWantsToDeactivate ( );
	void OnActionSkillStarted ( class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn );
	void eventReplicatedEvent ( struct FName VarName );
	void OnActionSkillOwnerShowBackMenu ( class APawn* SkillInstigator, unsigned long bOpened, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnTimerEvent ( struct FName SpecializedEventName, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnActionSkillNearingCompletion ( class APawn* SkillInstigator, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnActionSkillOwnerMeleeOverridden ( class APawn* SkillInstigator, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnOwnerLostAutoAimTarget ( class APawn* SkillOwner, class AActor* OldTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnOwnerAcquiredAutoAimTarget ( class APawn* SkillOwner, class AActor* NewTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnActionSkillDeactivated ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnActionSkillActivated ( class APawn* SkillInstigator, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnActionSkillActiveAbilityNotified ( class APawn* SkillInstigator, float ActiveTimeRemaining, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnActionSkillActiveAbilityActivated ( class APawn* SkillInstigator, float ActiveTimeRemaining, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* AActionSkill::pClassPointer = NULL;

// Class WillowGame.ScorpioActionSkill
// 0x0014 (0x0248 - 0x0234)
class AScorpioActionSkill : public AActionSkill
{
public:
	class ADeployableTurretActor*                      ScorpioSpawnedActor;                              		// 0x0234 (0x0004) [0x0000000000000000]              
	class ADeployableTurretActor*                      GeminiSpawnedActor;                               		// 0x0238 (0x0004) [0x0000000000000000]              
	class AWillowProjectile*                           ActiveProjectile;                                 		// 0x023C (0x0004) [0x0000000000000000]              
	class USkillDefinition*                            GeminiSkill;                                      		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      ThrowScorpioSMD;                                  		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3598 ];

		return pClassPointer;
	};

	bool ShouldResetOnInterruptedGrenadeThrow ( );
	bool CanResetActionSkill ( );
	void NotifySkillActorDied ( class AActor* SkillActor );
	class UObject* GetActionSkillEventContextObject ( );
	void ClientDeployScorpio ( );
	void DeployScorpio ( );
	void PlayThrowAnimation ( );
	void DestroyOwnedInstanceData ( );
	bool RemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	bool AllowNewActiveAbilityActivation ( int* CurrentActionSkillActiveAbilityCount, float* NextActionSkillActiveAbilityTime );
	void StartActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* AutoAimTarget );
	void OnActionSkillOwnerDied ( );
	void OnActionSkillEnded ( );
	void OnActionSkillStarted ( class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn );
};

UClass* AScorpioActionSkill::pClassPointer = NULL;

// Class WillowGame.ActorFactoryInteractiveObject
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryInteractiveObject : public UActorFactory
{
public:
	class UInteractiveObjectDefinition*                Definition;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3600 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryInteractiveObject::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowElevatorButton
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryWillowElevatorButton : public UActorFactoryInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3602 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowElevatorButton::pClassPointer = NULL;

// Class WillowGame.ActorFactoryMissionPickupSpawner
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryMissionPickupSpawner : public UActorFactory
{
public:
	class UMissionItemDefinition*                      Definition;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3604 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryMissionPickupSpawner::pClassPointer = NULL;

// Class WillowGame.ActorFactoryMissionPickupFailsafe
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryMissionPickupFailsafe : public UActorFactoryMissionPickupSpawner
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3606 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryMissionPickupFailsafe::pClassPointer = NULL;

// Class WillowGame.ActorFactoryPopulationOpportunityArea
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPopulationOpportunityArea : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3608 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPopulationOpportunityArea::pClassPointer = NULL;

// Class WillowGame.ActorFactoryPopulationOpportunityDen
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPopulationOpportunityDen : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3610 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPopulationOpportunityDen::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowCoopPlayerStart
// 0x0000 (0x007C - 0x007C)
class UActorFactoryWillowCoopPlayerStart : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3612 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowCoopPlayerStart::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowElevator
// 0x0000 (0x0094 - 0x0094)
class UActorFactoryWillowElevator : public UActorFactoryMover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3614 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowElevator::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowPawn
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryWillowPawn : public UActorFactory
{
public:
	class AWillowPawn*                                 PawnArchetype;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3616 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowPawn::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowTrigger
// 0x0000 (0x007C - 0x007C)
class UActorFactoryWillowTrigger : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3618 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowTrigger::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowVehicle
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryWillowVehicle : public UActorFactory
{
public:
	class AWillowVehicle*                              VehicleArchetype;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3620 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowVehicle::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowVehicleFactory
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryWillowVehicleFactory : public UActorFactoryWillowVehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3622 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowVehicleFactory::pClassPointer = NULL;

// Class WillowGame.ActorFactoryWillowWaypoint
// 0x0000 (0x007C - 0x007C)
class UActorFactoryWillowWaypoint : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3624 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWillowWaypoint::pClassPointer = NULL;

// Class WillowGame.AdvancedAxisDefinition
// 0x001C (0x0058 - 0x003C)
class UAdvancedAxisDefinition : public UGBXDefinition
{
public:
	float                                              Speed;                                            		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomSpeed;                                        		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DeadZone;                                         		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelThreshold;                                   		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelRate;                                        		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelSpeed;                                       		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelWarmup;                                      		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3626 ];

		return pClassPointer;
	};

};

UClass* UAdvancedAxisDefinition::pClassPointer = NULL;

// Class WillowGame.AIPawnBalanceModifierDefinition
// 0x001C (0x0058 - 0x003C)
class UAIPawnBalanceModifierDefinition : public UGBXDefinition
{
public:
	struct FString                                     AIPawnBalanceDefinitionPath;                      		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEmptyAttributeStartingValues : 1;                		// 0x0048 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3628 ];

		return pClassPointer;
	};

};

UClass* UAIPawnBalanceModifierDefinition::pClassPointer = NULL;

// Class WillowGame.AIResourceAttributeValueResolver
// 0x0004 (0x0040 - 0x003C)
class UAIResourceAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UAIResource*                                 Resource;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3630 ];

		return pClassPointer;
	};

};

UClass* UAIResourceAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.AmmoDropWeightAttributeValueResolver
// 0x0054 (0x0090 - 0x003C)
class UAmmoDropWeightAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UResourceDefinition*                         Resource;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ResourceThreshold;                                		// 0x0040 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                AboveThresholdWeight;                             		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                NoPoolWeight;                                     		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MinBelowThresholdWeight;                          		// 0x0070 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MaxBelowThresholdWeight;                          		// 0x0080 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3632 ];

		return pClassPointer;
	};

};

UClass* UAmmoDropWeightAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.AmmoResourcePool
// 0x0000 (0x0118 - 0x0118)
class UAmmoResourcePool : public UResourcePool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3634 ];

		return pClassPointer;
	};

	void GetDebugText ( TArray< struct FString >* DebugText );
	float GetExtraAmmoRegen ( );
};

UClass* UAmmoResourcePool::pClassPointer = NULL;

// Class WillowGame.AmmoResourceUpgradeAttributeValueResolver
// 0x0008 (0x0044 - 0x003C)
class UAmmoResourceUpgradeAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UResourceDefinition*                         AssociatedResource;                               		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                AmmoResourceUpgradesArrayIndex;                   		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3636 ];

		return pClassPointer;
	};

};

UClass* UAmmoResourceUpgradeAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.AnemoneInfectionDefinition
// 0x0060 (0x009C - 0x003C)
class UAnemoneInfectionDefinition : public UGBXDefinition
{
public:
	float                                              FullInfectionTime;                                		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullHealingTime;                                  		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         MovieDefinition;                                  		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplaySpeed;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DiscoveryTextHiddenTime;                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             InfectionFXTemplate;                              		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkillDefinition*                            GasCloudSkill;                                    		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SkillFXTemplate;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkillFXInTime;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkillFXOutTime;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SmallAmbientFXTemplate;                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LargeAmbientFXTemplate;                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StartEvent;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StopEvent;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkRtpc*                                     AkRtpc;                                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMissionObjectiveDefinition*                 LinkedObjective;                                  		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                FullyInfectedDamage;                              		// 0x007C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      DamageType;                                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageFrequency;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FogDensityValue;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FogRampUpTime;                                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3638 ];

		return pClassPointer;
	};

};

UClass* UAnemoneInfectionDefinition::pClassPointer = NULL;

// Class WillowGame.AnemoneInfectionState
// 0x0058 (0x01E0 - 0x0188)
class AAnemoneInfectionState : public AActor
{
public:
	class UGFxMovieInteractiveObject*                  TimerMovie;                                       		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     WPC;                                              		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InfectionRate;                                    		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentInfection;                                 		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSkillFXValue;                              		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SkillFXSpeed;                                     		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageTimer;                                      		// 0x01A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TemporarilyHiddenTimer;                           		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsLocalPlayer : 1;                               		// 0x01A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsImmune : 1;                                    		// 0x01A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< class AActor* >                            SmallZones;                                       		// 0x01AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            LargeZones;                                       		// 0x01B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnemoneInfectionDefinition*                 InfectionDefinition;                              		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AHeightFog*                                  HeightFog;                                        		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HeightFogValue;                                   		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FFDisplayTimer                              DisplayTimer;                                     		// 0x01D0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3640 ];

		return pClassPointer;
	};

	void DoInfectionDamage ( );
	void NotifyPawnDied ( );
	void UpdateZone ( );
	void Tick ( float DeltaTime );
	void StateTick ( float DeltaTime );
	void UpdateDisplay ( float DeltaTime );
	void UpdateHeightFog ( float DeltaTime );
	void ShowAmbientFX ( unsigned long bShow );
	void ShowParticleSystem ( unsigned long bShow, class UParticleSystem* FXSystemTemplate );
	void UpdateSkillFX ( );
	void UpdateSkillFXValue ( float DeltaTime );
	void ShowSkillFX ( unsigned long bShow );
	void UpdateInfectionFX ( float CurrentValue );
	void ShowInfectionFX ( unsigned long bShow );
	void DeactivateSkill ( );
	void ActivateSkill ( );
	void StopInfectedImpl ( );
	void StopInfected ( );
	void ExitInfectionVolumeImpl ( unsigned long bForceInstantHeal );
	void ExitInfectionVolume ( unsigned long bForceInstantHeal );
	void EnterInfectionVolume ( );
	void SetModalMenuOpen ( unsigned long bOpen );
	void HideBarTemporarily ( );
	bool IsInfected ( );
	void SetAnemoneInfectionState ( class AWillowPlayerController* OwnerController, unsigned long bIsInfected, unsigned long bLargeZone, class AActor* Zone, class UAnemoneInfectionDefinition* NewInfectionDefinition, class AHeightFog* NewHeightFog );
	bool CheckZoneCollision ( );
	bool AddZone ( unsigned long bLargeZone, class AActor* Zone );
	float GetStatusEffectDamage ( );
	void ToggleInfectionEffects ( unsigned long bEnable, class AWillowPlayerController* OwnerController );
	bool CheckImmunity ( );
	void StopInfectionSound ( );
	void UpdateInfectionSound ( );
	void StartInfectionSound ( );
};

UClass* AAnemoneInfectionState::pClassPointer = NULL;

// Class WillowGame.AssetLibraryManager
// 0x00A8 (0x00E4 - 0x003C)
class UAssetLibraryManager : public UObject
{
public:
	struct FAssetLibConfig                             LibraryConfigs[ 0x6 ];                            		// 0x003C (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSKULibrarySet >                    EditorAssetLibraries;                             		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSKURuntimeLibrarySet >             RuntimeAssetLibraries;                            		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3642 ];

		return pClassPointer;
	};

	int DetermineObjLibraryType ( class UObject* Obj );
	int DetermineLibraryType ( class UClass* LibraryType );
	bool DecodeTyped ( int EncodedObj, unsigned char ObjType, int Revision, int SKUID, class UObject** DecodedResult );
	bool Decode ( int EncodedObj, int Revision, int SKUID, class UObject** DecodedResult );
	int EncodeSKUID ( int SKUID );
	int EncodeTyped ( class UObject* Obj, unsigned char ObjType, int SKUID );
	int Encode ( class UObject* Obj, int SKUID );
};

UClass* UAssetLibraryManager::pClassPointer = NULL;

// Class WillowGame.AttributePresentationDefinition
// 0x0098 (0x00D4 - 0x003C)
class UAttributePresentationDefinition : public UGBXDefinition
{
public:
	float                                              BasePriority;                                     		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeDefinition*                        Attribute;                                        		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     Description;                                      		// 0x0044 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoConstraintText;                                 		// 0x0050 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Suffix;                                           		// 0x005C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Prefix;                                           		// 0x0068 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIncludeSuffixInTranslation : 1;                  		// 0x0074 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIncludePrefixInTranslation : 1;                  		// 0x0074 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBiggerIsBetter : 1;                              		// 0x0074 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisplayAsPercentage : 1;                         		// 0x0074 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisplayPercentAsFloat : 1;                       		// 0x0074 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisplayAsInverse : 1;                            		// 0x0074 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDontDisplayNumber : 1;                           		// 0x0074 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDontDisplayPlusSign : 1;                         		// 0x0074 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCustomNumberPlacement : 1;                    		// 0x0074 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableTextColor : 1;                             		// 0x0074 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bValueRemappingEnabled : 1;                       		// 0x0074 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bUseOneAsBaseValueForPresentationIfContextFailsToResolve : 1;		// 0x0074 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseTwoAsBaseValueForPresentationIfContextFailsToResolve : 1;		// 0x0074 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned char                                      RoundingMode;                                     		// 0x0078 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SignStyle;                                        		// 0x0079 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      TextColor;                                        		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                FloatPrecision;                                   		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     Icon;                                             		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributePresentationValueRemappingData    RemappingData;                                    		// 0x0090 (0x0044) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3644 ];

		return pClassPointer;
	};

	bool IncludePrefixInTranslation ( );
	bool IncludeSuffixInTranslation ( );
	bool IsTextColorEnabled ( );
	struct FColor GetTextColor ( );
	unsigned char GetSignStyle ( );
	unsigned char GetEffectiveRoundingMode ( unsigned char Style );
	unsigned char GetRoundingMode ( );
	bool ShouldUseCustomNumberPlacement ( );
	bool ShouldDisplayPlusSign ( );
	bool ShouldDisplayNumberInTranslation ( );
	bool ShouldDisplayAsInverse ( );
	bool ShouldDisplayAsPercentage ( );
	bool IsBiggerBetter ( );
	struct FString GetIconFramename ( );
	struct FString GetPrefix ( );
	struct FString GetSuffix ( );
	struct FString GetNoConstraintText ( );
	struct FString GetDescription ( );
	float GetBasePriority ( );
	float RemapValue ( float InputValue, class UObject* ContextSourceOverride );
	float RoundValue ( float InputValue, int PrecisionAferDecimalPoint, unsigned char EffectiveRoundingMode );
	float ApplyPresentationRulesToValue ( float ModifierValue, unsigned char Style, unsigned long bAllowZero, class UObject* ContextSourceOverride );
	struct FString ValueToString ( float ModifierValue, unsigned char Style, class UObject* ContextSourceOverride );
	struct FString TranslateValue ( float Value, unsigned char Style, class UAttributePresentationDefinition* ConstraintPresentation );
	struct FString TranslateStatData ( unsigned char Style, struct FModifierValuePresentationData* StatData );
};

UClass* UAttributePresentationDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponStatusEffectAttributePresentationDefinition
// 0x000C (0x00E0 - 0x00D4)
class UWeaponStatusEffectAttributePresentationDefinition : public UAttributePresentationDefinition
{
public:
	TArray< struct FAttributePresentationDamageTypeMapping > MappingData;                                      		// 0x00D4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3646 ];

		return pClassPointer;
	};

};

UClass* UWeaponStatusEffectAttributePresentationDefinition::pClassPointer = NULL;

// Class WillowGame.AttributePresentationListDefinition
// 0x000C (0x0048 - 0x003C)
class UAttributePresentationListDefinition : public UGBXDefinition
{
public:
	TArray< class UAttributePresentationDefinition* >  Attributes;                                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3648 ];

		return pClassPointer;
	};

	class UAttributePresentationDefinition* FindAttributePresentation ( class UAttributeDefinition* Attribute );
};

UClass* UAttributePresentationListDefinition::pClassPointer = NULL;

// Class WillowGame.AttributeSlotEffectAttributeValueResolver
// 0x000C (0x0048 - 0x003C)
class UAttributeSlotEffectAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      SlotProperty;                                     		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SlotName;                                         		// 0x0040 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3650 ];

		return pClassPointer;
	};

};

UClass* UAttributeSlotEffectAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.AvatarAwardUtility
// 0x0000 (0x003C - 0x003C)
class UAvatarAwardUtility : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3652 ];

		return pClassPointer;
	};

};

UClass* UAvatarAwardUtility::pClassPointer = NULL;

// Class WillowGame.BadassAttributeValueResolver
// 0x0004 (0x0040 - 0x003C)
class UBadassAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UBadassRewardDefinition*                     AssociatedBadassReward;                           		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3654 ];

		return pClassPointer;
	};

};

UClass* UBadassAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.BadassRewardDefinition
// 0x0030 (0x006C - 0x003C)
class UBadassRewardDefinition : public UGBXDefinition
{
public:
	struct FString                                     RewardName;                                       		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RewardString;                                     		// 0x0054 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UAttributeInitializationDefinition*          AttrInitDef;                                      		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationDefinition*            Presentation;                                     		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                CachedRewardIndex;                                		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3656 ];

		return pClassPointer;
	};

	void UpdateCachedRewardIndex ( );
};

UClass* UBadassRewardDefinition::pClassPointer = NULL;

// Class WillowGame.BalanceModifierDefinition
// 0x00B0 (0x00EC - 0x003C)
class UBalanceModifierDefinition : public UGBXDefinition
{
public:
	int                                                PlaythroughToBalance;                             		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FBalanceModification >              BalanceModifiers;                                 		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              ModifierToXPGainedTowardsNewLevelsInEarlierPlaythroughs[ 0x2 ];		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FBlackMarketPostLaunchUpgradeData > AdditionalAmmoSDUUpgrades;                        		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FBlackMarketPostLaunchUpgradeData > AdditionalBankStorageUpgrades;                    		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FBlackMarketPostLaunchUpgradeData > AdditionalBackpackSDUUpgrades;                    		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FMapSpecificBalanceModificationList > MapSpecificBalanceModifiers;                      		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FMapSpecificBalanceModificationList > BalanceModifiersForPlayersWithOneLevelCapUpgrade; 		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FMapSpecificBalanceModificationList > BalanceModifiersForPlayersWithTwoLevelCapUpgrades;		// 0x0090 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FMapSpecificBalanceModificationList > BalanceModifiersForPlayersWithTwoLevelCapUpgradesAndOverpower;		// 0x009C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UDownloadableFixupAIPawnNamesDefinition*     NewAIPawnNamesForThisPlayThrough;                 		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GearDrops_CommonWeightModifier_PT1_BaseValueOverride;		// 0x00AC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GearDrops_CommonWeightModifier_PT2_BaseValueOverride;		// 0x00BC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ChestItemPool_Weight_2_Uncommon_PT1_Multiplier;   		// 0x00CC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ChestItemPool_Weight_2_Uncommon_PT2_Multiplier;   		// 0x00DC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3658 ];

		return pClassPointer;
	};

	float GetAIDamageScaleBasedOnExpLevelDifferences ( int ExpLevelOfInstigator, int ExpLevelOfTarget, int GameStage, float DefaultReturnValue );
	float GetStatusEffectChanceBasedOnExpLevelDifferences ( int ExpLevelOfInstigator, int ExpLevelOfTarget, int GameStage, float DefaultReturnValue );
	float GetUncommonChestItemPoolWeightMultiplier ( int GameStage );
	float GetCommonGearDropWeightBaseValue ( );
	class UDownloadableFixupAIPawnNamesDefinition* GetNewAIPawnNamesForThisPlayThrough ( );
	void UpdatePlayerVehicleDamage ( class AWillowVehicle* PlayerVehicle );
	float GetAmmoDropsPerPlayerMultiplier ( class UObject* ContextSource, int GameStage );
	float GetAmplifiedDamageMultiplier ( );
	float GetAdditionalEnemyDamageMultiplier ( int EnemyGameStage, unsigned long bIsChampion );
	void ApplyPlayThroughBasedPlayerAttributeEffects ( class AWillowPlayerController* Player );
	void UpdateSpawnedPlayerEnemyAIPawn ( class AWillowAIPawn* SpawnedAIPawn, class AWillowMind* WMind );
	float GetXPEarnedMultiplier ( class AWillowPlayerController* PlayerGettingXP, unsigned char ExperienceType );
};

UClass* UBalanceModifierDefinition::pClassPointer = NULL;

// Class WillowGame.Behavior_ActivateInstancedMissionBehaviorSequence
// 0x0010 (0x005C - 0x004C)
class UBehavior_ActivateInstancedMissionBehaviorSequence : public UBehaviorBase
{
public:
	class UMissionDefinition*                          Mission;                                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMissionObjectiveDefinition*                 MissionObjective;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SequenceName;                                     		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3660 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ActivateInstancedMissionBehaviorSequence::pClassPointer = NULL;

// Class WillowGame.Behavior_ActivateMission
// 0x0000 (0x004C - 0x004C)
class UBehavior_ActivateMission : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3662 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ActivateMission::pClassPointer = NULL;

// Class WillowGame.Behavior_AddMissionDirectives
// 0x000C (0x0058 - 0x004C)
class UBehavior_AddMissionDirectives : public UBehaviorBase
{
public:
	TArray< struct FMissionDirectorData >              MissionDirectives;                                		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3664 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AddMissionDirectives::pClassPointer = NULL;

// Class WillowGame.Behavior_AddMissionTime
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AddMissionTime : public UBehaviorBase
{
public:
	float                                              SecondsToAdd;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3666 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AddMissionTime::pClassPointer = NULL;

// Class WillowGame.Behavior_AdvanceObjectiveSet
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AdvanceObjectiveSet : public UBehaviorBase
{
public:
	class UMissionObjectiveSetDefinition*              ObjectiveSetToAdvanceTo;                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3668 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AdvanceObjectiveSet::pClassPointer = NULL;

// Class WillowGame.Behavior_AICloak
// 0x0008 (0x0054 - 0x004C)
class UBehavior_AICloak : public UBehaviorBase
{
public:
	unsigned char                                      NewCloakBehavior;                                 		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bImmediate : 1;                                   		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3670 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AICloak::pClassPointer = NULL;

// Class WillowGame.Behavior_AIThrowProjectileAtTarget
// 0x005C (0x00A8 - 0x004C)
class UBehavior_AIThrowProjectileAtTarget : public UBehaviorBase
{
public:
	int                                                NumProjectiles;                                   		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FTrajectoryData                             Options;                                          		// 0x0050 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     StartOffset;                                      		// 0x0070 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       StartSocket;                                      		// 0x007C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           ChildProjectileBaseValues;                        		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UProjectileDefinition*                       ProjectileDef;                                    		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGrenade : 1;                                     		// 0x0094 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class AWillowProjectile*                           ExistingProjectile;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAIThrowProjectileBehaviorSequenceStateData > SetProjectileSequenceState;                       		// 0x009C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3672 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class AWillowProjectile* SpawnedProjectile, struct FBehaviorKernelInfo* KernelInfo );
	void ThrowExisting ( class UObject* ContextObject );
	void ThrowProjectile ( class AWillowProjectile* NewProjectile, class UIAIInterface* AI, class UObject* ContextObject, int ExpLevel );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AIThrowProjectileAtTarget::pClassPointer = NULL;

// Class WillowGame.Behavior_AttemptItemCallout
// 0x0010 (0x005C - 0x004C)
class UBehavior_AttemptItemCallout : public UBehaviorBase
{
public:
	class UGearboxDialogEventTag*                      DET_CallOut;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InstanceDataName;                                 		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMarkAsDiscovered : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTestVisibility : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3674 ];

		return pClassPointer;
	};

	bool TestTargetVisibility ( class UObject* Target, class APawn* Viewer );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AttemptItemCallout::pClassPointer = NULL;

// Class WillowGame.Behavior_AttemptStatusEffect
// 0x0044 (0x0090 - 0x004C)
class UBehavior_AttemptStatusEffect : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                           		// 0x004C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UStatusEffectDefinition*                     StatusEffect;                                     		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FBehaviorContextData >              TargetContext;                                    		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                InstigatorChanceModifier;                         		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectDamage;                               		// 0x0070 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectChance;                               		// 0x0080 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3676 ];

		return pClassPointer;
	};

	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	float GetInstigatorSelfDamageScale ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectBaseDamage ( class UObject* ObjContext );
	void AttempEffect ( class AActor* InstigatorActor, struct FBehaviorContextData TargetC, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AttemptStatusEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_CauseDamage
// 0x00A8 (0x00F4 - 0x004C)
class UBehavior_CauseDamage : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                           		// 0x004C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FAttributeInitializationData                DamageFormula;                                    		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                RadiusFormula;                                    		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MomentumFormula;                                  		// 0x0070 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        OverrideContext;                                  		// 0x0080 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       OverrideName;                                     		// 0x0090 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      DamageSource;                                     		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectDamage;                               		// 0x00A4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectChance;                               		// 0x00B4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DamageTarget;                                     		// 0x00C4 (0x0001) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FName                                       CustomTargetName;                                 		// 0x00C8 (0x0008) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FBehaviorContextData                        TargetContext;                                    		// 0x00D0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bInflictRadiusDamage : 1;                         		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableRadiusDamageFalloff : 1;                  		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipTraceTest : 1;                               		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanDamageFriendlies : 1;                         		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBarrelSource : 1;                                		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlantSource : 1;                                 		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	float                                              BarrelSourceTime;                                 		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlantSourceTime;                                  		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InstigatorSelfDamageScale;                        		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      SelfActor;                                        		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3678 ];

		return pClassPointer;
	};

	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	float GetInstigatorSelfDamageScale ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectBaseDamage ( class UObject* ObjContext );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CauseDamage::pClassPointer = NULL;

// Class WillowGame.Behavior_ClearObjective
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ClearObjective : public UBehaviorBase
{
public:
	class UMissionObjectiveDefinition*                 ObjectiveToClear;                                 		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3680 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ClearObjective::pClassPointer = NULL;

// Class WillowGame.Behavior_CompleteMission
// 0x0000 (0x004C - 0x004C)
class UBehavior_CompleteMission : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3682 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CompleteMission::pClassPointer = NULL;

// Class WillowGame.Behavior_Conditional
// 0x000C (0x0058 - 0x004C)
class UBehavior_Conditional : public UBehaviorBase
{
public:
	TArray< struct FBehaviorCondition >                Conditions;                                       		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3684 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Conditional::pClassPointer = NULL;

// Class WillowGame.Behavior_ConvertInstanceDataIntoPhysicsActor
// 0x0024 (0x0070 - 0x004C)
class UBehavior_ConvertInstanceDataIntoPhysicsActor : public UBehaviorBase
{
public:
	struct FVector                                     DetachImpulse;                                    		// 0x004C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ImpulseSourceLocation;                            		// 0x0058 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PhysicsActorLifeTime;                             		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinRelevantDistance;                              		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bRemoveInstanceData : 1;                          		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3686 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( struct FBehaviorKernelInfo KernelInfo, class AKActor* SpawnedPhysicsActor );
	void RemoveInstanceDataComponent ( class UObject* InstanceDataObject, class AActor* InstanceDataOwner );
	class AKActor* ConvertInstanceDataToPhysicsActor ( class UActorComponent* InstanceDataComponent );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ConvertInstanceDataIntoPhysicsActor::pClassPointer = NULL;

// Class WillowGame.Behavior_DecrementObjective
// 0x0004 (0x0050 - 0x004C)
class UBehavior_DecrementObjective : public UBehaviorBase
{
public:
	class UMissionObjectiveDefinition*                 ObjectiveToDecrement;                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3688 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DecrementObjective::pClassPointer = NULL;

// Class WillowGame.Behavior_Explode
// 0x00CC (0x0118 - 0x004C)
class UBehavior_Explode : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                           		// 0x004C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      DamageSource;                                     		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DamageRadiusFormula;                              		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DamageFormula;                                    		// 0x0064 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MomentumFormula;                                  		// 0x0074 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExplosionDefinition*                        Definition;                                       		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicate : 1;                                   		// 0x0088 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNoSound : 1;                                     		// 0x0088 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableRadiusDamageFalloff : 1;                  		// 0x0088 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipTraceTest : 1;                               		// 0x0088 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanDamageFriendlies : 1;                         		// 0x0088 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBarrelSource : 1;                                		// 0x0088 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlantSource : 1;                                 		// 0x0088 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	struct FVector                                     LocationOffset;                                   		// 0x008C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SocketName;                                       		// 0x0098 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        DamageContext;                                    		// 0x00A0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HitNormal;                                        		// 0x00B0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectDamage;                               		// 0x00BC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectChance;                               		// 0x00CC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        OverrideContext;                                  		// 0x00DC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       OverrideName;                                     		// 0x00EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        HitContext;                                       		// 0x00F4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BarrelSourceTime;                                 		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlantSourceTime;                                  		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InstigatorSelfDamageScale;                        		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      OverrideActor;                                    		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      SelfActor;                                        		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3690 ];

		return pClassPointer;
	};

	void SetInstigatorOverride ( class UObject* Override );
	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	float GetInstigatorSelfDamageScale ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectBaseDamage ( class UObject* ObjContext );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Explode::pClassPointer = NULL;

// Class WillowGame.Behavior_FailMission
// 0x0000 (0x004C - 0x004C)
class UBehavior_FailMission : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3692 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_FailMission::pClassPointer = NULL;

// Class WillowGame.Behavior_GFxMovieRegister
// 0x0014 (0x0060 - 0x004C)
class UBehavior_GFxMovieRegister : public UBehaviorBase
{
public:
	class UGFxMovieDefinition*                         MovieDefinition;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUnregister : 1;                                  		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       MeshComponentInstanceDataName;                    		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         RegisteredDefinition;                             		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3694 ];

		return pClassPointer;
	};

	class AWillowPlayerController* ResolveController ( class UObject* Obj );
	void RegisterMovie ( class UObject* SelfObject );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	void RemoveFromroot ( class UObject* Obj );
	void AddToRoot ( class UObject* Obj );
};

UClass* UBehavior_GFxMovieRegister::pClassPointer = NULL;

// Class WillowGame.Behavior_GiveChallengeToPlayer
// 0x0014 (0x0060 - 0x004C)
class UBehavior_GiveChallengeToPlayer : public UBehaviorBase
{
public:
	class UChallengeDefinition*                        Challenge;                                        		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UChallengeDefinition* >              Challenges;                                       		// 0x0050 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bGiveToAllPlayers : 1;                            		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3696 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GiveChallengeToPlayer::pClassPointer = NULL;

// Class WillowGame.Behavior_IntMath
// 0x0009 (0x0055 - 0x004C)
class UBehavior_IntMath : public UBehaviorBase
{
public:
	int                                                A;                                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                B;                                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Operation;                                        		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3698 ];

		return pClassPointer;
	};

	void eventPublishBehaviorOutput ( int Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_IntMath::pClassPointer = NULL;

// Class WillowGame.Behavior_IntSwitchRange
// 0x000C (0x0058 - 0x004C)
class UBehavior_IntSwitchRange : public UBehaviorBase
{
public:
	int                                                CheckValue;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RangeMin;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RangeMax;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3700 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_IntSwitchRange::pClassPointer = NULL;

// Class WillowGame.Behavior_MatchTransform
// 0x0018 (0x0064 - 0x004C)
class UBehavior_MatchTransform : public UBehaviorBase
{
public:
	struct FName                                       AttachmentName;                                   		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        Source;                                           		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3702 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyOffsets ( class AActor* DestOwner, class UPrimitiveComponent* DestComponent, struct FVector SourceWorldLoc, struct FRotator SourceWorldRot );
};

UClass* UBehavior_MatchTransform::pClassPointer = NULL;

// Class WillowGame.Behavior_MeleeAttack
// 0x0004 (0x0050 - 0x004C)
class UBehavior_MeleeAttack : public UBehaviorBase
{
public:
	class UMeleeDefinition*                            MeleeDefinition;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3704 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_MeleeAttack::pClassPointer = NULL;

// Class WillowGame.Behavior_MissionRemoteEvent
// 0x0008 (0x0054 - 0x004C)
class UBehavior_MissionRemoteEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                        		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3706 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_MissionRemoteEvent::pClassPointer = NULL;

// Class WillowGame.Behavior_RandomBranch
// 0x000C (0x0058 - 0x004C)
class UBehavior_RandomBranch : public UBehaviorBase
{
public:
	TArray< float >                                    Conditions;                                       		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3708 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RandomBranch::pClassPointer = NULL;

// Class WillowGame.Behavior_Switch
// 0x0004 (0x005C - 0x0058)
class UBehavior_Switch : public UBehavior_RandomBranch
{
public:
	float                                              CheckValue;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3710 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Switch::pClassPointer = NULL;

// Class WillowGame.Behavior_RandomlySelectBehaviors
// 0x0020 (0x006C - 0x004C)
class UBehavior_RandomlySelectBehaviors : public UBehaviorBase
{
public:
	TArray< struct FBehaviorsSelectionData >           Possibilities;                                    		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bUseWeightContext : 1;                            		// 0x0058 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        WeightContext;                                    		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3712 ];

		return pClassPointer;
	};

	void ApplyBehavior ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	void SelectAndRunWeightedBehaviors ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData );
};

UClass* UBehavior_RandomlySelectBehaviors::pClassPointer = NULL;

// Class WillowGame.Behavior_RemoteCustomEvent
// 0x0040 (0x008C - 0x004C)
class UBehavior_RemoteCustomEvent : public UBehaviorBase
{
public:
	class UObject*                                     SequenceProvider;                                 		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FNameBasedObjectPath                        ProviderDefinitionPathName;                       		// 0x0050 (0x0034) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       CustomEventName;                                  		// 0x0084 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3714 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RemoteCustomEvent::pClassPointer = NULL;

// Class WillowGame.Behavior_ScreenParticle
// 0x0074 (0x00C0 - 0x004C)
class UBehavior_ScreenParticle : public UBehaviorBase
{
public:
	struct FScreenParticleInitParams                   Parameters;                                       		// 0x004C (0x0054) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      Action;                                           		// 0x00A0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FScreenParticleModifier >           ScreenParticleModifiers;                          		// 0x00A4 (0x000C) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	class UMaterialInterface*                          MaterialInterface;                                		// 0x00B0 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FName                                       MatParamName;                                     		// 0x00B4 (0x0008) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	class UParticleSystem*                             ParticleSystem;                                   		// 0x00BC (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3716 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ScreenParticle::pClassPointer = NULL;

// Class WillowGame.Behavior_SetShieldDamageResistanceType
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetShieldDamageResistanceType : public UBehaviorBase
{
public:
	class UWillowDamageTypeDefinition*                 DamageResistanceType;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3718 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetShieldDamageResistanceType::pClassPointer = NULL;

// Class WillowGame.Behavior_SetShieldTriggeredState
// 0x0000 (0x004C - 0x004C)
class UBehavior_SetShieldTriggeredState : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3720 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetShieldTriggeredState::pClassPointer = NULL;

// Class WillowGame.Behavior_SimpleMath
// 0x0009 (0x0055 - 0x004C)
class UBehavior_SimpleMath : public UBehaviorBase
{
public:
	float                                              A;                                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Operation;                                        		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3722 ];

		return pClassPointer;
	};

	void eventPublishBehaviorOutput ( float Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SimpleMath::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnFirstPersonParticleSystem
// 0x0044 (0x0090 - 0x004C)
class UBehavior_SpawnFirstPersonParticleSystem : public UBehaviorBase
{
public:
	unsigned long                                      bSaveParticleReference : 1;                       		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDeleteByOwner : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             ParticleEffect;                                   		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AttachmentPointName;                              		// 0x006C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x0074 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    RelativeRotation;                                 		// 0x0080 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DrawScale;                                        		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3724 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class UParticleSystemComponent* NewComponent, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnFirstPersonParticleSystem::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnFromPopulationSystem
// 0x0060 (0x00AC - 0x004C)
class UBehavior_SpawnFromPopulationSystem : public UBehaviorBase
{
public:
	class UPopulationFactory*                          SpawnFactory;                                     		// 0x004C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	unsigned long                                      bZeroPitchAndRollOnSpawnedActor : 1;              		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRelativeSpawnOffset : 1;                         		// 0x0050 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnOnGround : 1;                               		// 0x0050 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInheritAttachment : 1;                           		// 0x0050 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bInheritAttachmentBase : 1;                       		// 0x0050 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSaveActorReference : 1;                          		// 0x0050 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        GameStageContext;                                 		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     SpawnLocOffset;                                   		// 0x0064 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      InheritLocationRotationFrom;                      		// 0x0070 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    SpawnRotationOffset;                              		// 0x0074 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      MyOwner;                                          		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     StartingVelocity;                                 		// 0x0084 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0090 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x00A0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                FloorTestZDist;                                   		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3726 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class AActor* SpawnedActor, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnFromPopulationSystem::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnParticleSystem
// 0x0045 (0x0091 - 0x004C)
class UBehavior_SpawnParticleSystem : public UBehaviorBase
{
public:
	unsigned long                                      bSaveParticleReference : 1;                       		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseClientPrediction : 1;                         		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDeleteByOwner : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAttachToContext : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetOwnerFromContext : 1;                         		// 0x004C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateEmitter : 1;                            		// 0x004C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHideEffectFromOwner : 1;                         		// 0x004C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOwnerSeeFlags : 1;                            		// 0x004C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             ParticleEffect;                                   		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AttachmentPointName;                              		// 0x006C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x0074 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    RelativeRotation;                                 		// 0x0080 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DrawScale;                                        		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SpawnDirection;                                   		// 0x0090 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3728 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class AEmitter* SpawnedEmitter, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	class UClass* GetEmitterClass ( );
};

UClass* UBehavior_SpawnParticleSystem::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnProjectile
// 0x00C0 (0x010C - 0x004C)
class UBehavior_SpawnProjectile : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        OwnerContext;                                     		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetOwnerFromOwnerContext : 1;                    		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSaveProjectileReference : 1;                     		// 0x005C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTransformRelativeLocationBySpawnDirection : 1;   		// 0x005C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      InheritParentVelocity : 1;                        		// 0x005C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAttachToContext : 1;                             		// 0x005C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInflictRadiusDamageOnOwner : 1;                  		// 0x005C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnEvenDistribution : 1;                       		// 0x005C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSocketAsParentForSpawnOrientation : 1;        		// 0x005C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnFromContextViewLocation : 1;                		// 0x005C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetLikenessFromContext : 1;                      		// 0x005C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	struct FName                                       AttachmentPointName;                              		// 0x0060 (0x0008) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0068 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x0078 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                NumProjectilesFormula;                            		// 0x0080 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumProjectiles;                                   		// 0x0090 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	unsigned char                                      SpawnDirection;                                   		// 0x0094 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SelectionBehavior;                                		// 0x0095 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnDistributionType;                            		// 0x0096 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      FireSocketSelection;                              		// 0x0097 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UProjectileDefinition*                       ProjectileDefinition;                             		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x009C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirectionConeMinSize;                             		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirectionConeSize;                                		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           ChildProjectileBaseValues;                        		// 0x00B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct UBehavior_SpawnProjectile_FProjectileBehaviorSequenceStateData > SetProjectileSequenceState;                       		// 0x00BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     SpawnDirectionOverride;                           		// 0x00C8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UObject*                                     SpawnMaterialOverride;                            		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             FireLocationSocketNames;                          		// 0x00D8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              TimeBetweenShots;                                 		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DrawScaleOverride;                                		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        GearLikenessContext;                              		// 0x00EC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             FireLocationSocketsRemaining;                     		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumShotsFired;                                    		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3730 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class AWillowProjectile* SpawnedProjectile, struct FBehaviorKernelInfo* KernelInfo );
	struct FVector StaticGetWorldBodyViewLocation ( class UIWorldBody* WorldBodyInterface );
	struct FVector StaticGetChildProjectilePosition ( class UIWorldBody* WorldBodyInterface, struct FName InAttachmentPointName );
	struct FVector StaticGetChildProjectileDirection ( struct FName InAttachmentPointName, class UIWorldBody* WorldBodyInterface, class UProjectileDefinition* InProjectileDefinition, unsigned char InSpawnDirection, unsigned long InbUseSocketAsParentForSpawnOrientation );
	void SpawnChildProjectiles ( class UObject* ContextObject, class UIWorldBody* WorldBodyInterface, class UISpawnActor* SpawnActorInterface, class AWillowInventory* GearLikenessActor, class UIInstanceData* SaveReferenceContext, int EffectiveNumProjectiles, struct FBehaviorKernelInfo KernelInfo, int iStart, int iMax );
	struct FVector CalculateConeVector ( float Fraction, struct FVector Origin, struct FVector Direction, float AngleWidth, float AngleHeight );
	void PerformMaterialOverride ( class AWillowProjectile* Projectile );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnProjectile::pClassPointer = NULL;

// Class WillowGame.Behavior_StartMissionTimer
// 0x0000 (0x004C - 0x004C)
class UBehavior_StartMissionTimer : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3732 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_StartMissionTimer::pClassPointer = NULL;

// Class WillowGame.Behavior_StopMissionTimer
// 0x0000 (0x004C - 0x004C)
class UBehavior_StopMissionTimer : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3734 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_StopMissionTimer::pClassPointer = NULL;

// Class WillowGame.Behavior_UpdateCollision
// 0x0004 (0x0050 - 0x004C)
class UBehavior_UpdateCollision : public UBehaviorBase
{
public:
	unsigned long                                      bResetTouching : 1;                               		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3736 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UpdateCollision::pClassPointer = NULL;

// Class WillowGame.Behavior_UpdateMissionObjective
// 0x0004 (0x0050 - 0x004C)
class UBehavior_UpdateMissionObjective : public UBehaviorBase
{
public:
	class UMissionObjectiveDefinition*                 MissionObjective;                                 		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3738 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UpdateMissionObjective::pClassPointer = NULL;

// Class WillowGame.Behavior_VectorMath
// 0x0019 (0x0065 - 0x004C)
class UBehavior_VectorMath : public UBehaviorBase
{
public:
	struct FVector                                     A;                                                		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     B;                                                		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Operation;                                        		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3740 ];

		return pClassPointer;
	};

	void eventPublishBehaviorOutput ( float Length, struct FVector VectorResult, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_VectorMath::pClassPointer = NULL;

// Class WillowGame.Behavior_VectorToLocalSpace
// 0x0014 (0x0060 - 0x004C)
class UBehavior_VectorToLocalSpace : public UBehaviorBase
{
public:
	struct FVector                                     WorldSpaceVector;                                 		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AttachmentPointName;                              		// 0x0058 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3742 ];

		return pClassPointer;
	};

	void eventPublishBehaviorOutput ( struct FVector VectorResult, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_VectorToLocalSpace::pClassPointer = NULL;

// Class WillowGame.BehaviorSequenceEnableByMission
// 0x0027 (0x0068 - 0x0041)
class UBehaviorSequenceEnableByMission : public UBehaviorSequenceCustomEnableCondition
{
public:
	struct FPointer                                    VfTable_IIMission;                                		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UMissionDefinition*                          LinkedMission;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMissionStateSelectionData                  MissionStatesToLinkTo;                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsObjectiveSpecific : 1;                         		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInstanced : 1;                                   		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCreateWaypoint : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UMissionObjectiveDefinition*                 LinkedObjective;                                  		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMissionObjectiveStateSelectionData         ObjectiveStatesToLinkTo;                          		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMissionObjectiveSetDefinition* >    ObjectiveSetRestrictions;                         		// 0x005C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3744 ];

		return pClassPointer;
	};

	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
};

UClass* UBehaviorSequenceEnableByMission::pClassPointer = NULL;

// Class WillowGame.BehaviorVolume
// 0x007C (0x0280 - 0x0204)
class ABehaviorVolume : public APhysicsVolume
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x0204 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x0208 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x020C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;              		// 0x0210 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UBehaviorVolumeDefinition*                   Definition;                                       		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0218 (0x0004) [0x0000000000000000]              
	float                                              RadiusForSearch;                                  		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            TouchingActors;                                   		// 0x0220 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TickRate;                                         		// 0x022C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NextTickTime;                                     		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                VehicleCrewNdx;                                   		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInstanceDataSet                            InstanceDataState;                                		// 0x0238 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                      		// 0x0244 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bEnable : 1;                                      		// 0x0254 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	class URegionDefinition*                           BalanceToRegionDef;                               		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ExpLevel;                                         		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GameStage;                                        		// 0x0260 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AwesomeLevel;                                     		// 0x0264 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x0268 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UInstancedDesignerAttribute* >       DesignerAttributes;                               		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3746 ];

		return pClassPointer;
	};

	bool HasDesignerAttribute ( struct FName DesignerAttributeName );
	class UInstancedDesignerAttribute* eventGetInstancedDesignerAttribute ( class UAttributeDefinition* InDefinition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	class UInstancedDesignerAttribute* CreateDesignerAttribute ( class UDesignerAttributeDefinition* InDefinition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	void InitializeAttributeStartingValues ( );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	void ClearTouchList ( );
	void HandleDisabled ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	bool eventCanSplashNativeWrapper ( class AActor* Other );
	bool IsWaterVolume ( );
	void eventBehaviorVolumeImpact ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal, unsigned char Action );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* inDamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void eventTraceTouch ( class AActor* Other, class UComponent* ComponentHit, struct FVector TouchLocation, struct FVector TouchNormal, struct FVector End, struct FVector Start, struct FVector Extent, int TraceFlags, float TouchTime );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ABehaviorVolume::pClassPointer = NULL;

// Class WillowGame.BehaviorVolumeDefinition
// 0x0020 (0x005C - 0x003C)
class UBehaviorVolumeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UWillowImpactDefinition*                     DefaultTouchImpact;                               		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     DefaultUntouchImpact;                             		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     DefaultTraceImpact;                               		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicalMaterial*                           PhysicalMaterial;                                 		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsWater : 1;                                     		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreTracesThatStartInsideVolume : 1;           		// 0x0054 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanTakeRadiusDamage : 1;                         		// 0x0054 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3748 ];

		return pClassPointer;
	};

	void OnShoot ( struct FBehaviorConsumerHandle ConsumerHandle, class UObject* Instigator, class UObject* ContextForHitLocation, struct FVector HitLocation, struct FVector HitNormal );
	void OnExit ( struct FBehaviorConsumerHandle ConsumerHandle, class UObject* Instigator );
	void OnEntry ( struct FBehaviorConsumerHandle ConsumerHandle, class UObject* Instigator );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UBehaviorVolumeDefinition::pClassPointer = NULL;

// Class WillowGame.BlackMarketDefinition
// 0x002C (0x0068 - 0x003C)
class UBlackMarketDefinition : public UGBXDefinition
{
public:
	struct FString                                     BlackMarketName;                                  		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UBlackMarketUpgradeDefinition*               ItemOfTheDay;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UBlackMarketUpgradeDefinition* >     GeneralStock;                                     		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxUpgradeLevel;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBlackMarketUpgradeLevelData >      MaxUpgradeLevelOverrides;                         		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3750 ];

		return pClassPointer;
	};

	bool CurrentLevelIsBelowMaxForPlayer ( int CurrentLevel, class UBlackMarketUpgradeDefinition* UpgradeDefinition, class AWillowPlayerController* WPC );
	bool CurrentLevelIsBelowMaxLevel ( int CurrentLevel, class UBlackMarketUpgradeDefinition* UpgradeDefinition );
};

UClass* UBlackMarketDefinition::pClassPointer = NULL;

// Class WillowGame.BlackMarketUpgradeAttributeValueResolver
// 0x0004 (0x0040 - 0x003C)
class UBlackMarketUpgradeAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UBlackMarketUpgradeDefinition*               AssociatedBlackMarketUpgrade;                     		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3752 ];

		return pClassPointer;
	};

};

UClass* UBlackMarketUpgradeAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.BlackMarketUpgradeDefinition
// 0x0024 (0x0060 - 0x003C)
class UBlackMarketUpgradeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     UpgradeName;                                      		// 0x0040 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UInventoryBalanceDefinition*                 BalanceDefinition;                                		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                CachedUpgradeIndex;                               		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBehaviorProviderDefinition*                 BehaviorProvider;                                 		// 0x0054 (0x0004) [0x0000000000000000]              
	struct FName                                       ZippyFrameOverride;                               		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3754 ];

		return pClassPointer;
	};

	void UpdateCachedUpgradeIndex ( );
	void OnPurchased ( class UObject* ForPlayer, int NewUpgradeLevel, struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UBlackMarketUpgradeDefinition::pClassPointer = NULL;

// Class WillowGame.BlackMarketUpgradeManager
// 0x0008 (0x0190 - 0x0188)
class ABlackMarketUpgradeManager : public AActor
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FBehaviorConsumerHandle                     BehaviorConsumerHandle;                           		// 0x018C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3756 ];

		return pClassPointer;
	};

	void InitAllBlackMarketUpgrades ( );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
};

UClass* ABlackMarketUpgradeManager::pClassPointer = NULL;

// Class WillowGame.BodyClassDeathDefinition
// 0x006C (0x00A8 - 0x003C)
class UBodyClassDeathDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FTechDeathData >                    TechDeaths;                                       		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class USpecialMoveDefinition*                      NonRagdollDeathSpecialMove;                       		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExpressionEvaluator*                        CanPlayDeathAnimationIf;                          		// 0x0050 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UWillowAnimDefinition*                       InjuredSpecialMove;                               		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DissolveBodyDelayBeforeDestroy;                   		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FGoreTriggerData >                  GibTriggers;                                      		// 0x005C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      KeepCorpseAfterDeath : 1;                         		// 0x0068 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDestroyOnDeath : 1;                              		// 0x0068 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTearOffAfterDeath : 1;                           		// 0x0068 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCensorGibs : 1;                                  		// 0x0068 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCodeDrivenBodyDissolve : 1;                   		// 0x0068 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDeathAnimRagdoll : 1;                            		// 0x0068 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMotorizeRagdollOnNormalDeath : 1;                		// 0x0068 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMotorizeRagdollOnTechDeath : 1;                  		// 0x0068 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDefaultRagdollContactNotification : 1;           		// 0x0068 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCreateSpringsForAllBones : 1;                    		// 0x0068 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultBodyDissolveTime;                          		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkipRagdollDissolveAmount;                        		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendToRagdollTime;                               		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RagdollLinearSpring;                              		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RagdollAngularSpring;                             		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RagdollMotorSpring;                               		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RagdollMotorDamping;                              		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             RagdollContactReportBones;                        		// 0x008C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              RagdollContactReportThreshold;                    		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             RagdollSpringBones;                               		// 0x009C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3758 ];

		return pClassPointer;
	};

	void OnTechDeath ( struct FName SpecializedEventName, class AController* Killer, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnBodyDissolve ( class AController* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDeathNonGib ( class AController* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDeathGib ( class AController* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilledBy ( class AController* Killer, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPlayDeathPizazz ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UBodyClassDeathDefinition::pClassPointer = NULL;

// Class WillowGame.BodyClassDefinition
// 0x03E4 (0x0420 - 0x003C)
class UBodyClassDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;                  		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       HeadLookAtName;                                   		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLeftHandIKDisabled : 1;                          		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseMeshForCollision : 1;                         		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IgnoreMomentumTransfer : 1;                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      UseRootMotion : 1;                                		// 0x0048 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      UseRootRotation : 1;                              		// 0x0048 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowProjectilesToCollideWithSkeletalMesh : 1;   		// 0x0048 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUpdateMeshTranslationWhenCylinderChanges : 1;    		// 0x0048 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCanUpdateMeshTranslation : 1;                    		// 0x0048 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseDamageLocationParent : 1;                     		// 0x0048 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bShowDamageLocations : 1;                         		// 0x0048 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bStaggerWhenLandingOnUnwalkableTerrain : 1;       		// 0x0048 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseTurns : 1;                                    		// 0x0048 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseTurnParent : 1;                               		// 0x0048 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPawnIsAlwaysRelevant : 1;                        		// 0x0048 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bVehicleBlockingActor : 1;                        		// 0x0048 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseKnockbackParent : 1;                          		// 0x0048 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCringe : 1;                                   		// 0x0048 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCringeParent : 1;                             		// 0x0048 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseDodges : 1;                                   		// 0x0048 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDodgeUseParent : 1;                              		// 0x0048 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanAvoidGrenades : 1;                            		// 0x0048 (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bProvocationUseParent : 1;                        		// 0x0048 (0x0004) [0x0000000000000003] [0x00200000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNPCDialog : 1;                                   		// 0x0048 (0x0004) [0x0000000000000003] [0x00400000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanBeInjured : 1;                                		// 0x0048 (0x0004) [0x0000000000000003] [0x00800000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInjuredUseParent : 1;                            		// 0x0048 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyHardFlinchWhenInjured : 1;                   		// 0x0048 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCloaks : 1;                                      		// 0x0048 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCloakUseParentData : 1;                          		// 0x0048 (0x0004) [0x0000000000000003] [0x08000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCloakUseParentOptions : 1;                       		// 0x0048 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCloakingRequiresShields : 1;                     		// 0x0048 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanShootWhileCloaked : 1;                        		// 0x0048 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCloakHideInfo : 1;                               		// 0x0048 (0x0004) [0x0000000000000002] [0x80000000] ( CPF_Const )
	unsigned long                                      bHideBodyOnCloak : 1;                             		// 0x004C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bHasCloakingCapability : 1;                       		// 0x004C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bUseCoverParent : 1;                              		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseParentStances : 1;                            		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDamageParent : 1;                                		// 0x004C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bDisplayParentInfo : 1;                           		// 0x004C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyDisplayParentInfoWhileAttached : 1;          		// 0x004C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bKillWhenParentDies : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      HideInfoOnHUD : 1;                                		// 0x004C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bFullyArmored : 1;                                		// 0x004C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bHideEmptyShieldBar : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bIsPossibleHomingTarget : 1;                      		// 0x004C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseRotationModifierBySpeed : 1;                  		// 0x004C (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSimulatedRotation : 1;                        		// 0x004C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bCrawlerFloorAdjust : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bUseParentPhaselockDef : 1;                       		// 0x004C (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	class UPopulationBodyTag*                          BodyTag;                                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_PhysicsJump*                    PhysicsJumpSMD;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UStanceTypeDefinition* >             ScrapedStances;                                   		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Mass;                                             		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrouchHeight;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBodyHitRegionDefinition*                    DefaultHitRegion;                                 		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBodyHitRegionDefinition* >          HitRegionList;                                    		// 0x0070 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              DamageLocationTime;                               		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageLocationFadeTime;                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageLocationSize;                               		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBodyClassDeathDefinition*                   DeathDef;                                         		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     CustomDeathBehaviors;                             		// 0x008C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UGearboxAnimDefinition*                      InjuredDeathAnim;                                 		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RagDollGravity;                                   		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinimumRecognizedImpact;                          		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirectImpactEffectThreshold;                      		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SlidingImpactEffectThreshold;                     		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ImpactEffectProbability;                          		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     RagdollImpact;                                    		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_EffectsThreshold;                              		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_SlideThreshold;                                		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_ImpactThreshold;                               		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_SlideMinRepeatTime;                            		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_ImpactMinRepeatTime;                           		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExplosionDefinition*                        RD_SlideExplosion;                                		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_SlideExplosionDamageRadius;                    		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExplosionDefinition*                        RD_ImpactExplosion;                               		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_ImpactExplosionDamageRadius;                   		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_ImpactAkEventThreshold;                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RD_ImpactAkEventMinRepeatTime;                    		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    RD_ImpactAkEvent;                                 		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             FootstepBones;                                    		// 0x00E4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UWillowImpactDefinition*                     FootstepImpact;                                   		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UWillowImpactDefinition* >           LeadInFootstepImpacts;                            		// 0x00F4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UWillowImpactDefinition*                     HeavyFootStepImpact;                              		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     JumpedImpact;                                     		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     LandedImpact;                                     		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UnwalkableTerrainStaggerVelocityZ;                		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LandedMinVel;                                     		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     SkidImpact;                                       		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkidCameraLurchMagnitude;                         		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkidCameraLurchSpeed;                             		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBehaviorAliasLookupDefinition*              BehaviorAliasLookup;                              		// 0x0120 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ArmsMaterialIndex;                                		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ShieldEnabledParameterName;                       		// 0x0128 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ShieldColorParameterName;                         		// 0x0130 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     TouchImpactDefinition;                            		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     UntouchImpactDefinition;                          		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumFootstepsToStop;                               		// 0x0140 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    StoppedAkEvent;                                   		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     HitByVehicleImpactDefinition;                     		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     RunOverByVehicleImpactDefinition;                 		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                PlayerReRezCoordinatedEffect;                     		// 0x0150 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxAnimDefinition*                      PlayerReRezAnim;                                  		// 0x0154 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPlayerEventProviderDefinition*              PlayerEventDef;                                   		// 0x0158 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTurnDefinition*                             DefaultTurns;                                     		// 0x015C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTurnDefinition*                             DefaultCrouchTurns;                               		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBodyClassDefinition*                        AnimationParentBody;                              		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxSkeletalMeshComponent*               FirstPersonHands;                                 		// 0x0168 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     PrimaryStandInOffset;                             		// 0x016C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBodyClassDefinition*                        WeaponActionParentClass;                          		// 0x0178 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AimOffsetNodeName;                                		// 0x017C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBodyWeaponHoldDefinition*                   DefaultWeaponHoldDef;                             		// 0x0184 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBodyWeaponHoldDefinition* >         WeaponHoldDefs;                                   		// 0x0188 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UExpressionEvaluator*                        CanShootWeaponIf;                                 		// 0x0194 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UBodyWeaponHoldDefinition*                   DefaultFirstPersonWeaponHoldDef;                  		// 0x0198 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBodyWeaponHoldDefinition* >         FirstPersonWeaponHoldDefs;                        		// 0x019C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UAkEvent*                                    ThrowGrenadeAkEvent;                              		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MeleeAkEvent;                                     		// 0x01AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FExtraWeaponSlot >                  ExtraWeaponSlots;                                 		// 0x01B0 (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      ExpectedInstanceDataSize;                         		// 0x01BC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CloakStyle;                                       		// 0x01BD (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DefaultStance;                                    		// 0x01BE (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPainDialogLine >                   PainDialogLines;                                  		// 0x01C0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             DefaultStatusEffectSockets;                       		// 0x01CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystem*                             DefaultParticleSystemTemplate;                    		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 MeleeWeaponMesh;                                  		// 0x01DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MeleeSocketName;                                  		// 0x01E0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCameraAnim*                                 MeleeCameraAnim;                                  		// 0x01E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       PrimaryColorParameterName;                        		// 0x01EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SecondaryColorParameterName;                      		// 0x01F4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       TertiaryColorParameterName;                       		// 0x01FC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PhysVehicleExtentScalars;                         		// 0x0204 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UStaggerDefinition*                          StaggerSettings;                                  		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinKnockbackMomentum;                             		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      KnockbackSMD;                                     		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      KnockbackLandSMD;                                 		// 0x021C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBodyCompositionData                        BodyComposition;                                  		// 0x0220 (0x0014) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	float                                              CringeMinRepeatTime;                              		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CringeMaxRepeatTime;                              		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class USpecialMove_Cringe* >               Cringes;                                          		// 0x023C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FCustomCringeData >                 CustomCringes;                                    		// 0x0248 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              DodgeAngle;                                       		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DodgeChance;                                      		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DodgeTargetDistMin;                               		// 0x025C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DodgeRepeatTimeMin;                               		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DodgeRepeatTimeMax;                               		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    DodgeDelayTime;                                   		// 0x0268 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMove_Dodge*                          DodgeAnimLeft;                                    		// 0x0270 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class USpecialMove_Dodge*                          DodgeAnimRight;                                   		// 0x0274 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              DodgeGrenadeChance;                               		// 0x0278 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class USpecialMove_Dodge* >                MovementDodgeAnims;                               		// 0x027C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	struct FAIRange                                    MovementDodgeTime;                                		// 0x0288 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayProvokedAnimChance;                           		// 0x0290 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayUnprovokedAnimChance;                         		// 0x0294 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class USpecialMove_Motion* >               ProvokedAnims;                                    		// 0x0298 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USpecialMove_Motion* >               UnprovokedAnims;                                  		// 0x02A4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UGearboxDialogGroup*                         DialogGroup;                                      		// 0x02B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UGearboxDialogNameTag*                       DialogName;                                       		// 0x02B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UGearboxDialogGroup* >               DialogGroups;                                     		// 0x02B8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAIRange                                    InitialTauntWait;                                 		// 0x02C4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    SubsequentTauntWait;                              		// 0x02CC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       TauntCustomEvent;                                 		// 0x02D4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    StartHeavyBreathingAkEvent;                       		// 0x02DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StopHeavyBreathingAkEvent;                        		// 0x02E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TimeBetweenHeavyBreathLoop;                       		// 0x02E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FBreathingLoopInfo >                BreathingLoops;                                   		// 0x02E8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class USpecialMove_Motion* >               InjuredAnims;                                     		// 0x02F4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USpecialMove_Motion* >               InjuredAnimsLeft;                                 		// 0x0300 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USpecialMove_Motion* >               InjuredAnimsRight;                                		// 0x030C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USpecialMove_Motion* >               InjuredAnimsCritical;                             		// 0x0318 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	float                                              InjuredHealthPct;                                 		// 0x0324 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnInjured;                                        		// 0x0328 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnUninjured;                                      		// 0x0334 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMoveDefinition*                      LostShieldAnim;                                   		// 0x0340 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< unsigned char >                            LostShieldDamageTriggers;                         		// 0x0344 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UAkEvent*                                    StartInjuredAkEvent;                              		// 0x0350 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAkEvent*                                    StopInjuredAkEvent;                               		// 0x0354 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FInjuredLoopOverride >              InjuredLoopOverrides;                             		// 0x0358 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            CloakExceptions;                                  		// 0x0364 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class USpecialMove_Cloak* >                CloakEnterAnims;                                  		// 0x0370 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class USpecialMove_Cloak* >                CloakExitAnims;                                   		// 0x037C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UCoordinatedEffectDefinition*                CloakEffect;                                      		// 0x0388 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                UnCloakEffect;                                    		// 0x038C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMove_Cloak*                          CloakEnter;                                       		// 0x0390 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USpecialMove_Cloak*                          CloakExit;                                        		// 0x0394 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoverOffset;                                      		// 0x0398 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CoverMantleOffset;                                		// 0x039C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    CoverIdleTime;                                    		// 0x03A0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    CoverFireTime;                                    		// 0x03A8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CoverMantleLerpStartTime;                         		// 0x03B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CoverMantleLerpStopTime;                          		// 0x03B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMove_Motion*                         MantleAnim;                                       		// 0x03B8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UWillowCoverStanceDefinition*                CoverStance_HighLeft;                             		// 0x03BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowCoverStanceDefinition*                CoverStance_HighRight;                            		// 0x03C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowCoverStanceDefinition*                CoverStance_LowCenter;                            		// 0x03C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UStanceTypeDefinition*                       RunStance;                                        		// 0x03C8 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UStanceTypeDefinition*                       PatrolStance;                                     		// 0x03CC (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UStanceTypeDefinition*                       SprintStance;                                     		// 0x03D0 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UStanceTypeDefinition*                       InjuredStance;                                    		// 0x03D4 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UStanceTypeDefinition*                       CrouchStance;                                     		// 0x03D8 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              ParentDamageLimit;                                		// 0x03DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DamageParentScale;                                		// 0x03E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     AudioDistanceRTPC;                                		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeltaRotationModifierBySpeed;                     		// 0x03E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SimulatedRotationLerpTime;                        		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             CrawlerFloorAdjustBones;                          		// 0x03F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CrawlerFloorAdjustRadius;                         		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrawlerFloorAdjustTraceUp;                        		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrawlerFloorAdjustTraceDown;                      		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrawlerFloorAdjustOffset;                         		// 0x0408 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrawlerFloorAdjustRate;                           		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhaseLockDefinition*                        PhaseLockDef;                                     		// 0x0410 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVehicleCrewMappingStruct >         DLCVehicleAnimSetMappings;                        		// 0x0414 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3760 ];

		return pClassPointer;
	};

	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
	bool ShouldUseUpperBodyMovementBlendForHoldName ( struct FName HoldName, class UEnvironmentTagDefinition* EnvironmentTag );
	bool ShouldUseArmBoneBlendForHoldName ( struct FName HoldName, class UEnvironmentTagDefinition* EnvironmentTag );
	struct FName GetAimOffsetProfileForHoldName ( struct FName HoldName, class UEnvironmentTagDefinition* EnvironmentTag );
	void GetFirstPersonWeaponHoldAnimSets ( struct FName HoldName, class UEnvironmentTagDefinition* EnvironmentTag, TArray< class UAnimSet* >* OutAnimSets );
	void GetWeaponHoldAnimSets ( struct FName HoldName, class UEnvironmentTagDefinition* EnvironmentTag, TArray< class UAnimSet* >* OutAnimSets );
	class UBodyWeaponHoldDefinition* GetFirstPersonWeaponHoldDef ( struct FName HoldName, class UEnvironmentTagDefinition* EnvironmentTag, unsigned long bSearchParentClass, unsigned long bFallbackToDefaultDef );
	class UBodyWeaponHoldDefinition* GetWeaponHoldDef ( struct FName HoldName, class UEnvironmentTagDefinition* EnvironmentTag, unsigned long bSearchParentClass, unsigned long bFallbackToDefaultDef );
	class UBodyClassDefinition* GetCloakBody ( );
	bool ShouldCloak ( class AWillowPawn* Context, unsigned char Type );
	class USpecialMove_Cringe* GetCringeAnim ( unsigned char DamageType, unsigned long bDOT );
	class UBodyClassDefinition* GetKnockbackBody ( );
};

UClass* UBodyClassDefinition::pClassPointer = NULL;

// Class WillowGame.BodyHitRegionDefinition
// 0x01A4 (0x01E0 - 0x003C)
class UBodyHitRegionDefinition : public UBaseHitRegionDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       HitRegionName;                                    		// 0x0044 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             RegionBoneNames;                                  		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UBodyHitRegionDefinition* >          AdjacentHitRegions;                               		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FName                                       OverrideDOTSocket;                                		// 0x0064 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCriticalHit : 1;                                 		// 0x006C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRadiusDamage : 1;                           		// 0x006C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseIndependentHealth : 1;                        		// 0x006C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bShowDamageNumbers : 1;                           		// 0x006C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bScaleHealthWithAttribute : 1;                    		// 0x006C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bAllowRejuvenationFromHeals : 1;                  		// 0x006C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyReflectToAttacker : 1;                       		// 0x006C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReflectProjectiles : 1;                          		// 0x006C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRicochetIfReflectionChanceFails : 1;             		// 0x006C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTrackDamage : 1;                                 		// 0x006C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMigratedUseOwnerHealth : 1;                      		// 0x006C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bWasUseOwnerHealthOne : 1;                        		// 0x006C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bPlayImpactWithNoDamage : 1;                      		// 0x006C (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	float                                              OwnerHealthPercent;                               		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PercentOfMaxHealthLimit;                          		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     RegionDeathBehaviors;                             		// 0x0078 (0x000C) [0x0000000004420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FDamageReactionData >               DamageTriggeredReactions;                         		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FDamageReactionData >               HealingTriggeredReactions;                        		// 0x0090 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UDamageTypeDefinition* >             AllowedDamageTypes;                               		// 0x009C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                BulletReflectionOffSelfChance;                    		// 0x00A8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BulletReflectedOffSelfDamageScale;                		// 0x00B8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BulletReflectedOffSelfDamageTakenScale;           		// 0x00C8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ReflectionAccuracyModifier;                       		// 0x00D8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                RicochetAccuracyModifier;                         		// 0x00E8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicalMaterial*                           PhysicalMaterial;                                 		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FImpactResponseEffect                       DefaultImpactResponse;                            		// 0x00FC (0x0094) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      DefaultDamageSurfaceType;                         		// 0x0190 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     BloodImpact;                                      		// 0x0194 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BloodSplatterMinDistance;                         		// 0x0198 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BloodSplatterMaxDistance;                         		// 0x019C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BloodSplatterDirectionRandomness;                 		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             StatusEffectSockets;                              		// 0x01A4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UParticleSystem*                             ParticleSystemTemplate;                           		// 0x01B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UStatusEffectDefinition*                     StatusEffectResistanceOverride;                   		// 0x01B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectBaseChanceOverride;                   		// 0x01B8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectDamageModifierOverride;               		// 0x01C8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBodyClassDeathDefinition*                   OverrideDeathDef;                                 		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3762 ];

		return pClassPointer;
	};

	void OnHealingReaction ( struct FName SpecializedEventName, class AController* DamageInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnRegionRejuvenate ( unsigned char EventOutput, class AController* KilledBy, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnReflectedProjectile ( struct FVector ReflectedDirection, struct FVector HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnRegionGore ( struct FName SpecializedEventName, class AController* GoreInstigator, struct FVector HitLocation, struct FVector HitMomentum, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamageReaction ( struct FName SpecializedEventName, class AController* DamageInstigator, struct FVector HitLocation, struct FVector HitMomentum, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnRegionDeath ( unsigned char EventOutput, class AController* KilledBy, struct FVector HitLocation, struct FVector HitMomentum, struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
	unsigned char GetDamageSurfaceType ( );
	float GetDamageModifierPercentForImpact ( class UWillowImpactDefinition* ImpactType );
	struct FImpactResponseEffect GetResponseForImpact ( class UWillowImpactDefinition* ImpactType );
};

UClass* UBodyHitRegionDefinition::pClassPointer = NULL;

// Class WillowGame.BodyRegionProtectionDefinition
// 0x00A8 (0x00E4 - 0x003C)
class UBodyRegionProtectionDefinition : public UGBXDefinition
{
public:
	class UBodyHitRegionDefinition*                    BodyHitRegion;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageModifierPercent;                            		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      PlayImpactWithNoDamage : 1;                       		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RunTookDamageRuleWithNoDamage : 1;                		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FImpactResponseEffect                       DamageImpactEffects;                              		// 0x0048 (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PercentOfMaxHealthLimit;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           PhysicalMaterial;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3764 ];

		return pClassPointer;
	};

};

UClass* UBodyRegionProtectionDefinition::pClassPointer = NULL;

// Class WillowGame.BodyWeaponHoldDefinition
// 0x0088 (0x00C4 - 0x003C)
class UBodyWeaponHoldDefinition : public UGBXDefinition
{
public:
	struct FName                                       HoldName;                                         		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UEnvironmentTagDefinition*                   EnvironmentTag;                                   		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AimOffsetProfileName;                             		// 0x0048 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseArmBoneBlend : 1;                             		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseUpperBodyMovementBlend : 1;                   		// 0x0050 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLeftHandIKEnabled : 1;                           		// 0x0050 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	TArray< class UAnimSet* >                          AnimSetList;                                      		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FBodyWeaponActionPostureData >      WeaponActions;                                    		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FBodyHandIKHoldData                         DefaultLeftHandIKHold;                            		// 0x006C (0x0024) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FCustomBodyHandIKHoldData >         CustomLeftHandIKHolds;                            		// 0x0090 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     LeftHandIKJointLocation;                          		// 0x009C (0x000C) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FVector                                     LeftHandIKHandLocation;                           		// 0x00A8 (0x000C) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FRotator                                    LeftHandIKHandRotation;                           		// 0x00B4 (0x000C) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	class UBodyWeaponHoldDefinition*                   ParentDefinition;                                 		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3766 ];

		return pClassPointer;
	};

	void GetAnimSets ( TArray< class UAnimSet* >* OutAnimSets );
	class USpecialMoveDefinition* GetWeaponSMD ( unsigned char BodyAction, unsigned char BodyPosture, class UObject* SearchContext );
};

UClass* UBodyWeaponHoldDefinition::pClassPointer = NULL;

// Class WillowGame.BoundaryTurretRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UBoundaryTurretRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3768 ];

		return pClassPointer;
	};

};

UClass* UBoundaryTurretRenderingComponent::pClassPointer = NULL;

// Class WillowGame.BulletListenerComponent
// 0x000C (0x0228 - 0x021C)
class UBulletListenerComponent : public UCylinderComponent
{
public:
	TArray< class UBehaviorBase* >                     OnBulletTouch;                                    		// 0x021C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3770 ];

		return pClassPointer;
	};

};

UClass* UBulletListenerComponent::pClassPointer = NULL;

// Class WillowGame.CellsNavigator
// 0x0028 (0x0064 - 0x003C)
class UCellsNavigator : public UObject
{
public:
	TArray< struct FCellInfo >                         Cells;                                            		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      UnnavigableIndices;                               		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentSelectedCellIndex;                         		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMoveToCellData >                   MoveCellInfo;                                     		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3772 ];

		return pClassPointer;
	};

	class UMeshComponent* eventConstructInvMesh ( class AWillowInventory* TheItem );
	int CellIndex ( struct FString CellName );
	struct FString CellName ( int CellIndex );
	int SimpleMoveCell ( int CurrentCellIndex, float MoveX, float MoveY );
	int MoveCell ( int CurrentCellIndex, struct FVector Dir, float StrictTolerance, float LooseTolerance, float StrictGiveUpDistance, float LooseGiveUpDistance );
	void SetupCell ( struct FString CellName, float X, float Y, float Width, float Height );
};

UClass* UCellsNavigator::pClassPointer = NULL;

// Class WillowGame.ChallengeCategoryDefinition
// 0x0010 (0x004C - 0x003C)
class UChallengeCategoryDefinition : public UGBXDefinition
{
public:
	struct FString                                     CategoryName;                                     		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                SortWeight;                                       		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3774 ];

		return pClassPointer;
	};

};

UClass* UChallengeCategoryDefinition::pClassPointer = NULL;

// Class WillowGame.ChallengeConditionDefinition
// 0x0018 (0x0054 - 0x003C)
class UChallengeConditionDefinition : public UGBXDefinition
{
public:
	struct FString                                     Description;                                      		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       StatId;                                           		// 0x0048 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TargetValue;                                      		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3776 ];

		return pClassPointer;
	};

};

UClass* UChallengeConditionDefinition::pClassPointer = NULL;

// Class WillowGame.ChallengeDefinition
// 0x0084 (0x00C0 - 0x003C)
class UChallengeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDlcLicensableObject;                    		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     ChallengeName;                                    		// 0x0044 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0050 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       AssociatedMap;                                    		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSecret : 1;                                      		// 0x0064 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      ChallengeType;                                    		// 0x0068 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      LevelChallengeObjectGroupIdx;                     		// 0x0069 (0x0001) [0x0000000000000000]              
	int                                                GoalValue;                                        		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UChallengeCategoryDefinition*                ChallengeCategoryDef;                             		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             GiveChallengeWhenPlayerEntersMaps;                		// 0x0074 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              CompletedAttributeEffects;                        		// 0x0080 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                BPReward;                                         		// 0x008C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RewardTextKey;                                    		// 0x009C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FConditionLevel >                   Levels;                                           		// 0x00A4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UDownloadableExpansionDefinition*            DlcExpansion;                                     		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDownloadableBalanceModifierDefinition*      DlcBalanceMod;                                    		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBehaviorProviderDefinition*                 BehaviorProvider;                                 		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                LevelChallengeOneOffIdx;                          		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3778 ];

		return pClassPointer;
	};

	struct FString GetRewardText ( class AWillowPlayerController* WPC, int Level );
	class UDownloadableContentDefinition* GetDownloadableContentDefinition ( );
	void OnLevelCompleted ( class UObject* ForPlayer, int LevelNum, struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UChallengeDefinition::pClassPointer = NULL;

// Class WillowGame.ChallengeFeedbackMessage
// 0x001B (0x0064 - 0x0049)
class UChallengeFeedbackMessage : public ULocalMessage
{
public:
	struct FString                                     ChallengeCompleted;                               		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChallengeReceived;                                		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3780 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UChallengeFeedbackMessage::pClassPointer = NULL;

// Class WillowGame.ChallengeManager
// 0x0050 (0x01D8 - 0x0188)
class AChallengeManager : public AActor
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            StatIdChallengeMap;                               		// 0x018C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     BPRewardText;                                     		// 0x01C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FBehaviorConsumerHandle                     BehaviorConsumerHandle;                           		// 0x01D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3782 ];

		return pClassPointer;
	};

	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void OnStatIncrement ( class AWillowPlayerStats* StatContext, struct FName StatId, int Amount );
	void UnregisterChallenges ( class AWillowPlayerController* PCOwner );
	void UnregisterChallenge ( struct FChallengeData* TheChallenge );
	void RegisterChallenge ( struct FChallengeData* TheChallenge );
};

UClass* AChallengeManager::pClassPointer = NULL;

// Class WillowGame.ChassisDefinition
// 0x0074 (0x00B0 - 0x003C)
class UChassisDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;                  		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FBodyCompositionData                        BodyComposition;                                  		// 0x0040 (0x0014) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	class UBodyHitRegionDefinition*                    DefaultHitRegion;                                 		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBodyHitRegionDefinition* >          HitRegionList;                                    		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UPhysicalMaterial*                           DrivingPhysicalMaterial;                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           DefaultPhysicalMaterial;                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ReverseSwitchName;                                		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BrakeSwitchName;                                  		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HeadlightSwitchName;                              		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ThrottleSwitchName;                               		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWillowImpactDefinition*                     TouchImpactDefinition;                            		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWillowImpactDefinition*                     UntouchImpactDefinition;                          		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCoordinatedEffectDefinition*                SpawnCoordinatedEffect;                           		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                DeSpawnCoordinatedEffect;                         		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      AllowPawnsToStandOnTopOfVehicle : 1;              		// 0x009C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             StatusEffectSockets;                              		// 0x00A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UParticleSystem*                             StatusEffectParticleSystemTemplate;               		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3784 ];

		return pClassPointer;
	};

	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
};

UClass* UChassisDefinition::pClassPointer = NULL;

// Class WillowGame.ClassDropWeightValueResolver
// 0x0004 (0x0040 - 0x003C)
class UClassDropWeightValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                    		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3786 ];

		return pClassPointer;
	};

};

UClass* UClassDropWeightValueResolver::pClassPointer = NULL;

// Class WillowGame.CombatMusicManager
// 0x0040 (0x007C - 0x003C)
class UCombatMusicManager : public UObject
{
public:
	TArray< struct FTargetedPlayerState >              TargetedPlayerStates;                             		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TimeSinceLastUpdate;                              		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              TimeOfNewCombatAction;                            		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              TimeCombatMusicStarted;                           		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              TimeOfLastStateChange;                            		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              MaxDurationOfThisCombatMusic;                     		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              LastTimeAddedShieldDownThreat;                    		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              LastTimeMusicTimedOut;                            		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              MaxDurationOfThisMoratorium;                      		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      bChangingState : 1;                               		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCombatMusicManagerEnabled : 1;                   		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInDebugMode : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBossFightActive : 1;                             		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHaveAddedEnemyWithCustomCombatMusic : 1;         		// 0x0068 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      CombatMusicManagerState;                          		// 0x006C (0x0001) [0x0000000000000000]              
	float                                              CurrentThreatValue;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	class UCombatMusicParameters*                      CombatMusicParams;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              UpdateThreatDelta;                                		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3788 ];

		return pClassPointer;
	};

	float GetDebugTime ( );
	void ForceSetThreatLevel ( float ThreatLevel );
	void ForceFadeOutCombatMusic ( unsigned long bTurnBackOnAmbientMusic );
	void SetEnabled ( unsigned long bEnabled );
	void Update ( );
	void PlayerShieldDown ( class AActor* Player );
	void PlayerDamagedByEnemy ( class AActor* Player, class AWillowMind* Enemy, float Damage, class UClass* DamageType );
	void EnemyTargetChanged ( class AWillowMind* Enemy, unsigned long bForceRemove );
	void PlayerPetTargetedByEnemy ( class AActor* Pet, class AActor* Player, class AWillowMind* Enemy );
	void PlayerTargetedByEnemy ( class AActor* Player, class AWillowMind* Enemy );
};

UClass* UCombatMusicManager::pClassPointer = NULL;

// Class WillowGame.CombatMusicParameters
// 0x007C (0x00B8 - 0x003C)
class UCombatMusicParameters : public UGBXDefinition
{
public:
	float                                              FullThreatThreshholdValue;                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MediumThreatThreshholdValue;                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoThreatThressholdValue;                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThreatLevelSubtractedPerSecond;                   		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighestThreatAllowed;                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RequiredThreatValueIfTargeted;                    		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThreatSurgeThreshold;                             		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MediumThreatVolumeFadeTime;                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkRtpc*                                     MediumThreatRtpc;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsPlus1;            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsPlus2;            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsPlus3;            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsPlus4;            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsPlus5;            		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsMinus1;           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsMinus2;           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsMinus3;           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsMinus4;           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyThreatMultiplierWhenLevelIsMinus5;           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyDamagesPlayerWeight;                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThreatFromShieldDown;                             		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLongestTimeCombatMusicPlays;                   		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLongestTimeCombatMusicPlays;                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTimeBeforeCombatMusicStartsAgain;              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTimeBeforeCombatMusicStartsAgain;              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CombatMusicManagerUpdateFrequency;                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeAllowedToReachFullThreat;                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeBackToFullVolumeTime;                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeBetweenShieldDownThreats;                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StateChangeDelay;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyNotTargetingPlayerTimeout;                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3790 ];

		return pClassPointer;
	};

};

UClass* UCombatMusicParameters::pClassPointer = NULL;

// Class WillowGame.CoordinatedEffectDefinition
// 0x0050 (0x008C - 0x003C)
class UCoordinatedEffectDefinition : public UGBXDefinition
{
public:
	class UMaterialInterface*                          OverrideMaterial;                                 		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             CriticialHitParticle;                             		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCoordinatedParticleSystemDefinition > ParticleEffects;                                  		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCoordinatedScalarParameter >       MaterialScalarParameters;                         		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCoordinatedVectorParameter >       MaterialVectorParameters;                         		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCoordinatedAudioDefinition >       AudioEffects;                                     		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              EffectDuration;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleSpeedMultiplier;                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCoordinatedEffectDefinition*                NextEffect;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MutexName;                                        		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInfiniteDuration : 1;                            		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCensored : 1;                                    		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bReplicated : 1;                                  		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRemoveShadows : 1;                               		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHideInstanceDataParticles : 1;                   		// 0x0088 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHidePawnWeaponParticleAttachments : 1;           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3792 ];

		return pClassPointer;
	};

};

UClass* UCoordinatedEffectDefinition::pClassPointer = NULL;

// Class WillowGame.CurrencyAttributeValueResolver
// 0x0001 (0x003D - 0x003C)
class UCurrencyAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      FormOfCurrency;                                   		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3794 ];

		return pClassPointer;
	};

};

UClass* UCurrencyAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.CurrencyListDefinition
// 0x000C (0x0048 - 0x003C)
class UCurrencyListDefinition : public UGBXDefinition
{
public:
	TArray< struct FCurrencyPresentation >             Currencies;                                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3796 ];

		return pClassPointer;
	};

};

UClass* UCurrencyListDefinition::pClassPointer = NULL;

// Class WillowGame.CurrentProficiencySkillAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UCurrentProficiencySkillAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3798 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UCurrentProficiencySkillAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.CustomizationData
// 0x0010 (0x004C - 0x003C)
class UCustomizationData : public UGBXDefinition
{
public:
	class UCustomizationDefinition*                    MyDefinition;                                     		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 PickupMesh;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  PickupFlagIcon;                                   		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                NumReferencers;                                   		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3800 ];

		return pClassPointer;
	};

	void ApplyCustomizationToInstanceDataSet ( struct FPointer TheDataSet, class UObject* InstanceDataOwner );
	void ApplyCustomization ( class UICustomizable* Target );
	void ApplyCustomizationToDataSets ( TArray< struct FPointer > DataSets, class UObject* InstanceDataOwner );
};

UClass* UCustomizationData::pClassPointer = NULL;

// Class WillowGame.CustomizationData_Head
// 0x000C (0x0058 - 0x004C)
class UCustomizationData_Head : public UCustomizationData
{
public:
	class USkeletalMesh*                               HeadMesh;                                         		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InstanceDataName;                                 		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3802 ];

		return pClassPointer;
	};

	void ApplyCustomizationToInstanceDataSet ( struct FPointer TheDataSet, class UObject* InstanceDataOwner );
};

UClass* UCustomizationData_Head::pClassPointer = NULL;

// Class WillowGame.CustomizationData_Skin
// 0x0008 (0x0054 - 0x004C)
class UCustomizationData_Skin : public UCustomizationData
{
public:
	class UMaterialInstanceConstant*                   BodyMaterial;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   HeadMaterial;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3804 ];

		return pClassPointer;
	};

	void ApplySkinToMaterial ( class UMaterialInstance* TargetMaterial );
	void ApplyCustomizationToInstanceDataSet ( struct FPointer TheDataSet, class UObject* InstanceDataOwner );
};

UClass* UCustomizationData_Skin::pClassPointer = NULL;

// Class WillowGame.CustomizationDefinition
// 0x0054 (0x0090 - 0x003C)
class UCustomizationDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                    		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     CustomizationName;                                		// 0x0040 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      CustomizationType;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            UsageFlags;                                       		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            OtherUsageFlags;                                  		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PackageName;                                      		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     CustomizationDataName;                            		// 0x0074 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                ProfileEntryID;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ProfileEntryIndex;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PrimarySort;                                      		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SecondarySort;                                    		// 0x0089 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UDownloadableCustomizationSetDefinition*     DlcCustomizationSetDef;                           		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3806 ];

		return pClassPointer;
	};

	bool PassesDLCUsageRestrictionsForUser ( class APlayerController* CustomizationUser );
	bool eventIsVehicleSkinCustomization ( );
	bool eventIsCharacterSkinCustomization ( );
	bool eventIsCharacterHeadCustomization ( );
	bool MatchRequiredUsageFlags ( TArray< class UClass* > RequiredUsageClasses, TArray< class UClass* > SuppliedUsageClasses );
	void SortCustomizationList ( TArray< class UCustomizationDefinition* >* ListItems );
	class UDownloadableContentDefinition* GetDownloadableContentDefinition ( );
	void GetAvailableAndUnauthorizedCustomizationsForVehicle ( class AWillowPlayerController* PC, class UVSSUIDefinition* VehicleUIDef, class UClass* RequiredType, unsigned long bDebugAllowLocked, TArray< class UCustomizationDefinition* >* AvailableCustomizations, TArray< int >* AvailableCustomizationsBeenSeen, TArray< class UCustomizationDefinition* >* UnauthorizedCustomizations, int* LockedCustomizationCount );
	void GetAvailableAndUnauthorizedCustomizationsForPlayer ( class AWillowPlayerController* PC, class UClass* RequiredType, unsigned long bDebugAllowLocked, class UWillowCharacterClassDefinition* CharacterClassOverride, TArray< class UCustomizationDefinition* >* AvailableCustomizations, TArray< int >* AvailableCustomizationsBeenSeen, TArray< class UCustomizationDefinition* >* UnauthorizedCustomizations, int* LockedCustomizationCount );
	void GetAvailableCustomizationsForVehicle ( class AWillowPlayerController* PC, class UVSSUIDefinition* VehicleUIDef, class UClass* RequiredType, unsigned long bDebugAllowLocked, TArray< class UCustomizationDefinition* >* AvailableCustomizations, TArray< int >* AvailableCustomizationsBeenSeen, int* LockedCustomizationCount );
	void GetAvailableCustomizationsForPlayer ( class AWillowPlayerController* PC, class UClass* RequiredType, unsigned long bDebugAllowLocked, class UWillowCharacterClassDefinition* CharacterClassOverride, TArray< class UCustomizationDefinition* >* AvailableCustomizations, TArray< int >* AvailableCustomizationsBeenSeen, int* LockedCustomizationCount );
};

UClass* UCustomizationDefinition::pClassPointer = NULL;

// Class WillowGame.CustomizationType
// 0x0014 (0x0050 - 0x003C)
class UCustomizationType : public UGBXDefinition
{
public:
	struct FString                                     CustomizationTypeName;                            		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                PRICustomizationIndex;                            		// 0x0048 (0x0004) [0x0000000000000000]              
	class UClass*                                      AssociatedCustomizationDataClass;                 		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3808 ];

		return pClassPointer;
	};

};

UClass* UCustomizationType::pClassPointer = NULL;

// Class WillowGame.CustomizationType_Head
// 0x0000 (0x0050 - 0x0050)
class UCustomizationType_Head : public UCustomizationType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3810 ];

		return pClassPointer;
	};

};

UClass* UCustomizationType_Head::pClassPointer = NULL;

// Class WillowGame.CustomizationType_Skin
// 0x0000 (0x0050 - 0x0050)
class UCustomizationType_Skin : public UCustomizationType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3812 ];

		return pClassPointer;
	};

};

UClass* UCustomizationType_Skin::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage
// 0x000C (0x0048 - 0x003C)
class UCustomizationUsage : public UGBXDefinition
{
public:
	struct FString                                     CustomizationUsageName;                           		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3814 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage::pClassPointer = NULL;

// Class WillowGame.CustomSkeletalMeshComponent
// 0x0004 (0x06B0 - 0x06AC)
class UCustomSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	class USkeletalMesh*                               DefaultSkeletalMesh;                              		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3816 ];

		return pClassPointer;
	};

};

UClass* UCustomSkeletalMeshComponent::pClassPointer = NULL;

// Class WillowGame.DamageOverTimeManager
// 0x001C (0x0058 - 0x003C)
class UDamageOverTimeManager : public UObject
{
public:
	TArray< struct FSourceObjectData >                 SourceObjects;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDamageOnlyOnceData >               DamageOnlyOnceActors;                             		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                UniqueId;                                         		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3818 ];

		return pClassPointer;
	};

	void eventDoTakeRadiusDamage ( class AActor* HurtActor, class UDamageTypeDefinition* DamageTypeDef, unsigned long bCanDamageFriendlies, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, class AController* InstigatedByController, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser );
	void AddSourceObject ( class UObject* SourceObject, struct FVector SourceLocation, class AController* InstigatedByController, class UExplosionDefinition* ExplosionDef, int ExplosionScaleIndex, class UIDamageBehavior* DamageContext, float InitialDamageRadius, float Damage, unsigned long bFullDamage, float Momentum, class UClass* DamageSource, class UDamageTypeDefinition* DamageTypeDef, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, class UIDamageCauser* DamageCauser, unsigned long bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray< class AActor* > ActorsHurt );
};

UClass* UDamageOverTimeManager::pClassPointer = NULL;

// Class WillowGame.DamageTypeAttributeValueResolver
// 0x001C (0x0058 - 0x003C)
class UDamageTypeAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FDamageTypeSelectorData >           DamageTypes;                                      		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3820 ];

		return pClassPointer;
	};

};

UClass* UDamageTypeAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.DefinitionGlobalsDefinition
// 0x0014 (0x0050 - 0x003C)
class UDefinitionGlobalsDefinition : public UGBXDefinition
{
public:
	struct FColor                                      DefaultColor;                                     		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DefaultIcon;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDefinitionIconDatum >              DefinitionIconData;                               		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3822 ];

		return pClassPointer;
	};

	class UTexture2D* GetIcon ( class UClass* DefClass );
	struct FColor GetColor ( class UClass* DefClass );
};

UClass* UDefinitionGlobalsDefinition::pClassPointer = NULL;

// Class WillowGame.DesignerAttributeDefinition
// 0x002C (0x0088 - 0x005C)
class UDesignerAttributeDefinition : public UAttributeDefinition
{
public:
	struct FName                                       ValueName;                                        		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseValue;                                        		// 0x0064 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Scope;                                            		// 0x0074 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSearchAttributeByName : 1;                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UClass*                                      GlobalScopeResolverClass;                         		// 0x007C (0x0004) [0x0000000000000000]              
	class UClass*                                      DesignerAttributeResolverClass;                   		// 0x0080 (0x0004) [0x0000000000000000]              
	class UClass*                                      DesignerAttributeResolverByNameClass;             		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3824 ];

		return pClassPointer;
	};

};

UClass* UDesignerAttributeDefinition::pClassPointer = NULL;

// Class WillowGame.DevelopmentDownloadableContentEnumerator
// 0x0000 (0x0098 - 0x0098)
class UDevelopmentDownloadableContentEnumerator : public UDownloadableContentEnumerator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3826 ];

		return pClassPointer;
	};

	void InstallAllDLC ( );
};

UClass* UDevelopmentDownloadableContentEnumerator::pClassPointer = NULL;

// Class WillowGame.DialogNameTagExpressionEvaluator
// 0x0008 (0x0044 - 0x003C)
class UDialogNameTagExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bWantExactMatch : 1;                              		// 0x003C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class UWillowDialogNameTag*                        NameTag;                                          		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3828 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UDialogNameTagExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.DLCLegacyPlayerClassIdentifierDefinition
// 0x0020 (0x005C - 0x003C)
class UDLCLegacyPlayerClassIdentifierDefinition : public UGBXDefinition
{
public:
	TArray< struct FLegacyCustomizationItemData >      CharacterCustomizations;                          		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AssociatedPlayerClassIdentifierPath;              		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UItemPoolDefinition*                         AsterClassMods;                                   		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         LobeliaClassMods;                                 		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3830 ];

		return pClassPointer;
	};

};

UClass* UDLCLegacyPlayerClassIdentifierDefinition::pClassPointer = NULL;

// Class WillowGame.DlcTmsHolder
// 0x0018 (0x0054 - 0x003C)
class UDlcTmsHolder : public UObject
{
public:
	TArray< struct FPremiumCustomizationInfo >         PremiumCustomizationList;                         		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FPremiumCustomizationInfo >         PremiumClassList;                                 		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3832 ];

		return pClassPointer;
	};

};

UClass* UDlcTmsHolder::pClassPointer = NULL;

// Class WillowGame.DownloadableAssetLibraryDefinition
// 0x0020 (0x005C - 0x003C)
class UDownloadableAssetLibraryDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UDownloadablePackageDefinition*              PackageDef;                                       		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPackageAssetLibrary*                        Libraries[ 0x6 ];                                 		// 0x0044 (0x0018) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3834 ];

		return pClassPointer;
	};

};

UClass* UDownloadableAssetLibraryDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadableContentDefinition
// 0x001C (0x0058 - 0x003C)
class UDownloadableContentDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UDownloadablePackageDefinition*              PackageDef;                                       		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ContentId;                                        		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                LicenseMask;                                      		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     ContentDisplayName;                               		// 0x004C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3836 ];

		return pClassPointer;
	};

	struct FDlcContentId GetFullContentId ( );
	bool CanConsume ( class APlayerController* Controller );
	bool IsInstalled ( );
	bool IsLicensed ( class APlayerController* Controller );
};

UClass* UDownloadableContentDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadableBalanceModifierDefinition
// 0x0010 (0x0068 - 0x0058)
class UDownloadableBalanceModifierDefinition : public UDownloadableContentDefinition
{
public:
	class UBalanceModifierDefinition*                  BalanceModifier;                                  		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                LevelCapIncrease;                                 		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                OverpowerLevelCapIncrease;                        		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPlayerChallengeListDefinition*              ChallengeList;                                    		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3838 ];

		return pClassPointer;
	};

};

UClass* UDownloadableBalanceModifierDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadableCharacterDefinition
// 0x0000 (0x0058 - 0x0058)
class UDownloadableCharacterDefinition : public UDownloadableContentDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3840 ];

		return pClassPointer;
	};

	bool CanPlayAs ( class APlayerController* Controller );
};

UClass* UDownloadableCharacterDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadableCustomizationSetDefinition
// 0x0008 (0x0060 - 0x0058)
class UDownloadableCustomizationSetDefinition : public UDownloadableContentDefinition
{
public:
	int                                                ProductID;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumCustomizations;                                		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3842 ];

		return pClassPointer;
	};

	bool CanUse ( class APlayerController* Controller );
};

UClass* UDownloadableCustomizationSetDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadableExpansionDefinition
// 0x0064 (0x00BC - 0x0058)
class UDownloadableExpansionDefinition : public UDownloadableContentDefinition
{
public:
	TArray< struct FDlcLevelTravelPair >               LevelTravelPairs;                                 		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class ULevelDependencyList*                        LevelDependencyList;                              		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPlayerChallengeListDefinition*              ChallengeList;                                    		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UGearboxDialogGroup* >               NPCDialogGroups;                                  		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class USwfMovie*                                   FastTravelMapMovie;                               		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AllSideMissionsCompleteAchievement;               		// 0x007C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFastTravelStationDefinition*                GatewayStationDefinition;                         		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPlayThroughData >                  RegionBalanceData;                                		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UCurrencyListDefinition*                     Currencies;                                       		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MissionNumberBase;                                		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMissionDefinition* >                SeasonalMissionList;                              		// 0x0098 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UPlayerTrainingMessageListDefinition*        TrainingMessageListDef;                           		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     AlwaysLoadedMapSoundBankName;                     		// 0x00A8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UAkBank*                                     AlwaysLoadedSFXBank;                              		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkBank*                                     AlwaysLoadedVoiceBank;                            		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3844 ];

		return pClassPointer;
	};

	bool IsLevelTravelAccessible ( );
	bool CanTravelTo ( class APlayerController* Controller );
};

UClass* UDownloadableExpansionDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadableItemSetDefinition
// 0x0020 (0x0078 - 0x0058)
class UDownloadableItemSetDefinition : public UDownloadableContentDefinition
{
public:
	class UAttributePresentationListDefinition*        DefaultAttributePresentation;                     		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ItemAttributePresentationOverride;                		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ArtifactAttributePresentationOverride;            		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ClassModAttributePresentationOverride;            		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        GrenadeModAttributePresentationOverride;          		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ShieldAttributePresentationOverride;              		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        WeaponAttributePresentationOverride;              		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             RainbowRarityLocatorStickOverride;                		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3846 ];

		return pClassPointer;
	};

	struct FString GetDLCRestrictedMessage ( unsigned long bShort );
	bool CanUse ( class APlayerController* Controller );
};

UClass* UDownloadableItemSetDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadableVehicleDefinition
// 0x0000 (0x0058 - 0x0058)
class UDownloadableVehicleDefinition : public UDownloadableContentDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3848 ];

		return pClassPointer;
	};

	bool CanDrive ( class APlayerController* Controller );
};

UClass* UDownloadableVehicleDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadablePackageDefinition
// 0x003C (0x0078 - 0x003C)
class UDownloadablePackageDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                PackageId;                                        		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                PackageMask;                                      		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     PackageDisplayName;                               		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DLCName;                                          		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                SeasonPassId;                                     		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UDownloadablePackageLicenseItem* >   LicenseItems;                                     		// 0x0064 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	int                                                bUsesExtendedLicensing;                           		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDownloadablePackageLicense*                 AppliedLicense;                                   		// 0x0074 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3850 ];

		return pClassPointer;
	};

	bool IsFullyInstalled ( );
	bool IsFullyLicensed ( );
	class UDownloadableContentDefinition* GetContentDefinitionById ( int ContentId );
};

UClass* UDownloadablePackageDefinition::pClassPointer = NULL;

// Class WillowGame.DownloadablePackageLicense
// 0x0004 (0x0040 - 0x003C)
class UDownloadablePackageLicense : public UObject
{
public:
	int                                                LicenseMask;                                      		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3852 ];

		return pClassPointer;
	};

};

UClass* UDownloadablePackageLicense::pClassPointer = NULL;

// Class WillowGame.DownloadablePackageLicenseItem
// 0x0004 (0x0040 - 0x003C)
class UDownloadablePackageLicenseItem : public UObject
{
public:
	int                                                LicenseMask;                                      		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3854 ];

		return pClassPointer;
	};

};

UClass* UDownloadablePackageLicenseItem::pClassPointer = NULL;

// Class WillowGame.GoldenKeyLicenseItem
// 0x0008 (0x0048 - 0x0040)
class UGoldenKeyLicenseItem : public UDownloadablePackageLicenseItem
{
public:
	int                                                SourceId;                                         		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumKeys;                                          		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3856 ];

		return pClassPointer;
	};

};

UClass* UGoldenKeyLicenseItem::pClassPointer = NULL;

// Class WillowGame.MarketingUnlockLicenseItem
// 0x0004 (0x0044 - 0x0040)
class UMarketingUnlockLicenseItem : public UDownloadablePackageLicenseItem
{
public:
	int                                                UnlockId;                                         		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3858 ];

		return pClassPointer;
	};

};

UClass* UMarketingUnlockLicenseItem::pClassPointer = NULL;

// Class WillowGame.EffectCollectionDefinition
// 0x000C (0x0048 - 0x003C)
class UEffectCollectionDefinition : public UGBXDefinition
{
public:
	TArray< struct FConditionalParticleEffectData >    ParticleEffects;                                  		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3860 ];

		return pClassPointer;
	};

	class UParticleSystem* GetParticleEffect ( class UObject* ContextObject );
};

UClass* UEffectCollectionDefinition::pClassPointer = NULL;

// Class WillowGame.EnvironmentTagDefinition
// 0x0000 (0x003C - 0x003C)
class UEnvironmentTagDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3862 ];

		return pClassPointer;
	};

};

UClass* UEnvironmentTagDefinition::pClassPointer = NULL;

// Class WillowGame.EquippedInventoryAttributeContextResolver
// 0x0001 (0x003D - 0x003C)
class UEquippedInventoryAttributeContextResolver : public UAttributeContextResolver
{
public:
	unsigned char                                      EquipmentLocation;                                		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3864 ];

		return pClassPointer;
	};

};

UClass* UEquippedInventoryAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.EventFilter_OnTouch
// 0x0004 (0x0044 - 0x0040)
class UEventFilter_OnTouch : public UBehaviorEventFilterBase
{
public:
	unsigned long                                      WillowPawnsAllowed : 1;                           		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      VehiclesAllowed : 1;                              		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ProjectilesAllowed : 1;                           		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      ItemsAllowed : 1;                                 		// 0x0040 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      AnyAllegiance : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      EnemiesOnly : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      FriendliesOrNeutralsOnly : 1;                     		// 0x0040 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3866 ];

		return pClassPointer;
	};

	bool eventAllowedToRunThisEvent ( class UObject* ContextObject, class UObject* Instigator );
	bool PassesAllegianceTests ( class UObject* ContextObject, class UObject* Instigator, unsigned long IsPawn, unsigned long IsVehicle, unsigned long IsProjectile );
};

UClass* UEventFilter_OnTouch::pClassPointer = NULL;

// Class WillowGame.ExperienceResourcePool
// 0x003C (0x0154 - 0x0118)
class UExperienceResourcePool : public UResourcePool
{
public:
	float                                              ExpCombatPointsScale;                             		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExpCombatPointsScaleBaseValue;                    		// 0x011C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExpCombatPointsScaleModifierStack;                		// 0x0120 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ExpMissionPointsScale;                            		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExpMissionPointsScaleBaseValue;                   		// 0x0130 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExpMissionPointsScaleModifierStack;               		// 0x0134 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ExpAllPointsScale;                                		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExpAllPointsScaleBaseValue;                       		// 0x0144 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExpAllPointsScaleModifierStack;                   		// 0x0148 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3868 ];

		return pClassPointer;
	};

	void ApplyExpPointsToExpLevel ( unsigned long bCheated );
};

UClass* UExperienceResourcePool::pClassPointer = NULL;

// Class WillowGame.ExplosionCollectionDefinition
// 0x000C (0x0048 - 0x003C)
class UExplosionCollectionDefinition : public UGBXDefinition
{
public:
	TArray< struct FConditionalExplosionData >         Explosions;                                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3870 ];

		return pClassPointer;
	};

	class UExplosionDefinition* GetExplosion ( class UObject* ContextObject );
};

UClass* UExplosionCollectionDefinition::pClassPointer = NULL;

// Class WillowGame.ExplosionDefinition
// 0x0050 (0x008C - 0x003C)
class UExplosionDefinition : public UGBXDefinition
{
public:
	class UAkEvent*                                    ExplosionAkEvent;                                 		// 0x003C (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	class UAkEvent*                                    MultipleExplosionsAkEvent;                        		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             ExplosionPSTemplate;                              		// 0x0044 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	float                                              DrawScale;                                        		// 0x0048 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	TArray< struct FExplosionScaleData >               ExplosionScale;                                   		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UCameraAnim*                                 CameraAnim;                                       		// 0x0058 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	float                                              MinCameraEffectDistance;                          		// 0x005C (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	float                                              MaxCameraEffectDistance;                          		// 0x0060 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0064 (0x0004) [0x0000000024000002]              ( CPF_Const | CPF_EditInline | CPF_Deprecated )
	class UDamageTypeDefinition*                       DamageTypeDef;                                    		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipTraceTest : 1;                               		// 0x006C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class UWillowExplosionImpactDefinition*            ImpactEffect;                                     		// 0x0070 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	float                                              ImpactTraceLength;                                		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FRecentExplosion >                  RecentExplosionTracker;                           		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ExplosionSoundStackingPreventionDelay;            		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              ExplosionSoundStackingMaxDistanceSquared;         		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3872 ];

		return pClassPointer;
	};

	bool DidAnExplosionForThisInstigatorJustGoOff ( class UObject* Context, struct FVector* Location );
	void MakeExplodyShakes ( int ExplosionScaleIndex, class AWillowPlayerController* WPC, struct FVector PawnLocation, struct FVector ExplosionLocation, float MinEffectDistance, float MaxEffectDistance, float EffectRange );
	void PlayExplosionCameraAnim ( int ExplosionScaleIndex, struct FVector ExplosionLocation, unsigned long bShouldReplicate );
	void PlayImpactEffects ( int ExplosionScaleIndex, class AActor* SourceActor, struct FVector ExplosionLocation, struct FVector ExplosionNormal );
	void PlayMultipleExplosionsSound ( class UObject* SourceObject, unsigned long bReplicate );
	void eventPlayExplosion ( class UObject* SourceObject, float DamageRadius, float Damage, unsigned long bFullDamage, float Momentum, class UClass* DamageSource, struct FVector Location, struct FVector Normal, unsigned long bReplicate, unsigned long bNoSound, struct FVector Offset, class UIDamageCauser* DamageCauser, unsigned long bCanDamageFriendlies, unsigned long bOverrideSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime );
	bool IsExplosionDebugEnabled ( );
	void ToggleExplosionDebug ( );
};

UClass* UExplosionDefinition::pClassPointer = NULL;

// Class WillowGame.FastTravelStationsListOrder
// 0x0010 (0x004C - 0x003C)
class UFastTravelStationsListOrder : public UGBXDefinition
{
public:
	TArray< class UFastTravelStationDefinition* >      FastTravelStationOrderList;                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UDownloadableExpansionDefinition*            DlcExpansion;                                     		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3874 ];

		return pClassPointer;
	};

};

UClass* UFastTravelStationsListOrder::pClassPointer = NULL;

// Class WillowGame.FastTravelStationsLookup
// 0x0018 (0x0054 - 0x003C)
class UFastTravelStationsLookup : public UObject
{
public:
	TArray< class UFastTravelStationDefinition* >      FastTravelStationLookupList;                      		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ULevelTravelStationDefinition* >     LevelTravelStationLookupList;                     		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3876 ];

		return pClassPointer;
	};

	bool AddStationToNameListInOrder ( class UTravelStationDefinition* ActivatedStationDefinition, TArray< struct FName >* StationNameList );
	bool TravelStationIsSafe ( struct FName StationDefinitionName );
	class UTravelStationDefinition* GetStartingTravelStation ( struct FName StationDefinitionName );
	void GetStationsForLevel ( struct FName LevelName, TArray< struct FName >* StationDefinitionNames );
	struct FVector GetLocation ( struct FName StationDefinitionName );
	class UFastTravelStationDefinition* GetDefaultStationForLevel ( struct FName LevelDefinitionName );
	struct FName GetLevelName ( struct FName StationDefinitionName );
	class UTexture* GetDisplayImage ( struct FName StationDefinitionName );
	struct FString GetDescription ( struct FName StationDefinitionName );
	struct FString GetDisplayName ( struct FName StationDefinitionName );
	class UTravelStationDefinition* FindTravelStationLookupObject ( struct FName StationDefinitionName );
	class UFastTravelStationDefinition* FindFastTravelStationLookupObject ( struct FName StationDefinitionName );
};

UClass* UFastTravelStationsLookup::pClassPointer = NULL;

// Class WillowGame.FiringModeDefinition
// 0x014C (0x0188 - 0x003C)
class UFiringModeDefinition : public UGBXDefinition
{
public:
	unsigned char                                      FireType;                                         		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      BeamLockBehavior;                                 		// 0x003D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowDamageTypeDefinition*                 DamageTypeDefinition;                             		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UProjectileDefinition*                       ProjectileDefinition;                             		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExplosionCollectionDefinition*              ExplosionOverrideDefinition;                      		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ExplosionOverideInstanceDataName;                 		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             PartSysTemplate;                                  		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UEffectCollectionDefinition*                 ConditionalPartSysTemplate;                       		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnAnyImpact;                                      		// 0x005C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FBulletImpactEventData >            ImpactResponses;                                  		// 0x0068 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              Lifetime;                                         		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TraceInterval;                                    		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSuppressImpactEffects : 1;                       		// 0x007C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPenetratePawn : 1;                               		// 0x007C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bParameterizedSourceLocation : 1;                 		// 0x007C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBeamChooseRandomBone : 1;                        		// 0x007C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFireRandomlyFromPattern : 1;                     		// 0x007C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bResetPatternAfterEachShot : 1;                   		// 0x007C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSuppressWeaponSpread : 1;                        		// 0x007C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bScalePatternByWeaponSpread : 1;                  		// 0x007C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             OverchargedImpactTemplate;                        		// 0x0080 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	int                                                NumRicochets;                                     		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Speed;                                            		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Acceleration;                                     		// 0x008C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     WaveFreq;                                         		// 0x0098 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     WaveAmp;                                          		// 0x00A4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     WavePhase;                                        		// 0x00B0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RicochetFriction;                                 		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AirFriction;                                      		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FBulletTimerEvent >                 TimerEvents;                                      		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBulletEventResponse                        RicochetResponse;                                 		// 0x00D0 (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     TraceExtent;                                      		// 0x00F8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LightProjectileSourceLocationName;                		// 0x0104 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamMaxLockOnDistance;                            		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamMaxLength;                                    		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamSourceTangentStrengthOverDistance;            		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamTargetTangentStrengthOverDistance;            		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamApproxRepUpdateTime;                          		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BeamTraceNumSteps;                                		// 0x0120 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamSourceLocationName;                           		// 0x0124 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamSourceTangentName;                            		// 0x012C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamSourceStrengthName;                           		// 0x0134 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamTargetLocationName;                           		// 0x013C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamTargetTangentName;                            		// 0x0144 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamTargetStrengthName;                           		// 0x014C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamDirectionName;                                		// 0x0154 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamChainDelay;                                   		// 0x015C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BeamChainNum;                                     		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamChainMaxDistance;                             		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamRandomBoneTimeMin;                            		// 0x0168 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BeamRandomBoneTimeMax;                            		// 0x016C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFiringModeSoundDefinition*                  SoundDefinition;                                  		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FFiringPatternLine >                FiringPatternLines;                               		// 0x0174 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              BasePatternSpread;                                		// 0x0180 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinPatternScale;                                  		// 0x0184 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3878 ];

		return pClassPointer;
	};

	class UParticleSystem* GetParticleSystemTemplate ( class UObject* ContextObject );
	void NotifyFiringPatternWhenShotComplete ( int* NextFiringPatternIndex );
	int GetFiringPatternAdjustments ( float WeaponSpread, struct FRotator* InputAimAdjustment, struct FRotator* OutputAimAdjustment, struct FWaveMotionData* CustomWaveMotion, int* NextFiringPatternIndex );
	void RunBehaviorsForImpact ( int ResponseIndex, struct FImpactInfo ImpactData, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, class UObject* OtherInstigatorObject );
	int GetImpactResponseIndex ( unsigned char DamageSurfaceType );
};

UClass* UFiringModeDefinition::pClassPointer = NULL;

// Class WillowGame.FiringModeSoundDefinition
// 0x0040 (0x007C - 0x003C)
class UFiringModeSoundDefinition : public UGBXDefinition
{
public:
	TArray< struct FConditionalSoundData >             FireSounds;                                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             FireTailSounds;                                   		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UWillowImpactDefinition*                     ShellCasingImpact;                                		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ShellCasingDelay;                                 		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    TravelingSoundEvent;                              		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FConditionalSoundData >             BulletWhipSounds;                                 		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              BulletWhipRadius;                                 		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    BeamSoundEvent;                                   		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    BeamStopSoundEvent;                               		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    BeamImpactSoundEvent;                             		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3880 ];

		return pClassPointer;
	};

};

UClass* UFiringModeSoundDefinition::pClassPointer = NULL;

// Class WillowGame.FlyerBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class AFlyerBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3882 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
};

UClass* AFlyerBlockingVolume::pClassPointer = NULL;

// Class WillowGame.FocusCameraDefinition
// 0x0010 (0x004C - 0x003C)
class UFocusCameraDefinition : public UGBXDefinition
{
public:
	float                                              CamReturnTime;                                    		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CamMovementThreshold;                             		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CamMovementSpeed_Fast;                            		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CamMovementSpeed_Slow;                            		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3884 ];

		return pClassPointer;
	};

};

UClass* UFocusCameraDefinition::pClassPointer = NULL;

// Class WillowGame.FractalViewWanderingDefinition
// 0x0010 (0x004C - 0x003C)
class UFractalViewWanderingDefinition : public UGBXDefinition
{
public:
	TArray< struct FVector2D >                         PseudoRandomPoints;                               		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumberOfOctaves;                                  		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3886 ];

		return pClassPointer;
	};

	void GenerateNewRandomPoints ( );
};

UClass* UFractalViewWanderingDefinition::pClassPointer = NULL;

// Class WillowGame.GameBalanceDefinition
// 0x000C (0x0048 - 0x003C)
class UGameBalanceDefinition : public UGBXDefinition
{
public:
	TArray< struct FRegionBalanceData >                BalanceByRegion;                                  		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3888 ];

		return pClassPointer;
	};

};

UClass* UGameBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.GameReleaseDefinition
// 0x000C (0x0048 - 0x003C)
class UGameReleaseDefinition : public UGBXDefinition
{
public:
	struct FName                                       WorldDiscoveryStatID;                             		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumWorldDiscoveryAreas;                           		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3890 ];

		return pClassPointer;
	};

};

UClass* UGameReleaseDefinition::pClassPointer = NULL;

// Class WillowGame.GearLikenessMeshComponent
// 0x000C (0x06B8 - 0x06AC)
class UGearLikenessMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      LikenessOf;                                       		// 0x06AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      GroupIndex;                                       		// 0x06AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FQWord                                      CachedLikenessID;                                 		// 0x06B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3892 ];

		return pClassPointer;
	};

	void RefreshGearLikenessComponents ( class AActor* ComponentUser, unsigned char Mode, struct FInstanceDataSet* InstanceDataState, struct FReplicatedInstanceDataState* ReplicatedInstanceDataState );
};

UClass* UGearLikenessMeshComponent::pClassPointer = NULL;

// Class WillowGame.GenericReviveMessageDefinition
// 0x0018 (0x0054 - 0x003C)
class UGenericReviveMessageDefinition : public UGBXDefinition
{
public:
	struct FString                                     Message_Self;                                     		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Message_Other;                                    		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3894 ];

		return pClassPointer;
	};

};

UClass* UGenericReviveMessageDefinition::pClassPointer = NULL;

// Class WillowGame.GlobalAttributeValueResolver
// 0x0001 (0x003D - 0x003C)
class UGlobalAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      GlobalAttribute;                                  		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3896 ];

		return pClassPointer;
	};

	float GetGlobalAttributeValue ( unsigned char Attribute );
	void SetGlobalAttributeValue ( unsigned char Attribute, float Value );
};

UClass* UGlobalAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.GlobalsDefinition
// 0x0968 (0x09B0 - 0x0048)
class UGlobalsDefinition : public UGearboxGlobalsDefinition
{
public:
	int                                                BulletReflectionRadius;                           		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BulletReflectionSpeedAdjustment;                  		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             BulletReflectionParticle;                         		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BulletReflectionInaccuracyFormula;                		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             BulletPenetratedEnemyParticle;                    		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    BulletPenetratedEnemyAkEvent;                     		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DualWieldSwitchName;                              		// 0x006C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DualWieldSprintSwitchName;                        		// 0x0074 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DualWieldLeftSideControl;                         		// 0x007C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FKillSkillDuration >                KillSkillDurationsPerPlayers;                     		// 0x0084 (0x000C) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	struct FAttributeInitializationData                GeneralSkillPointsPerLevelUp;                     		// 0x0090 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GeneralSkillPointsTotalForCurrentLevel;           		// 0x00A0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                SpecialistSkillPointsPerLevelUp;                  		// 0x00B0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                CostToResetSkillPoints;                           		// 0x00C0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class USkillDefinition* >                  WeaponProficiencySkills;                          		// 0x00D0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                BaseEnemyExperienceFormula;                       		// 0x00DC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FDamageTypeExpModifier >            DamageTypeExpModifiers;                           		// 0x00EC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLevelBasedExpScale >               ExpScaleByLevelDifference;                        		// 0x00F8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FExpAwardWeight >                   ExpAwardWeights;                                  		// 0x0104 (0x000C) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	int                                                ExpMaxPlayerLevel;                                		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                ExpPointsRequiredForLevel;                        		// 0x0114 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                VehicleVSCharacterExpModifier;                    		// 0x0124 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                WorldDiscoveryExperienceFormula;                  		// 0x0134 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveDefinition*                 FastTravelObjective;                              		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TravelDelay;                                      		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTravelStationDefinition*                    DlcPreviousStation;                               		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SanctuaryMapName;                                 		// 0x0150 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SanctuaryAirMapName;                              		// 0x0158 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SanctuaryBackupMapName;                           		// 0x0160 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveDefinition*                 SanctuaryInaccessibleObjective;                   		// 0x0168 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveDefinition*                 SanctuaryFlyingObjective;                         		// 0x016C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinTeleportTime;                                  		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    TeleporterStartAkEvent;                           		// 0x0174 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    TeleporterStopAkEvent;                            		// 0x0178 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             TeleporterHoldingCellPartSys;                     		// 0x017C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDesignerAttributeDefinition*                StartupTeleporterAttribute;                       		// 0x0180 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                TeleportCost;                                     		// 0x0184 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    PauseAkEvent;                                     		// 0x0194 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    UnpauseAkEvent;                                   		// 0x0198 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkSwitch*                                   DefaultMaterialAkSwitch;                          		// 0x019C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkSwitch*                                   FirstPersonAkSwitch;                              		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkSwitch*                                   ThirdPersonAkSwitch;                              		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    EchoStartedAkEvent;                               		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    EchoEndedAkEvent;                                 		// 0x01AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     MasterVolumeAkRtpc;                               		// 0x01B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     UserVolumeMusicAkRtpc;                            		// 0x01B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     UserVolumeSfxAkRtpc;                              		// 0x01B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     UserVolumeVOAkRtpc;                               		// 0x01BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     ListenerDistanceAkRtpc;                           		// 0x01C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     ApproachSpeedAkRtpc;                              		// 0x01C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     SpeedAkRtpc;                                      		// 0x01C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ResetStatesAkEvent;                               		// 0x01CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    StartSplitScreenAkEvent;                          		// 0x01D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkState*                                    PlayerVoiceAkState;                               		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkState*                                    JackVoiceAkState;                                 		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkState*                                    PlayerCalloutsDisabledAkState;                    		// 0x01DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkState*                                    PlayerCalloutsEnabledAkState;                     		// 0x01E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    CinematicModePauseDialogAkEvent;                  		// 0x01E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    CinematicModeResumeDialogAkEvent;                 		// 0x01E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ShieldLowWarningStartAkEvent;                     		// 0x01EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ShieldLowWarningStopAkEvent;                      		// 0x01F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ShieldRecoveringAkEvent;                          		// 0x01F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ShieldRecoveredAkEvent;                           		// 0x01F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ShieldDownAkEvent;                                		// 0x01FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TinnitusEffectDecayRate;                          		// 0x0200 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     TinnitusEffectStrengthRTPC;                       		// 0x0204 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     TinnitusSourcePannerRTPC;                         		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     TinnitusSourceStrengthRTPC;                       		// 0x020C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    TinnitusAkEvent;                                  		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    LevelUpAkEvent;                                   		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    VOVolumeStartAkEvent;                             		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    VOVolumeStopAkEvent;                              		// 0x021C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    SFXVolumeStartAkEvent;                            		// 0x0220 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    SFXVolumeStopAkEvent;                             		// 0x0224 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MusicVolumeStartAkEvent;                          		// 0x0228 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MusicVolumeStopAkEvent;                           		// 0x022C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USoundMode*                                  LoadingSoundMode;                                 		// 0x0230 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USoundMode*                                  EchoSoundMode;                                    		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USoundMode*                                  DefaultSoundMode;                                 		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UAkEvent* >                          SoundsToAlwaysReference;                          		// 0x023C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              PlayerInteractionDistance;                        		// 0x0248 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         GrenadeAmmoDefinition;                            		// 0x024C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UProjectileDefinition*                       StandardGrenadeDefinition;                        		// 0x0250 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ShowEchoTalkerDistance;                           		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HideEchoTalkerDistance;                           		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     EchoDistortionAkRtpc;                             		// 0x025C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MissionAcceptEchoDelay;                           		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoDefinition_RepeaterPistol;                    		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoDefinition_RevolverPistol;                    		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoDefinition_Shotgun;                           		// 0x026C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoDefinition_SMG;                               		// 0x0270 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoDefinition_CombatRifle;                       		// 0x0274 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoDefinition_SniperRifle;                       		// 0x0278 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoDefinition_RocketLauncher;                    		// 0x027C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayerEventRetriggerDelaySeconds;                 		// 0x0280 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FRarityLevelColor >                 RarityLevelColors;                                		// 0x0284 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                MissionItemRarityLevel;                           		// 0x0290 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPlayThroughData >                  RegionBalanceData;                                		// 0x0294 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                GameStageIncreaseAbovePlayer;                     		// 0x02A0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OtherPlayerDiedCostMultiplier;                    		// 0x02B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAIDamageScale;                              		// 0x02B4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAIWeaponDamageScale;                        		// 0x02C4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAIPistolWeaponDamageScale;                  		// 0x02D4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAIShotgunWeaponDamageScale;                 		// 0x02E4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAISmgWeaponDamageScale;                     		// 0x02F4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAISniperWeaponDamageScale;                  		// 0x0304 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAIAssaultWeaponDamageScale;                 		// 0x0314 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalAIRocketWeaponDamageScale;                  		// 0x0324 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FLevelBasedDamageScale >            PlayerDamageScaleByLevelDifference;               		// 0x0334 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLevelBasedDamageScale >            AIDamageScaleByLevelDifference;                   		// 0x0340 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              SelfInflictedDamageMultiplier;                    		// 0x034C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                GlobalFallingDamageScale;                         		// 0x0350 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FriendlyDamageModifier;                           		// 0x0360 (0x0004) [0x0000000020000003]              ( CPF_Edit | CPF_Const | CPF_Deprecated )
	TArray< struct FStatusEffectTypeCommonProperties > StatusEffectCommonProperties;                     		// 0x0364 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLevelBasedStatusEffectChanceScale > StatusEffectChanceScales;                         		// 0x0370 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              FriendlyStatusEffectChanceModifier;               		// 0x037C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             DamageDisplayParticles;                           		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleColorParamName;              		// 0x0384 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleDamageParamName;             		// 0x038C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleSizeParamName;               		// 0x0394 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageDisplayParticleSizeMinDist;                 		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageDisplayParticleSizeMaxDist;                 		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleCriticalHitParamName;        		// 0x03A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleCriticalHitParamNameEs;      		// 0x03AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleCriticalHitParamNameFr;      		// 0x03B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleCriticalHitParamNameIt;      		// 0x03BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleCriticalHitParamNameDe;      		// 0x03C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageDisplayParticleCriticalHitParamValue;       		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DamageDisplaySortPriority;                        		// 0x03D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AllSideMissionsCompleteAchievement;               		// 0x03D1 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ReviveAFriendAchievement;                         		// 0x03D2 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      MatchedSetPurplesAchievement;                     		// 0x03D3 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      KilledFlyingEnemyWithTedioreAchievement;          		// 0x03D4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CompletedAllChallengesLevelOneAchievement;        		// 0x03D5 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CompletedASlaughterAchievement;                   		// 0x03D6 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DamageDisplayParticleResistParamName;             		// 0x03D8 (0x0008) [0x0000000000008003]              ( CPF_Edit | CPF_Const | CPF_Localized )
	float                                              DamageDisplayParticleResistParamValue;            		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleResistColorParamName;        		// 0x03E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleHealingParamName;            		// 0x03EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageDisplayParticleHealingParamValue;           		// 0x03F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayParticleLanguageParamName;           		// 0x03F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageDisplayShortenParamName;                    		// 0x0400 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                DamageDisplayShortenDamageThreshold;              		// 0x0408 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageDisplayShortenDamageMultiplyBy;             		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWillowVehicleControlDefinition*             VehicleControlDefinition;                         		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   DefaultWheelMaterialSoundEffect;                  		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleTireDamageRepeatDelay;                     		// 0x0418 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UVehicleFamilyDefinition* >          VehicleFamilyDefinitions;                         		// 0x041C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UVSSUIDefinition* >                  VSSVehicleUIDefinitions;                          		// 0x0428 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                DamageToApplyToVehiclesThatHitAIPawns;            		// 0x0434 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowVersusDuelGlobals*                    VersusDuelGlobalsDef;                             		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPlayerChallengeListDefinition*              ChallengeList;                                    		// 0x0448 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< float >                                    CompletionThresholdNotification;                  		// 0x044C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                MinimumGoalForNotification;                       		// 0x0458 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PercentChallengeCompletionNeededForPrestige;      		// 0x045C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCombatMusicParameters*                      CombatMusicProperties;                            		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BigDamageThreshold;                               		// 0x0464 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinBigDamageTime;                                 		// 0x0468 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinSmallDamageTime;                               		// 0x046C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BigDamageShakeMagnitude;                          		// 0x0470 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SmallDamageShakeMagnitude;                        		// 0x0474 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UForceFeedbackWaveform*                      BigDamageShake;                                   		// 0x0478 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UForceFeedbackWaveform*                      SmallDamageShake;                                 		// 0x047C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UDamageTypeDefinition*                       HealingDamageTypeDefinition;                      		// 0x0480 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     HealingImpactDefinition;                          		// 0x0484 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                AnnouncePickupRarityThreshold;                    		// 0x0488 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupRadius;                                     		// 0x048C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CoopRange;                                        		// 0x0490 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DropImpactEffectMax;                              		// 0x0494 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DropImpactEffectDelay;                            		// 0x0498 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DropImpactEffectThreshold;                        		// 0x049C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     DropImpactEffectVelocityAkRtpc;                   		// 0x04A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         LevelTransitionItemPool;                          		// 0x04A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAkEventResolver >                  InteractionDefaultSounds;                         		// 0x04A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUsePC360Buttons : 1;                             		// 0x04B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UTextMarkupDictionary*                       TheTextMarkupDictionary;                          		// 0x04B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ElementalFrameNames[ 0x8 ];                       		// 0x04BC (0x0040) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        DefaultAttributePresentation;                     		// 0x04FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ItemAttributePresentationOverride;                		// 0x0500 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ArtifactAttributePresentationOverride;            		// 0x0504 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ClassModAttributePresentationOverride;            		// 0x0508 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        GrenadeModAttributePresentationOverride;          		// 0x050C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        ShieldAttributePresentationOverride;              		// 0x0510 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationListDefinition*        WeaponAttributePresentationOverride;              		// 0x0514 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     AttributePresentationTranslation;                 		// 0x0518 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UAttributePresentationDefinition*            EmptyConstraint;                                  		// 0x0524 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAttributePresentationDefinition*            MissingPresentation;                              		// 0x0528 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ULevelDependencyList*                        LevelDependencyList;                              		// 0x052C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayerAirControl;                                 		// 0x0530 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDeveloperPerksDefinition*                   DeveloperPerksDef;                                		// 0x0534 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UKeyedItemPoolDefinition* >          CustomizationsToUnlockForLoyalCustomers;          		// 0x0538 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                MaxAllowedPlayThroughs;                           		// 0x0544 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAchievementUnlockData >            AchievementData;                                  		// 0x0548 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSlaughterMissionChain >            MissionChainsEligibleForSlaughterAchievement;     		// 0x0554 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UParticleSystem*                             PartItemHoverFade;                                		// 0x0560 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             PartItemHover;                                    		// 0x0564 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             PartPickup;                                       		// 0x0568 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             PartLootable;                                     		// 0x056C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PartLootableHoverOffset;                          		// 0x0570 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PartPickupHoverOffset;                            		// 0x057C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HoverWidthPickup;                                 		// 0x0588 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HoverWidthLootable;                               		// 0x058C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ItemHoverProjectionHeight;                        		// 0x0590 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         ItemPickupCardMovie;                              		// 0x0594 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInterface*                          HoverIconMaterial;                                		// 0x0598 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CardHeightPitchFactor;                            		// 0x059C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                CardHeightPitchDeadZone;                          		// 0x05A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CardHeightDistanceFactor;                         		// 0x05A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CardHeightCombatFactor;                           		// 0x05A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupSpinHMin;                                   		// 0x05AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupSpinHMax;                                   		// 0x05B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupSpinVMin;                                   		// 0x05B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupSpinVMax;                                   		// 0x05B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DayNightCycleRate;                                		// 0x05BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ProtectionTimerThreshold;                         		// 0x05C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ProtectionTimerDurationInSeconds;                 		// 0x05C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ProtectionTimerMaintainedMaxHealthPct;            		// 0x05C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FInputContextData >                 InputContexts;                                    		// 0x05CC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UInputDeviceCollectionDefinition*            InputDeviceCollection;                            		// 0x05D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UInputRemappingDefinition* >         ControllerPresetsPS3;                             		// 0x05DC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UInputRemappingDefinition* >         ControllerPresetsXbox360;                         		// 0x05E8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              MinutesBetweenShopResets;                         		// 0x05F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ShopResetCost;                                    		// 0x05F8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      DefaultShieldColor;                               		// 0x0608 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClassDropChance[ 0x4 ];                           		// 0x060C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         CommonClassMods;                                  		// 0x061C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         UncommonClassMods;                                		// 0x0620 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         RareClassMods;                                    		// 0x0624 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         VeryRareClassMods;                                		// 0x0628 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         LegendaryClassMods;                               		// 0x062C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         SlayerOfTerramorphousClassMods;                   		// 0x0630 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         MissionAcceptDefinition;                          		// 0x0634 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         VoGMovieDefinition;                               		// 0x0638 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         PauseMenuDefinition;                              		// 0x063C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         TradingMovieDefinition;                           		// 0x0640 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         UBMGameOverMovieDefinition;                       		// 0x0644 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         BuddyPlaneDefinition;                             		// 0x0648 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         OnlineMessageMovieDefinition;                     		// 0x064C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         TextChatMovieDefinition;                          		// 0x0650 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         HUDScaleGuideMovieDefinition;                     		// 0x0654 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         LobbyMovieDefinition;                             		// 0x0658 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         LoadCharacterMovieDefinition;                     		// 0x065C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         ItemInspectionMovieDefinition;                    		// 0x0660 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         WeaponScopeMovieDefinition;                       		// 0x0664 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USwfMovie*                                   DLCCharacterIconSwfMovie;                         		// 0x0668 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPostProcessSettings                        PPOverride;                                       		// 0x066C (0x00E8) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                MissionCreditRewardFormula;                       		// 0x0754 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MissionReadyToTurnInAkEvent;                      		// 0x0764 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ActiveMissionChangedAkEvent;                      		// 0x0768 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MissionObjectiveCompleteAkEvent;                  		// 0x076C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MissionObjectiveIncrementedAkEvent;               		// 0x0770 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MissionObjectiveClearedAkEvent;                   		// 0x0774 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MissionTurnedInAkEvent;                           		// 0x0778 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    NewMissionAcceptedAkEvent;                        		// 0x077C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MissionAvailabilityTimer;                         		// 0x0780 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                LevelDifference_Impossible;                       		// 0x0784 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                LevelDifference_Hard;                             		// 0x0788 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                LevelDifference_Tough;                            		// 0x078C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                LevelDifference_Normal;                           		// 0x0790 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MissionGlowColorParameter;                        		// 0x0794 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionDefinition*                          FirstWeaponMission;                               		// 0x079C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponBalanceDefinition*                    DefaultWeapon;                                    		// 0x07A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             MissionDirectorParticleSystem;                    		// 0x07A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MissionDirectorParticleSocket;                    		// 0x07A8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MissionDirectorIconSelectParameterName;           		// 0x07B0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MissionDirectorEligibleMissionsParameter;         		// 0x07B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MissionDirectorRedeemableMissionsParameter;       		// 0x07BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MissionDirectorIconColorParameterName;            		// 0x07C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     MissionDirectorIconColor;                         		// 0x07C8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MissionDirectorIconSizeParameterName;             		// 0x07D4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     MissionDirectorIconSize;                          		// 0x07DC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupDirectorIconOffset;                         		// 0x07E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       FocusSocketName;                                  		// 0x07EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MissionPickupFailsafeSeconds;                     		// 0x07F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MissionPickupFailsafeZ;                           		// 0x07F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       WaypointSocketName;                               		// 0x07FC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxTimeBetweenSpreeKills;                         		// 0x0804 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              QuickshotTimer;                                   		// 0x0808 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PointBlankDistance;                               		// 0x080C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ShotgunLongshot;                                  		// 0x0810 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LauncherLongshot;                                 		// 0x0814 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PistolLongshot;                                   		// 0x0818 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumLevelUpKillStatThreshold;                      		// 0x081C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PctOfBleedoutToSecondWind;                        		// 0x0820 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMarketingUnlockDefinition* >        MarketingUnlocks;                                 		// 0x0824 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UHUDDefinition*                              HUDDefinition;                                    		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Use;                      		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Talk;                     		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Heal;                     		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Shop;                     		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Computer;                 		// 0x0844 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Smash;                    		// 0x0848 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_CannotUse;                		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_Driver;           		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_Gunner;           		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_MiddleLeft;       		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_MiddleRight;      		// 0x085C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_Flip;             		// 0x0860 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_Objective;                		// 0x0864 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_PickUp;                   		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_Default_CannotPickUp;             		// 0x086C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractionIcon_AlreadyDiscoveredObject;          		// 0x0870 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGenericReviveMessageDefinition*             KillReviveDefinition;                             		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AICloseThreatRadius;                              		// 0x0878 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AIMinAttackDistance;                              		// 0x087C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AIMinVertAttackDistance;                          		// 0x0880 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxDistanceForTrade;                              		// 0x0884 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultFOV;                                       		// 0x0888 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UnarmedFirstPersonFOV;                            		// 0x088C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     UnarmedPlayerViewOffset;                          		// 0x0890 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             OverchargedLightProjectileImpactTemplate;         		// 0x089C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             OverchargedProjectileTrailTemplate;               		// 0x08A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                DigistructInWeaponEffect;                         		// 0x08A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                DigistructOutWeaponEffect;                        		// 0x08A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFractalViewWanderingDefinition*             FractalWanderDef;                                 		// 0x08AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RespawnCameraDistanceNozzleOneAndTwo;             		// 0x08B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RespawnCameraOffsetZNozzleOneAndTwo;              		// 0x08B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RespawnCameraDistanceNozzleThreeAndFour;          		// 0x08B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RespawnCameraOffsetZNozzleThreeAndFour;           		// 0x08BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RespawnCameraLerpTime;                            		// 0x08C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RespawnCameraLookAtOffsetZ;                       		// 0x08C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RespawnDelayBeforeCoordinatedEffect;              		// 0x08C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    RespawnStartAkEvent;                              		// 0x08CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    RespawnStopAkEvent;                               		// 0x08D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    RespawnHeadZoomAkEvent;                           		// 0x08D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadCameraStartDistance;                   		// 0x08D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadCameraEndDistance;                     		// 0x08DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadCameraLerpTime;                        		// 0x08E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    InjuredDeadCameraRotation;                        		// 0x08E4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadDelayBetweenDeathAnimAndDigistruct;    		// 0x08F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadDelayBeforeDigistructKillVolume;       		// 0x08F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                DigistructCoordinatedEffect;                      		// 0x08F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                DigistructCoordinatedEffectKillVolume;            		// 0x08FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       InjuredDeadBoneName;                              		// 0x0900 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    InjuredDeadStartAkEvent;                          		// 0x0908 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    InjuredDeadStopAkEvent;                           		// 0x090C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                EnemyFadeoutEffect;                               		// 0x0910 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    CrushedAkEvent;                                   		// 0x0914 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BadassPointsPerRank;                              		// 0x0918 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BadassRanksForToken;                              		// 0x091C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBadassRewardDefinition* >           BadassRewards;                                    		// 0x092C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class USkillDefinition*                            BadassSkill;                                      		// 0x0938 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBlackMarketUpgradeDefinition* >     BlackMarketUpgrades;                              		// 0x093C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                BlackMarketCostMultiplier;                        		// 0x0948 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BlackMarketCostOffset;                            		// 0x0958 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeDefinition*                        DefaultBankSlots;                                 		// 0x0968 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DawnTime;                                         		// 0x096C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DuskTime;                                         		// 0x0970 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxDollars;                                       		// 0x0974 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxEridium;                                       		// 0x0978 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCurrencyListDefinition*                     Currencies;                                       		// 0x097C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                StandInTeleportEffect;                            		// 0x0980 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                StandInHideEffect;                                		// 0x0984 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                CustomizationApplicationStartEffect;              		// 0x0988 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                CustomizationApplicationEffectSkin;               		// 0x098C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                CustomizationApplicationEffectHead;               		// 0x0990 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPackageAssetLibrary*                        AssetLibraries[ 0x6 ];                            		// 0x0994 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	float                                              BinkMovieVolumeScaleFactor;                       		// 0x09AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3898 ];

		return pClassPointer;
	};

	struct FString eventGetDLCCharacterIconSwfMoviePath ( );
	class UMarketingUnlockDefinition* FindUnlockDefinitionForUnlockCode ( int UnlockCode );
	void ApplySpinToPickup ( class UMeshComponent* Mesh );
	bool ShouldUsePC360Buttons ( );
	bool GetStatusEffectTypeProperties ( unsigned char StatusEffectType, struct FStatusEffectTypeCommonProperties* out_Properties );
	float GetStatusEffectChanceBasedOnExpLevelDifferences ( int ExpLevelOfInstigator, int ExpLevelOfTarget );
	class UAttributePresentationDefinition* GetAttributePresentationForAttribute ( class UAttributeDefinition* Attribute, class UAttributePresentationListDefinition* OverrideList );
	unsigned char GetDropLifeSpanType ( int DropRarityLevel );
	int GetRarityLevelColorsIndexforLevel ( int Level );
	struct FColor GetRarityColorForRarityRating ( unsigned char Rating );
	struct FColor GetRarityColorForLevel ( int Level );
	unsigned char GetRarityForLevel ( int Level );
};

UClass* UGlobalsDefinition::pClassPointer = NULL;

// Class WillowGame.HitRegionHelper
// 0x000C (0x0048 - 0x003C)
class UHitRegionHelper : public UObject
{
public:
	TArray< struct FHitRegionDamage >                  HitRegionDamageList;                              		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3900 ];

		return pClassPointer;
	};

	void PlayHit ( class APawn* SomePawn, struct FVector HitLocation, class UClass* inDamageType, struct FVector Momentum, class UDamagePipeline* Pipeline, struct FTraceHitInfo* HitInfo );
	void ResetHitRegionHealth ( class AActor* Owner, class UBodyHitRegionDefinition* HitRegion );
	void HealDamageOnHitRegion ( class AActor* Owner, struct FBehaviorConsumerHandle ConsumerHandle, class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary );
	struct FName GetBoneNameFromHitComponent ( class UPrimitiveComponent* HitComponent, class USkeletalMeshComponent* Mesh );
	class UBodyHitRegionDefinition* GetHitRegionFromInstanceData ( class UPrimitiveComponent* HitComponent, struct FInstanceDataSet* InstanceState );
	class UBodyHitRegionDefinition* GetHitRegionFromBoneName ( struct FName BoneName, class UBodyHitRegionDefinition* DefaultRegion, TArray< class UBodyHitRegionDefinition* >* HitRegionList );
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage ( class AController* InstigatedBy, class USkeletalMeshComponent* Mesh, class UBodyHitRegionDefinition* DefaultHitRegion, struct FTraceHitInfo* HitInfo, struct FInstanceDataSet* InstanceDataState, TArray< class UBodyHitRegionDefinition* >* HitRegionList );
	void GetHealthValuesForOwner ( class AActor* Owner, float* Health, float* MaxHealth );
	void AddDamageToHitRegion ( class AActor* Owner, class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, float HitRegionHealthScale, struct FVector HitLocation, struct FVector HitMomentum, struct FBehaviorConsumerHandle* ConsumerHandle, struct FDamageEventSummary* DamageSummary );
	void RecordRecentDamageToHitRegion ( class UBodyHitRegionDefinition* HitRegion, float Damage );
	void PlayHealing ( class UIHitRegionConsumer* Owner, struct FBehaviorConsumerHandle ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int HealIndex, class AController* InstigatedBy );
	void PlayDamage ( class UIHitRegionConsumer* Owner, struct FBehaviorConsumerHandle ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int DamageIndex, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector HitMomentum, unsigned long bDead );
	void PlayReplicatedDamage ( class UIHitRegionConsumer* Owner, struct FBehaviorConsumerHandle ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int DamageIndices, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector HitMomentum );
	void GetHitRegionHealthValues ( class AActor* Owner, class UBodyHitRegionDefinition* HitRegion, float HitRegionHealthMultiplier, float* Health, float* MaxHealth );
};

UClass* UHitRegionHelper::pClassPointer = NULL;

// Class WillowGame.IAnimProvider
// 0x0000 (0x003C - 0x003C)
class UIAnimProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3902 ];

		return pClassPointer;
	};

	void GetAnims ( TArray< class UGearboxAnimDefinition* >* OutAnims );
};

UClass* UIAnimProvider::pClassPointer = NULL;

// Class WillowGame.IAttachableActor
// 0x0000 (0x003C - 0x003C)
class UIAttachableActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3904 ];

		return pClassPointer;
	};

	class AActor* GetAttachedToActor ( );
	struct FVector GetAttachmentNormal ( );
	void AttachToActor ( class AActor* ActorToAttachTo, struct FVector HitNormal, struct FVector HitLocation, struct FName BoneName );
	bool IsAttached ( );
};

UClass* UIAttachableActor::pClassPointer = NULL;

// Class WillowGame.IBodyPawn
// 0x0000 (0x003C - 0x003C)
class UIBodyPawn : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3906 ];

		return pClassPointer;
	};

	class AWillowAIPawn* GetAWillowAIPawn ( );
	class AWillowPlayerPawn* GetAWillowPlayerPawn ( );
	class AWillowPawn* GetAWillowPawn ( );
};

UClass* UIBodyPawn::pClassPointer = NULL;

// Class WillowGame.IControllerLocator
// 0x0000 (0x003C - 0x003C)
class UIControllerLocator : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3908 ];

		return pClassPointer;
	};

	class AWillowMind* GetAWillowMind ( );
	class AWillowPlayerController* GetAWillowPlayerController ( );
	class AController* GetABaseController ( );
};

UClass* UIControllerLocator::pClassPointer = NULL;

// Class WillowGame.ICustomizable
// 0x0000 (0x003C - 0x003C)
class UICustomizable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3910 ];

		return pClassPointer;
	};

	bool AllowFallbackToDefaultCustomizations ( );
	void RefreshCustomizationsOnInstanceData ( );
	struct FName GetCustomizableName ( );
	class UCustomizationDefinition* GetDesiredCustomizationOfType ( class UClass* Type );
	void CustomizationApplied ( class UCustomizationData* Data );
	void GetCustomizableInstanceDataSets ( TArray< struct FPointer >* OutData );
};

UClass* UICustomizable::pClassPointer = NULL;

// Class WillowGame.IDamageable
// 0x0000 (0x003C - 0x003C)
class UIDamageable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3912 ];

		return pClassPointer;
	};

	unsigned char GetDamageSurfaceTypeFromHit ( struct FTraceHitInfo* HitInfo );
	float GetIntrinsicArmor ( );
	bool ShieldAbsorbedAmmo ( class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb );
	void OnShieldDepleted ( class AController* DamageInstigator, unsigned char DamageType );
	void SetShieldStrength ( float ShieldValue );
	float GetMaxShieldStrength ( );
	float GetShieldStrength ( );
	void NotifyDamageTaken ( struct FDamageEventSummary* DamageSummary );
};

UClass* UIDamageable::pClassPointer = NULL;

// Class WillowGame.IDamageSurface
// 0x0000 (0x003C - 0x003C)
class UIDamageSurface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3914 ];

		return pClassPointer;
	};

	bool IsFullyArmored ( );
	unsigned char GetDamageSurfaceTypeFromHit ( struct FTraceHitInfo* HitInfo );
	unsigned char GetDefaultDamageSurfaceType ( );
};

UClass* UIDamageSurface::pClassPointer = NULL;

// Class WillowGame.IDesignerAttributeProvider
// 0x0000 (0x003C - 0x003C)
class UIDesignerAttributeProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3916 ];

		return pClassPointer;
	};

	bool HasDesignerAttribute ( struct FName DesignerAttributeName );
	class UInstancedDesignerAttribute* eventGetInstancedDesignerAttribute ( class UAttributeDefinition* Definition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
};

UClass* UIDesignerAttributeProvider::pClassPointer = NULL;

// Class WillowGame.IDlcLicensableObject
// 0x0000 (0x003C - 0x003C)
class UIDlcLicensableObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3918 ];

		return pClassPointer;
	};

	class UDownloadableContentDefinition* GetDownloadableContentDefinition ( );
};

UClass* UIDlcLicensableObject::pClassPointer = NULL;

// Class WillowGame.IDlcLicenseObject
// 0x0000 (0x003C - 0x003C)
class UIDlcLicenseObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3920 ];

		return pClassPointer;
	};

};

UClass* UIDlcLicenseObject::pClassPointer = NULL;

// Class WillowGame.IDrunkenProjectile
// 0x0000 (0x003C - 0x003C)
class UIDrunkenProjectile : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3922 ];

		return pClassPointer;
	};

	void SetDrunkenRandomNumberSeed ( int RandomNumberSeed );
};

UClass* UIDrunkenProjectile::pClassPointer = NULL;

// Class WillowGame.IDynamicObstacle
// 0x0000 (0x003C - 0x003C)
class UIDynamicObstacle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3924 ];

		return pClassPointer;
	};

	void GetObstacleInfo ( struct FObstacleData* Data );
	class AActor* GetObstacleActor ( );
	bool GetMagnetData ( struct FVector* MagnetLoc, struct FVector* MagnetVel );
	void SetObstacleVelocity ( struct FVector* NewVelocity );
	bool CanAvoidObstacle ( struct FObstacleData* Obstacle );
	bool CanAvoidObstacles ( );
	void SetObstacleActive ( unsigned long bActive );
	bool IsObstacleActive ( );
};

UClass* UIDynamicObstacle::pClassPointer = NULL;

// Class WillowGame.IExtraImpactEffects
// 0x0000 (0x003C - 0x003C)
class UIExtraImpactEffects : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3926 ];

		return pClassPointer;
	};

	void PlayExtraImpactEffects ( unsigned char BulletFromClip, struct FImpactInfo* InImpactInfo );
	void SetExtraImpactEffect ( unsigned char BulletFromClip, class UWillowImpactDefinition* Definition );
};

UClass* UIExtraImpactEffects::pClassPointer = NULL;

// Class WillowGame.IFocusable
// 0x0000 (0x003C - 0x003C)
class UIFocusable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3928 ];

		return pClassPointer;
	};

	struct FVector GetFocusScreenOffset ( );
	float GetFocusRadius ( );
	struct FVector GetFocusLocation ( );
	void EndFocus ( class APawn* User );
	void BeginFocus ( class APawn* User );
};

UClass* UIFocusable::pClassPointer = NULL;

// Class WillowGame.IGearLikenessConsumer
// 0x0000 (0x003C - 0x003C)
class UIGearLikenessConsumer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3930 ];

		return pClassPointer;
	};

	bool ShouldRefreshLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
	void AssumeLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
};

UClass* UIGearLikenessConsumer::pClassPointer = NULL;

// Class WillowGame.IHealable
// 0x0000 (0x003C - 0x003C)
class UIHealable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3932 ];

		return pClassPointer;
	};

	void RemoveAllStatusEffects ( );
	void FullyReplenishShields ( );
	void FullyReplenishLife ( );
};

UClass* UIHealable::pClassPointer = NULL;

// Class WillowGame.IHitRegionConsumer
// 0x0000 (0x003C - 0x003C)
class UIHitRegionConsumer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3934 ];

		return pClassPointer;
	};

	void PlayHit ( class APawn* SomePawn, struct FVector HitLocation, class UClass* inDamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void ResetHitRegionHealth ( class UBodyHitRegionDefinition* HitRegion );
	void HealDamageOnHitRegion ( class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary );
	void PlayHealingReaction ( struct FDamageReactionData* Data );
	void PlayDamageReaction ( struct FName HitBone, unsigned long bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum );
	void ReplicateDamageEffect ( class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, unsigned long bWasHeal );
	void AddDamageToHitRegion ( class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, struct FVector HitLocation, struct FVector HitMomentum, struct FDamageEventSummary* DamageSummary );
	void GetHitRegionHealthValues ( class UBodyHitRegionDefinition* HitRegion, float* Health, float* MaxHealth );
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage ( class AController* InstigatedBy, struct FTraceHitInfo HitInfo );
};

UClass* UIHitRegionConsumer::pClassPointer = NULL;

// Class WillowGame.IHitRegionInfoProvider
// 0x0000 (0x003C - 0x003C)
class UIHitRegionInfoProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3936 ];

		return pClassPointer;
	};

	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
};

UClass* UIHitRegionInfoProvider::pClassPointer = NULL;

// Class WillowGame.IStatusEffectTarget
// 0x0000 (0x003C - 0x003C)
class UIStatusEffectTarget : public UIHitRegionInfoProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3938 ];

		return pClassPointer;
	};

	bool CanReceiveStatusEffects ( );
	void ReactToPrimaryStatusEffect ( class UStatusEffectDefinition* StatusEffect );
	void Behavior_ClearStatusEffects ( unsigned long bKillImmediately );
	class UObject* GetAttributeContextSource ( );
	unsigned char GetDefaultDamageSurfaceType ( );
	float GetBoundingSphereRadius ( );
	void AttachEmitter ( class AEmitter* E, struct FName SocketName );
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate ( );
	TArray< struct FName > GetDefaultStatusEffectSockets ( );
	class UStatusEffectsComponent* GetStatusEffectsComponent ( );
};

UClass* UIStatusEffectTarget::pClassPointer = NULL;

// Class WillowGame.IItemCardable
// 0x0000 (0x003C - 0x003C)
class UIItemCardable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3940 ];

		return pClassPointer;
	};

	bool IsUsefulToThisPlayer ( class APlayerController* C );
	bool IsReadied ( );
	struct FString GetDLCRestrictedMessage ( class APlayerController* Other, unsigned long bShort );
	bool IsDLCRequirementMet ( class APlayerController* Other );
	bool IsLevelRequirementMet ( class AController* C, int* RequiredLevel );
	int GetMonetaryValue ( );
	unsigned char GetCurrencyTypeInventoryIsValuedIn ( );
	struct FString GetElementalFrame ( );
	struct FString GetZippyFrame ( );
	int GetRarityLevel ( );
	struct FString GetShortHumanReadableName ( );
	class UManufacturerDefinition* GetManufacturer ( );
	struct FString GenerateFunStatsText ( );
	void GetInventoryStatTextData ( TArray< struct FModifierValuePresentationData >* Stats );
	void GetInventoryStatNumberData ( class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray< struct FTopStatData >* Stats );
};

UClass* UIItemCardable::pClassPointer = NULL;

// Class WillowGame.ILevelChallengeObject
// 0x0000 (0x003C - 0x003C)
class UILevelChallengeObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3942 ];

		return pClassPointer;
	};

	void SetOverrideProgressNumber ( unsigned char ProgressNum );
	void SetOverrideAssociatedChallenge ( class UChallengeDefinition* ChalDef );
	unsigned char GetProgressNumber ( );
	class UChallengeDefinition* GetAssociatedChallenge ( );
};

UClass* UILevelChallengeObject::pClassPointer = NULL;

// Class WillowGame.ILootable
// 0x0000 (0x003C - 0x003C)
class UILootable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3944 ];

		return pClassPointer;
	};

	bool WillLootableBeResetOnLevelLoad ( );
	bool GetDroppedLoot ( TArray< struct FSpawnedDroppedLootData >* SpawnedLoot );
	bool GetAttachedLoot ( TArray< struct FSpawnedAttachedLootData >* SpawnedLoot );
};

UClass* UILootable::pClassPointer = NULL;

// Class WillowGame.IMapDisplayInfo
// 0x0000 (0x003C - 0x003C)
class UIMapDisplayInfo : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3946 ];

		return pClassPointer;
	};

	struct FString eventGetMapDisplayName ( );
	struct FString eventGetMapDisplayHeader ( );
};

UClass* UIMapDisplayInfo::pClassPointer = NULL;

// Class WillowGame.IMaterialFadeBehavior
// 0x0000 (0x003C - 0x003C)
class UIMaterialFadeBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3948 ];

		return pClassPointer;
	};

	void Behavior_UseMaterialScalarFadeForGoreDeath ( struct FName ScalarName, float StartValue, float EndValue, float FadeTime, unsigned long bDestroyActorAfterGoreEffect );
	void Behavior_MaterialScalarFade ( struct FName ScalarName, float StartValue, float EndValue, float FadeTime );
};

UClass* UIMaterialFadeBehavior::pClassPointer = NULL;

// Class WillowGame.IMeleeAttacker
// 0x0000 (0x003C - 0x003C)
class UIMeleeAttacker : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3950 ];

		return pClassPointer;
	};

	bool ShouldIgnoreInstigatorVelocity ( );
	void GetMeleeState ( float* StartTime, float* LastTime, struct FVector* StartLoc, struct FRotator* StartRot );
	bool HasActorAlreadyBeenHitByMelee ( class AActor* HitActor );
	void AddActorToListOfHitActors ( class AActor* HitActor );
	void EndMeleeOverTime ( );
	void BeginMeleeOverTime ( class UMeleeDefinition* MeleeDefinition );
	float GetMeleeAttackerMass ( );
	void GetMeleeTraceSourceLocationAndRotation ( struct FVector* OutTraceStart, struct FRotator* OutTraceStartRotation );
	class APawn* GetMeleeInstigator ( );
	class AActor* GetMeleeTraceSourceActor ( );
};

UClass* UIMeleeAttacker::pClassPointer = NULL;

// Class WillowGame.IMission
// 0x0000 (0x003C - 0x003C)
class UIMission : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3952 ];

		return pClassPointer;
	};

	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
};

UClass* UIMission::pClassPointer = NULL;

// Class WillowGame.IMissionDirector
// 0x0000 (0x003C - 0x003C)
class UIMissionDirector : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3954 ];

		return pClassPointer;
	};

	void OnPlayerClosedMissionUI ( class AWillowPlayerController* ThePlayer );
	void OnPlayerOpenedMissionUI ( class AWillowPlayerController* ThePlayer );
	bool HasAnyMissionsForPlayer ( );
	struct FVector GetMissionDirectorLocation ( );
	int GetAllDirectorData ( TArray< struct FMissionDirectorData >* OutData );
	void eventDeactivateMissionDirectorParticle ( );
	void eventSetMissionDirectorParticle ( );
	void eventMissionStatusChanged ( );
	void OnPlayerTurnedInMission ( class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn );
	void OnPlayerAcceptedMission ( class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted );
	int GetInProgressMissions ( TArray< class UMissionDefinition* >* InProgressMissions );
	int GetEligibleMissions ( TArray< class UMissionDefinition* >* EligibleMissions );
	int GetRedeemableMissions ( TArray< class UMissionDefinition* >* RedeemableMissions );
	void eventAddMissionDirective ( unsigned long bRegisterDirector, struct FMissionDirectorData* NewDirective );
};

UClass* UIMissionDirector::pClassPointer = NULL;

// Class WillowGame.IMissionInventory
// 0x0000 (0x003C - 0x003C)
class UIMissionInventory : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3956 ];

		return pClassPointer;
	};

};

UClass* UIMissionInventory::pClassPointer = NULL;

// Class WillowGame.IMissionObjective
// 0x0000 (0x003C - 0x003C)
class UIMissionObjective : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3958 ];

		return pClassPointer;
	};

	int eventGetObjectiveBit ( );
};

UClass* UIMissionObjective::pClassPointer = NULL;

// Class WillowGame.InjuredDefinition
// 0x0140 (0x017C - 0x003C)
class UInjuredDefinition : public UGBXDefinition
{
public:
	class UPawnInteractionDefinition*                  InjuredInteractionDefinition;                     		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeEffectData >              InjuredAttributeModifiers;                        		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      InjuredBonusEnabled : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDoBleedout : 1;                                  		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      SwitchToSidearmWhenInjured : 1;                   		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceCrouch : 1;                                 		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowSprinting : 1;                              		// 0x004C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOverrideInjuredDeadCamera : 1;                   		// 0x004C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      InjuredPreDeathRecoverRotation : 1;               		// 0x004C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      InjuredPreDeathRecoverOrbit : 1;                  		// 0x004C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	float                                              InjuredBonusDamageScale;                          		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                InjuredBonusTimePercent;                          		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseRejuvenateDelay;                              		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseMultiplePlayersRejuvenateDelay;               		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NoEnemiesDelayMultiplier;                         		// 0x0060 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	float                                              ReviveDuration;                                   		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AutoReviveCheckDelay;                             		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredViewDropCycleTime;                         		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredViewDropStrength;                          		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredMouseSensitivityMultiplier;                		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             InjuredScreenFadePartSys;                         		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 InjuredCameraAnim;                                		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    InjuredStartAkEvent;                              		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    InjuredStopAkEvent;                               		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     InjuredBehaviors;                                 		// 0x0088 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     TargetedBehaviors;                                		// 0x0094 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     AboutToDieBehaviors;                              		// 0x00A0 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     NoEnemyBehaviors;                                 		// 0x00AC (0x000C) [0x0000000004400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     DamageEnemyBehaviors;                             		// 0x00B8 (0x000C) [0x0000000004400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     DamageSelfBehaviors;                              		// 0x00C4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     KilledEnemyBehaviors;                             		// 0x00D0 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     RecoveredBehaviors;                               		// 0x00DC (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     ResurrectedBehaviors;                             		// 0x00E8 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     RevivedBehaviors;                                 		// 0x00F4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     PermadeathBehaviors;                              		// 0x0100 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	float                                              RejuvenatedHealthPctOfMax;                        		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RejuvenatedShieldPctOfMax;                        		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ResurrectedHealthPctOfMax;                        		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ResurrectedShieldPctOfMax;                        		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RevivedHealthPctOfMax;                            		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RevivedShieldPctOfMax;                            		// 0x0120 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxTimeBetweenInjuries;                           		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxDesiredSuccessiveInjuries;                     		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredMovementSpeed;                             		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       InjuredMovementAnimNodeName;                      		// 0x0130 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredWeaponPutDownTime;                         		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredWeaponEquipTime;                           		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimDefinition*                       InjuredSpecialMoveOverride;                       		// 0x0140 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimDefinition*                       InjuredPreDeathAnim;                              		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadCameraStartDistance;                   		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadCameraEndDistance;                     		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadCameraLerpTime;                        		// 0x0150 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    InjuredDeadCameraRotation;                        		// 0x0154 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadDelayBetweenDeathAnimAndDigistruct;    		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredDeadDelayBeforeDigistructKillVolume;       		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       InjuredDeadBoneName;                              		// 0x0168 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredPreDeathRecoveryTime;                      		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InjuredPreDeathRecoveryExponent;                  		// 0x0174 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimDefinition*                       InjuredPreDeathRecoveryAnim;                      		// 0x0178 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3960 ];

		return pClassPointer;
	};

};

UClass* UInjuredDefinition::pClassPointer = NULL;

// Class WillowGame.InputActionDefinition
// 0x0024 (0x0060 - 0x003C)
class UInputActionDefinition : public UGBXDefinition
{
public:
	TArray< class UBehaviorBase* >                     OnBegin;                                          		// 0x003C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnEnd;                                            		// 0x0048 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bAlwaysAvailable : 1;                             		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FName                                       ActionName;                                       		// 0x0058 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3962 ];

		return pClassPointer;
	};

};

UClass* UInputActionDefinition::pClassPointer = NULL;

// Class WillowGame.InputContextDefinition
// 0x0018 (0x0054 - 0x003C)
class UInputContextDefinition : public UGBXDefinition
{
public:
	TArray< class UInputActionDefinition* >            InputActions;                                     		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UInputSetDefinition* >               InputSets;                                        		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3964 ];

		return pClassPointer;
	};

	bool ContainsInputAction ( class UInputActionDefinition* Action );
};

UClass* UInputContextDefinition::pClassPointer = NULL;

// Class WillowGame.InputDeviceCollectionDefinition
// 0x0030 (0x006C - 0x003C)
class UInputDeviceCollectionDefinition : public UGBXDefinition
{
public:
	TArray< class UInputDeviceDefinition* >            XboxInputDevices;                                 		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UInputDeviceDefinition* >            PS3InputDevices;                                  		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UInputDeviceDefinition* >            PCInputDevices;                                   		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             PCKeyBindGroups;                                  		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3966 ];

		return pClassPointer;
	};

};

UClass* UInputDeviceCollectionDefinition::pClassPointer = NULL;

// Class WillowGame.InputDeviceDefinition
// 0x0020 (0x005C - 0x003C)
class UInputDeviceDefinition : public UGBXDefinition
{
public:
	TArray< struct FInputDeviceAxisData >              Axes;                                             		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FLookAxisDefinitionData                     LookAxisDefinitions;                              		// 0x0048 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FInputDeviceButtonData >            Buttons;                                          		// 0x0050 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3968 ];

		return pClassPointer;
	};

};

UClass* UInputDeviceDefinition::pClassPointer = NULL;

// Class WillowGame.InputRemappingDefinition
// 0x0030 (0x006C - 0x003C)
class UInputRemappingDefinition : public UGBXDefinition
{
public:
	struct FName                                       PresetTag;                                        		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     PresetCaption;                                    		// 0x0044 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShowInPresetMenu : 1;                            		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FInputRemappingAxisData >           RemappedAxes;                                     		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FInputRemappingButtonData >         RemappedButtons;                                  		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3970 ];

		return pClassPointer;
	};

};

UClass* UInputRemappingDefinition::pClassPointer = NULL;

// Class WillowGame.InputSetDefinition
// 0x000C (0x0048 - 0x003C)
class UInputSetDefinition : public UGBXDefinition
{
public:
	TArray< class UInputActionDefinition* >            InputActions;                                     		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3972 ];

		return pClassPointer;
	};

};

UClass* UInputSetDefinition::pClassPointer = NULL;

// Class WillowGame.InRangeOfInjuredPlayerExpressionEvaluator
// 0x0000 (0x003C - 0x003C)
class UInRangeOfInjuredPlayerExpressionEvaluator : public UExpressionEvaluator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3974 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UInRangeOfInjuredPlayerExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.InstancedDesignerAttribute
// 0x0058 (0x0094 - 0x003C)
class UInstancedDesignerAttribute : public UObject
{
public:
	class UDesignerAttributeDefinition*                Definition;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	struct FName                                       AttributeName;                                    		// 0x0040 (0x0008) [0x0000000000000000]              
	unsigned char                                      AttributeDataType;                                		// 0x0048 (0x0001) [0x0000000000000000]              
	float                                              Value;                                            		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ValueBaseValue;                                   		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ValueModifierStack;                               		// 0x0054 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                IntValue;                                         		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IntValueBaseValue;                                		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IntValueModifierStack;                            		// 0x0068 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                BoolValue;                                        		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BoolValueBaseValue;                               		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BoolValueModifierStack;                           		// 0x007C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DesignerAttributeDefinitionPathName;              		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3976 ];

		return pClassPointer;
	};

	void SetBaseValue ( struct FAttributeInitializationData InitializationData, class AActor* ContextSource );
	void InitializeByName ( struct FName InName, class AActor* ContextSource, unsigned char InAttributeDataType );
	void Initialize ( class UDesignerAttributeDefinition* InDefinition, class AActor* ContextSource );
};

UClass* UInstancedDesignerAttribute::pClassPointer = NULL;

// Class WillowGame.InteractionIconDefinition
// 0x001C (0x0058 - 0x003C)
class UInteractionIconDefinition : public UEngineInteractionIconDefinition
{
public:
	unsigned char                                      Icon;                                             		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Action;                                           		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Text;                                             		// 0x004C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3978 ];

		return pClassPointer;
	};

};

UClass* UInteractionIconDefinition::pClassPointer = NULL;

// Class WillowGame.InteractionProxy
// 0x0018 (0x01AC - 0x0194)
class AInteractionProxy : public ATrigger
{
public:
	struct FPointer                                    VfTable_IIUsable;                                 		// 0x0194 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UWillowPawnInteractionDefinition*            Definition;                                       		// 0x0198 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPassEventsToKismet : 1;                          		// 0x019C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCostsToUse : 1;                                  		// 0x019C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCostsToSecondaryUse : 1;                         		// 0x019C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSecondaryUsable : 1;                             		// 0x019C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      CostsToUseType;                                   		// 0x01A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CostsToSecondaryUseType;                          		// 0x01A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                CostsToUseAmount;                                 		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CostsToSecondaryUseAmount;                        		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3980 ];

		return pClassPointer;
	};

	void NotifyUserCouldNotAffordAttemptedUse ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	bool AllowTouchEvent ( class AActor* Other );
	bool UsedBy ( class APawn* User );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventBaseChange ( );
	void eventDestroyed ( );
	void Initialize ( class UPawnInteractionDefinition* InDefinition, class AActor* InInstigator );
	bool AllowUseEvent ( unsigned char UsabilityType );
	bool IsInteractionDebugEnabled ( );
	void ToggleInteractionDebug ( );
};

UClass* AInteractionProxy::pClassPointer = NULL;

// Class WillowGame.PawnInteractionProxy
// 0x0004 (0x01B0 - 0x01AC)
class APawnInteractionProxy : public AInteractionProxy
{
public:
	unsigned long                                      bDisableDuringTrade : 1;                          		// 0x01AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDisableDuringVehicleUse : 1;                     		// 0x01AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3982 ];

		return pClassPointer;
	};

	bool eventOutsideWorldBounds ( );
	bool AllowUseEvent ( unsigned char UsabilityType );
	bool AllowTouchEvent ( class AActor* Other );
	void Initialize ( class UPawnInteractionDefinition* InDefinition, class AActor* InInstigator );
};

UClass* APawnInteractionProxy::pClassPointer = NULL;

// Class WillowGame.InteractiveObjectBalanceDefinition
// 0x0058 (0x0094 - 0x003C)
class UInteractiveObjectBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UInteractiveObjectDefinition*                DefaultInteractiveObject;                         		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DefaultExpLevel;                                  		// 0x0044 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     DefaultDisplayName;                               		// 0x0054 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UPopulationSpawnedActorTagDefinition* > ActorTags;                                        		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UInteractiveObjectLootListDefinition* > DefaultIncludedLootLists;                         		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLootConfigurationData >            DefaultLoot;                                      		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UAttributeInitializationDefinition*          DefaultLootGameStageVarianceFormula;              		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FInteractiveObjectGameStageGradeWeightData > Grades;                                           		// 0x0088 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3984 ];

		return pClassPointer;
	};

	bool SetupInteractiveObjectLoot ( class AWillowInteractiveObject* SpawnedInteractiveObject, int GradeIndex );
	class UInteractiveObjectDefinition* GetInteractiveObjectDefinitionForGrade ( int GradeIndex );
	class UInteractiveObjectDefinition* GetInteractiveObjectDefinitionForGameStage ( int GameStage, int AwesomeLevel );
};

UClass* UInteractiveObjectBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.InteractiveObjectDefinition
// 0x0140 (0x017C - 0x003C)
class UInteractiveObjectDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyInfoProvider;                       		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;                  		// 0x0048 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FBodyCompositionData                        BodyComposition;                                  		// 0x004C (0x0014) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCreditDamageCausedByThisObjectToWhateverDamagedIt : 1;		// 0x0064 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanBeKilled : 1;                                 		// 0x0064 (0x0004) [0x0000000020000002] [0x00000002] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bIsKilledWhenHealthEqualsZero : 1;                		// 0x0064 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDestroyWhenKilled : 1;                           		// 0x0064 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanTakeDirectDamage : 1;                         		// 0x0064 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanTakeRadiusDamage : 1;                         		// 0x0064 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCollideAsEncroacher : 1;                         		// 0x0064 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsePlayerInteractionDistanceForTriggerRadius : 1;		// 0x0064 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bProjTarget : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUsableFromVehicle : 1;                           		// 0x0064 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bSecondaryUsableFromVehicle : 1;                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bAllowUsabilityPassThrough : 1;                   		// 0x0064 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsSoldierTurretShield : 1;                       		// 0x0064 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bAlwaysRelevant : 1;                              		// 0x0064 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsPossibleHomingTarget : 1;                      		// 0x0064 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bTargetableByAI : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      DoNotBlockWeaponFireFromFriendlies : 1;           		// 0x0064 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOwnerAllegiance : 1;                          		// 0x0064 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDoNotBlockPawns : 1;                             		// 0x0064 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDynamicLightEnvironment : 1;                     		// 0x0064 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastShadows : 1;                                 		// 0x0064 (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;              		// 0x0064 (0x0004) [0x0000000000000003] [0x00200000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDynamic : 1;                                     		// 0x0064 (0x0004) [0x0000000000000003] [0x00400000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x0064 (0x0004) [0x0000000000000003] [0x00800000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShadowFromEnvironment : 1;                       		// 0x0064 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                		// 0x0064 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MaxHealth;                                        		// 0x0068 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0078 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      CollisionType;                                    		// 0x007C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      HUDIcon;                                          		// 0x007D (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      CompassIcon;                                      		// 0x007E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TickGroup;                                        		// 0x007F (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RelevanceDistance;                                		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FInstanceDataSet                            InstanceData;                                     		// 0x0090 (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	class UInteractionIconDefinition*                  HUDIconDef;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  HUDIconDefSecondary;                              		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TriggerRadius;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TriggerHeight;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     StatusMenuMapInfoBoxHeader;                       		// 0x00AC (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StatusMenuMapInfoBoxDescription;                  		// 0x00B8 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              VehicleTriggerRadius;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             StatusEffectSockets;                              		// 0x00C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UParticleSystem*                             StatusEffectsParticleSystem;                      		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogNameTag*                       NameTag;                                          		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UGearboxDialogGroup* >               DialogGroups;                                     		// 0x00DC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      InteractiveObjectClass;                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetPriority;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthDisplayHack;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPawnAllegiance*                             Allegiance;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetableSocket;                                 		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetableOffset;                                 		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIAvoidRadius;                                    		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                bBlockOnTakeDamageWhenDamageEqualZero;            		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusRadius;                                      		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     FocusOffset;                                      		// 0x0118 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBodyHitRegionDefinition*                    DefaultHitRegionDefinition;                       		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBodyHitRegionDefinition* >          HitRegionDefinitions;                             		// 0x0128 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              LightingBoundsScale;                              		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutExponent;                         		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutTime;                             		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientGlow;                                      		// 0x0140 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x0150 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x015C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionStartDistance;            		// 0x016C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionEndDistance;              		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkelUpdate_ThrottleDistance;                      		// 0x0174 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Skelupdate_ThrottleTime;                          		// 0x0178 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3986 ];

		return pClassPointer;
	};

	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
	void OnAllPickupsDetached ( class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPickupDetached ( class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDispense ( class UObject* Recipient, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnClosing ( class UObject* PlayerClosing, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnMissionTurnedIn ( class UObject* PlayerTurningInMission, class UObject* MissionTurnedIn, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTimerEvent ( struct FName SpecializedEventName, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilled ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHealthDepleted ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTakeDamage ( class UObject* Instigator, float Damage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUserCouldNotAffordSecondary ( class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUserCouldNotAfford ( class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnSecondaryUsedBy ( class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUsedBy ( class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUnTouch ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTouch ( unsigned char EventOutput, class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnSpawn ( struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UInteractiveObjectDefinition::pClassPointer = NULL;

// Class WillowGame.VehicleSpawnStationPlatformDefinition
// 0x0010 (0x018C - 0x017C)
class UVehicleSpawnStationPlatformDefinition : public UInteractiveObjectDefinition
{
public:
	struct FName                                       VehicleRefSocket;                                 		// 0x017C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SpawnVehicleSocket;                               		// 0x0184 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3988 ];

		return pClassPointer;
	};

};

UClass* UVehicleSpawnStationPlatformDefinition::pClassPointer = NULL;

// Class WillowGame.WillowVendingMachineDefinition
// 0x0000 (0x017C - 0x017C)
class UWillowVendingMachineDefinition : public UInteractiveObjectDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3990 ];

		return pClassPointer;
	};

	void OnFeaturedItemSet ( class UObject* FeaturedItemPickup, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UWillowVendingMachineDefinition::pClassPointer = NULL;

// Class WillowGame.InteractiveObjectLootListDefinition
// 0x000C (0x0048 - 0x003C)
class UInteractiveObjectLootListDefinition : public UGBXDefinition
{
public:
	TArray< struct FLootConfigurationData >            LootData;                                         		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3992 ];

		return pClassPointer;
	};

};

UClass* UInteractiveObjectLootListDefinition::pClassPointer = NULL;

// Class WillowGame.InterpTrackBehaviors
// 0x0020 (0x0088 - 0x0068)
class UInterpTrackBehaviors : public UInterpTrack
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x006C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       LastAddedKeyFrameName;                            		// 0x0070 (0x0008) [0x0000000000000000]              
	TArray< struct FBehaviorKeyFrameEventData >        BehaviorEvents;                                   		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3994 ];

		return pClassPointer;
	};

	void BehaviorKeyFrameEvent ( struct FName SpecializedEventName, class AActor* GroupActor, struct FBehaviorConsumerHandle* InConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UInterpTrackBehaviors::pClassPointer = NULL;

// Class WillowGame.InterpTrackInstBehaviors
// 0x000C (0x0048 - 0x003C)
class UInterpTrackInstBehaviors : public UInterpTrackInst
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3996 ];

		return pClassPointer;
	};

	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
};

UClass* UInterpTrackInstBehaviors::pClassPointer = NULL;

// Class WillowGame.InventoryAttributeContextResolver
// 0x0008 (0x0044 - 0x003C)
class UInventoryAttributeContextResolver : public UAttributeContextResolver
{
public:
	class UWillowInventoryDefinition*                  InventoryDefinition;                              		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyConsiderEquippedItems : 1;                   		// 0x0040 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3998 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UInventoryAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.InventoryBalanceDefinition
// 0x0028 (0x0064 - 0x003C)
class UInventoryBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                    		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bInterpolateExpLevel : 1;                         		// 0x0040 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class UWillowInventoryDefinition*                  InventoryDefinition;                              		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInventoryBalanceDefinition*                 BaseDefinition;                                   		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FInventoryManufacturerBalanceData > Manufacturers;                                    		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UDownloadableItemSetDefinition*              DlcItemSet;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInventoryPartListCollectionDefinition*      PartListCollection;                               		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                    		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4000 ];

		return pClassPointer;
	};

	class UDownloadableContentDefinition* GetDownloadableContentDefinition ( );
	class UInventoryPartListCollectionDefinition* GetInventoryPartListCollection ( class UClass* PartListCollectionClass, class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex );
	class UWillowInventoryDefinition* GetInventoryDefinitionForManufacturerGrade ( class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex );
	class UWillowInventoryDefinition* HACKGetVehicleInventoryDefinition ( );
	int GetExpLevelFromManufacturerData ( class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex );
	class UPlayerClassIdentifierDefinition* GetRequiredPlayerClassId ( );
	class UWillowInventoryDefinition* GetInventoryDefinition ( );
};

UClass* UInventoryBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.ItemBalanceDefinition
// 0x0008 (0x006C - 0x0064)
class UItemBalanceDefinition : public UInventoryBalanceDefinition
{
public:
	class UItemPartListCollectionDefinition*           ItemPartListCollection;                           		// 0x0064 (0x0004) [0x000000000442000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UItemPartListCollectionDefinition*           RuntimePartListCollection;                        		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4002 ];

		return pClassPointer;
	};

};

UClass* UItemBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.ClassModBalanceDefinition
// 0x000C (0x0078 - 0x006C)
class UClassModBalanceDefinition : public UItemBalanceDefinition
{
public:
	TArray< class UClassModDefinition* >               ClassModDefinitions;                              		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4004 ];

		return pClassPointer;
	};

	void GetClassModDefSpawnedByBalanceDef ( TArray< class UClassModDefinition* >* OutClassModDefinitions );
	class UWillowInventoryDefinition* GetInventoryDefinitionForManufacturerGrade ( class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex );
};

UClass* UClassModBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponBalanceDefinition
// 0x0008 (0x006C - 0x0064)
class UWeaponBalanceDefinition : public UInventoryBalanceDefinition
{
public:
	class UWeaponPartListCollectionDefinition*         WeaponPartListCollection;                         		// 0x0064 (0x0004) [0x000000000442000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UWeaponPartListCollectionDefinition*         RuntimePartListCollection;                        		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4006 ];

		return pClassPointer;
	};

};

UClass* UWeaponBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.MissionWeaponBalanceDefinition
// 0x0004 (0x0070 - 0x006C)
class UMissionWeaponBalanceDefinition : public UWeaponBalanceDefinition
{
public:
	class UMissionObjectiveDefinition*                 MissionObjective;                                 		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4008 ];

		return pClassPointer;
	};

};

UClass* UMissionWeaponBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.InventoryCardGFx
// 0x0000 (0x003C - 0x003C)
class UInventoryCardGFx : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4010 ];

		return pClassPointer;
	};

	void UpdateCardPanel ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowInventory* MainThing, class AWillowInventory* OtherThing, class UGearboxRenderTextureManager* RTM, struct FString Path, struct FCellContentData* LeftCardInfo, struct FCellContentData* RightCardInfo );
	void SetMissionItemCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowMissionItem* Item );
	void SetItemCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowUsableItem* Item );
	void SetArtifactCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowArtifact* Artifact, class AWillowInventory* CompareAgainstArtifact );
	void SetClassModCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowClassMod* ClassMod, class AWillowInventory* CompareAgainstMod );
	void SetGrenadeModCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowGrenadeMod* GrenadeMod, class AWillowInventory* CompareAgainstMod );
	void SetShieldCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowShield* Shield, class AWillowInventory* CompareAgainstShield );
	void SetWeaponCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowWeapon* Weapon, class AWillowInventory* CompareAgainstWeapon );
	void SetInventoryCard ( class UWillowGFxMovie* Movie, int CardIndex, class AWillowInventory* Thing1, class AWillowInventory* Thing2 );
	void SetCardUIStats ( class UWillowGFxMovie* Movie, int CardIndex, TArray< struct FTopStatData >* TopStats );
};

UClass* UInventoryCardGFx::pClassPointer = NULL;

// Class WillowGame.InventoryPartListCollectionDefinition
// 0x0010 (0x004C - 0x003C)
class UInventoryPartListCollectionDefinition : public UGBXDefinition
{
public:
	unsigned char                                      PartReplacementMode;                              		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeInitializationData >      ConsolidatedAttributeInitData;                    		// 0x0040 (0x000C) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4012 ];

		return pClassPointer;
	};

};

UClass* UInventoryPartListCollectionDefinition::pClassPointer = NULL;

// Class WillowGame.ItemPartListCollectionDefinition
// 0x0094 (0x00E0 - 0x004C)
class UItemPartListCollectionDefinition : public UInventoryPartListCollectionDefinition
{
public:
	class UItemDefinition*                             AssociatedItem;                                   		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FItemCustomPartTypeData                     AlphaPartData;                                    		// 0x0050 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     BetaPartData;                                     		// 0x0060 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     GammaPartData;                                    		// 0x0070 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     DeltaPartData;                                    		// 0x0080 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     EpsilonPartData;                                  		// 0x0090 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     ZetaPartData;                                     		// 0x00A0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     EtaPartData;                                      		// 0x00B0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     ThetaPartData;                                    		// 0x00C0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FItemCustomPartTypeData                     MaterialPartData;                                 		// 0x00D0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4014 ];

		return pClassPointer;
	};

};

UClass* UItemPartListCollectionDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponPartListCollectionDefinition
// 0x0094 (0x00E0 - 0x004C)
class UWeaponPartListCollectionDefinition : public UInventoryPartListCollectionDefinition
{
public:
	class UWeaponTypeDefinition*                       AssociatedWeaponType;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FWeaponCustomPartTypeData                   BodyPartData;                                     		// 0x0050 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   GripPartData;                                     		// 0x0060 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   BarrelPartData;                                   		// 0x0070 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   SightPartData;                                    		// 0x0080 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   StockPartData;                                    		// 0x0090 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   ElementalPartData;                                		// 0x00A0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   Accessory1PartData;                               		// 0x00B0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   Accessory2PartData;                               		// 0x00C0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FWeaponCustomPartTypeData                   MaterialPartData;                                 		// 0x00D0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4016 ];

		return pClassPointer;
	};

};

UClass* UWeaponPartListCollectionDefinition::pClassPointer = NULL;

// Class WillowGame.IPlayerBehavior
// 0x0000 (0x003C - 0x003C)
class UIPlayerBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4018 ];

		return pClassPointer;
	};

	void Behavior_StopRevive ( );
	void Behavior_StartRevive ( );
	bool GetPlayerLoot ( int CustomGameStage, int CustomAwesomeLevel, struct FName CustomConfiguration, TArray< struct FSpawnedDroppedLootData >* SpawnedLoot );
	void Behavior_UnlockAchievementForAllPlayers ( int AchievementId, int MinimumPlayersRequired );
	void Behavior_DetachMeleeWeapon ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void Behavior_AttachMeleeWeapon ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void Behavior_UnlockAchievement ( int AchievementId );
	void Behavior_RegisterStation ( class ATravelStation* ActivatedStation, unsigned long bFromSave );
	void Behavior_SendMessageToPlayers ( unsigned long bShouldSendToInstigator, class UClass* SendMsgClass );
	void Behavior_CameraAnim ( class UCameraAnim* Anim );
	void Behavior_ViewShake ( struct FGearboxViewShakeInfo ShakeInfo );
	void Behavior_SpawnTeleporter ( class UPersonalTeleporterDefinition* Definition );
	void Behavior_ForceFeedback ( class UForceFeedbackWaveform* FFWaveform, unsigned long ForWeaponFiring );
	class AWillowProjectile* Behavior_SpawnCurrentProjectile ( class UProjectileDefinition* CurrentProjectile, unsigned long bLeftHand, unsigned long bConsumeResource, unsigned long bNoVelocity, unsigned long bSetProjectileToGrenadeMod );
	void Behavior_SetCurrentProjectile ( class UProjectileDefinition* CurrentProjectile );
	void Behavior_ThrowGrenade ( );
	void Behavior_Melee ( );
	void Behavior_Reload ( );
};

UClass* UIPlayerBehavior::pClassPointer = NULL;

// Class WillowGame.IPlayerMaster
// 0x0000 (0x003C - 0x003C)
class UIPlayerMaster : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4020 ];

		return pClassPointer;
	};

	class AWillowPlayerController* GetPlayerMasterPlayerController ( );
};

UClass* UIPlayerMaster::pClassPointer = NULL;

// Class WillowGame.IProjectileBehavior
// 0x0000 (0x003C - 0x003C)
class UIProjectileBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4022 ];

		return pClassPointer;
	};

	void Behavior_TagPayloadType ( unsigned char PayloadType );
	void Behavior_LevelOffTrajectory ( float ZHeight, float TurnSpeed );
	void Behavior_SetExplosionDefinition ( class UExplosionDefinition* MyExplosionDef );
	void Behavior_SetDamageTypeDefinition ( class UWillowDamageTypeDefinition* DamageTypeDef );
	void Behavior_SetStickyGrenade ( );
	void SetSpeed ( float NewSpeed );
	void SetProximity ( float ProximityRadius, float ProximityHeight );
	bool IsLevelingNow ( );
	void SetHomingRotationOffset ( struct FRotator RotationOffset );
	struct FVector GetHomingTargetLocation ( );
	unsigned char GetHomingTargetByType ( );
	void SetHomingTarget ( class AActor* NewTarget, int NewTargetComponentIndex );
	void FindHomingTarget ( unsigned char TargetType, float TargetSearchRange, float TargetSearchFOVAngle, unsigned long bNotInstigator, unsigned long bIgnoreFOVZTest, unsigned long bBestForwardTarget, unsigned long bRetryIfTargetNotFound, unsigned long bUniqueTarget );
	void Detonate ( );
	bool SetVelocity ( struct FVector ProjectileVelocity );
	bool GetVelocity ( struct FVector* ProjectileVelocity );
};

UClass* UIProjectileBehavior::pClassPointer = NULL;

// Class WillowGame.IProjectileReflector
// 0x0000 (0x003C - 0x003C)
class UIProjectileReflector : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4024 ];

		return pClassPointer;
	};

	float GetBulletReflectedOffSelfDamageScale ( );
	float GetBulletReflectedOffEnemyDamageScale ( );
	float GetBulletReflectedOffSelfDamageTakenScale ( );
	float GetEnemyReflectionChance ( );
	float GetSelfReflectionChance ( );
};

UClass* UIProjectileReflector::pClassPointer = NULL;

// Class WillowGame.IProtectionTimer
// 0x0000 (0x003C - 0x003C)
class UIProtectionTimer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4026 ];

		return pClassPointer;
	};

	float GetMinimumHealthMaintainedByProtectionTimer ( );
	void EnableProtectionTimer ( );
	bool IsProtectionTimerActive ( );
};

UClass* UIProtectionTimer::pClassPointer = NULL;

// Class WillowGame.IResourcePoolOwner
// 0x0000 (0x003C - 0x003C)
class UIResourcePoolOwner : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4028 ];

		return pClassPointer;
	};

	bool CanSetResourcePoolValues ( class UClass* ResourcePoolClass );
};

UClass* UIResourcePoolOwner::pClassPointer = NULL;

// Class WillowGame.IScreenParticle
// 0x0000 (0x003C - 0x003C)
class UIScreenParticle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4030 ];

		return pClassPointer;
	};

	void UpdateVisibilityOfAllActiveScreenParticles ( );
	bool ScreenParticlesShouldBeVisible ( );
	void SetUpVoGScreenParticle ( class UParticleSystem* Template, struct FName TextureMovieParamName );
	void HideScreenParticle ( class UParticleSystem* Template, struct FName ParticleTag, unsigned long bAllowParticleToFinish );
	void ShowScreenParticle ( struct FScreenParticleInitParams InitParams );
};

UClass* UIScreenParticle::pClassPointer = NULL;

// Class WillowGame.ISeeTargetable
// 0x0000 (0x003C - 0x003C)
class UISeeTargetable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4032 ];

		return pClassPointer;
	};

	struct FVector GetViewLocation ( );
	class AActor* GetWorldBody ( );
	bool AddTargetable ( class AActor* NewTarget, unsigned long bSeeTarget, unsigned long bHearThreat, unsigned long bSmellTarget );
};

UClass* UISeeTargetable::pClassPointer = NULL;

// Class WillowGame.IShop
// 0x0000 (0x003C - 0x003C)
class UIShop : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4034 ];

		return pClassPointer;
	};

	int GetSellingPriceForInventory ( class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity );
	unsigned char GetCurrencyTypeInventoryIsSoldIn ( class AWillowInventory* InventoryForSale );
	bool PlayerBuyBackItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC );
	void PlayerBuyItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, unsigned long bWasItemOfTheDay );
	void PlayerSellItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity );
	struct FShopItemData GetFeaturedItem ( class AWillowPlayerController* WPC );
	void GetBuyBackList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* BuyBackItems );
	void GetInventoryList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* InventoryList );
	unsigned char GetShopType ( );
	void GetWeaponList ( class AWillowPlayerController* WPC, TArray< class AWillowWeapon* >* WeaponList );
	void GetItemList ( class AWillowPlayerController* WPC, TArray< class AWillowItem* >* ItemList );
	void RemoveSoldInventory ( class AWillowInventory* SoldItem );
	int GetResetCost ( );
	void eventResetInventory ( );
};

UClass* UIShop::pClassPointer = NULL;

// Class WillowGame.ISimpleAnimPlayer
// 0x0000 (0x003C - 0x003C)
class UISimpleAnimPlayer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4036 ];

		return pClassPointer;
	};

};

UClass* UISimpleAnimPlayer::pClassPointer = NULL;

// Class WillowGame.ISkillTreeListener
// 0x0000 (0x003C - 0x003C)
class UISkillTreeListener : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4038 ];

		return pClassPointer;
	};

	void HandleSkillTreeReset ( int SkillPointsReturned );
};

UClass* UISkillTreeListener::pClassPointer = NULL;

// Class WillowGame.ItemDefinition
// 0x00BC (0x023C - 0x0180)
class UItemDefinition : public UWillowInventoryDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0180 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x0184 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UWillowImpactDefinition*                     DroppedImpact;                                    		// 0x0188 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     UseFailureCharacterMessage;                       		// 0x018C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemName;                                         		// 0x0198 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bItemNameIsFullName : 1;                          		// 0x01A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseMeshCompositing : 1;                          		// 0x01A4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	TArray< class UItemNamePartDefinition* >           TitleList;                                        		// 0x01A8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UItemNamePartDefinition* >           PrefixList;                                       		// 0x01B4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UStaticMesh*                                 NonCompositeStaticMesh;                           		// 0x01C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkeletalMesh*                               NonCompositeSkeletalMesh;                         		// 0x01C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInterface*                          OverrideMaterial;                                 		// 0x01C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGestaltSkeletalMeshDefinition*              GestaltMesh;                                      		// 0x01CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     AlphaParts;                                       		// 0x01D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     BetaParts;                                        		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     GammaParts;                                       		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     DeltaParts;                                       		// 0x01DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     EpsilonParts;                                     		// 0x01E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     ZetaParts;                                        		// 0x01E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     EtaParts;                                         		// 0x01E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     ThetaParts;                                       		// 0x01EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPartListDefinition*                     MaterialParts;                                    		// 0x01F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x01F4 (0x0004) [0x0000000000000000]              
	struct FItemBehaviorSet                            Behaviors;                                        		// 0x01F8 (0x000C) [0x0000000020420000]              ( CPF_EditConst | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FAttributeEffectData >              ExternalAttributeEffects;                         		// 0x0204 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              ItemAttributeEffects;                             		// 0x0210 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributePriorityData >            ItemCardAttributes;                               		// 0x021C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UAttributePresentationDefinition* >  CustomPresentations;                              		// 0x0228 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UPlayerClassIdentifierDefinition*            RequiredPlayerClass;                              		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInteractionIconDefinition*                  PickupIconOverride;                               		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4040 ];

		return pClassPointer;
	};

	bool DisplayTitleAtEnd ( );
	class UManufacturerDefinition* GetManufacturerOverrideOrDefault ( class UManufacturerDefinition* DefaultManufacturer );
	unsigned char eventGetEquipmentLocation ( );
	bool PlayerClassRequirementMet ( class AWillowPlayerController* WillowPC );
	class UPlayerClassIdentifierDefinition* GetRequiredPlayerClass ( );
	void OnPickupDisassociated ( class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPickupAssociated ( class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnCreate ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UItemDefinition::pClassPointer = NULL;

// Class WillowGame.EquipableItemDefinition
// 0x001C (0x0258 - 0x023C)
class UEquipableItemDefinition : public UItemDefinition
{
public:
	unsigned char                                      DamageTypeIcon;                                   		// 0x023C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FConditionalSoundData >             EquipSounds;                                      		// 0x0240 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             UnequipSounds;                                    		// 0x024C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4042 ];

		return pClassPointer;
	};

	void OnUnequipped ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnEquipped ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UEquipableItemDefinition::pClassPointer = NULL;

// Class WillowGame.ArtifactDefinition
// 0x0000 (0x0258 - 0x0258)
class UArtifactDefinition : public UEquipableItemDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4044 ];

		return pClassPointer;
	};

	unsigned char GetEquipmentLocation ( );
};

UClass* UArtifactDefinition::pClassPointer = NULL;

// Class WillowGame.ClassModDefinition
// 0x0008 (0x0260 - 0x0258)
class UClassModDefinition : public UEquipableItemDefinition
{
public:
	class UManufacturerDefinition*                     ManufacturerOverride;                             		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                DisplayClassModAtBeginningOfName;                 		// 0x025C (0x0004) [0x0000000000008002]              ( CPF_Const | CPF_Localized )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4046 ];

		return pClassPointer;
	};

	bool DisplayTitleAtEnd ( );
	class UManufacturerDefinition* GetManufacturerOverrideOrDefault ( class UManufacturerDefinition* DefaultManufacturer );
	unsigned char GetEquipmentLocation ( );
	bool PlayerClassRequirementMet ( class AWillowPlayerController* WillowPC );
};

UClass* UClassModDefinition::pClassPointer = NULL;

// Class WillowGame.CrossDLCClassModDefinition
// 0x0034 (0x0294 - 0x0260)
class UCrossDLCClassModDefinition : public UClassModDefinition
{
public:
	struct FNameBasedObjectPath                        RequiredPlayerClassPathName;                      		// 0x0260 (0x0034) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4048 ];

		return pClassPointer;
	};

};

UClass* UCrossDLCClassModDefinition::pClassPointer = NULL;

// Class WillowGame.GrenadeModDefinition
// 0x001C (0x0274 - 0x0258)
class UGrenadeModDefinition : public UEquipableItemDefinition
{
public:
	class UProjectileDefinition*                       DefaultProjectileDefinition;                      		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           ProjectileBaseValues;                             		// 0x025C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGrenadeModBehaviorSequenceStateData > SetProjectileSequenceState;                       		// 0x0268 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4050 ];

		return pClassPointer;
	};

	unsigned char GetEquipmentLocation ( );
	void OnGrenadeKilledEnemy ( class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeKilledNeutral ( class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeDamagedNeutral ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeDamagedFriendly ( class UObject* DamageTaker, float DamageAmount, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeDamagedEnemy ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeExploded ( class UObject* Grenade, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeSpawned ( class UObject* SpawnedProjectile, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UGrenadeModDefinition::pClassPointer = NULL;

// Class WillowGame.ShieldDefinition
// 0x0020 (0x0278 - 0x0258)
class UShieldDefinition : public UEquipableItemDefinition
{
public:
	unsigned char                                      ShieldType;                                       		// 0x0258 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ShieldPrimeMechanism;                             		// 0x0259 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     ShieldTypeFlashFrameName;                         		// 0x025C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     PrimedFlashFrameName;                             		// 0x0268 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UPhysicalMaterial*                           ShieldPhysicalMaterial;                           		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4052 ];

		return pClassPointer;
	};

	unsigned char GetEquipmentLocation ( );
	void OnDamageResistanceTypeChanged ( class UObject* ShieldOwner, class UWillowDamageTypeDefinition* NewDamageResistanceType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnEffectTriggered ( class UObject* ShieldOwner, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldNowRegenerating ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldNowDepletedAfterBeingFull ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldNowDepleted ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldNowFull ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldPrimed ( class UObject* ShieldOwner, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnAmmoAbsorbed ( class UObject* ShieldOwner, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UShieldDefinition::pClassPointer = NULL;

// Class WillowGame.UsableItemDefinition
// 0x000C (0x0248 - 0x023C)
class UUsableItemDefinition : public UItemDefinition
{
public:
	unsigned long                                      bPlayerUseItemOnPickup : 1;                       		// 0x023C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAIUseItemOnPickup : 1;                           		// 0x023C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCoopRange : 1;                                		// 0x023C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	struct FName                                       UsedStatId;                                       		// 0x0240 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4054 ];

		return pClassPointer;
	};

	void OnUsed ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UUsableItemDefinition::pClassPointer = NULL;

// Class WillowGame.MissionItemDefinition
// 0x0010 (0x0258 - 0x0248)
class UMissionItemDefinition : public UUsableItemDefinition
{
public:
	unsigned long                                      bAlwaysDropMissionPickup : 1;                     		// 0x0248 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateMissionObjectiveWhenUsed : 1;              		// 0x0248 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMissionWaypoint : 1;                             		// 0x0248 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUniqueMissionDirector : 1;                       		// 0x0248 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	class UMissionObjectiveDefinition*                 AssociatedMissionObjective;                       		// 0x024C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionDefinition*                          MissionDirective;                                 		// 0x0250 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         DirectiveMovieDefinition;                         		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4056 ];

		return pClassPointer;
	};

	bool CanPickupInBulk ( );
	bool ShouldPlayerAutomaticallyPickup ( class APlayerController* PC );
};

UClass* UMissionItemDefinition::pClassPointer = NULL;

// Class WillowGame.UsableCustomizationItemDefinition
// 0x0044 (0x028C - 0x0248)
class UUsableCustomizationItemDefinition : public UUsableItemDefinition
{
public:
	class UKeyedItemPoolDefinition*                    OverridePool;                                     		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCustomizationDefinition*                    CustomizationDef;                                 		// 0x024C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FLinearColor                                PrimaryColor;                                     		// 0x0250 (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FLinearColor                                SecondaryColor;                                   		// 0x0260 (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FLinearColor                                TertiaryColor;                                    		// 0x0270 (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ItemCardTopStatString;                            		// 0x0280 (0x000C) [0x0000000000428003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4058 ];

		return pClassPointer;
	};

	class UCustomizationDefinition* GetCustomizationDefinitionToUnlock ( class AWillowPlayerController* WPC );
};

UClass* UUsableCustomizationItemDefinition::pClassPointer = NULL;

// Class WillowGame.ItemPartDefinition
// 0x0054 (0x00EC - 0x0098)
class UItemPartDefinition : public UWillowInventoryPartDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0098 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      PartType;                                         		// 0x009C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UItemNamePartDefinition* >           TitleList;                                        		// 0x00A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UItemNamePartDefinition* >           PrefixList;                                       		// 0x00AC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x00B8 (0x0004) [0x0000000000000000]              
	TArray< struct FAttributeEffectData >              ExternalAttributeEffects;                         		// 0x00BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              ItemAttributeEffects;                             		// 0x00C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributePriorityData >            ItemCardAttributes;                               		// 0x00D4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UAttributePresentationDefinition* >  CustomPresentations;                              		// 0x00E0 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4060 ];

		return pClassPointer;
	};

	void OnPickupDisassociated ( class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPickupAssociated ( class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnCreate ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UItemPartDefinition::pClassPointer = NULL;

// Class WillowGame.EquipableItemPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UEquipableItemPartDefinition : public UItemPartDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4062 ];

		return pClassPointer;
	};

	void OnUnequipped ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnEquipped ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UEquipableItemPartDefinition::pClassPointer = NULL;

// Class WillowGame.ArtifactPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UArtifactPartDefinition : public UEquipableItemPartDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4064 ];

		return pClassPointer;
	};

};

UClass* UArtifactPartDefinition::pClassPointer = NULL;

// Class WillowGame.ClassModPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UClassModPartDefinition : public UEquipableItemPartDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4066 ];

		return pClassPointer;
	};

};

UClass* UClassModPartDefinition::pClassPointer = NULL;

// Class WillowGame.GrenadeModPartDefinition
// 0x0030 (0x011C - 0x00EC)
class UGrenadeModPartDefinition : public UEquipableItemPartDefinition
{
public:
	class UProjectileDefinition*                       CustomProjectileDefinition;                       		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FGrenadeModPartBehaviorSequenceStateData > SetProjectileSequenceState;                       		// 0x00F0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     FlashIconPartName;                                		// 0x00FC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FLinearColor                                FlashIconPartTint;                                		// 0x0108 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAICanUse : 1;                                    		// 0x0118 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4068 ];

		return pClassPointer;
	};

	void OnGrenadeKilledEnemy ( class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeKilledNeutral ( class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeDamagedNeutral ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeDamagedFriendly ( class UObject* DamageTaker, float DamageAmount, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeDamagedEnemy ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeExploded ( class UObject* Grenade, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnGrenadeSpawned ( class UObject* SpawnedProjectile, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UGrenadeModPartDefinition::pClassPointer = NULL;

// Class WillowGame.ShieldPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UShieldPartDefinition : public UEquipableItemPartDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4070 ];

		return pClassPointer;
	};

};

UClass* UShieldPartDefinition::pClassPointer = NULL;

// Class WillowGame.ItemNamePartDefinition
// 0x0028 (0x0114 - 0x00EC)
class UItemNamePartDefinition : public UItemPartDefinition
{
public:
	unsigned long                                      bNameIsUnique : 1;                                		// 0x00EC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FString                                     PartName;                                         		// 0x00F0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FAttributeExpressionData >          Expressions;                                      		// 0x00FC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                MinExpLevelRequirement;                           		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxExpLevelRequirement;                           		// 0x010C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Priority;                                         		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4072 ];

		return pClassPointer;
	};

};

UClass* UItemNamePartDefinition::pClassPointer = NULL;

// Class WillowGame.UsableItemPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UUsableItemPartDefinition : public UItemPartDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4074 ];

		return pClassPointer;
	};

	void OnUsed ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UUsableItemPartDefinition::pClassPointer = NULL;

// Class WillowGame.MissionItemPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UMissionItemPartDefinition : public UUsableItemPartDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4076 ];

		return pClassPointer;
	};

};

UClass* UMissionItemPartDefinition::pClassPointer = NULL;

// Class WillowGame.ItemPartListDefinition
// 0x001C (0x0058 - 0x003C)
class UItemPartListDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FItemPartGradeWeightData >          WeightedParts;                                    		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeInitializationData >      ConsolidatedAttributeInitData;                    		// 0x004C (0x000C) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4078 ];

		return pClassPointer;
	};

};

UClass* UItemPartListDefinition::pClassPointer = NULL;

// Class WillowGame.ItemPool
// 0x0000 (0x003C - 0x003C)
class UItemPool : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4080 ];

		return pClassPointer;
	};

	bool IsAllItemTypesDebugEnabled ( );
	void ToggleAllItemTypesDebug ( );
	bool SpawnBalancedInventoryFromInventoryBalanceDefinition ( class UInventoryBalanceDefinition* InvBalanceDefinition, int Quantity, int GameStage, int AwesomeLevel, class UObject* ContextSource, TArray< class AWillowInventory* >* SpawnedInventory );
	bool SpawnBalancedInventoryFromPool ( class UItemPoolDefinition* Definition, int GameStage, int AwesomeLevel, class UObject* ContextSource, class UAttributeInitializationDefinition* GameStageVarianceFormula, float OuterPoolChance, unsigned long bInventoryMayDropOnDeath, TArray< class AWillowInventory* >* SpawnedInventory );
};

UClass* UItemPool::pClassPointer = NULL;

// Class WillowGame.ItemPoolDefinition
// 0x0038 (0x0074 - 0x003C)
class UItemPoolDefinition : public UGBXDefinition
{
public:
	struct FAttributeInitializationData                CheatSpawnLevel;                                  		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisablePhysicsDrop : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoReadyItems : 1;                              		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupportsGameStageVariance : 1;                   		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShopsHaveInfiniteQuantity : 1;                   		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEligibleForUncommonWeightMultiplier : 1;         		// 0x004C (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	TArray< struct FBalancedInventoryData >            BalancedItems;                                    		// 0x0050 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                Quantity;                                         		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeDefinition*                        MinGameStageRequirement;                          		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeDefinition*                        MaxGameStageRequirement;                          		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4082 ];

		return pClassPointer;
	};

};

UClass* UItemPoolDefinition::pClassPointer = NULL;

// Class WillowGame.CrossDLCItemPoolDefinition
// 0x000C (0x0080 - 0x0074)
class UCrossDLCItemPoolDefinition : public UItemPoolDefinition
{
public:
	TArray< struct FBalancedInventoryDataMirror >      BalancedItemsMirror;                              		// 0x0074 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4084 ];

		return pClassPointer;
	};

};

UClass* UCrossDLCItemPoolDefinition::pClassPointer = NULL;

// Class WillowGame.KeyedItemPoolDefinition
// 0x0004 (0x0078 - 0x0074)
class UKeyedItemPoolDefinition : public UItemPoolDefinition
{
public:
	int                                                Key;                                              		// 0x0074 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4086 ];

		return pClassPointer;
	};

};

UClass* UKeyedItemPoolDefinition::pClassPointer = NULL;

// Class WillowGame.ItemPoolListDefinition
// 0x0018 (0x0054 - 0x003C)
class UItemPoolListDefinition : public UGBXDefinition
{
public:
	TArray< class UItemPoolListDefinition* >           ItemPoolIncludedLists;                            		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FItemPoolInfo >                     ItemPools;                                        		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4088 ];

		return pClassPointer;
	};

	void AddToItemPoolList ( TArray< struct FItemPoolInfo >* Out_ItemPoolList );
};

UClass* UItemPoolListDefinition::pClassPointer = NULL;

// Class WillowGame.IUpdatePostProcessOverride
// 0x0000 (0x003C - 0x003C)
class UIUpdatePostProcessOverride : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4090 ];

		return pClassPointer;
	};

	void EndLostShield ( );
	void BeginLostShield ( struct FName HealthParamName, struct FName MaterialEffectName, float UpdateRate, class UPostProcessChain* InChain );
	void PopPostProcessChain ( class UPostProcessChain* InChain, struct FPostProcessChainOptions InChainOptions );
	void PushPostProcessChain ( class UPostProcessChain* InChain, struct FPostProcessChainOptions InChainOptions );
	void ClearPostProcessOverlayQueue ( int IndexToSave );
	void SetupPostProcessOverlay ( int Index, unsigned long bReset );
	int GetPostProcessOverlayIndex ( struct FName OverrideName );
	int AddPostProcessOverlay ( struct FPostProcessOverlay NewPostProcessOverlay );
};

UClass* UIUpdatePostProcessOverride::pClassPointer = NULL;

// Class WillowGame.IUsable
// 0x0000 (0x003C - 0x003C)
class UIUsable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4092 ];

		return pClassPointer;
	};

	void NotifyUserCouldNotAffordAttemptedUse ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
};

UClass* UIUsable::pClassPointer = NULL;

// Class WillowGame.IWeaponThrow
// 0x0000 (0x003C - 0x003C)
class UIWeaponThrow : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4094 ];

		return pClassPointer;
	};

	void Behavior_WeaponThrow ( );
};

UClass* UIWeaponThrow::pClassPointer = NULL;

// Class WillowGame.IWeatherBehavior
// 0x0000 (0x003C - 0x003C)
class UIWeatherBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4096 ];

		return pClassPointer;
	};

	void DestroyWeatherSystem ( );
	void CreateWeatherSystem ( class UParticleSystem* WeatherSystemTemplate, class UParticleSystem* NewScreenEffectsTemplate );
};

UClass* UIWeatherBehavior::pClassPointer = NULL;

// Class WillowGame.LcdHelper
// 0x0004 (0x0040 - 0x003C)
class ULcdHelper : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4098 ];

		return pClassPointer;
	};

	bool IsLcdScreenConnected ( );
	void UpdateAvailableTokens ( int Amount );
	void UpdateCurrency ( unsigned char Type, int Amount );
	struct FString GetPendingInvite ( );
	void UpdateFriendData ( struct FString FriendData );
	void UpdateChallengeData ( struct FString ChallengeData );
	void UpdateMissionData ( struct FString MissionData );
	void SetLevel ( int Level );
	void SetLevelProgress ( float Percent, int Curr, int Needed );
	void NotifyLoading ( unsigned long bLoading );
};

UClass* ULcdHelper::pClassPointer = NULL;

// Class WillowGame.LevelDependencyList
// 0x0021 (0x005D - 0x003C)
class ULevelDependencyList : public UGBXDefinition
{
public:
	struct FName                                       LoaderMap;                                        		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPersistentMapDependencies >        LevelList;                                        		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       LevelWorldDiscoveryStatID;                        		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TotalNumWorldDiscoveryAreas;                      		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AllAreasDiscoveredAchievement;                    		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4100 ];

		return pClassPointer;
	};

	struct FString GetFriendlyLevelNameFromMapName ( struct FName PersistentMapName );
};

UClass* ULevelDependencyList::pClassPointer = NULL;

// Class WillowGame.LevelLandmarkAnchor
// 0x0020 (0x01C0 - 0x01A0)
class ALevelLandmarkAnchor : public ALevelLandmark
{
public:
	class UTexture2D*                                  Texture;                                          		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Opacity;                                          		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureSizeX;                                     		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TextureSizeY;                                     		// 0x01AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     MapFrame;                                         		// 0x01B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               DLCMap;                                           		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4102 ];

		return pClassPointer;
	};

};

UClass* ALevelLandmarkAnchor::pClassPointer = NULL;

// Class WillowGame.LevelLandmarkAnchorRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class ULevelLandmarkAnchorRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4104 ];

		return pClassPointer;
	};

};

UClass* ULevelLandmarkAnchorRenderingComponent::pClassPointer = NULL;

// Class WillowGame.LevelNameAttributeValueResolver
// 0x0028 (0x0064 - 0x003C)
class ULevelNameAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ValueIfMatched;                                   		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LevelName;                                        		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4106 ];

		return pClassPointer;
	};

};

UClass* ULevelNameAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.LocalizedStringDefinition
// 0x000C (0x0048 - 0x003C)
class ULocalizedStringDefinition : public UGBXDefinition
{
public:
	struct FString                                     Text;                                             		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4108 ];

		return pClassPointer;
	};

};

UClass* ULocalizedStringDefinition::pClassPointer = NULL;

// Class WillowGame.LockoutDefinition
// 0x0014 (0x0050 - 0x003C)
class ULockoutDefinition : public UGBXDefinition
{
public:
	unsigned char                                      Style;                                            		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                Days;                                             		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Hours;                                            		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Minutes;                                          		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDownloadableExpansionDefinition*            DlcExpansion;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4110 ];

		return pClassPointer;
	};

	int ComputePackedSystemTime ( );
};

UClass* ULockoutDefinition::pClassPointer = NULL;

// Class WillowGame.LookAxisDefinition
// 0x0018 (0x0054 - 0x003C)
class ULookAxisDefinition : public UGBXDefinition
{
public:
	float                                              Speed;                                            		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomSpeed;                                        		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelThreshold;                                   		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelRate;                                        		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelSpeed;                                       		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelWarmup;                                      		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4112 ];

		return pClassPointer;
	};

};

UClass* ULookAxisDefinition::pClassPointer = NULL;

// Class WillowGame.LookingAtInjuredPlayerExpressionEvaluator
// 0x0000 (0x003C - 0x003C)
class ULookingAtInjuredPlayerExpressionEvaluator : public UExpressionEvaluator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4114 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* ULookingAtInjuredPlayerExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.LootConfigurationDefinition
// 0x001C (0x0058 - 0x003C)
class ULootConfigurationDefinition : public UGBXDefinition
{
public:
	TArray< struct FLootData >                         Loot;                                             		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FAttributeInitializationData                Probability;                                      		// 0x0048 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4116 ];

		return pClassPointer;
	};

};

UClass* ULootConfigurationDefinition::pClassPointer = NULL;

// Class WillowGame.ManufacturerAttributeValueResolver
// 0x001C (0x0058 - 0x003C)
class UManufacturerAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FManufacturerSelectorData >         Manufacturers;                                    		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4118 ];

		return pClassPointer;
	};

};

UClass* UManufacturerAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.MarketingUnlockDefinition
// 0x001C (0x0058 - 0x003C)
class UMarketingUnlockDefinition : public UGBXDefinition
{
public:
	int                                                UnlockCode;                                       		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DialogLocFile;                                    		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DialogLocSection;                                 		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4120 ];

		return pClassPointer;
	};

};

UClass* UMarketingUnlockDefinition::pClassPointer = NULL;

// Class WillowGame.MeleeDefinition
// 0x00D8 (0x0114 - 0x003C)
class UMeleeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                           		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FAttributeInitializationData                Damage;                                           		// 0x0040 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageSource;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DamageTypeDefinitionOverride;                     		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                Knockback;                                        		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                StatusEffectDamage;                               		// 0x0074 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectChance;                               		// 0x0084 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HitStartSocketOrBone;                             		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HitStartOffset;                                   		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMeleeOverPeriodOfTime : 1;                       		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHitEachTargetOnlyOnce : 1;                       		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStopMeleeOnLanded : 1;                           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAffectEnemy : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAffectFriendly : 1;                              		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectNeutral : 1;                               		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUseDamageRadius : 1;                             		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bExpandRadiusOverTime : 1;                        		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseTargetCone : 1;                               		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIgnoreWorldGeometry : 1;                         		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	float                                              MaxMeleeDuration;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttackInterval;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageHeight;                                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageConeAngle;                                  		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageHeightOffset;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeAngle;                                        		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceDistance;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UBehaviorBase* >                     OnHitEnemy;                                       		// 0x00CC (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnHitEnemyHealth;                                 		// 0x00D8 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnHitEnemyShield;                                 		// 0x00E4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnHitFriendly;                                    		// 0x00F0 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnHitEnemyOrFriendly;                             		// 0x00FC (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnKilledEnemy;                                    		// 0x0108 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4122 ];

		return pClassPointer;
	};

	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	float GetInstigatorSelfDamageScale ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* Context );
	float GetStatusEffectChanceModifier ( class UObject* Context );
	float GetStatusEffectBaseDamage ( class UObject* Context );
	bool IsMeleeDebugEnabled ( );
	void ToggleMeleeDebug ( );
	void MeleeAttack ( class UObject* ContextObject );
};

UClass* UMeleeDefinition::pClassPointer = NULL;

// Class WillowGame.MissionDefinition
// 0x018C (0x01C8 - 0x003C)
class UMissionDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDlcLicensableObject;                    		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     MissionName;                                      		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionDescription;                               		// 0x0054 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TurnInDescription;                                		// 0x0060 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionSummary;                                   		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionGiver;                                     		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionTurnInLocation;                            		// 0x0084 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeaserText;                                       		// 0x0090 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UTravelStationDefinition*                    TravelStation;                                    		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTravelStationDefinition*                    TurnInStation;                                    		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlotCritical : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActivateInitialObjectiveSet : 1;                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bGlobalMissionBlocker : 1;                        		// 0x00A4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableAltReward : 1;                             		// 0x00A4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanBeFailed : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bGameStageLocked : 1;                             		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bRepeatable : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	class UMissionWeaponBalanceDefinition*             MissionWeapon;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FObjectiveDependencyData                    ObjectiveDependency;                              		// 0x00AC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMissionDefinition* >                Dependencies;                                     		// 0x00B4 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	class UMissionDefinition*                          NextMissionInChain;                               		// 0x00C0 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UMissionObjectiveSetDefinition*              InitialObjectiveSet;                              		// 0x00C4 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UMarketingUnlockDefinition*                  MarketingUnlock;                                  		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMissionDefinition* >                BlockedMissions;                                  		// 0x00CC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UMissionObjectiveSetDefinition*              StartBlockingSet;                                 		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveSetDefinition*              StopBlockingSet;                                  		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMissionObjectiveDefinition* >       ObjectiveDefs;                                    		// 0x00E0 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UMissionObjectiveSetDefinition* >    ObjectiveSetDefs;                                 		// 0x00EC (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	class URegionDefinition*                           GameStageRegion;                                  		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRewardData                                 Reward;                                           		// 0x00FC (0x004C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FRewardData                                 AlternativeReward;                                		// 0x0148 (0x004C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UMissionObjectiveSetDefinition*              FailOnLoadObjectiveSet;                           		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SecondsToComplete;                                		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DefendMissionSetting;                             		// 0x019C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SeasonalAvailabilityTime;                         		// 0x019D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogGroup*                         MissionDialogGroup;                               		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowDialogEventTag*                       DialogEvent;                                      		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowDialogNameTag*                        DialogTalker;                                     		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowDialogEventTag*                       TurnInDialogEvent;                                		// 0x01AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDownloadableExpansionDefinition*            DlcExpansion;                                     		// 0x01B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MissionNumber;                                    		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GameStage;                                        		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AwesomeLevel;                                     		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ExpLevel;                                         		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBehaviorProviderDefinition*                 BehaviorProvider;                                 		// 0x01C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4124 ];

		return pClassPointer;
	};

	void GetItemRewardPools ( unsigned long bAltReward, TArray< class UItemPoolDefinition* >* ItemPools );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
	class UDownloadableContentDefinition* GetDownloadableContentDefinition ( );
	bool CanBeFailed ( );
	void GetMissionRewardPresentation ( unsigned long bAltReward, TArray< struct FMissionRewardPresentationData >* RewardPresentations );
	bool ShouldGrantAlternateReward ( TArray< int >* ObjectivesProgress );
	void GetItemRewardsForPlayer ( class AWillowPlayerController* WillowPC, struct FPendingMissionRewardData* MissionReward );
	int GetExperienceReward ( class AWillowPlayerController* InWPC, unsigned long bGetAltReward );
	int GetOptionalCreditReward ( class AWillowPlayerController* InWPC );
	int GetCurrencyReward ( class AWillowPlayerController* InWPC, unsigned long bGetAltReward );
	unsigned char GetCurrencyRewardType ( unsigned long bGetAltReward );
	struct FString GetXPRewardPercentageString ( unsigned long bGetAltReward );
	struct FString GetCurrencyRewardString ( unsigned long bGetAltReward );
	int GetObjectiveIndex ( class UMissionObjectiveDefinition* MissionObjective );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetExpectedGameStage ( );
	int GetGameStage ( );
};

UClass* UMissionDefinition::pClassPointer = NULL;

// Class WillowGame.MissionDirectivesDefinition
// 0x000C (0x0048 - 0x003C)
class UMissionDirectivesDefinition : public UGBXDefinition
{
public:
	TArray< struct FMissionDirectorData >              MissionDirectives;                                		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4126 ];

		return pClassPointer;
	};

	void AddDirective ( class AActor* WaypointOwner, class AMissionTracker* MissionTracker, struct FMissionDirectorData* NewDirective );
	void AddWaypointsForDirective ( class AActor* WaypointOwner, class AMissionTracker* MissionTracker, struct FMissionDirectorData* DirectorData );
	void CreateWaypoints ( class AActor* WaypointOwner, class AMissionTracker* MissionTracker );
};

UClass* UMissionDirectivesDefinition::pClassPointer = NULL;

// Class WillowGame.MissionObjectiveDefinition
// 0x0060 (0x009C - 0x003C)
class UMissionObjectiveDefinition : public UGBXDefinition
{
public:
	struct FName                                       StatId;                                           		// 0x003C (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ObjectiveCount;                                   		// 0x0044 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      OptionalCurrencyRewardType;                       		// 0x0045 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     ProgressMessage;                                  		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bRememberItemsWithinObjective : 1;                		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllOrNothing : 1;                                		// 0x0054 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bObjectiveIsOptional : 1;                         		// 0x0054 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	class UFastTravelStationDefinition*                StationOverride;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                OptionalCreditRewardMultiplier;                   		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                OptionalOtherCurrencyReward;                      		// 0x006C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                OptionalExperienceRewardPercentage;               		// 0x007C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FKillMissionData                            KillRestrictions;                                 		// 0x008C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4128 ];

		return pClassPointer;
	};

	bool IsMissionTurnIn ( );
	struct FString GetMissionName ( );
	struct FString GetObjectiveName ( );
	int TranslateObjectiveCount ( int Count );
};

UClass* UMissionObjectiveDefinition::pClassPointer = NULL;

// Class WillowGame.MissionObjectiveSetDefinition
// 0x0030 (0x006C - 0x003C)
class UMissionObjectiveSetDefinition : public UGBXDefinition
{
public:
	TArray< class UMissionObjectiveDefinition* >       ObjectiveDefinitions;                             		// 0x003C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class UMissionObjectiveSetDefinition*              NextSet;                                          		// 0x0048 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bCanCompleteMission : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoEnableNextSet : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UTravelStationDefinition*                    StationOverride;                                  		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MissionSummaryOverride;                           		// 0x0054 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionDescriptionOverride;                       		// 0x0060 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4130 ];

		return pClassPointer;
	};

	bool ContainsOptionalObjective ( );
	bool ContainsObjective ( class UMissionObjectiveDefinition* Objective );
};

UClass* UMissionObjectiveSetDefinition::pClassPointer = NULL;

// Class WillowGame.MissionObjectiveSetBranchingDefinition
// 0x000C (0x0078 - 0x006C)
class UMissionObjectiveSetBranchingDefinition : public UMissionObjectiveSetDefinition
{
public:
	TArray< class UMissionObjectiveDefinition* >       BranchedObjectiveDefinitions;                     		// 0x006C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4132 ];

		return pClassPointer;
	};

	bool ContainsObjective ( class UMissionObjectiveDefinition* Objective );
};

UClass* UMissionObjectiveSetBranchingDefinition::pClassPointer = NULL;

// Class WillowGame.MissionObjectiveSetCollectionDefinition
// 0x000C (0x0078 - 0x006C)
class UMissionObjectiveSetCollectionDefinition : public UMissionObjectiveSetDefinition
{
public:
	TArray< class UMissionObjectiveSetDefinition* >    ObjectiveSetDefinitions;                          		// 0x006C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4134 ];

		return pClassPointer;
	};

	bool ContainsObjective ( class UMissionObjectiveDefinition* Objective );
};

UClass* UMissionObjectiveSetCollectionDefinition::pClassPointer = NULL;

// Class WillowGame.MissionPopulationAspect
// 0x0034 (0x0070 - 0x003C)
class UMissionPopulationAspect : public UPopulationAspect
{
public:
	struct FPointer                                    VfTable_IIMission;                                		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UMissionObjectiveDefinition*                 MissionObjective;                                 		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Activation;                                       		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ObjectiveUpdateSetting;                           		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WaypointSetting;                                  		// 0x0046 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WaypointActorSetting;                             		// 0x0047 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UMissionObjectiveDefinition*                 OverrideObjective;                                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDefendTarget : 1;                                		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyObjectiveSetRestrictionToActivation : 1;    		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActiveWaypoint : 1;                              		// 0x004C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bInitialized : 1;                                 		// 0x004C (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< class UMissionObjectiveSetDefinition* >    WaypointObjectiveSetRestrictions;                 		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                AreaRadius;                                       		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UItemPoolDefinition* >               ItemPools;                                        		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AWillowMissionPickupFailsafe*                PickupFailsafe;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4136 ];

		return pClassPointer;
	};

	void eventDenStatRemoved ( class APawn* DenPawn );
	void eventDenStatAdded ( class APawn* DenPawn );
	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
	void SetActivationFromMission ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned long bRespawnIfAlreadyActive );
	void RemoveWaypointsFromOpportunity ( );
	void CreateWaypoint ( class AActor* WaypointActor, class UMissionObjectiveDefinition* Objective );
	void eventEnabledStatusChanged ( unsigned long bIsEnabled, unsigned long bHasActiveActors );
	void eventAllActorsRemoved ( unsigned long bFinishedSpawning );
	void eventOnActorDeath ( class AActor* DeadActor );
	void eventOnSpawnActor ( class AActor* SpawnedActor );
	void CreateWaypointFromWaypointSetting ( class AActor* WaypointActor );
	void GrantItemsToActor ( class AActor* SpawnedActor );
	void eventInitialize ( );
};

UClass* UMissionPopulationAspect::pClassPointer = NULL;

// Class WillowGame.MissionTracker
// 0x03B0 (0x0538 - 0x0188)
class AMissionTracker : public AActor
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIPlayerBehavior;                         		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIScreenParticle;                         		// 0x0190 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FMissionData >                      MissionList;                                      		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            StatListenersMap;                                 		// 0x01A0 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UMissionDefinition*                          ActiveMission;                                    		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FMissionObserversData >             MissionObservers;                                 		// 0x01E0 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< class UIMissionDirector* >                 MissionDirectors;                                 		// 0x01EC (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< struct FMissionStatusPlayerData >          DependentMissions;                                		// 0x01F8 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< class UMissionDefinition* >                MissionsWithCompletedDependencies;                		// 0x0204 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FReplicatedMissionDirectiveData             DynamicMissionDirectives[ 0xA ];                  		// 0x0210 (0x00C8) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FMissionWaypointsData >             MissionWaypoints;                                 		// 0x02D8 (0x000C) [0x0000000000580000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FLevelTransitionData >              LevelTransitions;                                 		// 0x02E4 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< struct FTimedMissionData >                 ActiveTimedMissions;                              		// 0x02F0 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< struct FDefendMissionData >                DefendMissions;                                   		// 0x02FC (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FDefendTargetData                           DefendTarget;                                     		// 0x0308 (0x0008) [0x0000000000000020]              ( CPF_Net )
	TArray< class UMissionWeaponBalanceDefinition* >   ActiveMissionWeapons;                             		// 0x0310 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	unsigned long                                      bDataValidated : 1;                               		// 0x031C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCinematicMode : 1;                               		// 0x031C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedToIssueLevelLoadEvents : 1;                  		// 0x031C (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FBlockedMissionData >               BlockedMissions;                                  		// 0x0320 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UMissionDefinition*                          GlobalMissionBlocker;                             		// 0x032C (0x0004) [0x0000000000000000]              
	TArray< struct FObjectiveUpdateData >              ObjectiveUpdates;                                 		// 0x0330 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FBehaviorConsumerHandle                     BehaviorConsumerHandle;                           		// 0x033C (0x0004) [0x0000000000000000]              
	struct FMinimapIconHelper_Director                 IconHelper_Directors[ 0xE ];                      		// 0x0340 (0x0188) [0x0000000000000020]              ( CPF_Net )
	struct FMissionKickoffData                         PendingMissionKickoff;                            		// 0x04C8 (0x000C) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   ActiveMissionChangedDelegates;                    		// 0x04D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   MissionStatusChangedDelegates;                    		// 0x04E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   MissionObjectivesChangedDelegates;                		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   MissionFilteredChangedDelegates;                  		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMissionDefinition*                          FastForwardTriggerMission;                        		// 0x0504 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnActiveMissionChanged__Delegate;               		// 0x0508 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMissionStatusChanged__Delegate;               		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMissionObjectivesChanged__Delegate;           		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMissionFilteredChanged__Delegate;             		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4138 ];

		return pClassPointer;
	};

	void PlayTurnIn ( class UMissionDefinition* InMission );
	void PlayKickoffDialogOnly ( class UMissionDefinition* InMission );
	void PlayKickoff ( class UMissionDefinition* InMission );
	void ReceiveChallenge ( class UChallengeDefinition* ChalDef, unsigned long bIsCharacterLoad, unsigned long bGiveToAllPlayers );
	void UpdateVisibilityOfAllActiveScreenParticles ( );
	bool ScreenParticlesShouldBeVisible ( );
	void SetUpVoGScreenParticle ( class UParticleSystem* Template, struct FName TextureMovieParamName );
	void HideScreenParticle ( class UParticleSystem* Template, struct FName ParticleTag, unsigned long bAllowParticleToFinish );
	void ShowScreenParticle ( struct FScreenParticleInitParams InitParams );
	void Behavior_RegisterStation ( class ATravelStation* ActivatedStation, unsigned long bFromSave );
	void Behavior_StopRevive ( );
	void Behavior_StartRevive ( );
	bool GetPlayerLoot ( int CustomGameStage, int CustomAwesomeLevel, struct FName CustomConfiguration, TArray< struct FSpawnedDroppedLootData >* SpawnedLoot );
	void Behavior_SpawnTeleporter ( class UPersonalTeleporterDefinition* Definition );
	void Behavior_SetCurrentProjectile ( class UProjectileDefinition* CurrentProjectile );
	void Behavior_ForceFeedback ( class UForceFeedbackWaveform* FFWaveform, unsigned long ForWeaponFiring );
	class AWillowProjectile* Behavior_SpawnCurrentProjectile ( class UProjectileDefinition* CurrentProjectile, unsigned long bLeftHand, unsigned long bConsumeResource, unsigned long bNoVelocity, unsigned long bSetProjectileToGrenadeMod );
	void Behavior_UnlockAchievementForAllPlayers ( int AchievementId, int MinimumPlayersRequired );
	void Behavior_DetachMeleeWeapon ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void Behavior_AttachMeleeWeapon ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void Behavior_UnlockAchievement ( int AchievementId );
	void Behavior_SendMessageToPlayers ( unsigned long bShouldSendToInstigator, class UClass* SendMsgClass );
	void Behavior_CameraAnim ( class UCameraAnim* Anim );
	void Behavior_ViewShake ( struct FGearboxViewShakeInfo ShakeInfo );
	void Behavior_ThrowGrenade ( );
	void Behavior_Melee ( );
	void Behavior_Reload ( );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void RunMissionCustomEvent ( class UMissionDefinition* Mission, struct FName EventName );
	void eventDebugRefreshHUD ( );
	unsigned char DebugAdvanceTrackedMission ( unsigned long bDoNotAdvanceObjectiveSet );
	void DebugIncrementObjective ( struct FString InMission, struct FString InObjective );
	void DebugCompleteObjective ( struct FString InMission, struct FString InObjective );
	class UMissionObjectiveDefinition* DebugGetObjectiveFromString ( class UMissionDefinition* InMission, struct FString InObjective );
	void DebugMakeEligibileAndComplete ( class UMissionDefinition* InMission );
	void DebugMakeEligibleForAndAccept ( struct FString InMission );
	void DebugAcceptMission ( struct FString InMission );
	void DebugUndoMission ( class UMissionDefinition* InMission );
	void DebugAdvanceObjectiveSet ( struct FString InMission, struct FString ShouldCompleteObjectives );
	void DebugUndoCompleteMission ( struct FString InMission );
	void DebugCompleteMission ( struct FString InMission );
	class UMissionDefinition* DebugGetMissionFromString ( struct FString InMission );
	void StaticSetMissionDirectorParticle ( class AActor* MissionDirectorActor, class UParticleSystemComponent** MissionParticle );
	void eventTriggerMissionFilteredChangedDelegates ( );
	void ClearMissionFilteredChangedDelegate ( struct FScriptDelegate MissionFilteredChangedDelegate );
	void AddMissionFilteredChangedDelegate ( struct FScriptDelegate MissionFilteredChangedDelegate );
	void OnMissionFilteredChanged ( );
	void eventTriggerMissionObjectivesChangedDelegates ( class UMissionDefinition* MissionThatChanged );
	void ClearMissionObjectivesChangedDelegate ( struct FScriptDelegate MissionObjectivesChangedDelegate );
	void AddMissionObjectivesChangedDelegate ( struct FScriptDelegate MissionObjectivesChangedDelegate );
	void OnMissionObjectivesChanged ( class UMissionDefinition* MissionThatChanged );
	void eventTriggerMissionStatusChangedDelegates ( );
	void ClearMissionStatusChangedDelegate ( struct FScriptDelegate MissionStatusChangedDelegate );
	void AddMissionStatusChangedDelegate ( struct FScriptDelegate MissionStatusChangedDelegate );
	void OnMissionStatusChanged ( );
	void eventTriggerActiveMissionChangedDelegates ( );
	void ClearActiveMissionChangedDelegate ( struct FScriptDelegate ActiveMissionChangedDelegate );
	void AddActiveMissionChangedDelegate ( struct FScriptDelegate ActiveMissionChangedDelegate );
	void OnActiveMissionChanged ( );
	void NotifyLocalPlayerOfActiveMission ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ProcessDynamicMissionDirectives ( );
	bool AllExpansionSideMissionsComplete ( class AWillowPlayerController* Player, class UDownloadableExpansionDefinition* Expansion );
	void InitializeMissionsWithCompletedDependencies ( );
	int GetMissionCount ( unsigned long bIncludeRepeatableMissions, unsigned long bIncludeDLC, unsigned long bIncludeAll );
	bool IsDataValid ( );
	void ValidateData ( );
	void StopMissionTimer ( class UMissionDefinition* TimedMission );
	void StartMissionTimer ( class UMissionDefinition* TimedMission );
	void AddTimeToMission ( class UMissionDefinition* TimedMission, float SecondsToAdd );
	void NotifyActorDied ( class AActor* DeadActor );
	bool IsValidMissionWeapon ( class UMissionWeaponBalanceDefinition* MissionWeaponBalanceDef );
	void AddDefendTarget ( class AActor* Target, class UMissionObjectiveDefinition* Objective );
	bool IsObjectiveBitSet ( class UMissionObjectiveDefinition* MissionObjective, int ObjectiveBit );
	void RemoteUpdateMissionFiltered ( struct FReplicatedMissionFilterData* MissionFilterData );
	void RemoteDecrementMissionObjective ( class UMissionObjectiveDefinition* Objective );
	void RemoteClearMissionObjective ( class UMissionObjectiveDefinition* Objective );
	void RemoteUpdateMissionObjective ( struct FReplicatedMissionObjectiveData* ObjectiveData );
	void RemoteSubObjectiveSetAdvanced ( class UMissionObjectiveSetDefinition* SubObjectiveSetAdvanced );
	void RemoteUpdateActiveObjectiveSet ( class UMissionObjectiveSetDefinition* ActiveObjectiveSet );
	void RemoteUpdateMissionStatus ( int GameStage, struct FReplicatedMissionStatusData* MissionStatusData );
	void RemoteUpdateMissionData ( struct FReplicatedMissionData* ReplicatedMissionData );
	void GetAllMissions ( TArray< class UMissionDefinition* >* AllMissions );
	class UMissionDefinition* GetMissionForNumber ( int MissionNumber );
	void GetActiveSubObjectiveSets ( class UMissionObjectiveSetCollectionDefinition* SetCollection, TArray< class UMissionObjectiveSetDefinition* >* ActiveSubObjectiveSets );
	bool CanEndMission ( class UMissionDefinition* InMission );
	bool CanStartMission ( class UMissionDefinition* InMission );
	void SetKickoffHeard ( class UMissionDefinition* InMission );
	void NotifyPawnDied ( class AWillowPawn* KilledPawn, class AController* InstigatedBy, class UClass* DamageTypeClass, class UDamageTypeDefinition* DamageTypeDefinition, class UIDamageCauser* DamageCauser, unsigned long bKilledByCritical, struct FTraceHitInfo HitInfo );
	void GetCurrentObjectives ( class UMissionDefinition* InMission, TArray< class UMissionObjectiveDefinition* >* CurrentObjectives, TArray< class UMissionObjectiveDefinition* >* BranchObjectives );
	bool IsObjectiveSetActive ( class UMissionObjectiveSetDefinition* ObjectiveSet );
	class UMissionObjectiveSetDefinition* GetActivePrimaryObjectiveSet ( class UMissionDefinition* InMission );
	int GetObjectiveCount ( class UMissionObjectiveDefinition* MissionObjective );
	bool IsMissionObjectiveActive ( class UMissionObjectiveDefinition* MissionObjective );
	bool IsMissionObjectiveComplete ( class UMissionObjectiveDefinition* MissionObjective );
	bool IsMissionBlocked ( class UMissionDefinition* InMission );
	unsigned char GetCompletedBranch ( class UMissionDefinition* Mission );
	void GetObjectivesProgress ( class UMissionDefinition* InMission, unsigned long bClearCurrentIncompleteAllOrNothingObjectives, TArray< int >* ObjectivesProgress );
	void GetActiveMissionData ( struct FMissionData* ActiveMissionData );
	class UMissionDefinition* GetActiveMission ( );
	void SetActiveMission ( class UMissionDefinition* InMission, unsigned long bFromActivation, class AWillowPlayerController* WillowPC );
	void EvaluateStat ( struct FName StatId );
	void DecrementObjective ( class UMissionObjectiveDefinition* Objective );
	void UpdateObjective ( class UMissionObjectiveDefinition* MissionObjective, int ObjectiveBit );
	void FastTravelStationRegistered ( );
	void RegisterLevelTransition ( class ALevelTravelStation* LevelTransition, struct FName TargetLevel );
	void UnregisterWaypoint ( class UWaypointComponent* Waypoint, class UMissionDefinition* InMission );
	void RegisterWaypoint ( class UWaypointComponent* Waypoint, class UMissionDefinition* InMission );
	void UnregisterMissionDirector ( class UIMissionDirector* MissionDirector );
	void RegisterMissionDirector ( class UIMissionDirector* MissionDirector );
	void UnregisterMissionObserver ( class UIMission* MissionObserver );
	void RegisterMissionObserver ( class UIMission* MissionObserver, class UMissionDefinition* InMission );
	void OnCinematicModeChanged ( unsigned long bInCinematicMode );
	bool MissionDependenciesMet ( class UMissionDefinition* InMission );
	unsigned char GetMissionStatus ( class UMissionDefinition* InMission );
	void CompleteMission ( class UMissionDefinition* InMission, class AWillowPlayerController* WillowPC );
	void ActivateMission ( class UMissionDefinition* InMission, class AWillowPlayerController* WillowPC );
	void GrantMissionWeaponsToClientPlayer ( class AWillowPlayerController* WillowPC );
	void SendMissionData ( class AWillowPlayerController* WillowPC );
	bool InitializeWorldMissionState ( TArray< struct FMissionStatusPlayerData > InMissionList, TArray< class UMissionDefinition* > InFilteredMissions, class AWillowPlayerController* WillowPC );
	void InitializePIEWorldMissionState ( );
	void GetMissionDescription ( class UMissionDefinition* InMission, unsigned long bShowTurnInDescription, struct FString* Summary, struct FString* Description );
	bool IsMissionFiltered ( class UMissionDefinition* InMission );
	void ToggleMissionFiltered ( class UMissionDefinition* InMission );
	void SetMissionStatus ( class UMissionDefinition* InMission, unsigned char MissionStatus, class AWillowPlayerController* WillowPC );
};

UClass* AMissionTracker::pClassPointer = NULL;

// Class WillowGame.MovementComponent
// 0x0003 (0x005C - 0x0059)
class UMovementComponent : public UActorComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4140 ];

		return pClassPointer;
	};

	void Init ( );
};

UClass* UMovementComponent::pClassPointer = NULL;

// Class WillowGame.DrunkenBaseComponent
// 0x0044 (0x00A0 - 0x005C)
class UDrunkenBaseComponent : public UMovementComponent
{
public:
	float                                              StartApproachDistance;                            		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartDelayTime;                                   		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EaseInTime;                                       		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartTime;                                        		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                RandomNumberSeed;                                 		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0074 (0x000C) MISSED OFFSET
	struct FQuat                                       LastVelocityRotOffset;                            		// 0x0080 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FQuat                                       LastAccelRotOffset;                               		// 0x0090 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4142 ];

		return pClassPointer;
	};

	void GenerateRandomNumberSeed ( );
	void SetRandomNumberSeed ( int InRandomNumberSeed );
	void Init ( );
};

UClass* UDrunkenBaseComponent::pClassPointer = NULL;

// Class WillowGame.DrunkenRandomComponent
// 0x0034 (0x00D4 - 0x00A0)
class UDrunkenRandomComponent : public UDrunkenBaseComponent
{
public:
	float                                              PathCorrectionInterval;                           		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TurnSpeed;                                        		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ApproachTurnSpeed;                                		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxSpreadAngle;                                   		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxDepartureAngle;                                		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastUpdateTime;                                   		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDepartureAngle;                               		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastRotationOffset;                               		// 0x00BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    TargetRotationOffset;                             		// 0x00C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4144 ];

		return pClassPointer;
	};

};

UClass* UDrunkenRandomComponent::pClassPointer = NULL;

// Class WillowGame.DrunkenWaveComponent
// 0x0018 (0x00B8 - 0x00A0)
class UDrunkenWaveComponent : public UDrunkenBaseComponent
{
public:
	float                                              MaxRandomWaveOffsetTime;                          		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FDrunkenWaveFormData >              Waves;                                            		// 0x00A4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              GlobalWaveScale;                                  		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WaveOffsetTime;                                   		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4146 ];

		return pClassPointer;
	};

};

UClass* UDrunkenWaveComponent::pClassPointer = NULL;

// Class WillowGame.NameListDefinition
// 0x000C (0x0048 - 0x003C)
class UNameListDefinition : public UGBXDefinition
{
public:
	TArray< struct FString >                           Names;                                            		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4148 ];

		return pClassPointer;
	};

};

UClass* UNameListDefinition::pClassPointer = NULL;

// Class WillowGame.NPCLoadBalancer
// 0x0024 (0x0060 - 0x003C)
class UNPCLoadBalancer : public UObject
{
public:
	TArray< struct FNPCList >                          TheList;                                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastPathTime;                                     		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                NumberNPCsMoving;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                MaxNumberPathing;                                 		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              TimeBetweenUpdates;                               		// 0x0058 (0x0004) [0x0000000000000000]              
	unsigned long                                      NumberPathingReducedByPlayerCount : 1;            		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4150 ];

		return pClassPointer;
	};

	bool CheckPathing ( class AWillowMind* InMind );
	bool WantsToPath ( class AWillowMind* InMind );
	void PathFailed ( class AWillowMind* InMind );
	void ClearList ( );
	void OnPerch ( class AWillowMind* InMind, unsigned long bOnPerch );
	void IsPathing ( class AWillowMind* InMind, unsigned long bPathing );
	bool CanContinuePath ( class AWillowMind* InMind );
	bool CanStartPath ( class AWillowMind* InMind );
};

UClass* UNPCLoadBalancer::pClassPointer = NULL;

// Class WillowGame.PackageAssetLibrary
// 0x001C (0x0058 - 0x003C)
class UPackageAssetLibrary : public UGBXDefinition
{
public:
	class UClass*                                      LibraryType;                                      		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           Sublibraries;                                     		// 0x0040 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UPackageAssetSublibrary* >           SublibraryLinks;                                  		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4152 ];

		return pClassPointer;
	};

};

UClass* UPackageAssetLibrary::pClassPointer = NULL;

// Class WillowGame.PackageAssetSublibrary
// 0x0024 (0x0060 - 0x003C)
class UPackageAssetSublibrary : public UGBXDefinition
{
public:
	class UClass*                                      LibraryType;                                      		// 0x003C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FString >                           Assets;                                           		// 0x0040 (0x000C) [0x0000000020420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FNameBasedObjectPath >              AssetPaths;                                       		// 0x004C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FName                                       CachedPackageName;                                		// 0x0058 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4154 ];

		return pClassPointer;
	};

};

UClass* UPackageAssetSublibrary::pClassPointer = NULL;

// Class WillowGame.PassengerCameraDefinition
// 0x005C (0x0098 - 0x003C)
class UPassengerCameraDefinition : public UGBXDefinition
{
public:
	float                                              AfterburnerHandlingCamera;                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DoNotLerpToThisSeat : 1;                          		// 0x0040 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRotateCameraUnderVehicle : 1;                    		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSnapCameraYaw : 1;                               		// 0x0040 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSnapCameraPitch : 1;                             		// 0x0040 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bScaleDistanceWithSpeed : 1;                      		// 0x0040 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	float                                              CameraModifierSpeed;                              		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraRollSmoothingSpeed;                         		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      LerpStyle;                                        		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CameraTarget;                                     		// 0x004D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CameraBehaviorOnEntry;                            		// 0x004E (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     BaseCameraPosition;                               		// 0x0050 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraOffset;                                     		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    ForcedCameraRotation;                             		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraPitchUpOffset;                              		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraPitchDownOffset;                            		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewPitchMin;                                     		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewPitchMax;                                     		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewYawLimitFromTurretFacing;                     		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraSnapDelay;                                  		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraSnapSpeed;                                  		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraFastScale;                                  		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationRateYaw;                                  		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationRatePitch;                                		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LookForwardDist;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4156 ];

		return pClassPointer;
	};

};

UClass* UPassengerCameraDefinition::pClassPointer = NULL;

// Class WillowGame.PawnRelevanceUtility
// 0x0000 (0x003C - 0x003C)
class UPawnRelevanceUtility : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4158 ];

		return pClassPointer;
	};

};

UClass* UPawnRelevanceUtility::pClassPointer = NULL;

// Class WillowGame.PawnRelevanceUtilityCaching
// 0x0040 (0x007C - 0x003C)
class UPawnRelevanceUtilityCaching : public UPawnRelevanceUtility
{
public:
	unsigned long                                      CachingEnabled : 1;                               		// 0x003C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              MaxCacheTime;                                     		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DistanceClose;                                    		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DistanceMed;                                      		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CacheFreshnessTimeClose;                          		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CacheFreshnessTimeMed;                            		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CacheFreshnessTimeFar;                            		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CacheFreshnessTimePlayer;                         		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CacheTimeFudgeFactorClose;                        		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CacheTimeFudgeFactorMed;                          		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CacheTimeFudgeFactorFar;                          		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              HasMovedDistThreshold;                            		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              HasMovedDistThresholdRelevant;                    		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FRelevanceCacheStruct >             CachedRelevance;                                  		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4160 ];

		return pClassPointer;
	};

};

UClass* UPawnRelevanceUtilityCaching::pClassPointer = NULL;

// Class WillowGame.PawnRelevanceUtilityFixedCost
// 0x0024 (0x00A0 - 0x007C)
class UPawnRelevanceUtilityFixedCost : public UPawnRelevanceUtilityCaching
{
public:
	float                                              CloseDistanceSquared;                             		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MedDistanceSquared;                               		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxLineChecksPerFrame;                            		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FRelevanceBucketStruct >            Buckets;                                          		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MedAccumulatedTime;                               		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              FarAccumulatedTime;                               		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              SkipUpdateForTime;                                		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4162 ];

		return pClassPointer;
	};

	void SetMaxLineChecks ( int CheckCount );
	void SetBucket ( int BucketNum, float BucketDistance, int MaxLineChecks, int MaxIterations );
	void ShowBucketSettings ( );
	void PrintBuckets ( );
};

UClass* UPawnRelevanceUtilityFixedCost::pClassPointer = NULL;

// Class WillowGame.PerchDefinition
// 0x00A4 (0x00E0 - 0x003C)
class UPerchDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBodyInfoProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIAnimProvider;                           		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FAIRange                                    LoopTime;                                         		// 0x0048 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    CooldownTime;                                     		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPerchAnimData >                    AnimMap;                                          		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bUseCollision : 1;                                		// 0x0064 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRotateYawOnly : 1;                               		// 0x0064 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOptimizeMemory : 1;                              		// 0x0064 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCheckForPlayerInRange : 1;                       		// 0x0064 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCombatPerch : 1;                                 		// 0x0064 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDynamicLightEnvironment : 1;                     		// 0x0064 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastShadows : 1;                                 		// 0x0064 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;              		// 0x0064 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDynamic : 1;                                     		// 0x0064 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x0064 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShadowFromEnvironment : 1;                       		// 0x0064 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                		// 0x0064 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	class UExpressionEvaluator*                        CanUseExpression;                                 		// 0x0068 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              LerpTime;                                         		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AdditionalOffsetScale;                            		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayerInRangeCheckFrequency;                      		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayerInRangeRadius;                              		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayerInRangeCooldown;                            		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UProjectileDefinition*                       CombatProjectile;                                 		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBodyCompositionData                        BodyComposition;                                  		// 0x0084 (0x0014) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LightingBoundsScale;                              		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumVolumeVisibilitySamples;                       		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutExponent;                         		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutTime;                             		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientGlow;                                      		// 0x00AC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x00BC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x00C8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionStartDistance;            		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionEndDistance;              		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4164 ];

		return pClassPointer;
	};

	void OnPlayerInRange ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnFinished ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnStopAnim ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnIdleAnim ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnStartAnim ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
	void GetAnims ( TArray< class UGearboxAnimDefinition* >* OutAnims );
	bool CanUse ( class UObject* ContextSource );
	bool GetPerchData ( class UPopulationBodyTag* Key, struct FPerchAnimData* Data );
	bool Supports ( class UPopulationBodyTag* Key );
};

UClass* UPerchDefinition::pClassPointer = NULL;

// Class WillowGame.PerchEditorComponent
// 0x0000 (0x0210 - 0x0210)
class UPerchEditorComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4166 ];

		return pClassPointer;
	};

};

UClass* UPerchEditorComponent::pClassPointer = NULL;

// Class WillowGame.PhysicsJumpConnection
// 0x001C (0x0058 - 0x003C)
class UPhysicsJumpConnection : public UObject
{
public:
	class APhysicsJumpNode*                            Source;                                           		// 0x003C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class APhysicsJumpNode*                            Destination;                                      		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Speed;                                            		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Angle;                                            		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Velocity;                                         		// 0x004C (0x000C) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4168 ];

		return pClassPointer;
	};

};

UClass* UPhysicsJumpConnection::pClassPointer = NULL;

// Class WillowGame.PhysicsJumpNode
// 0x0034 (0x0278 - 0x0244)
class APhysicsJumpNode : public APathNode
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshSpecialMove;                  		// 0x0244 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIGBXNavMeshSeed;                         		// 0x0248 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIGBXNavMeshBuildEvents;                  		// 0x024C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0250 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UPhysicsJumpConnection* >            Connections;                                      		// 0x0254 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_PhysicsJump*                    OverrideJumpSMD;                                  		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              JumpRadius;                                       		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bLimitUsage : 1;                                  		// 0x0268 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x0268 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class UPopulationBodyTag* >                AllowedTags;                                      		// 0x026C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4170 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	struct FRotator GetRotation ( struct FVector Up, class APhysicsJumpNode* Destination );
	struct FRotator GetStartRotation ( int JumpIndex );
	struct FRotator GetEndRotation ( int JumpIndex );
	struct FVector GetEndLocation ( class AWillowPawn* Pawn, int JumpIndex );
	struct FVector GetStartLocation ( class AWillowPawn* Pawn );
	struct FVector GetLocation ( float PawnHeight );
	class UCylinderComponent* GetPrimaryCollision ( class AWillowPawn* Pawn );
	class USpecialMove_PhysicsJump* GetJumpDefFromBody ( class UBodyClassDefinition* BodyClass );
	void RemoveJumpDestination ( class APhysicsJumpNode* JumpNode );
	void AddJumpDestination ( class APhysicsJumpNode* JumpNode );
	int GetJumpIndex ( class APhysicsJumpNode* JumpNode );
};

UClass* APhysicsJumpNode::pClassPointer = NULL;

// Class WillowGame.PhysicsJumpNodeEditorComponent
// 0x0000 (0x0210 - 0x0210)
class UPhysicsJumpNodeEditorComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4172 ];

		return pClassPointer;
	};

};

UClass* UPhysicsJumpNodeEditorComponent::pClassPointer = NULL;

// Class WillowGame.PlayerBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class APlayerBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4174 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
};

UClass* APlayerBlockingVolume::pClassPointer = NULL;

// Class WillowGame.ExecuteBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class AExecuteBlockingVolume : public APlayerBlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4176 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
};

UClass* AExecuteBlockingVolume::pClassPointer = NULL;

// Class WillowGame.PlayerChallengeListDefinition
// 0x000C (0x0048 - 0x003C)
class UPlayerChallengeListDefinition : public UGBXDefinition
{
public:
	TArray< class UChallengeDefinition* >              PlayerChallenges;                                 		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4178 ];

		return pClassPointer;
	};

};

UClass* UPlayerChallengeListDefinition::pClassPointer = NULL;

// Class WillowGame.PlayerClassAttributeValueResolver
// 0x0004 (0x0040 - 0x003C)
class UPlayerClassAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                    		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4180 ];

		return pClassPointer;
	};

};

UClass* UPlayerClassAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.PlayerClassCountAttributeValueResolver
// 0x0004 (0x0040 - 0x003C)
class UPlayerClassCountAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                    		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4182 ];

		return pClassPointer;
	};

	void ResetPlayerClassCountOverride ( );
	void SetPlayerClassCountOverride ( class UPlayerClassIdentifierDefinition* PlayerClassIdToOverride, int Override );
};

UClass* UPlayerClassCountAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.PlayerClassIdentifierDefinition
// 0x0064 (0x00A0 - 0x003C)
class UPlayerClassIdentifierDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                    		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     ClassName;                                        		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LocalizedClassName;                               		// 0x004C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedClassNameNonCaps;                        		// 0x0058 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       StatPlayerFirstSkillPoint;                        		// 0x0064 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDownloadableCharacterDefinition*            DlcCharacterDef;                                  		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeInitializationDefinition*          ClassDropInitializationDefinition;                		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UItemPoolDefinition*                         CommonClassMods;                                  		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         UncommonClassMods;                                		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         RareClassMods;                                    		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         VeryRareClassMods;                                		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         LegendaryClassMods;                               		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         SlayerOfTerramorphousClassMods;                   		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         AsterClassMods;                                   		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         LobeliaClassMods;                                 		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FCustomizationItemData >            CharacterCustomizations;                          		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4184 ];

		return pClassPointer;
	};

	class UDownloadableContentDefinition* GetDownloadableContentDefinition ( );
};

UClass* UPlayerClassIdentifierDefinition::pClassPointer = NULL;

// Class WillowGame.PlayerControllerAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UPlayerControllerAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4186 ];

		return pClassPointer;
	};

};

UClass* UPlayerControllerAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.PlayerEventProviderDefinition
// 0x000C (0x0048 - 0x003C)
class UPlayerEventProviderDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4188 ];

		return pClassPointer;
	};

	void OnPlayerEvent ( unsigned char EventOutput, class AActor* Instigator, class AActor* Other, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UPlayerEventProviderDefinition::pClassPointer = NULL;

// Class WillowGame.WillowGameInfo
// 0x02E4 (0x0614 - 0x0330)
class AWillowGameInfo : public AGearboxGameInfo
{
public:
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;              		// 0x0330 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIAIInterface;                            		// 0x0334 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bWeaponStay : 1;                                  		// 0x0338 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDemoMode : 1;                                    		// 0x0338 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPIESpawnInVehicle : 1;                           		// 0x0338 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bConsoleServer : 1;                               		// 0x0338 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bResurrectAllPlayersWhenOneDies : 1;              		// 0x0338 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bBossesRegenHealthOnReset : 1;                    		// 0x0338 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bEnemiesForgetDownedPlayers : 1;                  		// 0x0338 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEnemiesCannotDoCloseAttacksOnDownedPlayers : 1;  		// 0x0338 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDlcTravelFailureReceived : 1;                    		// 0x0338 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      HardcoreMode : 1;                                 		// 0x0338 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreFriendlyFire : 1;                          		// 0x0338 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreNPCFriendlyFire : 1;                       		// 0x0338 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bFromSeamlessTravel : 1;                          		// 0x0338 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	float                                              AdjustedDifficulty;                               		// 0x033C (0x0004) [0x0000000000000000]              
	struct FString                                     PIESpawnInVehicleName;                            		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      LastPlayerStartSpot;                              		// 0x034C (0x0004) [0x0000000000000000]              
	class AActor*                                      LastStartSpot;                                    		// 0x0350 (0x0004) [0x0000000000000000]              
	class AWillowVehicle*                              VehicleList;                                      		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGlobalsDefinition*                          MyGlobals;                                        		// 0x0358 (0x0004) [0x0000000000000000]              
	class ASkillEffectManager*                         GlobalSkillManager;                               		// 0x035C (0x0004) [0x0000000000000000]              
	class UPlayerInteractionManager*                   GlobalPlayerInteractionManager;                   		// 0x0360 (0x0004) [0x0000000000000000]              
	class AChallengeManager*                           GlobalChallengeManager;                           		// 0x0364 (0x0004) [0x0000000000000000]              
	class UCombatMusicManager*                         GlobalCombatMusicManager;                         		// 0x0368 (0x0004) [0x0000000000000000]              
	class UPlayerStatsNotifier*                        GlobalPlayerStatsNotifier;                        		// 0x036C (0x0004) [0x0000000000000000]              
	class ABlackMarketUpgradeManager*                  GlobalBlackMarketUpgradeManager;                  		// 0x0370 (0x0004) [0x0000000000000000]              
	TArray< class UInstancedDesignerAttribute* >       DesignerAttributes;                               		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AWillowPersonalTeleporter*                   ReturnTeleporter;                                 		// 0x0380 (0x0004) [0x0000000000000000]              
	class AWillowPersonalTeleporter*                   PersonalTeleporter;                               		// 0x0384 (0x0004) [0x0000000000000000]              
	struct FName                                       TeleporterDestinationName;                        		// 0x0388 (0x0008) [0x0000000000000000]              
	TArray< class UIPlayerObserver* >                  PlayerObservers;                                  		// 0x0390 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapChangeInitiated;                               		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangePlayerDown;                              		// 0x03A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangePlayerInMenu;                            		// 0x03B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeYouAreInMenu;                            		// 0x03C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeMissingDLC;                              		// 0x03CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeNeedInstallMissingDLC;                   		// 0x03D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeUpsellMissingDLC;                        		// 0x03E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCountdown;                               		// 0x03F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCanceledPlayerDown;                      		// 0x03FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCanceledPlayerMenu;                      		// 0x0408 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangePlayerIsSaving;                          		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCanceledPlayerIsSaving;                  		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangePlayerJoining;                           		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeUnknownPlayerJoining;                    		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCanceledPlayerJoining;                   		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCanceledUnknownPlayerJoining;            		// 0x0450 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangePlayerDueling;                           		// 0x045C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCanceledPlayerDueling;                   		// 0x0468 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangePlayerRespawn;                           		// 0x0474 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapChangeCanceledPlayerRespawn;                   		// 0x0480 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                TravelCountdownTime;                              		// 0x048C (0x0004) [0x0000000000000000]              
	int                                                TravelPostCountdownTime;                          		// 0x0490 (0x0004) [0x0000000000000000]              
	class UBehavior_CheckMapChangeConditions*          TravelBehavior;                                   		// 0x0494 (0x0004) [0x0000000000000000]              
	class UICustomEvent*                               TravelEventInterface;                             		// 0x0498 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x049C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UTravelStationDefinition*                    TravelStationDef;                                 		// 0x04A0 (0x0004) [0x0000000000000000]              
	class AWillowPlayerController*                     TravelInstigator;                                 		// 0x04A4 (0x0004) [0x0000000000000000]              
	struct FString                                     NewShopInventory;                                 		// 0x04A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              SecondsUntilShopsReset;                           		// 0x04B4 (0x0004) [0x0000000000000000]              
	float                                              ShopTimerRate;                                    		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShopTimerRateBaseValue;                           		// 0x04BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShopTimerRateModifierStack;                       		// 0x04C0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastShopResetTime;                                		// 0x04CC (0x0004) [0x0000000000000000]              
	float                                              SecondsUntilShopTimerResend;                      		// 0x04D0 (0x0004) [0x0000000000000000]              
	float                                              NewShopInventoryDisplayTime;                      		// 0x04D4 (0x0004) [0x0000000000000000]              
	struct FColor                                      NewShopInventoryDisplayColor;                     		// 0x04D8 (0x0004) [0x0000000000000000]              
	struct FWaypointActorData                          WaypointActors[ 0x6 ];                            		// 0x04DC (0x0078) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FAreaWaypointData                           AreaWaypoints[ 0x4 ];                             		// 0x0554 (0x0030) [0x0000000000000000]              
	TArray< struct FString >                           RecordedDialogEvents;                             		// 0x0584 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColiseumPlayerInfo                         CachedColiseumStats[ 0x4 ];                       		// 0x0590 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UWillowAIBlackboardComponent* >      AIBlackboards;                                    		// 0x05D0 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                StartGameTimer;                                   		// 0x05DC (0x0004) [0x0000000000000000]              
	unsigned char                                      StartGameState;                                   		// 0x05E0 (0x0001) [0x0000000000000000]              
	TArray< class APlayerReplicationInfo* >            PlayersThatHaveSeenTheCharacterSelect;            		// 0x05E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerReplicationInfo* >            PlayersThatHaveSelectedACharacter;                		// 0x05F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerReplicationInfo* >            PlayersThatHaveReceivedAPawn;                     		// 0x05FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CharacterSelectTimeInSeconds;                     		// 0x0608 (0x0004) [0x0000000000000000]              
	int                                                CharacterSelectQuickStartTimeInSeconds;           		// 0x060C (0x0004) [0x0000000000000000]              
	int                                                NextNameListIndex;                                		// 0x0610 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4190 ];

		return pClassPointer;
	};

	int GetNameListIndex ( );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	bool ClientsShouldSeeLobby ( );
	void UpdateBestNextHosts ( );
	void UpdateTookDamageFromEnemyStats ( class APawn* DamagedPawn, class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, unsigned long bWasLastDamageACriticalHit );
	void UpdateWaypoints ( );
	void CheckAllClientsLoaded ( );
	void eventPostSeamlessTravel ( );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void GenericPlayerInitialization ( class AController* C );
	void TellClientsToSetSessionInviteFlags ( struct FName SessionName, unsigned long bAllowInvites, unsigned long bAllowJoinViaPresence, unsigned long bAllowJoinViaPresenceFriendsOnly );
	void PlayerRemoved ( class APlayerReplicationInfo* RemovedPlayer );
	void PlayerAdded ( class APlayerReplicationInfo* AddedPlayer );
	void PlayerReceivedPawn ( class APlayerReplicationInfo* PRI );
	void PlayerSelectedCharacter ( class APlayerReplicationInfo* PRI );
	void PlayerOpenedCharacterSelect ( class APlayerReplicationInfo* PRI );
	void HandlePublicGame ( );
	void TestStartGame ( );
	void EndStartGame ( );
	void BeginStartGame ( );
	void ClearStartGameTimer ( );
	void UpdateStartGameTimer ( );
	void SetStartGameTimer ( int Value );
	void UpdateStartGameState ( );
	void StartNewGame ( );
	void RegisterServer ( );
	bool IsHardcoreMode ( );
	void SetHardcoreMode ( unsigned long NewHardcoreMode );
	void CleanAIBlackBoards ( );
	class UWillowAIBlackboardComponent* GetAIBlackboard ( class UPawnAllegiance* Allegiance );
	void InitSequence ( class UActionSequence* NewSequence );
	class UPawnAllegiance* GetAllegiance ( );
	class UAIDefinition* GetAIDefinition ( );
	class UAIComponent* GetAIComponent ( );
	class UIAIInterface* GetAIParent ( );
	struct FVector GetAILocation ( );
	class AActor* GetAIActor ( );
	bool CanTickAI ( );
	void CatchupInitialColiseumStat ( class AWillowPlayerController* InWPC, int InitialKillCount );
	void ConditionallyConfigureColiseum ( class AWillowPlayerController* NewPlayer );
	void PublishColiseumStatDeltaForPlayer ( class AWillowPlayerController* InWPC, unsigned char StatType, int StatDelta );
	void PublishColiseumStatDeltas ( );
	void RemoveColiseumStatCacheForPlayer ( class AWillowPlayerController* InWPC );
	void InitColiseumStatArray ( class AWillowPlayerController* WPC, TArray< struct FColiseumStat >* Stats );
	void FinishInitializingColiseumStatCache ( );
	void InitColiseumStatCacheForPlayer ( class AWillowPlayerController* InWPC );
	void ClearColiseumStatCache ( );
	bool ShouldRestartPlayerAfterLogin ( int PlayerIndex );
	void SetRestartPlayerAfterLogin ( int PlayerIndex, unsigned long bEnabled );
	bool ShouldInitializeStartupTeleporterAttribute ( );
	void SetStartupTeleporterAttributeInitialization ( unsigned long bShouldInitialize );
	bool PlayerResetShop ( class AWillowPlayerController* Player, class UIShop* Shop );
	void RemoveWaypointComponent ( class AActor* WaypointActor, class UWaypointComponent* Waypoint );
	void AddWaypointComponent ( class AActor* WaypointActor, class UWaypointComponent* Waypoint );
	void ClearRemainingProjectiles ( );
	bool TravelPostCountdownInProcess ( );
	bool TravelCountdownInProcess ( );
	void ClearTravelData ( );
	void TravelPostCountdown ( );
	void TravelCountdown ( );
	void InitiateTravel ( class APlayerController* InstigatingPlayer, struct FName StationDefinitionName, class UBehavior_CheckMapChangeConditions* Behavior, class UICustomEvent* EventInterface, class UTravelStationDefinition* StationDefinition );
	bool CanAllPlayersTravelToDlcDestination ( class UDownloadableExpansionDefinition* ExpansionDef );
	TArray< class AWillowPlayerController* > GetDlcNotLicensedPlayerList ( class UDownloadableContentDefinition* DlcDef );
	TArray< class AWillowPlayerController* > GetDlcCannotTravelPlayerList ( class UDownloadableExpansionDefinition* ExpansionDef );
	void TravelToFastTravelStation ( struct FName StationDefinitionName );
	void TeleportToFinalDestinationAfterLoad ( );
	void TravelToRealDestinationLevel ( );
	void CommitTravelToNewLevel ( );
	void TravelToStation ( class UTravelStationDefinition* DestTravelStation, unsigned long bForceLevelLoad );
	bool eventCheckMapChangeConditions ( class APlayerController* InstigatingPlayer );
	void TryFireInstigatorImpatientVO ( class AWillowPlayerController* Blocker );
	bool FireInstigatorImpatientVO ( class AWillowPawn* Speaker, class AWillowPawn* Blocker );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	void eventEndGameHack ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void DelayedEndGame ( );
	void InitGameReplicationInfo ( );
	void eventPostCommitMapChange ( );
	void PlayerLeftGameNotification ( class APlayerController* PC );
	void PlayerEnteredGameNotification ( class APlayerController* PC );
	void UpdatePlayerObservers ( );
	void RemovePlayerObserver ( class UIPlayerObserver* Observer );
	void AddPlayerObserver ( class UIPlayerObserver* Observer );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class AActor* StartSpot );
	void InitiatePlayerPawnDataLoad ( class AController* NewPlayer );
	void ResurrectAllPlayers ( class APawn* DeadPlayer );
	void HandlePlayerDeathResurrection ( class APawn* DeadPlayer, unsigned char ResurrectReason );
	bool AllowCheats ( class APlayerController* P );
	void ResetAI ( );
	bool ShouldCensorContent ( );
	bool IsShippingBuild ( );
	bool IsEditor ( );
	class ABlackMarketUpgradeManager* GetBlackMarketUpgradeManager ( );
	class UPlayerStatsNotifier* GetPlayerStatsNotifier ( );
	class UCombatMusicManager* GetCombatMusicManager ( );
	class AChallengeManager* GetChallengeManager ( );
	class UPlayerInteractionManager* GetPlayerInteractionManager ( );
	class ASkillEffectManager* GetSkillManager ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	void ActivateVehicleFactory ( class AWillowVehicleFactory* VF );
	void RegisterVehicle ( class AWillowVehicle* V );
	bool ShouldRespawn ( class APickupFactory* Other );
	void AwardCombatExperience ( class AWillowPlayerController* KillerWPC, class AActor* KilledActor, float TotalExpPoints );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, class UDamagePipeline* Pipeline );
	void InitializeStartupTeleporterAttribute ( );
	void SetInitialTeleportDestination ( struct FName InitialTeleporter );
	class AActor* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	struct FString DecodeEvent ( struct FName EventType, int TeamNo, struct FString InstigatorName, struct FString AdditionalName, class UClass* AdditionalObj );
	void RestartPlayer ( class AController* NewPlayer );
	void SyncKismetSetProperties ( class AWillowPlayerController* PC );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void StartMatch ( );
	void Logout ( class AController* Exiting );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	bool ShouldPawnDropWeaponOnDeath ( class APawn* P );
	void ApplyGlobalPlayerMovementSettings ( class APawn* PlayerPawn );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	bool HasDesignerAttribute ( struct FName DesignerAttributeName );
	class UInstancedDesignerAttribute* eventGetInstancedDesignerAttribute ( class UAttributeDefinition* Definition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	class UInstancedDesignerAttribute* CreateDesignerAttribute ( class UDesignerAttributeDefinition* Definition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
};

UClass* AWillowGameInfo::pClassPointer = NULL;

// Class WillowGame.PlayerInteractionManager
// 0x0014 (0x0050 - 0x003C)
class UPlayerInteractionManager : public UObject
{
public:
	TArray< struct FActiveInteraction >                Interactions;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TickDelay;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              TimeToTick;                                       		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4192 ];

		return pClassPointer;
	};

	void GetInteractionPlayers ( class UPlayerInteractionServer* ForServer, TArray< class AWillowPlayerController* >* Players );
	bool IsInInteraction ( class AWillowPlayerController* Player );
	class UPlayerInteractionServer* GetServerForPlayer ( class AWillowPlayerController* Player );
	class AWillowPlayerController* GetInstigator ( class UPlayerInteractionServer* Server );
	void RelayMessage ( class AWillowPlayerController* FromPlayer, class UClass* ClientType, int MessageValue, class UObject* Data );
	bool StartInteraction ( class UPlayerInteractionServer* NewServer, TArray< class AWillowPlayerController* > Players, class AWillowPlayerController* InteractionInstigator );
};

UClass* UPlayerInteractionManager::pClassPointer = NULL;

// Class WillowGame.PlayerInteractionServer
// 0x0008 (0x0044 - 0x003C)
class UPlayerInteractionServer : public UObject
{
public:
	unsigned long                                      bIsDone : 1;                                      		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              TimeoutTime;                                      		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4194 ];

		return pClassPointer;
	};

	bool IsValid ( );
	bool CanReceiveMessages ( );
	void MarkDone ( );
	void eventHandleInteractionEnded ( );
	void BroadcastMessage ( int MessageData, class UObject* Data );
	void SendMessage ( class AWillowPlayerController* Player, int MessageData, class UObject* Data );
	bool UsesClientType ( class UClass* ClientType );
	void HandleMessage ( class AWillowPlayerController* FromPlayer, int MessageData, class UObject* Data );
	class UClass* GetClientType ( );
	int GetInitialMessageForPlayer ( class AWillowPlayerController* WPC );
	void Initialize ( );
};

UClass* UPlayerInteractionServer::pClassPointer = NULL;

// Class WillowGame.VehicleSeatSwap_PlayerInteractionServer
// 0x0008 (0x004C - 0x0044)
class UVehicleSeatSwap_PlayerInteractionServer : public UPlayerInteractionServer
{
public:
	class AWillowVehicle*                              PlayerVehicle;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                RequestedSeat;                                    		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4196 ];

		return pClassPointer;
	};

	bool IsValid ( );
	void Initialize ( );
	class UClass* GetClientType ( );
	int GetInitialMessageForPlayer ( class AWillowPlayerController* WPC );
	void HandleMessage ( class AWillowPlayerController* FromPlayer, int MessageData, class UObject* Data );
};

UClass* UVehicleSeatSwap_PlayerInteractionServer::pClassPointer = NULL;

// Class WillowGame.PlayerKillVolume
// 0x0004 (0x01C0 - 0x01BC)
class APlayerKillVolume : public AVolume
{
public:
	unsigned long                                      bKillPlayers : 1;                                 		// 0x01BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillAIPawns : 1;                                 		// 0x01BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInstaKill : 1;                                   		// 0x01BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4198 ];

		return pClassPointer;
	};

	void KillAIPawn ( class AWillowAIPawn* WAP );
	class AController* GetBestKillerFor ( class APawn* P );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* APlayerKillVolume::pClassPointer = NULL;

// Class WillowGame.PlayerNameIdentifierDefinition
// 0x0174 (0x01B0 - 0x003C)
class UPlayerNameIdentifierDefinition : public UGBXDefinition
{
public:
	struct FString                                     CharacterName;                                    		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LocalizedCharacterName;                           		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedCharacterDescription;                    		// 0x0054 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedActionSkillDescription;                  		// 0x0060 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedPreferredWeaponDescription;              		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                XlastCharacterIdOffset;                           		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPlayerClassIdentifierDefinition*            CharacterClassId;                                 		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPlayerSaveGame*                             DefaultSaveGame;                                  		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                UISortOrder;                                      		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      IsDefaultNewCharacter : 1;                        		// 0x0088 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      GFxActionSkillHasBar : 1;                         		// 0x0088 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      GFxActionSkillHasFade : 1;                        		// 0x0088 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      GFxActionSkillDeferTimeToSkill : 1;               		// 0x0088 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      GFxActionSkillGuideCanBeHidden : 1;               		// 0x0088 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShouldOwnDLCToBeVisible : 1;                     		// 0x0088 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	class USwfMovie*                                   StatusMenuGFxPortrait;                            		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     PlayerRegistrationPortraitName;                   		// 0x0090 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                CharacterSelectionGFxMovieId;                     		// 0x009C (0x0004) [0x0000000020000003]              ( CPF_Edit | CPF_Const | CPF_Deprecated )
	struct FString                                     CharacterSelectionGFxMovieVarString;              		// 0x00A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class USwfMovie*                                   CharacterIconSwfMovie;                            		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USwfMovie*                                   CoopCharacterIconSwfMovie;                        		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     ScaleformSkillLeftBranchName;                     		// 0x00B4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ScaleformSkillMiddleBranchName;                   		// 0x00C0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ScaleformSkillRightBranchName;                    		// 0x00CC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillBarPath;                            		// 0x00D8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillStartPath;                          		// 0x00E4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillStartString;                        		// 0x00F0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class USwfMovie*                                   GFxActionSkillStartExternalClip;                  		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     GFxActionSkillFadeGotoAndPlayString;              		// 0x0100 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillFadeString;                         		// 0x010C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class USwfMovie*                                   GFxActionSkillPortrait;                           		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     GFxActionSkillTooltipPath;                        		// 0x011C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillActivateTooltipValue;               		// 0x0128 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillDisableTooltipValue;                		// 0x0134 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillTooltipStringPath;                  		// 0x0140 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillTooltipString;                      		// 0x014C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillEnablePath;                         		// 0x0158 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillEnableValue;                        		// 0x0164 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillDisablePath;                        		// 0x0170 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillDisableValue;                       		// 0x017C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillGuideHideGotoAndPlayString;         		// 0x0188 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillGuideHideStart;                     		// 0x0194 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GFxActionSkillGuideHideResume;                    		// 0x01A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UDownloadableCharacterDefinition*            DlcCharDef;                                       		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4200 ];

		return pClassPointer;
	};

	struct FString eventGetCoopCharacterIconSwfMoviePath ( );
	struct FString eventGetCharacterIconSwfMoviePath ( );
	struct FString eventGetPortraitSwfMoviePath ( );
};

UClass* UPlayerNameIdentifierDefinition::pClassPointer = NULL;

// Class WillowGame.PlayerReplicationInfoAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UPlayerReplicationInfoAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4202 ];

		return pClassPointer;
	};

};

UClass* UPlayerReplicationInfoAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.PlayerSaveGame
// 0x0218 (0x0254 - 0x003C)
class UPlayerSaveGame : public UObject
{
public:
	struct FPlayerUIPreferences                        UIPreferences;                                    		// 0x003C (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPlayerClassDefinition*                      PlayerClassDefinition;                            		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ExpLevel;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ExpPoints;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GeneralSkillPoints;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpecialistSkillPoints;                            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrencyOnHand[ 0xD ];                            		// 0x0068 (0x0034) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlaythroughsCompleted;                            		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsBoostedCharacter : 1;                          		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReceivedDefaultWeapon : 1;                       		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsBadassModeSaveGame : 1;                        		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsDlcPlayerClass : 1;                            		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowNewPlaythroughNotification : 1;              		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bAwesomeSkillDisabled : 1;                        		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	TArray< struct FSkillSaveGameData >                SkillData;                                        		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FResourceSaveGameData >             ResourceData;                                     		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FInventorySaveGameData >            ItemData;                                         		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcItemSaveGameData >    UnloadableDlcItemData;                            		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInventorySlotSaveGameData                  InventorySlotData;                                		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FWeaponSaveGameData >               WeaponData;                                       		// 0x00E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcWeaponSaveGameData >  UnloadableDlcWeaponData;                          		// 0x00EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMissionPlaythroughSaveGameData >   MissionPlaythroughs;                              		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UCustomizationDefinition*                    AppliedCustomizations[ 0x5 ];                     		// 0x0104 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            StatsData;                                        		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             VisitedTeleporters;                               		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       LastVisitedTeleporter;                            		// 0x0130 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                SaveGameId;                                       		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SaveVersion;                                      		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PlotMissionNumber;                                		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ActiveMissionNumber;                              		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      UsedMarketingCodes;                               		// 0x0148 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      MarketingCodesNeedingNotification;                		// 0x0154 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                TotalPlayTime;                                    		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LastSavedDate;                                    		// 0x0164 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FExpansionData >                    DLCExpansionData;                                 		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UChallengeDefinition* >              ChallengeList;                                    		// 0x017C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcChallengeData >       UnloadableDlcChallengeList;                       		// 0x0188 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRegionGameStageData >              RegionGameStages;                                 		// 0x0194 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcRegionGameStageData > UnloadableDlcRegionGameStages;                    		// 0x01A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FWorldDiscoveryData >               WorldDiscoveryList;                               		// 0x01AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      BlackMarketUpgrades;                              		// 0x01B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGuid                                       SaveGuid;                                         		// 0x01C4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      LevelChallengeUnlocks;                            		// 0x01D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FOneOffLevelChallengeData >         OneOffLevelChallengeCompletion;                   		// 0x01E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxBankSlots;                                     		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FBankSlot >                         BankSlots;                                        		// 0x01F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumChallengePrestiges;                            		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLockoutData >                      LockoutList;                                      		// 0x0200 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcLockoutData >         UnloadableDlcLockoutList;                         		// 0x020C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DLCPlayerClassPackageId;                          		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             FullyExploredAreas;                               		// 0x021C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumGoldenKeysNotified;                            		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastPlaythroughNumber;                            		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UTrainingMessageDefinition* >        QueuedTrainingMessages;                           		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumOverpowerLevelsUnlocked;                       		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastOverpowerChoice;                              		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FChosenVehicleCustomization >       ChosenVehicleCustomizations;                      		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                VehicleSteeringMode;                              		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4204 ];

		return pClassPointer;
	};

};

UClass* UPlayerSaveGame::pClassPointer = NULL;

// Class WillowGame.PlayerSkillAttributeValueResolver
// 0x0004 (0x0040 - 0x003C)
class UPlayerSkillAttributeValueResolver : public UAttributeValueResolver
{
public:
	class USkillDefinition*                            AssociatedSkill;                                  		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4206 ];

		return pClassPointer;
	};

};

UClass* UPlayerSkillAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.WillowPlayerController
// 0x0F94 (0x1988 - 0x09F4)
class AWillowPlayerController : public AGearboxPlayerController
{
public:
	struct FPointer                                    VfTable_IIUpdatePostProcessOverride;              		// 0x09F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIControllerLocator;                      		// 0x09F8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIPlayerBehavior;                         		// 0x09FC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIPlayerMaster;                           		// 0x0A00 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIScreenParticle;                         		// 0x0A04 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIResourcePoolOwner;                      		// 0x0A08 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IISkillTreeListener;                      		// 0x0A0C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIFlagProvider;                           		// 0x0A10 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIStreamingDataEvent;                     		// 0x0A14 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0A18 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     QuickSaveFileName;                                		// 0x0A1C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SaveGameFilePrefix;                               		// 0x0A28 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GraveyardFileName;                                		// 0x0A34 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SparkStatFlushIntervalSeconds;                    		// 0x0A40 (0x0004) [0x0000000000000000]              
	float                                              PlayerLocationSparkPulseIntervalSeconds;          		// 0x0A44 (0x0004) [0x0000000000000000]              
	unsigned char                                      WeaponHandPreference;                             		// 0x0A48 (0x0001) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned char                                      WeaponHand;                                       		// 0x0A49 (0x0001) [0x0000000000000000]              
	unsigned char                                      PendingTransactionStatus;                         		// 0x0A4A (0x0001) [0x0000000000000000]              
	unsigned char                                      bCachedCanBeUsed[ 0x2 ];                          		// 0x0A4B (0x0002) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedHasPrompt[ 0x2 ];                          		// 0x0A4D (0x0002) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NextResistedAttackEventIndex;                     		// 0x0A4F (0x0001) [0x0000000000000000]              
	unsigned char                                      OldestResistedAttackEventIndex;                   		// 0x0A50 (0x0001) [0x0000000000000000]              
	unsigned char                                      ActiveWeaponSlot;                                 		// 0x0A51 (0x0001) [0x0000000000000000]              
	unsigned char                                      OffHandWeaponSlot;                                		// 0x0A52 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastActiveStatusMenuScreen;                       		// 0x0A53 (0x0001) [0x0000000000000000]              
	unsigned char                                      QuickAccessScreen;                                		// 0x0A54 (0x0001) [0x0000000000000000]              
	unsigned char                                      ContextualPromptScreen;                           		// 0x0A55 (0x0001) [0x0000000000000000]              
	unsigned char                                      RetryPromptScreen;                                		// 0x0A56 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastMissionSortType;                              		// 0x0A57 (0x0001) [0x0000000000000000]              
	unsigned char                                      TravelToPlatformSpecificInfo[ 0x50 ];             		// 0x0A58 (0x0050) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentOnlineMessageType;                         		// 0x0AA8 (0x0001) [0x0000000000000000]              
	unsigned long                                      bCenteredWeaponFire : 1;                          		// 0x0AAC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsTyping : 1;                                    		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBehindView : 1;                                  		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAlwaysLookDownCamera : 1;                        		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bViewingThirdPersonMenu : 1;                      		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bSuppressingThirdPersonMenu : 1;                  		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bMayUpdateHealthGainStat : 1;                     		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDemiGodMode : 1;                                 		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bHLQNoClipMode : 1;                               		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      HLQPlayerMoving : 1;                              		// 0x0AAC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bLandingShake : 1;                                		// 0x0AAC (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bHideAmmoOnHUD : 1;                               		// 0x0AAC (0x0004) [0x0000000000000020] [0x00000800] ( CPF_Net )
	unsigned long                                      bHideCompassOnHUD : 1;                            		// 0x0AAC (0x0004) [0x0000000000000020] [0x00001000] ( CPF_Net )
	unsigned long                                      bHideSkillsOnHUD : 1;                             		// 0x0AAC (0x0004) [0x0000000000000020] [0x00002000] ( CPF_Net )
	unsigned long                                      bHideXPOnHUD : 1;                                 		// 0x0AAC (0x0004) [0x0000000000000020] [0x00004000] ( CPF_Net )
	unsigned long                                      HasStartedVehicleCameraAction : 1;                		// 0x0AAC (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bSuspendHUDReInitOnPossession : 1;                		// 0x0AAC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bInitialSpawn : 1;                                		// 0x0AAC (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bRespawnFromClassChange : 1;                      		// 0x0AAC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bLoadingCharacterPackageForClassSwitch : 1;       		// 0x0AAC (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bPerformingMeleeAttack : 1;                       		// 0x0AAC (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bThrowingGrenade : 1;                             		// 0x0AAC (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bPerformingSharedWeaponAction : 1;                		// 0x0AAC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bConsoleController : 1;                           		// 0x0AAC (0x0004) [0x0000000000000020] [0x00800000] ( CPF_Net )
	unsigned long                                      bDebugMeleeSkill : 1;                             		// 0x0AAC (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bDisableEchoVideos : 1;                           		// 0x0AAC (0x0004) [0x0000000000004000] [0x02000000] ( CPF_Config )
	unsigned long                                      ShouldDisplaySkillTooltip : 1;                    		// 0x0AAC (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bIsShopping : 1;                                  		// 0x0AAC (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      SummedDamageOnlyAffectedShield : 1;               		// 0x0AAC (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bHUDDamageIndicatorAdded : 1;                     		// 0x0AAC (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bShowBasicPlayerDebugInfo : 1;                    		// 0x0AAC (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bDebugDisplayActorInfo : 1;                       		// 0x0AAC (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bDebugDisplayLocked : 1;                          		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowDenInfo : 1;                                 		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMainMenu_HostGame : 1;                           		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bMainMenu_SplitScreen : 1;                        		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWasActionSkillRunning : 1;                       		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasHealthy : 1;                                  		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWasCinematic : 1;                                		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bReadyForCommit : 1;                              		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bReadyForPlay : 1;                                		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bTeleporterRestricted : 1;                        		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bWeaponsRestricted : 1;                           		// 0x0AB0 (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned long                                      bPendingZoom : 1;                                 		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDoDOFOnReload : 1;                               		// 0x0AB0 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bViewPointDirty : 1;                              		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bFireDelay : 1;                                   		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bEnableGamepadWalkRunMovement : 1;                		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bKickSplitPlayerForInvite : 1;                    		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bSwappedControllerIdsForInvite : 1;               		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bIsTargetingSomething : 1;                        		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bWaitingForSaveGameId : 1;                        		// 0x0AB0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bWantsToShowPauseMenu : 1;                        		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bWantsToSprint : 1;                               		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bClientIsSprinting : 1;                           		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bInSprintState : 1;                               		// 0x0AB0 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bPressedSprint : 1;                               		// 0x0AB0 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bSaveGameLoaded : 1;                              		// 0x0AB0 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bAllowWeaponsRestriction : 1;                     		// 0x0AB0 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bSaveBeforeInviteJoin : 1;                        		// 0x0AB0 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bRemoveSplitPlayerAfterSave : 1;                  		// 0x0AB0 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bCurrentEchoPSCDesiredVisibility : 1;             		// 0x0AB0 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bCanPlaySkidImpact : 1;                           		// 0x0AB0 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bAwaitingPS3LoadGame : 1;                         		// 0x0AB0 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bAwaitingPS3ImportGame : 1;                       		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasBeenTeleportedOnce : 1;                       		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAwaitingRespawnDontSetCinematicMode : 1;         		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHideTeleportTunnel : 1;                          		// 0x0AB4 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bReceivedDefaultWeapon : 1;                       		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDisplayTradeIcon : 1;                            		// 0x0AB4 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisplayTradeDisabledIcon : 1;                    		// 0x0AB4 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bShowCoopRangeDebug : 1;                          		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAutoAimEnabled : 1;                              		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bMouseAutoAimEnabled : 1;                         		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bShowingQuickSelectMenu : 1;                      		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCrouchToggle : 1;                                		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bZoomToggle : 1;                                  		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bUseDriftCameraLock : 1;                          		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bUseInvertedReverseSteering : 1;                  		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bTradingDisabled : 1;                             		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bItemRotationNew : 1;                             		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bGunzerkingAutoSwitch : 1;                        		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bStartFireZeroWasGunzerking : 1;                  		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bStartFireOneWasGunzerking : 1;                   		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bStartFireZeroBeforeGunzerking : 1;               		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAbsoluteMinimap : 1;                             		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bPreferVerticalSplit : 1;                         		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bDisableUISway : 1;                               		// 0x0AB4 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bMissionWeaponHelpContextualPromptEnabled : 1;    		// 0x0AB4 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bShowUndiscoveredMissions : 1;                    		// 0x0AB4 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bResurrectAll : 1;                                		// 0x0AB4 (0x0004) [0x0000000000000020] [0x04000000] ( CPF_Net )
	unsigned long                                      bDisplayedCancel : 1;                             		// 0x0AB4 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bResultsScreenOpen : 1;                           		// 0x0AB4 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bShowDelayedRewardForAllMissions : 1;             		// 0x0AB4 (0x0004) [0x0000000000004000] [0x20000000] ( CPF_Config )
	unsigned long                                      bSuppressCoopLevelUpDing : 1;                     		// 0x0AB4 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bUseRealTimeForWeaponZoom : 1;                    		// 0x0AB4 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bAllowPerShotForceFeedback : 1;                   		// 0x0AB8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bHardcoreCharacter : 1;                           		// 0x0AB8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAwaitingFastForwardPrompt : 1;                   		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWantsToDisableLoadingMovie : 1;                  		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPlayingTeleporterSound : 1;                      		// 0x0AB8 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bLastLoadPlayer : 1;                              		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bLastUpdatePRI : 1;                               		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWaitingForAsyncCharacterLoad : 1;                		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bReturningToMenu : 1;                             		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bCustomizationUnlocksInitialized : 1;             		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bAsyncInProgress : 1;                             		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bHostLanGame : 1;                                 		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bUserNetworkOperation : 1;                        		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bRestoringNetwork : 1;                            		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bNonBlockingRestore : 1;                          		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bEnteredEasterEggCode : 1;                        		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bEnabledEasterEggOption : 1;                      		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bConsumeSparkGoldenKeyAfterProfileWrite : 1;      		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bHasSeenGoldenKeyMessageThisSession : 1;          		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bShowNewPlaythroughNotification : 1;              		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bShowAlmostNewPlaythroughNotification : 1;        		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bAwesomeSkillDisabled : 1;                        		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bWriteProfileNextTick : 1;                        		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bUpdateOnlineGameSettingsNextTick : 1;            		// 0x0AB8 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bUpdatingOnlineGameSettings : 1;                  		// 0x0AB8 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bSetOnlineStatusNextTick : 1;                     		// 0x0AB8 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bDownloadingPatcherFiles : 1;                     		// 0x0AB8 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bBoundaryWarningEnabled : 1;                      		// 0x0AB8 (0x0004) [0x0000000000002020] [0x08000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCloseHUDNextTick : 1;                            		// 0x0AB8 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bTextureMovieIsPaused : 1;                        		// 0x0AB8 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bStopgapBlockForDeferredMovies : 1;               		// 0x0AB8 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      OverpowerChoiceValuePendingSave : 1;              		// 0x0AB8 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	float                                              HealthStatAccumulator;                            		// 0x0ABC (0x0004) [0x0000000000000000]              
	float                                              HLQPlayerMoveTime;                                		// 0x0AC0 (0x0004) [0x0000000000000000]              
	class UAkSwitch*                                   FirstPersonAkSwitch;                              		// 0x0AC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkSwitch*                                   ThirdPersonAkSwitch;                              		// 0x0AC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowAutoAimStrategy*                      AutoAimStrategy;                                  		// 0x0ACC (0x0004) [0x0000000000000000]              
	float                                              LastCameraTimeStamp;                              		// 0x0AD0 (0x0004) [0x0000000000000000]              
	class UClass*                                      MatineeCameraClass;                               		// 0x0AD4 (0x0004) [0x0000000000000000]              
	class AActor*                                      CalcViewActor;                                    		// 0x0AD8 (0x0004) [0x0000000000000000]              
	class APawn*                                       CalcViewPawn;                                     		// 0x0ADC (0x0004) [0x0000000000000000]              
	struct FVector                                     CalcViewActorLocation;                            		// 0x0AE0 (0x000C) [0x0000000000000000]              
	float                                              CalcViewPawnEyeHeight;                            		// 0x0AEC (0x0004) [0x0000000000000000]              
	struct FVector                                     CalcViewLocation;                                 		// 0x0AF0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    CalcViewRotation;                                 		// 0x0AFC (0x000C) [0x0000000000000000]              
	struct FRotator                                    CameraRotFixedView;                               		// 0x0B08 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastVehicleSeatIndex;                             		// 0x0B14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastVehicleFOV;                                   		// 0x0B18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCameraAnimInst*                             CameraAnimPlayer;                                 		// 0x0B1C (0x0004) [0x0000000000000000]              
	class UCameraAnimInst*                             CameraAnimSeqPlayer;                              		// 0x0B20 (0x0004) [0x0000000000000000]              
	struct FVector                                     CameraAnimOffset;                                 		// 0x0B24 (0x000C) [0x0000000000000000]              
	struct FRotator                                    CameraAnimRot;                                    		// 0x0B30 (0x000C) [0x0000000000000000]              
	class AWillowPawn*                                 MyWillowPawn;                                     		// 0x0B3C (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPlayerCharacterClassName;                  		// 0x0B40 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPlayerClassDefinition*                      PlayerClass;                                      		// 0x0B4C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FResourcePoolReference                      ExpPool;                                          		// 0x0B50 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FResourcePoolReference                      SkillCooldownPool;                                		// 0x0B5C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FResourcePoolReference                      MeleeSkillCooldownPool;                           		// 0x0B68 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UPlayerSkillTree*                            PlayerSkillTree;                                  		// 0x0B74 (0x0004) [0x0000000000000000]              
	class UPlayerInteractionClient*                    InteractionClient;                                		// 0x0B78 (0x0004) [0x0000000000000000]              
	float                                              CurrentInstantHitCriticalHitBonus;                		// 0x0B7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentInstantHitCriticalHitBonusBaseValue;       		// 0x0B80 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CurrentInstantHitCriticalHitBonusModifierStack;   		// 0x0B84 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CurrentMeleeCriticalHitBonus;                     		// 0x0B90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMeleeCriticalHitBonusBaseValue;            		// 0x0B94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CurrentMeleeCriticalHitBonusModifierStack;        		// 0x0B98 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ExpScaleForCriticalHitKills;                      		// 0x0BA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExpScaleForCriticalHitKillsBaseValue;             		// 0x0BA8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExpScaleForCriticalHitKillsModifierStack;         		// 0x0BAC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AttackUnsuspectingTargetDamageModifier;           		// 0x0BB8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttackUnsuspectingTargetDamageModifierBaseValue;  		// 0x0BBC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AttackUnsuspectingTargetDamageModifierModifierStack;		// 0x0BC0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              MeleeAttackTargetFromBehindDamageModifier;        		// 0x0BCC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeleeAttackTargetFromBehindDamageModifierBaseValue;		// 0x0BD0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MeleeAttackTargetFromBehindDamageModifierModifierStack;		// 0x0BD4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AttackInjuredMeleeDamageModifier;                 		// 0x0BE0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttackInjuredMeleeDamageModifierBaseValue;        		// 0x0BE4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AttackInjuredMeleeDamageModifierModifierStack;    		// 0x0BE8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ConvertDamageToHealingPercent;                    		// 0x0BF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConvertDamageToHealingPercentBaseValue;           		// 0x0BF8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ConvertDamageToHealingPercentModifierStack;       		// 0x0BFC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PendingHealAmount;                                		// 0x0C08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetMinHealthDamageBoostPercent;                		// 0x0C0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetMinHealthDamageBoostPercentBaseValue;       		// 0x0C10 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                TargetMinHealthDamageBoostPercentModifierStack;   		// 0x0C14 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              TargetOverMinHealthGunDamageMultiplier;           		// 0x0C20 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetOverMinHealthGunDamageMultiplierBaseValue;  		// 0x0C24 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                TargetOverMinHealthGunDamageMultiplierModifierStack;		// 0x0C28 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              DamageReturnPercent;                              		// 0x0C34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageReturnPercentBaseValue;                     		// 0x0C38 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                DamageReturnPercentModifierStack;                 		// 0x0C3C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              FirstShotInClipBonusModifier;                     		// 0x0C48 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FirstShotInClipBonusModifierBaseValue;            		// 0x0C4C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                FirstShotInClipBonusModifierModifierStack;        		// 0x0C50 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastShotInClipBonusModifier;                      		// 0x0C5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastShotInClipBonusModifierBaseValue;             		// 0x0C60 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                LastShotInClipBonusModifierModifierStack;         		// 0x0C64 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                AmmoResourceUpgrades[ 0x8 ];                      		// 0x0C70 (0x0020) [0x0000000000000020]              ( CPF_Net )
	class UIPickupable*                                CurrentTouchedPickupable;                         		// 0x0C90 (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0C94 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIPickupable*                                CurrentSeenPickupable;                            		// 0x0C98 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0C9C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIUsable*                                    CurrentUsableObject;                              		// 0x0CA0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0CA4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FInteractionIconWithOverrides               CurrentInteractionIcon[ 0x2 ];                    		// 0x0CA8 (0x0028) [0x0000000000000020]              ( CPF_Net )
	class UIShop*                                      ActiveShop;                                       		// 0x0CD0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0CD4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIFocusable*                                 FocusObject;                                      		// 0x0CD8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0CDC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              FocusFOVAngle;                                    		// 0x0CE0 (0x0004) [0x0000000000000000]              
	float                                              FocusCamReturnTime;                               		// 0x0CE4 (0x0004) [0x0000000000000000]              
	struct FRotator                                    FocusCamRot;                                      		// 0x0CE8 (0x000C) [0x0000000000000000]              
	struct FVector                                     FocusCamLoc;                                      		// 0x0CF4 (0x000C) [0x0000000000000000]              
	float                                              FocusCamTimestamp;                                		// 0x0D00 (0x0004) [0x0000000000000000]              
	float                                              LastTauntAnimTime;                                		// 0x0D04 (0x0004) [0x0000000000000000]              
	struct FVector                                     SummedDamageDirection;                            		// 0x0D08 (0x000C) [0x0000000000000000]              
	struct FName                                       DebugTraceHitActor;                               		// 0x0D14 (0x0008) [0x0000000000000000]              
	struct FName                                       DebugTraceHitActorSubLevel;                       		// 0x0D1C (0x0008) [0x0000000000000000]              
	int                                                DebugTraceDistanceUnits;                          		// 0x0D24 (0x0004) [0x0000000000000000]              
	struct FName                                       MainMenu_MapName;                                 		// 0x0D28 (0x0008) [0x0000000000000000]              
	struct FString                                     MainMenu_CharacterClass[ 0x2 ];                   		// 0x0D30 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MainMenu_NumPlayers;                              		// 0x0D48 (0x0004) [0x0000000000000000]              
	int                                                MainMenu_CurrentPlayer;                           		// 0x0D4C (0x0004) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   SplitscreenJoinCompleteDelegates;                 		// 0x0D50 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UTrainingMessageDefinition* >        QueuedTrainingMessages;                           		// 0x0D5C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UTrainingMessageDefinition* >        PendingQueuedTrainingMessages;                    		// 0x0D68 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastTrainingMessagePostponeTime;                  		// 0x0D74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVModifierSpeed;                                 		// 0x0D78 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              FOVModifierSpeedBaseValue;                        		// 0x0D7C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                FOVModifierSpeedModifierStack;                    		// 0x0D80 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CachedFOVAngle;                                   		// 0x0D8C (0x0004) [0x0000000000000000]              
	float                                              LastFOVAngleUpdateTime;                           		// 0x0D90 (0x0004) [0x0000000000000000]              
	float                                              FOVAspectRatioScalar_View;                        		// 0x0D94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FOVAspectRatioScalar_Fore;                        		// 0x0D98 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FOVScalar_VertSplit_View;                         		// 0x0D9C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FOVScalar_VertSplit_Fore;                         		// 0x0DA0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FOVScalar_HorzSplit_View;                         		// 0x0DA4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FOVScalar_HorzSplit_Fore;                         		// 0x0DA8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UWillowAIDebugCamera*                        WillowAIDebugCam;                                 		// 0x0DAC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    PainRot;                                          		// 0x0DB0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DesiredPainRot;                                   		// 0x0DBC (0x000C) [0x0000000000000000]              
	struct FVector                                     PainOffset;                                       		// 0x0DC8 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredPainOffset;                                		// 0x0DD4 (0x000C) [0x0000000000000000]              
	float                                              PainFOV;                                          		// 0x0DE0 (0x0004) [0x0000000000000000]              
	float                                              DesiredPainFOV;                                   		// 0x0DE4 (0x0004) [0x0000000000000000]              
	float                                              PainEndTime;                                      		// 0x0DE8 (0x0004) [0x0000000000000000]              
	class APawn*                                       LastPawn;                                         		// 0x0DEC (0x0004) [0x0000000000000000]              
	TArray< struct FPostProcessOverlayInfo >           PostProcessOverlayList;                           		// 0x0DF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PostProcessDurationMultiplier;                    		// 0x0DFC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LastLevelUpTime;                                  		// 0x0E00 (0x0004) [0x0000000000000000]              
	float                                              LastLevelUpSoundTime;                             		// 0x0E04 (0x0004) [0x0000000000000000]              
	class UProjectileDefinition*                       LastProjectileDefinition;                         		// 0x0E08 (0x0004) [0x0000000000000000]              
	float                                              TargetVerticalKickAmt;                            		// 0x0E0C (0x0004) [0x0000000000000000]              
	float                                              CurrentVerticalKickAmt;                           		// 0x0E10 (0x0004) [0x0000000000000000]              
	float                                              TargetHorizontalKickAmt;                          		// 0x0E14 (0x0004) [0x0000000000000000]              
	float                                              CurrentHorizontalKickAmt;                         		// 0x0E18 (0x0004) [0x0000000000000000]              
	float                                              LastWeaponKickTime;                               		// 0x0E1C (0x0004) [0x0000000000000000]              
	float                                              CurrentWanderAccuracy;                            		// 0x0E20 (0x0004) [0x0000000000000000]              
	float                                              WanderingPatternOscillatorPosition;               		// 0x0E24 (0x0004) [0x0000000000000000]              
	float                                              WanderingSmoothInDuration;                        		// 0x0E28 (0x0004) [0x0000000000000000]              
	float                                              WanderingSmoothInTimeRemaining;                   		// 0x0E2C (0x0004) [0x0000000000000000]              
	float                                              LastWanderingTime;                                		// 0x0E30 (0x0004) [0x0000000000000000]              
	class UUberPostProcessEffect*                      UberDOFEffect;                                    		// 0x0E34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialDOFFocusDistance;                          		// 0x0E38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPostProcessChainRecord >           PostProcessChainRecords;                          		// 0x0E3C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       LostShieldHealthParamName;                        		// 0x0E48 (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   LostShieldMaterialInstanceConstant;               		// 0x0E50 (0x0004) [0x0000000000000000]              
	float                                              RcpWeaponSpread;                                  		// 0x0E54 (0x0004) [0x0000000000000000]              
	float                                              CurrentWeaponAmmoRegenerationMultiplier;          		// 0x0E58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWeaponAmmoRegenerationMultiplierBaseValue; 		// 0x0E5C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CurrentWeaponAmmoRegenerationMultiplierModifierStack;		// 0x0E60 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                PlayerMovementType;                               		// 0x0E6C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AWillowPlayerStats*                          PlayerStats;                                      		// 0x0E70 (0x0004) [0x0000000000000000]              
	struct FInstanceDataSet                            InstanceState;                                    		// 0x0E74 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	int                                                SavedInviteControllerId;                          		// 0x0E80 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FOnlineGameSearchResult                     SavedInviteSearchResult;                          		// 0x0E84 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPawn*                                 CurrentActionSkillTarget;                         		// 0x0E8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInputContextSelectorBase*                   InputContextSelector;                             		// 0x0E90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScorpioDamageTypeSelector;                        		// 0x0E94 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScorpioDamageTypeSelectorBaseValue;               		// 0x0E98 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ScorpioDamageTypeSelectorModifierStack;           		// 0x0E9C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     SaveGameName;                                     		// 0x0EA8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SaveGameFileId;                                   		// 0x0EB4 (0x0004) [0x0000000000000000]              
	int                                                LastStationSaveTime;                              		// 0x0EB8 (0x0004) [0x0000000000000000]              
	TArray< struct FSpeedKillData >                    RecentKillHistory;                                		// 0x0EBC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrKillingSpree;                                 		// 0x0EC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ProfileMenuDlg;                                   		// 0x0ECC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWeapon*                                     LastUsedWeapon;                                   		// 0x0ED0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LoadedCharPlayTime;                               		// 0x0ED4 (0x0004) [0x0000000000000000]              
	class UPlayerSaveGame*                             LastLoadedSaveGame;                               		// 0x0ED8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SaveStartTime;                                    		// 0x0EDC (0x0004) [0x0000000000000000]              
	TArray< class AWillowPlayerController* >           PlayersToSave;                                    		// 0x0EE0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MinSaveDuration;                                  		// 0x0EEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         SavingDlg;                                        		// 0x0EF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         PS3WritingProfileDlg;                             		// 0x0EF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ControllerRemovedDlg;                             		// 0x0EF8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           LoadedLevelsList;                                 		// 0x0EFC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              KillSkillTimeRemaining;                           		// 0x0F08 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DurationOfLastKillSkillActivation;                		// 0x0F0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ADroppedPickup* >                    PickupsHiddenWhileInStatusMenu;                   		// 0x0F10 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      CurrentEchoActor;                                 		// 0x0F1C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowDialogEmoteDefinition*                CurrentEchoEmote;                                 		// 0x0F20 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextureMovie*                               CurrentEchoMovie;                                 		// 0x0F24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             CurrentEchoParticleSystem;                        		// 0x0F28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    CurrentEchoPSC;                                   		// 0x0F2C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              CurrentEchoPSCFadeStartTime;                      		// 0x0F30 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextureMovie*                               CurrentEchoVideoMovie;                            		// 0x0F34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentEchoOpacity;                               		// 0x0F38 (0x0004) [0x0000000000000000]              
	float                                              EchoPSCFadeTime;                                  		// 0x0F3C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MeleeHealthStealPercent;                          		// 0x0F40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeleeHealthStealPercentBaseValue;                 		// 0x0F44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MeleeHealthStealPercentModifierStack;             		// 0x0F48 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedBulletHealingModifier;                  		// 0x0F54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedBulletHealingModifierBaseValue;         		// 0x0F58 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedBulletHealingModifierModifierStack;     		// 0x0F5C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedMeleeHealingModifier;                   		// 0x0F68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedMeleeHealingModifierBaseValue;          		// 0x0F6C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedMeleeHealingModifierModifierStack;      		// 0x0F70 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedGrenadeHealingModifier;                 		// 0x0F7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedGrenadeHealingModifierBaseValue;        		// 0x0F80 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedGrenadeHealingModifierModifierStack;    		// 0x0F84 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedRocketHealingModifier;                  		// 0x0F90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedRocketHealingModifierBaseValue;         		// 0x0F94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedRocketHealingModifierModifierStack;     		// 0x0F98 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedStatusEffectHealingModifier;            		// 0x0FA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedStatusEffectHealingModifierBaseValue;   		// 0x0FA8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedStatusEffectHealingModifierModifierStack;		// 0x0FAC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedSkillHealingModifier;                   		// 0x0FB8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedSkillHealingModifierBaseValue;          		// 0x0FBC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedSkillHealingModifierModifierStack;      		// 0x0FC0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedBulletHealingModifier;                    		// 0x0FCC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedBulletHealingModifierBaseValue;           		// 0x0FD0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedBulletHealingModifierModifierStack;       		// 0x0FD4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedMeleeHealingModifier;                     		// 0x0FE0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedMeleeHealingModifierBaseValue;            		// 0x0FE4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedMeleeHealingModifierModifierStack;        		// 0x0FE8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedGrenadeHealingModifier;                   		// 0x0FF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedGrenadeHealingModifierBaseValue;          		// 0x0FF8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedGrenadeHealingModifierModifierStack;      		// 0x0FFC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedRocketHealingModifier;                    		// 0x1008 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedRocketHealingModifierBaseValue;           		// 0x100C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedRocketHealingModifierModifierStack;       		// 0x1010 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedStatusEffectHealingModifier;              		// 0x101C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedStatusEffectHealingModifierBaseValue;     		// 0x1020 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedStatusEffectHealingModifierModifierStack; 		// 0x1024 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedSkillHealingModifier;                     		// 0x1030 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedSkillHealingModifierBaseValue;            		// 0x1034 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedSkillHealingModifierModifierStack;        		// 0x1038 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedBulletShieldRestoreModifier;            		// 0x1044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedBulletShieldRestoreModifierBaseValue;   		// 0x1048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedBulletShieldRestoreModifierModifierStack;		// 0x104C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedMeleeShieldRestoreModifier;             		// 0x1058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedMeleeShieldRestoreModifierBaseValue;    		// 0x105C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedMeleeShieldRestoreModifierModifierStack;		// 0x1060 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedGrenadeShieldRestoreModifier;           		// 0x106C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedGrenadeShieldRestoreModifierBaseValue;  		// 0x1070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedGrenadeShieldRestoreModifierModifierStack;		// 0x1074 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedRocketShieldRestoreModifier;            		// 0x1080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedRocketShieldRestoreModifierBaseValue;   		// 0x1084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedRocketShieldRestoreModifierModifierStack;		// 0x1088 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedStatusEffectShieldRestoreModifier;      		// 0x1094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedStatusEffectShieldRestoreModifierBaseValue;		// 0x1098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedStatusEffectShieldRestoreModifierModifierStack;		// 0x109C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedSkillShieldRestoreModifier;             		// 0x10A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedSkillShieldRestoreModifierBaseValue;    		// 0x10AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedSkillShieldRestoreModifierModifierStack;		// 0x10B0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastKillExcessDamageDealt;                        		// 0x10BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastKillExcessDamageDealtBaseValue;               		// 0x10C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                LastKillExcessDamageDealtModifierStack;           		// 0x10C4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShakeOffsetLength;                                		// 0x10D0 (0x0004) [0x0000000000000000]              
	float                                              ShakeRotLength;                                   		// 0x10D4 (0x0004) [0x0000000000000000]              
	float                                              ShakeFOVLength;                                   		// 0x10D8 (0x0004) [0x0000000000000000]              
	int                                                PresenceUpdateInterval;                           		// 0x10DC (0x0004) [0x0000000000000000]              
	struct FLungeData                                  CurrentLunge;                                     		// 0x10E0 (0x0010) [0x0000000000000000]              
	class UAttributeModifier*                          LungeSpeedModifier;                               		// 0x10F0 (0x0004) [0x0000000000000000]              
	float                                              MaxLungeDistance;                                 		// 0x10F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxLungeDistanceBaseValue;                        		// 0x10F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MaxLungeDistanceModifierStack;                    		// 0x10FC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           SprintModifiers;                                  		// 0x1108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SprintFOVAngle;                                   		// 0x1114 (0x0004) [0x0000000000000000]              
	float                                              SprintDesiredFOV;                                 		// 0x1118 (0x0004) [0x0000000000000000]              
	struct FLurchData                                  CurrentLurch;                                     		// 0x111C (0x0014) [0x0000000000000000]              
	float                                              CurrentLurchPos;                                  		// 0x1130 (0x0004) [0x0000000000000000]              
	float                                              ActualCurrentLurchLoc;                            		// 0x1134 (0x0004) [0x0000000000000000]              
	float                                              ActualCurrentLurchRot;                            		// 0x1138 (0x0004) [0x0000000000000000]              
	float                                              ActualCurrentLurchRotRoll;                        		// 0x113C (0x0004) [0x0000000000000000]              
	class AVehicleSpawnStationTerminal*                ConnectedVSSTerminal;                             		// 0x1140 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                VSSSlotIndexForDelayedTeleport;                   		// 0x1144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxMovie*                             TheVSSUIMovie;                                    		// 0x1148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentStreamingDebugPage;                        		// 0x114C (0x0004) [0x0000000000000000]              
	TArray< struct FScreenParticleRecord >             ScreenParticleRecords;                            		// 0x1150 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FName >                             ActivatedTeleportersList;                         		// 0x115C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTravelStationDefinition*                    LastVisitedTeleporter;                            		// 0x1168 (0x0004) [0x0000000000000000]              
	struct FString                                     LastTouchedStationPath;                           		// 0x116C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScreenParticleModifier >           HoldingCellScreenParticleModifiers;               		// 0x1178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterialInterface*                          HoldingCellMaterialInterface;                     		// 0x1184 (0x0004) [0x0000000000000000]              
	struct FName                                       HoldingCellMatParamName;                          		// 0x1188 (0x0008) [0x0000000000000000]              
	TArray< struct FMissionPlaythroughData >           MissionPlaythroughs;                              		// 0x1190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FExpansionData >                    DLCExpansionData;                                 		// 0x119C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LoadingMovieShutoffTime;                          		// 0x11A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              UsableObjectUpdateTime;                           		// 0x11AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIUsable*                                    CachedUsableObject;                               		// 0x11B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x11B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UPrimitiveComponent*                         CachedUsableHitComponent;                         		// 0x11B8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              UsableObjectUpdateRate;                           		// 0x11BC (0x0004) [0x0000000000000000]              
	class APawnInteractionProxy*                       CachedTradeProxy;                                 		// 0x11C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxUIManager*                         GFxUIManager;                                     		// 0x11C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxMovieDefinition*                         PauseMenuDefinition;                              		// 0x11C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxMovieDefinition*                         LobbyMovieDefinition;                             		// 0x11CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     BinkLoadingMovieName;                             		// 0x11D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ScaleformLoadingMovieName;                        		// 0x11DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              PercentChanceInstigatedBulletDmgIgnoresShields;   		// 0x11E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PercentChanceInstigatedBulletDmgIgnoresShieldsBaseValue;		// 0x11EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PercentChanceInstigatedBulletDmgIgnoresShieldsModifierStack;		// 0x11F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PlayerPreferredCharacterName;                     		// 0x11FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      PlayerPreferredPrimaryColor;                      		// 0x1208 (0x0004) [0x0000000000000000]              
	struct FColor                                      PlayerPreferredSecondaryColor;                    		// 0x120C (0x0004) [0x0000000000000000]              
	struct FColor                                      PlayerPreferredTertiaryColor;                     		// 0x1210 (0x0004) [0x0000000000000000]              
	struct FPlayerRecentDamageEventData                RecentDamageEvents[ 0x6 ];                        		// 0x1214 (0x00D8) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentPlayerRecentDamageEventIndex;              		// 0x12EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRecentlyResistedAttackData                 RecentlyResistedAttacks[ 0x10 ];                  		// 0x12F0 (0x00C0) [0x0000000000000000]              
	float                                              MinTimeBetweenResistFeedback;                     		// 0x13B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoopRange;                                        		// 0x13B4 (0x0004) [0x0000000000000000]              
	float                                              LastZoomTime;                                     		// 0x13B8 (0x0004) [0x0000000000000000]              
	int                                                VehicleSteeringMode;                              		// 0x13BC (0x0004) [0x0000000000000000]              
	float                                              DeadTime;                                         		// 0x13C0 (0x0004) [0x0000000000000000]              
	float                                              HUDScaleX;                                        		// 0x13C4 (0x0004) [0x0000000000000000]              
	float                                              HUDScaleY;                                        		// 0x13C8 (0x0004) [0x0000000000000000]              
	float                                              HUDScaleE;                                        		// 0x13CC (0x0004) [0x0000000000000000]              
	class UObject*                                     ContextualPromptContextObject;                    		// 0x13D0 (0x0004) [0x0000000000000000]              
	int                                                BackpackSortPreferenceIndex;                      		// 0x13D4 (0x0004) [0x0000000000000000]              
	class UObject*                                     RetryContextObject;                               		// 0x13D8 (0x0004) [0x0000000000000000]              
	struct FString                                     RetryContextString;                               		// 0x13DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RetryDuration;                                    		// 0x13E8 (0x0004) [0x0000000000000000]              
	float                                              ContextualPromptDuration;                         		// 0x13EC (0x0004) [0x0000000000000000]              
	float                                              MissionRestrictionTextDuration;                   		// 0x13F0 (0x0004) [0x0000000000000000]              
	class AWillowPawn*                                 ReviveTarget;                                     		// 0x13F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UVSSUIDefinition*                            CachedVSSUIDefinition[ 0x2 ];                     		// 0x13F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    CachedVSSVehicleCustomizationDefinition[ 0x2 ];   		// 0x1400 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              ActionSkillTime;                                  		// 0x1408 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                IsSkillListeningForMeleeOverrideEvent;            		// 0x140C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                IsSkillListeningForMeleeOverrideEventBaseValue;   		// 0x1410 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IsSkillListeningForMeleeOverrideEventModifierStack;		// 0x1414 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                IsSkillListeningForThrowGrenadeOverrideEvent;     		// 0x1420 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                IsSkillListeningForThrowGrenadeOverrideEventBaseValue;		// 0x1424 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IsSkillListeningForThrowGrenadeOverrideEventModifierStack;		// 0x1428 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CanThrowGrenadesWhileInDownState;                 		// 0x1434 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CanThrowGrenadesWhileInDownStateBaseValue;        		// 0x1438 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CanThrowGrenadesWhileInDownStateModifierStack;    		// 0x143C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastKnownAmmoCount_RepeaterPistol;                		// 0x1448 (0x0004) [0x0000000000000000]              
	float                                              LastKnownAmmoCount_RevolverPistol;                		// 0x144C (0x0004) [0x0000000000000000]              
	float                                              LastKnownAmmoCount_SMG;                           		// 0x1450 (0x0004) [0x0000000000000000]              
	float                                              LastKnownAmmoCount_CombatRifle;                   		// 0x1454 (0x0004) [0x0000000000000000]              
	float                                              LastKnownAmmoCount_Shotgun;                       		// 0x1458 (0x0004) [0x0000000000000000]              
	float                                              LastKnownAmmoCount_SniperRifle;                   		// 0x145C (0x0004) [0x0000000000000000]              
	float                                              LastKnownAmmoCount_RocketLauncher;                		// 0x1460 (0x0004) [0x0000000000000000]              
	float                                              LastKnownAmmoCount_Grenades;                      		// 0x1464 (0x0004) [0x0000000000000000]              
	TArray< int >                                      UsedMarketingCodes;                               		// 0x1468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      MarketingCodesNeedingNotification;                		// 0x1474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACameraActor*                                SavedCameraActorForVoGMatinee;                    		// 0x1480 (0x0004) [0x0000000000000000]              
	float                                              VoGMovieDuration;                                 		// 0x1484 (0x0004) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   SkillPointsChangedDelegates;                      		// 0x1488 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ClientLoadingMovieShutoffDelay;                   		// 0x1494 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     TransitionEntryLocation;                          		// 0x1498 (0x000C) [0x0000000000000000]              
	class UWillowGFxDialogBox*                         NoCancelConnectingDlg;                            		// 0x14A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ConnectingDlg;                                    		// 0x14A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConnectingDialogRefreshTime;                      		// 0x14AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConnectionTimeout;                                		// 0x14B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ConnectionDuration;                               		// 0x14B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     OneSecond;                                        		// 0x14B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MoreThanOneSecond;                                		// 0x14C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWillowGFxDialogBox*                         InviteDlg;                                        		// 0x14D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ColiseumGameOverDlg;                              		// 0x14D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ExpPointsLoadedFromSavedGame;                     		// 0x14D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ExpLevelLoadedFromSavedGame;                      		// 0x14DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FOnlineFriend >                     currentFriendsList;                               		// 0x14E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRegionGameStageData >              RegionGameStages;                                 		// 0x14EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcRegionGameStageData > UnloadableDlcRegionGameStages;                    		// 0x14F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcWeaponSaveGameData >  UnloadableDlcWeaponData;                          		// 0x1504 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcItemSaveGameData >    UnloadableDlcItemData;                            		// 0x1510 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ControllerChangeRetryTime;                        		// 0x151C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentThirdPersonMenuCamLoc;                     		// 0x1520 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CurrentThirdPersonMenuCamRot;                     		// 0x152C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentThirdPersonMenuCamFOV;                     		// 0x1538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPendingMissionRewardData >         UnclaimedRewards;                                 		// 0x153C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerStandIn* >                    PlayerStandIns;                                   		// 0x1548 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTaggedGFxMovie >                   TaggedGFxMovies;                                  		// 0x1554 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UChallengeDefinition* >              TrackedChallenges;                                		// 0x1560 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FChallengeData >                    LocalChallengeDataCache;                          		// 0x156C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcChallengeData >       UnloadableDlcChallengeList;                       		// 0x1578 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultMapName;                                   		// 0x1584 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                PlayingEchoId;                                    		// 0x1590 (0x0004) [0x0000000000000000]              
	class UWillowGFxThirdPersonMovie*                  CurrentThirdPersonMovie;                          		// 0x1594 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UFlagDefinition* >                   DynamicFlagDefinitions;                           		// 0x1598 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDynamicFlagInstanceData >          DynamicFlags;                                     		// 0x15A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x3C ];                            		// 0x15B0 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerController.DynamicFlagDefLookup
	class AWillowTradeManager*                         TradeManager;                                     		// 0x15EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FWorldDiscoveryData >               DiscoveredWorldAreas;                             		// 0x15F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             FullyExploredAreas;                               		// 0x15FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TinnitusStrength;                                 		// 0x1608 (0x0004) [0x0000000000000000]              
	class UStatusEffectDefinition*                     CurrentPrimaryStatusEffect;                       		// 0x160C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UUBMGraveyardSaveData*                       CachedGraveyardSaveData;                          		// 0x1610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     UBMKilledByMessage;                               		// 0x1614 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     NoPreferredManufacturer;                          		// 0x1620 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoPreferredWeaponType;                            		// 0x162C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UBMDefaultKilledByAIMessage;                      		// 0x1638 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UBMDefaultKilledByMessage;                        		// 0x1644 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UBMSuicideMessage;                                		// 0x1650 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              PreProfileWriteSaveDuration;                      		// 0x165C (0x0004) [0x0000000000000000]              
	int                                                BadassPoints;                                     		// 0x1660 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BadassPointsSpent;                                		// 0x1664 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BadassTokensAvailable;                            		// 0x1668 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BadassTokensEarned;                               		// 0x166C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BadassBonusTokens;                                		// 0x1670 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BadassTokensDue;                                  		// 0x1674 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      BadassRewardsEarned;                              		// 0x1678 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      BadassRewardsToOfferNext;                         		// 0x1684 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     CustomWaypointLocation;                           		// 0x1690 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastKnownLocation;                                		// 0x169C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeSinceLastLocationStatUpdate;                  		// 0x16A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BufferedLocationDelta;                            		// 0x16AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BufferedVehicleLocationDelta;                     		// 0x16B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSprintDistance;                            		// 0x16B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DefaultSaveGameString;                            		// 0x16B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     IntroMovieName;                                   		// 0x16C4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              WaitTimeToDisableLoadingMovie;                    		// 0x16D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineMessageGFxMovie*                      OnlineMessageMovie;                               		// 0x16D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextChatGFxMovie*                           TextChatMovie;                                    		// 0x16D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAkPlayingInfo                              VOVolumePlayInfo;                                 		// 0x16DC (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	struct FAkPlayingInfo                              SFXVolumePlayInfo;                                		// 0x16E4 (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	struct FAkPlayingInfo                              MusicVolumePlayInfo;                              		// 0x16EC (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	struct FAkPlayingInfo                              TeleporterSoundInfo;                              		// 0x16F4 (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	class UClass*                                      TravelToSearchClass;                              		// 0x16FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FScriptDelegate >                   SaveGameLoadedDelegates;                          		// 0x1700 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      BlackMarketUpgrades;                              		// 0x170C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USaveGameChannel*                            SaveGameReplicationChannel;                       		// 0x1718 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerSaveGame*                             PendingReplicatedSaveGame;                        		// 0x171C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         SendingSaveGameDlg;                               		// 0x1720 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UResourcePoolDefinition* >           ClientExpectedResourcePools;                      		// 0x1724 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWillowGFxDialogBox*                         ReadingWillowOneSavesDlg;                         		// 0x1730 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         LoadingDynamicCharacterPackageDialog;             		// 0x1734 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowSpectatorPoint*                       CurrentSpectatorPoint;                            		// 0x1738 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCustomizationUnlockData >          CustomizationUnlocks;                             		// 0x173C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMap_Mirror                                 UnlockedCustomizationCountMap;                    		// 0x1748 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FLockoutData >                      LockoutList;                                      		// 0x1784 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUnloadableDlcLockoutData >         UnloadableDlcLockoutList;                         		// 0x1790 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ClientLockoutTimeAdjust;                          		// 0x179C (0x0004) [0x0000000000000000]              
	float                                              EasterEgg1;                                       		// 0x17A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg2;                                       		// 0x17A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg3;                                       		// 0x17A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg4;                                       		// 0x17AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg5;                                       		// 0x17B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg6;                                       		// 0x17B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg7;                                       		// 0x17B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg8;                                       		// 0x17BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg9;                                       		// 0x17C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EasterEgg10;                                      		// 0x17C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      LevelChallengeUnlocks;                            		// 0x17C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOneOffLevelChallengeData >         OneOffLevelChallengeCompletion;                   		// 0x17D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumChallengePrestiges;                            		// 0x17E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerClassDefinition*                      PendingClassSwitchDefinition;                     		// 0x17E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerPawn*                           PendingClassSwitchPawnArchetype;                  		// 0x17E8 (0x0004) [0x0000000000000000]              
	float                                              SavedMapScaleVal;                                 		// 0x17EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkillDefinition*                            SavedSkillTreeSkill;                              		// 0x17F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SavedBranchNavPref;                               		// 0x17F4 (0x0004) [0x0000000000000000]              
	int                                                SavedCellNavPref;                                 		// 0x17F8 (0x0004) [0x0000000000000000]              
	int                                                NumQuickSlotsFlourished;                          		// 0x17FC (0x0004) [0x0000000000000000]              
	int                                                NumGoldenKeysNotified;                            		// 0x1800 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            ViewWanderingIndex;                               		// 0x1804 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    ViewWanderingPercent;                             		// 0x1810 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TotalViewWanderingPersistence;                    		// 0x181C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPauseTicker*                          PauseTicker;                                      		// 0x1820 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         OfflineWarningDlg;                                		// 0x1824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DownloadPatcherFileName;                          		// 0x1828 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DownloadPatcherFilesTimeout;                      		// 0x1834 (0x0004) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   DownloadPatcherFilesCompleteDelegates;            		// 0x1838 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentCrossTitleTitleIdIndex;                    		// 0x1844 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RemoteNumGoldenKeysAvailable;                     		// 0x1848 (0x0004) [0x0000000000000000]              
	int                                                RemoteNumGoldenKeysEarned;                        		// 0x184C (0x0004) [0x0000000000000000]              
	TArray< struct FPendingClientTrainingMessage >     PendingClientTrainingMessages;                    		// 0x1850 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMissionDefinition*                          CachedMissionDefForChapterHeader;                 		// 0x185C (0x0004) [0x0000000000000000]              
	class UWillowGFxMoviePressStart*                   PressStartMovie;                                  		// 0x1860 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            TitleFileCache;                                   		// 0x1864 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                IsReReadingProfile;                               		// 0x1870 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPendingMissionRewardsData >        PendingMissionRewardsForOtherPlaythroughs;        		// 0x1874 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxBackpackSlotsLoadedFromSavegame;               		// 0x1880 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxBankSlotsLoadedFromSavegame;                   		// 0x1884 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCustomizationDefinition* >          ShiftAuthorizedCustomizations;                    		// 0x1888 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MeleeSelfChance;                                  		// 0x1894 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              MeleeSelfChanceBaseValue;                         		// 0x1898 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MeleeSelfChanceModifierStack;                     		// 0x189C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              KillSkillDurationMultiplier;                      		// 0x18A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              KillSkillDurationMultiplierBaseValue;             		// 0x18AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                KillSkillDurationMultiplierModifierStack;         		// 0x18B0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                PlayerHasPlayedInPlaythroughThree;                		// 0x18BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UseSprintFOV;                                     		// 0x18C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LilacWeaponsRestrictionActive;                    		// 0x18C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SkillDefinitionForInjuredStrings;                 		// 0x18C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                OverpowerChoiceValue;                             		// 0x18D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FChosenVehicleCustomization >       ChosenVehicleCustomizations;                      		// 0x18D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                LastUpsellOfferId;                                		// 0x18E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         RetrievingEulaDlg;                                		// 0x18E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastEulaRequestId;                                		// 0x18E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnDownloadPatcherFilesComplete__Delegate;       		// 0x18EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PreProfileWriteSaveComplete__Delegate;          		// 0x18F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSkillGradeChanged__Delegate;                  		// 0x1904 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSkillPointsChanged__Delegate;                 		// 0x1910 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSkillTreeReset__Delegate;                     		// 0x191C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSaveGameLoaded__Delegate;                     		// 0x1928 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoadLastSaveGameComplete__Delegate;           		// 0x1934 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSplitscreenJoinComplete__Delegate;            		// 0x1940 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCheckSaveGamesAvailableComplete__Delegate;    		// 0x194C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDeviceSelectionProcessComplete__Delegate;     		// 0x1958 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStartupDeviceSelectionComplete__Delegate;     		// 0x1964 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSaveComplete__Delegate;                       		// 0x1970 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnButtonClicked__Delegate;                      		// 0x197C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4208 ];

		return pClassPointer;
	};

	bool eventIsInfected ( );
	void DisplayShiftCommunicationFailedDialog ( );
	bool OnCanceledRetrievingEulaDialog ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnAcknowledgeMustSignEulas ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool HasSignedAllEulas ( );
	void EULAInteractionComplete ( TArray< struct FEULAData >* EULAState );
	void ShowEULAScreen ( TArray< struct FEULAData >* EulaChain );
	void SetVehicleSteeringMode ( int Mode );
	int GetVehicleSteeringMode ( );
	void OnSelectOverpowerLevel ( class UPlayerSaveGame* SaveGame, int OverpoweredDifficulty );
	void eventClientIncrementOverpowerLevel ( int IncrementAmount, int MaximumValue );
	void ServerIncrementOverpowerLevel ( int IncrementAmount, int MaximumValue );
	void SetVehicleCustomizationForModule ( class UVehicleFamilyDefinition* FamilyDef, int ModuleIdx, class UCustomizationDefinition* ChosenCustomization );
	class UCustomizationDefinition* GetVehicleCustomizationForModule ( class UVehicleFamilyDefinition* FamilyDef, int ModuleIdx );
	int GetMaximumPossibleOverpowerModifier ( );
	int GetMaximumPossiblePlayerLevelCap ( );
	void QueuePullThePinNotification ( class USwfMovie* ExternalClip );
	void SetSkillDefinitionForInjuredStrings ( class USkillDefinition* SkillDef );
	void PopulateGameMissionDataFromSavegame ( int MissionPlaythroughIdx, int MissionDataIdx, struct FMissionStatusPlayerData SavedMStatus );
	bool ResetInfiniteVaultHunterPlaythrough ( class UPlayerSaveGame* SaveGame, unsigned long bApplyFromSaveGame );
	class UInjuredDefinition* GetInjuredDefinition ( );
	bool IsAutoAimEnabled ( );
	void ClientUnregisterPlayerWithSession ( class APlayerReplicationInfo* PRI );
	void SetBackpackSortPreference ( int NewPreference );
	int GetBackpackSortPreference ( );
	void ResetFocusCam ( );
	struct FName TranslateLevelToBaseName ( struct FName LevelName );
	bool PS3UseCircleToAccept ( );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool AllowTextMessage ( struct FString msg );
	bool eventIsGuestLogin ( );
	void Behavior_QueuePersonalEcho ( class UWillowDialogEventTag* InEventTag, class UGearboxDialogGroup* InGroup );
	void ClientShowCustomizationFanfare ( unsigned char Type );
	void eventTryCustomizationFanfare ( class AWillowInventory* WInv );
	void HandleBadassSkillActivation ( );
	void ServerSetBadassSkillDisabled ( unsigned long bDisabled );
	void SetBadassSkillDisabled ( unsigned long bDisabled );
	void ToggleBadassSkill ( );
	bool IsBadassSkillDisabled ( );
	void ClearDownloadPatcherFilesCompleteDelegate ( struct FScriptDelegate DownloadPatcherFilesCompleteDelegate );
	void AddDownloadPatcherFilesCompleteDelegate ( struct FScriptDelegate DownloadPatcherFilesCompleteDelegate );
	void DownloadPatcherFilesComplete ( );
	void OnDownloadedPatcherFile ( unsigned long bWasSuccessful, struct FString Filename );
	void HandleDownloadPatcherFileResponse ( struct FSparkResult* Result );
	void DownloadPatcherFiles ( );
	void TryShowNewPlaythroughNotification ( );
	void ClearBlackMarketInventory ( );
	void ClientNotifyNewGameStarted ( );
	void InitializeViewWanderingFor ( class UWeaponTypeDefinition* WeaponDef );
	bool OnGoldenKeyNotificationDismissed ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void CheckNotifyNewGoldenKeys ( );
	void CheckForGoldenKeys ( );
	void WriteGoldenKeyListToProfile ( TArray< struct FGoldenKeySource > FullKeyList );
	void GatherGoldenKeysFromDlc ( );
	TArray< struct FGoldenKeySource > GetAllAcquiredGoldenKeyData ( );
	struct FGoldenKeySource GetNextUnspentGoldenKey ( );
	bool AddGoldenKeysFromSource ( unsigned char SourceId, int NumKeys );
	int GetNumGoldenKeysAcquired ( );
	int GetNumGoldenKeysAvailable ( );
	void eventSpendGoldenKey ( );
	void ExecFor ( int controllerIdx, struct FString Command );
	bool PreviousGamePlayersThanked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void UnlockCustomizationListFromKeyedPool ( TArray< class UKeyedItemPoolDefinition* > KeyedPoolList );
	void UnlockLoyalCustomerCustomizations ( );
	void EndGetNumCrossTitleSaveGames ( unsigned long bWasSuccessful );
	void BeginGetNumCrossTitleSaveGames ( );
	TArray< int > GetAlternateTitleIds ( );
	void NewsRetrieved ( unsigned char RetrievealResult, class USparkNews* newsObj );
	void TryConsumeSparkGoldenKey ( );
	void OnEntitlementsUpdated ( class UGearboxAccountData* GbxAccount );
	void OnSparkEmergencyMessageUpdated ( );
	void ResetMOTD ( unsigned long bDelay );
	void OnSparkInitialized ( unsigned char InitializedResult );
	void ServerSkipMatinee ( );
	void SkipMatinee ( );
	void KillEnemies ( );
	void OnPetNoLongerTargetedByAI ( class AWillowAIPawn* Pet, class AWillowMind* AIMind );
	void OnPetTargetedByAI ( class AWillowAIPawn* Pet, class AWillowMind* AIMind );
	void DeveloperDemigod ( );
	void ServerDeveloperDemigod ( );
	void DeveloperLoaded ( );
	void ServerDeveloperLoaded ( );
	void DeveloperSpawnAwesomeItems ( );
	void eventServerDeveloperSpawnAwesomeItems ( );
	void ServerDeveloperKillEnemies ( );
	void DeveloperUnlockAllCustomizations ( );
	void DeveloperUnlockAnAchievement ( int TitleId );
	void ReadAchievements ( int TitleId, struct FScriptDelegate CompleteDelegate );
	void GetAchievementDetails ( int TitleId );
	void eventShowMissionWeaponTraining ( class AWillowWeapon* MissionWeapon );
	void Behavior_Destroy ( );
	void SaveQueuedTrainingMessageData ( class UPlayerSaveGame* SaveGame );
	void ApplyQueuedTrainingMessageData ( class UPlayerSaveGame* SaveGame );
	void ServerComputeLockoutTimeAdjust ( int ClientPackedSystemTime );
	void eventClientSetLockout ( class ULockoutDefinition* LockoutDef );
	int ComputeLockoutTimeAdjust ( int ClientPackedSystemTime );
	void SetLockout ( class ULockoutDefinition* LockoutDef );
	void SaveLockoutData ( class UPlayerSaveGame* SaveGame );
	void ApplyLockoutData ( class UPlayerSaveGame* SaveGame );
	void eventClientStartFade ( float InFadeOpacity, float InFadeDuration, struct FColor InFadeColor );
	void OnCameraFade ( class USeqAct_CameraFade* Action );
	void FlushNetDriver ( );
	void ClientHostLeavingGame ( );
	void NotifyHostLeavingGame ( );
	void DisplaySubtitle ( struct FString msg );
	void ClearTrackedChallenges ( );
	void DisplayTrackedChallenges ( class AHUD* aHUD, float* out_YL, float* out_YPos );
	void eventUntrackChallenge ( class UChallengeDefinition* ChallengeDef );
	void UpdateLcdWatchedChallenges ( );
	void TrackChallenge ( class UChallengeDefinition* ChallengeDef );
	int GetCurrentChallengeLevel ( class UChallengeDefinition* ChallengeDef );
	void TrackChallengeToggle ( class UChallengeDefinition* ChallengeDef );
	bool IsTrackedChallenge ( class UChallengeDefinition* ChallengeDef );
	int FindTrackedChallengeIndex ( class UChallengeDefinition* ChalDef );
	unsigned char GetRestoreNetworkType ( class UOnlineGameSettings* GameSettings );
	void OnCausePlayerDeath ( class USeqAct_CausePlayerDeath* inAction );
	void eventCausePlayerDeath ( unsigned long bInstaKill );
	void UnregisterPlayerStandIn ( class APlayerStandIn* StandIn );
	void RegisterPlayerStandIn ( class APlayerStandIn* StandIn );
	void ClientToggleTelescopeOverlay ( unsigned long bEnabled );
	void ClientCloseProjectedMenus ( );
	void ConditionalShowHUDForAllPlayers ( );
	void HideAsyncCharacterLoadDialog ( );
	void ShowAsyncCharacterLoadDialog ( );
	void NotifyReadyToLoadPendingSavegame ( );
	void ClearWaitingForAsyncCharacterLoadAndHideBusyDialog ( );
	void SetWaitingForAsyncCharacterLoadAndShowBusyDialog ( );
	bool AreAnyPlayersWaitingOnAsyncCharacterLoad ( );
	void eventRunStreamingDataEvent ( struct FName EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, int IntParam, float FloatParam );
	void SetPendingClassSwitch ( class UPlayerClassDefinition* InPlayerClass, class AWillowPlayerPawn* InPawnArchetype );
	bool ErrorDialogClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool AreAllPlayersLoggedIn ( unsigned long bRequireOnlineLogin );
	void PromptAndKickNonLocalPlayers ( );
	void ShowServerBrowser ( unsigned long bIsLanBrowser );
	void eventNotifyUIRefresh ( );
	void OnDestroyGameForSystemLinkComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void TransitionToSystemLink ( );
	bool OnKickNetworkedPlayersForSystemLink_Confirm ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void NotifyUIAddSplitPlayer ( );
	void NotifyUIClearPendingSplitJoin ( );
	void AttemptSystemLinkTransition ( unsigned long bPrompt );
	void EndUpdatingSession ( );
	void BeginUpdatingSession ( );
	bool OnPurchaseCanceled ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnPurchaseRequest ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnOfflineWarning_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void CheckChatDisabled ( int ControllerId );
	void OnCreateGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroySystemLinkForInternetGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void DestroyOnlineGameWithDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void TransitionToInternetGame ( );
	bool OnKickNetworkedPlayersForInternetGame_Confirm ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void AttemptInternetTransition ( unsigned char InviteType, unsigned long bPrompt );
	bool CheckCanCreateOnlineGame ( unsigned long bPrompt );
	bool CheckCanCreateLanGame ( unsigned long bPrompt );
	bool DownloadCompatibilityPack ( int ControllerId );
	bool OnDialogClickDownloadCompatibilityPack ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnDialogClickShowLogin ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void OnDestroyGameForOfflineComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void TransitionToOffline ( );
	bool OnKickNetworkedPlayersForOffline_Confirm ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void AttemptOfflineTransition ( unsigned long bPrompt );
	void OnUpdateComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void AttemptInternetInviteTypeTransition ( unsigned char InviteType, unsigned long bPrompt );
	bool CheckCanUpdateInviteType ( unsigned char InviteType, unsigned long bPrompt );
	bool CheckMatchmakingEnabled ( unsigned long bPrompt );
	bool IsPublicModeDisabled ( );
	bool IsMatchmakingDisabled ( );
	void AttemptNetworkTransition ( unsigned char NetworkType, unsigned char InviteType, unsigned long bPrompt );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void ServerViewPrevSpectatorPoint ( );
	void ViewPrevSpectatorPoint ( );
	void ServerViewNextSpectatorPoint ( );
	void ViewNextSpectatorPoint ( );
	void ServerViewFirstSpectatorPoint ( );
	void ViewFirstSpectatorPoint ( );
	void ClientShowGenericRevive ( class UGenericReviveMessageDefinition* ReviveDef, class APlayerReplicationInfo* OtherPRI, unsigned long bIsOtherEventParticipant );
	class AWillowMind* GetAWillowMind ( );
	class AWillowPlayerController* GetAWillowPlayerController ( );
	class AController* GetABaseController ( );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void eventClientForceCancelMapChange ( );
	void CinematicAutoSkip ( struct FString Arg );
	bool ToggleCinematicAutoSkip ( );
	void SetCinematicAutoSkip ( unsigned long bInSkip );
	void DumpBlackMarketUpgrades ( );
	void ClientBlackMarketUpgradePurchased ( int UpgradeIndex );
	void ServerPurchaseBlackMarketUpgrade ( class UInventoryBalanceDefinition* BalanceDef );
	void PurchaseBlackMarketUpgrade ( class UInventoryBalanceDefinition* BalanceDef );
	int LookupBlackMarketUpgradeIndex ( class UInventoryBalanceDefinition* BalanceDef );
	void IncBlackMarketUpgrade ( int Index );
	int GetBlackMarketUpgrade ( int Index );
	void VerifyBlackMarketUpgradesLength ( int Min );
	void UnregisteredControllerButtonPress ( int ControllerId );
	bool HasAnyInviteDialogsOpen ( );
	void DebugEnablePCSplitscreen ( unsigned long bEnabled );
	void OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroyForTravelComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void StopLoopingSound ( struct FAkPlayingInfo Sound, class UAkEvent* StopAkEvent );
	bool IsSoundPlaying ( struct FAkPlayingInfo Sound );
	void StopMusicVolumeSound ( );
	void PlayMusicVolumeSound ( );
	void StopSFXVolumeSound ( );
	void PlaySFXVolumeSound ( );
	void StopVOVolumeSound ( );
	void PlayVOVolumeSound ( );
	void HideGameMessage ( );
	void ClientDisplayWaitingMessage ( class APlayerReplicationInfo* OtherPRI );
	void DisplayGameMessage ( unsigned char MessageType, float Duration, struct FString Message, struct FString Subtitle );
	void PushToTalkStop ( );
	void PushToTalkStart ( );
	void StartTextChat ( );
	class UTextChatGFxMovie* GetTextChatMovie ( );
	class UOnlineMessageGFxMovie* GetOnlineMessageMovie ( );
	void ClientKickedPartyKill ( );
	void CheckStat ( struct FName StatName );
	void CheckNotifyPlaythroughThree ( );
	void ShowPlaythrough3Message ( );
	void ClientGenericPlayerInitialization ( );
	void TryRegisterStandIns ( );
	void SharedPlayerInitialization ( );
	void CreateSaveGameReplicationChannel ( );
	void GenericPlayerInitialization ( );
	bool OnFastForward_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool CanPromptForFastForward ( );
	bool eventIsFastForwardPromptValid ( );
	void eventTryPromptForFastForward ( );
	void UpdateHUDMinimapRadius ( unsigned long bInVehicle, float LerpTime );
	void TurnOffCinematicMode ( );
	void UpdateMissionWeaponRestrictionContextualPrompt ( );
	void eventClearContextualPromptScreen ( );
	void HideContextualPrompt ( );
	void eventShowContextualPromptEx ( unsigned char PromptScreen, class UObject* ContextObject, struct FString ContextString, struct FString TrainingString, struct FString TitleString, float Duration );
	void eventShowContextualPrompt ( unsigned char PromptScreen, class UObject* ContextObject, struct FString ContextString, float Duration );
	void RetryContextualPrompt ( );
	void TestContextualPrompt ( unsigned char PromptScreen );
	void ServerIncrementStatByValue ( struct FName StatName, int Value );
	void ServerIncrementStat ( struct FName StatName );
	bool ConditionalIncrementTechWeaponPickedUpStat ( class UWillowDamageTypeDefinition* WillowDamageTypeDef );
	void IncrementUsedItemStat ( struct FName StatName );
	void NotifyShotStatus ( class UClass* DamageTypeClass, class UIDamageCauser* DamageCauser, unsigned long bMiss, unsigned long bKill );
	void OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientSetSessionInviteFlags ( struct FName SessionName, unsigned long bAllowInvites, unsigned long bAllowJoinViaPresence, unsigned long bAllowJoinViaPresenceFriendsOnly );
	void CharacterSelected ( );
	void ServerPlayerSelectedCharacter ( );
	void ServerPlayerOpenedCharacterSelect ( );
	void CheckIntroMovieComplete ( );
	void ClientPlayIntroMovie ( );
	class UWillowHUDGFxMovie* GetHUDMovie ( );
	void NotifyInviteFailed ( );
	void NotifyNeedsCompatibilityContent ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void HandleInviteFailure ( struct FString DialogSection );
	int GetSkillGradeByDef ( class USkillDefinition* SkillDef );
	struct FString GetBadassRewardsString ( );
	struct FString GetBadassSkillPresentedValue ( class UBadassRewardDefinition* RewardDef );
	float GetBadassSkillActualValue ( class UBadassRewardDefinition* RewardDef );
	int GetBadassRewardsEarned ( int RewardIndex );
	void SetBadassRewardsEarned ( int RewardIndex, int NewRewardValue );
	void eventServerSetBadassRewardsEarned ( int RewardIndex, int NewRewardValue );
	void ServerAwardBadassReward ( int RewardIndex );
	void AwardBadassReward ( int RewardIndex );
	class UBadassRewardDefinition* GetBadassReward ( int Index );
	int GetBadassRewardCount ( );
	void ResetBadass ( );
	int BadassRanksPerToken ( int TokenNumber );
	int eventTokensDue ( );
	int GetBadassPointsForNextRank ( );
	int GetBadassPointsForCurrentRank ( );
	int GetBadassPointsForRank ( int Rank );
	int GetBadassRankForPointsSpent ( int PointsSpent );
	int eventGetBadassPointsPerRank ( );
	int GetNumUniqueBadassRewardsEarned ( );
	int GetBadassTokensSpent ( );
	void SpendBadassTokens ( int TokensSpent );
	void AddBadassTokens ( int AdditionalTokens );
	void eventAdjustBadassPoints ( int Adjustment );
	void AdjustBadassPointsSpent ( int Adjustment );
	void SetBadassPoints ( int NewValue );
	void eventSetBadassPointsSpent ( int NewValue );
	int GetBadassTokensAvailable ( );
	int GetBadassPointsSpent ( );
	int eventGetBadassPoints ( );
	int GetBadassPointsCostOfNextRank ( );
	int GetBadassPointsSpentOnNextRank ( );
	int GetBadassPointsAvailable ( );
	int GetBadassRank ( );
	void eventClientYouNeedThisPackage ( struct FString PackageString );
	void eventServerUpdateOnDemandPackageStatus ( struct FString PackageString, unsigned long bIsLoaded );
	void ClientWhatPackagesHaveYou ( );
	void RetryChapterHeader ( );
	void ClientShowChapterHeader ( class UMissionDefinition* MissionDef );
	void ServerShowChapterHeader ( class UMissionDefinition* MissionDef );
	void ServerClearCustomizations ( );
	void ClearCustomizations ( );
	void WriteCustomizationUnlocksToProfile ( );
	void ReadCustomizationUnlocksFromProfile ( );
	void WriteStashToProfile ( );
	void FillEmptyStorageBuffer ( TArray< unsigned char >* Buffer );
	void CopyToStorageBuffer ( struct FInventorySerialNumber SerialNumber, TArray< unsigned char >* Buffer );
	void ReadStashFromProfile ( );
	void CopyFromStorageBuffer ( class UWillowInventoryStorage* Storage, TArray< unsigned char >* Buffer );
	void OnChestOpened ( class UWillowInventoryStorage* Storage );
	void OnChestClosing ( class UWillowInventoryStorage* Storage );
	bool CanDrop ( class AWillowInventory* Inv );
	void OnStandInSaveGameLoaded ( unsigned char LoadGameResult );
	void OnUpdatePropertyFOVAngle ( );
	void ReactToPrimaryStatusEffect ( class UStatusEffectDefinition* StatusEffect );
	void DebugDiscoverAllAreasInCurrentMap ( );
	void eventServerAwardExperienceForWorldDiscovery ( class AWorldDiscoveryArea* DiscoveryArea );
	void eventHandleWorldDiscoveryCompletion ( class ULevelDependencyList* SourceList );
	void eventClientSetCurrentMapFullyExplored ( );
	void CheckForExplorationAchievements ( );
	bool HandleWorldAreaDiscovery ( struct FName DiscoveryName, struct FString WorldAreaName, class UAkEvent* SoundEvent, unsigned long bForFogOfWarOnly );
	void TEST_ServerPrintInv ( );
	void SellAllTrash ( );
	void ClientTradeFinished ( unsigned char Reason );
	void ServerRequestTrade ( );
	bool eventCanBeginTrade ( class AWillowPlayerController* Partner, class AWillowPlayerReplicationInfo* PartnerPRI );
	class AWillowPlayerReplicationInfo* GetTradePartnerPRI ( );
	class AWillowPlayerController* GetTradePartner ( );
	void AttemptTrade ( );
	void eventActionSkillCooldownComplete ( );
	void SetUseRealTimeForWeaponZoom ( unsigned long bUseRealTime );
	void SetWindowTitle ( struct FString NewTitle );
	void ChangeWindowTitle ( struct FString NewTitle );
	class UWillowGFxThirdPersonMovie* GetThirdPersonMovie ( );
	bool WantsThirdPersonMenu ( );
	void HandleSkillTreeReset ( int SkillPointsReturned );
	void NotifyDamageDealt ( class APawn* DamagedPawn, struct FDamageEventSummary* DamageSummary );
	void ClientShowVSSInUseMessage ( );
	void eventRouteCallToSetVehicleFamily ( class UVehicleFamilyDefinition* TheVehicleFamilyDef );
	void RouteCallToServerChangeSeat ( int RequestedSeat );
	bool TrySeatSwapClient ( );
	void ClientUpdatePosition ( );
	void PlayUIAkEvent ( class UAkEvent* Event );
	bool RefreshBalanceDataFromMissionCompletion ( class UMissionDefinition* MissionDef );
	bool ResetGameStageForRegion ( class URegionDefinition* Region );
	class AWillowPlayerPawn* GetWillowPlayerPawn ( );
	void SetGameStageForRegion ( class URegionDefinition* Region, int GameStage );
	int GetGameStageFromRegion ( class URegionDefinition* Region );
	void NavMeshWalking ( );
	void ServerDebugActionSkill ( );
	void DebugActionSkill ( );
	void ServerResetCooldown ( );
	void ResetCooldown ( );
	void ToggleMeleeSkillDebug ( );
	void DebugMeleeSkill ( );
	void ServerResetMeleeCooldown ( );
	void ResetMeleeCooldown ( );
	void eventClientReceiveChallenge ( class UChallengeDefinition* ChalDef );
	bool ChallengeExistsInChallengeList ( class UChallengeDefinition* ChalDef );
	void CompleteChallengeIfConditionsMet ( class UChallengeDefinition* ChalDef );
	void eventReceiveChallenge ( class UChallengeDefinition* ChalDef, unsigned long bIsCharacterLoad, unsigned long bGiveToAllPlayers );
	bool SelectInputContext ( );
	void UpdateInputContext ( );
	void AltSaveGameLoaded ( unsigned long bWasSuccessful );
	void LoadAltSaveGame ( struct FString Filename );
	void ReadCrossTitleSaveGamesComplete ( unsigned long bWasSuccessful );
	bool ReadNextCrossTitleSaveGameList ( struct FScriptDelegate ReadCrossTitleContentCompleteDelegate, int StorageDeviceId );
	void ReadCrossTitleSaveGameList ( int StorageDeviceId );
	void GetAltSaveGameList ( );
	void SortMarketplaceContentByOfferId ( unsigned long bDescending, TArray< struct FMarketplaceContent >* ContentList );
	bool IsStationToUninstalledDlc ( struct FName StationDefinitionName );
	void ServerInitClientFlags ( );
	void ClientFlagSet ( struct FName ClientFlag, unsigned long bEnable );
	void NotifyDesignerAttribute ( struct FName Attribute, float Value );
	void ServerSendInitialColiseumStat ( int InitialKillCount );
	void ClientCatchUpColiseumOverlay ( class UWillowGFxColiseumOverlayDefinition* OverlayDef, int CurrentRound, int CurrentWave, int MaxRounds, class UColiseumRuleDefinition* Rule1, class UColiseumRuleDefinition* Rule2, class UColiseumRuleDefinition* Rule3, class UColiseumRuleDefinition* Rule4 );
	void ClientAnnouncePenaltyBox ( );
	void OnColiseumAnnouncePenaltyBox ( class UWillowSeqAct_ColiseumAnnouncePenaltyBox* Sequence );
	void ClientCloseCertificateScreen ( );
	void ServerCertificateClosed ( );
	void ClientColiseumAwardCertificate ( );
	void ClientCloseResultsScreen ( );
	void ServerResultsScreenClosed ( struct FName ResultsClosedEvent );
	void ClientShowColiseumDefeatedScreen ( unsigned long bEnableGamerCardUI );
	void ClientShowColiseumVictoryScreen ( unsigned long bEnableGamerCardUI );
	void ClientPublishColiseumStatDelta ( struct FString CharacterName, class APlayerReplicationInfo* PRI, unsigned char StatType, int StatDelta );
	void ShowColiseumDefeatedScreen ( );
	void ShowColiseumVictoryScreen ( );
	bool IsEveryoneSignedIn ( );
	void ClientColiseumNotify ( unsigned char NotifyType );
	void ClientRuleAnnounce ( );
	void ClientRoundAnnounce ( int Round, int Wave, int MaxRound, struct FString HealthModText, struct FString DamageModTex, struct FString ShieldModTex );
	void BeginRoundAnnounce ( );
	void ClientStartColiseumTimer ( unsigned char CountdownLength );
	void ClientCloseColiseumOverlay ( );
	void ClientUpdateColiseumRule ( class UColiseumRuleDefinition* RuleInfo, unsigned char UpdateMode );
	int GetBankUpgradeSlots ( );
	void GetFullInventory ( TArray< class AWillowInventory* >* FullInv );
	void SaveScreenShotOfItemCard ( class AWillowInventory* WInv );
	void FastAI ( );
	bool OnConnectionFailed_Click ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnConnectionCancel_Click ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void OnConnectionFailed ( struct FString failedStr );
	void ClearInviteDelegates ( );
	void UpdateConnecting ( );
	void SetRemainingConnectionDuration ( int ConnDuration );
	void HideConnectingDialog ( );
	void ShowConnectingDialog ( unsigned long bCanCancel );
	void PlaySpecialHUDSound ( struct FString HUDSound );
	bool CanAllPlayersPlayOnline ( );
	void ClientReceiveInteractiveObjectDefinition_HACK ( class AWillowInteractiveObject* InteractiveObject, class UInteractiveObjectDefinition* Definition );
	void ServerSendInteractiveObjectDefinition_HACK ( class AWillowInteractiveObject* InteractiveObject );
	bool IsInactiveController ( int ControllerId );
	bool OnConfirmKickPlayersForInvite ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnKickNetworkedPlayersForInvite_Confirm ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnConfirmPS3Controller ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void OnGameInviteAcceptedCheckController ( struct FOnlineGameSearchResult* InviteResult );
	bool GameHasNonLocalPlayers ( );
	void NonPrimaryOnGameInviteAccepted ( int InvitedControllerId, struct FOnlineGameSearchResult InviteResult );
	void InnerOnGameInviteAcceptedP ( int P, struct FOnlineGameSearchResult* InviteResult );
	bool NeedsCompatibilityContent ( );
	void PreInviteSaveAllPlayersComplete ( );
	void OnDownloadPatcherFilesForInvite ( );
	void PostDlcRefreshForInvite ( );
	bool OnUninstalledDlcInvite_Click ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void DlcRefreshCompleteFromBusy ( );
	void OnGameInviteAcceptedP ( int P, struct FOnlineGameSearchResult* InviteResult );
	bool DlcPreInviteRefreshCompleteCorruptConent ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void DlcPreInviteRefreshComplete ( );
	void ShowCorruptDlcOkBox ( struct FScriptDelegate OnClicked );
	bool OnButtonClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void NotifyGameInviteProcessingStarted ( );
	void SetResurrectionRule ( );
	void AllPlayersSaved ( );
	void SaveNextPlayer ( float SaveDuration );
	void SavePlayer ( class AWillowPlayerController* PlayerToSave );
	bool SaveAllPlayers ( unsigned long bReturnToTitle, struct FScriptDelegate OnSaveCompleteDelegate, unsigned long bSuppressDialog );
	void OnSaveComplete ( );
	void UnpauseEcho ( );
	void PauseEcho ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	void SetTextureMoviePauseState ( unsigned long bShouldPause );
	bool VerifySkillRespec_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void VerifySkillRespec ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void InstantJoinOnlineGame ( );
	void OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool CanSaveGame ( );
	void ResetPlayerInputToDefault ( );
	void UpdateHUDCachedXPValue ( int ExpPoints );
	void TestTrainingText ( struct FString TrainingText );
	struct FString GetMissionDescriptionForUI ( class UMissionDefinition* MissionDef, unsigned long bShowTurnInDescriptionWhenReadyToTurnIn, unsigned long bShowTeaserTextIfFailed, unsigned long bUseWorldState );
	bool SystemIsSetToKOROrJPNLocale ( );
	bool CanUnpauseExternalUI ( );
	void UpdateAmmoCounts ( unsigned long bSilent );
	void ListFriends ( );
	void msg ( struct FString FriendName, struct FString Message );
	void ForceUnloadStreamingLevels ( );
	void OnJoinGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void JoinFriendGame ( int ControllerId, struct FUniqueNetId FriendId );
	bool IsPlayerInMyGame ( struct FUniqueNetId UniqueId );
	bool GetFriendByName ( struct FString FriendName, struct FOnlineFriend* Friend );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	void ListNetPackages ( );
	void ListStations ( );
	void OnPrimaryPlayerBusyDelay ( class USeqAct_PrimaryPlayerBusyDelay* Action );
	bool GetWaitingForStorageSelectionFailure ( );
	void SetWaitingForStorageSelectionFailure ( unsigned long bWantsToShow );
	bool GetWaitingForStorageSelection ( );
	void SetWaitingForStorageSelection ( unsigned long bWantsToShow );
	bool GetWantsToShowStorageMenu ( );
	void SetWantsToShowStorageMenu ( unsigned long bWantsToShow );
	void SetActionSkillTime ( );
	void PreOnGameInviteAccepted ( );
	bool GetPlayerLoot ( int CustomGameStage, int CustomAwesomeLevel, struct FName CustomConfiguration, TArray< struct FSpawnedDroppedLootData >* SpawnedLoot );
	void RefreshHUD ( );
	void KillHUD ( );
	bool CanSetResourcePoolValues ( class UClass* ResourcePoolClass );
	void PauseDayCycle ( );
	void OnMarkExitedRegion ( class UWillowSeqAct_MarkExitedRegion* inAction );
	void OnMarkEnteredRegion ( class UWillowSeqAct_MarkEnteredRegion* inAction );
	void ConditionalUnlockViralAchievement ( );
	bool CanSpreadViralAchievement ( );
	void NotifyKilledEnemy ( struct FString EnemyName );
	bool ShouldAllowExternalUIPause ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void CheckCanPauseFromExternalUINow ( );
	void MarkLog ( struct FString TagString );
	void ToggleCoopRangeDebug ( );
	unsigned char eventGetLoginStatus ( );
	float eventGetFOVAngleForeground ( );
	class AWeapon* GetActiveOrBestWeapon ( );
	void ModalGameMenuClosing ( );
	void ModalGameMenuOpening ( );
	void eventHideInfectionBarTemporarily ( );
	void SetViewDistance ( int Value );
	void SetGlobalViewDistance ( unsigned char ViewDistance );
	void SetZoomToggle ( unsigned long bEnabled );
	void SetTradingDisabled ( unsigned long bEnabled );
	void SetInvertedReverseSteering ( unsigned long bEnabled );
	void SetDriftCameraLock ( unsigned long bEnabled );
	void SetCrouchToggle ( unsigned long bEnabled );
	void SetMouseAutoAim ( unsigned long bEnabled );
	void SetAutoAim ( unsigned long bEnabled );
	void eventDisplaySkillPointsPrompt ( int PointsRemaining );
	void eventDisplayCompatDlcAvailable ( );
	void OnSplitJoinDeviceSelectionComplete ( class AWillowPlayerController* PC, unsigned long bHasValidDevice );
	void StartupLoadLastSaveGameComplete ( );
	void StartupLoadLastSaveGame ( unsigned long bHasValidDevice );
	void StartupCheckSaveGamesAvailableComplete ( unsigned long bSaveGamesAvailable );
	void StartupDeviceSelectionComplete ( class AWillowPlayerController* WPC, unsigned long bHasValidDevice );
	void DoStartupDeviceSelection ( struct FScriptDelegate StartupDeviceSelectionCompleteDelegate );
	void OnStartupDeviceSelectionComplete ( );
	bool NoDeviceSelected_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool DeviceSelection_GuestLogin_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool DeviceSelection_NotLoggedIn_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void SetDoneInitialDeviceSelection ( unsigned long bDone );
	bool HasDoneInitialDeviceSelection ( );
	void DoDeviceSelection ( struct FScriptDelegate DeviceSelectionProcessCompleteDelegate );
	void DoInitialDeviceSelection ( struct FScriptDelegate DeviceSelectionProcessCompleteDelegate );
	void TriggerDeviceSelectionProcessCompleteDelegate ( unsigned long bHasValidDevice );
	void OnDeviceSelectionProcessComplete ( class AWillowPlayerController* PC, unsigned long bHasValidDevice );
	void eventDeviceSelectionDone ( unsigned long bWasSuccessful );
	bool ShowStorageDeviceSelector ( unsigned long bForceShow );
	bool StorageRemoved_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnStorageRemovedInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	void eventDisplayStorageRemovedMenu ( );
	bool IsCurrentStorageDeviceValid ( );
	void SetHasSaveGamesAvailable ( unsigned long bNewHasSavesAvailable );
	bool GetHasSaveGamesAvailable ( );
	void NotifyStorageDeviceChange ( );
	int GetStorageDeviceID ( );
	void ShowDeviceSelection ( );
	void SetStorageDeviceID ( int DeviceID );
	void NotifyDeviceSelectComplete ( unsigned long bWasSuccessful );
	void DeveloperCompleteAllChallengesToLevel ( int Level );
	void ServerDeveloperCompleteAllChallengesToLevel ( int Level );
	void DeveloperGiveCurrency ( unsigned char FormOfCurrency, int Amount );
	void ServerDeveloperGiveCurrency ( unsigned char FormOfCurrency, int Amount );
	void DeveloperGiveEridium ( int Amount );
	void DeveloperGiveCash ( int Amount );
	void DeveloperFreeLevels ( int numLevels );
	void ServerDeveloperFreeLevels ( int numLevels );
	bool eventIsDeveloper ( );
	void GetHighestSaveGameComplete ( unsigned long bWasSuccessful );
	void CheckHighestSaveGameIdForSplitScreen ( int CurrentHighest );
	void GetHighestSaveGameId ( );
	void AddMissionPlaythrough ( int PlayThrough );
	void AddPlaythrough ( int PlayThrough );
	int eventGetSplitscreenIndex ( );
	int GetCurrentPlaythrough ( );
	void OnPlaythroughAlmostComplete ( int PlayThroughNumber );
	void OnPlaythroughCompleted ( int PlayThroughNumber );
	struct FString GetCharacterDefaultNameFromClassDefinition ( class UPlayerClassDefinition* PlayerClassDef );
	struct FString GetCharacterClassDefaultName ( );
	void GetPlayerUIColorPreference ( struct FColor* PrimaryColor, struct FColor* SecondaryColor, struct FColor* TertiaryColor );
	void GetPlayerUINamePreference ( struct FString* CharacterName );
	void GetPlayerUIPreferences ( struct FString* CharacterName, struct FColor* PrimaryColor, struct FColor* SecondaryColor, struct FColor* TertiaryColor );
	void ApplyPreferredColors ( );
	void ServerApplyPreferredColors ( struct FColor PrimaryColor, struct FColor SecondaryColor, struct FColor TertiaryColor );
	void SetPlayerUIPreferences ( struct FString CharacterName, struct FColor PrimaryColor, struct FColor SecondaryColor, struct FColor TertiaryColor );
	void SetPlayerUINamePreference ( struct FString CharacterName );
	void UnregisterSkillTreeResetDelegate ( );
	void RegisterSkillTreeResetDelegate ( struct FScriptDelegate SkillTreeResetDelegate );
	void FireSkillPointsChangedDelegates ( int NumSkillPoints );
	void UnregisterSkillPointsChangedDelegate ( struct FScriptDelegate SkillPointsChangedDelegate );
	void RegisterSkillPointsChangedDelegate ( struct FScriptDelegate SkillPointsChangedDelegate );
	void UnregisterSkillGradeChangedDelegate ( );
	void RegisterSkillGradeChangedDelegate ( struct FScriptDelegate GradeChangedDelegate );
	void eventServerTeleportPlayerToStation ( class UTravelStationDefinition* StationDefinition );
	void eventTeleportPlayerToStation ( struct FName StationDefinitionName );
	void ClientReturnToTitleScreen ( );
	bool EnableListenServer ( unsigned long bEnable );
	bool CreateListenServer ( );
	bool eventCreateLanGame ( );
	bool eventCreateOnlineGame ( );
	bool eventCreateOnlineOrLanGame ( );
	bool CreateGame ( );
	void ClientSetRestartPlayerAfterLogin ( unsigned long bShouldRestart );
	void openlArg ( struct FString openurl, unsigned long bDontRestartPlayer );
	void openl ( struct FString openurl );
	void GFxMenuClosed ( );
	void GFxMenuOpened ( );
	void eventUpdateClassModNamePart ( class UItemNamePartDefinition* ClassModNamePart );
	void EquipWeaponFromSlot ( unsigned char QuickSlot );
	void GetInventoryLists ( unsigned char MaxDroppability, TArray< class AWillowWeapon* >* ReadiedWeapons, TArray< class AWillowWeapon* >* UnReadiedWeapons, TArray< class AWillowItem* >* AllItems );
	void FixAllItemsList ( unsigned char MaxDroppability, TArray< class AWillowItem* >* AllItems );
	bool CanKillSkillIconsBeDisplayedFromVehicles ( unsigned long bWhileDrivingOrGunning, unsigned long bWhileAttachedRiding );
	void ToggleKillSkillsDisplay ( unsigned long bEnable );
	void ForceKillSkillsOff ( );
	bool eventUpdateKillSkills ( unsigned long bEnable );
	void TickTargets ( );
	void NotifyInstinctSkillAction ( unsigned char SkillAction );
	bool CanResetActionSkill ( );
	void ResetActionSkill ( );
	void Behavior_ResetActionSkillCooldown ( );
	void ConditionalResetInterruptedActionSkill ( );
	void ResetSkillCooldown ( );
	float GetSkillCooldownTimeRemaining ( );
	float GetSkillCooldownTime ( );
	void StartActiveSkillCooldown ( );
	void TryPreferredStat ( struct FName StatId, int MyIdx, int* BestCount, struct FName* BestName, int* BestIdx );
	struct FName GetPreferredWeaponType ( );
	struct FName GetPreferredManufacturer ( int* BestMfgIdx );
	void eventClientFindPlayMovie ( struct FName LevelName );
	class AWillowPlayerController* GetPlayerMasterPlayerController ( );
	bool IsActionSkillCoolingDown ( );
	bool IsActionSkillOnCooldown ( );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	class APawn* GetInstanceDataPawn ( );
	void IncreaseStatForAllPlayers ( struct FName StatName, int MinimumPlayersRequired, int IncrementBy );
	void ServerUnlockAchievementForAllPlayers ( int AchievementId, int MinimumPlayersRequired );
	void Behavior_UnlockAchievementForAllPlayers ( int AchievementId, int MinimumPlayersRequired );
	void Behavior_UnlockAchievement ( int AchievementId );
	void ApplySkidCameraLurch ( float DeltaTime, struct FVector* POVLocation, struct FRotator* POVRotation );
	void EndSprint ( );
	void BeginSprint ( );
	float CalculateInverseFlexibleFOVModifier ( float InModifier );
	float CalculateInverseFlexibleFOV ( float InVFOV );
	float CalculateFlexibleFOVModifier ( float InModifier );
	float CalculateFlexibleFOV ( float InVFOV );
	float GetVerticalDefaultDefaultFOV ( );
	float GetDefaultDefaultFOV ( );
	float eventGetUnmodifiedFOVAngle ( );
	void DisplayStationDiscoveryIfNecessary ( class UTravelStationDefinition* StationDefinition, class APlayerReplicationInfo* DiscoveredBy );
	void SaveAtStationIfNecessary ( unsigned long bNewStation );
	void ClientNotifySomeoneTouchedStation ( class UTravelStationDefinition* TravelStationDef, class ATravelStation* ActivatedStation, class APlayerReplicationInfo* InstigatorPRI, unsigned long bFromLoad, unsigned long bSetAsLastVisited );
	void Behavior_RegisterStationDefinition ( class UTravelStationDefinition* TravelDefinition, unsigned long bSetAsLastVisited );
	void Behavior_RegisterStation ( class ATravelStation* ActivatedStation, unsigned long bFromLoad );
	void RegisterStationForPlayer ( class UTravelStationDefinition* ActivatedStationDefinition, class ATravelStation* ActivatedStation, class APlayerReplicationInfo* DiscoveredBy, unsigned long bFromLoad, unsigned long bSetAsLastVisited );
	bool IsStationDiscovered ( class UTravelStationDefinition* StationDefinition );
	void eventRegisterStation ( class ATravelStation* ActivatedStation, unsigned long bFromLoad );
	void FindActiveStationsForLevel ( struct FName LevelName, TArray< struct FName >* ActiveStationDefinitionNames );
	void eventFindInitiallyActiveStations ( struct FName LevelName );
	void StopMovie ( );
	void PlayMovie ( struct FString MovieName );
	void ServerSendMessageToPlayers ( unsigned long bShouldSendToInstigator, class UClass* SendMsgClass, class APlayerReplicationInfo* PRI );
	void Behavior_SendMessageToPlayers ( unsigned long bShouldSendToInstigator, class UClass* SendMsgClass );
	void eventReceiveLocalizedAmmoMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
	void eventReceiveLocalizedCreditMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
	void eventReceiveLocalizedItemMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FItemDefinitionData ItemInfo );
	void eventReceiveLocalizedWeaponMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FWeaponDefinitionData WeaponInfo );
	void eventReceiveLocalizedTrainingDefinitionMessage ( class UClass* Message, class UTrainingMessageDefinition* TrainingDefinition, float Duration );
	void CheckPendingClientTrainingMessages ( );
	void QueueClientTrainingMessage ( class UClass* Message, class UTrainingMessageDefinition* TrainingDefinition, float Duration );
	bool CanReceiveTrainingMessage ( );
	void eventReceiveLocalizedInventoryRefreshMessage ( );
	void eventWarmupPause ( unsigned long bDesiredPauseState );
	bool CanUnpauseWarmup ( );
	void SetLoadingMovieSkipEnabled ( unsigned long bEnabled );
	void eventClientPlayBinkMovie ( struct FString MovieName, unsigned long bStreamed, unsigned long bLooping, unsigned long bForceNoSkip );
	void eventWillowClientDisableLoadingMovie ( );
	void eventWillowClientShowLoadingMovie ( struct FString MovieName, unsigned long bShowMovie, unsigned long bPauseAfterHide, float PauseDuration, float KeepPlayingDuration, unsigned long OverridePreviousDelays, unsigned long NoLooping );
	void WillowShowLoadingMovie ( struct FString MovieName, unsigned long bShowMovie, unsigned long bPauseAfterHide, float PauseDuration, float KeepPlayingDuration, unsigned long NoLooping );
	void InitializeGFxUIManager ( );
	void ClientCloseLobby ( );
	void StartActionSkill ( );
	void TryOpenCharacterSelectUI ( );
	void ClientNotifyPostInitialize ( );
	void ClientSetHUD ( class UClass* newHUDType, unsigned long bShowLobby );
	bool IsCurrentLevelInTheGame ( );
	void ClientGFxStopMovie ( struct FName MovieTag );
	void ClientGFxPlayMovie ( class UGFxMovieDefinition* MovieDefinition, class UObject* OtherObject, struct FName MovieTag );
	void ClientGFxChangeState ( class UIGFxActorMovie* TargetActor, struct FName State, unsigned char Change, unsigned long bAllPlayers );
	void ReadSaveGamesComplete ( unsigned long bWasSuccessful );
	void LoadGameFromLoadInfo ( struct FLoadInfo LI1, struct FLoadInfo LI2, struct FString P2ClassName );
	void GetSaveGameList ( );
	void CheckSaveGamesAvailableCompleted ( unsigned long bSaveGamesAvailable );
	void ReadSaveGameListComplete ( unsigned long bWasSuccessful );
	void CheckPS3ReadSaveGameListComplete ( );
	void CheckSaveGamesAvailable ( struct FScriptDelegate CheckSaveGamesAvailableCompleteDelegate );
	void OnCheckSaveGamesAvailableComplete ( unsigned long bSaveGamesAvailable );
	void ClientDamageShake ( int Damage );
	void UpdateVisibilityOfAllActiveScreenParticles ( );
	bool ScreenParticlesShouldBeVisible ( );
	void SetUpVoGScreenParticle ( class UParticleSystem* Template, struct FName TextureMovieParamName );
	void eventHideScreenParticle ( class UParticleSystem* Template, struct FName ParticleTag, unsigned long bAllowParticleToFinish );
	void ApplyScreenParticleModifiers ( class UParticleSystem* Template, TArray< struct FScreenParticleModifier > ScreenParticleModifiers );
	int FindScreenParticleRecordIndexByTag ( struct FName ParticleTag );
	int FindScreenParticleRecordIndexByTemplate ( class UParticleSystem* Template );
	void OnScreenParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void eventShowScreenParticle ( struct FScreenParticleInitParams InitParams );
	void TickScreenParticleModifiers ( );
	void NotifyTargetedActionSkillImpact ( );
	void NotifyPetKilledEnemy ( );
	void NotifyActionSkillRunTime ( int Runtime );
	void eventClientUnlockAvatarAward ( unsigned char AvatarAward );
	void eventClientUnlockAchievement ( int AchievementId );
	void OnUnlockAchievement ( class USeqAct_UnlockAchievement* Action );
	void UnPauseGFxMovie ( struct FString MoviePath );
	void PauseGFxMovie ( struct FString MoviePath );
	void CloseGfxMovie ( struct FString MoviePath );
	void StartPausedGfxMovie ( struct FString MoviePath );
	void PlayGfxMovie ( struct FString MoviePath );
	void PlayGfxMovieDefinition ( struct FString MovieDefinitionName );
	void eventServerTryToTeleportToVehicle ( int SlotIndex, class UWillowGFxMovie* VSSUIMovie );
	void EnsureWeaponsUp ( );
	void DelayedTeleportToVehicle ( );
	void eventDespawnVehicleFromConnectedVehicleSpawnStationTerminal ( int SlotIndex, class UVSSUIDefinition* FutureVehicleUIDef );
	void eventSpawnVehicleFromConnectedVehicleSpawnStationTerminal ( int SlotIndex, class UVSSUIDefinition* VehicleUIDef, class UCustomizationDefinition* DesiredCustomization );
	void eventServerStopUsingVehicleSpawnStationTerminal ( );
	void StopUsingVehicleSpawnStationTerminal ( );
	void StartUsingVehicleSpawnStationTerminal ( class AVehicleSpawnStationTerminal* VSST );
	void OutOfDuelBounds ( );
	void SetDuelingEnabled ( unsigned long bDuelingEnabled );
	void SetHearOptionalPlayerVO ( unsigned long bValue );
	void EnterStartState ( );
	bool HasCachedSaveGame ( );
	class UPlayerSaveGame* eventGetCachedSaveGame ( );
	void ClearRestartPlayerAfterLoginForAllLocalPlayers ( );
	void OnDestroyGameForReturnToTitleComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndGameForReturnToTitleComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ReturnToTitleScreenAfterSave ( );
	void ReturnToTitleScreen ( unsigned long bSkipSave, unsigned long bRemoveSplitPlayer );
	void ClearGameInviteDelegates ( );
	unsigned char GetGamePlayerIndex ( );
	void NotifyLoginChange ( unsigned char LocalUserNum );
	void NotifyUILoginStatusChange ( unsigned char LoginStatus );
	void OnDownloadPatcherFilesBeforeRestore ( );
	void HandleLoginStatusChange ( );
	void NotifyLoginStatusChange ( unsigned char NewStatus, struct FUniqueNetId NewId );
	void HandleSignInChange ( );
	void CleanUpPlayerForTitleScreen ( );
	int GetNumCompletedMissions ( int PlayThrough );
	void UpdateWillowProperties ( int CurrPresenceMode, TArray< struct FSettingsProperty >* WillowProperties );
	void UpdateWillowContexts ( TArray< struct FLocalizedStringSetting >* WillowContexts );
	void InnerSetOnlineStatus ( );
	void ClientSetOnlineStatus ( );
	void ClientSetOnlineStatusAllPlayers ( );
	bool IsCurrentGameFull ( );
	int GetNumPlayers ( );
	void OnStopCameraAnim ( class UWillowSeqAct_StopCameraAnim* inAction );
	void OnPlayCameraAnim ( class UWillowSeqAct_PlayCameraAnim* inAction );
	void WillowClientStopCameraAnim ( unsigned long bImmediate );
	void eventWillowClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace, unsigned char MirrorAxes );
	void StopAnimSeqCameraAnim ( unsigned long bImmediate );
	void PlayAnimSeqCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime );
	void StopCameraAnim ( unsigned long bImmediate );
	void PlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char MirrorAxes );
	void TeleportPlayersToTravelStation ( class ATravelStation* Station );
	class ATravelStation* FindTravelStationByDefinition ( struct FString StationDefinitionName );
	void TeleportPlayersToStation ( struct FString StationDefinitionName );
	void UpdatePlayerName ( );
	void ServerSetPlayerName ( struct FString PlayerName );
	void ServerSetIsGuest ( unsigned long bIsGuest );
	void RegisterCustomPlayerDataStores ( );
	void InvertMouseLook ( unsigned long InvertMouse );
	void InvertGamepadLook ( unsigned long InvertGamepad );
	int GetProfileSettingInt ( int ProfileId, unsigned long bShouldDisplayMessage );
	void SetProfileSettingInt ( int ProfileId, int pVal, unsigned long bDisplayDebugMessage );
	void ClientHandleKickedForNotHavingDlc ( class UDownloadableExpansionDefinition* DlcExpansion );
	void ClientHandleKicked ( );
	void eventClientWasKicked ( );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	struct FString GetConnectionFailureNoticeMsg ( );
	void NotifyUILinkOn ( );
	void NotifyUILinkLost ( );
	void NotifyLinkStatusChange ( unsigned long bIsConnected );
	void eventReceivedPlayer ( );
	void PostControllerIdChange ( );
	void PreControllerIdChange ( );
	void ClearOnlineDelegates ( );
	class UCharacterSelectionReduxGFxMovie* eventGetCharacterSelectMovie ( );
	class UFrontendGFxMovie* GetFrontendMovie ( );
	void UpdateLastNewOfferVersion ( );
	bool AreNewOffersAvailable ( );
	bool HasSeasonPassContentToInstall ( unsigned long bPreOrder );
	void RegisterOnlineDelegates ( );
	void OnSentGameInvite ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void OnReceivedNewProfile ( );
	bool TryUpdateProfileCounts ( );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void SetAudioGroupVolumesFromProfile ( );
	void SetAudioProfileAkRtpc ( class UAkRtpc* RTPC, float Value );
	void UpdateFOVAspectRatioScalar ( );
	void SetVerticalSplit ( unsigned long bEnable );
	void SetSplitDirectionFromProfile ( );
	void SetPlayerFOVFromProfile ( );
	void SetGammaFromProfile ( );
	void HidePS3WritingProfileDialog ( );
	void ShowPS3WritingProfileDialog ( );
	void CheckDeferredOperations ( );
	void SetCheckDeferredOperations ( );
	void eventSetNeedsProfileWrite ( unsigned long bNeedsProfileWrite );
	bool eventGetNeedsProfileWrite ( );
	void SetHUDScaleFromProfile ( );
	float GetPercentToNextToken ( );
	void SetupBadassInfo ( );
	void ServerUnpackBadassRewardsEarned ( struct FString RewardString );
	int GetBadassRewardsToOfferNext ( int RewardIndex );
	bool HasEverCalculatedBadassRewardsToOffer ( );
	int CalculateBadassRewardGradeBaseline ( );
	void CalculateNextBadassRewardsToOffer ( );
	void UnpackBadassRewardArray ( struct FString RewardString, TArray< int >* UnpackedArray );
	void PackBadassRewardArray ( TArray< int > UnpackedArray, struct FString* PackedString );
	void ServerSetVehicleSteeringMode ( int Mode );
	void ServerSetInvertedReverseSteering ( unsigned long bInUseInvertedReverseSteering );
	void ServerSetTradingDisabled ( unsigned long bInTradingDisabled );
	void ClientSendProfileSettingsToServer ( );
	void SetSettingsFromProfile ( );
	void SetColorBlindModeProfileSetting ( int InColorBlindMode );
	void SetControllerRebinding ( struct FString ControllerRebindingString );
	void ApplyControllerRebinding ( struct FString ControllerRebindingString );
	void SetKeyRebinding ( struct FString KeyRebindingString );
	void ApplyKeyRebinding ( struct FString KeyRebindingString );
	void SetControllerPreset ( struct FName PresetName );
	bool ApplyControllerPreset ( struct FName PresetName );
	void SetupInputDevices ( );
	void ClientSetupInputDevices ( );
	void OnProfileWriteComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool eventWriteProfile ( unsigned long bShouldShowProfileDialog );
	bool WriteProfileFor ( int controllerIdx );
	void SetPlayerMovementType ( int NewType );
	void DirtyViewPoint ( );
	void SetGFxMoviesNeedMatrixUpdate ( );
	void eventUpdateScaleformHUDVisibility ( );
	void OnToggleHUD ( class USeqAct_ToggleHUD* inAction );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons, unsigned long bAffectsGodMode, unsigned long bAffectsNoTarget, unsigned long bInAllowCinematicSplitScreen, unsigned long bPauseDialog, unsigned long bKismetSetCinematicMode );
	void ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons, unsigned long bAffectsHUD, unsigned long bInAllowCinematicSplitScreen, unsigned long bPauseDialog, unsigned long bKismetSetCinematicMode );
	void eventSetMapChangeCinematicMode ( );
	class AWillowPawn* eventGetPlayerBodyPawn ( );
	void eventClearHUDMessage ( unsigned char MsgType );
	bool IsTrainingEnabled ( );
	void eventDisplayTrainingMessage ( unsigned char MsgType, struct FString MessageString, struct FString MessageTitleString, float Duration, struct FColor DrawColor, struct FString HUDInitializationFrame, unsigned long PausesGame, float PauseContinueDelay, unsigned long bMandatory, unsigned char StatusMenuTab, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class UObject* OptionalObject );
	void eventDisplayHUDMessage ( unsigned char MsgType, struct FString MessageString, float Duration, struct FColor DrawColor, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class UObject* OptionalObject );
	void ClearActivePlayerChallenges ( );
	void eventHandleTrainingEventDefinition ( class UTrainingMessageDefinition* TrainingDefinition );
	void eventTrainingEventComplete ( struct FTrainingData Listener );
	bool CanDisplayTrainingMessage ( class UTrainingMessageDefinition* TrainingMessageDef );
	void ClearActiveStatListeners ( );
	void SaveGameStageData ( class UPlayerSaveGame* SaveGame );
	void ApplyGameStageData ( class UPlayerSaveGame* SaveGame );
	void OnArrivedInNewLevel ( );
	bool PlayerHasChallenge ( class UChallengeDefinition* ChalDef );
	void SaveChallengeData ( class UPlayerSaveGame* SaveGame );
	bool OnPrestigeResetChallenges_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void TryPrestige ( );
	int GetHighestChallengeLevelIncomplete ( class UChallengeDefinition* ChalDef );
	int GetHighestChallengeLevelComplete ( class UChallengeDefinition* ChalDef );
	bool IsChallengeComplete ( class UChallengeDefinition* ChalDef );
	bool IsChallengeLevelCompleteForValue ( class UChallengeDefinition* ChalDef, int LevelIdx, struct FName Stat, int StatValue );
	bool IsChallengeLevelComplete ( class UChallengeDefinition* ChalDef, int LevelIdx );
	bool CanPrestigeResetChallenges ( );
	void PrestigeResetChallenges ( unsigned long bForce );
	void eventAddChallengeToLocalCache ( struct FChallengeData InChalData );
	void ApplyPlayerChallengeData ( class UPlayerSaveGame* SaveGame );
	void ClientResetPlayerChallenges ( );
	void ServerResetPlayerChallenges ( unsigned long bIsFromCharacterLoad );
	bool StatsAreReady ( );
	void ResetStatsListeners ( );
	void RegisterStatListener ( class UPlayerStatsNotifier* Notifier, class UTrainingMessageDefinition* TrainingMessageDef );
	void eventClientShowChallengeProgressUpdate ( class UChallengeDefinition* Challenge, int LevelIndex, int ConditionIndex, int CurrStatVal, int GoalStatVal );
	void ShowChallengeProgressUpdate ( class UChallengeDefinition* Challenge, int LevelIndex, int ConditionIndex, int CurrStatVal, int GoalStatVal );
	void CheckForChallengeCompletionAchievement ( );
	void ClientOnChallengeComplete ( class UChallengeDefinition* Challenge, int LevelIdx );
	float GetPointsForChallenge ( struct FAttributeInitializationData Points );
	void GrantChallengeCompletionItemRewards ( class UChallengeDefinition* ChalDef, int LevelIdx );
	void eventChallengeCompleted ( class UChallengeDefinition* Challenge, int LevelIdx );
	void eventDestroyed ( );
	void StopTeleporterSound ( );
	void PlayTeleporterSound ( );
	bool eventReleaseHolding ( );
	bool TryToTeleportIntoVehicle ( class AWillowVehicleBase* SeatActor );
	void HoldingReleaseTimerExpired ( );
	void TeleportPlayerToHoldingCell ( class AActor* HoldingActor, class AActor* FinalDestActor, unsigned long bUpdateRotation );
	void OnTeleport ( class USeqAct_Teleport* Action );
	bool AllDestinationLevelsAreVisible ( struct FVector DestLoc );
	void ClientSetPawnLocation ( class APawn* aPawn, struct FVector NewLocation, struct FRotator NewRotation );
	bool NoFailSetPawnLocation ( class APawn* aPawn, struct FVector NewLocation );
	bool TeleportPlayer ( struct FVector TeleportLocation, struct FRotator TeleportRotation, unsigned long bSuppressNotifyTeleported, unsigned long bHideTeleportEffect );
	void Behavior_SpawnTeleporter ( class UPersonalTeleporterDefinition* Definition );
	void ServerSpawnTeleporter ( class UPersonalTeleporterDefinition* Definition );
	void aa_SetLockEnabled ( unsigned long bEnabled );
	void aa_SetOnMoveOnly ( unsigned long bEnabled );
	void aa_SetTargetSet ( unsigned char Type );
	void tl_DumpList ( );
	void Behavior_CameraAnim ( class UCameraAnim* Anim );
	void Behavior_ViewShake ( struct FGearboxViewShakeInfo ShakeInfo );
	void Behavior_ForceFeedback ( class UForceFeedbackWaveform* FFWaveform, unsigned long ForWeaponFiring );
	bool IsShotForceFeedbackAllowedByPlayerProfile ( );
	void ConsumeProjectileResource ( class UProjectileDefinition* ProjectileDefinition );
	class AWillowProjectile* Behavior_SpawnCurrentProjectile ( class UProjectileDefinition* CurrentProjectile, unsigned long bLeftHand, unsigned long bConsumeResource, unsigned long bNoVelocity, unsigned long bSetProjectileToGrenadeMod );
	void Behavior_SetCurrentProjectile ( class UProjectileDefinition* CurrentProjectile );
	class APawn* GetSpawnInstigator ( );
	int GetProjectileExpLevelFromPlayerLevel ( );
	int GetProjectileExpLevelFromEquipmentLevel ( unsigned char EquipmentLocation );
	void CheckReload ( );
	bool CanThrowGrenade ( class UProjectileDefinition* ProjectileDefinition );
	bool CanAffordGrenadeCost ( class UProjectileDefinition* ProjectileDefinition );
	void WeaponActionComplete ( );
	void GrenadeThrowComplete ( );
	void MeleeAttackComplete ( );
	void ClientNotifyOutOfGrenades ( );
	void ClientThrowGrenade ( );
	void ThrowGrenade ( class UProjectileDefinition* ProjectileDefinition );
	void ServerThrowGrenade ( class UProjectileDefinition* ProjectileDefinition );
	void ThrowGrenadeSkillOverride ( );
	bool CanPerformThrowGrenadeSkill ( );
	void StartThrowGrenadeSkill ( );
	void ServerStartThrowGrenadeSkill ( );
	void Behavior_ThrowGrenade ( );
	void TestMeleeLunge ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void LungeTowardTarget ( class AActor* LungeTarget, float LungeLength );
	class APawn* FindMeleeTarget ( );
	bool CanLunge ( class AActor* LungeTarget );
	void DetachMeleeWeaponMesh ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void AttachMeleeWeaponMesh ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void Behavior_DetachMeleeWeapon ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void Behavior_AttachMeleeWeapon ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void MeleeAttack ( unsigned char BodyWeaponAction );
	void ServerMeleeSelf ( );
	void ServerMeleeAttack ( );
	void NotifyActionSkillOwnerMelee ( class AWillowPawn* PawnAutoAimTarget );
	class AWillowPawn* GetPawnAutoAimTarget ( );
	void ServerNotifyActionSkillOwnerMelee ( class AWillowPawn* AutoAimTarget );
	void Behavior_Melee ( );
	void PerformSharedWeaponActions ( float TimerDuration, struct FName TimerFunctionName );
	void ServerPerformReload ( );
	void PerformReload ( unsigned long bOnlyReloadIfNeeded );
	void Behavior_Reload ( );
	bool eventCanPerformWeaponAction ( unsigned char FireModeNum );
	void DebugProjectiles ( );
	void ToggleDebugProjectiles ( );
	class UProjectileDefinition* GetCurrentProjectileDefinition ( );
	class AWillowGrenadeMod* GetCurrentGrenadeMod ( );
	void OnWeaponsRestrictedChange ( );
	void eventSetWeaponsRestricted ( unsigned long bNewWeaponsRestrictedState, unsigned long bOverrideAllowWeaponsRestriction, unsigned long bShouldEndDuels, unsigned long bLilacHACKOverride );
	void eventToggleWeaponsRestricted ( );
	void QueryRestricted ( );
	bool CanHoldWeapon ( class APawn* Holder, class AWeapon* TestWeapon, unsigned long bHoldInOffHand );
	void eventSetTeleporterRestricted ( unsigned long bNewTeleporterRestrictedState );
	void eventToggleTeleporterRestricted ( );
	class UUIDataStore_OnlineGameSearch* GetOnlineGameSearchDatastore ( );
	class UWillowOnlineGameSettings_DataStore* GetOnlineGameSettingsDatastore ( );
	class UWillowOnlineGameSettings* GetOnlineGameSettingsViaDatastore ( );
	bool CanCommunicate ( );
	void TriggerSplitscreenJoinCompleteDelegates ( int ControllerId, unsigned long bWasSuccessful );
	void ClearSplitscreenJoinCompleteDelegate ( struct FScriptDelegate SplitscreenJoinCompletelDelegate );
	void AddSplitscreenJoinCompleteDelegate ( struct FScriptDelegate SplitscreenJoinCompleteDelegate );
	void OnSplitscreenJoinComplete ( int ControllerId, unsigned long bWasSuccessful );
	void SplitScreenLeave ( );
	void CheckForSplitPC ( );
	void ClientSplitScreenJoin ( int ControllerId, unsigned long bCanSplitscreenJoin );
	void ServerSplitScreenJoin ( int ControllerId );
	void SplitScreenJoin ( int ControllerId );
	void ss_func ( struct FString args );
	void OnResurrectPlayer ( class UWillowSeqAct_ResurrectPlayer* Action );
	void ServerResurrect ( unsigned char ResurrectReason );
	void Respawn ( );
	void Resurrect ( );
	void UpdateLostShieldEffect ( );
	void EndLostShield ( );
	void BeginLostShield ( struct FName HealthParamName, struct FName MaterialEffectName, float UpdateRate, class UPostProcessChain* InChain );
	void eventPopPostProcessChain ( class UPostProcessChain* InChain, struct FPostProcessChainOptions InChainOptions );
	void ApplyMaterialEffectModifiers ( class UPostProcessChain* InChain, TArray< struct FMaterialEffectModifier > MaterialEffectModifiers );
	void PushPostProcessChain ( class UPostProcessChain* InChain, struct FPostProcessChainOptions InChainOptions );
	int FindPostProcessChainRecordIndex ( class UPostProcessChain* InChain );
	void ClearPostProcessChains ( );
	void SendClientInteractionMessage ( class UClass* ClientType, int MessageValue, class UObject* Data );
	void SendServerInteractionMessage ( class UClass* ClientType, int MessageValue, class UObject* Data );
	void eventEndInteraction ( );
	void StartInteraction ( class UClass* ClientType, int MessageValue );
	void pip_sendmessage ( int MessageValue );
	void UpdatePlayerPostProcessOverlay ( float DeltaTime );
	void ClearPostProcessOverlayQueue ( int IndexToSave );
	void SetupPostProcessOverlay ( int Index, unsigned long bReset );
	int GetPostProcessOverlayIndex ( struct FName OverlayName );
	int AddPostProcessOverlay ( struct FPostProcessOverlay NewPostProcessOverlay );
	class UCharacterClassDefinition* GetClassDefinition ( );
	void DisplayDebugControllers ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayDebugDamageTypeModifiers ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayDebugProficiencySkills ( class AHUD* HUD, float* out_YL, float* out_YPos );
	class UWillowAIDebugCamera* GetWillowAIDebugCam ( );
	bool ShouldCheckRemoteControlCheckbox ( unsigned char CheckBoxName, class AHUD* HUD );
	void ShowPlayerInfo ( );
	void AITree ( );
	void ToggleWillowInspectorStats ( );
	void ToggleAccuracyDebug ( );
	void ToggleTerritoryZones ( );
	void AIToggleShowTimers ( );
	void AIShowNodeReservation ( );
	void AIDebugSetPawn ( class AGearboxPawn* NewPawn );
	void AILog ( );
	void ShowRotation ( );
	void AIDebugSetPawnByName ( struct FName NewPawnName );
	void debugpawn ( );
	void aisetp ( struct FName NewPawnName );
	void NotifyGameUnPaused ( );
	void NotifyGamePaused ( );
	bool IsTriggerUsable ( struct FVector PlayerCameraLoc, struct FRotator PlayerCameraRot, class ATrigger* TriggerActor, unsigned long bAimToInteract, unsigned long bUseTriggerInteractDistance, float TriggerInteractDistance );
	bool IsTriggerUsableByPlayer ( class ATrigger* TriggerActor, unsigned long bAimToInteract, unsigned long bUseTriggerInteractDistance, float TriggerInteractDistance );
	void GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList );
	void ShowHUDToolTip ( struct FInteractionIconWithOverrides HUDIcon, unsigned char UsabilityType );
	void UpdateInteractionIcon ( struct FInteractionIconWithOverrides Icon, unsigned char UsabilityType );
	void ClientSetBehindView ( unsigned long bNewBehindView );
	void WillowBehindView ( unsigned long bNewBehindView );
	struct FRotator Get3rdPersonAimRotation ( class AWeapon* W, struct FVector StartFireLoc );
	void LaunchGameFromMainMenuData ( );
	void HB ( struct FString Out );
	void SetMainMenuHostFlag ( unsigned long StartAHost );
	void SetMainMenuCharacterClass ( int forWhom, struct FString CharacterClassStr );
	void SetAndBroadcastMainMenuCharacterClass ( int forWhom, struct FString CharacterClassStr );
	void SetMainMenuSplitScreenFlag ( unsigned long bUseSplit, unsigned long bSpawnActor, int NewControllerId );
	void MainMenuResetPlayers ( );
	void SetMainMenuMapName ( struct FString MapName );
	void InitAccuracyFromWeapon ( class AWillowWeapon* TheWeapon );
	void GetAccuracyExtremes ( unsigned long bOffHand, float* MinAccuracy, float* MaxAccuracy, float* CurrentAccuracy );
	float GetBaseAccuracy ( unsigned long bOffHand );
	float GetAccuracy ( unsigned long bOffHand );
	void FinalAddHUDDamageIndicator ( );
	void AddHUDDamageIndicator ( struct FVector HitDir, unsigned long bShieldOnlyDamage );
	struct FString GetNextString ( struct FString* args );
	void eventInitInputSystem ( );
	void DisplayAudioDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayLevelTransitionState ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void SetParkedSlip ( float Slip );
	void SetCMMEnabled ( unsigned long bEnabled );
	void SetCMMThreat ( float Threat );
	void ServerPlayVehicleHorn ( );
	void PlayVehicleHorn ( );
	void ClientCloseMenu ( );
	void HideQuickSelectWeaponMenu ( );
	void ShowQuickSelectWeaponMenu ( );
	void ShowStatusMenu_Logs ( );
	void ShowStatusMenu_Challenges ( );
	void ShowStatusMenu_Skills ( );
	void ShowStatusMenu_Inventory ( );
	void ShowMap ( );
	void ServerSetStatusMenuOpen ( unsigned long bNewValue );
	void SetStatusMenuOpen ( unsigned long bNewValue );
	void ShowCannotOpenMenu ( );
	void ShowStatusMenu ( );
	bool CanShowModalMenu ( unsigned char* bDisplayFailureWarning );
	void ShowDebugMenu ( );
	void ZoomIfPending ( );
	void ClearPendingZoom ( );
	void SetPendingZoom ( );
	bool IsZoomed ( );
	void ForceUnzoom ( unsigned long bClearInput );
	class UWillowGameViewportClient* eventGetPlayerViewportClient ( );
	void ClosePS3ControllerDialog ( );
	void ShowPS3ControllerDialog ( int ForControllerId );
	class UWillowGFxUIManager* GetUIManager ( unsigned long bWantPrimaryManager );
	class AWillowPlayerController* GetPrimaryPlayer ( );
	bool CheckAllControllersConnected ( int* DisconnectedId );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void CheckControllerChangeStatusAfterDelay ( );
	void RetryControllerDisconnect ( );
	bool CanShowPauseMenu ( );
	bool IsPauseMenuOpen ( );
	bool IsLobbyEnabled ( );
	void EnableLobby ( unsigned long bEnable );
	bool IsLobbyMenuOpen ( );
	void HideLobbyUI ( );
	void ShowLobbyUI ( );
	void SetLobbyReady ( unsigned long bIsReady );
	void ServerSetLobbyReady ( unsigned long bIsReady );
	void ApplySaveGamesBeforeLevelTransition ( );
	void GFxPauseMenuClosed ( );
	void GFxPauseMenu ( );
	void SetGFxPauseMenuOpenState ( unsigned long bIsOpen );
	void ShowPauseMenu ( );
	void ShowMenu ( );
	void Pause ( );
	void FixFOV ( );
	void AdjustFOV ( float DeltaTime );
	void OnDefaultFOVChanged ( );
	void RemoveSprintFOV ( );
	void ApplySprintFOV ( );
	void SetPlayerFOV ( float HFOV );
	void FOV ( float HFOV );
	float ToHFOV ( float FFOV );
	float ToVFOV ( float HFOV );
	void ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void PreTransitionCleanup ( );
	void HideHUD ( );
	void DisplayHUD ( unsigned long bDeferred );
	void eventUnPressButtons ( );
	void FinishUncrouch ( );
	void ClientUnDuck ( );
	void CheckJumpOrDuck ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	float AimHelpDistance ( );
	bool AimingHelp ( unsigned long bInstantHit );
	void ServerToggleEquipInventory ( class AWillowInventory* InventoryObject );
	void ToggleEquipInventory ( class AWillowInventory* InventoryObject );
	void ClientDisplayPickupFailedMessage ( );
	void CloneAndGiveToCoopPawns ( class UIPickupable* Pickup, unsigned long bReady );
	void GetCoopPawns ( TArray< class APawn* >* CoopPawns );
	bool ShouldUseCoopRange ( class UIPickupable* Pickup );
	void PickupPickupable ( class UIPickupable* CurrentPickupable, unsigned long bReadyAfterPickup );
	void ServerPickupSomething ( unsigned long bReadyAfterPickup );
	void ServerPickupSpecific ( class UIPickupable* Pickupable );
	void ClientSpawnPickupableMesh ( class UIPickupable* Pickup );
	void ServerUpdatePickupFailsFull ( );
	void ServerConditionalThrowPawnEquippedItem ( unsigned char EquipLocation );
	void ServerThrowPawnActiveWeapon ( );
	void PickupSomething ( unsigned long bReadyAfterPickup );
	bool AllowReadyAfterPickup ( class UIPickupable* CurrentPickupable );
	bool HasRoomInInventoryFor ( class UIPickupable* Pickupable );
	void eventClearSeenPickupable ( );
	void ServerClearSeenPickupable ( );
	void eventSawPickupable ( class UIPickupable* Pickup );
	void ServerSawPickupable ( class UIPickupable* Pickup );
	void UnTouchedPickupable ( class UIPickupable* Pickup );
	void TouchedPickupable ( class UIPickupable* Pickup );
	void eventServerDiscoveredCallOutItem ( class UIPickupable* Pickup );
	void eventDiscoveredCallOutItem ( class UIPickupable* Pickup );
	class UIPickupable* GetCurrentPickupable ( );
	bool LandingShake ( );
	void CheckBulletWhip ( class UAkEvent* BulletWhipAkEvent, struct FVector FireLocation, struct FVector FireDir, struct FVector HitLocation );
	int GetMaxOverpowerLevel ( );
	int GetMaxExpLevel ( );
	int GetExpPoints ( );
	int GetExpPointsRequiredForLevel ( int Level );
	float GetExpPercentToNextLevel ( float CurrXp, int* PointsTowardLevel, int* PointsRequiredTolevel );
	void UpdateLcdExp ( float ExpPoints );
	void OnAllyLevelChange ( class AWillowPlayerReplicationInfo* AllyPRI );
	void eventDoLevelUpNotifications ( int ExpLevel );
	void ClientOnExpLevelChange ( int ExpLevel );
	void OnExpLevelChange ( unsigned long bFeedback, unsigned long bNaturalLevelup );
	void eventExpLevelUp ( unsigned long bCheated );
	void ExpEarn ( int Exp, unsigned char Source, unsigned char ExpType );
	void eventScriptAnnounceAmmoGain ( int AmmoType, int GainedAmount );
	void eventScriptAnnounceCreditGain ( int GainedAmount, class APlayerReplicationInfo* PRI );
	void ServerAnnounceItemPickup ( class AWillowItem* ItemPickedUp, class APlayerReplicationInfo* PRI );
	void ServerAnnounceWeaponPickup ( class AWillowWeapon* WeaponPickedUp, class APlayerReplicationInfo* PRI );
	void HandlePickup ( class AInventory* Inv );
	int GetSkillGrade ( class USkillDefinition* Definition );
	void eventClientSetSkillGrade ( class USkillDefinition* Skill, unsigned char NewSkillPoints, unsigned char Grade );
	void ServerSkillSaveGameDataCompleted ( );
	void ServerSetSkillSaveGameData ( class USkillDefinition* Skill, unsigned char Grade );
	void ServerUpgradeSkill ( class USkillDefinition* Skill );
	void eventUpdateSkillsAfterTreeReset ( );
	void CheckSkillActivation ( class USkillDefinition* Skill );
	int GetSkillUpgradeCost ( class USkillDefinition* Skill );
	void eventClientResetSkillTree ( unsigned long bIgnoreProficiencies );
	int ResetSkillTree ( unsigned long bIgnoreProficiencies, unsigned long bIsCharacterLoad );
	void ClientPurchaseSkillTreeResetFailed ( );
	void ServerPurchaseSkillTreeReset ( );
	int GetSkillTreeResetCost ( );
	void ResetMeleeSkillCooldown ( );
	void ResetMeleeSkill ( );
	float eventGetMeleeSkillCooldownTimeRemaining ( );
	float eventGetMeleeSkillCooldownTime ( );
	void StartMeleeSkillCooldown ( );
	bool eventIsMeleeSkillOnCooldown ( );
	bool CanPerformMeleeSkill ( );
	void StartMeleeSkill ( );
	void ServerStartMeleeSkill ( );
	void ServerStartActionSkillCooldownAbility ( class AWillowPawn* AutoAimTarget );
	void StartActionSkillCooldownAbility ( );
	void ServerNotifyActionSkillActiveAbility ( class AWillowPawn* AutoAimTarget );
	void NotifyActionSkillActiveAbility ( );
	void ServerStartActionSkillActiveAbility ( class AWillowPawn* AutoAimTarget, unsigned long bNotifyClient );
	void StartActionSkillActiveAbility ( );
	void ServerStartActionSkill ( class AWillowPawn* SkillTarget );
	float GetActionSkillDuration ( );
	void ActionSkillCallback ( class USkill* ActivatedSkill, unsigned long bActivated );
	class AController* Behavior_GetSkillInstigatorController ( );
	void Behavior_UpgradeSkill ( class USkillDefinition* SkillToUpgrade, int NumberOfLevelsToRaise, int MaximumLevelToRaiseSkill );
	void ServerDeactivateSkill ( class USkillDefinition* SkillToDeactivate, unsigned long bIgnoreSkillInstigator );
	void Behavior_DeactivateSkill ( class USkillDefinition* SkillToDeactivate, unsigned long bIgnoreSkillInstigator );
	void ServerActivateSkill ( class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade );
	void Behavior_ActivateSkill ( class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade );
	class ASkillEffectManager* GetSkillManager ( );
	void InitPlayerSkillTree ( );
	void eventOnPlayerClassChange ( );
	void ApplyCharacterClassStartingValues ( class UCharacterClassDefinition* CharClass );
	void ApplyCharacterClassDefaults ( class APawn* P, class UCharacterClassDefinition* CharClass );
	void ClientNotifyClassChanged ( class UPlayerClassDefinition* NewPlayerClass );
	void RetryClassSwitch ( );
	void eventSwitchPlayerClass ( class UPlayerClassDefinition* NewPlayerClass );
	void eventServerSwitchPlayerClass ( class UPlayerClassDefinition* NewPlayerClass );
	void eventServerPlayerSelectClass ( struct FString ClassDefinitionName );
	void PlayerSelectClass ( struct FString args );
	void InitializeWorldMissionState ( );
	void RefreshHUDMissionWidget ( );
	void FixupPlaythroughTwo ( int PlaythroughsCompleted );
	void ApplyMissionSaveGameData ( class UPlayerSaveGame* SaveGame, unsigned long bManageRewards );
	void FixupSavedMissionGameStage ( int PlaythroughIndex, struct FMissionStatusPlayerData* MStatus );
	void ApplyGatewayDLCStations ( );
	void ApplyVisitedTeleporterData ( class UPlayerSaveGame* SaveGame );
	void eventReapplyVisitedTeleporterData ( );
	class UTravelStationDefinition* GetSavedTravelStation ( class UPlayerSaveGame* SaveGame );
	void eventRequestNewStatsChannel ( );
	void ApplyStatsSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ServerSetWeaponSaveGameData ( int Index, struct FWeaponDefinitionData DefinitionData, unsigned char QuickSlot, unsigned char Mark );
	void ApplyWeaponSaveGameData ( class UPlayerSaveGame* SaveGame );
	void FixupSavedWeapons ( TArray< struct FWeaponSaveGameData >* WeaponData );
	void ServerSetInventorySlotSaveGameData ( struct FInventorySlotSaveGameData Data );
	void ApplyInventorySlotSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ServerSetItemSaveGameData ( int Index, struct FItemDefinitionData DefinitionData, int Quantity, unsigned long bEquipped, unsigned char Mark );
	void ServerItemSaveGameDataCompleted ( );
	void eventApplyDLCInventorySaveGameData ( TArray< struct FInventorySaveGameData > ItemData, TArray< struct FWeaponSaveGameData > WeaponData );
	void ApplyItemSaveGameData ( class UPlayerSaveGame* SaveGame );
	bool ValidateItemDefinition ( struct FItemDefinitionData DefinitionData );
	bool ValidateWeaponDefinition ( struct FWeaponDefinitionData DefinitionData );
	void ApplyInventorySaveGameData ( class UPlayerSaveGame* SaveGame );
	void ServerSetResourceSaveGameData ( int Index, class UResourceDefinition* ResDefinition, class UResourcePoolDefinition* PoolDefinition, float Amount, int UpgradeLevel );
	void ApplyResourceSaveGameData ( class UPlayerSaveGame* SaveGame );
	void RecalculateAttributeInitializedState ( );
	bool ConditionalLoadDefaultSaveGame ( );
	struct FString eventGetSaveGameNameFromid ( int SaveGameId );
	void BuildSaveGameNameFromId ( int SaveGameId );
	void ProcessShiftEntitlements ( unsigned long bCustomizationsOnly );
	bool GrantShiftProfileEntitlement ( int Id, struct FName Identifier, struct FString Payload );
	bool GrantShiftCustomizationEntitlement ( int Id, struct FName Identifier, struct FString Payload );
	bool GrantShiftItemEntitlement ( int Id, struct FName Identifier, struct FString Payload, unsigned long Consumable, int ConsumableAmount, int Consumed );
	void GrantUnconsumedDemoPerk ( );
	void eventGrantNewMarketingCodeBonuses ( );
	bool IsMarketingCodeUnlocked ( int MarketingCode );
	bool eventHasUnlockedCode ( int MarketingCode );
	void SaveMarketingCodeSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ApplyMarketingCodeSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ServerSetSaveGameData ( int ClientExpLevel, int ClientExpPoints, int ClientGeneralSkillPoints, int ClientSpecialistSkillPoints, int* CurrencyOnHand, int PlaythroughsCompleted );
	void ApplyPlayerSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ApplySkillSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ApplyVehicleSteeringModeData ( class UPlayerSaveGame* SaveGame );
	void ApplyVehicleCustomizationData ( class UPlayerSaveGame* SaveGame );
	void ApplyAwesomeSkillSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SaveAppliedCustomizationData ( class UPlayerSaveGame* SaveGame );
	void SaveMissionSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SaveDiscoveredWorldAreaData ( class UPlayerSaveGame* SaveGame );
	void ApplyDiscoveredWorldAreaData ( class UPlayerSaveGame* SaveGame );
	void SaveVisitedTeleporterData ( class UPlayerSaveGame* SaveGame );
	void SavePlayerUIPreferences ( class UPlayerSaveGame* SaveGame );
	void SaveStatsSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SaveWeaponSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SaveInventorySlotSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ExtractExpansionSavedataFromUnloadableItemData ( class UPlayerSaveGame* SaveGame );
	void AddExpansionSavedataToUnloadableItemData ( class UPlayerSaveGame* SaveGame, unsigned long bTrustSaveGameValues );
	void SaveItemSaveGameData ( class UPlayerSaveGame* SaveGame );
	class AWillowInventoryManager* GetPawnInventoryManager ( );
	class APawn* GetInventoryPawn ( );
	void SaveResourceSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SaveSkillSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SaveVehicleSteeringModeData ( class UPlayerSaveGame* SaveGame );
	void SaveVehicleCustomizationData ( class UPlayerSaveGame* SaveGame );
	void SaveAwesomeSkillSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SavePlayerSaveGameData ( class UPlayerSaveGame* SaveGame );
	void ApplyPlayerCustomizationData ( class UPlayerSaveGame* NewSaveGame );
	void ApplyPlayerUIPreferencesData ( class UPlayerSaveGame* NewSaveGame );
	bool IsMissionObjectiveActiveLocal ( class UMissionObjectiveDefinition* MissionObjective, int ForPlaythrough );
	bool IsMissionObjectiveCompleteLocal ( class UMissionObjectiveDefinition* MissionObjective, int ForPlaythrough );
	bool LocalMissionDependenciesMet ( class UMissionDefinition* InMission, int ForPlaythrough );
	int GetLocalActiveMissionNumber ( int ForPlaythrough );
	int GetActivePlotCriticalMissionNumber ( int ForPlaythrough );
	int GetActiveMissionNumber ( );
	void UpdateOnlineGameSettings ( unsigned long bRefreshOnlineData );
	void NotifyUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void SetNeedsUpdateOnlineGameSettings ( );
	void CheckEquipDefaultWeapon ( );
	void GrantDefaultWeaponIfEligible ( class AMissionTracker* MissionTracker );
	void eventClientValidateMissionData ( );
	void eventClientReceiveMissionFiltered ( struct FReplicatedMissionFilterData MissionFilterData );
	void eventClientReceiveMissionObjective ( struct FReplicatedMissionObjectiveData ObjectiveData );
	void eventClientSubObjectiveSetAdvanced ( class UMissionObjectiveSetDefinition* SubObjectiveSetAdvanced );
	void eventClientReceiveMissionActiveObjectiveSet ( class UMissionObjectiveSetDefinition* ActiveObjectiveSet );
	void eventClientReceiveMissionStatus ( struct FReplicatedMissionStatusData MissionStatusData, int GameStage );
	void eventClientReceiveMissionData ( struct FReplicatedMissionData MissionData );
	void eventSetMissionKickoffHeard ( class UMissionDefinition* MissionDef );
	void eventClientReceivedMissionKickoffHeard ( class UMissionDefinition* MissionDef );
	void ServerRequestMissionData ( );
	void RequestMissionData ( );
	void LoadBlackMarketUpgrades ( class UPlayerSaveGame* SaveGame );
	void LoadTheBank ( class UPlayerSaveGame* SaveGame );
	void ApplyHardcoreMode ( class UPlayerSaveGame* NewSaveGame );
	void StoreUnloadableDlcContent ( class UPlayerSaveGame* NewSaveGame );
	void eventServerSetRemoteGoldenKeyData ( int Acquired, int Available );
	void eventLoadPlayerSaveGame ( class UPlayerSaveGame* NewSaveGame );
	void AttemptPostSaveGameCreateFixup ( class UPlayerSaveGame* SaveGame );
	void ConditionalFixWeaponReadyMax ( class UPlayerSaveGame* SaveGame );
	void AttemptPreSaveGameLoadFixup ( class UPlayerSaveGame* SaveGame );
	void ClientHideSendingSaveGameDialog ( );
	void CheckSentFullSaveGame ( );
	bool DoReceivedSaveGameValuesMatchExpected ( );
	bool HasSentFullSaveGame ( );
	void ClientShowSendingSaveGameDialog ( );
	int GetExpLevelLoadedFromSavedGame ( );
	int GetExpPointsLoadedFromSavedGame ( );
	void AttemptReplicateSaveGame ( class UPlayerSaveGame* NewSaveGame );
	void NotifyClosedSaveGameChannel ( class USaveGameChannel* InChannel );
	void NotifyReceivedSaveGameChannel ( class USaveGameChannel* InChannel );
	void ParseWillowOneDLCExpansionData ( TArray< unsigned char > ExpansionData );
	void ApplyDLCExpansionData ( class UPlayerSaveGame* NewSaveGame );
	void SaveDLCExpansionData ( class UPlayerSaveGame* NewSaveGame );
	void ClearPlayerSaveGame ( );
	void WriteLastSavedId ( );
	void ReloadDefaultSaveGame ( );
	void StartNewPlaySession ( );
	void LoadCachedSaveGame ( );
	void ShortServerMove ( float TimeStamp, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View, unsigned char AnalogPct );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void AdjustCameraScale ( unsigned long bIn );
	struct FString eventGetClassModString ( unsigned long bPrefixOnly );
	class UItemNamePartDefinition* eventGetClassModNamePart ( );
	void ServerPlayerResetShop ( class UIShop* Shop );
	void SetPendingTransactionStatus ( unsigned char TransactionStatus );
	void PlayerBuyBackInventory ( unsigned char FormOfCurrency, int Price, int Quantity );
	void PlayerSoldItem ( unsigned char FormOfCurrency, int Price );
	void ClientCongradulatePurchase ( );
	void PurchaseWasMade ( unsigned char CurrencyType, int Price, unsigned long bWasItemOfTheDay );
	void ClientTriggerDispenseEventForShop ( class AWillowInteractiveObject* Shop );
	void ServerPlayerBoughtItem ( class AWillowInventory* InventoryObject, int Quantity, unsigned long bReadyItem, class UIShop* Shop, unsigned long bWasItemOfTheDay );
	void PlayerBoughtItem ( class AWillowInventory* InventoryObject, int Quantity, unsigned long bReadyItem );
	void ServerStoppedShopping ( );
	void ServerStartedShopping ( );
	void UnHideDroppedPickupsHiddenWhileInStatusMenu ( );
	class ADroppedPickup* ServerThrowInventory ( class AWillowInventory* InventoryObject, int Quantity );
	void ThrowInventory ( class AWillowInventory* InventoryObject, int Quantity );
	void NextWeapon ( );
	void PrevWeapon ( );
	float ScaleFOV ( float InFOV, float TangentScalar );
	float eventGetFOVAngle ( );
	int BlendRot ( float DeltaTime, int BlendC, int NewC );
	void ReplaceKilledByAIMessageTokens ( struct FString SourceString, class AWillowAIPawn* SourcePawn );
	void GenerateUBMKilledByMessageString ( class AController* Killer, class UClass* DamageType );
	struct FString GetPreferredWeaponTypeString ( );
	struct FString GetPreferredManufacturerString ( );
	float CalculatePercentMissionsComplete ( );
	float CalculatePercentChallengesComplete ( );
	bool PopulateTombstoneData ( struct FTombstoneData* NewTombstoneData );
	void SetHardcoreMode ( unsigned long NewValue );
	void ClientPermadeath ( struct FString KilledByMessage );
	void Permadeath ( );
	void ClearInjuredScreenFadeParticle ( );
	void ClearInjuredState ( unsigned long bPlayInjuredStopSound );
	void ClearControllerInjuredState ( );
	void SetupInjuredState ( );
	void SetupControllerInjuredState ( );
	void ServerInjuredNoTimeout ( );
	void SayIdleTimeOut ( );
	void InjuredNoTimeout ( );
	void ClientOnRevivedPlayer ( class APlayerReplicationInfo* PRI );
	void Behavior_StopRevive ( );
	void Behavior_StartRevive ( );
	void eventServerStopRevive ( );
	void ServerStartRevive ( );
	bool CanPerformReviveTarget ( );
	void SetReviveTarget ( );
	bool IsInTransitionalVehicleState ( float* RemainingTime );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void PostFireDelay ( );
	void StartFire ( unsigned char FireModeNum );
	void ServerSecondaryUse ( );
	void ServerUse ( );
	void SwitchSeats ( );
	void UseSecondary ( );
	void Use ( );
	void ServerSpectate ( );
	void QuickLookPlayerMove ( float DeltaTime );
	void NotifyTakeHit ( class AController* InstigatedBy, class APawn* HitPawn, struct FVector HitLocation, float Damage, class UClass* DamageType, struct FVector Momentum, class UDamagePipeline* Pipeline );
	bool UsingFirstPersonCamera ( );
	void eventResetCameraMode ( );
	void eventClientReset ( );
	void Reset ( );
	void TestViewShake ( float OffsetX, float OffsetY, float OffsetZ, float OffsetRate, float OffsetTime, float RotX, float RotY, float RotZ, float RotRate, float RotTime, float FOVMag, float FOVRate, float FOVTime );
	void ViewShake ( float DeltaTime );
	void ClientShakeView ( struct FGearboxViewShakeInfo ShakeInfo );
	void ShakeView ( struct FGearboxViewShakeInfo NewViewShake );
	void CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	void AddWeaponKick ( float Amount, class UWeaponTypeDefinition* WeaponTypeDef );
	void ApplyWanderingAndKick ( float DeltaTime, struct FVector* POVLocation, struct FRotator* POVRotation );
	void AdjustViewPointForFocusCam ( float DeltaTime, struct FVector* POVLocation, struct FRotator* POVRotation );
	void GetPlayerViewPoint ( unsigned long bMustBeCurrent, struct FVector* POVLocation, struct FRotator* POVRotation );
	void eventSpawnCamera ( );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void SetCameraMode ( struct FName NewCamMode );
	void RaiseFirstPersonHands ( );
	void LowerFirstPersonHands ( );
	void UpdateForegroundFOV ( );
	void SetViewingThirdPersonMenu ( unsigned long bNewViewingThirdPersonMenu, unsigned long bIsStatusMenu );
	void SetBehindView ( unsigned long bNewBehindView );
	void SetContentDebugger ( );
	void ClearContentDebugger ( );
	void BehindView ( );
	void SoakPause ( class APawn* P );
	void Typing ( unsigned long bTyping );
	void ServerAcknowledgePossession ( class APawn* P );
	void AcknowledgePossession ( class APawn* P );
	void UnPossess ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void GivePawn ( class APawn* NewPawn );
	void SetHand ( unsigned char NewWeaponHand );
	void ServerSetHand ( unsigned char NewWeaponHand );
	void ServerPlayerPreferences ( unsigned char NewWeaponHand, unsigned long bNewCenteredWeaponFire );
	void NotifyChangedItem ( class AWillowItem* PreviousItem, class AWillowItem* NewItem );
	void eventResetMapChangeTeleportFlags ( );
	void eventReadyForPlay ( );
	void eventReadyForCommit ( );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon, unsigned long bOffHandWeapon );
	void TickPostProcessChainModifiers ( float DeltaTime );
	void DrawCoopRangeDebug ( );
	void ClientAddTinnitusSource ( class UAkEvent* TinnitusEvent, float Strength, struct FVector VToSource );
	void TriggerTinnitus ( float Strength, class UAkEvent* TinnitusEvent, struct FVector* VToSource );
	void TriggerTinnitusFromLocation ( float Radius, float StrengthModifier, class UAkEvent* OverrideTinnitusEvent, struct FVector* SourceLocation );
	void ShutDownEchoPSC ( );
	void TickEchoPSCOpacity ( );
	void PlayerTick ( float DeltaTime );
	void PayForPickupable ( class UIPickupable* Pickupable );
	bool CanAffordToPickUpPickupable ( class UIPickupable* Pickupable );
	void PayForUsedObject ( class UIUsable* UsedObject, unsigned char UsabilityType );
	bool CanAffordToUseUsableObject ( class UIUsable* UsedObject, unsigned char UsabilityType );
	void NotifyUnableToAffordPickupable ( );
	void NotifyUnableToAffordUsableObject ( unsigned char UsabilityType );
	void ServerExitVehicle ( );
	void ExitVehicle ( );
	bool PerformedSecondaryUseAction ( );
	bool OnClickSpendGoldenKeyToUse ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool ServerUseWithoutConfirmation ( );
	void ClientShowGoldenKeyUseConfirmationDialog ( );
	bool PerformedUseAction ( );
	bool DoesObjectCostToUse ( class UIUsable* UsableObject, unsigned char UsabilityType, unsigned char* CurrencyType, int* CostsAmount );
	struct FString FixUpLoadString ( struct FString InLoadString );
	void QuickLoad ( );
	void QuickSave ( );
	void OnSaveGameComplete ( float SaveDuration );
	void eventSaveGame ( struct FString Filename );
	void SaveGameFor ( int controllerIdx, struct FString args );
	void enum_targetables ( unsigned char Type );
	void ClientApplySaveGame ( );
	bool PlayerIsLicensedToSaveGame ( class UPlayerSaveGame* SaveGame );
	class UItemNamePartDefinition* FindClassModNamePartInSaveGame ( class UPlayerSaveGame* SaveGame );
	void UpdatePRIWithSaveGame ( int ExpLevel, class UItemNamePartDefinition* ClassModNamePart, class UPlayerNameIdentifierDefinition* CharacterNameIdDef );
	void ServerUpdatePRIWithSaveGame ( int ExpLevel, class UItemNamePartDefinition* ClassModNamePart, class UPlayerNameIdentifierDefinition* CharacterNameIdDef );
	struct FString StaticGetSaveGamePrefix ( );
	void OnLoadSaveGame ( unsigned long bWasSuccessful );
	unsigned char FinishSaveGameLoad ( class UPlayerSaveGame* SaveGame, unsigned char LoadResult, unsigned long bUpdatePRI, unsigned long bLoadedNewSaveGame, unsigned long bLoadPlayer, unsigned long bShouldRefreshStandIn, unsigned char LoadPlayerBehavior );
	unsigned char eventLoadGame ( struct FString args, unsigned long bUpdatePRI, unsigned long bLoadPlayer, unsigned char LoadPlayerBehavior, class UPlayerSaveGame** SaveGame );
	void NotifySaveGameLoadedDelegates ( unsigned char LoadGameResult );
	void UnregisterSaveGameLoadedDelegate ( struct FScriptDelegate SaveGameLoadedDelegate );
	void RegisterSaveGameLoadedDelegate ( struct FScriptDelegate SaveGameLoadedDelegate );
	void OnLoadLastSaveGameComplete ( );
	void OnSaveGameLoaded ( unsigned char LoadGameResult );
	void DebugLoadGameFor ( int controllerIdx, struct FString args );
	void DebugLoadGame ( struct FString args );
	bool AreSaveGuidsEqual ( class UPlayerSaveGame* SaveA, class UPlayerSaveGame* SaveB );
	bool GenerateSaveGameGuid ( class UPlayerSaveGame* SaveGame );
	struct FName GetLevelForMission ( class UMissionDefinition* InMission );
	void ServerCompleteMission ( class UMissionDefinition* Mission, class UIMissionDirector* MissionDirector );
	void ServerAcceptMission ( class UMissionDefinition* Mission, class UIMissionDirector* MissionDirector );
	void AcceptMission ( class UMissionDefinition* Mission, class UIMissionDirector* MissionDirector );
	unsigned char GetPlayersMissionStatus ( class UMissionDefinition* InMission );
	struct FString PopulateMissionDataFromStatus ( struct FMissionStatusPlayerData MStatus );
	void UpdateLcdMissionStatus ( );
	bool IsEligibleForMission ( class UMissionDefinition* InMission, class AMissionTracker* Tracker );
	bool IsMissionAvailableToTrack ( class UMissionDefinition* InMission );
	void eventUpdateActiveMission ( class UMissionDefinition* InMission );
	void GetPlayerActiveMissionIndex ( TArray< struct FStatusMenuMissionEligibilityData >* MissionsInProgress, int* ActiveMissionIndex );
	void ServerSetActiveMission ( class UMissionDefinition* Mission );
	void GetPlayerAllMissions ( TArray< struct FStatusMenuMissionEligibilityData >* MissionsInProgress, int* ActiveMissionIndex );
	int eventGetMissionIndex ( class UMissionDefinition* InMission );
	int NativeGetMissionIndex ( class UMissionDefinition* InMission );
	void ClientDoMissionStatusFanfare ( unsigned char FanFareType, unsigned long bNotReplicated, class UMissionDefinition* MissionDef, class UMissionObjectiveDefinition* MissionObjective );
	int AddMission ( class UMissionDefinition* InMission );
	void eventClientReceiveDecrementedMissionObjective ( class UMissionObjectiveDefinition* MissionObjective );
	void eventClientReceiveClearedMissionObjective ( class UMissionObjectiveDefinition* MissionObjective );
	void eventClientReceiveMissionTimerChanged ( class UMissionDefinition* Mission, float SecondsToAdd );
	void eventClientReceiveMissionTimerStopped ( class UMissionDefinition* Mission );
	void eventClientReceiveMissionTimerStarted ( class UMissionDefinition* Mission );
	void eventDecrementMissionObjective ( class UMissionObjectiveDefinition* MissionObjective, class UMissionObjectiveSetDefinition* ActiveObjectiveSet );
	void eventClearMissionObjective ( class UMissionObjectiveDefinition* MissionObjective, class UMissionObjectiveSetDefinition* ActiveObjectiveSet );
	void eventSubObjectiveSetAdvanced ( class UMissionObjectiveSetDefinition* SubObjectiveSetAdvanced );
	void eventUpdateMissionObjective ( class UMissionObjectiveDefinition* MissionObjective, int ObjectiveBit );
	void SetPlayersMissionObjectiveProgressToWorldsMissionObjectiveProgress ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, int PlayThroughNumber, int MissionIndex );
	void SetPlayersMissionProgressToWorldsMissionProgress ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
	void MissionRewardsReceived ( class UMissionDefinition* Mission );
	void ReceiveItemReward ( class UMissionDefinition* Mission, struct FItemDefinitionData* DefinitionData );
	void ReceiveWeaponReward ( class UMissionDefinition* Mission, struct FWeaponDefinitionData* DefinitionData );
	void AcceptOrSaveUnclaimedReward ( struct FPendingMissionRewardData MissionReward );
	bool eventIsMissionMoviePlaying ( );
	void ClientSpawnMissionRewardUI ( struct FPendingMissionRewardData MissionReward );
	void ClientShowNoRewardScreen ( class UMissionDefinition* Mission, unsigned char OldStatus );
	void ClientUpdateUIMissionList ( class UMissionDefinition* OnlyIfThisMissionIsAlreadyInTheList );
	int GetNumRewardChoices ( struct FPendingMissionRewardData MissionReward );
	void ServerGrantMissionRewards ( class UMissionDefinition* Mission, unsigned long bGrantAltReward );
	void eventUpdateActiveObjectiveSet ( class UMissionObjectiveSetDefinition* ActiveObjectiveSet );
	void CheckAllSideMissionsCompleteAchievement ( class UDownloadableExpansionDefinition* DlcExpansion );
	void CheckForSlaughterAchievement ( );
	bool CheckPlaythroughAlmostComplete ( int PlayThroughNumber );
	bool IsPlaythroughComplete ( int PlayThroughNumber );
	bool CheckPlaythroughComplete ( int PlayThroughNumber );
	void eventUpdateMissionStatus ( class UMissionDefinition* Mission, unsigned char NewMissionStatus );
	void ToggleMissionFiltered ( class UMissionDefinition* Mission );
	void eventSetMissionFiltered ( class UMissionDefinition* Mission, unsigned long bFiltered );
	bool eventIsMissionFiltered ( class UMissionDefinition* Mission );
	class UWillowGlobals* GetWillowGlobals ( );
	void CheckForHolidayTimedMissions ( );
	void SpawningProcessComplete ( );
	bool ShouldLoadSaveGameOnSpawn ( unsigned long bIsInitialSpawn, unsigned long bIsClassChange );
	void PawnDied ( class APawn* P );
	void eventReplicatedEvent ( struct FName VarName );
	void SaveBlackMarketUpgrades ( class UPlayerSaveGame* SaveGame );
	void SaveTheBank ( class UPlayerSaveGame* SaveGame );
	void SaveUnloadableDlcContent ( class UPlayerSaveGame* SaveGame );
	class UPlayerSaveGame* eventGeneratePlayerSaveGame ( );
	void eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void OnCurrencyChanged ( struct FCurrencyState ChangedCurrency );
	void eventInviteFriendByIndex ( int FriendIndex );
	void UpdateLcdFriendsList ( );
	void PostSparkEvents ( );
	void UpdateSparkLocation ( );
	void PostSparkStats ( );
	void SortFriends ( );
	void SetSparkTimers ( );
	void PostBeginPlay ( );
	void UpdateSavegameForPlaythroughCompletion ( class UPlayerSaveGame** SaveGame );
	void ClientPublishCachedSaveGameToPRI ( );
	bool eventIsInPublicOnlineGame ( );
	void NotifyInitialDeviceSelectionComplete ( unsigned long bHasValidDevice );
	void OnLoadLastSaveGame ( unsigned char LoadGameResult );
	void LoadLastSavedSaveGame ( );
	void RefreshRemotePlayerStandIns ( );
	class APlayerStandIn* GetPrimaryPlayerStandIn ( );
	class APlayerStandIn* eventGetPlayerStandIn ( class APlayerReplicationInfo* PRI );
	void PlayPlayerStandInTeleportEffect ( struct FVector EffectLocation, struct FRotator EffectRotation );
	void UpdateRemotePlayerStandIn ( class AWillowPlayerReplicationInfo* WPRI );
	void ClearPlayerStandIn ( class APlayerReplicationInfo* PRI );
	void RefreshPlayerStandIn ( );
	bool PrimaryPlayerUsingSavedCharacter ( );
	struct FName GetOutermostLevelName ( );
	bool ShouldEnterLobbySpectatorMode ( );
	int GetPlayerIndex ( );
	void ClientConsoleCommand ( struct FString Command );
	void eventCheatServerRCon ( struct FString Command );
	void eventCheatRCon ( struct FString Command );
	void ServerRCon ( struct FString Command );
	void RCon ( struct FString Command );
	void RelevanceUtility ( unsigned long TurnOn );
	void eventClientSetOneOffCompletion ( int OneOffIndex, int CompletionIndex, int CompletionMask );
	void eventClientSetLevelChallengeUnlockMask ( class UChallengeDefinition* AssociatedChallenge, int Index, int Mask, int TotalObjectCount );
	void DetectAndRestoreMissingProfileData ( class UPlayerSaveGame* SaveGame );
	bool GetChallengeTotalProgress ( class UChallengeDefinition* ChalDef, int* CurrentValue, int* TargetValue );
	bool GetChallengeCurrentLevelProgress ( class UChallengeDefinition* ChalDef, int* CurrentValue, int* TargetValue, int* CurrentLevel );
	bool CheckHasCompletedOneOffLevelChallenge ( class UChallengeDefinition* ChalDef );
	void eventServerCompleteChallenge ( class UChallengeDefinition* ChalDef, int LevelIdx );
	int GetNumLevelObjectsFoundFromBitmask ( int DiscoveredObjectMask );
	int GetNumLevelObjectsFound ( class UChallengeDefinition* ChalDef );
	bool CheckHasCompletedLevelObjectChallengeFromBitmask ( int DiscoveredObjectMask, int TotalObjects );
	bool CheckHasCompletedLevelObjectChallenge ( class UChallengeDefinition* ChalDef, struct FName ForMap );
	void SetHasUnlockedLevelChallengeObject ( class UILevelChallengeObject* LevelChallengeObject, unsigned long bIgnoreNumbering );
	bool GetHasUnlockedLevelChallengeObject ( class UILevelChallengeObject* LevelChallengeObject );
	void SynchronizeLocalDataPackagesWithServer ( );
	void UpdateOnDemandPackageStatus ( struct FString PackageString, unsigned long bIsLoaded );
	void NotifyServerPackageUnloaded ( struct FString PackageString );
	void NotifyServerPackageLoaded ( struct FString PackageString );
	void eventClientUnloadOnDemandPackage ( struct FString PackageString );
	void eventClientLoadOnDemandPackage ( struct FString PackageString );
	bool HasPlayerEarnedAnySkillPoints ( );
	void StopAnyBinkMovie ( );
	bool IsBinkMoviePlaying ( struct FString MovieName );
	bool UseScaleformLoadingMovie ( );
	bool IsAnyBinkMoviePlaying ( );
	bool IsLoadingMoviePlaying ( );
	bool UnlockPlayerClassAchievementIfConditionsMet ( unsigned char AchievementUnlockType, int IntData, unsigned long bCanBeGreater, unsigned long bCanBeLess );
	bool UnlockAchievementIfConditionsMet ( unsigned char AchievementUnlockType, struct FString StringData, int IntData, unsigned long bCanBeGreater, unsigned long bCheckStringAndIntData, unsigned long bCanBeLess );
	void SetDataStoreStringValue ( struct FString MarkupString, struct FString NewValue );
	struct FString GetDataStoreStringValue ( struct FString MarkupString );
	void MarkStationsAsVisited ( );
	class ATravelStation* NativeFindActiveStation ( );
	class APawn* GetWorldPawn ( );
	void OnSkillTreeReset ( int NewSkillPoints );
	void OnSkillPointsChanged ( int NewSkillPoints );
	void OnSkillGradeChanged ( class USkillDefinition* Skill, unsigned char NewSkillPoints, unsigned char Grade );
	void PreProfileWriteSaveComplete ( float SaveDuration );
	void OnDownloadPatcherFilesComplete ( );
};

UClass* AWillowPlayerController::pClassPointer = NULL;

// Class WillowGame.PlayerSkillTree
// 0x0088 (0x00C4 - 0x003C)
class UPlayerSkillTree : public UObject
{
public:
	int                                                SkillTreeRootIndex;                               		// 0x003C (0x0004) [0x0000000000000000]              
	TArray< struct FPlayerSkillTreeBranchData >        Branches;                                         		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerSkillTreeTierData >          Tiers;                                            		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerSkillTreeSkillData >         Skills;                                           		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0064 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.PlayerSkillTree.SkillDefinitionToIndex
	int                                                FirstSkillTypeIndex[ 0x5 ];                       		// 0x00A0 (0x0014) [0x0000000000000000]              
	unsigned long                                      bSuppressNotifications : 1;                       		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInitialized : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class UISkillTreeListener* >               SkillTreeListeners;                               		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4210 ];

		return pClassPointer;
	};

	int GetSkillPointsSpentInTree ( );
	void UnRegisterListener ( class UISkillTreeListener* Listener );
	void RegisterListener ( class UISkillTreeListener* Listener );
	void Initialize ( class USkillTreeDefinition* SkillTreeDef );
	void UpdateBranchProgression ( class USkillTreeGFxObject* GFxHelper );
	void InitializeGFxHelper ( class USkillTreeGFxObject* GFxHelper, int DesiredBranchNumber );
	void InitializeGFxHelper_ActionAbility ( class USkillTreeGFxObject* GFxHelper );
	void AllSkills ( class USkillDefinition** SkillDef );
	void AllSkillsOfType ( unsigned char SkillType, class USkillDefinition** SkillDef );
	bool HasTrainedASkillOfType ( unsigned char SkillType );
	class USkillDefinition* GetActionSkill ( );
	void ApplySkillSaveGameData ( class UPlayerSaveGame* SaveGame );
	void SaveSkillSaveGameData ( class UPlayerSaveGame* SaveGame );
	bool GetTierLayout ( class USkillTreeBranchDefinition* BranchDef, int TierNumber, struct FSkillTreeTierLayoutData* OutTierLayout );
	bool GetTierState ( class USkillTreeBranchDefinition* BranchDef, int TierNumber, struct FSkillTreeTierStateData* OutTierState );
	bool GetBranchState ( class USkillTreeBranchDefinition* BranchDef, struct FSkillTreeBranchStateData* OutBranchState );
	bool GetSkillState ( class USkillDefinition* SkillDef, struct FSkillTreeSkillStateData* OutSkillState );
	void DumpTree ( );
	bool SetSkillGrade ( class USkillDefinition* Skill, int SkillGrade );
	bool UpgradeSkill ( class USkillDefinition* Skill );
};

UClass* UPlayerSkillTree::pClassPointer = NULL;

// Class WillowGame.PlayerStandIn
// 0x01AC (0x0334 - 0x0188)
class APlayerStandIn : public AActor
{
public:
	struct FPointer                                    VfTable_IIGearLikenessConsumer;                   		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyInfoProvider;                       		// 0x0190 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IICustomizable;                           		// 0x0194 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AWillowPlayerReplicationInfo*                OwningPRI;                                        		// 0x0198 (0x0004) [0x0000000000000000]              
	class UPlayerSaveGame*                             SaveGame;                                         		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              LastDataRequestTimeStamp;                         		// 0x01A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBodyClassDefinition*                        BodyClass;                                        		// 0x01A4 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      PlayerMeshComp;                                   		// 0x01A8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01AC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bIsPrimary : 1;                                   		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisplayGear : 1;                                 		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisplayInForeground : 1;                         		// 0x01B0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasHead : 1;                                     		// 0x01B0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasSkin : 1;                                     		// 0x01B0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bAwaitingCustomizationsForTeleportEffect : 1;     		// 0x01B0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FInstanceDataSet                            InstanceState;                                    		// 0x01B4 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      bUsedSlot[ 0x4 ];                                 		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bUsedGroup[ 0x2 ];                                		// 0x01C4 (0x0002) [0x0000000000002000]              ( CPF_Transient )
	struct FWeaponDefinitionData                       Weapon1Data;                                      		// 0x01C8 (0x0044) [0x0000000000002000]              ( CPF_Transient )
	struct FWeaponDefinitionData                       Weapon2Data;                                      		// 0x020C (0x0044) [0x0000000000002000]              ( CPF_Transient )
	struct FItemDefinitionData                         ShieldData;                                       		// 0x0250 (0x0044) [0x0000000000002000]              ( CPF_Transient )
	struct FItemDefinitionData                         GrenadeModData;                                   		// 0x0294 (0x0044) [0x0000000000002000]              ( CPF_Transient )
	struct FItemDefinitionData                         ClassModData;                                     		// 0x02D8 (0x0044) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ExtraPlayerMeshOffset;                            		// 0x031C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ExtraPlayerMeshRotation;                          		// 0x0328 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4212 ];

		return pClassPointer;
	};

	void SetExtraPlayerMeshRotation ( struct FRotator NewRotation );
	void SetExtraPlayerMeshOffset ( struct FVector NewOffset );
	void ClearBodyCompositionInstance ( );
	void ApplyPreviewBodyComposition ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ChangeInstanceDataSwitch ( struct FName SwitchName, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	bool ShouldRefreshLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
	void AssumeLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
	void eventCloneItemMesh ( class USkeletalMeshComponent* ItemMeshComp, struct FItemDefinitionData DefinitionData );
	void eventCloneWeaponMesh ( class USkeletalMeshComponent* WeaponMeshComp, struct FWeaponDefinitionData DefinitionData, TArray< class USkeletalMeshComponent* >* ComponentsAttachedToPrimaryMesh );
	void InitWeaponMesh ( struct FWeaponDefinitionData DefinitionData );
	void RefreshGearForRemotePlayer ( );
	void PlayGearDigistructInEffect ( );
	void HideEquippedGear ( );
	void eventPlayStandInTeleportEffect ( );
	void RemoveAllComponents ( );
	void Initialize ( class UBodyClassDefinition* StandInBodyClass );
	bool AllowFallbackToDefaultCustomizations ( );
	void RefreshCustomizationsOnInstanceData ( );
	struct FName GetCustomizableName ( );
	void GetCustomizableInstanceDataSets ( TArray< struct FPointer >* OutData );
	class UCustomizationDefinition* GetDesiredCustomizationOfType ( class UClass* Type );
	void CustomizationApplied ( class UCustomizationData* Data );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* APlayerStandIn::pClassPointer = NULL;

// Class WillowGame.PlayerStatAttributeValueResolver
// 0x0008 (0x0044 - 0x003C)
class UPlayerStatAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FName                                       StatName;                                         		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4214 ];

		return pClassPointer;
	};

};

UClass* UPlayerStatAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.PlayThroughCountAttributeValueResolver
// 0x0004 (0x0040 - 0x003C)
class UPlayThroughCountAttributeValueResolver : public UAttributeValueResolver
{
public:
	int                                                IncludePlaythroughThree;                          		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4216 ];

		return pClassPointer;
	};

};

UClass* UPlayThroughCountAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryInteractiveObject
// 0x0024 (0x007C - 0x0058)
class UPopulationFactoryInteractiveObject : public UPopulationFactory
{
public:
	class UInteractiveObjectDefinition*                ObjectDefinition;                                 		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInteractiveObjectBalanceDefinition*         ObjectBalanceDefinition;                          		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnObjectOnGround : 1;                         		// 0x0060 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             EnabledBehaviorSets;                              		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x0070 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4218 ];

		return pClassPointer;
	};

	struct FString eventGetDescriptionOfFactoryOutput ( );
	struct FVector GetSpawnLocation ( class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, class UInteractiveObjectDefinition* SelectedObjectDefinition );
	class AWillowInteractiveObject* CreateInteractiveObject ( class UPopulationMaster* Master, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, class UInteractiveObjectDefinition* SelectedObjectDefinition );
	void eventGetPopulatedInteractiveObjectMemento ( class AWillowInteractiveObject* InteractiveObject, struct FPopulatedInteractiveObjectMemento* Memento );
	bool eventShouldSavePopulationActor ( class UPopulationMaster* Master, class AActor* ActorToSave );
	class AWillowInteractiveObject* eventRestoreInteractiveObject ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, struct FPopulatedInteractiveObjectMemento Memento );
	class AActor* eventCreatePopulationActor ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel );
	struct FBoxSphereBounds eventGetSpawnVisibilityBounds ( int GameStage, int AwesomeLevel );
	class UPawnAllegiance* GetActorAllegiance ( int GameStage, int AwesomeLevel );
	class UInteractiveObjectDefinition* GetObjectDefinition ( int GameStage, int AwesomeLevel );
};

UClass* UPopulationFactoryInteractiveObject::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryBlackMarket
// 0x0004 (0x0080 - 0x007C)
class UPopulationFactoryBlackMarket : public UPopulationFactoryInteractiveObject
{
public:
	class UBlackMarketDefinition*                      MarketDefinition;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4220 ];

		return pClassPointer;
	};

	bool eventShouldSavePopulationActor ( class UPopulationMaster* Master, class AActor* ActorToSave );
	class AWillowInteractiveObject* CreateInteractiveObject ( class UPopulationMaster* Master, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, class UInteractiveObjectDefinition* SelectedObjectDefinition );
	class AActor* eventCreatePopulationActor ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel );
};

UClass* UPopulationFactoryBlackMarket::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryVendingMachine
// 0x0060 (0x00DC - 0x007C)
class UPopulationFactoryVendingMachine : public UPopulationFactoryInteractiveObject
{
public:
	unsigned char                                      ShopType;                                         		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FormOfCurrency;                                   		// 0x007D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                CommerceMarkup;                                   		// 0x0080 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LootConfiguration;                                		// 0x0090 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FFeaturedItemData                           FeaturedItem;                                     		// 0x0098 (0x0038) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                FixedItemCost;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FixedFeaturedItemCost;                            		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverrideFormOfCurrency : 1;                      		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4222 ];

		return pClassPointer;
	};

	bool eventShouldSavePopulationActor ( class UPopulationMaster* Master, class AActor* ActorToSave );
	class AWillowInteractiveObject* CreateInteractiveObject ( class UPopulationMaster* Master, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, class UInteractiveObjectDefinition* SelectedObjectDefinition );
	class AActor* eventCreatePopulationActor ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel );
};

UClass* UPopulationFactoryVendingMachine::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryWillowProjectile
// 0x0024 (0x007C - 0x0058)
class UPopulationFactoryWillowProjectile : public UPopulationFactory
{
public:
	struct FName                                       AttachmentPointName;                              		// 0x0058 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SpawnDirection;                                   		// 0x0060 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UProjectileDefinition*                       ProjectileDefinition;                             		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x0068 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      InheritParentVelocity : 1;                        		// 0x0074 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              DirectionConeSize;                                		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4224 ];

		return pClassPointer;
	};

	struct FString eventGetDescriptionOfFactoryOutput ( );
	class AWillowProjectile* CreateProjectile ( class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	bool eventDestroyPopulationActor ( class UPopulationMaster* Master, int nOpportunityIdx, class AActor* ActorToDestroy, class UPopulationFactory* SpawnFactory, int CreationFlags, unsigned long bDontSaveActor );
	class AActor* eventCreatePopulationActor ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel );
	class UPawnAllegiance* GetActorAllegiance ( int GameStage, int AwesomeLevel );
};

UClass* UPopulationFactoryWillowProjectile::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryWillowVehicle
// 0x0041 (0x0099 - 0x0058)
class UPopulationFactoryWillowVehicle : public UPopulationFactory
{
public:
	class UVehicleBalanceDefinition*                   VehicleBalanceDefinition;                         		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AWillowVehicle*                              VehicleArchetype;                                 		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPawnAllegiance*                             SpawnAllegiance;                                  		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TeamNum;                                          		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FItemPoolInfo >                     ItemPoolList;                                     		// 0x0068 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UItemPoolListDefinition* >           ItemPoolIncludedLists;                            		// 0x0074 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVehicleDefaultCrewStruct >         DefaultCrew;                                      		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRotator >                          InitialGunRotations;                              		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      BalanceVehicleFor;                                		// 0x0098 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4226 ];

		return pClassPointer;
	};

	bool eventDestroyPopulationActor ( class UPopulationMaster* Master, int nOpportunityIdx, class AActor* ActorToDestroy, class UPopulationFactory* SpawnFactory, int CreationFlags, unsigned long bDontSaveActor );
	struct FString eventGetDescriptionOfFactoryOutput ( );
	class AActor* eventCreatePopulationActor ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel );
	void InitializeClone ( class AWillowVehicle* Clone );
	class UObject* GetAContextSourceForThePopulationActor ( class UPopulationMaster* Master );
	struct FBoxSphereBounds eventGetSpawnVisibilityBounds ( int GameStage, int AwesomeLevel );
	class UPawnAllegiance* GetActorAllegiance ( int GameStage, int AwesomeLevel );
	int eventGetActorSpawnCost ( int GameStage, int AwesomeLevel, unsigned long bCanSpawnTest );
	class AWillowVehicle* GetVehicleArchetype ( int GameStage, int AwesomeLevel );
};

UClass* UPopulationFactoryWillowVehicle::pClassPointer = NULL;

// Class WillowGame.PopulationOpportunityDen
// 0x00D4 (0x02C4 - 0x01F0)
class APopulationOpportunityDen : public APopulationOpportunity
{
public:
	struct FPointer                                    VfTable_IIAIInterface;                            		// 0x01F0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                MaxActiveActorsIsNormal;                          		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxActiveActorsThreatened;                        		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                MaxTotalActorsFormula;                            		// 0x01FC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class APopulationEncounter*                        ParentEncounter;                                  		// 0x020C (0x0004) [0x0000000000220001]              ( CPF_Edit | CPF_EditConst )
	int                                                ParentEncounterWave;                              		// 0x0210 (0x0004) [0x0000000000220001]              ( CPF_Edit | CPF_EditConst )
	class UPopulationDefinition*                       PopulationDef;                                    		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RespawnDelay;                                     		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsCriticalActor : 1;                             		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyAspectToChildAI : 1;                        		// 0x021C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOpportunityRadius : 1;                           		// 0x021C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAlwaysSeeInThreatRadius : 1;                     		// 0x021C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPatrolDen : 1;                                   		// 0x021C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNeutral : 1;                                     		// 0x021C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;         		// 0x021C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlayerHasBeenDetected : 1;                       		// 0x021C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bKeepLeader : 1;                                  		// 0x021C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bFoundPerches : 1;                                		// 0x021C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bFoundRallyPoints : 1;                            		// 0x021C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	TArray< class AVolume* >                           DetectionVolumes;                                 		// 0x0220 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DenHeight;                                        		// 0x022C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SpawnRadius;                                      		// 0x0230 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PatrolRadius;                                     		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ThreatRadius;                                     		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class APopulationOpportunityDen* >         SharedThreatDens;                                 		// 0x023C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPawnAllegiance*                             OverrideAllegiance;                               		// 0x0248 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AVolume*                                     CombatVolume;                                     		// 0x024C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxTotalActors;                                   		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPawnAllegiance*                             Allegiance;                                       		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AWillowPawn* >                       SpawnedDenMembers;                                		// 0x0258 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPopulationOptionDenSpawnData               SpawnData;                                        		// 0x0264 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      Leader;                                           		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APerch* >                            Perches;                                          		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ARallyPoint*                                 CurrentRallyPoint;                                		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ARallyPoint* >                       RallyPoints;                                      		// 0x029C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FFlag                                       Flag_ShouldRally;                                 		// 0x02A8 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UWillowAIDenComponent*                       AIComponent;                                      		// 0x02B8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      TrackedStat;                                      		// 0x02BC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                StatValue;                                        		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4228 ];

		return pClassPointer;
	};

	void ApplyPreviewBodyComposition ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void OnAIAbortMoveToActor ( class USeqAct_AIAbortMoveToActor* inAction );
	void OnAICombatVolume ( class UWillowSeqAct_AICombatVolume* inAction );
	void OnAIScripted ( class UWillowSeqAct_AIScripted* inAction );
	void OnAIScriptedAnim ( class UWillowSeqAct_AIScriptedAnim* inAction );
	void OnAIScriptedDeath ( class UWillowSeqAct_AIScriptedDeath* inAction );
	void OnAIScriptedFollow ( class UWillowSeqAct_AIScriptedFollow* inAction );
	void OnAIScriptedHold ( class UWillowSeqAct_AIScriptedHold* inAction );
	void OnAISetItemTossTarget ( class UWillowSeqAct_AISetItemTossTarget* inAction );
	void OnAIProvoke ( class UWillowSeqAct_AIProvoke* Action );
	void RemoveStat ( unsigned char StatType, class AWillowAIPawn* DenPawn, unsigned long bUpdateLinkedDens );
	void AddStat ( unsigned char StatType, class AWillowAIPawn* DenPawn, unsigned long bUpdateLinkedDens );
	void InitSequence ( class UActionSequence* NewSequence );
	class UAIDefinition* GetAIDefinition ( );
	class UAIComponent* GetAIComponent ( );
	class UIAIInterface* GetAIParent ( );
	struct FVector GetAILocation ( );
	class AActor* GetAIActor ( );
	bool CanTickAI ( );
	void TriggerProvokedEvents ( );
	void SetAllegiance ( class UPawnAllegiance* NewAllegiance );
	class UPawnAllegiance* GetAllegiance ( );
	void GetDenMembers ( TArray< class AWillowPawn* >* Members );
	void eventTriggerKismetDeathEvent ( );
	float SpawnedCanAttackVehicles ( );
	float GetNumSpawned ( );
	float GetNumAlive ( );
	float GetNumDied ( );
	class ARallyPoint* GetRallyPoint ( );
	void ChooseNewRallyPoint ( );
	void FindRallyPoints ( );
	void TryToAddPerch ( class APerch* NewPerch );
	void FindPerches ( );
	void EnableDebugging ( unsigned long bEnabled );
	void RespawnKilledActors ( float PercentageOfKilledActorsToRespawn );
	void DoSpawning ( class UPopulationMaster* PopMaster );
	void PostBeginPlay ( );
};

UClass* APopulationOpportunityDen::pClassPointer = NULL;

// Class WillowGame.PopulationOpportunityDen_Dynamic
// 0x0010 (0x02D4 - 0x02C4)
class APopulationOpportunityDen_Dynamic : public APopulationOpportunityDen
{
public:
	struct FName                                       DynamicPointName;                                 		// 0x02C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DynamicPointRadius;                               		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGetGameStageFromOwner : 1;                       		// 0x02D0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4230 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void ApplyPreviewBodyComposition ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	bool GetOpportunityGameStage ( int* GameStage, int* AwesomeLevel );
};

UClass* APopulationOpportunityDen_Dynamic::pClassPointer = NULL;

// Class WillowGame.PopulationOpportunityDenRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UPopulationOpportunityDenRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4232 ];

		return pClassPointer;
	};

};

UClass* UPopulationOpportunityDenRenderingComponent::pClassPointer = NULL;

// Class WillowGame.PostureStateExpressionEvaluator
// 0x0004 (0x0040 - 0x003C)
class UPostureStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bStanding : 1;                                    		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCrouched : 1;                                    		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInjured : 1;                                     		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSprinting : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4234 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UPostureStateExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.ProjectileBehaviorBase
// 0x0000 (0x004C - 0x004C)
class UProjectileBehaviorBase : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4236 ];

		return pClassPointer;
	};

};

UClass* UProjectileBehaviorBase::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_Bounce
// 0x0024 (0x0070 - 0x004C)
class UProjectileBehavior_Bounce : public UProjectileBehaviorBase
{
public:
	class UAkEvent*                                    BounceAkEvent;                                    		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ElasticityScaleFormula;                           		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HitNormal;                                        		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ElasticityScale;                                  		// 0x006C (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4238 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_Bounce::pClassPointer = NULL;

// Class WillowGame.ProjectileDefinition
// 0x0204 (0x0240 - 0x003C)
class UProjectileDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyInfoProvider;                       		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UMeshComponent*                              Mesh;                                             		// 0x0048 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkEvent*                                    AmbientAkEvent;                                   		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             InFlightEffects;                                  		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InFlightEffectsOverrideContext;                   		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       InFlightEffectsOverrideName;                      		// 0x0064 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InFlightEffectsScale;                             		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             OverchargedPSCTemplate;                           		// 0x0070 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	class ATemporalField*                              TemporalField;                                    		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        DamageTypeOverrideContext;                        		// 0x0078 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DamageTypeOverrideName;                           		// 0x0088 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowDamageTypeDefinition*                 DefaultDamageTypeDefinition;                      		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     BounceImpact;                                     		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     BounceImpactAkRtpc;                               		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        ExplosionOverrideContext;                         		// 0x009C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ExplosionOverrideName;                            		// 0x00AC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExplosionDefinition*                        DefaultExplosionDefinition;                       		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DamageTypeParameterName;                          		// 0x00B8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRigidBodyImpactEffect : 1;                  		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseCustomAimDirection : 1;                       		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAlwaysOrientInDirectionOfMovement : 1;           		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateMovement : 1;                           		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInheritVehicleVelocity : 1;                      		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                        		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTreatVehicleHitsAsTouch : 1;                     		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanTouchInstigator : 1;                          		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCollideActors : 1;                               		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bStickyProjectilesDontChangeCollisionSize : 1;    		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnNoCollisionFail : 1;                        		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClientIgnoreHitAndTouch : 1;                     		// 0x00C0 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAlsoUseZeroExtentTrace : 1;                      		// 0x00C0 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanTakeDirectDamage : 1;                         		// 0x00C0 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanTakeRadiusDamage : 1;                         		// 0x00C0 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      CanTarget : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWaitForEffects : 1;                              		// 0x00C0 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTreatProjectileAsEnemy : 1;                      		// 0x00C0 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      SmoothHomingReplication : 1;                      		// 0x00C0 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bHomingRoll : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bHomingCollisionAvoidance : 1;                    		// 0x00C0 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bStopIfPastTarget : 1;                            		// 0x00C0 (0x0004) [0x0000000000000003] [0x00200000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAdjustHomingZVelocity : 1;                       		// 0x00C0 (0x0004) [0x0000000000000003] [0x00400000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRetryIfTargetInvalid : 1;                        		// 0x00C0 (0x0004) [0x0000000000000003] [0x00800000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanHomePhaselockedTargets : 1;                   		// 0x00C0 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoAimTarget : 1;                               		// 0x00C0 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bDynamicLightEnvironment : 1;                     		// 0x00C0 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastShadows : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000003] [0x08000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;              		// 0x00C0 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDynamic : 1;                                     		// 0x00C0 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x00C0 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShadowFromEnvironment : 1;                       		// 0x00C0 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                		// 0x00C4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDontDestroyIfVisible : 1;                        		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAICanAvoid : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsPossibleHomingTarget : 1;                      		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsWeaponFire : 1;                                		// 0x00C4 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReceiveWeaponFire : 1;                           		// 0x00C4 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	float                                              RigidBodyImpactEffectThreshold;                   		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RigidBodyImpactEffectDelay;                       		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CustomAimDirection;                               		// 0x00D0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UpwardVelocityBonus;                              		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                SpeedFormula;                                     		// 0x00E0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Speed;                                            		// 0x00F0 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	unsigned char                                      PhysicsMode;                                      		// 0x00F4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AutoAimProfile;                                   		// 0x00F5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ProjectileType;                                   		// 0x00F6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              AtRestSpeedThreshold;                             		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GravityScaling;                                   		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     WaveAmp;                                          		// 0x0100 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     WaveFreq;                                         		// 0x010C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     WavePhase;                                        		// 0x0118 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBulletListenerComponent*                    BulletListenerComponent;                          		// 0x0124 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              StickyChildSpawnCollisionIgnoreTime;              		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                Damage;                                           		// 0x012C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DamageRadius;                                     		// 0x013C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MomentumTransfer;                                 		// 0x014C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                FuseTime;                                         		// 0x015C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                NumberOfChildProjectiles;                         		// 0x016C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxLifespan;                                      		// 0x017C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPawnAllegiance*                             Allegiance;                                       		// 0x0180 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewGuideDistance;                                		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewGuideLockOnAngle;                             		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SearchRadius;                                     		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurningRadius;                                    		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnThresholdTight;                               		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnThresholdWide;                                		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HomingRollAmt;                                    		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HomingRollSpeed;                                  		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FHomingRadiusThreshold >            HomingThresholds;                                 		// 0x01A4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FRotator                                    HomingRotationRate;                               		// 0x01B0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      ProjectileClass;                                  		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UResourceDefinition*                         Resource;                                         		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                ResourceCost;                                     		// 0x01C4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExpPoints;                                        		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightingBoundsScale;                              		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutExponent;                         		// 0x01DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutTime;                             		// 0x01E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientGlow;                                      		// 0x01E4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x01F4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x0200 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionStartDistance;            		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionEndDistance;              		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AIAvoidRadius;                                    		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     FlashIconName;                                    		// 0x021C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FBodyCompositionData                        BodyComposition;                                  		// 0x0228 (0x0014) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4240 ];

		return pClassPointer;
	};

	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
	void OnHomingTargetChanged ( unsigned char EventOutput, class AActor* TargetObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnReflected ( class UObject* HitObject, struct FVector ReflectedDirection, struct FVector HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTouchProximity ( unsigned char EventOutput, class UObject* HitObject, struct FVector HitNormal, struct FVector HitLocation, int DamageSurfaceType, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitTheWorld ( class UObject* HitObject, struct FVector HitNormal, struct FVector HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitDamagableObject ( unsigned char EventOutput, class UObject* HitObject, struct FVector HitNormal, struct FVector HitLocation, int DamageSurfaceType, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilledEnemy ( class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilledFriendly ( class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilledNeutral ( class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedNeutral ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedFriendly ( class UObject* DamageTaker, float DamageAmount, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedEnemy ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnCounterEvent ( struct FName SpecializedEventName, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTimerEvent ( struct FName SpecializedEventName, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTookDirectOrRadiusDamage ( class UObject* DamageCauser, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTookRadiusDamage ( class UObject* DamageCauser, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTookDirectDamage ( class UObject* DamageCauser, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnComeToRest ( struct FVector HitNormal, struct FVector HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitWall ( class AActor* HitActor, struct FVector HitNormal, struct FVector HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitShields ( class AActor* HitActor, struct FVector HitNormal, struct FVector HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitArmor ( class AActor* HitActor, struct FVector HitNormal, struct FVector HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitFleshOrArmor ( class AActor* HitActor, struct FVector HitNormal, struct FVector HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitFlesh ( class AActor* HitActor, struct FVector HitNormal, struct FVector HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTouched ( class AActor* HitActor, struct FVector HitNormal, struct FVector HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnHitWater ( class AActor* HitActor, struct FVector HitNormal, struct FVector HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnExplode ( class APawn* Instigator, struct FVector HitNormal, struct FVector HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnSpawn ( class APawn* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UProjectileDefinition::pClassPointer = NULL;

// Class WillowGame.QSortComparer
// 0x0000 (0x003C - 0x003C)
class UQSortComparer : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4242 ];

		return pClassPointer;
	};

};

UClass* UQSortComparer::pClassPointer = NULL;

// Class WillowGame.InventoryUIStatComparer
// 0x0008 (0x0044 - 0x003C)
class UInventoryUIStatComparer : public UQSortComparer
{
public:
	int                                                StatIndex;                                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSortBestToWorst : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4244 ];

		return pClassPointer;
	};

};

UClass* UInventoryUIStatComparer::pClassPointer = NULL;

// Class WillowGame.QSortAttributeComparer
// 0x0008 (0x0044 - 0x003C)
class UQSortAttributeComparer : public UQSortComparer
{
public:
	class UAttributeDefinition*                        Attribute;                                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBiggerIsBetter : 1;                              		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4246 ];

		return pClassPointer;
	};

};

UClass* UQSortAttributeComparer::pClassPointer = NULL;

// Class WillowGame.WeaponTypeComparer
// 0x0000 (0x003C - 0x003C)
class UWeaponTypeComparer : public UQSortComparer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4248 ];

		return pClassPointer;
	};

};

UClass* UWeaponTypeComparer::pClassPointer = NULL;

// Class WillowGame.RallyPoint
// 0x0000 (0x0188 - 0x0188)
class ARallyPoint : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4250 ];

		return pClassPointer;
	};

};

UClass* ARallyPoint::pClassPointer = NULL;

// Class WillowGame.RecentDropList
// 0x0324 (0x0360 - 0x003C)
class URecentDropList : public UObject
{
public:
	int                                                RecentDrops[ 0xC8 ];                              		// 0x003C (0x0320) [0x0000000000000000]              
	int                                                NextIndex;                                        		// 0x035C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4252 ];

		return pClassPointer;
	};

	bool Contains ( int Id );
	void Add ( int Id );
};

UClass* URecentDropList::pClassPointer = NULL;

// Class WillowGame.ResourcePoolStateAttributeValueResolver
// 0x0001 (0x003D - 0x003C)
class UResourcePoolStateAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      PoolState;                                        		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4254 ];

		return pClassPointer;
	};

};

UClass* UResourcePoolStateAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.SaveGameChannel
// 0x0014 (0x007C - 0x0068)
class USaveGameChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x14 ];                            		// 0x0068 (0x0014) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4256 ];

		return pClassPointer;
	};

};

UClass* USaveGameChannel::pClassPointer = NULL;

// Class WillowGame.SeqAct_IsInVolume
// 0x001C (0x00C0 - 0x00A4)
class USeqAct_IsInVolume : public USequenceAction
{
public:
	TArray< class AVolume* >                           Volumes;                                          		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            Actors;                                           		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bAllActorsInVolumes : 1;                          		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsTrue : 1;                                      		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4258 ];

		return pClassPointer;
	};

	bool ActorIsInAnyVolumes ( class AActor* inActor );
};

UClass* USeqAct_IsInVolume::pClassPointer = NULL;

// Class WillowGame.SeqAct_SetNameList
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_SetNameList : public USequenceAction
{
public:
	unsigned char                                      SetType;                                          		// 0x00A4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UNameListDefinition*                         NameListDef;                                      		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4260 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetNameList::pClassPointer = NULL;

// Class WillowGame.SeqEvent_TakeHitRegionDamage
// 0x0044 (0x0108 - 0x00C4)
class USeqEvent_TakeHitRegionDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                  		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageThreshold;                                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UsePercentOfMaxHealthLimit : 1;                   		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            DamageTypes;                                      		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDamageTypeDefinition* >             DamageTypeDefinitions;                            		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoreDamageTypes;                                		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDamageTypeDefinition* >             IgnoreDamageTypeDefinitions;                      		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBodyHitRegionDefinition*                    DamageHitRegion;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentDamage;                                    		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4262 ];

		return pClassPointer;
	};

	void Reset ( );
	void HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, class UDamageTypeDefinition* inDamageTypeDefinition, int inAmount, class UBodyHitRegionDefinition* HitRegion );
	bool IsValidDamageTypeDefinition ( class UDamageTypeDefinition* inDamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion );
	bool IsValidDamageType ( class UClass* inDamageType, class UBodyHitRegionDefinition* HitRegion );
};

UClass* USeqEvent_TakeHitRegionDamage::pClassPointer = NULL;

// Class WillowGame.SequenceEventEnableByMission
// 0x0024 (0x0060 - 0x003C)
class USequenceEventEnableByMission : public USequenceEventCustomEnableCondition
{
public:
	struct FPointer                                    VfTable_IIMission;                                		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UMissionDefinition*                          LinkedMission;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMissionStateSelectionData                  MissionStatesToLinkTo;                            		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsObjectiveSpecific : 1;                         		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UMissionObjectiveDefinition*                 LinkedObjective;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMissionObjectiveStateSelectionData         ObjectiveStatesToLinkTo;                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMissionObjectiveSetDefinition* >    ObjectiveSetRestrictions;                         		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4264 ];

		return pClassPointer;
	};

	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
};

UClass* USequenceEventEnableByMission::pClassPointer = NULL;

// Class WillowGame.ShieldResourcePool
// 0x0000 (0x0118 - 0x0118)
class UShieldResourcePool : public UResourcePool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4266 ];

		return pClassPointer;
	};

};

UClass* UShieldResourcePool::pClassPointer = NULL;

// Class WillowGame.ShopTimerRateValueResolver
// 0x0000 (0x003C - 0x003C)
class UShopTimerRateValueResolver : public UAttributeValueResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4268 ];

		return pClassPointer;
	};

};

UClass* UShopTimerRateValueResolver::pClassPointer = NULL;

// Class WillowGame.Skill
// 0x0094 (0x00D0 - 0x003C)
class USkill : public UObject
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USkillDefinition*                            Definition;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FAppliedSkillEffect >               SkillEffects;                                     		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Grade;                                            		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GradeBaseValue;                                   		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                GradeModifierStack;                               		// 0x0058 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BonusGradePointsOnExpConversion;                  		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BonusGradePointsOnExpConversionBaseValue;         		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BonusGradePointsOnExpConversionModifierStack;     		// 0x006C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              Duration;                                         		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DurationBaseValue;                                		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                DurationModifierStack;                            		// 0x0080 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              Range;                                            		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RangeBaseValue;                                   		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                RangeModifierStack;                               		// 0x0094 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StartTime;                                        		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              ActivatedTime;                                    		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SkillState;                                       		// 0x00A8 (0x0001) [0x0000000000000000]              
	float                                              NextContextUpdateTime;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceRefreshModifiersNextTick : 1;               		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantsToDeactivate : 1;                           		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000002] 
	class AController*                                 SkillInstigator;                                  		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UObject*                                     AdditionalSkillTarget;                            		// 0x00B8 (0x0004) [0x0000000000000000]              
	class AActionSkill*                                CachedActionSkill;                                		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnSkillStateChanged__Delegate;                  		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4270 ];

		return pClassPointer;
	};

	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void ForceRefresh ( );
	int GetGrade ( );
	void GetSkillDebug ( TArray< struct FString >* DebugInfo );
	void eventRunSkillEventResponses ( unsigned char EventType, class AController* EventRecipient );
	void NotifySkillDamagedEvent ( unsigned char EventType, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline );
	void NotifySkillEvent ( unsigned char EventType, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline, class UObject* ContextObject );
	int GetSkillGradeForResponseData ( struct FSkillActionData ActionData );
	float CalculateModifierValueFromDefinitionEffectArray ( class USkillDefinition* InDefinition, int EffectIndex, int SkillGrade, class UObject* ContextSource );
	float CalculateModifierValue ( int SkillGrade, class UObject* ContextSource, struct FSkillEffectData* EffectData );
	void AdjustModifiers ( unsigned char AdjustMode, unsigned long bSuppressNotify );
	void GetAttributeContexts ( class AController* EffectInstigator, struct FAppliedSkillEffect* SkillEffect );
	class AController* GetEffectInstigator ( );
	bool IsSkillForInstigator ( class AController* Instigator );
	void UpdateGrade ( int NewGrade );
	unsigned char CalculateStateBasedOnConstraints ( unsigned long bIsOnActivation );
	class AController* GetSkillInstigator ( );
	unsigned char GetSkillState ( );
	void eventResume ( );
	void eventPause ( );
	void eventDeactivate ( );
	bool eventActivate ( );
	void BuildSkillEffects ( );
	void RemoveVisionModeFromPawns ( );
	void AddVisionModeForPawns ( );
	void AddSkillEffect ( class AController* EffectInstigator, struct FSkillEffectData* InEffect );
	bool Initialize ( class USkillDefinition* InDefinition, class AController* InSkillInstigator, class UObject* InAdditionalSkillTarget, int InGrade, struct FScriptDelegate StateChangeDelegate );
	void OnSkillStateChanged ( class USkill* AffectedSkill, unsigned long bActivated );
};

UClass* USkill::pClassPointer = NULL;

// Class WillowGame.SkillDefinition
// 0x00F4 (0x0130 - 0x003C)
class USkillDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bAutoUpdateContexts : 1;                          		// 0x0044 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanBeToggledOff : 1;                             		// 0x0044 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDoNotShiftPastCurrentTime : 1;                   		// 0x0044 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSubjectToGradeRules : 1;                         		// 0x0044 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	float                                              SkillEffectUpdateIterval;                         		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     SkillName;                                        		// 0x004C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillDescription;                                 		// 0x0058 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ScaleformFrameName;                               		// 0x0064 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      SkillType;                                        		// 0x0070 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DurationType;                                     		// 0x0071 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      TrackedSkillType;                                 		// 0x0072 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      TrackedSkillHUDSlot;                              		// 0x0073 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InitialDuration;                                  		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseRange;                                        		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       EffectSourceInstanceDataName;                     		// 0x007C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FSkillEffectData >                  SkillEffectDefinitions;                           		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSkillConstraintData >              SkillConstraints;                                 		// 0x0090 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UAttributePresentationDefinition* >  SkillEffectPresentations;                         		// 0x009C (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class AActionSkill*                                ActionSkillArchetype;                             		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                SkillVisionModeCoordinatedEffect;                 		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FSkillActionData >                  SkillActivationActions;                           		// 0x00B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSkillActionData >                  SkillDeactivationActions;                         		// 0x00BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSkillEventResponseData >           EventResponses;                                   		// 0x00C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                DefaultStartingGrade;                             		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxGrade;                                         		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                PlayerLevelRequirement;                           		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USwfMovie*                                   SkillIcon;                                        		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeDefinition*                        CustomStackCount;                                 		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            TrackedActiveSkill;                               		// 0x00E8 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	TArray< class USkillDefinition* >                  TrackedActiveSkills;                              		// 0x00EC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      SkillClass;                                       		// 0x00F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LockedSkillDetailStr;                             		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FNamedSkillEvent >                  CustomEvents;                                     		// 0x0108 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSkillDamageEventData >             DamageEvents;                                     		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSkillKillEventData >               KillEvents;                                       		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4272 ];

		return pClassPointer;
	};

	void FireCustomEvent ( struct FName EventName, class AController* InController, class UObject* OtherParticipant );
	bool DoesSkillPassMinGradeTest ( int SkillGrade );
	void GetSkillEffectPresentations ( int SkillGrade, class UObject* ContextSource, TArray< struct FModifierValuePresentationData >* EffectPresentations );
	struct FString GetHumanReadableSkillEffects ( int SkillGrade, class UObject* ContextSource );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
	void OnStatusEffectTypeEnd ( class AController* SkillInstigator, int EffectType, float TotalDamageDealtToHealth, float TotalDamageDealtToShields, float TotalDuration, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnStatusEffectTypeBegin ( class AController* SkillInstigator, int EffectType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnMeleeAttack ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnBledOut ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDownStateEnd ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDownStateBegin ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnAppliedStatusEffectToEnemy ( class AController* SkillInstigator, class AController* Enemy, class UObject* StatusEffect, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedEnemyWithMeleeFromBehind ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, struct FVector HitLocation, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedUnawareEnemy ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, struct FVector HitLocation, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnActionSkillActiveAbilityActivated ( class AController* SkillInstigator, class AWillowPawn* AutoAimTarget, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnActionSkillCooldownAbilityActivated ( class AController* SkillInstigator, class AWillowPawn* AutoAimTarget, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPlayerResurrected ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPlayerRecoveredFromDownState ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPlayerDeathAverted ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnMissedWeaponShot ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedByFriendly ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Friendly, unsigned long bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedByEnemy ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, unsigned long bWasCrit, float HealthDamageDone, float ShieldDamageDone, class UClass* DamageSource, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedFriendly ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Friendly, unsigned long bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedEnemyExposeDamageSurfaceType ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, unsigned long bWasCrit, float HealthDamageDone, float ShieldDamageDone, unsigned long bWasInjured, struct FVector HitLocation, float ExcessDamageDone, int PenetrationCount, int DamageSurfaceType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDamagedEnemy ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, unsigned long bWasCrit, float HealthDamageDone, float ShieldDamageDone, unsigned long bWasInjured, struct FVector HitLocation, float ExcessDamageDone, int PenetrationCount, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnWeaponStartReload ( class AController* SkillInstigator, class UObject* WeaponReloading, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilledByEnemy ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, unsigned long bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilledEnemy ( struct FName SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, unsigned long bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldFull ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldDepleted ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnShieldDepletedAfterBeingFull ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnWeaponSwapped ( class AController* SkillInstigator, class UObject* NewWeapon, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnWeaponManuallyReloaded ( class AController* SkillInstigator, class UObject* WeaponReloaded, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnWeaponReloaded ( class AController* SkillInstigator, class UObject* WeaponReloaded, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnWeaponFired ( class AController* SkillInstigator, class UObject* WeaponFired, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnWeaponUnzoomed ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnWeaponZoomed ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnThrowGrenadeOverrideSkillActivated ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnMeleeOverrideSkillActivated ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnResumed ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPaused ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDeactivated ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnActivated ( class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* USkillDefinition::pClassPointer = NULL;

// Class WillowGame.SkillExpressionEvaluatorDefinition
// 0x0004 (0x0040 - 0x003C)
class USkillExpressionEvaluatorDefinition : public UGBXDefinition
{
public:
	class UExpressionEvaluator*                        Evaluator;                                        		// 0x003C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4274 ];

		return pClassPointer;
	};

};

UClass* USkillExpressionEvaluatorDefinition::pClassPointer = NULL;

// Class WillowGame.SkillTreeBranchDefinition
// 0x002C (0x0068 - 0x003C)
class USkillTreeBranchDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class USkillTreeBranchDefinition* >        Children;                                         		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTier >                             Tiers;                                            		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkillTreeBranchLayoutDefinition*            Layout;                                           		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     BranchName;                                       		// 0x005C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4276 ];

		return pClassPointer;
	};

};

UClass* USkillTreeBranchDefinition::pClassPointer = NULL;

// Class WillowGame.SkillTreeBranchLayoutDefinition
// 0x000C (0x0048 - 0x003C)
class USkillTreeBranchLayoutDefinition : public UGBXDefinition
{
public:
	TArray< struct FTierLayout >                       Tiers;                                            		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4278 ];

		return pClassPointer;
	};

};

UClass* USkillTreeBranchLayoutDefinition::pClassPointer = NULL;

// Class WillowGame.SkillTreeDefinition
// 0x0008 (0x0044 - 0x003C)
class USkillTreeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USkillTreeBranchDefinition*                  Root;                                             		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4280 ];

		return pClassPointer;
	};

};

UClass* USkillTreeDefinition::pClassPointer = NULL;

// Class WillowGame.SpecialMove_FirstPerson
// 0x0004 (0x00C0 - 0x00BC)
class USpecialMove_FirstPerson : public UGearboxAnimDefinition
{
public:
	unsigned long                                      bStopWeaponRecoilAnim : 1;                        		// 0x00BC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4282 ];

		return pClassPointer;
	};

	class UAnimNodeSpecialMoveBlend* GetSMNode ( class USpecialMoveInterface* SMI );
	float PlayAnim ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	void StopWeaponRecoilAnimImp ( class USpecialMoveInterface* SMI, unsigned long bStopPrimaryHand, unsigned long bStopOffHand );
	void StopWeaponRecoilAnim ( class USpecialMoveInterface* SMI );
	float eventClientStarted ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	class USkeletalMeshComponent* GetSkeletalMesh ( class USpecialMoveInterface* SMI );
};

UClass* USpecialMove_FirstPerson::pClassPointer = NULL;

// Class WillowGame.SpecialMove_FirstPersonDualWieldAction
// 0x0024 (0x00E4 - 0x00C0)
class USpecialMove_FirstPersonDualWieldAction : public USpecialMove_FirstPerson
{
public:
	struct FName                                       OffHandAnimNodeName;                              		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayHolsterEquipOnPrimaryHand : 1;               		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSyncHolsterEquipWithActionAnim : 1;              		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableDualWieldBlendDuringActionAnim : 1;       		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       HolsterAnimName;                                  		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              HolsterDuration;                                  		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EquipAnimName;                                    		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipDuration;                                    		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4284 ];

		return pClassPointer;
	};

	float GetAnimPlayRateScale ( class USkeletalMeshComponent* SMC, struct FName InAnimName, float Duration, unsigned long bReverseSearchOrder );
	float GetExternalPlayRateScale ( class USkeletalMeshComponent* SMC, struct FSpecialMoveData* SMData );
	float GetSyncToActionLengthPlayRateScale ( class USkeletalMeshComponent* SMC );
	void StopOffHandAnim ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	void SetDualWieldWeaponState ( class AWillowPlayerPawn* WPP, unsigned long bShow );
	bool PlayChildAnim ( class USpecialMoveInterface* SMI, class USkeletalMeshComponent* SMC, struct FName InAnimName, float Duration, unsigned long bReverseSearchOrder, struct FName InAnimNodeName, float BlendInOverride, float BlendOutOverride, struct FSpecialMoveData* SMData );
	bool PlayEquipAnim ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	bool PlayActionAnim ( class USpecialMoveInterface* SMI, unsigned long bStopOffHandAnim, struct FSpecialMoveData* SMData );
	float PlayAnim ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	void eventAnimFinished ( class USpecialMoveInterface* SMI, class UAnimNodeSpecialMoveBlend* BlendNode, unsigned long bInterrupted, struct FSpecialMoveData* SMData );
	void StopWeaponRecoilAnim ( class USpecialMoveInterface* SMI );
	float GetAnimLength ( class USkeletalMeshComponent* SMC );
};

UClass* USpecialMove_FirstPersonDualWieldAction::pClassPointer = NULL;

// Class WillowGame.SprintDefinition
// 0x0018 (0x0054 - 0x003C)
class USprintDefinition : public UGBXDefinition
{
public:
	float                                              FOVModifier;                                      		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EyeHeightModifier;                                		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BobScalar;                                        		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeEffectData >              AttributeEffects;                                 		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4286 ];

		return pClassPointer;
	};

};

UClass* USprintDefinition::pClassPointer = NULL;

// Class WillowGame.StaggerDefinition
// 0x0048 (0x0084 - 0x003C)
class UStaggerDefinition : public UGBXDefinition
{
public:
	class UPhysicalMaterial*                           StaggeredPhysicalMaterial;                        		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StaggeredGravity;                                 		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StaggeredRestVelocity;                            		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StaggeredRestTimeMin;                             		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StaggeredRestTimeMax;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StaggeredPhysicsBlendOutSpeed;                    		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StaggeredRestGiveUpTime;                          		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VehicleStaggerSpeed;                              		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bPrefersOverTheHoodOnVehicleImpact : 1;           		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              StaggeredOverHoodMinSpeed;                        		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     MaxStaggerAdjustExtents;                          		// 0x0064 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FStaggeredRecoveryRotationData              StaggeredRecoveryRotation;                        		// 0x0070 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimDefinition*                       HardFlinchAnimation;                              		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UnstaggerGiveUpTime;                              		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4288 ];

		return pClassPointer;
	};

};

UClass* UStaggerDefinition::pClassPointer = NULL;

// Class WillowGame.StanceTypeDefinition
// 0x0034 (0x0070 - 0x003C)
class UStanceTypeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      MovementStyle;                                    		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SpeedScale;                                       		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationScale;                                    		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanUseAimOffsets : 1;                            		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanUseTurns : 1;                                 		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanUseJumps : 1;                                 		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanUseCringes : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanUseFlinches : 1;                              		// 0x004C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowLeftHandIK : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanDodge : 1;                                    		// 0x004C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowMovementDodges : 1;                         		// 0x004C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOverrideFlinches : 1;                            		// 0x004C (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	float                                              JumpNodeCostMultiplier;                           		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTurnDefinition*                             Turns;                                            		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AimOffsetName;                                    		// 0x0058 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class USpecialMove_Motion* >               FlinchOverrides;                                  		// 0x0060 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4290 ];

		return pClassPointer;
	};

	void OnExitStance ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnEnterStance ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UStanceTypeDefinition::pClassPointer = NULL;

// Class WillowGame.StatChannel
// 0x001C (0x0084 - 0x0068)
class UStatChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x1C ];                            		// 0x0068 (0x001C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4292 ];

		return pClassPointer;
	};

};

UClass* UStatChannel::pClassPointer = NULL;

// Class WillowGame.StationTeleporterDestination
// 0x000C (0x01A8 - 0x019C)
class AStationTeleporterDestination : public ATeleporterDestination
{
public:
	float                                              ExitPointRadius;                                  		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              ExitPointHeight;                                  		// 0x01A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      MoveOwnerOnEditorMove : 1;                        		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      OwnerControlsEditorMove : 1;                      		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      DetachExitPoints : 1;                             		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      ExitPointsReplaced : 1;                           		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4294 ];

		return pClassPointer;
	};

	void UpdateExitPointHeights ( );
	void UpdateExitPointLocations ( );
	void eventDestroyed ( );
};

UClass* AStationTeleporterDestination::pClassPointer = NULL;

// Class WillowGame.StationTeleporterExitPoint
// 0x0000 (0x018C - 0x018C)
class AStationTeleporterExitPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4296 ];

		return pClassPointer;
	};

};

UClass* AStationTeleporterExitPoint::pClassPointer = NULL;

// Class WillowGame.StationTeleporterVehicleExitPoint
// 0x0000 (0x018C - 0x018C)
class AStationTeleporterVehicleExitPoint : public AStationTeleporterExitPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4298 ];

		return pClassPointer;
	};

};

UClass* AStationTeleporterVehicleExitPoint::pClassPointer = NULL;

// Class WillowGame.StatusEffectChanceModifierResolver
// 0x0000 (0x003C - 0x003C)
class UStatusEffectChanceModifierResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4300 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UStatusEffectChanceModifierResolver::pClassPointer = NULL;

// Class WillowGame.StatusEffectDefinition
// 0x0114 (0x0150 - 0x003C)
class UStatusEffectDefinition : public UGBXDefinition
{
public:
	struct FAttributeInitializationData                BaseDuration;                                     		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseSpreadTimeInterval;                           		// 0x004C (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FAttributeInitializationData                BaseSpreadDistanceFromSource;                     		// 0x005C (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FAttributeInitializationData                BaseSpreadCap;                                    		// 0x006C (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FAttributeInitializationData                TargetStatusEffectChanceModifier;                 		// 0x007C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                TargetStatusEffectDurationModifier;               		// 0x008C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                TargetStatusEffectDamageModifier;                 		// 0x009C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnApplication;                                    		// 0x00AC (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnDurationBegin;                                  		// 0x00B8 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnDurationEnd;                                    		// 0x00C4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnSpreadToTarget;                                 		// 0x00D0 (0x000C) [0x0000000004400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FDamageSurfaceTypeModifier >        DamageSurfaceChanceModifiers;                     		// 0x00DC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bCanSpread : 1;                                   		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bDoesDamageOverTime : 1;                          		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanReturnToRegion : 1;                           		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bCanReturnToTarget : 1;                           		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bIsRegionSpecific : 1;                            		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNoStatusEffectChanceFalloff : 1;                 		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsInfiniteDuration : 1;                          		// 0x00E8 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned char                                      StatusEffectType;                                 		// 0x00EC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AppliedEffectStatId;                              		// 0x00F4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FScreenParticleInitParams                   ScreenParticleInit;                               		// 0x00FC (0x0054) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4302 ];

		return pClassPointer;
	};

};

UClass* UStatusEffectDefinition::pClassPointer = NULL;

// Class WillowGame.StatusEffectExpressionEvaluator
// 0x0002 (0x003E - 0x003C)
class UStatusEffectExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned char                                      Type;                                             		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      EffectState;                                      		// 0x003D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4304 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UStatusEffectExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.StatusEffectProxyActor
// 0x0004 (0x018C - 0x0188)
class AStatusEffectProxyActor : public AActor
{
public:
	struct FPointer                                    VfTable_IIStatusEffectTarget;                     		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4306 ];

		return pClassPointer;
	};

	void ServerClearStatusEffects ( unsigned long bKillImmediately );
	void Behavior_ClearStatusEffects ( unsigned long bKillImmediately );
	bool CanReceiveStatusEffects ( );
	void ReactToPrimaryStatusEffect ( class UStatusEffectDefinition* StatusEffect );
	class UObject* GetAttributeContextSource ( );
	unsigned char GetDefaultDamageSurfaceType ( );
	float GetBoundingSphereRadius ( );
	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
	void AttachEmitter ( class AEmitter* E, struct FName SocketName );
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate ( );
	TArray< struct FName > GetDefaultStatusEffectSockets ( );
	class UStatusEffectsComponent* GetStatusEffectsComponent ( );
	void eventDestroyed ( );
};

UClass* AStatusEffectProxyActor::pClassPointer = NULL;

// Class WillowGame.StatusEffectsComponent
// 0x011F (0x0178 - 0x0059)
class UStatusEffectsComponent : public UActorComponent
{
public:
	class UIStatusEffectTarget*                        OwnerTarget;                                      		// 0x005C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              BodyConsumptionPercent;                           		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< struct FActiveStatusEffect >               ActiveStatusEffects;                              		// 0x0068 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UStatusEffectDefinition*                     LastPrimaryStatusEffect;                          		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCanApplyStatusEffects : 1;                       		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseClientEmitterList : 1;                        		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUpdateAudio : 1;                                 		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnabled : 1;                                     		// 0x0078 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOwnerDied : 1;                                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDebugUsingStatusEffectInspector : 1;             		// 0x0078 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bStatusEffectsCleared : 1;                        		// 0x0078 (0x0004) [0x0000000000000000] [0x00000040] 
	TArray< struct FHitRegionEmitters >                ActiveEmitters;                                   		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FEffectSoundData >                  ActiveEffectSounds;                               		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AStatusEffectReplicatedEmitter* >    ClientEmitters;                                   		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              IgniteChanceResistanceModifier;                   		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              IgniteChanceResistanceModifierBaseValue;          		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IgniteChanceResistanceModifierModifierStack;      		// 0x00A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShockChanceResistanceModifier;                    		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockChanceResistanceModifierBaseValue;           		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShockChanceResistanceModifierModifierStack;       		// 0x00BC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CorrosiveChanceResistanceModifier;                		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CorrosiveChanceResistanceModifierBaseValue;       		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CorrosiveChanceResistanceModifierModifierStack;   		// 0x00D0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SlowChanceResistanceModifier;                     		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlowChanceResistanceModifierBaseValue;            		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SlowChanceResistanceModifierModifierStack;        		// 0x00E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AmpChanceResistanceModifier;                      		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AmpChanceResistanceModifierBaseValue;             		// 0x00F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AmpChanceResistanceModifierModifierStack;         		// 0x00F8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              IgniteDurationResistanceModifier;                 		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              IgniteDurationResistanceModifierBaseValue;        		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IgniteDurationResistanceModifierModifierStack;    		// 0x010C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShockDurationResistanceModifier;                  		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockDurationResistanceModifierBaseValue;         		// 0x011C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShockDurationResistanceModifierModifierStack;     		// 0x0120 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CorrosiveDurationResistanceModifier;              		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CorrosiveDurationResistanceModifierBaseValue;     		// 0x0130 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CorrosiveDurationResistanceModifierModifierStack; 		// 0x0134 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SlowDurationResistanceModifier;                   		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlowDurationResistanceModifierBaseValue;          		// 0x0144 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SlowDurationResistanceModifierModifierStack;      		// 0x0148 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AmpDurationResistanceModifier;                    		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AmpDurationResistanceModifierBaseValue;           		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AmpDurationResistanceModifierModifierStack;       		// 0x015C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FOngoingEffectInfo >                OngoingEffects;                                   		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   DebugPawnMarkerInst;                              		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4308 ];

		return pClassPointer;
	};

	void RemoveDenStat ( unsigned char Type );
	void AddDenStat ( unsigned char Type );
	void ClearDenStats ( );
	void ConditionalCreateDebugPawnMarkerInst ( class UMaterial* ParentMaterial );
	TArray< unsigned char > GetActiveEffectSounds ( );
	void StopEffectSound ( unsigned char StatusEffectType, unsigned long bCleanly );
	void StartEffectSound ( unsigned char StatusEffectType );
	bool IsTypeActive ( class AStatusEffectReplicatedEmitter* Emitter, unsigned char StatusEffectType );
	void FillEffectActivityLists ( TArray< unsigned char >* ActiveTypes, TArray< unsigned char >* InactiveTypes );
	void eventUpdateAudio ( );
	void UnRegisterEmitter ( class AStatusEffectReplicatedEmitter* Emitter );
	void RegisterEmitter ( class AStatusEffectReplicatedEmitter* Emitter );
	void EmitterUpdated ( class AStatusEffectReplicatedEmitter* Emitter );
	void OwnerDied ( );
	void SetEnabled ( unsigned long val );
	void GetNonRegionSpecificEffects ( TArray< struct FActiveStatusEffect >* out_List );
	void GetRegionSpecificEffects ( class UBodyHitRegionDefinition* HitRegion, TArray< struct FActiveStatusEffect >* out_List );
	void GetStatusEffects ( TArray< struct FActiveStatusEffect >* out_List );
	void eventOnStatusEffectEnd ( struct FActiveStatusEffect ASE );
	class AEmitter* GetEmitterForSocketRegion ( class UBodyHitRegionDefinition* HitRegion, struct FName SocketName, unsigned long bCreateNew );
	TArray< struct FName > GetRegionSocketNames ( class UBodyHitRegionDefinition* HitRegion );
	void eventUpdateRegionData ( struct FActiveStatusEffect* ASE );
	struct FTraceHitInfo CreateTraceHitInfo ( class UBodyHitRegionDefinition* HitRegion );
	void eventApplyStatusEffect ( class AActor* InstigatedBy, class UClass* DamageType, class UStatusEffectDefinition* StatusEffectDefinition, class UIDamageCauser* DamageCauser, class UBodyHitRegionDefinition* HitRegion, unsigned long bIsFromSpreading, struct FActiveStatusEffect SpreadSource );
	void CheatApplyStatusEffect ( class AActor* InstigatedBy, class UStatusEffectDefinition* StatusEffectDefinition, class UIDamageCauser* DamageCauser );
	bool IsGuaranteedSpreadEnabled ( );
	void SetGuaranteedSpreadEnabled ( unsigned long bEnable );
	bool IsEnableLogSpreadingEnabled ( );
	bool IsLogOnlyInspectedTargetsEnabled ( );
	bool IsStatusEffectDebugEnabled ( );
	void SetLogOnlyInspectedTargets ( unsigned long bEnable );
	void SetEnableLogSpreading ( unsigned long bEnable );
	void SetEnableLog ( unsigned long bEnable );
	void ToggleStatusEffectDebug ( );
	void ClearAllStatusEffects ( unsigned long bCleanly );
	bool IsEnabled ( );
	void UpdateBodyConsumptionPercent ( );
	TArray< class UStatusEffectDefinition* > GetRegionStatusEffects ( class UBodyHitRegionDefinition* Region );
	bool IsRegionAffectedWithStatusEffect ( class UBodyHitRegionDefinition* Region, class UStatusEffectDefinition* StatusEffect, int* AffectedIndex );
	bool IsAffectedWithStatusEffectFromDamageType ( unsigned char DamageType );
	bool IsAffectedWithStatusEffectType ( unsigned char Type );
	void RollChanceForStatusEffect ( class AActor* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class UStatusEffectDefinition* StatusEffectDefinition, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UBodyHitRegionDefinition* HitRegion, float ChanceModifier, struct FDamageEventSummary* DamageSummary );
	TArray< unsigned char > GetActiveStatusEffectTypes ( );
	bool HasActiveStatusEffects ( );
	class UStatusEffectDefinition* eventGetMostRecentStatusEffect ( );
	class UBodyHitRegionDefinition* GetMostRecentEffectHitRegion ( );
};

UClass* UStatusEffectsComponent::pClassPointer = NULL;

// Class WillowGame.TargetableAttributeValueResolver
// 0x0001 (0x003D - 0x003C)
class UTargetableAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      ValueToResolve;                                   		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4310 ];

		return pClassPointer;
	};

};

UClass* UTargetableAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.TemporalField
// 0x0018 (0x01A0 - 0x0188)
class ATemporalField : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      fBlockBullets : 1;                                		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class USkillDefinition*                            SkillEffect;                                      		// 0x0190 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MyTickMultiplier;                                 		// 0x0194 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TransitionDistancePercent;                        		// 0x0198 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             TouchEffectTemplate;                              		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4312 ];

		return pClassPointer;
	};

	void PlayTouchEffect ( struct FVector HitLocation );
	float CalculateTickMultiplierForActor ( class AActor* AffectedActor );
	void eventDestroyed ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPostBeginPlay ( );
	struct FVector GetFieldNormal ( struct FVector HitLocation );
	bool IsTemporalFieldDebugEnabled ( );
	void ToggleTemporalFieldDebug ( );
};

UClass* ATemporalField::pClassPointer = NULL;

// Class WillowGame.TextMarkupDictionary
// 0x0010 (0x004C - 0x003C)
class UTextMarkupDictionary : public UGBXDefinition
{
public:
	TArray< struct FTextMarkupEntry >                  Dictionary;                                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bInitializedMarkupTags : 1;                       		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4314 ];

		return pClassPointer;
	};

	struct FString ResolveCustomMarkupString ( struct FString StringToResolve );
};

UClass* UTextMarkupDictionary::pClassPointer = NULL;

// Class WillowGame.TrainingMessageDefinition
// 0x004C (0x0088 - 0x003C)
class UTrainingMessageDefinition : public UGBXDefinition
{
public:
	struct FName                                       StatId;                                           		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                StatTargetValue;                                  		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     Key;                                              		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     TitleKey;                                         		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     HUDInitializationFrame;                           		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      PausesGame : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMandatory : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              PauseContinueDelay;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ExceptIfStatId;                                   		// 0x0074 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ExceptIfGreaterThan;                              		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      StatusMenuTab;                                    		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogPriority*                      DialogPriority;                                   		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4316 ];

		return pClassPointer;
	};

};

UClass* UTrainingMessageDefinition::pClassPointer = NULL;

// Class WillowGame.TravelStationDefinition
// 0x0038 (0x0074 - 0x003C)
class UTravelStationDefinition : public UGBXDefinition
{
public:
	struct FName                                       StationLevelName;                                 		// 0x003C (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UTravelStationDefinition*                    PreviousStation;                                  		// 0x0044 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UDownloadableExpansionDefinition*            DlcExpansion;                                     		// 0x0048 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FVector                                     StationLocation;                                  		// 0x004C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture*                                    StationDisplayImage;                              		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     StationDisplayName;                               		// 0x005C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FMissionStatusData >                MissionDependencies;                              		// 0x0068 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4318 ];

		return pClassPointer;
	};

	struct FName StaticGetAccessibleLevelName ( struct FName DefaultLevelName );
	struct FName GetStationLevelName ( );
};

UClass* UTravelStationDefinition::pClassPointer = NULL;

// Class WillowGame.FastTravelStationDefinition
// 0x0025 (0x0099 - 0x0074)
class UFastTravelStationDefinition : public UTravelStationDefinition
{
public:
	unsigned long                                      bInitiallyActive : 1;                             		// 0x0074 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSendOnly : 1;                                    		// 0x0074 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FString                                     StationDescription;                               		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StationSign;                                      		// 0x0084 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UMissionObjectiveDefinition*                 InaccessibleObjective;                            		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveDefinition*                 AccessibleObjective;                              		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AccessibilityTime;                                		// 0x0098 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4320 ];

		return pClassPointer;
	};

};

UClass* UFastTravelStationDefinition::pClassPointer = NULL;

// Class WillowGame.LevelTravelStationDefinition
// 0x0014 (0x0088 - 0x0074)
class ULevelTravelStationDefinition : public UTravelStationDefinition
{
public:
	unsigned long                                      bIsNonDlcToDlcTransition : 1;                     		// 0x0074 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowVehiclesToThisStation : 1;                  		// 0x0074 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	class ULevelTravelStationDefinition*               DestinationStationDefinition;                     		// 0x0078 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FString                                     DisplayName;                                      		// 0x007C (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4322 ];

		return pClassPointer;
	};

};

UClass* ULevelTravelStationDefinition::pClassPointer = NULL;

// Class WillowGame.TravelStationNozzleComponent
// 0x0000 (0x0210 - 0x0210)
class UTravelStationNozzleComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4324 ];

		return pClassPointer;
	};

};

UClass* UTravelStationNozzleComponent::pClassPointer = NULL;

// Class WillowGame.TurnDefinition
// 0x003C (0x0078 - 0x003C)
class UTurnDefinition : public UGBXDefinition
{
public:
	struct FTurnData                                   Idle;                                             		// 0x003C (0x001C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FTurnData                                   Moving;                                           		// 0x0058 (0x001C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TurnCancelTime;                                   		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4326 ];

		return pClassPointer;
	};

	bool UsesMovingTurns ( );
	bool UsesIdleTurns ( );
};

UClass* UTurnDefinition::pClassPointer = NULL;

// Class WillowGame.UBMGraveyardSaveData
// 0x000C (0x0048 - 0x003C)
class UUBMGraveyardSaveData : public UObject
{
public:
	TArray< struct FTombstoneData >                    TombstoneList;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4328 ];

		return pClassPointer;
	};

	struct FString GetFormattedChallengesComplete ( struct FTombstoneData* TheTombstoneData );
	struct FString GetFormattedMissionsComplete ( struct FTombstoneData* TheTombstoneData );
	struct FString GetFormattedCharacterLevel ( struct FTombstoneData* TheTombstoneData );
	struct FString GetFormattedTotalTimePlayed ( struct FTombstoneData* TheTombstoneData );
	bool GetLatestTombstoneData ( struct FTombstoneData* LatestTombstoneData );
	void AddTombstone ( struct FTombstoneData NewTombstoneData );
};

UClass* UUBMGraveyardSaveData::pClassPointer = NULL;

// Class WillowGame.VantageNode
// 0x001C (0x0260 - 0x0244)
class AVantageNode : public APathNode
{
public:
	TArray< struct FName >                             VantageOnAreas;                                   		// 0x0244 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             WeaponTypeFilters;                                		// 0x0250 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      UseAsGuardPost : 1;                               		// 0x025C (0x0004) [0x0000000020000001] [0x00000001] ( CPF_Edit | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4330 ];

		return pClassPointer;
	};

};

UClass* AVantageNode::pClassPointer = NULL;

// Class WillowGame.VehicleBalanceDefinition
// 0x0028 (0x0064 - 0x003C)
class UVehicleBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AWillowVehicle*                              DefaultVehicle;                                   		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      Champion : 1;                                     		// 0x0044 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DefaultExpLevel;                                  		// 0x0048 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVehicleGameStageGradeWeightData >  Grades;                                           		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4332 ];

		return pClassPointer;
	};

	class AWillowVehicle* GetArchetypeForGrade ( int GradeIndex );
	class AWillowVehicle* GetArchetypeForGameStage ( int GameStage, int AwesomeLevel );
};

UClass* UVehicleBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.VehicleBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class AVehicleBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4334 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
};

UClass* AVehicleBlockingVolume::pClassPointer = NULL;

// Class WillowGame.VehicleChoiceModuleGFxObject
// 0x0014 (0x008C - 0x0078)
class UVehicleChoiceModuleGFxObject : public UGFxObject
{
public:
	unsigned long                                      CachedAnySeatAvailable : 1;                       		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      CachedVehicleState;                               		// 0x007C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UVSSUIDefinition*                            SelectedVehicleUIDefinition;                      		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    EquippedVehicleCustomizationDefinition;           		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    PreviewVehicleCustomizationDefinition;            		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4336 ];

		return pClassPointer;
	};

	void DisableClip ( );
	void ConfigureVehicleState ( int StateID );
	void ConfigureTeleportButton ( struct FString Label, unsigned long bDisabled );
	void ConfigureSpawnVehicleButton ( struct FString Label, unsigned long bDisabled );
	void ConfigureSkinTypeButton ( struct FString Label, unsigned long bDisabled );
	void ConfigureVehicleTypeButton ( struct FString Label, unsigned long bDisabled );
};

UClass* UVehicleChoiceModuleGFxObject::pClassPointer = NULL;

// Class WillowGame.VehicleClassDefinition
// 0x0318 (0x0354 - 0x003C)
class UVehicleClassDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCollisionDamageCalculation                 VehicleImpactDamage;                              		// 0x0044 (0x002C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCollisionDamageCalculation                 VehicleRunOverDamage;                             		// 0x0070 (0x002C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCollisionDamageCalculation                 VehicleFeedbackDamage;                            		// 0x009C (0x002C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DelayBetweenCollisionDamageDealtToSelf;           		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVehicleSeatDefinition >            Seats;                                            		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           SpeedVDamageCurve;                                		// 0x00D8 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FDamageTypeResistance                       NormalDamageModifiers;                            		// 0x00E8 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       ExplosiveDamageModifiers;                         		// 0x0108 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       ShockDamageModifiers;                             		// 0x0128 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       CorrosiveDamageModifiers;                         		// 0x0148 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       IncendiaryDamageModifiers;                        		// 0x0168 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       AmpDamageModifiers;                               		// 0x0188 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVStatusEffectResistance                    IgniteResistanceModifiers;                        		// 0x01A8 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVStatusEffectResistance                    ShockResistanceModifiers;                         		// 0x01C8 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVStatusEffectResistance                    CorrosiveResistanceModifiers;                     		// 0x01E8 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVStatusEffectResistance                    AmpResistanceModifiers;                           		// 0x0208 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     DisplayName;                                      		// 0x0228 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UResourcePoolDefinition*                     HealthPoolDefinition;                             		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DeathImpulseScalar;                               		// 0x0238 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerShieldDamagePercentOnVehicleDeath;          		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerHealthDamagePercentOnVehicleDeath;          		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestThreshold;                                    		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerSpeed;                                 		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerForceMagnitude;                        		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      AllowAfterburner : 1;                             		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AfterburnerNoThrottleShutoff : 1;                 		// 0x0258 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAIVehicle : 1;                                   		// 0x0258 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSnapToTarget : 1;                                		// 0x0258 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      SupportsTraining : 1;                             		// 0x0258 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	float                                              AfterburnerActivationSpeed;                       		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerMinSpeed;                              		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerMinSpeedTimeoutDuration;               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGearboxViewShakeInfo                       AfterburnerCameraShake;                           		// 0x0268 (0x0044) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerCameraShakeRepeatTime;                 		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerBoostTime;                             		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerMaxFOV;                                		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AfterburnerImpulseOrigin;                         		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UResourcePoolDefinition*                     AfterburnerPoolDefinition;                        		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerBrakingBonus;                          		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AfterburnerImpulse;                               		// 0x02CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerChassisTorqueScalar;                   		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerTorqueBonus;                           		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerTorqueDecayRate;                       		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      AfterburnerRumble;                                		// 0x02E4 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UForceFeedbackWaveform*                      BrakingRumble;                                    		// 0x02E8 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              BrakingRumbleScaleAdjustment;                     		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkidParticleScale;                                		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkidParticleScaleDecaySpeed;                      		// 0x02F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkidParticleMinVehicleSpeed;                      		// 0x02F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FOV;                                              		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultFOVModifierSpeed;                          		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerOnFOVModifierSpeed;                    		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterburnerOffFOVModifierSpeed;                   		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerSpeed;                                      		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIPatrolSpeed;                                    		// 0x0310 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              AIPursuitSpeed;                                   		// 0x0314 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              AICatchUpSpeed;                                   		// 0x0318 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              AIMatchDistance;                                  		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIAdjustDistance;                                 		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AISpeedModifier;                                  		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AIDirectionModifier;                              		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AITargetSpeedLimit;                               		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetableSocket;                                 		// 0x0330 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DefaultRootRotationMode;                          		// 0x0338 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DefaultRootTranslationMode;                       		// 0x0339 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationRate;                                     		// 0x033C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UVehicleCrewAnimSetLookupTable*              CrewAnimSetLookupTable;                           		// 0x0348 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       StatNameFirstTimeUse;                             		// 0x034C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4338 ];

		return pClassPointer;
	};

	float GetSpeedDamageModifier ( float CollisionSpeed );
	struct FVector GetEjectionVelocity ( int Seat );
	int GetSeatIndexFromPrefix ( struct FString Prefix );
	class UWillowAnimDefinition* GetEnterAnim ( int SeatIndex, unsigned char Side, int IncomingSeatIndex );
	void EvaluateDamageFormula ( class AActor* Target, class AWillowVehicle* Source, struct FCollisionDamageCalculation* Formula, struct FVector* ApplyForce, float* ApplyDamage );
	void OnReverseLightsDeactivated ( struct FBehaviorConsumerHandle Consumer );
	void OnReverseLightsActivated ( struct FBehaviorConsumerHandle Consumer );
	void OnBrakeLightsDeactivated ( struct FBehaviorConsumerHandle Consumer );
	void OnBrakeLightsActivated ( struct FBehaviorConsumerHandle Consumer );
	void OnHeadlightsDeactivated ( struct FBehaviorConsumerHandle Consumer );
	void OnHeadlightsActivated ( struct FBehaviorConsumerHandle Consumer );
	void OnSeatExited ( struct FBehaviorConsumerHandle Consumer, struct FName SpecializedEventName, class UObject* Occupant );
	void OnSeatEntered ( struct FBehaviorConsumerHandle Consumer, struct FName SpecializedEventName, class UObject* Occupant );
	void OnSpawn ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnStopHandbrake ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnStartHandbrake ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTurretStoppedRotation ( class AController* Instigator, class UObject* TheVehicle, int SeatIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTurretRotated ( class AController* Instigator, class UObject* TheVehicle, int SeatIndex, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnCollision ( unsigned char EventOutput, struct FVector Velocity, struct FVector HitLocation, class AActor* HitActor, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTakeDamage ( class UObject* Instigator, float Damage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDestroy ( struct FVector Velocity, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnKilledBy ( class AController* Killer, class UClass* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDeath ( struct FVector Velocity, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnAfterburnerDisengaged ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnAfterburnerEngaged ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPlayHorn ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void ProcessSeatEvent ( int Index, class UObject* Occupant, unsigned long bIsOccupied, struct FBehaviorConsumerHandle* ConsumerHandle );
	class UDamageTypeDefinition* GetCollisionDamageTypeForSpeed ( float Speed, struct FCollisionDamageCalculation* DamageCalc );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UVehicleClassDefinition::pClassPointer = NULL;

// Class WillowGame.VehicleCrewAnimSetLookupTable
// 0x000C (0x0048 - 0x003C)
class UVehicleCrewAnimSetLookupTable : public UObject
{
public:
	TArray< struct FVehicleCrewAnimSetMapping >        Mappings;                                         		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4340 ];

		return pClassPointer;
	};

};

UClass* UVehicleCrewAnimSetLookupTable::pClassPointer = NULL;

// Class WillowGame.VehicleFamilyDefinition
// 0x0038 (0x0074 - 0x003C)
class UVehicleFamilyDefinition : public UGBXDefinition
{
public:
	TArray< class UVSSUIDefinition* >                  VehicleUIDefinitions;                             		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FamilyName;                                       		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USwfMovie*                                   VehiclePreviewClip;                               		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveDefinition*                 RequiredMissionCompletionToUnlock;                		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< unsigned char >                            SupportedTags;                                    		// 0x005C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            RequiredTags;                                     		// 0x0068 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4342 ];

		return pClassPointer;
	};

	struct FString GetVehiclePreviewMoviePath ( );
};

UClass* UVehicleFamilyDefinition::pClassPointer = NULL;

// Class WillowGame.VehicleHandlingDefinition
// 0x00C0 (0x00FC - 0x003C)
class UVehicleHandlingDefinition : public UGBXDefinition
{
public:
	float                                              WheelSuspensionStiffness;                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionDamping;                           		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionBias;                              		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumSlip;                            		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumValue;                           		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteSlip;                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteValue;                          		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumSlip;                             		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumValue;                            		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteSlip;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteValue;                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelInertia;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWheelSpeedOverride : 1;                          		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampedFrictionModel : 1;                        		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoDrive : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bStayUpright : 1;                                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              AutoDriveSteer;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     COMOffset;                                        		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InertiaTensorMultiplier;                          		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightRollResistAngle;                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightPitchResistAngle;                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightStiffness;                             		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightDamping;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVehicleHandlingWheelData >         Wheels;                                           		// 0x009C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FFishtailingInfo >                  HandbrakeFishtailForces;                          		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGearboxViewShakeInfo                       FishtailCameraShake;                              		// 0x00B4 (0x0044) [0x0000000000000001]              ( CPF_Edit )
	float                                              FishtailCameraShakeMinVehicleSpeed;               		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4344 ];

		return pClassPointer;
	};

	void ApplyDefinitionToVehicle ( class AWillowVehicle* Vehicle );
};

UClass* UVehicleHandlingDefinition::pClassPointer = NULL;

// Class WillowGame.CarVehicleHandlingDefinition
// 0x0054 (0x0150 - 0x00FC)
class UCarVehicleHandlingDefinition : public UVehicleHandlingDefinition
{
public:
	float                                              ChassisTorqueScale;                               		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                               		// 0x0100 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SteerSpeed;                                       		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseThrottle;                                  		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineBrakeFactor;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBrakeTorque;                                   		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           TorqueVSpeedCurve;                                		// 0x0124 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LSDFactor;                                        		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThrottleSpeed;                                    		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeMinDriveLimit;                               		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeMaxDriveLimit;                               		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrontalCollisionGripFactor;                       		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InAirUprightTorqueFactor;                         		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InAirUprightMaxTorque;                            		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4346 ];

		return pClassPointer;
	};

};

UClass* UCarVehicleHandlingDefinition::pClassPointer = NULL;

// Class WillowGame.HoverVehicleHandlingDefinition
// 0x0028 (0x0178 - 0x0150)
class UHoverVehicleHandlingDefinition : public UCarVehicleHandlingDefinition
{
public:
	struct FVector                                     AirTransFriction;                                 		// 0x0150 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirRotFriction;                                   		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ForceScalar;                                      		// 0x0160 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorqueScalar;                                     		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TiltScalar;                                       		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveTiltAmount;                                   		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4348 ];

		return pClassPointer;
	};

};

UClass* UHoverVehicleHandlingDefinition::pClassPointer = NULL;

// Class WillowGame.TankVehicleHandlingDefinition
// 0x0028 (0x0178 - 0x0150)
class UTankVehicleHandlingDefinition : public UCarVehicleHandlingDefinition
{
public:
	float                                              MaxEngineTorque;                                  		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDamping;                                    		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InsideTrackTorqueFactor;                          		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringLatStiffnessFactor;                       		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceThrottle;                              		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnMaxGripReduction;                             		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnGripScaleRate;                                		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTurnInPlaceOnSteer : 1;                          		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDoStoppedTurns : 1;                              		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SteeringThresholdForStoppedTurns;                 		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDampingOnStoppedTurns;                      		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4350 ];

		return pClassPointer;
	};

};

UClass* UTankVehicleHandlingDefinition::pClassPointer = NULL;

// Class WillowGame.ChopperVehicleHandlingDefinition
// 0x006C (0x0168 - 0x00FC)
class UChopperVehicleHandlingDefinition : public UVehicleHandlingDefinition
{
public:
	float                                              MaxThrustForce;                                   		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxReverseForce;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongDamping;                                      		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStrafeForce;                                   		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatDamping;                                       		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirectionChangeForce;                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRiseForce;                                     		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpDamping;                                        		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueFactor;                                 		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueMax;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnDamping;                                      		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYawRate;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueFactor;                                		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueMax;                                   		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchDamping;                                     		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueTurnFactor;                             		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueStrafeFactor;                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueMax;                                    		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollDamping;                                      		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRandForce;                                     		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandForceInterval;                                		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowZThrust : 1;                                		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFullThrustOnDirectionChange : 1;                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShouldCutThrustMaxOnImpact : 1;                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bStabilizeStops : 1;                              		// 0x0154 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAutoHover : 1;                                   		// 0x0154 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              StabilizationForceMultiplier;                     		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxVelocityWhenAdjustingHover;                    		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HoverDeadZone;                                    		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RiseAdjustmentInterval;                           		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4352 ];

		return pClassPointer;
	};

};

UClass* UChopperVehicleHandlingDefinition::pClassPointer = NULL;

// Class WillowGame.VehicleLifetimeManager
// 0x003C (0x01C4 - 0x0188)
class AVehicleLifetimeManager : public AInfo
{
public:
	float                                              NextTickUpdateTime;                               		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextCheckUsersTime;                               		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UVehicleFamilyDefinition*                    CurrentVehicleFamily;                             		// 0x0190 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      Initialized : 1;                                  		// 0x0194 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      VehiclesOccupied : 1;                             		// 0x0194 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      VehiclesUnlockedCheat : 1;                        		// 0x0194 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	struct FVSSUsageTracking                           TerminalDetail;                                   		// 0x0198 (0x000C) [0x0000000000000000]              
	TArray< class AWillowVehicle* >                    AllVehicles;                                      		// 0x01A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AWillowVehicle* >                    VehicleUnRegisterList;                            		// 0x01B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TickUpdateInterval;                               		// 0x01BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CheckUsersInterval;                               		// 0x01C0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4354 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void NotifySetCinematicMode ( unsigned long bInCinematicMode );
	void CleanUpPlayerVehicles ( unsigned long ForceEjectOccupants, unsigned long PlayDeSpawnEffect );
	bool InternalAreAnyPlayersUsingVehicles ( );
	bool AreAnyPlayersUsingVehicles ( );
	bool HasVehicleInRegistry ( class AWillowVehicle* OneVehicle );
	void UnRegisterVehicle ( class AWillowVehicle* OneVehicle );
	void RegisterVehicle ( class AWillowVehicle* NewVehicle );
	class UVehicleFamilyDefinition* GetCurrentVehicleFamily ( );
	void SetCurrentVehicleFamily ( class UVehicleFamilyDefinition* InVehicleFamilyDef );
	bool IsSpawnStationInUseByOtherThan ( class APawn* TheUser );
	void SetSpawnStationInUse ( class AVehicleSpawnStationTerminal* TheTerminal, class APawn* TheUser, unsigned long InUse );
	void Initialize ( );
};

UClass* AVehicleLifetimeManager::pClassPointer = NULL;

// Class WillowGame.VehicleSpawnStationVehicleDefinition
// 0x0018 (0x0054 - 0x003C)
class UVehicleSpawnStationVehicleDefinition : public UGBXDefinition
{
public:
	class UPopulationFactoryWillowVehicle*             VehicleFactory;                                   		// 0x003C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class USkeletalMeshComponent*                      VehicleMesh;                                      		// 0x0040 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              HeightAbovePlatformToSpawn;                       		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                PostSpawnCoordinatedEffect;                       		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UVSSUIDefinition*                            MyUIDefinition;                                   		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowOnDemandPackageMarker*                LinkedOnDemandPackage;                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4356 ];

		return pClassPointer;
	};

};

UClass* UVehicleSpawnStationVehicleDefinition::pClassPointer = NULL;

// Class WillowGame.VehicleStandIn
// 0x0020 (0x01A8 - 0x0188)
class AVehicleStandIn : public AActor
{
public:
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IICustomizable;                           		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USkeletalMeshComponent*                      PreviewMesh;                                      		// 0x0190 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UCustomizationDefinition*                    DefaultCustomization;                             		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    CachedCustomization;                              		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInstanceDataSet                            InstanceState;                                    		// 0x019C (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4358 ];

		return pClassPointer;
	};

	void eventInitiateCustomizationRequest ( class UCustomizationDefinition* NewCustomization );
	void eventDestroyed ( );
	void DestroyPreviewMesh ( );
	void CreatePreviewMesh ( class UChassisDefinition* ChassisDef, class AWillowPlayerController* WPCOwner );
	void ClearBodyCompositionInstance ( );
	void ApplyPreviewBodyComposition ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ChangeInstanceDataSwitch ( struct FName SwitchName, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	bool AllowFallbackToDefaultCustomizations ( );
	void RefreshCustomizationsOnInstanceData ( );
	struct FName GetCustomizableName ( );
	void GetCustomizableInstanceDataSets ( TArray< struct FPointer >* OutData );
	class UCustomizationDefinition* GetDesiredCustomizationOfType ( class UClass* Type );
	void CustomizationApplied ( class UCustomizationData* Data );
};

UClass* AVehicleStandIn::pClassPointer = NULL;

// Class WillowGame.VehicleWheelDefinition
// 0x0030 (0x006C - 0x003C)
class UVehicleWheelDefinition : public UGBXDefinition
{
public:
	struct FVector                                     BoneOffset;                                       		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRadius;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravel;                                 		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionSpeed;                                  		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongSlipFactor;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatSlipFactor;                                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLongSlipFactor;                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLatSlipFactor;                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactorLat;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactorLong;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4360 ];

		return pClassPointer;
	};

};

UClass* UVehicleWheelDefinition::pClassPointer = NULL;

// Class WillowGame.VSSUIDefinition
// 0x0064 (0x00A0 - 0x003C)
class UVSSUIDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                    		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UVehicleFamilyDefinition*                    VehicleFamily;                                    		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     VehicleName;                                      		// 0x0044 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PathToVSSDefinition;                              		// 0x0050 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                PreferredOrdering;                                		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UClass* >                            EligibleUsage;                                    		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            SupportedTags;                                    		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            RequiredTags;                                     		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                VehicleMaterialBankIndex;                         		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     VehiclePreviewFrame;                              		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USwfMovie*                                   VehiclePreviewClip;                               		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveDefinition*                 RequiredMissionCompletionToUnlock;                		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDownloadableVehicleDefinition*              DlcVehicleDef;                                    		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4362 ];

		return pClassPointer;
	};

	struct FString GetVehiclePreviewMoviePath ( );
	class UDownloadableContentDefinition* GetDownloadableContentDefinition ( );
	struct FString GetHumanReadableVehicleName ( );
};

UClass* UVSSUIDefinition::pClassPointer = NULL;

// Class WillowGame.WaypointComponent
// 0x0007 (0x0060 - 0x0059)
class UWaypointComponent : public UActorComponent
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4364 ];

		return pClassPointer;
	};

	void RemoveWaypoint ( );
};

UClass* UWaypointComponent::pClassPointer = NULL;

// Class WillowGame.LevelTransitionWaypointComponent
// 0x000C (0x006C - 0x0060)
class ULevelTransitionWaypointComponent : public UWaypointComponent
{
public:
	class UMissionDefinition*                          Mission;                                          		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FName                                       MissionLevel;                                     		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4366 ];

		return pClassPointer;
	};

	void RemoveWaypoint ( );
};

UClass* ULevelTransitionWaypointComponent::pClassPointer = NULL;

// Class WillowGame.MissionDirectiveWaypointComponent
// 0x0005 (0x0065 - 0x0060)
class UMissionDirectiveWaypointComponent : public UWaypointComponent
{
public:
	class UMissionDefinition*                          LinkedMission;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned char                                      BranchEnding;                                     		// 0x0064 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4368 ];

		return pClassPointer;
	};

	void RemoveWaypoint ( );
};

UClass* UMissionDirectiveWaypointComponent::pClassPointer = NULL;

// Class WillowGame.FailableMissionDirectiveWaypointComponent
// 0x0003 (0x0068 - 0x0065)
class UFailableMissionDirectiveWaypointComponent : public UMissionDirectiveWaypointComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4370 ];

		return pClassPointer;
	};

};

UClass* UFailableMissionDirectiveWaypointComponent::pClassPointer = NULL;

// Class WillowGame.MissionObjectiveWaypointComponent
// 0x0014 (0x0074 - 0x0060)
class UMissionObjectiveWaypointComponent : public UWaypointComponent
{
public:
	struct FMissionObjectiveWaypointData               WaypointInfo;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                WaypointRadius;                                   		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4372 ];

		return pClassPointer;
	};

	void RemoveWaypoint ( );
};

UClass* UMissionObjectiveWaypointComponent::pClassPointer = NULL;

// Class WillowGame.WeaponAmmoResourceAttributeValueResolver
// 0x001C (0x0058 - 0x003C)
class UWeaponAmmoResourceAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FWeaponAmmoResourceSelectorData >   AmmoResources;                                    		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4374 ];

		return pClassPointer;
	};

};

UClass* UWeaponAmmoResourceAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.WeaponGlowEffectDefinition
// 0x0010 (0x004C - 0x003C)
class UWeaponGlowEffectDefinition : public UGBXDefinition
{
public:
	struct FInterpCurveFloat                           GlowScaleCurve;                                   		// 0x003C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4376 ];

		return pClassPointer;
	};

};

UClass* UWeaponGlowEffectDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponPartDefinition
// 0x0144 (0x01DC - 0x0098)
class UWeaponPartDefinition : public UWillowInventoryPartDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0098 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UWeaponNamePartDefinition* >         TitleList;                                        		// 0x009C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UWeaponNamePartDefinition* >         PrefixList;                                       		// 0x00A8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UWillowDamageTypeDefinition*                 CustomDamageTypeDefinition;                       		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFiringModeDefinition*                       CustomFiringModeDefinition;                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAttributeEffectData >              ExternalAttributeEffects;                         		// 0x00BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              WeaponAttributeEffects;                           		// 0x00C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              ZoomExternalAttributeEffects;                     		// 0x00D4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              ZoomWeaponAttributeEffects;                       		// 0x00E0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributePriorityData >            WeaponCardAttributes;                             		// 0x00EC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UAttributePresentationDefinition* >  CustomPresentations;                              		// 0x00F8 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      PartType;                                         		// 0x0104 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      PartVariation;                                    		// 0x0105 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      NumPhysicalBarrelsToFireFrom;                     		// 0x0106 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FWeaponBoneControllerData >         BoneControllers;                                  		// 0x0108 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             VisibleAmmoBoneNames;                             		// 0x0114 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FName                                       LeftHandIKHoldName;                               		// 0x0120 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsSpinningEnabled : 1;                           		// 0x0128 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFlapsEnabled : 1;                                		// 0x0128 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOverrideShellCasing : 1;                         		// 0x0128 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseWeaponMelee : 1;                              		// 0x0128 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bScoped : 1;                                      		// 0x0128 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                SpinUpDuration;                                   		// 0x012C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                SpinDownDuration;                                 		// 0x013C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartingSpinUpFireIntervalMultiplier;             		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                FlapsExpandDuration;                              		// 0x0150 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                FlapsCollapseDuration;                            		// 0x0160 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             ShellCasingPSCTemplate;                           		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ShellCasingSocket;                                		// 0x0174 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ScopedShellCasingOffset;                          		// 0x017C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    OffHandShellCasingRotOffset;                      		// 0x0188 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UEffectCollectionDefinition*                 MuzzleFlashPSTemplates;                           		// 0x0194 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             AltMuzzleFlashSockets;                            		// 0x0198 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UWillowImpactDefinition*                     WeaponImpact;                                     		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystemComponent*                    FirstPersonParticle;                              		// 0x01A8 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       FirstPersonParticleSocketName;                    		// 0x01AC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       FirstPersonParticleInstanceDataName;              		// 0x01B4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x01BC (0x0004) [0x0000000000000000]              
	class UManufacturerDefinition*                     ManufacturerDefinitionForScopeMovie;              		// 0x01C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomedFOVLerpPct;                                 		// 0x01C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInterface*                          SightFXCrosshairMaterial;                         		// 0x01C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SightFXCrosshairParamName;                        		// 0x01CC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SightFXCrosshairRefractionParamName;              		// 0x01D4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4378 ];

		return pClassPointer;
	};

	void OnAbortReload ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnZoomOut ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnZoomIn ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUnequip ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnEquip ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnCreate ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UWeaponPartDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponNamePartDefinition
// 0x0028 (0x0204 - 0x01DC)
class UWeaponNamePartDefinition : public UWeaponPartDefinition
{
public:
	unsigned long                                      bNameIsUnique : 1;                                		// 0x01DC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FString                                     PartName;                                         		// 0x01E0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FAttributeExpressionData >          Expressions;                                      		// 0x01EC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                MinExpLevelRequirement;                           		// 0x01F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxExpLevelRequirement;                           		// 0x01FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Priority;                                         		// 0x0200 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4380 ];

		return pClassPointer;
	};

};

UClass* UWeaponNamePartDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponPartListDefinition
// 0x001C (0x0058 - 0x003C)
class UWeaponPartListDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FPartGradeWeightData >              WeightedParts;                                    		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeInitializationData >      ConsolidatedAttributeInitData;                    		// 0x004C (0x000C) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4382 ];

		return pClassPointer;
	};

};

UClass* UWeaponPartListDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponTypeAttributeValueResolver
// 0x001C (0x0058 - 0x003C)
class UWeaponTypeAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FWeaponTypeSelectorData >           WeaponTypes;                                      		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4384 ];

		return pClassPointer;
	};

};

UClass* UWeaponTypeAttributeValueResolver::pClassPointer = NULL;

// Class WillowGame.WeaponTypeDefinition
// 0x0500 (0x0680 - 0x0180)
class UWeaponTypeDefinition : public UWillowInventoryDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0180 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x0184 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      WeaponType;                                       		// 0x0188 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      BarrelSpinMode;                                   		// 0x0189 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      InventoryGroup;                                   		// 0x018A (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      WeaponLockType;                                   		// 0x018B (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     ScaleformFrameName;                               		// 0x018C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class USwfMovie*                                   ScaleformDLCClip;                                 		// 0x0198 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         AmmoResource;                                     		// 0x019C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                StartingAmmoCount;                                		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxStoredAmmo;                                    		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ShotCost;                                         		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClipSize;                                         		// 0x01AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AmmoRegenerationRate;                             		// 0x01B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOverheatBehavior : 1;                         		// 0x01B4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRemoveBaseAccuracyFromRecoilScale : 1;           		// 0x01B4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      AltFireRespectsPrimaryFireInterval : 1;           		// 0x01B4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAlternativeKickEnabled : 1;                      		// 0x01B4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMuzzleFlashPSCLoops : 1;                         		// 0x01B4 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTypeNameIsFullName : 1;                          		// 0x01B4 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableReloadMessages : 1;                       		// 0x01B4 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	float                                              RegenRate;                                        		// 0x01B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverheatRegenDelay;                               		// 0x01BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FireRegenDelay;                                   		// 0x01C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                InstantHitDamage;                                 		// 0x01C4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      InstantHitDamageType;                             		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowDamageTypeDefinition*                 DefaultDamageTypeDefinition;                      		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                InstantHitMomentum;                               		// 0x01DC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ProjectilesPerShot;                               		// 0x01EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MeleeDamage;                                      		// 0x01F0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                NormalizedInstantHitDamage;                       		// 0x0200 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                NormalizedMeleeDamage;                            		// 0x0210 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseStatusEffectChanceModifier;                   		// 0x0220 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectDamage;                               		// 0x0230 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Spread;                                           		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PerShotAccuracyImpulse;                           		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BodyWeaponHoldName;                               		// 0x0248 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimSet*                                    WeaponAnimSet;                                    		// 0x0250 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimTree*                                   WeaponAnimTree;                                   		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FConditionalAnimationData >         WeaponIdleAnimations;                             		// 0x0258 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalAnimationData >         WeaponFireAnimations;                             		// 0x0264 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalAnimationData >         WeaponReloadAnimations;                           		// 0x0270 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalAnimationData >         WeaponEquipAnimations;                            		// 0x027C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalAnimationData >         WeaponPutDownAnimations;                          		// 0x0288 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FName                                       AnimNodeSlotName;                                 		// 0x0294 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       OffHandAnimNodeSlotName;                          		// 0x029C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       WeaponGrabAnimation;                              		// 0x02A4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinFireAnimDuration;                              		// 0x02AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           AnimThresholdValues;                              		// 0x02B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           RecoilAnimScaleCurve;                             		// 0x02BC (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              ZoomedRecoilAnimScale;                            		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFiringModeDefinition*                       DefaultFiringModeDefinition;                      		// 0x02D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Range;                                            		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FireRate;                                         		// 0x02D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     FireOffset;                                       		// 0x02DC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UForceFeedbackWaveform*                      FiringForceFeedback;                              		// 0x02E8 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FAttributeBaseValueData >           ProjectileBaseValues;                             		// 0x02EC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                ExtraShotDelay;                                   		// 0x02F8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ShortFireIntervalModPower;                        		// 0x0308 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LongFireIntervalModPower;                         		// 0x030C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BurstInterval;                                    		// 0x0310 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                AutomaticBurstCount;                              		// 0x0314 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BurstShotAccuracyImpulseScale;                    		// 0x0318 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReloadTime;                                       		// 0x031C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReloadCompletePercent;                            		// 0x0320 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReloadDOFKernelSize;                              		// 0x0324 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReloadDOFZoomRate;                                		// 0x0328 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReloadDOFInnerRadius;                             		// 0x032C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReloadDOFFocusDistance;                           		// 0x0330 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EquipTime;                                        		// 0x0334 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PutDownTime;                                      		// 0x0338 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GrabEquipTime;                                    		// 0x033C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LeadingSpeed;                                     		// 0x0340 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ViewModelLeadPivotName;                           		// 0x0344 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ViewModelRotationOriginOffset;                    		// 0x034C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewModelRotationAmt;                             		// 0x0358 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewModelTranslationAmt;                          		// 0x035C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LeadingZoomedScale;                               		// 0x0360 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomedEndFOV;                                     		// 0x0364 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomedRate;                                       		// 0x0368 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BobDamping;                                       		// 0x036C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxPitchLead;                                     		// 0x0370 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxYawLead;                                       		// 0x0374 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PlayerViewOffset;                                 		// 0x0378 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FirstPersonMeshFOV;                               		// 0x0384 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ZoomSocketPreferred;                              		// 0x0388 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ZoomSocketFallback;                               		// 0x0390 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       FrontScopeSocket;                                 		// 0x0398 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       FrontSightSocket;                                 		// 0x03A0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RearSightSocket;                                  		// 0x03A8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomTime;                                         		// 0x03B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FractalWanderSpeed;                               		// 0x03B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FractalWanderLacunarity;                          		// 0x03B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FractalWanderPersistence;                         		// 0x03BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FractalWanderDiscWidth;                           		// 0x03C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FractalWanderDiscHeight;                          		// 0x03C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomWanderSmoothingSpeed;                         		// 0x03C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomWanderSmoothInTime_OnZoom;                    		// 0x03CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomWanderSmoothInTime_OnFire;                    		// 0x03D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ScopedMuzzleFlashOffset;                          		// 0x03D4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BoneToHideOnMesh;                                 		// 0x03E0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AdditionalBoneToHideOnMesh;                       		// 0x03E8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponKickSpeed;                                  		// 0x03F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponKickRecoveryTime;                           		// 0x03F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponKickZoomMultiplier;                         		// 0x03F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponKickUp;                                     		// 0x03FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponKickDown;                                   		// 0x0400 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinimumVerticalPercentage;                        		// 0x0404 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponKickLeft;                                   		// 0x0408 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeaponKickRight;                                  		// 0x040C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinimumHorizontalPercentage;                      		// 0x0410 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                AlternativeWeaponKick;                            		// 0x0414 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DOFKernelSize;                                    		// 0x0424 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DOFZoomRate;                                      		// 0x0428 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DOFInnerRadius;                                   		// 0x042C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       EffectSocket;                                     		// 0x0430 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MuzzleFlashDuration;                              		// 0x0438 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UEffectCollectionDefinition*                 MuzzleFlashPSTemplates;                           		// 0x043C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowPointLight*                           MuzzleFlashLightTemplate;                         		// 0x0440 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       MuzzleFlashSocket;                                		// 0x0444 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FGearboxViewShakeInfo                       FireShake;                                        		// 0x044C (0x0044) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 MeleeCameraAnim;                                  		// 0x0490 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             TracerTemplate;                                   		// 0x0494 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      TracerColor;                                      		// 0x0498 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       TracerColorParameterName;                         		// 0x049C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     DroppedImpact;                                    		// 0x04A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             ShellCasingPSCTemplate;                           		// 0x04A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ShellCasingSocket;                                		// 0x04AC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ScopedShellCasingOffset;                          		// 0x04B4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    OffHandShellCasingRotOffset;                      		// 0x04C0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       GlowScaleMaterialParamName;                       		// 0x04CC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxGlowImpulseScale;                              		// 0x04D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GlowImpulseDecayDelay;                            		// 0x04D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              GlowImpulseDecayRate;                             		// 0x04DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FiringGlowImpulse;                                		// 0x04E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InventoryWeight;                                  		// 0x04E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FConditionalSoundData >             FireSounds;                                       		// 0x04E8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             FireTailSounds;                                   		// 0x04F4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             EquipSounds;                                      		// 0x0500 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             PutDownSounds;                                    		// 0x050C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             DryFireSounds;                                    		// 0x0518 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             BarrelStartSpinningUpSounds;                      		// 0x0524 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             BarrelStopSpinningUpSounds;                       		// 0x0530 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             BarrelFullySpunUpSounds;                          		// 0x053C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             MagazineStartSpinningUpSounds;                    		// 0x0548 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             MagazineStopSpinningUpSounds;                     		// 0x0554 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             MagazineFullySpunUpSounds;                        		// 0x0560 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              LockRequiredTime;                                 		// 0x056C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LockCoolDownTime;                                 		// 0x0570 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LockRequiredDotProduct;                           		// 0x0574 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    LockAttemptStartedAkEvent;                        		// 0x0578 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    LockAcquiredAkEvent;                              		// 0x057C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    LockLostAkEvent;                                  		// 0x0580 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AIAimError;                                       		// 0x0584 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    AIBurstCount;                                     		// 0x0588 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    AIBurstDelay;                                     		// 0x0590 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     Typename;                                         		// 0x0598 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UWeaponNamePartDefinition* >         TitleList;                                        		// 0x05A4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UWeaponNamePartDefinition* >         PrefixList;                                       		// 0x05B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              ExternalAttributeEffects;                         		// 0x05BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              WeaponAttributeEffects;                           		// 0x05C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              ZoomExternalAttributeEffects;                     		// 0x05D4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeEffectData >              ZoomWeaponAttributeEffects;                       		// 0x05E0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributePriorityData >            WeaponCardAttributes;                             		// 0x05EC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UAttributePresentationDefinition* >  CustomPresentations;                              		// 0x05F8 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGestaltSkeletalMeshDefinition*              GestaltMesh;                                      		// 0x0604 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FWeaponPartAttachmentData                   AttachmentData;                                   		// 0x0608 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   BodyParts;                                        		// 0x0628 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   GripParts;                                        		// 0x062C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   BarrelParts;                                      		// 0x0630 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   SightParts;                                       		// 0x0634 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   StockParts;                                       		// 0x0638 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   ElementalParts;                                   		// 0x063C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   Accessory1Parts;                                  		// 0x0640 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   Accessory2Parts;                                  		// 0x0644 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponPartListDefinition*                   MaterialParts;                                    		// 0x0648 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     WeaponImpact;                                     		// 0x064C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     CrosshairFrame;                                   		// 0x0650 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              MaxDistSqr;                                       		// 0x065C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxAngleCos;                                      		// 0x0660 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BonusToCurrentTargetScore;                        		// 0x0664 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UpdateRate;                                       		// 0x0668 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaintainTargetTime;                               		// 0x066C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             VantageTagNames;                                  		// 0x0670 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x067C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4386 ];

		return pClassPointer;
	};

	void OnProjectileFired ( class UObject* Instigator, class UObject* Projectile, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTargetLockAcquired ( class UObject* Instigator, class UObject* Target, class UObject* Weapon, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnAltFireTriggered ( class UObject* Instigator, class UObject* Weapon, class APlayerController* PlayerController, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnZoomOut ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnZoomIn ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUnequip ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnEquip ( class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnCreate ( struct FBehaviorConsumerHandle* ConsumerHandle );
	struct FName GetWeaponTypeName ( );
	unsigned char GetHolsteredGearLikenessType ( );
	unsigned char GetHolsteredWeaponSizeType ( );
	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UWeaponTypeDefinition::pClassPointer = NULL;

// Class WillowGame.WillowAIMoveNodePathComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowAIMoveNodePathComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4388 ];

		return pClassPointer;
	};

};

UClass* UWillowAIMoveNodePathComponent::pClassPointer = NULL;

// Class WillowGame.WillowAkComponent
// 0x0018 (0x0204 - 0x01EC)
class UWillowAkComponent : public UAkComponent
{
public:
	int                                                DistanceRTPCRefCount;                             		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpeedRTPCRefCount;                                		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ApproachSpeedRTPCRefCount;                        		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CustomVelocity;                                   		// 0x01F8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4390 ];

		return pClassPointer;
	};

};

UClass* UWillowAkComponent::pClassPointer = NULL;

// Class WillowGame.WillowAnimDefinition
// 0x000C (0x00C8 - 0x00BC)
class UWillowAnimDefinition : public UGearboxAnimDefinition
{
public:
	unsigned long                                      bAllowLeftHandIK : 1;                             		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopAI : 1;                                      		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStopMovement : 1;                                		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bStopHeadLook : 1;                                		// 0x00BC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       InstanceDataName;                                 		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4392 ];

		return pClassPointer;
	};

	class UAnimNodeSpecialMoveBlend* GetSMNode ( class USpecialMoveInterface* SMI );
	void eventClientFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	float eventClientStarted ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	void eventServerFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	void eventServerStarted ( class USpecialMoveInterface* SMI );
	bool eventAuthorityCanPlay ( class USpecialMoveInterface* SMI );
};

UClass* UWillowAnimDefinition::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Cringe
// 0x000C (0x00D4 - 0x00C8)
class USpecialMove_Cringe : public UWillowAnimDefinition
{
public:
	struct FName                                       CringeAnim;                                       		// 0x00C8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CringeTime;                                       		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4394 ];

		return pClassPointer;
	};

	float PlayAnim ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
};

UClass* USpecialMove_Cringe::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Motion
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Motion : public UWillowAnimDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4396 ];

		return pClassPointer;
	};

};

UClass* USpecialMove_Motion::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Cloak
// 0x0004 (0x00CC - 0x00C8)
class USpecialMove_Cloak : public USpecialMove_Motion
{
public:
	unsigned long                                      bCloak : 1;                                       		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetAtStart : 1;                                  		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4398 ];

		return pClassPointer;
	};

	void eventClientFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	float eventClientStarted ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
};

UClass* USpecialMove_Cloak::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Dodge
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Dodge : public USpecialMove_Motion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4400 ];

		return pClassPointer;
	};

};

UClass* USpecialMove_Dodge::pClassPointer = NULL;

// Class WillowGame.SpecialMove_PhysicsJump
// 0x0018 (0x00E0 - 0x00C8)
class USpecialMove_PhysicsJump : public USpecialMove_Motion
{
public:
	struct FName                                       AnimIdle;                                         		// 0x00C8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AnimLand;                                         		// 0x00D0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPopulationBodyTag*                          BodyTag;                                          		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bInvalidateLandingSpotForCombat : 1;              		// 0x00DC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4402 ];

		return pClassPointer;
	};

	void PlayLand ( class USpecialMoveInterface* SMI );
	void PlayIdle ( class USpecialMoveInterface* SMI );
	float GetIdleLength ( class USpecialMoveInterface* SMI );
	bool NextEdgeIsJump ( class USpecialMoveInterface* SMI );
	int GetJumpIndex ( class USpecialMoveInterface* SMI );
	void eventAnimFinished ( class USpecialMoveInterface* SMI, class UAnimNodeSpecialMoveBlend* BlendNode, unsigned long bInterrupted, struct FSpecialMoveData* SMData );
	void eventClientFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	float eventClientStarted ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	void eventServerFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	void eventServerStarted ( class USpecialMoveInterface* SMI );
	void OnStartLand ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnStartIdle ( struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* USpecialMove_PhysicsJump::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Turn
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Turn : public USpecialMove_Motion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4404 ];

		return pClassPointer;
	};

};

UClass* USpecialMove_Turn::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Perch
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Perch : public UWillowAnimDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4406 ];

		return pClassPointer;
	};

};

UClass* USpecialMove_Perch::pClassPointer = NULL;

// Class WillowGame.SpecialMove_PerchLoop
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_PerchLoop : public UWillowAnimDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4408 ];

		return pClassPointer;
	};

};

UClass* USpecialMove_PerchLoop::pClassPointer = NULL;

// Class WillowGame.SpecialMove_PerchRandomLoop
// 0x000C (0x00D4 - 0x00C8)
class USpecialMove_PerchRandomLoop : public USpecialMove_PerchLoop
{
public:
	TArray< struct FSMPerchRandomPair >                RandomList;                                       		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4410 ];

		return pClassPointer;
	};

	bool Contains ( class USpecialMoveDefinition* SMD, class USpecialMoveInterface* SMI );
	class USpecialMoveDefinition* GetSMDToPlay ( class USpecialMoveInterface* SMI );
};

UClass* USpecialMove_PerchRandomLoop::pClassPointer = NULL;

// Class WillowGame.SpecialMove_PhaseLock
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_PhaseLock : public UWillowAnimDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4412 ];

		return pClassPointer;
	};

	void eventClientFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	void eventServerFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	void eventServerStarted ( class USpecialMoveInterface* SMI );
	bool eventAuthorityCanPlay ( class USpecialMoveInterface* SMI );
};

UClass* USpecialMove_PhaseLock::pClassPointer = NULL;

// Class WillowGame.SpecialMove_PopulationPoint
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_PopulationPoint : public UWillowAnimDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4414 ];

		return pClassPointer;
	};

};

UClass* USpecialMove_PopulationPoint::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Spawned
// 0x0008 (0x00D0 - 0x00C8)
class USpecialMove_Spawned : public UWillowAnimDefinition
{
public:
	float                                              StretchyStartTime;                                		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StretchyEndTime;                                  		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4416 ];

		return pClassPointer;
	};

	void eventClientFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	float eventClientStarted ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	void eventServerFinished ( class USpecialMoveInterface* SMI, unsigned long bInterrupted );
	void eventServerStarted ( class USpecialMoveInterface* SMI );
};

UClass* USpecialMove_Spawned::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Vehicle
// 0x0010 (0x00D8 - 0x00C8)
class USpecialMove_Vehicle : public UWillowAnimDefinition
{
public:
	unsigned char                                      TransitionType;                                   		// 0x00C8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FCameraLerpKeyFrame >               CameraLerpKeyFrames;                              		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4418 ];

		return pClassPointer;
	};

	float PlayAnim ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
	bool eventAuthorityCanPlay ( class USpecialMoveInterface* SMI );
};

UClass* USpecialMove_Vehicle::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_Simple
// 0x0038 (0x0114 - 0x00DC)
class UWillowAnimNode_Simple : public UAnimNodeAdditiveBlending
{
public:
	struct FName                                       SimpleAnimName;                                   		// 0x00DC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendInTime;                                      		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendOutTime;                                     		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayRate;                                         		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Style;                                            		// 0x00F0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimTree*                             MyTree;                                           		// 0x00F4 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bAdditive : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMirror : 1;                                      		// 0x00F8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDominant : 1;                                    		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UWillowAnimTree*                             LinkTree;                                         		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       LinkName;                                         		// 0x0100 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNodeSequence*                           SeqNode;                                          		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UISimpleAnimPlayer*                          CachedAnimPlayer;                                 		// 0x010C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0110 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4420 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
	bool PlayingSimpleAnim ( class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, struct FName AnimName, unsigned long bCheckPlayingLastFrame );
	int GetSimpleAnimIndex ( class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, struct FName AnimName );
	void StopSimpleAnim ( class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, struct FName AnimName );
	void PlaySimpleAnim ( class UISimpleAnimPlayer* AnimPlayer, class UWillowAnimTree* Tree, struct FName AnimName );
	void UpdateSimpleAnims ( class UISimpleAnimPlayer* AnimPlayer, int NewState );
	void UncacheSimpleAnims ( class UISimpleAnimPlayer* AnimPlayer, class USkeletalMeshComponent* SkelMesh );
	void CacheSimpleAnims ( class UISimpleAnimPlayer* AnimPlayer, class USkeletalMeshComponent* SkelMesh );
	void Stop ( );
	void Play ( );
};

UClass* UWillowAnimNode_Simple::pClassPointer = NULL;

// Class WillowGame.WillowAnimTreeFactory
// 0x0000 (0x0070 - 0x0070)
class UWillowAnimTreeFactory : public UFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4422 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimTreeFactory::pClassPointer = NULL;

// Class WillowGame.WillowAutoAimProfileDefinition
// 0x0018 (0x0054 - 0x003C)
class UWillowAutoAimProfileDefinition : public UGBXDefinition
{
public:
	float                                              MagnetismMin;                                     		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MagnetismMax;                                     		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxRotationH;                                     		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxRotationV;                                     		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LockStrengthH;                                    		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LockStrengthV;                                    		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4424 ];

		return pClassPointer;
	};

};

UClass* UWillowAutoAimProfileDefinition::pClassPointer = NULL;

// Class WillowGame.WillowAutoAimStrategy
// 0x0079 (0x00B5 - 0x003C)
class UWillowAutoAimStrategy : public UObject
{
public:
	class UWillowAutoAimStrategyDefinition*            DataDefinition;                                   		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                CurrentFrame;                                     		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                LastFrame;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              SustainStartTime;                                 		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              AcquireStartTime;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      bCanAcquireLock : 1;                              		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAdjustOnMoveOnly : 1;                            		// 0x0050 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsWithinWorldSpaceRadius_InstantaneousTarget : 1;		// 0x0050 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsWithinWorldSpaceRadius_LockedTarget : 1;       		// 0x0050 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bComputedTargetLastFrame : 1;                     		// 0x0050 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bSnappedToTarget : 1;                             		// 0x0050 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIgnoreCloakAbility : 1;                          		// 0x0050 (0x0004) [0x0000000000000000] [0x00000040] 
	class UITargetable*                                InstantaneousTarget;                              		// 0x0054 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0058 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UITargetable*                                LastInstantaneousTarget;                          		// 0x005C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UITargetable*                                LockedTarget;                                     		// 0x0064 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FLockOnProfile                              PrevProfile;                                      		// 0x006C (0x0024) [0x0000000000000000]              
	struct FLockOnProfile                              CurrentProfile;                                   		// 0x0090 (0x0024) [0x0000000000000000]              
	unsigned char                                      TargetSet;                                        		// 0x00B4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4426 ];

		return pClassPointer;
	};

	void SetTargetSet ( unsigned char Type );
	void SetAdjustOnMoveOnly ( unsigned long bEnabled );
	void SetLockingEnabled ( unsigned long bEnabled );
	float GetLogMagnetismRange ( class AWillowPlayerController* PC, class UITargetable* Targetable );
	void eventDrawAutoAimDebug ( class AWillowPlayerController* Controller, class AHUD* H );
	class UITargetable* GetPreferredTarget ( class AWillowPlayerController* InPlayer, unsigned long bGetCachedResult, unsigned long bGetInstantaneousTarget, unsigned long bMustBeWithinWorldSpaceRadius );
	void ModifyInput ( class AWillowPlayerController* InPlayer, float* aTurn, float* aLookUp, float* aForward, float* aStrafe );
};

UClass* UWillowAutoAimStrategy::pClassPointer = NULL;

// Class WillowGame.WillowAutoAimStrategyDefinition
// 0x0030 (0x006C - 0x003C)
class UWillowAutoAimStrategyDefinition : public UGBXDefinition
{
public:
	float                                              MaxTargetDistance;                                		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinTargetDistance;                                		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RadiusMultiplier;                                 		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SustainTime;                                      		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AcquireTime;                                      		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ChangeTime;                                       		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxSnapAngle;                                     		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DistanceOffset;                                   		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FProfileDefinition >                Profiles;                                         		// 0x005C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UWillowAutoAimProfileDefinition*             DefaultProfile;                                   		// 0x0068 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4428 ];

		return pClassPointer;
	};

	class UWillowAutoAimProfileDefinition* GetProfileDefinition ( unsigned char Profile );
};

UClass* UWillowAutoAimStrategyDefinition::pClassPointer = NULL;

// Class WillowGame.WillowCalloutDefinition
// 0x0004 (0x0050 - 0x004C)
class UWillowCalloutDefinition : public UGearboxCalloutDefinition
{
public:
	class UGearboxDialogEventTag*                      DialogEvent;                                      		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4430 ];

		return pClassPointer;
	};

};

UClass* UWillowCalloutDefinition::pClassPointer = NULL;

// Class WillowGame.WillowCharacterClassDefinition
// 0x013C (0x0294 - 0x0158)
class UWillowCharacterClassDefinition : public UCharacterClassDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                       		// 0x0158 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UWillowCharacterClassDefinition*             AttributeParentClass;                             		// 0x015C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x0160 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FFlagDefinitionInitialization >     DesignerFlagStartingValues;                       		// 0x016C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeCategory >                AttributeStartingValuesNew;                       		// 0x0178 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                BaseCommerceMarkup;                               		// 0x0184 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UClass* >                            EligibleUsage;                                    		// 0x0194 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bCountsTowardDamageAndKillStats : 1;              		// 0x01A0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTreatAsVehicleForStats : 1;                      		// 0x01A0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FName                                       KilledStatID;                                     		// 0x01A4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       KilledCriticalStatID;                             		// 0x01AC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RanOverStatID;                                    		// 0x01B4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FDeathByWeaponStatID >              KillByWeaponStatList;                             		// 0x01BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FDeathByDamageTypeStatID >          KillByDamageTypeStatList;                         		// 0x01C8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FDeathByWeaponDamageStatID >        KillByWeaponDamageStatList;                       		// 0x01D4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FName                                       LevelUpKillStat;                                  		// 0x01E0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseIgniteChanceResistanceModifier;               		// 0x01E8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseShockChanceResistanceModifier;                		// 0x01F8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseCorrosiveChanceResistanceModifier;            		// 0x0208 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseSlowChanceResistanceModifier;                 		// 0x0218 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseAmpChanceResistanceModifier;                  		// 0x0228 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseIgniteDurationResistanceModifier;             		// 0x0238 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseShockDurationResistanceModifier;              		// 0x0248 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseCorrosiveDurationResistanceModifier;          		// 0x0258 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseSlowDurationResistanceModifier;               		// 0x0268 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseAmpDurationResistanceModifier;                		// 0x0278 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                       		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RevivalHealthMultiplier;                          		// 0x028C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInjuredDefinition*                          CharacterInjuredDefinition;                       		// 0x0290 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4432 ];

		return pClassPointer;
	};

	void SetBehaviorProviderDefinition ( class UBehaviorProviderDefinition* NewBehaviorProviderDefinition );
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition ( );
};

UClass* UWillowCharacterClassDefinition::pClassPointer = NULL;

// Class WillowGame.PlayerClassDefinition
// 0x0124 (0x03B8 - 0x0294)
class UPlayerClassDefinition : public UWillowCharacterClassDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x0294 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     PawnArchetypePath;                                		// 0x0298 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillTreePath;                                    		// 0x02A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InitialFOVModifierSpeed;                          		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InitialEyeHeightModifierSpeed;                    		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GotFirstSkillPointStatID;                         		// 0x02B8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaximumCoDependentDamageReturnRange;              		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    ActionSkillAvailableAkEvent;                      		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     ExperiencePoolDefinition;                         		// 0x02C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     SkillCooldownPoolDefinition;                      		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     MeleeSkillCooldownPoolDefinition;                 		// 0x02D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnLevelUp;                                        		// 0x02D4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnLevelUpNaturally;                               		// 0x02E0 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystem*                             BulletReflectionParticle;                         		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowGFxUIManagerDefinition*               GFxUIManagerDefinition;                           		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedsDualWieldInventoryGuides : 1;               		// 0x02F4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMeleeSkillUsesSharedWeaponAction : 1;            		// 0x02F4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FVector                                     CharacterSelectUIPrimaryStandInOffset;            		// 0x02F8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    CharacterSelectUIPrimaryStandInRotation;          		// 0x0304 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CharacterSelectUISplitStandInOffset;              		// 0x0310 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    CharacterSelectUISplitStandInRotation;            		// 0x031C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LowHealthPercent;                                 		// 0x0328 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnLowHealth;                                      		// 0x032C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnLowHealthRecover;                               		// 0x0338 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UPlayerNameIdentifierDefinition*             CharacterNameId;                                  		// 0x0344 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FInputContextData >                 InputContexts;                                    		// 0x0348 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      InputContextSelector;                             		// 0x0354 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInputDeviceCollectionDefinition*            InputDeviceCollection;                            		// 0x0358 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USprintDefinition*                           SprintSettings;                                   		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFocusCameraDefinition*                      FocusDef;                                         		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ExtraClipPostTranslate;                           		// 0x0364 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPawnInteractionDefinition*                  TradeInteractionDefinition;                       		// 0x0370 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInjuredDefinition*                          CharacterInjuredDefinitionOverride;               		// 0x0374 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FPlayerClassAchievementUnlockData > PlayerClassAchievementData;                       		// 0x0378 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FNameBasedObjectPath                        InjuredDefOverridePath;                           		// 0x0384 (0x0034) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4434 ];

		return pClassPointer;
	};

	TArray< unsigned char > ShouldUnlockPlayerClassAchievement ( unsigned char UnlockType, int IntData, unsigned long bCanBeGreater, unsigned long bCanBeLess );
};

UClass* UPlayerClassDefinition::pClassPointer = NULL;

// Class WillowGame.WillowClanDefinition
// 0x0018 (0x0054 - 0x003C)
class UWillowClanDefinition : public UGBXDefinition
{
public:
	TArray< struct FClanMaterialData >                 MaterialMap;                                      		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FClanSwitchData >                   SwitchData;                                       		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4436 ];

		return pClassPointer;
	};

	void ChangeObjectMaterials ( class UObject* MaterialObject );
};

UClass* UWillowClanDefinition::pClassPointer = NULL;

// Class WillowGame.WillowCustomizationManager
// 0x003C (0x0078 - 0x003C)
class UWillowCustomizationManager : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FPendingCustomization >             PendingCustomizations;                            		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumHeadsLoadedSinceLastGC;                        		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      bRequestingImmediateGC : 1;                       		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UCustomizationDefinition* >          AllCustomizations;                                		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FProductCustomizationInfo >         LoadedProductsCustomizationInfos;                 		// 0x0060 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FCustomizationSizeMapping >         CustomizationSizes;                               		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4438 ];

		return pClassPointer;
	};

	void eventEvaluateCustomizationChangedStat ( class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, unsigned long bLocked );
	bool IsCustomizationUnlocked ( class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, int* IsNew );
	void SetCustomizationSeen ( class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, unsigned long bSeen );
	void SetCustomizationLocked ( class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, unsigned long bLocked );
	class UCustomizationData* GetLoadedCustomizationData ( class UCustomizationDefinition* Definition );
	void InitializePlayerPawn ( class AWillowPlayerPawn* TargetPlayer );
	void ReleaseUnusedCustomizationData ( );
	void ReleaseCustomizationData ( class UCustomizationData* Data );
	void InitiateCustomizationRequest ( class UCustomizationDefinition* NewCustomization, class UICustomizable* Target );
	void UpdatePRILocalCustomizationArrays ( class UCustomizationDefinition* NewCustomization, class AWillowPlayerReplicationInfo* PRI );
	void PlayerCustomizationsUpdated ( class AWillowPlayerReplicationInfo* PRI );
};

UClass* UWillowCustomizationManager::pClassPointer = NULL;

// Class WillowGame.WillowDamageArea
// 0x0074 (0x01FC - 0x0188)
class AWillowDamageArea : public AActor
{
public:
	unsigned char                                      CollisionPrimitiveType;                           		// 0x0188 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DamagePerSecond;                                  		// 0x018C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectDamage;                               		// 0x019C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StatusEffectChance;                               		// 0x01AC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      DamageSource;                                     		// 0x01BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x01C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x01C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanDamageFriendlies : 1;                         		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bApplyBeams : 1;                                  		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBarrelSource : 1;                                		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlantSource : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceTouchingUpdate : 1;                         		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	float                                              DamageTickFrequency;                              		// 0x01CC (0x0004) [0x0000000000000000]              
	float                                              DamageTickTime;                                   		// 0x01D0 (0x0004) [0x0000000000000000]              
	struct FName                                       BeamSourceSocket;                                 		// 0x01D4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamTargetSocket;                                 		// 0x01DC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFiringModeDefinition*                       BeamFiringMode;                                   		// 0x01E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UITargetable* >                      BeamTargets;                                      		// 0x01E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              BarrelSourceTime;                                 		// 0x01F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlantSourceTime;                                  		// 0x01F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4440 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void DisableArea ( );
	void EnableArea ( );
	bool IsEnabled ( );
	class AWillowLightProjectileManager* eventGetLightProjectileManager ( );
	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	float GetStatusEffectChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectBaseChanceModifier ( class UObject* ObjContext );
	float GetStatusEffectBaseDamage ( class UObject* ObjContext );
};

UClass* AWillowDamageArea::pClassPointer = NULL;

// Class WillowGame.WillowDamagePipeline
// 0x00C0 (0x0190 - 0x00D0)
class UWillowDamagePipeline : public UDamagePipeline
{
public:
	class UWillowDamageTypeDefinition*                 WillowDamageTypeDef;                              		// 0x00D0 (0x0004) [0x0000000000000000]              
	class UWillowImpactDefinition*                     WillowImpactDefinition;                           		// 0x00D4 (0x0004) [0x0000000000000000]              
	class AController*                                 DamageInstigator;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FVector                                     HitLocation;                                      		// 0x00DC (0x000C) [0x0000000000000000]              
	struct FVector                                     HitMomentum;                                      		// 0x00E8 (0x000C) [0x0000000000000000]              
	struct FTraceHitInfo                               HitInfo;                                          		// 0x00F4 (0x001C) [0x0000000000080000]              ( CPF_Component )
	class UClass*                                      DamageSource;                                     		// 0x0110 (0x0004) [0x0000000000000000]              
	class UWillowGlobals*                              Globals;                                          		// 0x0114 (0x0004) [0x0000000000000000]              
	class UGlobalsDefinition*                          GlobalsDef;                                       		// 0x0118 (0x0004) [0x0000000000000000]              
	class AWorldInfo*                                  WorldInfo;                                        		// 0x011C (0x0004) [0x0000000000000000]              
	class AWillowGameReplicationInfo*                  WGRI;                                             		// 0x0120 (0x0004) [0x0000000000000000]              
	class AActor*                                      DamagedActor;                                     		// 0x0124 (0x0004) [0x0000000000000000]              
	class APawn*                                       DamagedPawnBase;                                  		// 0x0128 (0x0004) [0x0000000000000000]              
	class AWillowInteractiveObject*                    DamagedIO;                                        		// 0x012C (0x0004) [0x0000000000000000]              
	class AWillowPawn*                                 DamagedPawn;                                      		// 0x0130 (0x0004) [0x0000000000000000]              
	class AWillowAIPawn*                               DamagedAIPawn;                                    		// 0x0134 (0x0004) [0x0000000000000000]              
	class AWillowPlayerController*                     DamageInstigatorWPC;                              		// 0x0138 (0x0004) [0x0000000000000000]              
	class UBodyHitRegionDefinition*                    HitRegionDef;                                     		// 0x013C (0x0004) [0x0000000000000000]              
	class UIDamageable*                                DamageableInt;                                    		// 0x0140 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0144 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIHitRegionConsumer*                         HitRegionConsumerInt;                             		// 0x0148 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x014C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIProtectionTimer*                           ProtectableInt;                                   		// 0x0150 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0154 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIProjectileReflector*                       DamagedReflectableInt;                            		// 0x0158 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x015C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIProjectileReflector*                       InstigatorReflectableInt;                         		// 0x0160 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0164 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UITargetable*                                DamagedTargetableInt;                             		// 0x0168 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x016C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UITargetable*                                InstigatorTargetableInt;                          		// 0x0170 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0174 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned long                                      bCanReflect : 1;                                  		// 0x0178 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      BulletFromClipType;                               		// 0x017C (0x0001) [0x0000000000000000]              
	TArray< class UBodyHitRegionDefinition* >          TakingRadiusDamageOnHitRegions;                   		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ResistDamageReductionThreshold;                   		// 0x018C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4442 ];

		return pClassPointer;
	};

	void eventKillPlayer ( class AWillowPlayerPawn* WPP );
	bool GetWouldBeHealedSomehowByFriendlyFire ( class APawn* CheckTarget, class AController* CheckSource, class UClass* InDamageSource );
	void DamageDealtSkillEventsTriggered ( unsigned char* SkillEvent );
	void DamageTakenSkillEventsTriggered ( unsigned char* SkillEvent );
	void SetAlwaysCrit ( unsigned long DesiredValue );
	bool IsAlwaysCritCheatActive ( );
	void SetTakingRadiusDamageOnHitRegions ( TArray< class UBodyHitRegionDefinition* > InHitRegions );
	void SetBulletClipType ( unsigned char InBulletFromClipType );
	void SetCanReflect ( unsigned long inCanReflect );
	void ResetToDefaults ( );
	bool ConvertDamageToHealing ( float IncomingDamage, class APawn* InDamagedPawn, class AController* InDamageInstigator, class UClass* InDamageSource, struct FTraceHitInfo InHitInfo );
	struct FDamageEventSummary AdjustDamage ( float IncomingDamage, float DamageSeverityPercent, class AActor* InDamagedActor, class AController* InDamageInstigator, struct FVector InHitLocation, class UClass* InDamageSource, struct FVector InHitMomentum, struct FTraceHitInfo InHitInfo );
};

UClass* UWillowDamagePipeline::pClassPointer = NULL;

// Class WillowGame.WillowDamageType
// 0x001C (0x0080 - 0x0064)
class UWillowDamageType : public UDamageType
{
public:
	unsigned long                                      bDirectDamage : 1;                                		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSeversHead : 1;                                  		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCauseConvulsions : 1;                            		// 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseTearOffMomentum : 1;                          		// 0x0064 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bThrowRagdoll : 1;                                		// 0x0064 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bLeaveBodyEffect : 1;                             		// 0x0064 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bBulletHit : 1;                                   		// 0x0064 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bVehicleHit : 1;                                  		// 0x0064 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCausesBlood : 1;                                 		// 0x0064 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	float                                              GibPerterbation;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageWeaponClass;                                		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                DamageWeaponFireMode;                             		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     UBMKilledByMessageString;                         		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4444 ];

		return pClassPointer;
	};

	void PawnTornOff ( class AWillowPawn* DeadPawn );
	void SpawnHitEffect ( class APawn* P, float Damage, struct FVector Momentum, struct FTraceHitInfo HitInfo, struct FVector HitLocation );
};

UClass* UWillowDamageType::pClassPointer = NULL;

// Class WillowGame.WillowDamageSource
// 0x0000 (0x0080 - 0x0080)
class UWillowDamageSource : public UWillowDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4446 ];

		return pClassPointer;
	};

	bool CanDamageSourceBeAbsorbedByShields ( class UClass* DamageSource );
	bool ShouldDamageSourcePenetrateShields ( class UClass* DamageSource, class AController* DamageInstigator );
	void GetAmmoTheftAmounts ( class UClass* DamageSource, class AController* DamageInstigator, class AController* DamageReceiver, int* InstigatedDamageAmmoTheftAmount, int* ReceivedDamageAmmoTheftAmount );
};

UClass* UWillowDamageSource::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Bullet
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Bullet : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4448 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Bullet::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_MachineGun
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_MachineGun : public UWillowDmgSource_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4450 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_MachineGun::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Pistol
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Pistol : public UWillowDmgSource_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4452 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Pistol::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Shotgun
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Shotgun : public UWillowDmgSource_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4454 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Shotgun::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Sniper
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Sniper : public UWillowDmgSource_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4456 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Sniper::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_SubMachineGun
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_SubMachineGun : public UWillowDmgSource_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4458 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_SubMachineGun::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_CustomCrate
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_CustomCrate : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4460 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_CustomCrate::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Grenade
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Grenade : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4462 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Grenade::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Melee
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Melee : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4464 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Melee::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Rocket
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Rocket : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4466 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Rocket::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Shield
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Shield : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4468 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Shield::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_ShieldNova
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_ShieldNova : public UWillowDmgSource_Shield
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4470 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_ShieldNova::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_ShieldSpike
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_ShieldSpike : public UWillowDmgSource_Shield
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4472 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_ShieldSpike::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Skill
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Skill : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4474 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Skill::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_Skill_IgnoreIOs
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Skill_IgnoreIOs : public UWillowDmgSource_Skill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4476 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_Skill_IgnoreIOs::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_StatusEffect
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_StatusEffect : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4478 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_StatusEffect::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_VehicleRanInto
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_VehicleRanInto : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4480 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_VehicleRanInto::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_VehicleRanOver
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_VehicleRanOver : public UWillowDamageSource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4482 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_VehicleRanOver::pClassPointer = NULL;

// Class WillowGame.WillowDamageTypeDefinition
// 0x00C0 (0x00FC - 0x003C)
class UWillowDamageTypeDefinition : public UDamageTypeDefinition
{
public:
	struct FAttributeInitializationData                FleshDamageModifier;                              		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ArmorDamageModifier;                              		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ShieldDamageModifier;                             		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeDefinition*                        CharacterDamageTypeModifierAttribute;             		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnProjectileSpawn;                                		// 0x0070 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bNoBlood : 1;                                     		// 0x007C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNoPlayerFeedback : 1;                            		// 0x007C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNoAlliedPlayerFeedback : 1;                      		// 0x007C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseStatusEffectInstigatorModifiersForDamage : 1; 		// 0x007C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bApplyUpwardMomentum : 1;                         		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCauseHardFlinch : 1;                             		// 0x007C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	class UStatusEffectDefinition*                     StatusEffect;                                     		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                DamageColor;                                      		// 0x0084 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      HUDDamageColor;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DamageType;                                       		// 0x0098 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UpwardMomentumScale;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RigidBodyMomentumScale;                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                FleshMomentumModifier;                            		// 0x00A4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ArmorMomentumModifier;                            		// 0x00B4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ShieldMomentumModifier;                           		// 0x00C4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UAttributePresentationDefinition* >  WeaponCardPresentations;                          		// 0x00D4 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MaxDamageRadius;                                  		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinDamageRadius;                                  		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinDamagePercent;                                 		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HardFlinchPercent;                                		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       DamageDealtStatId;                                		// 0x00F0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DamageLanguageId;                                 		// 0x00F8 (0x0004) [0x0000000000008002]              ( CPF_Const | CPF_Localized )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4484 ];

		return pClassPointer;
	};

	void GetDamageTypeModifiers ( class UWillowDamageTypeDefinition* DamageTypeDefinition, class AController* DamageInstigator, float* DamageInstigatorModifier );
	void eventDisplayRecentDamageForPlayer ( class AWillowPlayerController* PC, struct FPlayerRecentDamageEventData* DamageEventData );
	bool HasPlayerRecentDamageFlags ( unsigned char FlagsToCheck, struct FPlayerRecentDamageEventData* DamageEventData );
	float CalcRadiusDamageScale ( float Dist, float DamageRadius, struct FVector HurtOrigin );
	float GetMinDamagePercent ( );
	float GetMinDamageRadius ( );
	float GetMaxDamageRadius ( );
	float GetPawnDamageTypeModifier ( class APawn* PawnTakingDamage );
	float GetSurfaceDamageTypeModifier ( unsigned char DamageSurfaceType, class AController* DamageInstigator );
	float GetSurfaceMomentumTypeModifier ( unsigned char DamageSurfaceType, class AController* DamageInstigator );
	float GetRigidBodyMomentumScale ( );
	float GetUpwardMomentumScale ( );
	bool ApplyUpwardMomentum ( );
};

UClass* UWillowDamageTypeDefinition::pClassPointer = NULL;

// Class WillowGame.WillowDeclarations
// 0x0000 (0x003C - 0x003C)
class UWillowDeclarations : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4486 ];

		return pClassPointer;
	};

};

UClass* UWillowDeclarations::pClassPointer = NULL;

// Class WillowGame.WillowDialogAct_MissionSwitch
// 0x0008 (0x0078 - 0x0070)
class UWillowDialogAct_MissionSwitch : public UGearboxDialogAction
{
public:
	unsigned char                                      TrackedState;                                     		// 0x0070 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionDefinition*                          MissionDefinition;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4488 ];

		return pClassPointer;
	};

	void eventActivate ( );
};

UClass* UWillowDialogAct_MissionSwitch::pClassPointer = NULL;

// Class WillowGame.WillowDialogAct_RandomBranch
// 0x002C (0x009C - 0x0070)
class UWillowDialogAct_RandomBranch : public UGearboxDialogAction
{
public:
	TArray< float >                                    Chances;                                          		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              QuietTimeMin;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              QuietTimeMax;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Mode;                                             		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                AvoidRepeatingLastNPlayed;                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NextFireTime;                                     		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      DisableIndices;                                   		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4490 ];

		return pClassPointer;
	};

	void eventActivate ( );
};

UClass* UWillowDialogAct_RandomBranch::pClassPointer = NULL;

// Class WillowGame.WillowDialogAct_Talk
// 0x0008 (0x008C - 0x0084)
class UWillowDialogAct_Talk : public UGearboxDialogAct_Talk
{
public:
	class UWillowDialogEmoteDefinition*                Emote;                                            		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableNoMatch : 1;                               		// 0x0088 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4492 ];

		return pClassPointer;
	};

	void eventActivate ( );
	void eventTalkFinished ( class AActor* InTalker );
	void eventTalkStarted ( class AActor* InTalker );
};

UClass* UWillowDialogAct_Talk::pClassPointer = NULL;

// Class WillowGame.WillowDialogAct_Trigger
// 0x0000 (0x0078 - 0x0078)
class UWillowDialogAct_Trigger : public UGearboxDialogAct_Trigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4494 ];

		return pClassPointer;
	};

};

UClass* UWillowDialogAct_Trigger::pClassPointer = NULL;

// Class WillowGame.WillowDialogEchoActor
// 0x0020 (0x01A8 - 0x0188)
class AWillowDialogEchoActor : public AActor
{
public:
	struct FPointer                                    VfTable_IGearboxDialogInterface;                  		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UGearboxDialogNameTag*                       NameTag;                                          		// 0x018C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UGearboxDialogComponent*                     DialogComponent;                                  		// 0x0190 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FGearboxDialogReplicatedData                DialogReplicatedData;                             		// 0x0194 (0x0014) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4496 ];

		return pClassPointer;
	};

	void SetDialogNameTag ( class UGearboxDialogNameTag* NewName );
	struct FGearboxDialogReplicatedData GetReplicatedDialogData ( );
	void SetReplicatedDialogData ( class UGearboxDialogAct_Talk* TalkAct, struct FGearboxDialogData* Data );
	void GetDialogGroups ( TArray< class UGearboxDialogGroup* >* Groups );
	class UGearboxDialogComponent* GetDialogComponent ( );
	class UGearboxDialogNameTag* GetDialogNameTag ( );
	class AActor* GetActor ( );
	bool CanTalk ( );
	void eventServerDialog_TriggerEvent ( class UGearboxDialogEventTag* EventTag, class AActor* Other, class UObject* ObjectParameter );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowDialogEchoActor::pClassPointer = NULL;

// Class WillowGame.WillowDialogEmoteDefinition
// 0x0000 (0x003C - 0x003C)
class UWillowDialogEmoteDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4498 ];

		return pClassPointer;
	};

};

UClass* UWillowDialogEmoteDefinition::pClassPointer = NULL;

// Class WillowGame.WillowDialogEventTag
// 0x0004 (0x0048 - 0x0044)
class UWillowDialogEventTag : public UGearboxDialogEventTag
{
public:
	unsigned long                                      bIsEchoEvent : 1;                                 		// 0x0044 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDoesNotOverrideSamePriority : 1;                 		// 0x0044 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMultiplayerOnly : 1;                             		// 0x0044 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOncePerSession : 1;                              		// 0x0044 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4500 ];

		return pClassPointer;
	};

};

UClass* UWillowDialogEventTag::pClassPointer = NULL;

// Class WillowGame.WillowDialogEventTagSpecialized
// 0x0010 (0x0058 - 0x0048)
class UWillowDialogEventTagSpecialized : public UWillowDialogEventTag
{
public:
	class UGearboxDialogEventTag*                      SpecializationOfEventTag;                         		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UGearboxDialogNameTag* >             SpecializationForOtherNameTags;                   		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4502 ];

		return pClassPointer;
	};

};

UClass* UWillowDialogEventTagSpecialized::pClassPointer = NULL;

// Class WillowGame.WillowDialogGlobalsDefinition
// 0x014C (0x0198 - 0x004C)
class UWillowDialogGlobalsDefinition : public UGearboxDialogGlobalsDefinition
{
public:
	class UGearboxDialogTemplateGroup*                 DefaultTemplateGroup;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Jump;                                         		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_JumpLand;                                     		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_KilledChampion;                               		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_SkillKill;                                    		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              KillStreakTargetScore;                            		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              KillPointValue;                                   		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DefaultKillScoreDecayRate;                        		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FInterpCurveFloat                           LastKillTimeVDecayRate;                           		// 0x006C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UGearboxDialogEventTag*                      DET_KillStreak;                                   		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_ChallengeCompleted;                           		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_JoinedGame;                                   		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_SeatSwap;                                     		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_VehicleCatchAir;                              		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VehicleCatchAirHangTime;                          		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_KilledEnemyVehicle;                           		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_VehicleLowHealth;                             		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VehicleLowHealthThreshold;                        		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_VehicleFlipped;                               		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_RanOverEnemy;                                 		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                RanOverEnemyMinVelocity;                          		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_HitPlayerVehicle;                             		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_VehicleSpawn;                                 		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_CriticalHitKill;                              		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_CriticalHit;                                  		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_OutOfAmmo;                                    		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Reloading;                                    		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                WeaponMinRarityLevel;                             		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_RareWeaponEquipped;                           		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_PlayerIdle;                                   		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleTimeOut;                                      		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_PlayerDown;                                   		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Death;                                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_DeathByFire;                                  		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_DeathByShock;                                 		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Damaged;                                      		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_DamagedCritical;                              		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_ShieldDown;                                   		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_PlayerDownReact;                              		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_PlayerDeadReact;                              		// 0x00F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_GrenadeReact;                                 		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HealedPlayerReviveTriggerValue;                   		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_HealedPlayer;                                 		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UGearboxDialogGroup* >               NPCDialogGroups;                                  		// 0x0104 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UGearboxDialogEventTag*                      DET_PlayerLingeringInMenu;                        		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_GenericDismissal;                             		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_OnUse_AllMissionsInProgress;                  		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_OnUse_MissionComplete;                        		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_OnUse_MissionsAvailable;                      		// 0x0120 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_OnUse_NoMissions;                             		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_MissionTurnedIn;                              		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Provoked;                                     		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Unprovoked;                                   		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Dodge;                                        		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_ReacquireTarget;                              		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnStartEchoCallBehaviors;                         		// 0x013C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnStopEchoCallBehaviors;                          		// 0x0148 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FScreenParticleModifier >           EchoScreenParticleModifiers;                      		// 0x0154 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UGearboxDialogEventTag*                      DET_IncomingChampion;                             		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MapOpenTriggerTime;                               		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_MapOpenRemark;                                		// 0x0168 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SkillsOpenTriggerTime;                            		// 0x016C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_SkillPointToSpend;                            		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ComparisonOpenTriggerTime;                        		// 0x0174 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_CompareItems;                                 		// 0x0178 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TravelBlockedActorDistance;                       		// 0x017C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_TravelBlocked;                                		// 0x0180 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogEventTag*                      DET_Taunt;                                        		// 0x0184 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogPriority*                      ActivePlotMissionMinPriority;                     		// 0x0188 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogPriority*                      ActiveSideMissionMinPriority;                     		// 0x018C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogPriority*                      ActiveMissionMinPriorityStart;                    		// 0x0190 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogPriority*                      SideMissionKickoffPriority;                       		// 0x0194 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4504 ];

		return pClassPointer;
	};

	void TriggerTemplateEvent ( class UGearboxDialogEventTag* Event, class AActor* Instigator, class AActor* Other, class UObject* ObjectParameter );
	void StaticTriggerTemplateEvent ( class UGearboxDialogEventTag* Event, class AActor* Instigator, class AActor* Other, class UObject* ObjectParameter );
	class UWillowDialogGlobalsDefinition* Get ( );
};

UClass* UWillowDialogGlobalsDefinition::pClassPointer = NULL;

// Class WillowGame.WillowDialogManager
// 0x001C (0x00DC - 0x00C0)
class UWillowDialogManager : public UGearboxDialogManager
{
public:
	class AActor*                                      EchoActor;                                        		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowDialogEmoteDefinition*                EchoEmote;                                        		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AWillowDialogEchoActor* >            PureEchoActors;                                   		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FQueuedPersonalEchoLog                      QueuedPersonalEcho;                               		// 0x00D4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4506 ];

		return pClassPointer;
	};

	void PlayPersonalEchoLog ( class UWillowDialogEventTag* InEventTag, class UGearboxDialogGroup* InGroup );
	bool IsMissionKickoffPlaying ( );
	int GetPriorityForEchoActor ( );
	void Cleanup ( );
	void PlayEchoDialog ( class UWillowDialogEventTag* InEvent, class UWillowDialogNameTag* InName, unsigned long bForcePlayAsPureEcho );
};

UClass* UWillowDialogManager::pClassPointer = NULL;

// Class WillowGame.WillowDialogNameTag
// 0x0040 (0x0088 - 0x0048)
class UWillowDialogNameTag : public UGearboxDialogNameTag
{
public:
	struct FString                                     CallerName;                                       		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FEchoPortraitInfo                           DefaultEchoPortrait;                              		// 0x0054 (0x0018) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FEmotePortraitInfo >                EmotePortraits;                                   		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FEmoteStance >                      EmoteStances;                                     		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UDownloadableExpansionDefinition*            DlcExpansion;                                     		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4508 ];

		return pClassPointer;
	};

	void EndStance ( class AActor* inActor, class UWillowDialogEmoteDefinition* InEmote );
	void BeginStance ( class AActor* inActor, class UWillowDialogEmoteDefinition* InEmote );
	void StaticHideEchoPortrait ( class UGearboxDialogInterface* DialogContext, class UWillowDialogEmoteDefinition* InEmote, class AWillowPlayerController* InInstigator );
	void StaticShowEchoPortrait ( class UGearboxDialogInterface* DialogContext, class UWillowDialogEmoteDefinition* InEmote, class AWillowPlayerController* InInstigator );
};

UClass* UWillowDialogNameTag::pClassPointer = NULL;

// Class WillowGame.WillowDialogVar_InstanceData
// 0x0008 (0x0078 - 0x0070)
class UWillowDialogVar_InstanceData : public UGearboxDialogVariable
{
public:
	struct FName                                       InstanceDataName;                                 		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4510 ];

		return pClassPointer;
	};

};

UClass* UWillowDialogVar_InstanceData::pClassPointer = NULL;

// Class WillowGame.WillowDialogVar_Passenger
// 0x0000 (0x0070 - 0x0070)
class UWillowDialogVar_Passenger : public UGearboxDialogVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4512 ];

		return pClassPointer;
	};

};

UClass* UWillowDialogVar_Passenger::pClassPointer = NULL;

// Class WillowGame.WillowDownloadableContentManager
// 0x01A8 (0x0300 - 0x0158)
class UWillowDownloadableContentManager : public UDownloadableContentManager
{
public:
	TArray< class UDownloadablePackageDefinition* >    ContentPackages;                                  		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableContentDefinition* >    AllContent;                                       		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableExpansionDefinition* >  Expansions;                                       		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableCharacterDefinition* >  Characters;                                       		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableVehicleDefinition* >    Vehicles;                                         		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableItemSetDefinition* >    Items;                                            		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableCustomizationSetDefinition* > Customizations;                                   		// 0x01A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableAssetLibraryDefinition* > AssetLibraries;                                   		// 0x01AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AsyncPackageLoadsPending;                         		// 0x01B8 (0x0004) [0x0000000000000000]              
	TArray< class UObjectReferencer* >                 DlcFullyLoadedPackageReferencers;                 		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      CurrentInstallState;                              		// 0x01C8 (0x0001) [0x0000000000000000]              
	TArray< struct FString >                           LoadedPackages;                                   		// 0x01CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01D8 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowDownloadableContentManager.LoadedAudioPackageToId
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0214 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowDownloadableContentManager.PackageDefToContentState
	struct FDlcCompatibilityData                       CachedCompatibilityInfo;                          		// 0x0250 (0x0010) [0x0000000000000000]              
	struct FDlcCompatibilityData                       CachedSimplePackageLicenseInfo;                   		// 0x0260 (0x0010) [0x0000000000000000]              
	TArray< struct FSeasonPassOfferUnion >             SeasonPassOfferIds;                               		// 0x0270 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSeasonPassPackageCount >           SeasonPassPackageCounts;                          		// 0x027C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                NewOfferVersion;                                  		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      NewOfferIds;                                      		// 0x028C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDLCMissionData >                   DLCMissions;                                      		// 0x0298 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FCompatibilityVersionInfo                   OnlineCompatibilityInfo;                          		// 0x02A4 (0x0014) [0x0000000000004000]              ( CPF_Config )
	float                                              CompatibilityContentInstallInterval;              		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              NextDlcContentInstallNotificationTimeRemaining;   		// 0x02BC (0x0004) [0x0000000000000000]              
	TArray< struct FGoldenKeySource >                  GoldenKeyCollection;                              		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UDownloadableBalanceModifierDefinition* > DownloadableBalanceModifiers;                     		// 0x02CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTaggedMarketplaceContent >         TaggedDLC;                                        		// 0x02D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            FastTravelAccessibilityTimes;                     		// 0x02E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FDlcCompatibilityDataEx                     CachedExtendedLicenseInfo;                        		// 0x02F0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4514 ];

		return pClassPointer;
	};

	int GetSeasonPassPackageCount ( int SeasonPassId );
	bool HasSeasonPassContentToInstall ( unsigned long bPreOrder );
	bool HasFutureSeasonPassContentToInstall ( unsigned long bPreOrder );
	int GetNumberOfLicensedLevelCapUpgrades ( );
	TArray< struct FGoldenKeySource > GetGoldenKeys ( );
	void AddGoldenKey ( unsigned char InSourceId, unsigned char InNumKeys );
	bool StaticIsMarketplaceOfferType ( unsigned char InOfferType, int InOfferCategory );
	int GetCompatibilityPackOfferId ( );
	struct FMarketplaceOfferDownloadState GetCompatibilityPackInstalledState ( );
	bool NeedsCompatibilityPack ( );
	bool HasCompatibilityData ( );
	void ResetDlcCompatInstallRemindTimer ( );
	void RemasterRefresh ( );
	void TriggerRefreshCompleteDelegates ( );
	void TriggerRefreshComplete ( );
	bool IsNewOffer ( int OfferId );
	int GetFreeOfferAssociatedWithPaidOffer ( int PaidOfferId );
	bool OfferBelongsToSeasonPass ( int OfferId, int* SeasonPassOfferId );
	struct FDlcContentId StaticGetDlcContentIdForCurrentMap ( unsigned long bForClientConnectInfo );
	struct FDlcContentId StaticGetDlcContentIdForMap ( struct FName MapName );
	bool ValidateInstalledContentReachability ( );
	class UDownloadableContentDefinition* GetDownloadableContentDefinitionFromDlcContentId ( struct FDlcContentId FullContentId );
	class UDownloadableContentDefinition* GetDownloadableContentDefinitionFromId ( int PackageId, int ContentId );
	class UDownloadablePackageDefinition* GetDownloadablePackageDefinitionFromId ( int PackageId );
	class UDownloadablePackageDefinition* GetDownloadablePackageDefinitionFromDLCName ( struct FString DLCName );
	struct FString GetDlcIniPath ( );
	bool IsContentInstalled ( class UDownloadableContentDefinition* DownloadableContentDef );
	bool IsContentLicensed ( class UDownloadableContentDefinition* DownloadableContentDef, class APlayerController* Controller );
	bool IsPackageFullyInstalled ( class UDownloadablePackageDefinition* DownloadablePackageDef );
	bool IsPackageFullyLicensed ( class UDownloadablePackageDefinition* DownloadablePackageDef );
	class UDownloadableExpansionDefinition* FindExpansionForMap ( struct FName MapName );
	class ULevelTravelStationDefinition* FindMatchingDlcLevelTravelDestination ( class ULevelTravelStationDefinition* Source );
};

UClass* UWillowDownloadableContentManager::pClassPointer = NULL;

// Class WillowGame.WillowDynamicNavMeshConnectionPoint
// 0x0054 (0x0298 - 0x0244)
class AWillowDynamicNavMeshConnectionPoint : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshSpecialMove;                  		// 0x0244 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FDynamicNavMeshConnection >         Connections;                                      		// 0x0248 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AWillowDynamicNavMeshConnectionPoint* > PointsThatConnectToMe;                            		// 0x0254 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FBasedPosition                              PositionOnNavMesh;                                		// 0x0260 (0x0034) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bIsOnValidNavMesh : 1;                            		// 0x0294 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bEnabled : 1;                                     		// 0x0294 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4516 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* AWillowDynamicNavMeshConnectionPoint::pClassPointer = NULL;

// Class WillowGame.WillowDynamicNavMeshConnectionPointRenderingComponent
// 0x0008 (0x0218 - 0x0210)
class UWillowDynamicNavMeshConnectionPointRenderingComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConnectionValidColor;                             		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ConnectionInvalidColor;                           		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4518 ];

		return pClassPointer;
	};

};

UClass* UWillowDynamicNavMeshConnectionPointRenderingComponent::pClassPointer = NULL;

// Class WillowGame.WillowDynamicPathBlockingVolume
// 0x0014 (0x01D0 - 0x01BC)
class AWillowDynamicPathBlockingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshObstacle;                     		// 0x01BC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bEnabled : 1;                                     		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UPawnAllegiance* >                   BlockedAllegiances;                               		// 0x01C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4520 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* AWillowDynamicPathBlockingVolume::pClassPointer = NULL;

// Class WillowGame.WillowEffectCoordinator
// 0x0078 (0x00B4 - 0x003C)
class UWillowEffectCoordinator : public UObject
{
public:
	TArray< struct FName >                             SupportedEffects;                                 		// 0x003C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                ManagedParticlesReserveLength;                    		// 0x0048 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ManagedAudioReserveLength;                        		// 0x004C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ExternalComponentsReserveLength;                  		// 0x0050 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FCoordinatedEffectProcess >         Processes;                                        		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UActorComponent* >                   ExternalComponents;                               		// 0x0060 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          ManagedParticles;                                 		// 0x006C (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAkComponent* >                      ManagedAudio;                                     		// 0x0078 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< int >                                      ManagedAudioFreeList;                             		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ManagedParticlesFreeList;                         		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ExternalComponentsFreeList;                       		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnEffectComplete__Delegate;                     		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4522 ];

		return pClassPointer;
	};

	void StaticHandleReplicatedEffect ( class UObject* EffectOwner, struct FName IgnoreInstanceData, struct FReplicatedCoordinatedEffect* Effect );
	bool HasEffect ( class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner );
	bool PopEffect ( class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner, unsigned long IncludeChainedEffects );
	float PushEffect ( class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner, float StartingPercent, struct FName IgnoreInstanceData, unsigned long bViaReplication, struct FScriptDelegate EffectCompleteDelegate );
	bool PopMutex ( class UObject* Target, struct FName MutexName );
	void GetBaseMaterials ( class UMeshComponent* Mesh, TArray< class UMaterialInterface* >* MaterialResult, int* CurrentBaseIndex );
	void PopAllEffects ( class UObject* Target );
	void OnEffectComplete ( class UObject* Target );
};

UClass* UWillowEffectCoordinator::pClassPointer = NULL;

// Class WillowGame.WillowElevator
// 0x0028 (0x021C - 0x01F4)
class AWillowElevator : public AInterpActor
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMoving : 1;                                      		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                FloorIndex;                                       		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                DestFloorIndex;                                   		// 0x01FC (0x0004) [0x0000000000000000]              
	int                                                InitialFloorIndex;                                		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             Floors;                                           		// 0x0204 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AWillowElevatorButton* >             Buttons;                                          		// 0x0210 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4524 ];

		return pClassPointer;
	};

	void ButtonsGoToInUseState ( );
	void eventButtonsGoToEnabledState ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void SetDestFloorIndex ( int NewDestFloorIndex, class AActor* InInstigator );
	void eventButtonPushed ( unsigned char Usage, int CallFloor, class AActor* User );
	void TryGoToInitialState ( );
	bool ChildEncroachingOn ( class AInterpActor* Child, class AActor* Other );
	void PostBeginPlay ( );
};

UClass* AWillowElevator::pClassPointer = NULL;

// Class WillowGame.WillowElevatorRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowElevatorRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4526 ];

		return pClassPointer;
	};

};

UClass* UWillowElevatorRenderingComponent::pClassPointer = NULL;

// Class WillowGame.WillowEmitter
// 0x0008 (0x019C - 0x0194)
class AWillowEmitter : public AEmitter
{
public:
	float                                              NetCullDistanceSquared;                           		// 0x0194 (0x0004) [0x0000000000000000]              
	unsigned long                                      bOwnerNoSeeEmitter : 1;                           		// 0x0198 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4528 ];

		return pClassPointer;
	};

	void SetOwnerNoSeeEmitter ( unsigned long bNewOwnerNoSeeEmitter );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowEmitter::pClassPointer = NULL;

// Class WillowGame.StatusEffectReplicatedEmitter
// 0x001C (0x01B8 - 0x019C)
class AStatusEffectReplicatedEmitter : public AWillowEmitter
{
public:
	class UParticleSystem*                             EmitterTemplate;                                  		// 0x019C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ServerLifeSpan;                                   		// 0x01A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIgnite : 1;                                      		// 0x01A4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bCorrosive : 1;                                   		// 0x01A4 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bShock : 1;                                       		// 0x01A4 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bAmp : 1;                                         		// 0x01A4 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bSlow : 1;                                        		// 0x01A4 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bHealing : 1;                                     		// 0x01A4 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	float                                              RandomTTL;                                        		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              AccumulatedTime;                                  		// 0x01AC (0x0004) [0x0000000000000000]              
	class UIStatusEffectTarget*                        BaseTarget;                                       		// 0x01B0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x01B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4530 ];

		return pClassPointer;
	};

	void eventTearOff ( );
	void ChooseRandomTTL ( );
	void eventBaseChange ( );
	void eventTornOff ( );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
	bool IsEnabled ( unsigned char Type );
	struct FName GetParameterName ( unsigned char Type );
	void ResetDistributionForEffect ( unsigned char Type, float Distribution );
	void eventUpdateDistributions ( );
	int GetEffectCount ( );
	void UpdateEffect ( unsigned char Type, unsigned long bEnabled );
	void eventReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
};

UClass* AStatusEffectReplicatedEmitter::pClassPointer = NULL;

// Class WillowGame.WillowExperiencePipeline
// 0x0000 (0x003C - 0x003C)
class UWillowExperiencePipeline : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4532 ];

		return pClassPointer;
	};

	void AwardCombatExperienceToParty ( float ExperiencePoints, class AWillowPlayerController* Killer, class AActor* KilledActor );
	float CalculateExperiencePointsForKill ( class AWillowPlayerController* Killer, class AActor* KilledActor, unsigned long bFatalBlowWasCriticalHit, class UClass* FatalBlowDamageSource, class UDamageTypeDefinition* FatalBlowDamageTypeDefinition );
};

UClass* UWillowExperiencePipeline::pClassPointer = NULL;

// Class WillowGame.WillowExposureUtilityStrategy
// 0x0000 (0x003C - 0x003C)
class UWillowExposureUtilityStrategy : public UExposureUtilityStrategy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4534 ];

		return pClassPointer;
	};

};

UClass* UWillowExposureUtilityStrategy::pClassPointer = NULL;

// Class WillowGame.WillowForcedReachSpec
// 0x0000 (0x0084 - 0x0084)
class UWillowForcedReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4536 ];

		return pClassPointer;
	};

	bool eventDoSpecialMove ( class AWillowPawn* WP );
};

UClass* UWillowForcedReachSpec::pClassPointer = NULL;

// Class WillowGame.WillowGameEngine
// 0x0048 (0x0814 - 0x07CC)
class UWillowGameEngine : public UGearboxEngine
{
public:
	struct FPointer                                    VfTable_ISparkUpdateCallback;                     		// 0x07CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     SourceMapName;                                    		// 0x07D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DestMapName;                                      		// 0x07DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastNonFakeEntrySourceMapName;                    		// 0x07E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      LevelChangeState;                                 		// 0x07F4 (0x0001) [0x0000000000000000]              
	TArray< struct FString >                           FullyLoadedIniPackages;                           		// 0x07F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bPauseLostFocusWindowed : 1;                      		// 0x0804 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bWasPaused : 1;                                   		// 0x0804 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsTickingCIV : 1;                                		// 0x0804 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCIVEnabled : 1;                                  		// 0x0804 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              TimeBetweenCIVTicks;                              		// 0x0808 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCIVCheckTime;                                 		// 0x080C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    OverlappedCIV;                                    		// 0x0810 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4538 ];

		return pClassPointer;
	};

	bool FastTravelIsAccessibleForTime ( unsigned char InAccessibilityTime );
	void CheckCIV ( );
	class APersistentTransitionLandmark* eventGetTransitionLandmark ( struct FString Source, struct FString Dest );
	void eventTeleportPlayer ( class APersistentTransitionLandmark* Landmark, class AWillowPlayerPawn* PlayerPawn );
	void eventUnpauseForLevelLoad ( class AGameInfo* GI );
	void eventPauseForLevelLoad ( class AGameInfo* GI, class APlayerController* Authority );
	bool CanUnpause ( );
};

UClass* UWillowGameEngine::pClassPointer = NULL;

// Class WillowGame.WillowCoopGameInfo
// 0x0010 (0x0624 - 0x0614)
class AWillowCoopGameInfo : public AWillowGameInfo
{
public:
	TArray< class ATeamInfo* >                         Teams;                                            		// 0x0614 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSomeoneJustJoined : 1;                           		// 0x0620 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4540 ];

		return pClassPointer;
	};

	void InitializeTeams ( );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void eventPostSeamlessTravel ( );
	void DisableFakePauseFor ( class APlayerController* PC );
	bool OverrideCanUnpauseInternalUI ( );
	void ProcessLeviathanPlayerLeft ( class AController* PC );
	void ProcessLeviathanPlayerJoined ( class APlayerController* PC );
	unsigned char GetLeviathanPlayerType ( class AWillowPlayerController* PC );
	void UpdatePartyLeader ( );
	void Logout ( class AController* Exiting );
	void eventPostLogin ( class APlayerController* NewPlayer );
	bool AllowPausing ( class APlayerController* PC );
	bool IsHumanControlled ( class APawn* P );
	bool eventShouldOverrideDamageTypeForHealing ( class UDamageTypeDefinition* DamageTypeDef );
	class UDamageTypeDefinition* eventGetHealingDamageTypeDefinition ( );
	bool ConvertDamageToHealing ( float Damage, class APawn* DamagedPawn, class AController* DamageInstigator, struct FVector HitLocation, class UClass* DamageSource, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, float* Damage, struct FVector* Momentum );
	bool IsFriendlyFire ( class APawn* injured, class UITargetable* InstigatingTargetable );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	unsigned char PickTeam ( unsigned char Num, class AController* C );
	void CreateTeam ( int TeamIndex, struct FString TeamName );
};

UClass* AWillowCoopGameInfo::pClassPointer = NULL;

// Class WillowGame.WillowGameReplicationInfo
// 0x0280 (0x046C - 0x01EC)
class AWillowGameReplicationInfo : public AGameReplicationInfo
{
public:
	struct FActiveWaypointData                         ActiveWaypoints[ 0x6 ];                           		// 0x01EC (0x0090) [0x0000000000000020]              ( CPF_Net )
	struct FActiveAreaWaypointData                     ActiveAreaWaypoints[ 0x4 ];                       		// 0x027C (0x0050) [0x0000000000000020]              ( CPF_Net )
	class AWillowRadarManager*                         RadarMgr;                                         		// 0x02CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AStationTeleporterDestination*               ActiveRespawnCheckpointTeleportActor;             		// 0x02D0 (0x0004) [0x0000000000000000]              
	unsigned char                                      FastTravelLocationsBitfield[ 0x10 ];              		// 0x02D4 (0x0010) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CachedBossHasShield;                              		// 0x02E4 (0x0001) [0x0000000000000000]              
	unsigned char                                      bIsNPCAllyEnabled[ 0x2 ];                         		// 0x02E5 (0x0002) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      MatchmakingState;                                 		// 0x02E7 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      StartGameState;                                   		// 0x02E8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FName >                             FastTravelLocations;                              		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AWillowVersusDuelInfo*                       PotentialDuels[ 0x6 ];                            		// 0x02F8 (0x0018) [0x0000000000000020]              ( CPF_Net )
	class AWillowVersusDuelInfo*                       ActiveDuels[ 0x2 ];                               		// 0x0310 (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              TimeOfDay;                                        		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              DayNightCycleRate;                                		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DayNightCycleRateBaseValue;                       		// 0x0320 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                DayNightCycleRateModifierStack;                   		// 0x0324 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SecondsUntilShopsReset;                           		// 0x0330 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ShopTimerRate;                                    		// 0x0334 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              bAnyPlayerAttemptedFastTravel;                    		// 0x0338 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              bAnyPlayerEnteredVehicle;                         		// 0x033C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                CurrentPlaythrough;                               		// 0x0340 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PlaythroughOverride;                              		// 0x0344 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FName >                             ReplicatedClientFlags;                            		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AMissionTracker*                             MissionTracker;                                   		// 0x0354 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowVehicle*                              PlayerSpawnedVehicles[ 0x2 ];                     		// 0x0358 (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      HardcoreMode : 1;                                 		// 0x0360 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bHasBossBar : 1;                                  		// 0x0360 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      ReplicatedBossHasShield : 1;                      		// 0x0360 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      DisplayedBossHasShield : 1;                       		// 0x0360 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPlayersSoundLikeJack : 1;                        		// 0x0360 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	int                                                StartGameTimer;                                   		// 0x0364 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowAIPawn*                               BossPawn;                                         		// 0x0368 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     BossName;                                         		// 0x036C (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	int                                                BossLevel;                                        		// 0x0378 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedBossHealth;                             		// 0x037C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedBossShield;                             		// 0x0380 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              CachedBossHealth;                                 		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              CachedBossShield;                                 		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              DisplayedBossHealth;                              		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              DisplayedBossShield;                              		// 0x0390 (0x0004) [0x0000000000000000]              
	class AWillowAIPawn*                               NPCAllyPawn[ 0x2 ];                               		// 0x0394 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     NPCAllyName[ 0x2 ];                               		// 0x039C (0x0018) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FVector                                     NPCAllyLocation[ 0x2 ];                           		// 0x03B4 (0x0018) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FScriptDelegate >                   PlayerRemovedDelegates;                           		// 0x03CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   PlayerNameUpdatedDelegates;                       		// 0x03D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   PlayerUidUpdatedDelegates;                        		// 0x03E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   PlayerCharacterClassUpdatedDelegates;             		// 0x03F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   PlayerExpLevelUpdatedDelegates;                   		// 0x03FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                OverpowerLevelModifier;                           		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FScriptDelegate >                   MatchmakingStateChangedDelegates;                 		// 0x040C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWillowSeqAct_InterpMenu*                    MenuMatinee;                                      		// 0x0418 (0x0004) [0x0000000000000000]              
	class UAkState*                                    MusicAkState;                                     		// 0x041C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UNameListDefinition*                         NameListDef;                                      		// 0x0420 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FScriptDelegate                             __OnPlayerRemoved__Delegate;                      		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerNameUpdated__Delegate;                  		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerUidUpdated__Delegate;                   		// 0x043C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerCharacterClassUpdated__Delegate;        		// 0x0448 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerExpLevelUpdated__Delegate;              		// 0x0454 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMatchmakingStateChanged__Delegate;            		// 0x0460 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4542 ];

		return pClassPointer;
	};

	void NotifyPlaythroughChanged ( );
	void NotifyMatchmakingStateChanged ( );
	void ClearMatchmakingStateChangedDelegate ( struct FScriptDelegate MatchmakingStateChangedDelegate );
	void AddMatchmakingStateChangedDelegate ( struct FScriptDelegate MatchmakingStateChangedDelegate );
	void OnMatchmakingStateChanged ( unsigned char NewState );
	bool IsNighttime ( );
	bool IsDaytime ( );
	void ClearNPCAllies ( );
	void UpdateNPCAlliesInfo ( );
	int FindAvailableNPCAllySlot ( class AWillowAIPawn* NPCAllyActor );
	int FindNPCAllyIndex ( class AWillowAIPawn* NPCAllyActor );
	void InitNPCAlly ( unsigned long bEnable, class AWillowAIPawn* NPCAllyActor );
	void UpdateBossBarInfo ( );
	void InitBossBar ( unsigned long bEnable, class AWillowAIPawn* BossActor );
	void NotifyPlayerExpLevelUpdated ( class AWillowPlayerReplicationInfo* WPRI );
	void TriggerPlayerExpLevelUpdatedDelegates ( class AWillowPlayerReplicationInfo* WPRI );
	void ClearPlayerExpLevelUpdatedDelegate ( struct FScriptDelegate PlayerExpLevelUpdatedDelegate );
	void AddPlayerExpLevelUpdatedDelegate ( struct FScriptDelegate PlayerExpLevelUpdatedDelegate );
	void OnPlayerExpLevelUpdated ( class AWillowPlayerReplicationInfo* WPRI );
	void NotifyPlayerCharacterClassUpdated ( class AWillowPlayerReplicationInfo* WPRI );
	void TriggerPlayerCharacterClassUpdatedDelegates ( class AWillowPlayerReplicationInfo* WPRI );
	void ClearPlayerCharacterClassUpdatedDelegate ( struct FScriptDelegate PlayerCharacterClassUpdatedDelegate );
	void AddPlayerCharacterClassUpdatedDelegate ( struct FScriptDelegate PlayerCharacterClassUpdatedDelegate );
	void OnPlayerCharacterClassUpdated ( class AWillowPlayerReplicationInfo* WPRI );
	void NotifyPlayerUidUpdated ( class APlayerReplicationInfo* PRI );
	void TriggerPlayerUidUpdatedDelegates ( class APlayerReplicationInfo* PRI );
	void ClearPlayerUidUpdatedDelegate ( struct FScriptDelegate PlayerUidUpdatedDelegate );
	void AddPlayerUidUpdatedDelegate ( struct FScriptDelegate PlayerUidUpdatedDelegate );
	void OnPlayerUidUpdated ( class APlayerReplicationInfo* PRI );
	void NotifyPlayerNameUpdated ( class APlayerReplicationInfo* PRI );
	void TriggerPlayerNameUpdatedDelegates ( class APlayerReplicationInfo* PRI );
	void ClearPlayerNameUpdatedDelegate ( struct FScriptDelegate PlayerNameUpdatedDelegate );
	void AddPlayerNameUpdatedDelegate ( struct FScriptDelegate PlayerNameUpdatedDelegate );
	void OnPlayerNameUpdated ( class APlayerReplicationInfo* PRI );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	void TriggerPlayerRemovedDelegates ( );
	void ClearPlayerRemovedDelegate ( struct FScriptDelegate PlayerRemovedDelegate );
	void AddPlayerRemovedDelegate ( struct FScriptDelegate PlayerRemovedDelegate );
	void OnPlayerRemoved ( );
	bool ClientFlagGet ( struct FName ClientFlag );
	void ClientFlagSet ( struct FName ClientFlag, unsigned long bEnable );
	void ClientInitClientFlags ( );
	void InitClientFlags ( class AWillowPlayerController* WPC );
	bool IsStationInList ( class UTravelStationDefinition* TravelLocation );
	void AddFastTravelLocation ( class UTravelStationDefinition* TravelLocation );
	bool InColiseumGameplayMap ( );
	bool CacheMenuMatinee ( );
	void PostBeginPlay ( );
	class UWillowVersusDuelGlobals* GetDuelGlobals ( );
	void UpdateJackVoiceModulation ( );
	void SetPlayersSoundLikeJack ( unsigned long InPlayersSoundLikeJack );
	void NotifyMissionTrackerCinematicModeChanged ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ClearFastTravelLocations ( );
	int GetCurrPlaythrough ( );
	void SetPlaythroughOverride ( class AWillowPlayerController* PrimaryWPC, int InPlaythroughOverride );
	void SetCurrentPlaythrough ( class AWillowPlayerController* PrimaryWPC, int InCurrPlaythrough );
};

UClass* AWillowGameReplicationInfo::pClassPointer = NULL;

// Class WillowGame.WillowGameViewportClient
// 0x015C (0x0278 - 0x011C)
class UWillowGameViewportClient : public UGameViewportClient
{
public:
	class UWillowUIInteraction*                        ViewportUI;                                       		// 0x011C (0x0004) [0x0000000000000000]              
	unsigned long                                      bCheckedEntry : 1;                                		// 0x0120 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMainMenuMousePressed : 1;                        		// 0x0120 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UTexture2D*                                  LoadBackground;                                   		// 0x0124 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  LoadingImage;                                     		// 0x0128 (0x0004) [0x0000000000000000]              
	struct FSubtitleProfile                            SubtitleProfileDefault;                           		// 0x012C (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FSubtitleProfile                            SubtitleProfileSplitScreenVertical;               		// 0x013C (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FSubtitleProfile                            SubtitleProfileSplitScreenHorizontal;             		// 0x014C (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FSubtitleProfile                            SubtitleProfileCinematic;                         		// 0x015C (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LevelActionMessages[ 0x6 ];                       		// 0x016C (0x0048) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FLoginState                                 SavedLoginState[ 0x4 ];                           		// 0x01B4 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLoginState                                 CurrentLoginState[ 0x4 ];                         		// 0x01F4 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGamepadState                               Gamepads[ 0x4 ];                                  		// 0x0234 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      WaitingOnDeviceSelectionResults[ 0x4 ];           		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WaitingOnDeviceRemovalNotification[ 0x4 ];        		// 0x0248 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastKnownProfileSaveCount[ 0x4 ];                 		// 0x0258 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastKnownChallengeRank[ 0x4 ];                    		// 0x0268 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4544 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void TryNotifyDeviceSelectionComplete ( int ControllerId );
	void DeviceSelectionDone ( unsigned long bWasSuccessful );
	void NotifyDeviceSelectionStarted ( unsigned char ControllerId );
	void SetPCSplitscreenEnabled ( unsigned long bEnabled );
	bool IsPCSplitscreenEnabled ( );
	bool PlatformSupportsSplitscreen ( );
	void OnEndGameForReturnToTitleComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ReturnToTitleScreenNoPC ( );
	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	bool ShouldIgnoreNetworkErrors ( );
	bool IsWidescreen ( );
	void SplitScreenLeave ( );
	bool CanSplitScreenLeave ( );
	void eventUpdateSplitscreenConfiguration ( );
	class ULocalPlayer* eventSplitScreenJoin ( int ControllerId, unsigned long SpawnActor, struct FString* OutError );
	bool CanSplitScreenJoin ( );
	void RenderHeader ( class UCanvas* Canvas );
	void eventPostRender ( class UCanvas* Canvas );
	void eventGameSessionEnded ( );
	bool AreHudMoviesVisible ( );
	void eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos );
	void UpdateActiveSplitscreenType ( );
	void eventSetSplitscreenConfiguration ( unsigned char SplitType );
	bool HasLoginStateChanged ( unsigned char LocalUserNum );
	void SaveLoginState ( unsigned char LocalUserNum );
	void InitializeCurrentLoginState ( );
	void NotifyLoginChanged ( unsigned char LocalUserNum );
	void RemovedDlcDependantMU ( );
	void RemovedDlcDependantMUFrontend ( );
	void TryNotifyStorageDeviceChanged ( );
	void NotifyStorageDeviceChange ( );
	bool ReturnToTitleForDlcInstall_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void RegisterMarketingUnlocksFromDlc ( );
	void NotifyDlcRefreshComplete ( );
	bool eventRemovePlayer ( class ULocalPlayer* ExPlayer );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	bool InputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void eventDlcManagerCreatedInit ( );
	bool eventInit ( struct FString* OutError );
	void OpenMapMenu ( );
};

UClass* UWillowGameViewportClient::pClassPointer = NULL;

// Class WillowGame.WillowGlobals
// 0x00EC (0x01E0 - 0x00F4)
class UWillowGlobals : public UGearboxGlobals
{
public:
	TArray< class UPlayerClassIdentifierDefinition* >  PlayerClassIdentifiers;                           		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UPlayerNameIdentifierDefinition* >   PlayerNameIdentifiers;                            		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bEnableSpeech : 1;                                		// 0x010C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsDefaultWorldBodyAvailable : 1;                 		// 0x010C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      LoadingMovieShouldPlayToEnd : 1;                  		// 0x010C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bClassDropsInitialized : 1;                       		// 0x010C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class UWorldBody*                                  DefaultWorldBodyStandIn;                          		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UDamagePipeline* >                   DamagePipelinePool;                               		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWillowAutoAimStrategyDefinition*            AutoAimDefinition;                                		// 0x0120 (0x0004) [0x0000000000000000]              
	class UPlayerTrainingMessageListDefinition*        PlayerTrainingMessages;                           		// 0x0124 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     DefaultGlobalsDefinitionName;                     		// 0x0128 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UFastTravelStationsLookup*                   MasterFastTravelStationList;                      		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ULevelDependencyList*                        MasterLevelDependencyList;                        		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPawnRelevanceUtility*                       TheRelevanceUtility;                              		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      TheRelevanceUtilityClass;                         		// 0x0140 (0x0004) [0x0000000000000000]              
	TArray< class AWillowInteractiveObject* >          ClientInteractiveObjects;                         		// 0x0144 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLoadingMovieExceptionInfo >        LoadingMovieExceptions;                           		// 0x0150 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ULcdHelper*                                  TheLCDHelper;                                     		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowEffectCoordinator*                    TheEffectsCoordinator;                            		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowObstacleUtility*                      TheObstacleUtility;                               		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowCustomizationManager*                 TheCustomizationManager;                          		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPlayerPawnDataManager*                ThePlayerPawnDataManager;                         		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkBank*                                     PersistentLevelSFXBank;                           		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkBank*                                     PersistentLevelVoiceBank;                         		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AWillowProjectile* >                 ActiveHomingProjectileList;                       		// 0x0178 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AWillowPickup* >                     PickupList;                                       		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AVehicleLifetimeManager*                     TheVehicleLifetimeManager;                        		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UVehicleCrewAnimSetLookupTable*              AggregatedVehicleCrewAnimSetTable;                		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AWillowBoundaryTurret* >             BoundaryTurretList;                               		// 0x0198 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UNPCLoadBalancer*                            TheNPCLoadBalancer;                               		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDamageOverTimeManager*                      TheDamageOverTimeManager;                         		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AWillowSpectatorPoint* >             SpectatorPointList;                               		// 0x01AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FCurrencyPresentation >             KnownCurrencies;                                  		// 0x01B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAssetLibraryManager*                        AssLibMan;                                        		// 0x01C4 (0x0004) [0x0000000000000000]              
	TArray< class UDLCLegacyPlayerClassIdentifierDefinition* > LegacyPlayerClassIdentifiers;                     		// 0x01C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UBalanceModifierDefinition* >        PlayThroughBasedBalanceModifiers;                 		// 0x01D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4546 ];

		return pClassPointer;
	};

	void FindCurrencies ( );
	void FindCurrenciesIn ( class UCurrencyListDefinition* CurrencyList, TArray< struct FCurrencyPresentation >* Currencies );
	void AddBoundaryTurret ( class AWillowBoundaryTurret* OneTurret );
	class UDamageOverTimeManager* GetDamageOverTimeManager ( );
	class UNPCLoadBalancer* GetNPCLoadBalancer ( );
	class UGameReleaseDefinition* GetCurrentGameReleaseDef ( );
	struct FString GetLocalizedDamageType ( unsigned char DamageType );
	struct FString GetLocalizedDamageCauser ( unsigned char DamageCauserType );
	bool CheckIfSpawnWillFail ( class UClass* SpawnClass, struct FVector SpawnLocation );
	struct FString PresetGetCaption ( struct FName PresetName, struct FName KeyName );
	bool ApplyControllerPreset ( struct FName PresetName, class UWillowPlayerInput* WPI );
	class AWillowSpectatorPoint* GetPrevSpectatorPoint ( class AWillowSpectatorPoint* CurrentPoint );
	class AWillowSpectatorPoint* GetNextSpectatorPoint ( class AWillowSpectatorPoint* CurrentPoint );
	class AWillowSpectatorPoint* GetFirstSpectatorPoint ( );
	void RemoveSpectatorPoint ( class AWillowSpectatorPoint* SpecPoint );
	void AddSpectatorPoint ( class AWillowSpectatorPoint* SpecPoint );
	void SetColorBlindMode ( int InColorBlind );
	int GetColorBlindMode ( );
	void RemovePickup ( class AWillowPickup* inPickup );
	void AddPickup ( class AWillowPickup* inPickup );
	void RemoveActiveHomingProjectile ( class AWillowProjectile* HomingProjectile );
	void AddActiveHomingProjectile ( class AWillowProjectile* HomingProjectile );
	class UDominantDirectionalLightComponent* GetTimeOfDayDominantDirectionalLightComponent ( );
	struct FString ResolveCustomMarkupString ( struct FString StringToResolve );
	class AVehicleLifetimeManager* GetVehicleLifetimeManager ( );
	class UWillowPlayerPawnDataManager* GetPlayerPawnDataManager ( );
	class UWillowCustomizationManager* GetCustomizationManager ( );
	void GetUISortedValidPlayerNameIdentifiers ( unsigned long bFilterUnownedDlcCharacters, TArray< class UPlayerNameIdentifierDefinition* >* OutPlayerNameIdentifiers );
	class UPlayerSaveGame* GetDefaultPlayerSaveGame ( struct FString CharacterName );
	class UPlayerNameIdentifierDefinition* GetPlayerNameIdentifierDefinition ( struct FString CharacterName );
	class UPlayerClassIdentifierDefinition* GetPlayerClassIdentifierDefinition ( struct FString ClassName );
	TArray< class UChallengeDefinition* > GetPlayerChallenges ( unsigned long bIncludeDlcChallenges );
	class ULcdHelper* GetTheLCDHelper ( );
	void ToggleUnlockCode ( int UnlockCode );
	bool IsCodeUnlocked ( int UnlockCode );
	void SetLoadingMovieFinished ( );
	class UPawnRelevanceUtility* GetPawnRelevanceUtility ( );
	class ULevelDependencyList* GetLevelDependencyList ( );
	class UFastTravelStationsLookup* GetFastTravelStationsLookup ( );
	class UWillowEffectCoordinator* GetEffectCoordinator ( );
	float GetGlobalFallingDamageScale ( class UObject* ContextSource );
	float GetGlobalAIRocketWeaponDamageScale ( );
	float GetGlobalAIAssaultWeaponDamageScale ( );
	float GetGlobalAISniperWeaponDamageScale ( );
	float GetGlobalAISmgWeaponDamageScale ( );
	float GetGlobalAIShotgunWeaponDamageScale ( );
	float GetGlobalAIPistolWeaponDamageScale ( );
	float GetGlobalAIWeaponDamageScale ( );
	float GetGlobalAIDamageScale ( class UObject* DamageInstigatorContextSource );
	class UGlobalsDefinition* GetGlobalsDefinition ( );
	void ReleaseDamagePipelineObject ( class UDamagePipeline* Pipeline );
	class UDamagePipeline* GetDamagePipelineObject ( );
	void DeleteWorldBodyStandIn ( class UWorldBody** StandIn );
	class UWorldBody* CreateWorldBodyStandIn ( );
	class UWillowSaveGameManager* GetWillowSaveGameManager ( );
	class UWillowGlobals* GetWillowGlobals ( );
	void RemoveInteractiveObject ( class AWillowInteractiveObject* Object );
	void AddInteractiveObject ( class AWillowInteractiveObject* Object );
};

UClass* UWillowGlobals::pClassPointer = NULL;

// Class WillowGame.WillowHUD
// 0x02B4 (0x04D8 - 0x0224)
class AWillowHUD : public AHUD
{
public:
	unsigned long                                      bPawnInspectorUsesAIDebugCam : 1;                 		// 0x0224 (0x0004) [0x0000000000044002] [0x00000001] ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowDlcVersionErrors : 1;                        		// 0x0224 (0x0004) [0x0000000000044002] [0x00000002] ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowDlcNeedsEnumerationError : 1;                		// 0x0224 (0x0004) [0x0000000000044002] [0x00000004] ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowBros : 1;                                    		// 0x0224 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bShowBuildInfo : 1;                               		// 0x0224 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bShowHUDRestoreValue : 1;                         		// 0x0224 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bAIInspectorEnabled : 1;                          		// 0x0224 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bStatusEffectInspectorEnabled : 1;                		// 0x0224 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShowHosEnabled : 1;                              		// 0x0224 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bShowViewModelAnimDebug : 1;                      		// 0x0224 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bShowConnectionWarning : 1;                       		// 0x0224 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bAutoAimDebugEnabled : 1;                         		// 0x0224 (0x0004) [0x0000000000000000] [0x00000800] 
	float                                              DlcVersionErrorDisplayDuration;                   		// 0x0228 (0x0004) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	float                                              DlcVersionErrorDisplayStartTime;                  		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayerInfoHeight;                                 		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerInfoMaxDist;                                		// 0x0234 (0x0004) [0x0000000000000000]              
	class APawn*                                       PawnOwner;                                        		// 0x0238 (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            SavedLookAtInventory;                             		// 0x023C (0x0004) [0x0000000000000000]              
	class AActor*                                      CachedBestPickup;                                 		// 0x0240 (0x0004) [0x0000000000000000]              
	class AActor*                                      CachedHoverPickup;                                		// 0x0244 (0x0004) [0x0000000000000000]              
	class AActor*                                      ClientSavedPickup;                                		// 0x0248 (0x0004) [0x0000000000000000]              
	class AActor*                                      ClosestPickup;                                    		// 0x024C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    HoverParticleComponent;                           		// 0x0250 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< struct FFadePickupParticle >               PendingKillHoverComponents;                       		// 0x0254 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class UItemPickupGFxMovie*                         PickupItemCard;                                   		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    PickupParticleComponent;                          		// 0x0264 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FString                                     BuildNumber;                                      		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BuildTag;                                         		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BuildChangelist;                                  		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BuildInfoXOffset;                                 		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BuildInfoYOffset;                                 		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AWillowPlayerController*                     WPlayerOwner;                                     		// 0x0294 (0x0004) [0x0000000000000000]              
	class AWillowPlayerReplicationInfo*                WPRI;                                             		// 0x0298 (0x0004) [0x0000000000000000]              
	class UHUDDefinition*                              HUDDef;                                           		// 0x029C (0x0004) [0x0000000000000000]              
	class UITargetable*                                CurrentTargetable;                                		// 0x02A0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UITargetable*                                LastPreferredTargetable;                          		// 0x02A8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x02AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              HealthBarFadeStartTime;                           		// 0x02B0 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastAutogunTargetLocation;                        		// 0x02B4 (0x000C) [0x0000000000000000]              
	float                                              InspectAIOutputStartingXPos;                      		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InspectAIOutputStartingYPos;                      		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InspectAIOutputIndentSize;                        		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InspectAIMaxFlagOutputLineSize;                   		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      InspectAIRulesColor;                              		// 0x02D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      InspectAITimersColor;                             		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      InspectAITargetsColor;                            		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      InspectAIFlagIsTrueColor;                         		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      InspectAIFlagIsFalseColor;                        		// 0x02E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InspectStatusEffectOutputStartingXPos;            		// 0x02E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InspectStatusEffectOutputStartingYPos;            		// 0x02E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InspectStatusEffectOutputIndentSize;              		// 0x02EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     InspectStatusEffectTypeName;                      		// 0x02F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FColor                                      ShowHosColor;                                     		// 0x02FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DangerousIconDifference;                          		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                ImpossibleEnemyDifference;                        		// 0x0304 (0x0004) [0x0000000000000000]              
	class UWillowHUDGFxMovie*                          HUDMovie;                                         		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWeaponScopeGFxMovie*                        WeaponScopeMovie;                                 		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStatusMenuExGFxMovie*                       StatusMenuExMovie;                                		// 0x0310 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   SavingMatInst;                                    		// 0x0314 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   ConnectionMatInst;                                		// 0x0318 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   SavingMat;                                        		// 0x031C (0x0004) [0x0000000000000000]              
	class UMaterial*                                   ConnectionMat;                                    		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              SaveDuration;                                     		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              SaveStartTime;                                    		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              FadeStartTime;                                    		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              FadeDuration;                                     		// 0x0330 (0x0004) [0x0000000000000000]              
	struct FString                                     RespawnDialogString;                              		// 0x0334 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RespawnDialogFeeWaivedString;                     		// 0x0340 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RespawnDialogTitleString;                         		// 0x034C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RespawnDialogOtherDiedString;                     		// 0x0358 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RespawnDialogOtherDiedFeeWaivedString;            		// 0x0364 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RespawnDialogUnknownPlayerString;                 		// 0x0370 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              ScreenFadeStartTime;                              		// 0x037C (0x0004) [0x0000000000000000]              
	float                                              ScreenFadeDuration;                               		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              ScreenFadeStartOpacity;                           		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              ScreenFadeOpacity;                                		// 0x0388 (0x0004) [0x0000000000000000]              
	struct FColor                                      ScreenFadeColor;                                  		// 0x038C (0x0004) [0x0000000000000000]              
	struct FString                                     DuelCountdownString;                              		// 0x0390 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuelOutOfBoundsString;                            		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              DefaultMessageDuration;                           		// 0x03A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     DeathStringPistol;                                		// 0x03AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringShotgun;                               		// 0x03B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringSMG;                                   		// 0x03C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringSniperRifle;                           		// 0x03D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringRocketLauncher;                        		// 0x03DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringAssaultRifle;                          		// 0x03E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringFragGrenade;                           		// 0x03F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringProteanGrenade;                        		// 0x0400 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringIncindiaryDamage;                      		// 0x040C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringShockDamage;                           		// 0x0418 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringExplosiveDamage;                       		// 0x0424 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringCorrosiveDamage;                       		// 0x0430 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringImpactDamage;                          		// 0x043C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringSuicide;                               		// 0x0448 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringUnknown;                               		// 0x0454 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathStringFallDamage;                            		// 0x0460 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              SavingMaterialScale;                              		// 0x046C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ConnectionMaterialScale;                          		// 0x0470 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ConnectionWarningStartTime;                       		// 0x0474 (0x0004) [0x0000000000000000]              
	float                                              SavingIconXOffset;                                		// 0x0478 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SavingIconYOffset;                                		// 0x047C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxNumPickups;                                    		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              PendingWeaponCardDisplayTime;                     		// 0x0484 (0x0004) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned char                                      ActiveEquippedCardType;                           		// 0x0488 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ActivePickupCardType;                             		// 0x0489 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class AWillowInventory*                            ItemComparison[ 0x2 ];                            		// 0x048C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   DebugMarkerMat;                                   		// 0x0494 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FInteractionIconWithOverrides               CurrentPickupIcon;                                		// 0x0498 (0x0014) [0x0000000000000000]              
	class UWillowGFxColiseumOverlayMovie*              ColiseumOverlayMovie;                             		// 0x04AC (0x0004) [0x0000000000000000]              
	TArray< struct FHUDWidget_ChallengeData >          QueuedChallengeNotifications;                     		// 0x04B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     QueuedInitFrame;                                  		// 0x04BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           PlayedInitFrames;                                 		// 0x04C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USwfMovie*                                   QueuedPullThePinNotification;                     		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4548 ];

		return pClassPointer;
	};

	void ShowChallengeWidget ( class UChallengeDefinition* InChallenge, int InLevelIndex, int InConditionIndex, int InCurrStatVal, int InGoalStatVal );
	void ShowIpAddress ( );
	void LevelTimer ( );
	void AutoAimDebug ( );
	void eventAmmoAbsorbed ( class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef );
	bool eventColiseumWantsSuppressHUD ( );
	class UWillowGFxColiseumOverlayMovie* GetPlayingColiseumOverlayMovie ( );
	void ColiseumNotify ( unsigned char NotifyType );
	void RuleAnnounce ( );
	void RoundAnnounce ( int Round, int Wave, int MaxRound, struct FString HealthModText, struct FString DamageModTex, struct FString ShieldModTex );
	void BeginRoundAnnounce ( );
	void StartColiseumTimer ( unsigned char CountdownLength );
	void CloseColiseumOverlay ( );
	void UpdateColiseumRule ( class UColiseumRuleDefinition* RuleInfo, unsigned char UpdateMode );
	void OnColiseumOverlayClosing ( );
	void OnColiseumOverlayOpening ( class UWillowGFxColiseumOverlayMovie* Overlay );
	void eventOnLostFocusPause ( unsigned long Enable );
	bool CanPauseOnLostFocus ( unsigned long bEnable );
	void DrawAlwaysOnTopItems ( );
	void SetConnectionProblem ( unsigned long bIsConnected );
	void SetCanPickupItem ( class AActor* Pickup, unsigned long bUpdatePickupCard );
	void StartFade ( float InOpacity, float InFadeDuration, struct FColor Incolor );
	void FadeOut ( float FadeLength );
	void FadeIn ( float FadeLength );
	void NotifySavingComplete ( float InSaveDuration );
	void NotifySavingStarted ( );
	void ToggleHUD ( );
	void ShowTargetAnimDebug ( );
	void ShowAnimDebugFP ( );
	void ShowRespawnDialog ( int Cost );
	void eventCloseStatusMenu ( class UWillowUIInteraction* Interaction );
	void TryFakePauseInSinglePlayer ( );
	void RunStatusMenu ( class UWillowUIInteraction* Interaction );
	void PlayStatusMovie ( );
	void CloseHUDMovie ( );
	void HUDIsClosing ( );
	void OpenHUDMovie ( unsigned long bDeferred );
	void _OpenHUDMovie ( );
	void eventShowInspectedStatusEffectTarget ( class UIStatusEffectTarget* Target, struct FVector PlayerCameraPosition, struct FVector PlayerCameraDirection, float* YPos );
	void AddPostRenderedActor ( class AActor* A );
	void RemovePostRenderedActor ( class AActor* A );
	void eventShowInspectedAI ( class AWillowAIPawn* AIPawnToInspect, struct FVector PlayerCameraPosition, struct FVector PlayerCameraDirection, float* YPos );
	void eventDrawShowIos ( class AWillowInteractiveObject* WIO, struct FVector ViewPosition, struct FVector ViewRotation );
	void eventDrawShowHos ( class AWillowAIPawn* WAIP, struct FVector ViewPosition, struct FVector ViewRotation );
	class UWeaponScopeGFxMovie* eventGetWeaponScopeMovie ( );
	class UWillowHUDGFxMovie* eventGetHUDMovie ( );
	void DisplayTargetPopupInfo ( );
	void UpdatePickupParticles ( );
	void PostRenderDebug ( );
	void DrawSpectatorHud ( );
	void DrawEngineHUD ( );
	float ScaleY ( float Y );
	float ScaleX43 ( float X );
	float ScaleX ( float X );
	struct FColor GetColorForExpLevel ( class AActor* Pickup );
	void ShowPickupCard ( unsigned long bShow, unsigned long bIsPrimaryPlayer, unsigned long bAutoUse );
	struct FVector GetPickupCardLocation ( class AActor* Pickup, unsigned long bApplyPitchOffset );
	void DetachPickupHoverPSys ( class AActor* Pickup );
	void AttachPickupHoverPSys ( class AActor* Pickup, unsigned long bInPickupRange );
	void GetItemHoverBounds ( class AActor* Pickup, float* X, float* Y, float* XL, float* YL );
	void DrawItemFeedbackInfo ( );
	void DrawDebugFeedbackForPickup ( class AActor* Pickup );
	void eventDrawBuildInfo ( );
	void DrawHUD ( );
	void eventDoStartupDrawHUD ( );
	void DrawDamageIndicator ( struct FVector HitDir, unsigned long bShieldOnlyDamage );
	void BuildInfo ( );
	void DrawbShowHUDIsFalseHUD ( );
	void SetWPRI ( );
	void eventDestroyed ( );
	void CreateWeaponScopeMovie ( );
	void CreateHUDMovie ( );
	void PostBeginPlay ( );
	void InitHud ( );
	void ClearCustomMessage ( unsigned char MsgType );
	void DisplayCustomMessage ( unsigned char MsgType, struct FString MessageString, float Duration, struct FColor DrawColor, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class UObject* OptionalObject );
	void LoadBuildInfo ( );
};

UClass* AWillowHUD::pClassPointer = NULL;

// Class WillowGame.WillowImpactDefinition
// 0x0138 (0x0174 - 0x003C)
class UWillowImpactDefinition : public UImpactDefinition
{
public:
	struct FImpactResponseEffect                       FallbackEffect;                                   		// 0x003C (0x0094) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      Usage;                                            		// 0x00D0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     Parent;                                           		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowImpactDefinition*                     AlternateImpactDefinition;                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FImpactResponseEffect                       UnconditionalResponse;                            		// 0x00DC (0x0094) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UAkEvent*                                    ImpactAkEvent;                                    		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4550 ];

		return pClassPointer;
	};

	void HandleRigidBodyImpact ( class AActor* Instigator, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, unsigned long bReplicateEffect, struct FCollisionImpactData* RigidCollisionData );
};

UClass* UWillowImpactDefinition::pClassPointer = NULL;

// Class WillowGame.WillowExplosionImpactDefinition
// 0x0000 (0x0174 - 0x0174)
class UWillowExplosionImpactDefinition : public UWillowImpactDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4552 ];

		return pClassPointer;
	};

};

UClass* UWillowExplosionImpactDefinition::pClassPointer = NULL;

// Class WillowGame.WillowInteractiveObject
// 0x022C (0x03B4 - 0x0188)
class AWillowInteractiveObject : public AActor
{
public:
	struct FPointer                                    VfTable_IITimerBehavior;                          		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IICustomEvent;                            		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIKilledBehavior;                         		// 0x0190 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x0194 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIStatusEffectTarget;                     		// 0x0198 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IITargetable;                             		// 0x019C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_ISpecialMoveInterface;                    		// 0x01A0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDynamicObstacle;                        		// 0x01A4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMapDisplayInfo;                         		// 0x01A8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;              		// 0x01AC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDamageSurface;                          		// 0x01B0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIUsable;                                 		// 0x01B4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x01B8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMissionDirector;                        		// 0x01BC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMissionObjective;                       		// 0x01C0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIGFxActorMovie;                          		// 0x01C4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IILootable;                               		// 0x01C8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDamageable;                             		// 0x01CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x01D0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x01D4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIFocusable;                              		// 0x01D8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIHitRegionConsumer;                      		// 0x01DC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                       		// 0x01E0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IGearboxDialogInterface;                  		// 0x01E4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IILevelChallengeObject;                   		// 0x01E8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UInteractiveObjectDefinition*                InteractiveObjectDefinition;                      		// 0x01EC (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UPawnAllegiance*                             Allegiance;                                       		// 0x01F0 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	TArray< struct FName >                             EnabledBehaviorSets;                              		// 0x01F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0200 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      ObjectMesh;                                       		// 0x0204 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned char                                      bCanBeUsed[ 0x2 ];                                		// 0x0208 (0x0002) [0x0000000000000000]              
	unsigned char                                      bCostsToUse[ 0x2 ];                               		// 0x020A (0x0002) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CostsToUseType[ 0x2 ];                            		// 0x020C (0x0002) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CompassIcon;                                      		// 0x020E (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumberInChallengeGroup;                           		// 0x020F (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      WarriorFade;                                      		// 0x0210 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                CostsToUseAmount[ 0x2 ];                          		// 0x0214 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSetPrimaryUsabilityByMissionDirectives : 1;      		// 0x021C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShouldBeTargetable : 1;                          		// 0x021C (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bTakeDamageCausedByRadiusDamage : 1;              		// 0x021C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHasBeenKilled : 1;                               		// 0x021C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDead : 1;                                        		// 0x021C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x021C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      MoveOwnerOnEditorMove : 1;                        		// 0x021C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      OwnerControlsEditorMove : 1;                      		// 0x021C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bWaitingForInteractiveObjectDefinition : 1;       		// 0x021C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bBeingHealed : 1;                                 		// 0x021C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bNonCheatGodMode : 1;                             		// 0x021C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bActiveObstacle : 1;                              		// 0x021C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bCurrentlyThrottled : 1;                          		// 0x021C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0220 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UITargetable*                                AllegianceParent;                                 		// 0x0224 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0228 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UITargetable* >                      AllegianceChildren;                               		// 0x022C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumAICurrentlyTargeting;                          		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInteractiveObjectReplicatedStateData       ReplicatedState;                                  		// 0x023C (0x001C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                          		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FInstanceDataSet                            InstanceState;                                    		// 0x0260 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedCoordinatedEffect                ReplicatedCFX;                                    		// 0x026C (0x0008) [0x0000000000000020]              ( CPF_Net )
	class URegionDefinition*                           ManuallyBalanceToRegionDef;                       		// 0x0274 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ExpLevel;                                         		// 0x0278 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GameStage;                                        		// 0x027C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AwesomeLevel;                                     		// 0x0280 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FBalanceDefSpawnedActorState                BalanceDefinitionState;                           		// 0x0284 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FTimerBehaviorUserState                     InteractiveObjectTimers;                          		// 0x0290 (0x0024) [0x0000000000000000]              
	int                                                LastMaxHealth;                                    		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              LastHealth;                                       		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxHealth;                                        		// 0x02BC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MaxHealthBaseValue;                               		// 0x02C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MaxHealthModifierStack;                           		// 0x02C4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              Health;                                           		// 0x02D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x02D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UInstancedDesignerAttribute* >       DesignerAttributes;                               		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x02EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UStatusEffectsComponent*                     StatusEffectComp;                                 		// 0x02F0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMissionDirectivesDefinition*                Directives;                                       		// 0x02F4 (0x0004) [0x0000000004000021]              ( CPF_Edit | CPF_Net | CPF_EditInline )
	class UParticleSystemComponent*                    MissionDirectorParticle;                          		// 0x02F8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                ObjectiveBit;                                     		// 0x02FC (0x0004) [0x0000000000220001]              ( CPF_Edit | CPF_EditConst )
	TArray< class UMissionDefinition* >                AnnouncedMissions;                                		// 0x0300 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       AssociatedStationDefinitionName;                  		// 0x030C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLootConfigurationData >            Loot;                                             		// 0x0314 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaxDrawDistanceOverride;                          		// 0x0320 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AController*                                 LastDamagedByController;                          		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              HitRegionHealthScaleAttribute;                    		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitRegionHealthScaleAttributeBaseValue;           		// 0x032C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                HitRegionHealthScaleAttributeModifierStack;       		// 0x0330 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UHitRegionHelper*                            MyHitRegionHelper;                                		// 0x033C (0x0004) [0x0000000000000000]              
	class USpecialMoveComponent*                       SMComponent;                                      		// 0x0340 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FReplicatedSpecialMoveData                  ReplicatedSMData;                                 		// 0x0344 (0x0014) [0x0000000000000020]              ( CPF_Net )
	int                                                SimpleAnimState;                                  		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RepSimpleAnimState;                               		// 0x035C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FSimpleAnimData >                   SimpleAnimInfo;                                   		// 0x0360 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AWillowLightProjectileManager*               LightProjMgr;                                     		// 0x036C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UInteractionIconDefinition*                  InteractionIconOverride[ 0x2 ];                   		// 0x0370 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AWwiseSoundGroup*                            SoundGroup;                                       		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UITargetable*                                TargetPatsy;                                      		// 0x037C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0380 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UGearboxDialogComponent*                     DialogComponent;                                  		// 0x0384 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FGearboxDialogReplicatedData                DialogReplicatedData;                             		// 0x0388 (0x0014) [0x0000000000000020]              ( CPF_Net )
	class UGearboxDialogNameTag*                       CurrentNameTag;                                   		// 0x039C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UPrimitiveComponent*                         LastUsedComponent;                                		// 0x03A0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              SkelUpdateTime;                                   		// 0x03A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastThrottleCheck;                                		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UChallengeDefinition*                        AssociatedChallenge;                              		// 0x03AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RepObjectMeshScale;                               		// 0x03B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4554 ];

		return pClassPointer;
	};

	void OnPlayerClosedMissionUI ( class AWillowPlayerController* ThePlayer );
	void OnPlayerOpenedMissionUI ( class AWillowPlayerController* ThePlayer );
	struct FString eventGetMapDisplayName ( );
	struct FString eventGetMapDisplayHeader ( );
	void GetObstacleInfo ( struct FObstacleData* Data );
	class AActor* GetObstacleActor ( );
	bool GetMagnetData ( struct FVector* MagnetLoc, struct FVector* MagnetVel );
	void SetObstacleVelocity ( struct FVector* NewVelocity );
	bool CanAvoidObstacle ( struct FObstacleData* Obstacle );
	bool CanAvoidObstacles ( );
	void SetObstacleActive ( unsigned long bActive );
	bool IsObstacleActive ( );
	void SetDialogNameTag ( class UGearboxDialogNameTag* NewName );
	void eventServerDialog_TriggerEvent ( class UGearboxDialogEventTag* EventTag, class AActor* Other, class UObject* ObjectParameter );
	struct FGearboxDialogReplicatedData GetReplicatedDialogData ( );
	void SetReplicatedDialogData ( class UGearboxDialogAct_Talk* TalkAct, struct FGearboxDialogData* Data );
	void GetDialogGroups ( TArray< class UGearboxDialogGroup* >* Groups );
	class UGearboxDialogComponent* GetDialogComponent ( );
	class UGearboxDialogNameTag* GetDialogNameTag ( );
	bool CanTalk ( );
	bool TouchDenied ( class AActor* Other );
	void SetPatsy ( class UITargetable* NewPatsy );
	class UITargetable* GetPatsy ( );
	bool IsBeingHealed ( );
	void SetBeingHealed ( unsigned long bNewBeingHealed );
	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	bool HasAnyMissionsForPlayer ( );
	struct FVector GetMissionDirectorLocation ( );
	int GetAllDirectorData ( TArray< struct FMissionDirectorData >* OutData );
	class AWillowLightProjectileManager* GetLightProjMgrFor ( class AWillowWeapon* aWeapon );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, float Damage, class UClass* DamageType, struct FVector Momentum, class UDamagePipeline* Pipeline );
	void eventServerSpecialMove_StopAny ( );
	void eventServerSpecialMove_Stop ( class USpecialMoveDefinition* OldSMD );
	void eventServerSpecialMove_Queue ( class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, struct FName CallbackName, class UObject* CallbackObject, class UObject* Data );
	void eventServerSpecialMove_Play ( class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, struct FName CallbackName, class UObject* CallbackObject, class UObject* Data );
	void SetReplicatedSMData ( struct FSpecialMoveData* NewSMData );
	unsigned char GetDefaultRootMotionRotationMode ( );
	unsigned char GetDefaultRootMotionMode ( );
	class USkeletalMeshComponent* GetSkelMesh ( );
	class USpecialMoveComponent* GetSMComponent ( );
	class AActor* GetActor ( );
	struct FVector GetFocusScreenOffset ( );
	float GetFocusRadius ( );
	struct FVector GetFocusLocation ( );
	void EndFocus ( class APawn* User );
	void BeginFocus ( class APawn* User );
	bool ShieldAbsorbedAmmo ( class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb );
	float GetIntrinsicArmor ( );
	void OnShieldDepleted ( class AController* DamageInstigator, unsigned char DamageType );
	void SetShieldStrength ( float ShieldValue );
	float GetMaxShieldStrength ( );
	float GetShieldStrength ( );
	void NotifyDamageTaken ( struct FDamageEventSummary* DamageSummary );
	bool WillLootableBeResetOnLevelLoad ( );
	void PlayHit ( class APawn* SomePawn, struct FVector HitLocation, class UClass* inDamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void ResetHitRegionHealth ( class UBodyHitRegionDefinition* HitRegion );
	void PlayHealingReaction ( struct FDamageReactionData* Data );
	void HealDamageOnHitRegion ( class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary );
	void PlayDamageReaction ( struct FName HitBone, unsigned long bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum );
	void ReplicateDamageEffect ( class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, unsigned long bWasHeal );
	float GetMaxHealth ( );
	float GetHealth ( );
	void AddDamageToHitRegion ( class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, struct FVector HitLocation, struct FVector HitMomentum, struct FDamageEventSummary* DamageSummary );
	void GetHitRegionHealthValues ( class UBodyHitRegionDefinition* HitRegion, float* outHealth, float* outMaxHealth );
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage ( class AController* InstigatedBy, struct FTraceHitInfo HitInfo );
	void AddMissionLoot ( class UItemPoolDefinition* MissionPool );
	bool GetDroppedLoot ( TArray< struct FSpawnedDroppedLootData >* SpawnedLoot );
	bool GetAttachedLoot ( TArray< struct FSpawnedAttachedLootData >* SpawnedLoot );
	void ServerClearStatusEffects ( unsigned long bKillImmediately );
	void Behavior_ClearStatusEffects ( unsigned long bKillImmediately );
	void SetMorphNodeWeight ( class UMorphNodeWeight* Node, float NewWeight, float WeightBlendTime );
	void UpdateTargetableState ( unsigned long bNewShouldBeTargetable );
	void Behavior_RegisterTargetable ( unsigned long bUnregister );
	struct FString GetHumanReadableName ( );
	void eventGetTargetName ( struct FString* TargetName );
	unsigned char GetAutoAimProfile ( );
	float GetMagnetismRange ( );
	struct FVector GetMagnetismOrigin ( );
	bool IsAutoAimTarget ( );
	float GetTargetingModifier ( );
	bool HasHomingTargetComponents ( );
	bool IsValidHomingTarget ( );
	void Behavior_SetCanTarget ( unsigned char ChangeStatus );
	int ShowSelfAsTarget ( unsigned long bControllersOnly );
	bool GetTargetableIsHidden ( );
	struct FVector GetTargetableLocation ( );
	bool CanSnapZoom ( );
	struct FVector GetSnapLocation ( );
	bool IsTargetableProxy ( );
	bool IsTargetable ( unsigned long bIgnoreCloakAbility );
	unsigned char GetOpinion ( class UObject* Other );
	void SetAllegiance ( class UPawnAllegiance* NewAllegiance );
	class UPawnAllegiance* GetDefaultAllegiance ( );
	class UPawnAllegiance* GetObjectAllegiance ( );
	bool IsSameAllegiance ( class UObject* anObject );
	bool IsNeutral ( class UObject* anObject );
	bool IsFriendly ( class UObject* anObject );
	bool IsEnemy ( class UObject* anObject );
	void GFx_NotifyMovieDestroy ( class UGearboxGFxMovie* Movie );
	void GFx_NotifyMovieCreate ( class UGearboxGFxMovie* Movie );
	class AActor* GFx_GetMovieActor ( );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	void eventDestroyed ( );
	void CleanupKilledInteractiveObject ( );
	int eventGetObjectiveBit ( );
	void eventDeactivateMissionDirectorParticle ( );
	void eventSetMissionDirectorParticle ( );
	void eventMissionStatusChanged ( );
	void SetMissionDirectivesUsability ( unsigned char ChangeUsability );
	void OnPlayerTurnedInMission ( class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn );
	void OnPlayerAcceptedMission ( class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted );
	int GetInProgressMissions ( TArray< class UMissionDefinition* >* InProgressMissions );
	int GetRedeemableMissions ( TArray< class UMissionDefinition* >* RedeemableMissions );
	int GetEligibleMissions ( TArray< class UMissionDefinition* >* EligibleMissions );
	void eventAddMissionDirective ( unsigned long bRegisterDirector, struct FMissionDirectorData* NewDirective );
	void RegisterMissionDirector ( );
	void NotifyUserCouldNotAffordAttemptedUse ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	bool HasDesignerAttribute ( struct FName DesignerAttributeName );
	class UInstancedDesignerAttribute* eventGetInstancedDesignerAttribute ( class UAttributeDefinition* Definition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	class UInstancedDesignerAttribute* CreateDesignerAttribute ( class UDesignerAttributeDefinition* Definition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	void InitializeAttributeStartingValues ( );
	void Behavior_ChangeUsabilityCost ( unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType );
	bool eventGetUsability ( unsigned char UsedType );
	bool SetUsabilityForComponent ( unsigned long bNewUsable, class UActorComponent* UsedComponent, unsigned char UsedType );
	void eventSetUsability ( unsigned long bUsable, unsigned char UsedType, class UActorComponent* UsedComponent );
	void Behavior_ChangeUsability ( unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType );
	void Behavior_Killed ( class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType );
	void Behavior_CauseRadiusDamage ( float Radius, float DamageAmount, unsigned long bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, struct FVector Offset, class UIDamageCauser* DamageCauser, unsigned long bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray< class AActor* >* ActorsHurt );
	void Behavior_CauseDamage ( class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, class UIDamageCauser* DamageCauser, float BarrelSourceTime, float PlantSourceTime );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void DeadInteractiveObjectCleanup ( );
	void StartDeadInteractiveObjectCleanupTimer ( );
	void KilledBy ( class APawn* EventInstigator );
	void eventHandleHealthDepleted ( class APawn* EventInstigator );
	bool IsFullyArmored ( );
	unsigned char GetDamageSurfaceTypeFromHit ( struct FTraceHitInfo* HitInfo );
	unsigned char GetDefaultDamageSurfaceType ( );
	float AdjustMomentumForSurfaceType ( float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo HitInfo );
	void ReduceInteractiveObjectDamage ( class AController* InstigatedBy, float* Damage );
	class AController* GetLastDamagedByController ( );
	void eventTakeDamage ( float RawDamage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool GetNonCheatGodMode ( );
	void SetNonCheatGodMode ( unsigned long NewMode );
	void eventRunCustomEvent ( struct FName EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData );
	void eventOnTimerEvent ( unsigned char EventType, struct FBehaviorParameters EventData );
	bool SetTimerState ( unsigned char TimerId, struct FBehaviorTimerState TimerState );
	bool GetTimerState ( unsigned char TimerId, struct FBehaviorTimerState* TimerState );
	float GetTimeSeconds ( );
	float EvaluateAttributeInitialization ( struct FAttributeInitializationData InitData );
	class UMeshComponent* GetMesh ( );
	class UAnimNode* FindAnimNode ( struct FName NodeName );
	void SetRotationRate ( struct FRotator NewRotationRate );
	float GetCollisionRadius ( );
	bool ConditionalReactToUse ( class APawn* User, class UActorComponent* UsedComponent, unsigned char UsedType );
	bool UsedBy ( class APawn* User );
	bool IsComponentUsable ( class UActorComponent* UsableComponent, unsigned char UsedType );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void InitializeRelevanceDistance ( unsigned char RelevanceDistance );
	void InitializeTickGroup ( );
	void InitializeFromDefinition ( class UInteractiveObjectDefinition* Definition, unsigned long bSkipBehaviorSetsInitialization );
	void ClearBodyCompositionInstance ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ApplyPreviewBodyComposition ( );
	void ChangeInstanceDataSwitch ( struct FName Switch, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	void InitializeRBPhys ( );
	void TerminateRBPhys ( );
	void SetCompassIcon ( unsigned char NewIcon );
	void ConditionalAddToCompass ( unsigned long bDestroyed );
	void eventTornOff ( );
	void ApplyBalanceDefinitionCustomizations ( );
	void InitializeBalanceDefinitionState ( class UBaseBalanceDefinition* BalanceDefinition, int GradeIndex );
	void eventReplicatedEvent ( struct FName VarName );
	void ReceiveDefinition ( class UInteractiveObjectDefinition* Definition );
	void ResendDefinition ( );
	bool CanResendDefinition ( );
	void TryAddToPostRenderedActorsList ( );
	void PostBeginPlay ( );
	void SetOverrideProgressNumber ( unsigned char ProgressNum );
	void SetOverrideAssociatedChallenge ( class UChallengeDefinition* ChalDef );
	unsigned char GetProgressNumber ( );
	class UChallengeDefinition* GetAssociatedChallenge ( );
	void ApplyMaxDrawDistanceOverride ( );
	void SetMaxDrawDistanceOverride ( float NewMaxDrawDistanceOverride );
	void UpdateCollideAsEncroacher ( );
	void SetCollisionOnComponentFromCollisionType ( class UPrimitiveComponent* InComponent, unsigned char InCollisionType );
	void SetCollisionFromCollisionType ( );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void ProcessBehaviorSetsFlags ( );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
	bool CanReceiveStatusEffects ( );
	void ReactToPrimaryStatusEffect ( class UStatusEffectDefinition* StatusEffect );
	class UObject* GetAttributeContextSource ( );
	float GetBoundingSphereRadius ( );
	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
	void AttachEmitter ( class AEmitter* E, struct FName SocketName );
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate ( );
	TArray< struct FName > GetDefaultStatusEffectSockets ( );
	class UStatusEffectsComponent* GetStatusEffectsComponent ( );
	void SetInfoBarVisibility ( unsigned long bVisible );
	bool HideTargetInfoOnHud ( class APawn* HUDOwner );
	float HackHealthDisplay ( float InPercent );
	bool IsChampion ( );
	bool IsBoss ( );
	bool DoesTargetableTakeDamage ( );
	bool DisplayParentInfo ( );
	void GetAllBarInfo ( TArray< struct FInfoBarData >* BarData );
	void GetExpInfo ( int* ExpLevelValue );
	class AActor* GetTargetableActor ( );
};

UClass* AWillowInteractiveObject::pClassPointer = NULL;

// Class WillowGame.TravelStation
// 0x0070 (0x0424 - 0x03B4)
class ATravelStation : public AWillowInteractiveObject
{
public:
	struct FPointer                                    VfTable_IIMission;                                		// 0x03B4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UParticleSystemComponent*                    StationAntennaLight;                              		// 0x03B8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AStationTeleporterDestination*               TeleportDest;                                     		// 0x03BC (0x0004) [0x0000000000200000]              
	struct FVector                                     TeleportDestOffset;                               		// 0x03C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TravelStationActivationOffset;                    		// 0x03CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DetachTeleporter : 1;                             		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DetachTeleportInteraction : 1;                    		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShouldBeActive : 1;                              		// 0x03D8 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	unsigned long                                      bIsCurrentlyActive : 1;                           		// 0x03D8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHasActiveState : 1;                              		// 0x03D8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFastTravelEnabled : 1;                           		// 0x03D8 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	struct FString                                     DebugDescription;                                 		// 0x03DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class URegionDefinition*                           DebugGameStageRegion;                             		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AVolume* >                           TouchVolumes;                                     		// 0x03EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TouchRadius;                                      		// 0x03F8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              StationTouchRadius;                               		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StationTouchHeight;                               		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Nozzle1SocketName;                                		// 0x0404 (0x0008) [0x0000000000000000]              
	struct FName                                       Nozzle2SocketName;                                		// 0x040C (0x0008) [0x0000000000000000]              
	struct FName                                       Nozzle3SocketName;                                		// 0x0414 (0x0008) [0x0000000000000000]              
	struct FName                                       Nozzle4SocketName;                                		// 0x041C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4556 ];

		return pClassPointer;
	};

	bool CanResurrectHere ( unsigned long bIsLevelTravel );
	void eventSetUsability ( unsigned long bUsable, unsigned char UsedType, class UActorComponent* UsedComponent );
	class ULevelTransitionWaypointComponent* eventAddLevelTransitionWaypoint ( class UMissionDefinition* Mission, struct FName MissionLevel );
	class ATravelStation* FindTravelStation ( struct FString TravelStationDefinitionName );
	void SetFastTravelDebug ( unsigned long Enabled );
	bool IsFastTravelEnabled ( );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
	bool GetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	void ReplacePreviouslyActivatedStation ( );
	void eventSetStationActivatedState ( unsigned long bNewShouldBeActive, unsigned long bChangeStateRegardlessOfCurrentState, unsigned long bIsInitialActivation, unsigned long bShouldBeInactive );
	bool TouchDenied ( class AActor* Other );
	class UTravelStationDefinition* GetTravelStationDefinition ( );
	void InitializeFromDefinition ( class UInteractiveObjectDefinition* Definition, unsigned long bSkipBehaviorSetsInitialization );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateCollideAsEncroacher ( );
};

UClass* ATravelStation::pClassPointer = NULL;

// Class WillowGame.FastTravelStation
// 0x0004 (0x0428 - 0x0424)
class AFastTravelStation : public ATravelStation
{
public:
	class UFastTravelStationDefinition*                TravelDefinition;                                 		// 0x0424 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4558 ];

		return pClassPointer;
	};

	bool CanResurrectHere ( unsigned long bIsLevelTravel );
	struct FString eventGetMapDisplayName ( );
	struct FString GetHumanReadableName ( );
	int GetIsRegistered ( );
	class UTravelStationDefinition* GetTravelStationDefinition ( );
};

UClass* AFastTravelStation::pClassPointer = NULL;

// Class WillowGame.LevelTravelStation
// 0x001C (0x0440 - 0x0424)
class ALevelTravelStation : public ATravelStation
{
public:
	class ULevelTravelStationDefinition*               TravelDefinition;                                 		// 0x0424 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	TArray< class UMissionObjectiveSetDefinition* >    WaypointExceptions;                               		// 0x0428 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LevelTravelMapDisplayName;                        		// 0x0434 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4560 ];

		return pClassPointer;
	};

	struct FString GetDestinationMapName ( );
	struct FString eventGetMapDisplayName ( );
	struct FString GetHumanReadableName ( );
	class ULevelTravelStationDefinition* GetDlcDestination ( );
	void eventPostBeginPlay ( );
	class UTravelStationDefinition* GetTravelStationDefinition ( );
};

UClass* ALevelTravelStation::pClassPointer = NULL;

// Class WillowGame.ResurrectTravelStation
// 0x0000 (0x0424 - 0x0424)
class AResurrectTravelStation : public ATravelStation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4562 ];

		return pClassPointer;
	};

	bool CanResurrectHere ( unsigned long bIsLevelTravel );
};

UClass* AResurrectTravelStation::pClassPointer = NULL;

// Class WillowGame.VehicleSpawnStationPlatform
// 0x000C (0x03C0 - 0x03B4)
class AVehicleSpawnStationPlatform : public AWillowInteractiveObject
{
public:
	unsigned char                                      StationSlot;                                      		// 0x03B4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UVehicleSpawnStationVehicleDefinition*       CachedVSSVehicleDefinition;                       		// 0x03B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                SeatOccupiedFlags;                                		// 0x03BC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4564 ];

		return pClassPointer;
	};

	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	void TriggerKismetVehicleSpawnEvents ( class AWillowVehicle* SpawnedVehicle );
	void SpawnVehicle ( );
	void Behavior_SpawnVehicle ( );
	void StartSpawnProcess ( class UVehicleSpawnStationVehicleDefinition* VehicleDef );
	bool UsedBy ( class APawn* User );
	bool TryToTeleportToVehicle ( class APawn* User );
	bool IsActorSpawnedVehicle ( class AActor* Other );
	void SetSeatOccupied ( int SeatIdx, unsigned long IsOccupied );
};

UClass* AVehicleSpawnStationPlatform::pClassPointer = NULL;

// Class WillowGame.VehicleSpawnStationTerminal
// 0x0008 (0x03BC - 0x03B4)
class AVehicleSpawnStationTerminal : public AWillowInteractiveObject
{
public:
	class AVehicleSpawnStationPlatform*                SpawnPlatforms[ 0x2 ];                            		// 0x03B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4566 ];

		return pClassPointer;
	};

	void eventDespawnVehicle ( int SlotIndex );
	void SpawnVehicle ( int SlotIndex, class UVehicleSpawnStationVehicleDefinition* VehicleType );
	void StopUsing ( );
	bool UsedBy ( class APawn* User );
	bool ActivatedForPlayerUse ( );
	void UnlockForOtherUsers ( );
	void LockOutOtherUsers ( class APawn* User );
	void eventPostBeginPlay ( );
};

UClass* AVehicleSpawnStationTerminal::pClassPointer = NULL;

// Class WillowGame.WillowElevatorButton
// 0x0058 (0x040C - 0x03B4)
class AWillowElevatorButton : public AWillowInteractiveObject
{
public:
	unsigned char                                      Usage;                                            		// 0x03B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ButtonState;                                      		// 0x03B5 (0x0001) [0x0000000000000000]              
	int                                                CallFloor;                                        		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGlowing : 1;                                     		// 0x03BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       BehaviorSetName_Enabled;                          		// 0x03C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BehaviorSetName_Disabled;                         		// 0x03C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BehaviorSetName_InUse;                            		// 0x03D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BehaviorSetName_EnabledButUseless;                		// 0x03D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BehaviorSetName_Enabled_Glowing;                  		// 0x03E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BehaviorSetName_Disabled_Glowing;                 		// 0x03E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BehaviorSetName_InUse_Glowing;                    		// 0x03F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BehaviorSetName_EnabledButUseless_Glowing;        		// 0x03F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AWillowElevator* >                   AssociatedElevators;                              		// 0x0400 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4568 ];

		return pClassPointer;
	};

	void UpdateState ( );
	bool CanBeUsedForAnyAssociatedElevator ( );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
};

UClass* AWillowElevatorButton::pClassPointer = NULL;

// Class WillowGame.WillowInteractiveSwitch
// 0x0050 (0x0404 - 0x03B4)
class AWillowInteractiveSwitch : public AWillowInteractiveObject
{
public:
	struct FName                                       OnBehaviorSetName;                                		// 0x03B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NotAllPlayersNearBehaviorSetName;                 		// 0x03BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OffBehaviorSetName;                               		// 0x03C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AVolume* >                           AllActorsInVolumes;                               		// 0x03CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FTouchingPawn >                     TouchingPlayers;                                  		// 0x03D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FTouchingPawn >                     TouchingVehicles;                                 		// 0x03E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumberOfTouchingPlayers;                          		// 0x03F0 (0x0004) [0x0000000000000000]              
	unsigned char                                      OffIcon;                                          		// 0x03F4 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      NotAllPlayersNearIcon;                            		// 0x03F5 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	class UInteractionIconDefinition*                  OffIconDef;                                       		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  NotAllPlayersNearIconDef;                         		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  CurrentIcon;                                      		// 0x0400 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4570 ];

		return pClassPointer;
	};

	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	void PlayerLeftGame ( class APlayerController* PC );
	void PlayerEnteredGame ( class APlayerController* PC );
	void SetCurrentIcon ( struct FName BehaviorSetName );
	void eventSetInitialState ( );
	void PostBeginPlay ( );
};

UClass* AWillowInteractiveSwitch::pClassPointer = NULL;

// Class WillowGame.WillowPropObject
// 0x0000 (0x03B4 - 0x03B4)
class AWillowPropObject : public AWillowInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4572 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* AWillowPropObject::pClassPointer = NULL;

// Class WillowGame.WillowVendingMachineBase
// 0x0014 (0x03C8 - 0x03B4)
class AWillowVendingMachineBase : public AWillowInteractiveObject
{
public:
	struct FPointer                                    VfTable_IIShop;                                   		// 0x03B4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      ShopType;                                         		// 0x03B8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      FormOfCurrency;                                   		// 0x03B9 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bOverrideFormOfCurrency : 1;                      		// 0x03BC (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	int                                                FixedItemCost;                                    		// 0x03C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                FixedFeaturedItemCost;                            		// 0x03C4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4574 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	int GetResetCost ( );
	void ClearInventory ( );
	void eventResetInventory ( );
	bool PlayerBuyBackItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC );
	void PlayerBuyItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, unsigned long bWasItemOfTheDay );
	void PlayerSellItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity );
	struct FShopItemData GetFeaturedItem ( class AWillowPlayerController* WPC );
	void GetBuyBackList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* BuyBackItems );
	void GetInventoryList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* InventoryList );
	unsigned char GetItemStatus ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int ItemPrice );
	void NotifyBasedPickupRemoved ( class AWillowPickup* Pickup );
	void RemoveSoldInventory ( class AWillowInventory* SoldItem );
	void GetWeaponList ( class AWillowPlayerController* WPC, TArray< class AWillowWeapon* >* WeaponList );
	void GetItemList ( class AWillowPlayerController* WPC, TArray< class AWillowItem* >* ItemList );
	int GetSellingPriceForInventory ( class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity );
	unsigned char GetCurrencyTypeInventoryIsSoldIn ( class AWillowInventory* InventoryForSale );
	unsigned char GetShopType ( );
};

UClass* AWillowVendingMachineBase::pClassPointer = NULL;

// Class WillowGame.WillowVendingMachine
// 0x00DC (0x04A4 - 0x03C8)
class AWillowVendingMachine : public AWillowVendingMachineBase
{
public:
	class AWillowInventory*                            ShopInventory[ 0x1E ];                            		// 0x03C8 (0x0078) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AWillowInventory*                            FeaturedItem;                                     		// 0x0440 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AWillowPickup*                               FeaturedItemPickup;                               		// 0x0444 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       FeaturedItemPickupAttachmentPoint;                		// 0x0448 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastInventoryResetTime;                           		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAttributeInitializationData                CommerceMarkup;                                   		// 0x0454 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       InventoryConfigurationName;                       		// 0x0464 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FAttributeInitializationData                FeaturedItemCommerceMarkup;                       		// 0x046C (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       FeaturedItemConfigurationName;                    		// 0x047C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FAttributeInitializationData                FeaturedItemGameStage;                            		// 0x0484 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FAttributeInitializationData                FeaturedItemAwesomeLevel;                         		// 0x0494 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4576 ];

		return pClassPointer;
	};

	void PlayerBuyItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, unsigned long bWasItemOfTheDay );
	void NotifyBasedPickupRemoved ( class AWillowPickup* Pickup );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	void eventSetFeaturedItem ( class AWillowInventory* Inv, struct FName AttachmentPoint );
	void ClearInventory ( );
	void eventResetInventory ( );
	struct FShopItemData GetFeaturedItem ( class AWillowPlayerController* WPC );
	void GetInventoryList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* InventoryList );
	void RemoveSoldInventory ( class AWillowInventory* SoldItem );
	void GetWeaponList ( class AWillowPlayerController* WPC, TArray< class AWillowWeapon* >* WeaponList );
	void GetItemList ( class AWillowPlayerController* WPC, TArray< class AWillowItem* >* ItemList );
	int GetSellingPriceForInventory ( class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity );
	void GenerateInventory ( );
};

UClass* AWillowVendingMachine::pClassPointer = NULL;

// Class WillowGame.WillowVendingMachineBlackMarket
// 0x0004 (0x03CC - 0x03C8)
class AWillowVendingMachineBlackMarket : public AWillowVendingMachineBase
{
public:
	class UBlackMarketDefinition*                      DefinitionData;                                   		// 0x03C8 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4578 ];

		return pClassPointer;
	};

	void PlayerBuyItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, unsigned long bWasItemOfTheDay );
	unsigned char GetRarityLevelForUpgradeLevel ( int CurrentLevel );
	class AWillowItem* BuildUpgradeItemForPlayer ( class UBlackMarketUpgradeDefinition* UpgradeDef, class AWillowPlayerController* WPC );
	struct FShopItemData GetFeaturedItem ( class AWillowPlayerController* WPC );
	void CreateNecessaryBlackMarketItems ( class AWillowPlayerController* WPC, class AWillowInventoryManager** InvManager );
	void GetInventoryList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* InventoryList );
	void RemoveSoldInventory ( class AWillowInventory* SoldItem );
	void GetWeaponList ( class AWillowPlayerController* WPC, TArray< class AWillowWeapon* >* WeaponList );
	void GetItemList ( class AWillowPlayerController* WPC, TArray< class AWillowItem* >* ItemList );
	int StaticGetSellingPriceForBlackMarketInventory ( class UInventoryBalanceDefinition* BalanceDef, class AWillowPlayerController* WPC );
	int GetSellingPriceForInventory ( class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity );
};

UClass* AWillowVendingMachineBlackMarket::pClassPointer = NULL;

// Class WillowGame.WillowInteractiveSwitchRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowInteractiveSwitchRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4580 ];

		return pClassPointer;
	};

};

UClass* UWillowInteractiveSwitchRenderingComponent::pClassPointer = NULL;

// Class WillowGame.WillowInventoryManager
// 0x0084 (0x0238 - 0x01B4)
class AWillowInventoryManager : public AInventoryManager
{
public:
	unsigned long                                      bAutoSwitchWeaponOnPickup : 1;                    		// 0x01B4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bLimitedInventory : 1;                            		// 0x01B4 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                InventorySlotMax_Misc;                            		// 0x01B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                WeaponReadyMax;                                   		// 0x01BC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                WeaponReadyMaxBaseValue;                          		// 0x01C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                WeaponReadyMaxModifierStack;                      		// 0x01C4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class AInventory*                                  ItemChain;                                        		// 0x01D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class AInventory* >                        Backpack;                                         		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BackpackInventoryCount;                           		// 0x01E0 (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            BackpackInventoryBeingEquipped;                   		// 0x01E4 (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            EquippedInventoryGoingToBackpack;                 		// 0x01E8 (0x0004) [0x0000000000000000]              
	class AWillowWeapon*                               EquippedWeaponBeingSwapped;                       		// 0x01EC (0x0004) [0x0000000000000000]              
	class AWillowWeapon*                               OtherEquippedWeaponBeingSwapped;                  		// 0x01F0 (0x0004) [0x0000000000000000]              
	TArray< class AInventory* >                        BuybackInventory;                                 		// 0x01F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AWillowInventory* >                  BlackMarketItemList;                              		// 0x0200 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AWillowInventory*                            BlackMarketFeaturedItem;                          		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowInventoryStorage*                     TheBank;                                          		// 0x0210 (0x0004) [0x0000000000000000]              
	class UWillowInventoryStorage*                     TheStash;                                         		// 0x0214 (0x0004) [0x0000000000000000]              
	float                                              LastAdjustTime;                                   		// 0x0218 (0x0004) [0x0000000000000000]              
	float                                              LastItemAdjustTime;                               		// 0x021C (0x0004) [0x0000000000000000]              
	unsigned char                                      PendingQuickSlot;                                 		// 0x0220 (0x0001) [0x0000000000000000]              
	class URecentDropList*                             RecentStuff;                                      		// 0x0224 (0x0004) [0x0000000000000000]              
	class AWillowWeapon*                               WeaponSwitchSlots[ 0x4 ];                         		// 0x0228 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4582 ];

		return pClassPointer;
	};

	void InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon, unsigned long bEquipInOffHand );
	class AWillowInventory* GetEquippedAnalogue ( class AWillowInventory* InThing );
	class AWillowInventory* GetBlackMarketFeaturedItem ( );
	void AddBlackMarketFeaturedItem ( class AWillowInventory* Item );
	void GetBlackMarketItemList ( TArray< class AWillowInventory* >* ItemList );
	void AddBlackMarketItem ( class AWillowInventory* Item );
	void ClearBlackMarketInventory ( );
	void ClientRemoveStoredItem ( struct FItemDefinitionData ItemDef, unsigned char StorageType );
	void ClientRemoveStoredWeapon ( struct FWeaponDefinitionData WeaponDef, unsigned char StorageType );
	void ClientStoreItem ( struct FItemDefinitionData ItemDef, unsigned char StorageType, unsigned long bIgnoreCapacityCheck, unsigned long bUniqueInventory );
	void ClientStoreWeapon ( struct FWeaponDefinitionData WeaponDef, unsigned char StorageType, unsigned long bIgnoreCapacityCheck, unsigned long bUniqueInventory );
	bool ClientSetBankSlots ( int NewSlotCount );
	void PrintAllInventory ( );
	void SellAllTrash ( );
	void eventRemoveMissionWeapons ( class UMissionWeaponBalanceDefinition* MissionWeapon );
	void ClientRemoveMissionWeapons ( class UMissionWeaponBalanceDefinition* MissionWeapon );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	bool IsInventoryItemInInventory ( class AInventory* CheckItem );
	void GetEquippedWeapons ( class AWillowWeapon** UpThing, class AWillowWeapon** DownThing, class AWillowWeapon** LeftThing, class AWillowWeapon** RightThing );
	void EquipWeaponFromSlot ( unsigned char QuickSlot );
	void RecordItemToInventoryEventForWeapon ( class AWillowWeapon* WWeap, unsigned long bReplacedWeapon );
	unsigned char TranslateWeaponSlotToInventorySlot ( unsigned char WeaponSlot );
	void SafelySetQuickSlot ( class AWeapon* Weap, unsigned char QuickSlot );
	void AssignNextAvailableDefaultQuickSlot ( class AWeapon* NewWeapon );
	class AWillowItem* GetCurrentClassMod ( );
	void SortInventory ( class UQSortComparer* Comparer, TArray< class AWillowInventory* >* Items );
	void SortItems ( class UQSortComparer* Comparer, TArray< class AWillowItem* >* Items );
	void SortWeapons ( class UQSortComparer* Comparer, TArray< class AWillowWeapon* >* Weapons );
	void DiscardInventory ( unsigned long bDestroyContents );
	bool eventHandlePickupQuery ( class UIPickupable* Pickup );
	void eventCopyInventory ( class APawn* Other );
	void FillWeaponSwitchSlots ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	bool ShouldSwitchToBestWeapon ( );
	void ReloadWeapon ( unsigned char FireModeNum );
	void ChangedWeapon ( unsigned long bEquipInOffHand );
	bool CancelWeaponChange ( );
	void ServerPlayerBuyBackInventory ( unsigned char FormOfCurrency, int Price, int Quantity );
	bool PlayerBuyBackItem ( class AWillowInventory* Inv );
	void ServerPlayerSoldItem ( class AWillowInventory* Inv, int Quantity );
	void ServerPlayerSoldBackpackItem ( unsigned char FormOfCurrency, int Price );
	void PlayerSoldItem ( class AWillowInventory* Inv, int Quantity );
	void ServerThrowItemFromBackpack ( struct FItemDefinitionData DefinitionData, int Quantity );
	void ServerThrowWeaponFromBackpack ( struct FWeaponDefinitionData DefinitionData );
	void ThrowBackpackInventory ( class AWillowInventory* Inv );
	void ServerReadyWeaponFromBackpack ( struct FWeaponDefinitionData DefinitionData, unsigned char WeaponSlot, unsigned char Mark );
	void ServerReadyItemFromBackpack ( struct FItemDefinitionData DefinitionData, unsigned char Mark );
	void ReadyBackpackInventory ( class AWillowInventory* Inv, unsigned char WeaponSlot );
	void SendEquipLocThingToBackpack ( unsigned char EquipmentLocation );
	void SendSlottedThingToBackpack ( unsigned char WeaponSlot );
	void ServerSwitchQuickSlot ( class AWillowInventory* Thing, unsigned char NewWeaponSlot );
	void SwitchQuickSlot ( class AWillowInventory* Thing, unsigned char NewWeaponSlot );
	class AWillowWeapon* GetWeaponInSlot ( unsigned char NewWeaponSlot );
	void OnDroppedInventory ( int Id );
	void ClientOnDroppedInventory ( int Id );
	void ClientConditionalIncrementPickupStats ( class AInventory* InvObject );
	void ServerIncrementItemPickedUpStats ( struct FItemDefinitionData ItemDef );
	void CheckItemAgainstBackpackInventoryBeingEquipped ( class AWillowItem* WItem );
	void ServerIncrementWeaponPickedUpStats ( struct FWeaponDefinitionData WeaponDef );
	void CheckWeaponAgainstEquippedWeaponsBeingSwapped ( class AWillowWeapon* WWeapon );
	void CheckWeaponAgainstBackpackInventoryBeingEquipped ( class AWillowWeapon* WWeapon );
	bool InventoryTransitionInProgress ( );
	void IncPlayerRarityStat ( int RarityLevel, class AWillowPlayerController* WPC );
	unsigned char GetMatchedSetRarity ( );
	bool HasMatchedRainbowSet ( );
	void OnEquipped ( class AWillowInventory* Inv );
	bool IsRecent ( class AWillowInventory* Inv );
	void RemoveInventoryFromBackpack ( class AWillowInventory* Inv );
	void AddInventoryToBackpack ( class AWillowInventory* Inv );
	void ClientAddItemToBackpack ( struct FItemDefinitionData DefinitionData, int Quantity, unsigned char Mark, unsigned long bReadyAfterAdd, unsigned char ItemLocation, int TradePartnerId );
	void ClientAddWeaponToBackpack ( struct FWeaponDefinitionData DefinitionData, unsigned char Mark, unsigned long bReadyAfterAdd, unsigned char ItemLocation, int TradePartnerId );
	void GiveStoredAmmoBeforeGoingToBackpack ( class UResourceDefinition* Resource, int Amount );
	void eventAddClientSideInventoryToBackpackInventory ( class AWillowInventory* Inv );
	void AddBackpackItemFromDefinitionData ( struct FItemDefinitionData* DefinitionData );
	void AddBackpackWeaponFromDefinitionData ( struct FWeaponDefinitionData* DefinitionData );
	void AddBackpackInventory ( class AInventory* Inv );
	void InternalAddBackpackInventory ( class AInventory* Inv, unsigned long bReadyAfterAdd );
	void InventoryUnreadied ( class AInventory* Inv, unsigned long PlaceInBackpack );
	void ServerUpdateBackpackInventoryCount ( int NewCount );
	void UpdateBackpackInventoryCount ( );
	void UpdatePawnGearLikenessComponents ( );
	void SetHolsteredWeapon ( int SlotIdx, class AWillowWeapon* NewWeapon );
	void ReplaceHolsteredWeapon ( class AWillowWeapon* OldWeapon, class AWillowWeapon* NewWeapon );
	class AWillowWeapon* FindBestHolsteredWeapon ( unsigned char SizeFilter );
	void InventoryReadied ( class AInventory* Inv );
	void RemoveFromInventory ( class AInventory* ItemToRemove, unsigned long bCanDrop );
	bool HasRoomInInventoryFor ( class UIPickupable* Pickupable );
	int GetEmptyBackpackSlots ( );
	bool InventoryShouldBeReadiedWhenEquipped ( class AWillowInventory* WillowInv );
	void GiveGrenadeToPlayer ( );
	void GiveGrenadeToPlayerIfGrenadeMod ( class AWillowItem* Item );
	bool AddInventory ( class AInventory* NewItem, unsigned long bReady, unsigned long bDoNotActivate, unsigned long bPlayPickupSound );
	class AWillowPlayerController* GetOwningPlayerController ( );
	void eventGetItemList ( unsigned char MaxDroppability, unsigned long bIncludeBackpackTransitions, TArray< class AWillowItem* >* ItemList );
	void eventGetWeaponList ( unsigned long bIncludeUnreadied, unsigned long bIncludeReadied, unsigned char MaxDroppability, unsigned long bIncludeBackpackTransitions, TArray< class AWillowWeapon* >* WeaponList );
	void eventUnreadyExcessWeapons ( );
	void SetWeaponReadyMax ( int NewSize );
	void SetupForPlayer ( );
	void SetupFor ( class APawn* P );
	void eventReplicatedEvent ( struct FName VarName );
	int GetWeaponReadyMax ( unsigned long bWantBaseValue );
	int CountReadiedWeapons ( );
	void SetInventoryMaxSize ( int NewSize, unsigned long bOverrideDefaultMin );
	int GetUnreadiedInventoryMaxSize ( );
	int CountUnreadiedInventory ( );
	class AWillowWeapon* FindLeastValuableWeapon ( unsigned long bIncludeUnreadied, unsigned long bIncludeReadied );
	class AWillowInventory* FindLeastValuableItem ( unsigned long bIncludeUnreadied, unsigned long bIncludeReadied );
	void ItemActors ( class UClass* BaseClass, unsigned long bOnlyReadied, class AInventory** Inv );
};

UClass* AWillowInventoryManager::pClassPointer = NULL;

// Class WillowGame.WillowInventoryStorage
// 0x0024 (0x0060 - 0x003C)
class UWillowInventoryStorage : public UObject
{
public:
	int                                                MaxSlots;                                         		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                ChestSlots;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      ChestIsOpen : 1;                                  		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FChestData >                        TheChest;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInventorySerialNumber >            UnloadableInventory;                              		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4584 ];

		return pClassPointer;
	};

	void SetMaxSlots ( int NewMaxSlots );
	void PrintLog ( );
	bool IsOpen ( );
	void GetList ( TArray< class AWillowInventory* >* StorageList );
	bool PutItem ( class AWillowItem* WItem, unsigned long bOwned );
	bool PutWeapon ( class AWillowWeapon* WWeapon, unsigned long bOwned );
	bool GetInternal ( class AWillowInventory* Inv, unsigned long bIgnoreSizeCheck );
	bool Get ( class AWillowInventory* Inv );
	bool PutInternal ( class AInventory* Inv, unsigned long bIgnoreSizeCheck );
	bool Put ( class AInventory* Inv );
	void RemoveWeaponsByDef ( struct FWeaponDefinitionData WeaponDef );
	void RemoveItemsByDef ( struct FItemDefinitionData ItemDef );
	bool AddWeaponFromDef ( struct FWeaponDefinitionData WeaponDef, unsigned long bIgnoreSizeCheck, unsigned long bUniqueInventory );
	bool AddItemFromDef ( struct FItemDefinitionData ItemDef, unsigned long bIgnoreSizeCheck, unsigned long bUniqueInventory );
	bool Swap ( class AWillowInventory* StorageThing, class AWillowInventory* PlayerThing );
	void Close ( );
	bool Open ( );
	void Reset ( );
	bool SetSlotCount ( int NewSlotCount );
	bool AddSlots ( int SlotsToAdd );
	int GetSizeIncludingUnloadable ( );
	int GetUnloadableCount ( );
	int GetMaxSize ( );
	int GetSize ( );
};

UClass* UWillowInventoryStorage::pClassPointer = NULL;

// Class WillowGame.WillowItem
// 0x00F4 (0x098C - 0x0898)
class AWillowItem : public AWillowInventory
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x0898 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMissionInventory;                       		// 0x089C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x08A0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIItemCardable;                           		// 0x08A4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FItemDefinitionData                         DefinitionData;                                   		// 0x08A8 (0x0044) [0x0000000000000020]              ( CPF_Net )
	class UItemPartListCollectionDefinition*           PartListCollection;                               		// 0x08EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSelectRandomPartsOnInitialization : 1;           		// 0x08F0 (0x0004) [0x0000000000000000] [0x00000001] 
	class UMaterialInstanceConstant*                   HUDMaterialInstance;                              		// 0x08F4 (0x0004) [0x0000000000000000]              
	class UMeshComponent*                              Mesh;                                             		// 0x08F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      ItemSkeletalMesh;                                 		// 0x08FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        ItemStaticMesh;                                   		// 0x0900 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstance*                           ItemMaterial;                                     		// 0x0904 (0x0004) [0x0000000000000000]              
	TArray< struct FAppliedAttributeEffect >           ExternalAttributeModifiers;                       		// 0x0908 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           PartExternalAttributeModifiers;                   		// 0x0914 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           ItemAttributeModifiers;                           		// 0x0920 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FModifierValuePresentationData >    ItemCardModifierStats;                            		// 0x092C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FReplicatedInventoryCardData                ReplicatedItemCardModifierValues[ 0x5 ];          		// 0x0938 (0x0028) [0x0000000000002022]              ( CPF_Const | CPF_Net | CPF_Transient )
	TArray< struct FUIStatModifierData >               UIStatModifiers;                                  		// 0x0960 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInstanceDataSet                            InstanceDataState;                                		// 0x096C (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0978 (0x0004) [0x0000000000000000]              
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                  		// 0x097C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                          		// 0x0988 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4586 ];

		return pClassPointer;
	};

	bool IsUsefulToThisPlayer ( class APlayerController* C );
	bool CheckDefMatch ( unsigned long bShortCheck, unsigned long bUniqueIDCheck, struct FItemDefinitionData* Def, struct FItemDefinitionData* OtherDef );
	bool SerialNumberMatchesDef ( unsigned long bShortCheck, unsigned long bUniqueIDCheck, struct FInventorySerialNumber* SerialNumber, struct FItemDefinitionData* Def );
	class AWillowItem* CreateItemFromSerialNumber ( class UObject* InAdditionalQueryInterfaceSource, struct FInventorySerialNumber* SerialNumber );
	bool UnpackSerialNumber ( struct FInventorySerialNumber* SerialNumber, struct FItemDefinitionData* Def );
	struct FInventorySerialNumber PackSerialNumber ( struct FItemDefinitionData* Def );
	struct FInventorySerialNumber CreateSerialNumber ( );
	void DefinitionFromHashString ( struct FString HashString, struct FItemDefinitionData* ItemData );
	struct FString GetHashString ( );
	class AWillowItem* CreateItemFromDef ( struct FItemDefinitionData NewItemDef, class AWillowPawn* PlayerOwner, int NewQuantity, unsigned long bForceSelectNameParts );
	struct FName eventGetCategoryKey ( );
	class AWillowItem* CreateItemFromMemento ( struct FVector SpawnLocation, struct FRotator SpawnRotation, class UObject* InAdditionalQueryInterfaceSource, struct FItemMemento* Memento );
	struct FItemMemento GetMemento ( );
	struct FString GetModelName ( );
	void GetItemCardTopSectionString ( struct FString* Section );
	struct FString eventGetRainGrenadeIcon ( );
	float eventGetTechIconFrame ( );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	class UImpactDefinition* GetDroppedImpactDefinition ( );
	void GetItemDebug ( TArray< struct FString >* DebugInfo );
	void eventLogInventoryDebug ( );
	struct FString FormatFunStatsText ( TArray< struct FModifierValuePresentationData >* BottomStats );
	struct FString GenerateFunStatsText ( );
	void GetInventoryStatTextData ( TArray< struct FModifierValuePresentationData >* Stats );
	void GetInventoryStatNumberData ( class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray< struct FTopStatData >* Stats );
	void CacheItemCard ( );
	bool CanCompareUIStat ( class UAttributeDefinition** Attrib, class UAttributeDefinition** CompareAttrib, class AWillowInventory** CompareItem );
	int CompareUIStat ( int StatIdx, class AWillowInventory* CompareTo );
	bool CanBeUsedBy ( class APawn* Other );
	void eventTranslateUseFailure ( class APawn* Other, int FailureFlag, struct FString* Output );
	struct FString GenerateHumanReadableNameFromDefinitionParts ( unsigned long bIncludeManufacturer, unsigned long bIncludeModelName, unsigned long bIncludePrefixTitle, struct FItemDefinitionData* DefData );
	struct FString GenerateHumanReadableNameFromDefinition ( struct FItemDefinitionData* DefData );
	struct FString eventGetInventoryCardString ( unsigned long bIncludeManufacturer, unsigned long bIncludeModelName, unsigned long bIncludePrefixTitle );
	struct FString eventGetShortHumanReadableName ( );
	struct FString GenerateHumanReadableName ( unsigned long bPrefixOnly );
	class UInventoryCardPresentationDefinition* GetPresentationDefinition ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ServerReselectItem ( );
	bool DenyPickupQuery ( class UIPickupable* Pickup );
	class AWillowInventory* CreateClone ( );
	class ADroppedPickup* DropFrom ( struct FVector StartLocation, struct FVector StartVelocity, unsigned long bForceNoRBPhysics, unsigned long bTorque, struct FVector Torque );
	void GivenTo ( class APawn* NewOwner, unsigned long bReady, unsigned long bDoNotActivate );
	bool eventIsPlayerRestricted ( class APawn* PawnToCheck );
	void RemoveFromShop ( );
	class UProjectileDefinition* GetProjectileDefinition ( );
	void UpdateUIStateModifierCompareValues ( );
	class UAttributePresentationListDefinition* GetAttributePresentationOverride ( class UAttributeDefinition* Attribute );
	void InitUIStats ( );
	void RemoveAllPartExternalAttributeEffects ( );
	void RemoveAllExternalAttributeEffects ( );
	void ApplyAllExternalAttributeEffects ( );
	void RemoveAllItemAttributeEffects ( );
	void ApplyNamePartItemAttributeEffects ( );
	void ApplyAllItemAttributeEffects ( unsigned long bIncludeNameParts );
	void DeactivateAttributeSlotSkill ( );
	void ActivateAttributeSlotSkill ( );
	void ComputeValueOfParts ( );
	int StaticCalculateItemRarityLevel ( struct FItemDefinitionData* ItemDefinitionData );
	int CalculateItemRarityLevel ( );
	bool IsAllPartsDebugEnabled ( );
	void ToggleAllPartsDebug ( );
	class UItemNamePartDefinition* SelectNamePartFromList ( TArray< class UItemNamePartDefinition* >* NameList );
	void ChooseRandomNameParts ( );
	void ChooseRandomParts ( class UObject* ContextSource );
	void ChoosePartListCollection ( );
	class UMeshComponent* ClonePrimaryMesh ( );
	void eventCloneAppearance ( class AActor* CloneOwner, class USkeletalMeshComponent* ClonedPrimaryMeshComponent, TArray< class UPrimitiveComponent* >* ClonedComponentsAttachedToPrimaryMesh, class UMaterialInstance** ClonedMeshMaterial );
	void AttachMeshToPickup ( class AActor* Pickup );
	void PickupDisassociated ( class ADroppedPickup* Pickup );
	void PickupAssociated ( class ADroppedPickup* Pickup );
	void InitMeshes ( );
	class UMeshComponent* eventInitConstructPreview ( class UMeshComponent* Existing, class UWillowInventoryDefinition* InvDefinition );
	class UMaterialInstance* BuildItemMaterial ( class AActor* MaterialOwner, class UMeshComponent* FallbackMeshComp, struct FItemDefinitionData InDefinitionData );
	class USkeletalMesh* BuildCompositeMesh ( class USkeletalMeshComponent* ItemMeshComp, struct FItemDefinitionData InDefinitionData );
	bool ClientInitializeFromItemDefinition ( );
	bool ValidateDefinitions ( );
	void RecomputeAttributeBaseValues ( );
	void CalculateItemBaseValues ( );
	void InitializeInternal ( unsigned long bForceSelectNameParts );
	void eventInitializeFromDefinitionData ( struct FItemDefinitionData NewDefinitionData, class UObject* InAdditionalQueryInterfaceSource, unsigned long bForceSelectNameParts );
	void eventInitializeInventory ( class UBaseBalanceDefinition* InBalanceDef, class UManufacturerDefinition* InManufacturer, int InGradeIndex, class UObject* InAdditionalQueryInterfaceSource );
	void AllParts ( unsigned long bIncludeNameParts, struct FItemDefinitionData* DefData, class UItemPartDefinition** Part );
	void CheckItemAgainstBackpackInventoryBeingEquipped ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsEquipped ( );
	unsigned char eventGetEquipmentLocation ( );
	void OnPickupDisassociated ( class UObject* Pickup, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnPickupAssociated ( class UObject* Pickup, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnCreate ( TArray< class UBehaviorProviderDefinition* >* Providers );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
};

UClass* AWillowItem::pClassPointer = NULL;

// Class WillowGame.WillowEquipAbleItem
// 0x0000 (0x098C - 0x098C)
class AWillowEquipAbleItem : public AWillowItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4588 ];

		return pClassPointer;
	};

	bool CanBeUsedBy ( class APawn* Other );
	void ItemEquipped ( );
	void ItemUnequipped ( unsigned long bReplace );
	void Unreadied ( );
	void Readied ( );
	bool IsEquipped ( );
	void ItemRemovedFromInvManager ( );
	bool SetElementalFrame ( );
	bool ClientInitializeFromItemDefinition ( );
	void OnUnequipped ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnEquipped ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
};

UClass* AWillowEquipAbleItem::pClassPointer = NULL;

// Class WillowGame.WillowArtifact
// 0x0000 (0x098C - 0x098C)
class AWillowArtifact : public AWillowEquipAbleItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4590 ];

		return pClassPointer;
	};

	void GetItemCardTopSectionString ( struct FString* Section );
	class UAttributePresentationListDefinition* GetAttributePresentationOverride ( class UAttributeDefinition* Attribute );
	bool SetElementalFrame ( );
	bool ValidateDefinitions ( );
	struct FName GetEquippedStat ( );
	unsigned char eventGetEquipmentLocation ( );
};

UClass* AWillowArtifact::pClassPointer = NULL;

// Class WillowGame.WillowClassMod
// 0x0018 (0x09A4 - 0x098C)
class AWillowClassMod : public AWillowEquipAbleItem
{
public:
	struct FString                                     ClassRequirementMetString;                        		// 0x098C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClassRequirementNotMetString;                     		// 0x0998 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4592 ];

		return pClassPointer;
	};

	void GetItemCardTopSectionString ( struct FString* Section );
	void GetInventoryStatNumberData ( class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray< struct FTopStatData >* Stats );
	unsigned char GetHolsteredGearLikenessType ( );
	class UAttributePresentationListDefinition* GetAttributePresentationOverride ( class UAttributeDefinition* Attribute );
	bool IsModifyingSkill ( class USkillDefinition* SkillDef, int* Amount );
	bool eventGetClassModIconLabel ( struct FString* FrameLabel );
	bool ValidateDefinitions ( );
	struct FName GetEquippedStat ( );
	unsigned char eventGetEquipmentLocation ( );
};

UClass* AWillowClassMod::pClassPointer = NULL;

// Class WillowGame.WillowGrenadeMod
// 0x0090 (0x0A1C - 0x098C)
class AWillowGrenadeMod : public AWillowEquipAbleItem
{
public:
	float                                              GrenadeDamage;                                    		// 0x098C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GrenadeDamageBaseValue;                           		// 0x0990 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                GrenadeDamageModifierStack;                       		// 0x0994 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BlastRadius;                                      		// 0x09A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlastRadiusBaseValue;                             		// 0x09A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BlastRadiusModifierStack;                         		// 0x09A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              FuseTime;                                         		// 0x09B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FuseTimeBaseValue;                                		// 0x09B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                FuseTimeModifierStack;                            		// 0x09BC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                NumberOfChildProjectiles;                         		// 0x09C8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NumberOfChildProjectilesBaseValue;                		// 0x09CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NumberOfChildProjectilesModifierStack;            		// 0x09D0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BaseStatusEffectChanceModifier;                   		// 0x09DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseStatusEffectChanceModifierBaseValue;          		// 0x09E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BaseStatusEffectChanceModifierModifierStack;      		// 0x09E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectChanceModifier;                       		// 0x09F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StatusEffectChanceModifierBaseValue;              		// 0x09F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                StatusEffectChanceModifierModifierStack;          		// 0x09F8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectDamage;                               		// 0x0A04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StatusEffectDamageBaseValue;                      		// 0x0A08 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                StatusEffectDamageModifierStack;                  		// 0x0A0C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bGrenadeStored : 1;                               		// 0x0A18 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStorageSet : 1;                                  		// 0x0A18 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4594 ];

		return pClassPointer;
	};

	void GetItemCardTopSectionString ( struct FString* Section );
	struct FName eventGetCategoryKey ( );
	void eventSetGrenadeStorage ( unsigned long bNewGrenadeStored );
	void RemoveFromShop ( );
	class ADroppedPickup* CreatePickup ( unsigned long bDroppedPickup, unsigned long bEnablePickup, struct FVector StartLocation );
	class ADroppedPickup* GetPickup ( unsigned long bDisableRigidBody, unsigned long bEnablePickup );
	unsigned char GetHolsteredGearLikenessType ( );
	class UAttributePresentationListDefinition* GetAttributePresentationOverride ( class UAttributeDefinition* Attribute );
	bool CanAIUse ( );
	class UProjectileDefinition* GetProjectileDefinition ( );
	void Init ( class AController* Spawner, class AWillowProjectile* SpawnedProjectile );
	class AWillowProjectile* SpawnProjectile ( class UProjectileDefinition* ProjectileDef, struct FVector SpawnLocation, unsigned long bSpawnWithNoCollisionFail );
	bool SetElementalFrame ( );
	bool ValidateDefinitions ( );
	struct FName GetEquippedStat ( );
	unsigned char eventGetEquipmentLocation ( );
	void OnGrenadeKilledEnemy ( class UObject* KilledObject, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnGrenadeKilledFriendly ( class UObject* KilledObject, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnGrenadeKilledNeutral ( class UObject* KilledObject, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnGrenadeDamagedNeutral ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnGrenadeDamagedFriendly ( class UObject* DamageTaker, float DamageAmount, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnGrenadeDamagedEnemy ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnGrenadeExploded ( class UObject* Grenade, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnGrenadeSpawned ( class UObject* SpawnedProjectile, TArray< class UBehaviorProviderDefinition* >* Providers );
};

UClass* AWillowGrenadeMod::pClassPointer = NULL;

// Class WillowGame.WillowShield
// 0x01D8 (0x0B64 - 0x098C)
class AWillowShield : public AWillowEquipAbleItem
{
public:
	float                                              PercentChanceToAbsorbAmmo;                        		// 0x098C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PercentChanceToAbsorbAmmoBaseValue;               		// 0x0990 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PercentChanceToAbsorbAmmoModifierStack;           		// 0x0994 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PercentDamageToNegateWhenAmmoAbsorbed;            		// 0x09A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PercentDamageToNegateWhenAmmoAbsorbedBaseValue;   		// 0x09A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PercentDamageToNegateWhenAmmoAbsorbedModifierStack;		// 0x09A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              GenericStatusEffectDamageModifier;                		// 0x09B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GenericStatusEffectDamageModifierBaseValue;       		// 0x09B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                GenericStatusEffectDamageModifierModifierStack;   		// 0x09BC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaCorrosiveExplosionSize;                       		// 0x09C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaCorrosiveExplosionSizeBaseValue;              		// 0x09CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaCorrosiveExplosionSizeModifierStack;          		// 0x09D0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaExplosiveExplosionSize;                       		// 0x09DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaExplosiveExplosionSizeBaseValue;              		// 0x09E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaExplosiveExplosionSizeModifierStack;          		// 0x09E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaFireExplosionSize;                            		// 0x09F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaFireExplosionSizeBaseValue;                   		// 0x09F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaFireExplosionSizeModifierStack;               		// 0x09F8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaShockExplosionSize;                           		// 0x0A04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaShockExplosionSizeBaseValue;                  		// 0x0A08 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaShockExplosionSizeModifierStack;              		// 0x0A0C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaCorrosiveExplosionDamage;                     		// 0x0A18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaCorrosiveExplosionDamageBaseValue;            		// 0x0A1C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaCorrosiveExplosionDamageModifierStack;        		// 0x0A20 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaExplosiveExplosionDamage;                     		// 0x0A2C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaExplosiveExplosionDamageBaseValue;            		// 0x0A30 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaExplosiveExplosionDamageModifierStack;        		// 0x0A34 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaFireExplosionDamage;                          		// 0x0A40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaFireExplosionDamageBaseValue;                 		// 0x0A44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaFireExplosionDamageModifierStack;             		// 0x0A48 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NovaShockExplosionDamage;                         		// 0x0A54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NovaShockExplosionDamageBaseValue;                		// 0x0A58 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NovaShockExplosionDamageModifierStack;            		// 0x0A5C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SpikeCorrosiveDamage;                             		// 0x0A68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpikeCorrosiveDamageBaseValue;                    		// 0x0A6C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SpikeCorrosiveDamageModifierStack;                		// 0x0A70 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SpikeExplosiveDamage;                             		// 0x0A7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpikeExplosiveDamageBaseValue;                    		// 0x0A80 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SpikeExplosiveDamageModifierStack;                		// 0x0A84 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SpikeFireDamage;                                  		// 0x0A90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpikeFireDamageBaseValue;                         		// 0x0A94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SpikeFireDamageModifierStack;                     		// 0x0A98 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SpikeShockDamage;                                 		// 0x0AA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpikeShockDamageBaseValue;                        		// 0x0AA8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SpikeShockDamageModifierStack;                    		// 0x0AAC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              RoidMeleeDamage;                                  		// 0x0AB8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              RoidMeleeDamageBaseValue;                         		// 0x0ABC (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                RoidMeleeDamageModifierStack;                     		// 0x0AC0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PercentChanceToSpawnBoosterItem;                  		// 0x0ACC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PercentChanceToSpawnBoosterItemBaseValue;         		// 0x0AD0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PercentChanceToSpawnBoosterItemModifierStack;     		// 0x0AD4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ImpactDamageBonus;                                		// 0x0AE0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ImpactDamageBonusBaseValue;                       		// 0x0AE4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ImpactDamageBonusModifierStack;                   		// 0x0AE8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PercentShieldToConsumeOnImpactProc;               		// 0x0AF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PercentShieldToConsumeOnImpactProcBaseValue;      		// 0x0AF8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PercentShieldToConsumeOnImpactProcModifierStack;  		// 0x0AFC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UShieldDefinition*                           ShieldDef;                                        		// 0x0B08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowDamageTypeDefinition*                 DamageResistanceType;                             		// 0x0B0C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bPrimed : 1;                                      		// 0x0B10 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	float                                              ShieldCapacitySlotGradeMinusRarity;               		// 0x0B14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShieldCapacitySlotGradeMinusRarityBaseValue;      		// 0x0B18 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShieldCapacitySlotGradeMinusRarityModifierStack;  		// 0x0B1C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShieldRechargeRateSlotGradeMinusRarity;           		// 0x0B28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShieldRechargeRateSlotGradeMinusRarityBaseValue;  		// 0x0B2C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShieldRechargeRateSlotGradeMinusRarityModifierStack;		// 0x0B30 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShieldRechargeDelaySlotGradeMinusRarity;          		// 0x0B3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShieldRechargeDelaySlotGradeMinusRarityBaseValue; 		// 0x0B40 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShieldRechargeDelaySlotGradeMinusRarityModifierStack;		// 0x0B44 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShieldSpecialSlotGradeMinusRarity;                		// 0x0B50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShieldSpecialSlotGradeMinusRarityBaseValue;       		// 0x0B54 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShieldSpecialSlotGradeMinusRarityModifierStack;   		// 0x0B58 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4596 ];

		return pClassPointer;
	};

	unsigned char GetHolsteredGearLikenessType ( );
	void GetItemCardTopSectionString ( struct FString* Section );
	class UAttributePresentationListDefinition* GetAttributePresentationOverride ( class UAttributeDefinition* Attribute );
	bool IsSameShieldTypeAs ( class AWillowShield** CompareShield );
	bool CanCompareUIStat ( class UAttributeDefinition** Attrib, class UAttributeDefinition** CompareAttrib, class AWillowInventory** CompareItem );
	bool ValidateDefinitions ( );
	struct FName GetEquippedStat ( );
	unsigned char eventGetEquipmentLocation ( );
	void eventSetDamageResistanceType ( class UWillowDamageTypeDefinition* NewType );
	void ShieldTriggered ( );
	void eventShieldPrimedStateChanged ( );
	bool TryAbsorbingAmmo ( class UObject* DamageSource, class UWillowDamageTypeDefinition* DamageType, float* PercentDamageToAbsorb );
	void ItemUnequipped ( unsigned long bReplace );
	void ItemEquipped ( );
	bool ClientInitializeFromItemDefinition ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowShield::pClassPointer = NULL;

// Class WillowGame.WillowUsableItem
// 0x0008 (0x0994 - 0x098C)
class AWillowUsableItem : public AWillowItem
{
public:
	struct FPointer                                    VfTable_IIMissionObjective;                       		// 0x098C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                ObjectiveBit;                                     		// 0x0990 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4598 ];

		return pClassPointer;
	};

	class UAttributePresentationListDefinition* GetAttributePresentationOverride ( class UAttributeDefinition* Attribute );
	void ConsumeItem ( );
	bool TryConsume ( );
	void Consume ( );
	void Readied ( );
	class AWillowPlayerController* GetOwningPlayerController ( );
	void HandleOnUsed ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bReady, unsigned long bDoNotActivate );
	bool CanBeReadiedOnPickup ( class APawn* Other );
	bool HandlePickupQuery ( class APawn* Other, class UIPickupable* Pickup );
	bool eventIsItemAutoUsedBy ( class APawn* Other );
	int eventGetObjectiveBit ( );
	bool ValidateDefinition ( );
	void OnUsed ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
};

UClass* AWillowUsableItem::pClassPointer = NULL;

// Class WillowGame.WillowMissionItem
// 0x0010 (0x09A4 - 0x0994)
class AWillowMissionItem : public AWillowUsableItem
{
public:
	class AWillowMissionPickupFailsafe*                PickupFailsafe;                                   		// 0x0994 (0x0004) [0x0000000000000000]              
	struct FString                                     MissionItemString;                                		// 0x0998 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4600 ];

		return pClassPointer;
	};

	struct FString FormatFunStatsText ( TArray< struct FModifierValuePresentationData >* BottomStats );
	struct FString GenerateFunStatsText ( );
	void GetItemCardTopSectionString ( struct FString* Section );
	void PickupAssociated ( class ADroppedPickup* Pickup );
	bool MissionDenyPickup ( );
	void HandleOnUsed ( );
	bool CanBeUsedBy ( class APawn* Other );
	bool ClientInitializeFromItemDefinition ( );
	bool ValidateDefinitions ( );
};

UClass* AWillowMissionItem::pClassPointer = NULL;

// Class WillowGame.WillowUsableCustomizationItem
// 0x0000 (0x0994 - 0x0994)
class AWillowUsableCustomizationItem : public AWillowUsableItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4602 ];

		return pClassPointer;
	};

	bool IsUsefulToThisPlayer ( class APlayerController* C );
	void GetItemCardTopSectionString ( struct FString* Section );
	void InitMeshes ( );
	bool eventIsItemAutoUsedBy ( class APawn* Other );
	struct FString FormatFunStatsText ( TArray< struct FModifierValuePresentationData >* BottomStats );
	bool CanBeApplied ( );
	bool TryConsume ( );
	bool IsConsumable ( );
	bool ValidateDefinition ( );
};

UClass* AWillowUsableCustomizationItem::pClassPointer = NULL;

// Class WillowGame.WillowItemTypes
// 0x0000 (0x003C - 0x003C)
class UWillowItemTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4604 ];

		return pClassPointer;
	};

};

UClass* UWillowItemTypes::pClassPointer = NULL;

// Class WillowGame.WillowLightProjectileManager
// 0x0C94 (0x0E1C - 0x0188)
class AWillowLightProjectileManager : public AActor
{
public:
	class AWillowWeapon*                               WeaponOwner;                                      		// 0x0188 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       PawnOwner;                                        		// 0x018C (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FLightProjectile >                  MyProjs;                                          		// 0x0190 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FLightProjectile >                  RemovedProjs;                                     		// 0x019C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedLightProjectile                  ReplicatedProjectiles[ 0x10 ];                    		// 0x01A8 (0x0340) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedCutoffTime;                             		// 0x04E8 (0x0004) [0x0000000000000000]              
	unsigned char                                      ProjectileCount;                                  		// 0x04EC (0x0001) [0x0000000000000000]              
	unsigned long                                      bCreatingReplicatedProjectiles : 1;               		// 0x04F0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FBeamState >                        MyBeams;                                          		// 0x04F4 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedBeamState                        ReplicatedBeams[ 0x14 ];                          		// 0x0500 (0x0730) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedBeamEndPoints                    RepBeamEndPoints[ 0x14 ];                         		// 0x0C30 (0x01E0) [0x0000000000000020]              ( CPF_Net )
	float                                              LastTimeSeconds;                                  		// 0x0E10 (0x0004) [0x0000000000000000]              
	float                                              DamageApplicationInterval;                        		// 0x0E14 (0x0004) [0x0000000000000000]              
	float                                              DeadOwnerCheckTime;                               		// 0x0E18 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4606 ];

		return pClassPointer;
	};

	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void eventSpawnOverchargedImpactEffect ( struct FImpactInfo Impact, class UParticleSystem* Template );
	struct FRotator GetReflectionInaccuracyAngle ( class AActor* ProjectileInstigator, float ReflectedInaccuracyModifier );
	struct FVector GetReflectionDestination ( struct FVector HitLocation, class AActor* HitActor, class AActor* ProjectileInstigator, struct FReflectionInfo* ReflectionData );
	void eventCauseBeamRadiusDamage ( int BeamIndex, struct FBeamDamageData DamageData, struct FVector DamageOrigin );
	struct FName GetBoneNameForBeamLock ( class USkeletalMesh* Mesh );
	void DeleteBeamsForSource ( class AActor* SourceActor, struct FName SocketName );
	void DeleteBeamsFor ( class AActor* TargetActor );
	void DeleteAllBeamsFromWeapon ( );
	void DeleteAllBeams ( );
	void CleanupProjectiles ( );
	void AddBeam ( class UFiringModeDefinition* FiringModeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bStartLocked, int ParentIndex, struct FBeamDamageData* DamageData, struct FBeamLocationData* SourceData, struct FBeamLocationData* TargetData );
	void AddChildBeam ( struct FBeamState* Parent, struct FBeamLocationData* TargetData );
	void AddWeaponBeam ( struct FName SocketName, class UFiringModeDefinition* FiringModeDefinition );
	int AddProj ( struct FVector StartTrace, struct FVector EndTrace, class APawn* ProjectileInstigator, class UFiringModeDefinition* FiringModeDefinition, unsigned long bStartParticleTracerAtWeapon, unsigned long bOvercharged, unsigned long bRicochetTowardsEnemy );
	void eventDestroyed ( );
};

UClass* AWillowLightProjectileManager::pClassPointer = NULL;

// Class WillowGame.WillowLocalMessage
// 0x0003 (0x004C - 0x0049)
class UWillowLocalMessage : public ULocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4608 ];

		return pClassPointer;
	};

	struct FString CloseFontColorTag ( );
	struct FString OpenFontColorTag ( struct FColor FontColor );
	struct FString TrimWhitespace ( struct FString InString );
};

UClass* UWillowLocalMessage::pClassPointer = NULL;

// Class WillowGame.LocalInventoryRefreshMessage
// 0x0000 (0x004C - 0x004C)
class ULocalInventoryRefreshMessage : public UWillowLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4610 ];

		return pClassPointer;
	};

	void ClientInventoryRefresh ( class AWillowPlayerController* WPC );
};

UClass* ULocalInventoryRefreshMessage::pClassPointer = NULL;

// Class WillowGame.LocalTrainingDefinitionMessage
// 0x0000 (0x004C - 0x004C)
class ULocalTrainingDefinitionMessage : public UWillowLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4612 ];

		return pClassPointer;
	};

	void ClientTrainingDefinitionReceive ( class AWillowPlayerController* WPC, class UTrainingMessageDefinition* TrainingDefinition, float Duration );
};

UClass* ULocalTrainingDefinitionMessage::pClassPointer = NULL;

// Class WillowGame.LocalTrainingMessage
// 0x0004 (0x0050 - 0x004C)
class ULocalTrainingMessage : public UWillowLocalMessage
{
public:
	struct FColor                                      DefaultTrainingMessageColor;                      		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4614 ];

		return pClassPointer;
	};

	struct FString GetLocalStringForTrainingMessageKey ( class AWillowPlayerController* WPC, struct FString MessageKey );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* ULocalTrainingMessage::pClassPointer = NULL;

// Class WillowGame.ReceivedAmmoMessage
// 0x0028 (0x0074 - 0x004C)
class UReceivedAmmoMessage : public UWillowLocalMessage
{
public:
	struct FString                                     ReceivedAmmo;                                     		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfReceivedAmmo;                                 		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NumberOfRounds;                                   		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                AmmoFakedRarityLevelForItemColor;                 		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4616 ];

		return pClassPointer;
	};

	struct FColor GetAmmoColor ( );
	struct FString GetNumberOfRoundsString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
	struct FString GetAmmoString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
	void ClientAmmoReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
};

UClass* UReceivedAmmoMessage::pClassPointer = NULL;

// Class WillowGame.WillowMapInfo
// 0x000C (0x0048 - 0x003C)
class UWillowMapInfo : public UMapInfo
{
public:
	class USwfMovie*                                   TacticalMapMovie;                                 		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AWillowTacticalMapVolume*                    TacticalMapVolume;                                		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         FrontEndMovieDef;                                 		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4618 ];

		return pClassPointer;
	};

};

UClass* UWillowMapInfo::pClassPointer = NULL;

// Class WillowGame.WillowMissionPickupSpawner
// 0x0018 (0x01A0 - 0x0188)
class AWillowMissionPickupSpawner : public AActor
{
public:
	struct FPointer                                    VfTable_IIMission;                                		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UMissionItemDefinition*                      MissionItemDef;                                   		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowWaypoint*                             LinkedAreaWaypoint;                               		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ObjectiveBit;                                     		// 0x0194 (0x0004) [0x0000000000220001]              ( CPF_Edit | CPF_EditConst )
	class AWillowPickup*                               MissionPickup;                                    		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpriteComponent*                            Sprite;                                           		// 0x019C (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4620 ];

		return pClassPointer;
	};

	void RunPickupEvent ( );
	void SetPickupStatus ( unsigned long bPickupEnabled );
	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
	void eventPostBeginPlay ( );
};

UClass* AWillowMissionPickupSpawner::pClassPointer = NULL;

// Class WillowGame.WillowMissionPickupFailsafe
// 0x0014 (0x01B4 - 0x01A0)
class AWillowMissionPickupFailsafe : public AWillowMissionPickupSpawner
{
public:
	class UMissionPopulationAspect*                    LinkedAspect;                                     		// 0x01A0 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UMissionObjectiveDefinition*                 CompletedObjective;                               		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMissionObjectiveSetDefinition*              ObjectiveSet;                                     		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TimeToTriggerFailsafe;                            		// 0x01AC (0x0004) [0x0000000000000000]              
	class AWillowMissionItem*                          MissionItem;                                      		// 0x01B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4622 ];

		return pClassPointer;
	};

	void EnactFailsafe ( );
	void CheckFailsafe ( );
	void SetupFailsafe ( );
	void WaitingForActivation ( );
	void SetPickup ( class ADroppedPickup* Pickup );
	void SetFailsafePickup ( );
	void SetPickupStatus ( unsigned long bPickupEnabled );
};

UClass* AWillowMissionPickupFailsafe::pClassPointer = NULL;

// Class WillowGame.WillowObstacleUtility
// 0x002C (0x0068 - 0x003C)
class UWillowObstacleUtility : public UObject
{
public:
	unsigned long                                      bDebug : 1;                                       		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bActive : 1;                                      		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                GridSize;                                         		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              MaxTime;                                          		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              MaxDist;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              LastPointBonus;                                   		// 0x004C (0x0004) [0x0000000000000000]              
	TArray< struct FObstacleData >                     Obstacles;                                        		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FObstaclePoint >                    ObstaclePoints;                                   		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4624 ];

		return pClassPointer;
	};

	struct FObstacleData GetObstacleData ( class AActor* Obstacle );
	bool IsDebugObstacle ( class AActor* Obstacle );
	void UnRegisterObstacle ( class AActor* Obstacle );
	void RegisterObstacle ( class AActor* Obstacle );
};

UClass* UWillowObstacleUtility::pClassPointer = NULL;

// Class WillowGame.WillowOnDemandPackageMarker
// 0x0000 (0x003C - 0x003C)
class UWillowOnDemandPackageMarker : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4626 ];

		return pClassPointer;
	};

};

UClass* UWillowOnDemandPackageMarker::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSettings_DataStore
// 0x0000 (0x0098 - 0x0098)
class UWillowOnlineGameSettings_DataStore : public UUIDataStore_OnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4628 ];

		return pClassPointer;
	};

	int GetPlaythrough ( );
	int GetLevel ( );
	void OnGameCreated ( struct FName SessionName, unsigned long bWasSuccessful );
	bool eventCreateGame ( unsigned char ControllerIndex );
};

UClass* UWillowOnlineGameSettings_DataStore::pClassPointer = NULL;

// Class WillowGame.WillowPauseTicker
// 0x0010 (0x004C - 0x003C)
class UWillowPauseTicker : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FPauseTimerData >                   Timers;                                           		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4630 ];

		return pClassPointer;
	};

	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float Rate, unsigned long bLoop, struct FName TimerFunc, class UObject* TimerObj );
};

UClass* UWillowPauseTicker::pClassPointer = NULL;

// Class WillowGame.WillowPawn
// 0x0964 (0x1064 - 0x0700)
class AWillowPawn : public AGearboxPawn
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x0700 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;              		// 0x0704 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDamageSurface;                          		// 0x0708 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIFaceFXActor;                            		// 0x070C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMeleeAttacker;                          		// 0x0710 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyPawn;                               		// 0x0714 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIStatusEffectTarget;                     		// 0x0718 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x071C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIShop;                                   		// 0x0720 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIHealable;                               		// 0x0724 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMaterialFadeBehavior;                   		// 0x0728 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x072C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDamageable;                             		// 0x0730 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIHitRegionConsumer;                      		// 0x0734 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x0738 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyInfoProvider;                       		// 0x073C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x0740 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIGearLikenessConsumer;                   		// 0x0744 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IINounAttributeProvider;                  		// 0x0748 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIUsable;                                 		// 0x074C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIAnimProvider;                           		// 0x0750 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                       		// 0x0754 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIProjectileReflector;                    		// 0x0758 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDynamicObstacle;                        		// 0x075C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIExtraImpactEffects;                     		// 0x0760 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMapDisplayInfo;                         		// 0x0764 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FResourcePoolReference                      ShieldArmor;                                      		// 0x0768 (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                ShieldVar;                                        		// 0x0774 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ShieldMaxVar;                                     		// 0x0778 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bHasShieldVar : 1;                                		// 0x077C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bLastHasShieldVar : 1;                            		// 0x077C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFixedView : 1;                                   		// 0x077C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsTyping : 1;                                    		// 0x077C (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bForcedOverlay : 1;                               		// 0x077C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsInvulnerable : 1;                              		// 0x077C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShieldAbsorb : 1;                                		// 0x077C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bUpdateEyeheight : 1;                             		// 0x077C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bWeaponBob : 1;                                   		// 0x077C (0x0004) [0x0000000000044000] [0x00000100] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUsingFootIK : 1;                                 		// 0x077C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bNotifyBeginFalling : 1;                          		// 0x077C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNotifyStopFalling : 1;                           		// 0x077C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bNotifyBeginWalking : 1;                          		// 0x077C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bNotifyStopWalking : 1;                           		// 0x077C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bShouldRagdollAfterDeathAnim : 1;                 		// 0x077C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bUnderFullRagdollControl : 1;                     		// 0x077C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bDeathRagdollInitialized : 1;                     		// 0x077C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bBlendingIntoDeathRagdoll : 1;                    		// 0x077C (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bEquippedWeaponsHidden : 1;                       		// 0x077C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bHolsteredWeaponsHidden : 1;                      		// 0x077C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bHolsteredItemsHidden : 1;                        		// 0x077C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bWeaponParticleAttachmentsHidden : 1;             		// 0x077C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bShouldUseAimAtActor : 1;                         		// 0x077C (0x0004) [0x0000000000000020] [0x00400000] ( CPF_Net )
	unsigned long                                      bShouldUseAimAtVector : 1;                        		// 0x077C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bAlignToSurfaceNormal : 1;                        		// 0x077C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bTookCriticalHitThisTick : 1;                     		// 0x077C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bWasLastDamageACriticalHit : 1;                   		// 0x077C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bBeenRunOver : 1;                                 		// 0x077C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bKilledByTechEffect : 1;                          		// 0x077C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bExistsDeathSound : 1;                            		// 0x077C (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bExistsCriticalHitSound : 1;                      		// 0x077C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bExistsCriticalDeathSound : 1;                    		// 0x077C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bExistsRanOverSound : 1;                          		// 0x0780 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bExistsTechDeathSound : 1;                        		// 0x0780 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUnderMatineeControl : 1;                         		// 0x0780 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUnderMatineeAnimControl : 1;                     		// 0x0780 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bResetAnimTree : 1;                               		// 0x0780 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      FaceFXSpeechPending : 1;                          		// 0x0780 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAlwaysPostRender : 1;                            		// 0x0780 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bIsLeaping : 1;                                   		// 0x0780 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAIDEBUG_MarkCurrentPawn : 1;                     		// 0x0780 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      NoEnemyBehaviorsRun : 1;                          		// 0x0780 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bTargetedBehaviorsRun : 1;                        		// 0x0780 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCausePlayerDeath : 1;                            		// 0x0780 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bPlayerFellIntoPlayerKillVolume : 1;              		// 0x0780 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bBeingRevived : 1;                                		// 0x0780 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bInjuredNoTimeout : 1;                            		// 0x0780 (0x0004) [0x0000000000000020] [0x00004000] ( CPF_Net )
	unsigned long                                      bIsInInjuredBonusTime : 1;                        		// 0x0780 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bInjuredHasPausedDueToCinematicMode : 1;          		// 0x0780 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bTearOffAfterDeath : 1;                           		// 0x0780 (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      bGibbed : 1;                                      		// 0x0780 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDidServerGibPawn : 1;                            		// 0x0780 (0x0004) [0x0000000000000020] [0x00080000] ( CPF_Net )
	unsigned long                                      bDestroyPawnAfterGoreEffectDeath : 1;             		// 0x0780 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bFlinching : 1;                                   		// 0x0780 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bTakingRadiusDamage : 1;                          		// 0x0780 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bMuteHitSound : 1;                                		// 0x0780 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bDebugActionSkill : 1;                            		// 0x0780 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bMeleeWeaponAttached : 1;                         		// 0x0780 (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      bHideAttachedWeapon : 1;                          		// 0x0780 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bBigBoy : 1;                                      		// 0x0780 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bInjuredSuicide : 1;                              		// 0x0780 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bGaveUp : 1;                                      		// 0x0780 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bAllowProjectilesToCollideWithSkeletalMesh : 1;   		// 0x0780 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bSwitchingSeats : 1;                              		// 0x0780 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bWantsFullLOSTrace : 1;                           		// 0x0784 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInterpYawOnly : 1;                               		// 0x0784 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanUse : 1;                                      		// 0x0784 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTurning : 1;                                     		// 0x0784 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bSlowTurning : 1;                                 		// 0x0784 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bBeingHealed : 1;                                 		// 0x0784 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bActiveObstacle : 1;                              		// 0x0784 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bRMWantsToMove : 1;                               		// 0x0784 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bRMForceStop : 1;                                 		// 0x0784 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bStuck : 1;                                       		// 0x0784 (0x0004) [0x0000000000000000] [0x00000200] 
	int                                                LastShieldVar;                                    		// 0x0788 (0x0004) [0x0000000000000000]              
	int                                                LastShieldMaxVar;                                 		// 0x078C (0x0004) [0x0000000000000000]              
	float                                              IntrinsicArmor;                                   		// 0x0790 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              IntrinsicArmorBaseValue;                          		// 0x0794 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IntrinsicArmorModifierStack;                      		// 0x0798 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      WeaponHand;                                       		// 0x07A4 (0x0001) [0x0000000000000000]              
	unsigned char                                      ServerPhysics;                                    		// 0x07A5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      HolsteredWeaponSlotUsed;                          		// 0x07A6 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentNumOfHolsteredWeaponSlots;                 		// 0x07A7 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ReplicatedGearHiddenState;                        		// 0x07A8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      SecondWindReason;                                 		// 0x07A9 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InjuredState;                                     		// 0x07AA (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      InjuredDeadState;                                 		// 0x07AB (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      ForceTechDeathIndex;                              		// 0x07AC (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      MeshBodyCompositionIndex;                         		// 0x07AD (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpRotMode;                                    		// 0x07AE (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpContRotMode;                                		// 0x07AF (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpLocMode;                                    		// 0x07B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpRelRotMode;                                 		// 0x07B1 (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpRelLocMode;                                 		// 0x07B2 (0x0001) [0x0000000000000000]              
	unsigned char                                      bCloaked;                                         		// 0x07B3 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCloakedReplicated;                               		// 0x07B4 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CloakOverride;                                    		// 0x07B5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bOvercharged;                                     		// 0x07B6 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bOverchargedBaseValue;                            		// 0x07B7 (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                bOverchargedModifierStack;                        		// 0x07B8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x07C4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x07C8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             PawnAmbientSound;                                 		// 0x07CC (0x0004) [0x0000000024080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline | CPF_Deprecated )
	class UAudioComponent*                             WeaponAmbientSound;                               		// 0x07D0 (0x0004) [0x0000000024080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline | CPF_Deprecated )
	float                                              Bob;                                              		// 0x07D4 (0x0004) [0x0000000000046020]              ( CPF_Net | CPF_Transient | CPF_Config | CPF_GlobalConfig )
	float                                              BobBaseValue;                                     		// 0x07D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BobModifierStack;                                 		// 0x07DC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BobTime;                                          		// 0x07E8 (0x0004) [0x0000000000000000]              
	struct FVector                                     WalkBob;                                          		// 0x07EC (0x000C) [0x0000000000000000]              
	float                                              EyeHeightModifier;                                		// 0x07F8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              EyeHeightModifierBaseValue;                       		// 0x07FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                EyeHeightModifierModifierStack;                   		// 0x0800 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              EyeHeightModifierSpeed;                           		// 0x080C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              EyeHeightModifierSpeedBaseValue;                  		// 0x0810 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                EyeHeightModifierSpeedModifierStack;              		// 0x0814 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AppliedEyeHeightModifier;                         		// 0x0820 (0x0004) [0x0000000000000000]              
	float                                              SlopeBoostFriction;                               		// 0x0824 (0x0004) [0x0000000000000000]              
	struct FVector                                     FixedViewLoc;                                     		// 0x0828 (0x000C) [0x0000000000000000]              
	struct FRotator                                    FixedViewRot;                                     		// 0x0834 (0x000C) [0x0000000000000000]              
	float                                              CameraScale;                                      		// 0x0840 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              CameraScaleRight;                                 		// 0x0844 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              CameraScaleUp;                                    		// 0x0848 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              CameraScaleStep;                                  		// 0x084C (0x0004) [0x0000000000000000]              
	float                                              CurrentCameraScale;                               		// 0x0850 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   CameraScaleRange;                                 		// 0x0854 (0x0008) [0x0000000000000000]              
	float                                              FreeCameraTargetForwardOffset;                    		// 0x085C (0x0004) [0x0000000000000000]              
	float                                              CurrentFreeCameraTargetForwardOffset;             		// 0x0860 (0x0004) [0x0000000000000000]              
	float                                              FreeCamTargetForwardOffsetStep;                   		// 0x0864 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   FreeCamTargetForwardOffsetRange;                  		// 0x0868 (0x0008) [0x0000000000000000]              
	struct FVector                                     Cached3rdPersonCamLoc;                            		// 0x0870 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Cached3rdPersonCamRot;                            		// 0x087C (0x000C) [0x0000000000000000]              
	float                                              OldLocationZ;                                     		// 0x0888 (0x0004) [0x0000000000000000]              
	float                                              MeshSlopeOffset;                                  		// 0x088C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshSlopeOffsetPercent;                           		// 0x0890 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxMeshSlopeOffsetPercent;                        		// 0x0894 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CustomGravityScaling;                             		// 0x0898 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CustomGravityScalingBaseValue;                    		// 0x089C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CustomGravityScalingModifierStack;                		// 0x08A0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastPainSound;                                    		// 0x08AC (0x0004) [0x0000000000000000]              
	float                                              DeathTime;                                        		// 0x08B0 (0x0004) [0x0000000000000000]              
	int                                                LookYaw;                                          		// 0x08B4 (0x0004) [0x0000000000000000]              
	class UBodyClassDeathDefinition*                   MyDeathDef;                                       		// 0x08B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USpecialMoveDefinition*                      CurrentDeathAnimation;                            		// 0x08BC (0x0004) [0x0000000000000000]              
	float                                              DeathImpactAngle;                                 		// 0x08C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      BloodEmitterClass;                                		// 0x08C4 (0x0004) [0x0000000000000000]              
	class AWillowEquipAbleItem*                        EquippedItems[ 0x4 ];                             		// 0x08C8 (0x0010) [0x0000000000000020]              ( CPF_Net )
	class UItemDefinition*                             EquippedItemDefs[ 0x4 ];                          		// 0x08D8 (0x0010) [0x0000000000000020]              ( CPF_Net )
	struct FHolsteredGearDisplaySlot                   HolsteredItemDisplaySlots[ 0x4 ];                 		// 0x08E8 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	struct FHolsteredGearDisplaySlot                   HolsteredWeaponDisplaySlots[ 0x3 ];               		// 0x0908 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	class AWillowWeapon*                               HolsteredWeaponSlots[ 0x3 ];                      		// 0x0920 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UBodyClassDefinition*                        BodyClass;                                        		// 0x092C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FColor                                      ShieldColor;                                      		// 0x0930 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ShouldBulletsPenetrateEnemies;                    		// 0x0934 (0x0004) [0x0000000000000000]              
	float                                              BulletPenetratedEnemyDamageScale;                 		// 0x0938 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletPenetratedEnemyDamageScaleBaseValue;        		// 0x093C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletPenetratedEnemyDamageScaleModifierStack;    		// 0x0940 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BulletReflectionOffEnemyChance;                   		// 0x094C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletReflectionOffEnemyChanceBaseValue;          		// 0x0950 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletReflectionOffEnemyChanceModifierStack;      		// 0x0954 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BulletReflectedOffEnemyDamageScale;               		// 0x0960 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletReflectedOffEnemyDamageScaleBaseValue;      		// 0x0964 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletReflectedOffEnemyDamageScaleModifierStack;  		// 0x0968 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BulletReflectionOffSelfChance;                    		// 0x0974 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletReflectionOffSelfChanceBaseValue;           		// 0x0978 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletReflectionOffSelfChanceModifierStack;       		// 0x097C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BulletReflectedOffSelfDamageScale;                		// 0x0988 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletReflectedOffSelfDamageScaleBaseValue;       		// 0x098C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletReflectedOffSelfDamageScaleModifierStack;   		// 0x0990 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BulletReflectedOffSelfDamageTakenScale;           		// 0x099C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletReflectedOffSelfDamageTakenScaleBaseValue;  		// 0x09A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletReflectedOffSelfDamageTakenScaleModifierStack;		// 0x09A4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BulletRicochetTowardsEnemyChance;                 		// 0x09B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletRicochetTowardsEnemyChanceBaseValue;        		// 0x09B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletRicochetTowardsEnemyChanceModifierStack;    		// 0x09B8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BulletRicochetedTowardsEnemyDamageScale;          		// 0x09C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BulletRicochetedTowardsEnemyDamageScaleBaseValue; 		// 0x09C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BulletRicochetedTowardsEnemyDamageScaleModifierStack;		// 0x09CC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedMeleeDamageAdded;                       		// 0x09D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedMeleeDamageAddedBaseValue;              		// 0x09DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedMeleeDamageAddedModifierStack;          		// 0x09E0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PlayerAvertDeathChance;                           		// 0x09EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayerAvertDeathChanceBaseValue;                  		// 0x09F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PlayerAvertDeathChanceModifierStack;              		// 0x09F4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              FireRateMultiplier;                               		// 0x0A00 (0x0004) [0x0000000000000000]              
	float                                              WeaponSwapTimeMultiplier;                         		// 0x0A04 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              WeaponSwapTimeMultiplierBaseValue;                		// 0x0A08 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                WeaponSwapTimeMultiplierModifierStack;            		// 0x0A0C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                bReloading;                                       		// 0x0A18 (0x0004) [0x0000000000000000]              
	TArray< struct FItemPoolInfo >                     ItemPoolList;                                     		// 0x0A1C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class AWillowMind* >                       Trackers;                                         		// 0x0A28 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      AimAtActor;                                       		// 0x0A34 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     AimAtVector;                                      		// 0x0A38 (0x000C) [0x0000000000000000]              
	float                                              TakeHitTime;                                      		// 0x0A44 (0x0004) [0x0000000000000000]              
	float                                              MaxFootstepEffectDistance;                        		// 0x0A48 (0x0004) [0x0000000000000000]              
	float                                              LastPainSoundTime;                                		// 0x0A4C (0x0004) [0x0000000000000000]              
	float                                              LastPainSoundLength;                              		// 0x0A50 (0x0004) [0x0000000000000000]              
	float                                              NextDotResponseTime;                              		// 0x0A54 (0x0004) [0x0000000000000000]              
	float                                              SummedPain;                                       		// 0x0A58 (0x0004) [0x0000000000000000]              
	class UAnimNodeBlendPerBone*                       ArmBoneBlend;                                     		// 0x0A5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlLeftHandGripWeapon*              LeftHandIK;                                       		// 0x0A60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAIHoldData >                       LeftHandIKHolds;                                  		// 0x0A64 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UInterpGroup*                                MatineeInterpGroup;                               		// 0x0A70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LookAtTarget;                                     		// 0x0A74 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LookAtOffset;                                     		// 0x0A78 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              LookAtSpeedOverride;                              		// 0x0A84 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UWillowAnimNodeAimOffset*                    AimOffset;                                        		// 0x0A88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowSkelControl_LookAtActor*              HeadLookAt;                                       		// 0x0A8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastAnimSetsCount;                                		// 0x0A90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAnimSet* >                          WeaponAnimSets;                                   		// 0x0A94 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DesiredMeshYawOffset;                             		// 0x0AA0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MeshYawOffset;                                    		// 0x0AA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LeapGravityScale;                                 		// 0x0AA8 (0x0004) [0x0000000000000000]              
	class AWillowInteractiveObject*                    RejuvenateInteraction;                            		// 0x0AAC (0x0004) [0x0000000000000000]              
	TArray< struct FAppliedAttributeEffect >           SavedInjuredModifiers;                            		// 0x0AB0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APawnInteractionProxy*                       InjuredInteractionProxy;                          		// 0x0ABC (0x0004) [0x0000000000000000]              
	float                                              flInjuredTargetedTime;                            		// 0x0AC0 (0x0004) [0x0000000000000000]              
	float                                              InjuredTargetedDurationMultiplier;                		// 0x0AC4 (0x0004) [0x0000000000000000]              
	float                                              TimeToBeRevivedMultiplier;                        		// 0x0AC8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              TimeToBeRevivedMultiplierBaseValue;               		// 0x0ACC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                TimeToBeRevivedMultiplierModifierStack;           		// 0x0AD0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              TotalBleedoutTime;                                		// 0x0ADC (0x0004) [0x0000000000000000]              
	float                                              SuccessiveBleedoutTimePenalty;                    		// 0x0AE0 (0x0004) [0x0000000000000000]              
	float                                              InjuredBaseDelay;                                 		// 0x0AE4 (0x0004) [0x0000000000000000]              
	struct FName                                       InjuredScreenFadeParticleTag;                     		// 0x0AE8 (0x0008) [0x0000000000000000]              
	TArray< struct FScreenParticleModifier >           InjuredScreenFadeScreenParticleModifiers;         		// 0x0AF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterialInterface*                          InjuredScreenFadeMaterialInterface;               		// 0x0AFC (0x0004) [0x0000000000000000]              
	struct FName                                       InjuredScreenFadeMatParamName;                    		// 0x0B00 (0x0008) [0x0000000000000000]              
	float                                              ReviveTime;                                       		// 0x0B08 (0x0004) [0x0000000000000000]              
	float                                              SavedPostProcessDurationMultiplier;               		// 0x0B0C (0x0004) [0x0000000000000000]              
	class AWillowPawn*                                 Reviver;                                          		// 0x0B10 (0x0004) [0x0000000000000000]              
	float                                              InjuredBonusDamageScale;                          		// 0x0B14 (0x0004) [0x0000000000000000]              
	float                                              InjuredAnimLength;                                		// 0x0B18 (0x0004) [0x0000000000000000]              
	class UHitRegionHelper*                            MyHitRegionHelper;                                		// 0x0B1C (0x0004) [0x0000000000000000]              
	float                                              TargetPriority;                                   		// 0x0B20 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              TargetPriorityBaseValue;                          		// 0x0B24 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                TargetPriorityModifierStack;                      		// 0x0B28 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ActorSpawnCost;                                   		// 0x0B34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlinchStartTime;                                  		// 0x0B38 (0x0004) [0x0000000000000000]              
	class UStatusEffectsComponent*                     StatusEffectComp;                                 		// 0x0B3C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FDamageEventSummary                         FullRadiusDamageSummary;                          		// 0x0B40 (0x0078) [0x0000000000000000]              
	struct FInstanceDataSet                            InstanceDataState;                                		// 0x0BB8 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                      		// 0x0BC4 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FReplicatedCoordinatedEffect                ReplicatedCFX;                                    		// 0x0BD4 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x0BDC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UInstancedDesignerAttribute* >       DesignerAttributes;                               		// 0x0BE8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBloodSplatterTrace                         ReplicatedBloodSplatter;                          		// 0x0BF4 (0x0020) [0x0000000000000020]              ( CPF_Net )
	float                                              CommerceMarkup;                                   		// 0x0C14 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FMeleeOverTimeState                         MeleeState;                                       		// 0x0C18 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGoreEffect                                 ReplicatedGoreEffect;                             		// 0x0C4C (0x0024) [0x0000000000000020]              ( CPF_Net )
	class AWillowLightProjectileManager*               LightProjMgr;                                     		// 0x0C70 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AWillowLightProjectileManager*               OffHandLightProjMgr;                              		// 0x0C74 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UWillowImpactDefinition*                     ExtraImpact_FirstShot;                            		// 0x0C78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowImpactDefinition*                     ExtraImpact_LastShot;                             		// 0x0C7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OnGround;                                         		// 0x0C80 (0x0004) [0x0000000000000000]              
	float                                              CurrentPawnSpeed;                                 		// 0x0C84 (0x0004) [0x0000000000000000]              
	float                                              VelocityDotProduct;                               		// 0x0C88 (0x0004) [0x0000000000000000]              
	float                                              AccelerationDotProduct;                           		// 0x0C8C (0x0004) [0x0000000000000000]              
	struct FVector                                     DeathRagDollMomentum;                             		// 0x0C90 (0x000C) [0x0000000000000000]              
	struct FName                                       DeathHitBoneName;                                 		// 0x0C9C (0x0008) [0x0000000000000000]              
	float                                              RD_NextSlideTime;                                 		// 0x0CA4 (0x0004) [0x0000000000000000]              
	float                                              RD_NextImpactTime;                                		// 0x0CA8 (0x0004) [0x0000000000000000]              
	float                                              RD_NextImpactAkEventTime;                         		// 0x0CAC (0x0004) [0x0000000000000000]              
	int                                                SprintFootstepCount;                              		// 0x0CB0 (0x0004) [0x0000000000000000]              
	int                                                StrideFootstepCount;                              		// 0x0CB4 (0x0004) [0x0000000000000000]              
	class AActionSkill*                                MyActionSkill;                                    		// 0x0CB8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentActionSkillActiveAbilityCount;             		// 0x0CBC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextActionSkillActiveAbilityTime;                 		// 0x0CC0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentActionSkillCooldownAbilityCount;           		// 0x0CC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextActionSkillCooldownAbilityTime;               		// 0x0CC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        MeleeWeaponMesh;                                  		// 0x0CCC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              HitRegionHealthScaleAttribute;                    		// 0x0CD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitRegionHealthScaleAttributeBaseValue;           		// 0x0CD4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                HitRegionHealthScaleAttributeModifierStack;       		// 0x0CD8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              RevivalHealthMultiplier;                          		// 0x0CE4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RevivalHealthMultiplierBaseValue;                 		// 0x0CE8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                RevivalHealthMultiplierModifierStack;             		// 0x0CEC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ForcedShotZMomentum;                              		// 0x0CF8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForcedShotZMomentumBaseValue;                     		// 0x0CFC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ForcedShotZMomentumModifierStack;                 		// 0x0D00 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SecondsBeforeConsideringRagdollRemoval;           		// 0x0D0C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SecondsBeforeVisibleRagdollRemoval;               		// 0x0D10 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SecondsBetweenRagdollRemovalAttempts;             		// 0x0D14 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SecondsBeforePhysicsShutsDown;                    		// 0x0D18 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RBForceSleepTime;                                 		// 0x0D1C (0x0004) [0x0000000000000000]              
	struct FMaterialScalarFadeReplication              MatScalarFadeInfo;                                		// 0x0D20 (0x0018) [0x0000000000000020]              ( CPF_Net )
	float                                              MatScalarFadeStartTime;                           		// 0x0D38 (0x0004) [0x0000000000000000]              
	float                                              MatScalarFadeCurValue;                            		// 0x0D3C (0x0004) [0x0000000000000000]              
	float                                              MatScalarLastTick;                                		// 0x0D40 (0x0004) [0x0000000000000000]              
	float                                              MatScalarTickRate;                                		// 0x0D44 (0x0004) [0x0000000000000000]              
	int                                                ShieldEffectCount;                                		// 0x0D48 (0x0004) [0x0000000000000000]              
	int                                                BloodEffectCount;                                 		// 0x0D4C (0x0004) [0x0000000000000000]              
	float                                              ImpactEffectTimestamp;                            		// 0x0D50 (0x0004) [0x0000000000000000]              
	int                                                NumSuccessiveInjuries;                            		// 0x0D54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumSuccessiveInjuriesBaseValue;                   		// 0x0D58 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NumSuccessiveInjuriesModifierStack;               		// 0x0D5C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastInjuryTime;                                   		// 0x0D68 (0x0004) [0x0000000000000000]              
	float                                              MostRecentShieldDamageTaken;                      		// 0x0D6C (0x0004) [0x0000000000000000]              
	class UITargetable*                                TargetPatsy;                                      		// 0x0D70 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0D74 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                NumAICurrentlyTargeting;                          		// 0x0D78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpRotTime;                                    		// 0x0D7C (0x0004) [0x0000000000000000]              
	struct FRotator                                    InterpRotDiff;                                    		// 0x0D80 (0x000C) [0x0000000000000000]              
	float                                              InterpRotElapsedTime;                             		// 0x0D8C (0x0004) [0x0000000000000000]              
	float                                              InterpContRotTime;                                		// 0x0D90 (0x0004) [0x0000000000000000]              
	struct FRotator                                    InterpContRotDiff;                                		// 0x0D94 (0x000C) [0x0000000000000000]              
	float                                              InterpContRotElapsedTime;                         		// 0x0DA0 (0x0004) [0x0000000000000000]              
	float                                              InterpLocTime;                                    		// 0x0DA4 (0x0004) [0x0000000000000000]              
	struct FVector                                     InterpLocDiff;                                    		// 0x0DA8 (0x000C) [0x0000000000000000]              
	float                                              InterpLocElapsedTime;                             		// 0x0DB4 (0x0004) [0x0000000000000000]              
	float                                              InterpRelRotTime;                                 		// 0x0DB8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    InterpRelRotDiff;                                 		// 0x0DBC (0x000C) [0x0000000000000000]              
	float                                              InterpRelRotElapsedTime;                          		// 0x0DC8 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0DCC (0x0004) MISSED OFFSET
	struct FQuat                                       InterpRelRotStart;                                		// 0x0DD0 (0x0010) [0x0000000000000000]              
	struct FQuat                                       InterpRelRotGoal;                                 		// 0x0DE0 (0x0010) [0x0000000000000000]              
	float                                              InterpRelLocTime;                                 		// 0x0DF0 (0x0004) [0x0000000000000000]              
	struct FVector                                     InterpRelLocDiff;                                 		// 0x0DF4 (0x000C) [0x0000000000000000]              
	float                                              InterpRelLocElapsedTime;                          		// 0x0E00 (0x0004) [0x0000000000000000]              
	class UMissionObjectiveDefinition*                 MissionObjectiveToUpdateOnDeath;                  		// 0x0E04 (0x0004) [0x0000000000000000]              
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0E08 (0x0004) [0x0000000000000000]              
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                  		// 0x0E0C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                          		// 0x0E18 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                NumReplicatedNouns;                               		// 0x0E1C (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FNounAttributeState >               NounState;                                        		// 0x0E20 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FReplicatedNounAttributeState               ReplicatedNouns[ 0x14 ];                          		// 0x0E2C (0x0140) [0x0000000000000020]              ( CPF_Net )
	float                                              DistToNavMesh;                                    		// 0x0F6C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VertDistToNavMesh;                                		// 0x0F70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastNavMeshCheck;                                 		// 0x0F74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NavMeshCheckRate;                                 		// 0x0F78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCheckNavMeshLocation;                         		// 0x0F7C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FBasedPosition                              NearestPositionOnNavMesh;                         		// 0x0F88 (0x0034) [0x0000000000002000]              ( CPF_Transient )
	float                                              AvoidanceSpeedScale;                              		// 0x0FBC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextCringeTime;                                   		// 0x0FC0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpecialMove_Cringe*                         CurrentCringe;                                    		// 0x0FC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTurnTime;                                     		// 0x0FC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentTurnTime;                                  		// 0x0FCC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TurnGoalYaw;                                      		// 0x0FD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UIRBCollisionListener* >             RBCollisionListeners;                             		// 0x0FD4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UIRBCollisionListener* >             RBCollisionListenersToRemove;                     		// 0x0FE0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AWillowPawn*                                 CharmedChild;                                     		// 0x0FEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPawn*                                 CharmedParent;                                    		// 0x0FF0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                SimpleAnimState;                                  		// 0x0FF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RepSimpleAnimState;                               		// 0x0FF8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FSimpleAnimData >                   SimpleAnimInfo;                                   		// 0x0FFC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UStanceTypeDefinition*                       CurrentStance;                                    		// 0x1008 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UStanceTypeDefinition*                       OverrideStance;                                   		// 0x100C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGearboxDialogNameTag*                       CurrentNameTag;                                   		// 0x1010 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BarrelSourceTimerEnd;                             		// 0x1014 (0x0004) [0x0000000000000000]              
	float                                              PlantSourceTimerEnd;                              		// 0x1018 (0x0004) [0x0000000000000000]              
	int                                                CurrentBreathingLoopIndex;                        		// 0x101C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAkPlayingInfo                              BreathingLoopPlayingInfo;                         		// 0x1020 (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	int                                                GameStage;                                        		// 0x1028 (0x0004) [0x0000000000000000]              
	class UEnvironmentTagDefinition*                   CurrentEnvironmentTag;                            		// 0x102C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UEnvironmentTagDefinition*                   CurrentAnimEnvironmentTag;                        		// 0x1030 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OverrideNavSize;                                  		// 0x1034 (0x0004) [0x0000000000000000]              
	float                                              OverrideNavHeight;                                		// 0x1038 (0x0004) [0x0000000000000000]              
	float                                              MinStuckTime;                                     		// 0x103C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStuckSpeed;                                    		// 0x1040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartStuckTime;                                   		// 0x1044 (0x0004) [0x0000000000000000]              
	struct FVector                                     StartStuckLoc;                                    		// 0x1048 (0x000C) [0x0000000000000000]              
	class USpecialMoveDefinition*                      EmoteAnim;                                        		// 0x1054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpecialMoveDefinition*                      ReplicatedEmoteAnim;                              		// 0x1058 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              NextPlayerEventTime;                              		// 0x105C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RepMeshScale;                                     		// 0x1060 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4632 ];

		return pClassPointer;
	};

	float GetFallingDamageScale ( );
	void TryBlink ( );
	void ServerPostPlayerEvent ( unsigned char PEM, class AActor* TheInstigator, class AActor* Other );
	void eventPostPlayerEvent ( unsigned char PEM, class AActor* TheInstigator, class AActor* Other );
	void ForcePostPlayerEvent ( unsigned char PEM, class AActor* TheInstigator, class AActor* Other );
	void PlayPostEnvironmentTransitionAnimation ( );
	float PlayPreEnvironmentTransitionAnimation ( );
	bool RequiresEnvironmentTransitionAnimation ( class UEnvironmentTagDefinition* FromEnvironmentTag, class UEnvironmentTagDefinition* ToEnvironmentTag );
	void EnvironmentTransitionAnimFinished ( );
	void SetEnvironmentTag ( class UEnvironmentTagDefinition* InEnvironmentTag );
	void RemoveEnvironmentTag ( class UEnvironmentTagDefinition* InEnvironmentTag );
	void AddEnvironmentTag ( class UEnvironmentTagDefinition* InEnvironmentTag, unsigned long bOverwriteExistingTag );
	struct FString eventGetMapDisplayName ( );
	struct FString eventGetMapDisplayHeader ( );
	void PlayExtraImpactEffects ( unsigned char BulletFromClip, struct FImpactInfo* InImpactInfo );
	void SetExtraImpactEffect ( unsigned char BulletFromClip, class UWillowImpactDefinition* Definition );
	void ForceDownState ( );
	void SetRevivePct ( float NewRevivePct );
	float GetRevivePct ( );
	bool MovementTransitionNodeIsIdle ( );
	bool PrismNodeIsActive ( );
	unsigned char GetDefaultRootMotionRotationMode ( );
	unsigned char GetDefaultRootMotionMode ( );
	class AWillowWeapon* FindMatchingHolsteredWeapon ( unsigned char LikenessType, unsigned char GroupIndex );
	class AWillowInventory* GetLikenessInventory ( unsigned char Source, unsigned char GroupIndex );
	bool ShouldRefreshLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
	void AssumeLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
	void eventClientShieldTriggered ( );
	void eventShieldTriggered ( );
	bool IsBeingHealed ( );
	void SetBeingHealed ( unsigned long bNewBeingHealed );
	bool CanPlayEmoteAnim ( class USpecialMoveDefinition* NewEmoteAnim );
	void SetEmoteAnim ( class USpecialMoveDefinition* NewEmoteAnim );
	void EmoteAnimTimer ( );
	void ReleaseLeftHandIK ( struct FName HoldName, class UObject* IKTag );
	void HoldLeftHandIK ( struct FName HoldName, class UObject* IKTag );
	void CheckLeftHandIK ( );
	float GetBulletReflectedOffSelfDamageScale ( );
	float GetBulletReflectedOffEnemyDamageScale ( );
	float GetBulletReflectedOffSelfDamageTakenScale ( );
	float GetEnemyReflectionChance ( );
	float GetSelfReflectionChance ( );
	void GetObstacleInfo ( struct FObstacleData* Data );
	class AActor* GetObstacleActor ( );
	bool GetMagnetData ( struct FVector* MagnetLoc, struct FVector* MagnetVel );
	void SetObstacleVelocity ( struct FVector* NewVelocity );
	bool CanAvoidObstacle ( struct FObstacleData* Obstacle );
	bool CanAvoidObstacles ( );
	void SetObstacleActive ( unsigned long bActive );
	bool IsObstacleActive ( );
	class APawn* GetParent ( );
	void Uncharm ( );
	void Charm ( class AWillowPawn* NewCharmedParent );
	bool IsCharmed ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* Context );
	float GetStatusEffectChanceModifier ( class UObject* Context );
	float GetStatusEffectBaseDamage ( class UObject* Context );
	void eventNotifyRBCollisionListeners ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactSide, struct FCollisionImpactData* RigidCollisionData );
	void FinishRemovingRBCollisionListeners ( );
	void RemoveRBCollisionListener ( class UIRBCollisionListener* Listener );
	void AddRBCollisionListener ( class UIRBCollisionListener* Listener );
	void GetPetActors ( TArray< class AActor* >* out_PetActorList );
	void ClearBodyCompositionInstance ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ApplyPreviewBodyComposition ( );
	void ChangeInstanceDataSwitch ( struct FName Switch, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	void NotifyUserCouldNotAffordAttemptedUse ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void ScrapeStances ( TArray< class UStanceTypeDefinition* >* OutStances );
	unsigned char GetDefaultStance ( class UStanceTypeDefinition* CheckStance );
	bool IsDefaultStance ( class UStanceTypeDefinition* CheckStance );
	void ClientStanceUpdated ( );
	bool SetStance ( class UStanceTypeDefinition* NewStance );
	void SetDefaultStance ( );
	void ClearStance ( );
	class UBodyClassDefinition* GetStanceBody ( );
	class UStanceTypeDefinition* GetStance ( );
	bool TryToTurn ( int YawDiff, unsigned long bMoving );
	class UTurnDefinition* GetCurrentTurnDefinition ( );
	bool CanTurn ( );
	void DoneTurning ( );
	float GetHeadLookMinDot ( );
	bool UseRootOnlyYawRotation ( );
	struct FVector GetAimDirection ( );
	struct FVector GetPivotPoint ( unsigned long bForFiring );
	bool CanUseAimOffsets ( );
	void AdjustRotation ( float DeltaTime, unsigned long bMoving, struct FRotator* NewRotation );
	class UBodyClassDefinition* GetCringeBody ( );
	void DoneCringing ( );
	void StopCringe ( );
	void StartCringe ( unsigned char DamageType, unsigned long bDOT );
	bool IsCringing ( class UBodyClassDefinition* CringeBody );
	struct FBasedPosition GetNearestPositionOnNavMesh ( );
	float GetFlyNavMeshCheckDist ( );
	float GetVertDistToNavMesh ( );
	float GetDistToNavMesh ( );
	bool IsAboveNavMesh ( );
	void CheckNavMeshDist ( );
	bool CloakForcedOff ( );
	bool CloakForcedOn ( );
	bool CloakForced ( );
	void StaticSetCanCloak ( unsigned long bCanCloak );
	bool StaticCanCloak ( );
	void eventSpawnCloakParticle ( class UParticleSystem* CloakPS );
	void ForceCloak ( unsigned char NewCloakBehavior );
	bool ShouldCloak ( unsigned char Type );
	void CheckReplicatedCloak ( );
	bool IsCloaked ( );
	bool CanCloak ( );
	void Uncloak ( );
	void Cloak ( );
	class UWillowDialogGlobalsDefinition* GetDialogGlobals ( );
	void SetDialogNameTag ( class UGearboxDialogNameTag* NewName );
	void GetDialogGroups ( TArray< class UGearboxDialogGroup* >* Groups );
	class UGearboxDialogNameTag* GetDialogNameTag ( );
	void GetOutTheWay ( class APawn* OtherPawn );
	void eventStuckOnPawn ( class APawn* OtherPawn );
	void OnInterpPawn ( class UWillowSeqAct_InterpPawn* Action );
	void InterpRelativeRotation ( struct FRotator NewRelRot, float InterpTime, unsigned long bLinear );
	void InterpRelativeLocation ( struct FVector NewRelLoc, float InterpTime, unsigned long bLinear );
	void InterpControllerRotation ( struct FRotator NewRot, float InterpTime, unsigned long bLinear );
	void InterpRotation ( struct FRotator NewRot, float InterpTime, unsigned long bLinear, unsigned long bYawOnly );
	void InterpLocation ( struct FVector NewLoc, float InterpTime, unsigned long bLinear, unsigned long bNoZ );
	void NotifyActionSkillWeaponsRestricted ( unsigned long bWeaponsRestricted );
	void NotifyActionSkillFakePause ( unsigned long bPaused );
	void NotifyActionSkillWeaponSwitched ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void NotifyActionSkillOfKilledEnemy ( class AWillowPawn* aTargetPawn );
	void ToggleActionSkillDebug ( );
	void NotifyHUDOfEnableActionSkill ( class AActionSkill* Skill, unsigned long bEnable );
	void EnableActionSkill ( unsigned long bEnable, class USkillDefinition* Skill, class AWillowPawn* TargetPawn );
	void ClientEndActionSkill ( );
	void EndActionSkill ( );
	void ActionSkillEnded ( );
	void ActionSkillStarted ( class USkillDefinition* Skill );
	bool IsActionSkillRunning ( );
	void SetActionSkillSoundMode ( class USoundMode* NewSoundMode );
	void SetDefaultSoundMode ( );
	void HitByVehicle ( class AVehicle* Collider );
	void ClientSetSwitchingSeats ( unsigned long bInSwitchingSeats );
	void SetSwitchingSeats ( unsigned long bInSwitchingSeats );
	void Behavior_Killed ( class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType );
	void CrushedByActor ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	void eventStartReplicatedMaterialScalarFade ( );
	void Behavior_UseMaterialScalarFadeForGoreDeath ( struct FName ScalarName, float StartValue, float EndValue, float FadeTime, unsigned long bDestroyActorAfterGoreEffect );
	void Behavior_MaterialScalarFade ( struct FName ScalarName, float StartValue, float EndValue, float FadeTime );
	void Behavior_RegisterTargetable ( unsigned long bUnregister );
	int GetResetCost ( );
	void eventResetInventory ( );
	unsigned char GetTransactionStatus ( class AWillowInventory* Item, class AWillowPlayerController* WPC );
	bool PlayerBuyBackItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC );
	void PlayerBuyItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, unsigned long bWasItemOfTheDay );
	void PlayerSellItem ( class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity );
	struct FShopItemData GetFeaturedItem ( class AWillowPlayerController* WPC );
	void GetBuyBackList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* BuyBackItems );
	void GetInventoryList ( class AWillowPlayerController* WPC, TArray< struct FShopItemData >* InventoryList );
	unsigned char GetShopType ( );
	class UBehaviorAliasLookupDefinition* BehaviorAlias_GetLookupDefinition ( );
	void ServerClearStatusEffects ( unsigned long bKillImmediately );
	void Behavior_ClearStatusEffects ( unsigned long bKillImmediately );
	struct FVector GetTargetableLocation ( );
	void RemoveSoldInventory ( class AWillowInventory* SoldItem );
	void GetWeaponList ( class AWillowPlayerController* WPC, TArray< class AWillowWeapon* >* WeaponList );
	void GetItemList ( class AWillowPlayerController* WPC, TArray< class AWillowItem* >* ItemList );
	void SetHandIKTarget ( int Hand, class UObject* TargetRef, struct FName TargetAttachmentName );
	void EnableHandIK ( int Hand, unsigned long bEnableIK );
	class UWillowSkelControlHandPlacement* FindHandIKSelControl ( int Hand );
	void DetachMeleeWeaponMesh ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void AttachMeleeWeaponMesh ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void MeleeMeshPreRemoveNotify ( class UStaticMeshComponent* MeleeMeshComp );
	void MeleeMeshPostInitNotify ( class UStaticMeshComponent* MeleeMeshComp );
	void Behavior_Fire ( class UFiringModeDefinition* FiringModeDefinition, struct FVector Direction, class UIWorldBody* WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, struct FName FireSourceSocket, unsigned long bTreatDirectionAsDestination );
	bool CanReceiveStatusEffects ( );
	void ReactToPrimaryStatusEffect ( class UStatusEffectDefinition* StatusEffect );
	float GetBoundingSphereRadius ( );
	class UObject* GetAttributeContextSource ( );
	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
	void AttachEmitter ( class AEmitter* E, struct FName SocketName );
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate ( );
	TArray< struct FName > GetDefaultStatusEffectSockets ( );
	class UStatusEffectsComponent* GetStatusEffectsComponent ( );
	class AWillowAIPawn* GetAWillowAIPawn ( );
	class AWillowPlayerPawn* GetAWillowPlayerPawn ( );
	class AWillowPawn* GetAWillowPawn ( );
	class AWillowLightProjectileManager* GetLightProjMgrFor ( class AWillowWeapon* aWeapon );
	void GetMeleeState ( float* StartTime, float* LastTime, struct FVector* StartLoc, struct FRotator* StartRot );
	bool ShouldIgnoreInstigatorVelocity ( );
	bool HasActorAlreadyBeenHitByMelee ( class AActor* HitActor );
	void AddActorToListOfHitActors ( class AActor* HitActor );
	void EndMeleeOverTime ( );
	void BeginMeleeOverTime ( class UMeleeDefinition* MeleeDefinition );
	float GetMeleeAttackerMass ( );
	void GetMeleeTraceSourceLocationAndRotation ( struct FVector* OutTraceStart, struct FRotator* OutTraceStartRotation );
	class APawn* GetMeleeInstigator ( );
	class AActor* GetMeleeTraceSourceActor ( );
	class UFaceFXAsset* eventGetFaceFXAsset ( );
	struct FRotator GetAimRotation ( );
	int GetSellingPriceForInventory ( class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity );
	unsigned char GetCurrencyTypeInventoryIsSoldIn ( class AWillowInventory* InventoryForSale );
	void UpdateShieldVars ( );
	void GetExpInfo ( int* ExpLevelValue );
	void SetPatsy ( class UITargetable* NewPatsy );
	class UITargetable* GetPatsy ( );
	bool HasShieldVar ( );
	bool HasHomingTargetComponents ( );
	bool IsValidHomingTarget ( );
	float GetTargetingModifier ( );
	bool DisplayParentInfo ( );
	void GetAllBarInfo ( TArray< struct FInfoBarData >* BarData );
	void GetMyBarInfo ( TArray< struct FInfoBarData >* BarData );
	class UImpactDefinition* GetUntouchImpact ( );
	class UImpactDefinition* GetTouchImpact ( );
	bool CanSplash ( );
	void eventTraceTouch ( class AActor* Other, class UComponent* ComponentHit, struct FVector TouchLocation, struct FVector TouchNormal, struct FVector End, struct FVector Start, struct FVector Extent, int TraceFlags, float TouchTime );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	void eventConditionalRemoveHitRegionBehaviors ( TArray< struct FInstanceDataUnion > RemovedData );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	bool HasDesignerAttribute ( struct FName DesignerAttributeName );
	class UInstancedDesignerAttribute* eventGetInstancedDesignerAttribute ( class UAttributeDefinition* Definition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	class UInstancedDesignerAttribute* CreateDesignerAttribute ( class UDesignerAttributeDefinition* Definition, struct FName DesignerAttributeName, unsigned char AttributeDataType );
	void RunMostlyDeadBehaviors ( );
	void MostlyKilledBy ( class APawn* EventInstigator );
	void ClientSetInjuredBleedoutValues ( float InInjuredBaseDelay, float InTimeToBeRevivedMultiplier, int InNumSuccessiveInjuries );
	void PassSecondWindReasonToLeviathan ( class AWillowPlayerController* WPC, unsigned char Reason );
	void ClearSecondWindReason ( );
	void SetSecondWindReason ( unsigned char Reason );
	void PreDeathAnimDone ( );
	bool ShouldPlayPreDeathAnimation ( );
	void PlaySpecialMoveOverride ( );
	bool ShouldDelaySecondWind ( );
	void eventInjuredDeathAnimDone ( );
	void Behavior_GiveInjuredPlayerSecondWind ( unsigned long bDontCountAsKill );
	void RevivePawnHealthAndShield ( );
	void ClearEnemyTargetQueues ( );
	void InjuredDeadInitRagdoll ( );
	void StartInjuredDeathSequence ( );
	void StartInjuredPreDeathSequence ( );
	void InjuredRespawn ( );
	void InjuredSuicide ( );
	void ServerInjuredSuicide ( );
	void ClientStartFade ( float InFadeOpacity, float InFadeDuration, struct FColor InFadeColor );
	void OnCameraFade ( class USeqAct_CameraFade* Action );
	void ClientOnRevived ( );
	void NotifyTeleported ( );
	void SetBeingRevived ( unsigned long bNewBeingRevived, class AWillowPawn* NewReviver );
	class UInjuredDefinition* GetInjuredDefinition ( );
	void SetInjuredDeadState ( unsigned char InjuredDeadStateVal );
	void SetInjuredState ( unsigned char InjuredStateVal );
	void KilledEnemy ( class AWillowPawn* aTargetPawn );
	void eventSwitchToSidearm ( );
	void eventEndInjuredState ( );
	void GoFromInjuredToMostlyDeadClient ( );
	void GoFromInjuredToMostlyDead ( );
	void GoToInjuredAndTargetedClient ( );
	void GoToInjuredAndTargeted ( );
	void GoFromHealthToInjuredClient ( );
	void GoFromInjuredToHealthyClient ( );
	void GoFromInjuredToHealthy ( );
	void ClearPlayerInjuredState ( );
	void SetupPlayerInjuredState ( );
	void ResurrectAtLocation ( class AActor* HoldingLoc, class AActor* TeleportLoc, unsigned char ResurrectReason, class APlayerReplicationInfo* DeadPlayerPRI );
	void PlacePlayerInLevel ( unsigned long bSkipHoldingCell );
	void ResurrectPlayer ( unsigned char ResurrectReason, unsigned long bSkipHoldingCell, class APlayerReplicationInfo* DeadPlayerPRI, class ATravelStation* DestinationStation );
	class ATeleporterDestination* GetBestPlayerPlacementPoint ( unsigned long bLevelTravel );
	void RejuvenateFromInjured ( );
	bool eventHandleHealthDepleted ( class AController* InstigatedBy, class UClass* DamageType, struct FVector HitLocation, class UIDamageCauser* DamageCauser, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void CausePlayerDeath ( unsigned long bFellIntoPlayerKillVolume );
	void OutOfDuelBounds ( );
	bool PlayInjured ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void DestroyInjuredInteraction ( );
	void SetupInjuredInteraction ( );
	void SetBaseEyeheight ( );
	void PreKilledBy ( class APawn* EventInstigator );
	void HeuristicPlayDeath ( class UDamageTypeDefinition* DamageType, unsigned char KillType );
	void eventStopDriving ( class AVehicle* V );
	void eventStartDriving ( class AVehicle* V, unsigned long SkipAnim );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void SetMovementPhysics ( );
	bool IsHardAttached ( );
	void AttachActorTo ( class AActor* AttachedActor, struct FName BoneName );
	void CheckPainSounds ( );
	void PlayPainSound ( );
	void StealAmmo ( class AController* DamageInstigator, class UClass* DamageType );
	void BigBoyTakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, TArray< struct FName > Bones, class UDamagePipeline* Pipeline );
	struct FVector BigBoyTrace ( struct FVector Start, class UIDamageCauser* DamageCauser, struct FTraceHitInfo* HitInfo );
	void AddRadiusDamageSummary ( struct FDamageEventSummary OtherSummary );
	void InitRadiusDamageSummary ( );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	bool eventHealDamage ( float Amount, class AController* Healer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, unsigned long bIsShieldRestore );
	void TookDamageFromFriendly ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	struct FName GetTransformedKillStat ( );
	void FireProjectileDamagedEvents ( class AController* InstigatedBy, class UIDamageCauser* DamageCauser, struct FDamageEventSummary Damage );
	void ProcessDamageTakenSkillEvents ( class UDamagePipeline* Pipeline, class AController* InstigatedBy, class UClass* DamageType );
	void ProcessDamageDealtSkillEvents ( class UDamagePipeline* Pipeline, class AController* VictimController, class UClass* DamageType );
	void TookDamageFromEnemy ( class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	float ModifyParentDamage ( float Damage );
	void eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool PreTestAnimation ( struct FName Sequence, class UAnimSet* AnimSet );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	class USkeletalMeshComponent* GetFaceFXMeshComponent ( );
	void eventSetAudioCueOpenedByFaceFX ( unsigned long Opened );
	bool PlayFaceAnimation ( struct FString FaceFXGroupName, struct FString FaceFXAnimName, class USoundCue* SoundCueToPlay );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void PlayFootImpactEffect ( class UWillowImpactDefinition* ImpactDefinition, int FootDown, unsigned long bPlaySound, unsigned long bReplicate );
	bool PlayWaterImpactEffects ( class UWillowImpactDefinition* ImpactDefinition, unsigned long bReplicate );
	bool DoJump ( unsigned long bUpdating );
	void PlayLanded ( float ImpactVel );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void LastMatineeAnimFinished ( );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	struct FName GetFootstepBone ( int FootstepIndex );
	void TakeFallingDamage ( );
	bool AllowFootstepEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal );
	void PlayFootStepSound ( int FootDown, unsigned long bFirstPerson );
	bool CanReachOutToTarget ( class AActor* Other, float FOV, float flReachRadius );
	void UpdateWeaponOnPossess ( unsigned long bVehicleTransition );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void ApplyAttributeStartingValues ( );
	void GetAttributeStartingValuesFromCharacterClass ( class UWillowCharacterClassDefinition* WillowCharacterClass );
	void SetShieldResourcePoolDefinition ( class UResourcePoolDefinition* Definition, class AResourcePoolManager** ResourcePoolManager );
	void SetHealthResourcePoolDefinition ( class UResourcePoolDefinition* Definition, class AResourcePoolManager** ResourcePoolManager );
	void AddPoolItems ( unsigned long bReadiedItems, TArray< struct FItemPoolInfo >* ItemsToAdd );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void ShouldCrouch ( unsigned long bCrouch );
	void TurnOff ( );
	struct FVector WeaponBob ( float BobDamping );
	bool PoweredUp ( );
	void EquipItem ( class AWillowEquipAbleItem* WEItem );
	void UnequipItem ( class AWillowEquipAbleItem* WEItem, unsigned long bReplace );
	class AWillowEquipAbleItem* GetEquippableItemInSlot ( unsigned char ItemSlot );
	struct FVector GetItemTossVelocity ( unsigned long bWeapon );
	void TossInventory ( class AInventory* Inv, struct FVector ForceVelocity );
	class ADroppedPickup* TossSpecificItem ( class AWillowInventory* Item, struct FVector TossVel );
	void DiscardInventory ( unsigned long bDestroyContents );
	void SetDefaultInventory ( TArray< struct FItemPoolInfo >* NewDefaultInventory );
	void AddDefaultWeapon ( );
	void DropLootOnDeath ( class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition );
	void AddDefaultInventory ( );
	void ClientStopWeaponFiring ( );
	bool StopWeaponFiring ( );
	bool BotFire ( unsigned long bFinished );
	bool StopFiring ( );
	void ResetFreeCamForwardOffset ( );
	void AdjustFreeCamForwardOffset ( unsigned long bIn );
	void ResetCameraScale ( );
	void AdjustCameraScale ( unsigned long bIn );
	void UpdateAndDestroyNonVisibleActor ( class AActor* TargetActor, float TimerLength, float ConfigLifeSpan, struct FName TimerFuncName );
	void EndRagdoll ( );
	void FinishDeathRagdoll ( );
	void StartDeathRagdoll ( unsigned long bAnimationDriven, unsigned long bEnableContactNotification );
	void StartBlendIntoDeathRagdoll ( );
	void TearOffAfterDeathTimer ( );
	void eventPlayDeathAnim ( class USpecialMoveDefinition* DeathAnim, struct FName HitBoneName, struct FVector HitLocation, unsigned long bMotorizedRagdoll );
	bool CanPlayDeathAnim ( );
	int GetTechDeathIndexForDamageType ( class UDamageTypeDefinition* DamageTypeDefinition );
	bool PlayTechDeath ( class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo* HitInfo );
	bool MatchesAtLeastOneTechDeathAnim ( class UDamageTypeDefinition* DamageTypeDef );
	void ApplyExtraRagdollDeathImpulsesAndStatusEffect ( );
	void PlayDying ( class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, struct FVector HitLoc );
	void StopSounds ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	void TellOpportunityPawnIsDead ( unsigned long bKeepCorpse );
	void eventCheckGoToDyingState ( );
	void ResetHitRegionHealth ( class UBodyHitRegionDefinition* HitRegion );
	void PlayHealingReaction ( struct FDamageReactionData* Data );
	void PlayDamageReaction ( struct FName HitBone, unsigned long bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum );
	void PlayBloodSplatter ( class UBodyHitRegionDefinition* HitRegion, struct FVector HitLocation, struct FVector Momentum, float DamageSeverityPercent );
	void PlayReplicatedDamage ( class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, unsigned long bPlayDeath );
	void PlayHealingHit ( class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void PlayHit ( class APawn* SomePawn, struct FVector HitLocation, class UClass* inDamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void SetupImpactsForPlayHit ( class APawn* SomePawn, unsigned long bNoBlood, class UWillowImpactDefinition* WillowImpactDef, class UDamagePipeline* Pipeline, struct FVector* HitLocation, struct FVector* ShotDirection, struct FTraceHitInfo* HitInfo );
	void UpdatePlayHitInfo ( unsigned long bNoBlood, class UDamagePipeline* Pipeline, struct FVector* HitLocation, struct FVector* ShotDirection );
	void UpdatePlayHitEffectCounters ( );
	void ResetShieldColorToDefault ( );
	void SetShieldColor ( struct FColor NewShieldColor );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	bool eventCalcInjuredDeadCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool eventCalcInjuredCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcThirdPersonCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void CalcFreeCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcCameraBehind ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void ReloadWeapon ( unsigned char FireModeNum );
	struct FName GetCurrentAimOffsetNodeName ( );
	void SetAimOffsetProfile ( struct FName ProfileName );
	void eventReattachWeapons ( );
	void WeaponChanged ( class AWeapon* TheWeapon, unsigned long bOffHandWeapon );
	bool RequestChangeWeaponVisibility ( unsigned long bIsVisible );
	void OnGearLikenessFadeOutEffectFinished ( class UObject* EffectTarget );
	float StartGearLikenessFadeOutEffect ( unsigned char LikenessOf, unsigned char GroupIndex );
	void StartGearLikenessFadeInEffect ( unsigned char LikenessOf, unsigned char GroupIndex );
	void SetHolsteredGearVisibility ( unsigned long bWeaponsVisible, unsigned long bItemsVisible );
	void SetHolsteredWeapon ( int SlotIdx, class AWillowWeapon* NewWeapon, unsigned long bRefreshComponents );
	void ReplaceHolsteredWeapon ( class AWillowWeapon* OldWeapon, class AWillowWeapon* NewWeapon, unsigned long bRefreshComponents );
	void SetUpperBodyMovementBlendState ( unsigned long bBlendEnabled );
	void UpdateAnimSets ( );
	void eventTryOffHandWeaponChanged ( );
	void eventTryWeaponChanged ( );
	bool ShouldAutoReadyMissionWeapon ( );
	void WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	bool PlayingInjuredSMD ( );
	class USpecialMoveDefinition* GetBodyWeaponSMD ( unsigned char BodyAction, class AWeapon* TheWeapon );
	void FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication, int Index );
	void FixedView ( struct FString VisibleMeshes );
	void SetFixedView ( unsigned long Enabled, struct FString VisibleMeshes );
	void SetOwnerVisibility ( unsigned long bVisible );
	void SetInstanceDataOwnerVisibility ( unsigned long bVisible );
	void SetWeaponOwnerVisibility ( unsigned long bOwnerVisible );
	void SetWeaponVisibility ( unsigned long bWeaponVisible );
	void eventSetWeaponParticleAttachmentVisibility ( unsigned long bParticlesVisible );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	struct FVector GetPawnViewLocation ( );
	void SetHand ( unsigned char NewWeaponHand );
	void OnShieldFull ( );
	void OnShieldDepleted ( class AController* DamageInstigator, unsigned char DamageType );
	bool IsFullyArmored ( );
	unsigned char GetDamageSurfaceTypeFromHit ( struct FTraceHitInfo* HitInfo );
	unsigned char GetDefaultDamageSurfaceType ( );
	float AdjustMomentumForSurfaceType ( float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo* HitInfo );
	void NotifyDamageTaken ( struct FDamageEventSummary* DamageSummary );
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage ( class AController* InstigatedBy, struct FTraceHitInfo HitInfo );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, float* InDamage, float* DamageSeverityPercent, struct FVector* Momentum, struct FTraceHitInfo* HitInfo );
	void AllPawnFloors ( );
	void EnableProtectionTimer ( );
	bool ShieldAbsorbedAmmo ( class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb );
	float GetIntrinsicArmor ( );
	bool TryFullBodyGib ( float Damage, class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector HitLocation, struct FVector Momentum );
	void ReplicateDamageEffect ( class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, unsigned long bWasHeal );
	void HealDamageOnHitRegion ( class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary );
	void AddDamageToHitRegion ( class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, struct FVector HitLocation, struct FVector HitMomentum, struct FDamageEventSummary* DamageSummary );
	void GetHitRegionHealthValues ( class UBodyHitRegionDefinition* HitRegion, float* Health, float* MaxHealth );
	void SetShieldStrength ( float ShieldValue );
	float GetMaxShieldStrength ( );
	float GetShieldStrength ( );
	void eventBeganWalking ( unsigned char PreviousPhysics );
	void eventStoppedWalking ( );
	void eventBeganFalling ( unsigned char PreviousPhysics );
	void eventStoppedFalling ( );
	void OnEquippedItemsChange ( );
	void BodySelectClass ( class UBodyClassDefinition* InBodyClass );
	void DetachParticleSystem ( class UParticleSystemComponent* PSC );
	void eventPlayRagDollEffect ( class UPhysicalMaterial* HitMaterial, struct FVector HitLocation, struct FVector HitNormal );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactSide, struct FCollisionImpactData* RigidCollisionData );
	void GetAnims ( TArray< class UGearboxAnimDefinition* >* OutAnims );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void InitializeScrapedStanceProviders ( );
	void InitializeBehaviorProviders ( );
	void SetupSkeletalMeshPhysics ( );
	void SetupSkeletalMeshPhysicsForPhysXEffects ( );
	void SetPawnAnimInfo ( );
	void SetDeathDefinition ( class UBodyClassDeathDefinition* DeathDef );
	void ApplyBodyClassStartingValues ( );
	void DestroyShieldArmor ( );
	void eventDestroyed ( );
	void RemoveWaypoints ( );
	void eventSetLookAtTarget ( class AActor* NewTarget, struct FVector NewOffset );
	void eventPostRenderForAlways ( class APlayerController* PC, class UCanvas* Canvas, class AWillowHUD* WHUD );
	void UpdateClientFloorValue ( );
	struct FVector GetDefaultMeshOffset ( );
	void ValidateHitRegions ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	int GetNextExpLevelPoints ( );
	bool IsInjuredDead ( );
	bool IsStaggered ( );
	void RemoveAllStatusEffects ( );
	void FullyReplenishShields ( );
	void FullyReplenishLife ( );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStageForSpawnedInventory ( int NewInventoryGameStage );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStageForSpawnedInventory ( );
	int GetGameStage ( );
	void SetAimAtVector ( struct FVector NewAimAtVector );
	void SetAimAtActor ( class AActor* NewAimAtActor );
	bool IsPawnPursuitDebugEnabled ( );
	void TogglePawnPursuitDebug ( );
	void RefreshPawnGearLikenessComponents ( );
	void InitializePawnMeshes ( );
	void eventBuildScriptAnimSetList ( );
	bool eventRestoreAnimSetsToDefault ( );
	bool IsReloading ( );
	bool IsSplitScreen ( );
	void InitializeRBPhysics ( );
	unsigned char GetDefaultPhysics ( );
	void SetDefaultPhysics ( );
	unsigned char GetOpinion ( class UObject* Other );
};

UClass* AWillowPawn::pClassPointer = NULL;

// Class WillowGame.WillowAIPawn
// 0x02C0 (0x1324 - 0x1064)
class AWillowAIPawn : public AWillowPawn
{
public:
	struct FPointer                                    VfTable_IIMissionDirector;                        		// 0x1064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIFocusable;                              		// 0x1068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IITimerBehavior;                          		// 0x106C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IICustomizable;                           		// 0x1070 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UCylinderComponent* >                SecondaryCylinders;                               		// 0x1074 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UPrimitiveComponent*                         LastEncroachedPrimitive;                          		// 0x1080 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AWillowMind*                                 MyWillowMind;                                     		// 0x1084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APopulationPoint*                            MySpawnPoint;                                     		// 0x1088 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UWillowClanDefinition*                       ClanDef;                                          		// 0x108C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AWillowAIPawn*                               SpawnParent;                                      		// 0x1090 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ExpLevel;                                         		// 0x1094 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GameStageForSpawnedInventory;                     		// 0x1098 (0x0004) [0x0000000000000000]              
	int                                                AwesomeLevel;                                     		// 0x109C (0x0004) [0x0000000000000000]              
	float                                              ExperiencePointMultiplier;                        		// 0x10A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExperiencePointMultiplierBaseValue;               		// 0x10A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExperiencePointMultiplierModifierStack;           		// 0x10A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                NumLevelUps;                                      		// 0x10B4 (0x0004) [0x0000000000000000]              
	struct FName                                       MountedInstanceDataName;                          		// 0x10B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      TransformType;                                    		// 0x10C0 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      bInjured;                                         		// 0x10C1 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      bUsable[ 0x2 ];                                   		// 0x10C2 (0x0002) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCostsToUse[ 0x2 ];                               		// 0x10C4 (0x0002) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CostsToUseType[ 0x2 ];                            		// 0x10C6 (0x0002) [0x0000000000002000]              ( CPF_Transient )
	class UAIClassDefinition*                          AIClass;                                          		// 0x10C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMigratedAIClass : 1;                             		// 0x10CC (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bMigratedAIClass2 : 1;                            		// 0x10CC (0x0004) [0x0000000000020003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bOverrideAutoAimRange : 1;                        		// 0x10CC (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bOverrideAutoAimOrigin : 1;                       		// 0x10CC (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDefaultInventoryAdded : 1;                       		// 0x10CC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDebugUsingAIInspector : 1;                       		// 0x10CC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      DoesVehicleAllowMeToDropLoot : 1;                 		// 0x10CC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bLeaping : 1;                                     		// 0x10CC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDodging : 1;                                     		// 0x10CC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bDodgeLeft : 1;                                   		// 0x10CC (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDodgeProjectile : 1;                             		// 0x10CC (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIsCharging : 1;                                  		// 0x10CC (0x0004) [0x0000000000002020] [0x00000800] ( CPF_Net | CPF_Transient )
	unsigned long                                      bInKnockback : 1;                                 		// 0x10CC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bIsPatrolling : 1;                                		// 0x10CC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bPerchAttached : 1;                               		// 0x10CC (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bSkelUpdate_SkipWhileIdle : 1;                    		// 0x10CC (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bCurrentlyThrottled : 1;                          		// 0x10CC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bHideInfoOnHud : 1;                               		// 0x10CC (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bPlayingRotationAudio : 1;                        		// 0x10CC (0x0004) [0x0000000000002020] [0x00040000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisableServerRotation : 1;                       		// 0x10CC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bAwardedExperienceForKill : 1;                    		// 0x10CC (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bHeadLookOnHold : 1;                              		// 0x10CC (0x0004) [0x0000000000002020] [0x00200000] ( CPF_Net | CPF_Transient )
	float                                              AutoAimRangeOverride;                             		// 0x10D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AutoAimOriginOverride;                            		// 0x10D4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInstanceConstant*                   DebugPawnMarkerInst;                              		// 0x10E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URB_BodyInstance*                            PhysicsVehicleCollisionBody;                      		// 0x10E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URB_BodySetup*                               PhysicsVehicleCollisionBodySetup;                 		// 0x10E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AVehicle*                                    LastRunOverByVehicle;                             		// 0x10EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastRunOverByWheelIndex;                          		// 0x10F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRunOverByTime;                                		// 0x10F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FRagdollDeathImpulseStruct >        RagdollDeathExtraImpulses;                        		// 0x10F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UStatusEffectDefinition*                     RagdollDeathExtraStatusEffect;                    		// 0x1104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     PlayerMaster;                                     		// 0x1108 (0x0004) [0x0000000000000000]              
	struct FString                                     MasteredDisplayName;                              		// 0x110C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class APlayerReplicationInfo*                      PlayerMasterPRI;                                  		// 0x1118 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowPlayerController*                     ThoughtlockMaster;                                		// 0x111C (0x0004) [0x0000000000000000]              
	float                                              EnteredVehicleTime;                               		// 0x1120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExitedVehicleTime;                                		// 0x1124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FStaggerStateData                           StaggerState;                                     		// 0x1128 (0x0030) [0x0000000000082020]              ( CPF_Net | CPF_Transient | CPF_Component )
	class UWillowStaggerAnimNodeBlend*                 StaggerRecoveryBlend;                             		// 0x1158 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x115C (0x0004) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                          		// 0x1160 (0x0040) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x11A0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UMissionDirectivesDefinition*                MissionDirectives;                                		// 0x11A4 (0x0004) [0x0000000004000021]              ( CPF_Edit | CPF_Net | CPF_EditInline )
	class UParticleSystemComponent*                    MissionDirectorParticle;                          		// 0x11A8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              LeapGravity;                                      		// 0x11AC (0x0004) [0x0000000000000000]              
	float                                              LeapStartTime;                                    		// 0x11B0 (0x0004) [0x0000000000000000]              
	float                                              LeapTotalTime;                                    		// 0x11B4 (0x0004) [0x0000000000000000]              
	struct FVector                                     LeapStartLoc;                                     		// 0x11B8 (0x000C) [0x0000000000000000]              
	struct FVector                                     LeapStartVelocity;                                		// 0x11C4 (0x000C) [0x0000000000000000]              
	float                                              NextDodgeTime;                                    		// 0x11D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowFormationComponent*                   CurrentFormation;                                 		// 0x11D4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FVector                                     CoverMantleLerpDelta;                             		// 0x11D8 (0x000C) [0x0000000000000000]              
	class UWillowCoverComponent*                       CoverComponent;                                   		// 0x11E4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FWillowCoverState                           MyCoverState;                                     		// 0x11E8 (0x0014) [0x0000000000000020]              ( CPF_Net )
	class UAnimNodeSpecialMoveBlend*                   CoverBlendNode;                                   		// 0x11FC (0x0004) [0x0000000000000000]              
	TArray< class APawn* >                             PawnsUsingMe;                                     		// 0x1200 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UMissionDefinition* >                MissionsAcceptedByPrimaryUser;                    		// 0x120C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APerch*                                      CurrentPerch;                                     		// 0x1218 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FPerchStateData                             PerchState;                                       		// 0x121C (0x0030) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UProjectileDefinition*                       PerchProjectile;                                  		// 0x124C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FDamageLocationData                         DamageLocationInfo;                               		// 0x1250 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FTimerBehaviorUserState                     BehaviorTimers;                                   		// 0x1260 (0x0024) [0x0000000000000000]              
	float                                              ItemTossSpeed;                                    		// 0x1284 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class AActor* >                            ItemTossTargetActors;                             		// 0x1288 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UInteractionIconDefinition*                  InteractionIconOverride[ 0x2 ];                   		// 0x1294 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                CostsToUseAmount[ 0x2 ];                          		// 0x129C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              SkelUpdate_FullThrottleDistance;                  		// 0x12A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkelUpdate_FullThrottleTime;                      		// 0x12A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkelUpdate_MinThrottleDistance;                   		// 0x12AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkelUpdate_MaxThrottleDistance;                   		// 0x12B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkelUpdate_MinThrottleTime;                       		// 0x12B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkelUpdate_MaxThrottleTime;                       		// 0x12B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastThrottleCheck;                                		// 0x12BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ThrottledDeltaTime;                               		// 0x12C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdateTime;                                   		// 0x12C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSplineAnimPathData                         SAP_Data;                                         		// 0x12C8 (0x0010) [0x0000000000000020]              ( CPF_Net )
	class UAnimNodeSequence*                           SAP_AnimSeq;                                      		// 0x12D8 (0x0004) [0x0000000000000000]              
	float                                              SAP_TotalAnimDistance;                            		// 0x12DC (0x0004) [0x0000000000000000]              
	float                                              SAP_TotalSplineDistance;                          		// 0x12E0 (0x0004) [0x0000000000000000]              
	float                                              SAP_CurrentSplineDistance;                        		// 0x12E4 (0x0004) [0x0000000000000000]              
	float                                              SAP_LastAnimTime;                                 		// 0x12E8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    SAP_TotalRotationOffset;                          		// 0x12EC (0x000C) [0x0000000000000000]              
	struct FVector                                     CachedCrawlerFloorAdjust;                         		// 0x12F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCrawlerFloorAdjustTime;                       		// 0x1304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedCrawlerFloorAdjustHeight;                   		// 0x1308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RevivePct;                                        		// 0x130C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    ServerRotation;                                   		// 0x1310 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UWillowClientNavigationHandle*               ClientNavigationHandle;                           		// 0x131C (0x0004) [0x0000000000000000]              
	int                                                NameListIndex;                                    		// 0x1320 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4634 ];

		return pClassPointer;
	};

	void ApplyExtraRagdollDeathImpulsesAndStatusEffect ( );
	void RegisterExtraDeathImpulse ( struct FVector Impulse, struct FVector Offset, struct FName BoneName, unsigned long VelocityRatherThanForce, unsigned long TransformImpulseByVelocityDirection );
	void OnPlayerClosedMissionUI ( class AWillowPlayerController* ThePlayer );
	void OnPlayerOpenedMissionUI ( class AWillowPlayerController* ThePlayer );
	void SetSplineAnimPath ( class ASplineActor* StartSpline, struct FName AnimSeqName, unsigned long bReversePath );
	void UpdateClientFloorValue ( );
	class UGearboxNavigationHandle* GetNavigationHandle ( );
	bool CanTalk ( );
	void ResetDefaultRotationRate ( );
	void UpdateLookAtTarget ( );
	void PlayFootStepSound ( int FootDown, unsigned long bFirstPerson );
	void ConditionalCreateDebugPawnMarkerInst ( class UMaterial* ParentMaterial );
	bool IsDebugAIRotationEnabled ( );
	void ToggleDebugAIRotation ( );
	bool IsDebugAIFlightEnabled ( );
	void ToggleDebugAIFlight ( );
	void PlayTaunt ( );
	void eventCancelTauntTimer ( );
	void eventStartTauntTimer ( );
	void SetRevivePct ( float NewRevivePct );
	float GetRevivePct ( );
	void ClearPlayerInjuredState ( );
	struct FVector GetItemTossVelocity ( unsigned long bWeapon );
	class AActor* GetClosestTossTarget ( );
	void OnAISetItemTossTarget ( class UWillowSeqAct_AISetItemTossTarget* inAction );
	void eventOnTimerEvent ( unsigned char EventType, struct FBehaviorParameters EventData );
	bool SetTimerState ( unsigned char TimerId, struct FBehaviorTimerState TimerState );
	bool GetTimerState ( unsigned char TimerId, struct FBehaviorTimerState* TimerState );
	float GetTimeSeconds ( );
	void GetMeleeTraceSourceLocationAndRotation ( struct FVector* OutTraceStart, struct FRotator* OutTraceStartRotation );
	unsigned char TranslateToDenStat ( unsigned char Type );
	void RemoveDenStat ( unsigned char StatType );
	void AddDenStat ( unsigned char StatType );
	class UBodyClassDefinition* GetHitLocationBody ( );
	void AddHitLocation ( struct FVector NewHitLoc );
	void Uncloak ( );
	void Cloak ( );
	void Behavior_ChangeUsabilityCost ( unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType );
	void SetUsable ( unsigned long bNewUsable, class UActorComponent* UsedComponent, unsigned char UsedType );
	void Behavior_ChangeUsability ( unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType );
	bool IsNeutral ( class UObject* anObject );
	bool IsEnemy ( class UObject* anObject );
	void PlayUnprovokedAnim ( );
	void PlayProvokedAnim ( class AActor* Provoker );
	bool HoldingCombatPerch ( );
	void MatchCombatPerch ( class AWillowProjectile* Projectile );
	void UpdatePerchState ( class APerch* PerchBase );
	void FillInPerchData ( class APerch* PerchBase );
	void DropCombatPerch ( );
	bool HasAnyMissionsForPlayer ( );
	struct FVector GetMissionDirectorLocation ( );
	int GetAllDirectorData ( TArray< struct FMissionDirectorData >* OutData );
	void ReleaseAIFromMatinee ( );
	void HoldAIForMatinee ( unsigned long bDemiGod );
	void LastMatineeAnimFinished ( );
	void eventMAT_FinishAIGroup ( );
	void eventMAT_BeginAIGroup ( struct FVector StartLoc, struct FRotator StartRot, unsigned char AlignmentType, float LerpTime, unsigned long bDemiGod );
	void Dismount ( );
	class AWillowAIPawn* GetMount ( );
	bool IsMounted ( );
	void MatchTransform ( struct FVector StartLoc, struct FRotator StartRot );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void GetObstacleInfo ( struct FObstacleData* Data );
	bool GetMagnetData ( struct FVector* MagnetLoc, struct FVector* MagnetVel );
	void SetObstacleVelocity ( struct FVector* NewVelocity );
	bool CanAvoidObstacle ( struct FObstacleData* Obstacle );
	bool CanAvoidObstacles ( );
	class APawn* GetParent ( );
	bool UseRootOnlyYawRotation ( );
	bool SetStance ( class UStanceTypeDefinition* NewStance );
	void SetDefaultStance ( );
	unsigned char GetMoveStyle ( );
	bool CanUseAimOffsets ( );
	bool CanTurn ( );
	void DoneTurning ( );
	struct FVector GetFocusScreenOffset ( );
	float GetFocusRadius ( );
	struct FVector GetFocusLocation ( );
	void EndFocus ( class APawn* User );
	void BeginFocus ( class APawn* User );
	class UMissionDefinition* GetAcceptedMissionToPlayDismissalDialogFor ( );
	void PlayDismissalDialog ( class APawn* PlayerLeavingMenu );
	void PlayMissionTurnedInDialog ( class APawn* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn );
	void PlayLingeringDialog ( class APawn* PlayerInMenu );
	void PlayOnUseDialog ( class APawn* PlayerEnteringMenu );
	void OnUsersAreLingering ( );
	void StartLingerTimer ( );
	void ClearMissionsAcceptedByPrimaryUser ( );
	void eventOnNewPrimaryUser ( );
	class APawn* GetPrimaryUser ( );
	void EndUse ( class APawn* User );
	void BeginUse ( class APawn* User );
	void FireOnUnableToAffordBehaviors ( unsigned char OnUsedOutput, class APawn* User, class UActorComponent* UsedComponent, unsigned char UsedType );
	void NotifyUserCouldNotAffordAttemptedUse ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	void FireOnUsedBehaviors ( unsigned char OnUsedOutput, class APawn* User, class UActorComponent* UsedComponent, unsigned char UsedType );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	bool IsComponentUsable ( class UActorComponent* UsableComponent, unsigned char UsedType );
	void CountMyMissionsByState ( class AWillowPlayerController* WPC, int* NumEligibleMissions, int* NumInProgressMissions, int* NumRedeemableMissions );
	void eventDeactivateMissionDirectorParticle ( );
	void eventSetMissionDirectorParticle ( );
	void eventMissionStatusChanged ( );
	void OnPlayerTurnedInMission ( class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn );
	void OnPlayerAcceptedMission ( class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted );
	int GetInProgressMissions ( TArray< class UMissionDefinition* >* InProgressMissions );
	int GetEligibleMissions ( TArray< class UMissionDefinition* >* EligibleMissions );
	int GetRedeemableMissions ( TArray< class UMissionDefinition* >* RedeemableMissions );
	void eventAddMissionDirective ( unsigned long bRegisterDirector, struct FMissionDirectorData* NewDirective );
	void RegisterMissionDirector ( );
	bool eventSpecialMoveThruEdge ( unsigned char Type, int Dir, struct FVector MoveStart, struct FVector MoveDest, class AActor* RelActor, int RelItem );
	void DoCoverMantleLerp ( );
	void MantleFinished ( );
	class UBodyClassDefinition* GetCoverBody ( );
	void SetCoverStance ( class UWillowCoverStanceDefinition* Stance );
	void SetCoverSlot ( struct FCoverInfo* NewCover );
	void SetCoverAction ( struct FName Action );
	bool IsInCover ( );
	void FinishKnockback ( );
	void StopKnockback ( );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void CheckCharging ( class AActor* ChargeActor );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void OnShieldDepleted ( class AController* DamageInstigator, unsigned char DamageType );
	void HardFlinchFinished ( );
	void PlayHardFlinch ( struct FVector HitLocation, class UBodyHitRegionDefinition* HitRegion, class AController* InstigatedBy );
	void SetInjuredDialogLoop ( );
	void CheckInjured ( struct FVector HitLocation, class UBodyHitRegionDefinition* HitRegion, unsigned long bDOT, class AController* InstigatedBy );
	bool CanDoMovementDodges ( );
	void SetMovementDodgeTimer ( );
	void DoMovementDodge ( );
	void PlayDodgeAnimation ( class UWillowAnimDefinition* DodgeAnim, struct FName CallbackName );
	void TryToDodge ( struct FVector BulletLoc, class AActor* shooter, unsigned long bProjectile );
	bool CanDodge ( unsigned long bProjectile );
	class UBodyClassDefinition* GetDodgeBody ( );
	void PerformDodge ( );
	void DoneDodging ( );
	float StartLeapAtActor ( class AActor* Target, struct FTrajectoryData Options );
	float StartLeap ( struct FVector StartLoc, struct FVector EndLoc, float LeapSpeed, float LeapAngle );
	struct FRotator GetLeapRotation ( struct FVector DestLoc );
	void EndSpawnStyleLerp ( );
	void StartSpawnStyleLerp ( );
	void GetSpawnStyleLerpInfo ( struct FVector* FinalLoc, float* TimeDelta );
	float GetFlyNavMeshCheckDist ( );
	void PlacePhysicsBody ( );
	void SetupRagdollPhysics ( );
	class UStaggerDefinition* GetStaggerSettings ( );
	void eventPlayStagger ( );
	void UnStagger ( );
	void eventStagger ( class APawn* StaggerInstigator );
	void VehicleCollideFlinchFinished ( );
	void PlayVehicleCollideFlinch ( );
	bool CanBeStaggered ( );
	void eventHitByVehicle ( class AVehicle* Collider );
	void TriggerHitByVehicleDialog ( class AVehicle* Vehicle );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void SetVehicleRBActorEnabled ( unsigned long NewValue );
	void eventStopDriving ( class AVehicle* V );
	void eventStartDriving ( class AVehicle* V, unsigned long SkipAnim );
	bool GetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	void SetInfoBarVisibility ( unsigned long bVisible );
	bool HideTargetInfoOnHud ( class APawn* HUDOwner );
	bool IsChampion ( );
	bool IsBoss ( );
	struct FName GetTransformedKillStat ( );
	void eventGetTargetName ( struct FString* TargetName );
	struct FString GetTransformedName ( );
	bool SuggestLeapVelocity ( class AActor* Target, float flLeapSpeed, struct FVector* vecLeapVelocity );
	void PlayDying ( class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, struct FVector HitLoc );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	bool CanPlayDeathAnim ( );
	void eventTraceTouch ( class AActor* Other, class UComponent* ComponentHit, struct FVector TouchLocation, struct FVector TouchNormal, struct FVector End, struct FVector Start, struct FVector Extent, int TraceFlags, float TouchTime );
	bool DamageCanCauseHardFlinch ( );
	void TookDamageFromFriendly ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool IsDemigodMode ( );
	void CrushedByActor ( class AActor* Other );
	void AILevelUp ( );
	int GetNumLevelUps ( );
	bool HasStatusEffectForDamageType ( unsigned char DamageType );
	unsigned char GetDefaultPhysics ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventPostRenderForAlways ( class APlayerController* PC, class UCanvas* Canvas, class AWillowHUD* WHUD );
	class UProjectileDefinition* GetCurrentProjectile ( );
	class AWillowGrenadeMod* GetGrenadeMod ( );
	void AddDefaultWeapon ( );
	void DiscardInventory ( unsigned long bDestroyContents );
	bool OverrideDestroyInventoryContents ( unsigned long bDestroyContents );
	void PostStartingInventoryAdded ( );
	void SavedInventoryAddedFromPopulationSystem ( );
	void AddDefaultInventory ( );
	void InitializeBehaviorProviders ( );
	void eventDestroyed ( );
	void BodySelectClass ( class UBodyClassDefinition* InBodyClass );
	void ApplyBalanceDefinitionCustomizations ( );
	void UpdatePlayThroughMaterial ( );
	void UpdateClan ( );
	void SetupInitialDestination ( class AActor* InitialDestination );
	void AttachObstacleDebugComponent ( );
	void PostSpawn ( );
	void UpdatePlayerMaster ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void SetSecondaryCollisionEnabled ( unsigned long bEnabled );
	void eventReplicatedEvent ( struct FName VarName );
	bool AllowFallbackToDefaultCustomizations ( );
	void RefreshCustomizationsOnInstanceData ( );
	struct FName GetCustomizableName ( );
	void GetCustomizableInstanceDataSets ( TArray< struct FPointer >* OutData );
	class UCustomizationDefinition* GetDesiredCustomizationOfType ( class UClass* Type );
	void CustomizationApplied ( class UCustomizationData* Data );
	bool IsInjured ( );
	bool IsTargetable ( unsigned long bIgnoreCloakAbility );
	bool IsStaggered ( );
	void RemoveAllStatusEffects ( );
	void FullyReplenishShields ( );
	void FullyReplenishLife ( );
	struct FVector GetMagnetismOrigin ( );
	float GetMagnetismRange ( );
	bool IsAutoAimTarget ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStageForSpawnedInventory ( int NewInventoryGameStage );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStageForSpawnedInventory ( );
	class AWillowAIPawn* GetAWillowAIPawn ( );
};

UClass* AWillowAIPawn::pClassPointer = NULL;

// Class WillowGame.WillowAICranePawn
// 0x0058 (0x137C - 0x1324)
class AWillowAICranePawn : public AWillowAIPawn
{
public:
	unsigned long                                      bUseCrane : 1;                                    		// 0x1324 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	struct FName                                       CraneSplineName;                                  		// 0x1328 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CraneSingleBoneName;                              		// 0x1330 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWillowSkelControlSpline*                    CraneSpline;                                      		// 0x1338 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      CraneSingleBone;                                  		// 0x133C (0x0004) [0x0000000000000000]              
	float                                              CraneMidPointPercent;                             		// 0x1340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CraneMidPointOffset;                              		// 0x1344 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CraneEndPointOffset;                              		// 0x1350 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CraneMinDot;                                      		// 0x135C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CraneMinDistance;                                 		// 0x1360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CraneMaxDistance;                                 		// 0x1364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CraneHeightScale;                                 		// 0x1368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowPawn*                                 MyDummy;                                          		// 0x136C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     GoalLocation;                                     		// 0x1370 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4636 ];

		return pClassPointer;
	};

	void Behavior_Destroy ( );
	void DetachDummy ( );
	void AttachDummy ( );
	void FindDummy ( );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void ApplyBodyClassStartingValues ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
};

UClass* AWillowAICranePawn::pClassPointer = NULL;

// Class WillowGame.WillowPlayerPawn
// 0x02DC (0x1340 - 0x1064)
class AWillowPlayerPawn : public AWillowPawn
{
public:
	struct FPointer                                    VfTable_IIProtectionTimer;                        		// 0x1064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIWeatherBehavior;                        		// 0x1068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIGFxActorMovie;                          		// 0x106C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IICustomizable;                           		// 0x1070 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              LastCombatActionTime;                             		// 0x1074 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UGearboxSkeletalMeshComponent*               Arms;                                             		// 0x1078 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   ArmsMaterialInstance;                             		// 0x107C (0x0004) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         TeamColorForMeshMaterialInstances;                		// 0x1080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     IronsightsTranslation;                            		// 0x108C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    IronsightsRotation;                               		// 0x1098 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bFirstPersonVisibilityLocked : 1;                 		// 0x10A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInjuredIsCameraAnimPlaying : 1;                  		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInjuredDeadHasRagdolled : 1;                     		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAwaitingInjuredRespawn : 1;                      		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInjuredDeadCameraActive : 1;                     		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bLowHealth : 1;                                   		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bUpdateAfterMapCommit : 1;                        		// 0x10A4 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bActionSkillWasRunning : 1;                       		// 0x10A4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bGrabWeaponPickup : 1;                            		// 0x10A4 (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      bWasFalling : 1;                                  		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsProtectionTimerActive : 1;                     		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bBoundaryWarningOn : 1;                           		// 0x10A4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bLastMenuMeshHidden : 1;                          		// 0x10A4 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bAdjustCameraAnimByEyeHeight : 1;                 		// 0x10A4 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bViewingThirdPersonMenu : 1;                      		// 0x10A4 (0x0004) [0x0000000000002020] [0x00004000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bViewingStatusMenu : 1;                           		// 0x10A4 (0x0004) [0x0000000000002020] [0x00008000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsAwaitingRespawn : 1;                           		// 0x10A4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bAwaitingRespawn : 1;                             		// 0x10A4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bAwaitingRespawnZoomInToPlayer : 1;               		// 0x10A4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bValidControllerAndPRI : 1;                       		// 0x10A4 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bCreatingMenuMesh : 1;                            		// 0x10A4 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bForceInjuredCrouch : 1;                          		// 0x10A4 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bCanSprintWhileInjured : 1;                       		// 0x10A4 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bInjuredPreDeathCameraActive : 1;                 		// 0x10A4 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bPlayedInjuredPreDeath : 1;                       		// 0x10A4 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bInjuredPreDeathRecoveryCameraActive : 1;         		// 0x10A4 (0x0004) [0x0000000000002020] [0x02000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bMaxHealthClipModifierActive : 1;                 		// 0x10A4 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bRefreshHolster : 1;                              		// 0x10A4 (0x0004) [0x0000000000000020] [0x08000000] ( CPF_Net )
	unsigned long                                      bIsCurrentlyInfected : 1;                         		// 0x10A4 (0x0004) [0x0000000000000000] [0x10000000] 
	int                                                LastAnimSetsArmsCount;                            		// 0x10A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   CustomizationHeadMaterialInstance;                		// 0x10AC (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   CustomizationBodyMaterialInstance;                		// 0x10B0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   CustomizationArmsMaterialInstance;                		// 0x10B4 (0x0004) [0x0000000000000000]              
	class UCustomizationData*                          HeadCustomizationData;                            		// 0x10B8 (0x0004) [0x0000000000000000]              
	class UCustomizationData*                          SkinCustomizationData;                            		// 0x10BC (0x0004) [0x0000000000000000]              
	float                                              InjuredStartTime;                                 		// 0x10C0 (0x0004) [0x0000000000000000]              
	float                                              InjuredDeadCameraStartTime;                       		// 0x10C4 (0x0004) [0x0000000000000000]              
	float                                              InjuredDeadCameraEndTime;                         		// 0x10C8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    InjuredDeadRotation;                              		// 0x10CC (0x000C) [0x0000000000000000]              
	struct FVector                                     InjuredDeadCameraLoc;                             		// 0x10D8 (0x000C) [0x0000000000000000]              
	struct FVector                                     InjuredDeadCameraOffset;                          		// 0x10E4 (0x000C) [0x0000000000000000]              
	float                                              InjuredViewDropCycleTime;                         		// 0x10F0 (0x0004) [0x0000000000000000]              
	float                                              InjuredViewDropStrength;                          		// 0x10F4 (0x0004) [0x0000000000000000]              
	float                                              InjuredMouseSensitivityMultiplier;                		// 0x10F8 (0x0004) [0x0000000000000000]              
	float                                              HitByVehicleTime;                                 		// 0x10FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TransitionLandmarkOffset;                         		// 0x1100 (0x000C) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           ArmsDynamicLightEnvironment;                      		// 0x110C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastKillTime;                                     		// 0x1110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              KillStreakScore;                                  		// 0x1114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FExtraMuzzleEffect                          ExtraMuzzleEffect_LastShot;                       		// 0x1118 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ShouldGetResurrected;                             		// 0x1120 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              ShouldGetResurrectedBaseValue;                    		// 0x1124 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShouldGetResurrectedModifierStack;                		// 0x1128 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PlayerFallDuration;                               		// 0x1134 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        AttachedMeleeWeaponMesh;                          		// 0x1138 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MinimumHealthMaintainedByProtectionTimer;         		// 0x113C (0x0004) [0x0000000000000000]              
	struct FVector                                     LocationFellFrom;                                 		// 0x1140 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SprintExhaustion;                                 		// 0x114C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FriendlyFireDamageAccepted;                       		// 0x1150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FriendlyFireDamageAcceptedBaseValue;              		// 0x1154 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                FriendlyFireDamageAcceptedModifierStack;          		// 0x1158 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              FriendlyFireDamageMultiplier;                     		// 0x1164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FriendlyFireDamageMultiplierBaseValue;            		// 0x1168 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                FriendlyFireDamageMultiplierModifierStack;        		// 0x116C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSpeedTravelData >                  SpeedTravelInfo;                                  		// 0x1178 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	int                                                NumWarningZones;                                  		// 0x1184 (0x0004) [0x0000000000000000]              
	struct FVector                                     ArmUpdateLocation;                                		// 0x1188 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ArmUpdateRotation;                                		// 0x1194 (0x000C) [0x0000000000000000]              
	struct FVector                                     ArmsLeadingRotationHistory[ 0xA ];                		// 0x11A0 (0x0078) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NextArmsLeadingRotationIndex;                     		// 0x1218 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastResurrectReason;                              		// 0x1219 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InjuredPreDeathState;                             		// 0x121A (0x0001) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LastArmsLeadingOffset;                            		// 0x121C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      LastPlayerDiedPRI;                                		// 0x1228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomTimeModifier;                                 		// 0x122C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomTimeModifierBaseValue;                        		// 0x1230 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ZoomTimeModifierModifierStack;                    		// 0x1234 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     ArmsTranslationOffsetForFocusCam;                 		// 0x1240 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ArmsRotationOffsetForFocusCam;                    		// 0x124C (0x000C) [0x0000000000000000]              
	struct FVector                                     ArmsTranslationOffsetForCameraAnim;               		// 0x1258 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ArmsRotationOffsetForCameraAnim;                  		// 0x1264 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraAnimEyeHeight;                              		// 0x1270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInstanceDataSet                            MenuInstanceDataState;                            		// 0x1274 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FWeatherSystemEffects                       WeatherSystem;                                    		// 0x1280 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APawnInteractionProxy*                       TradeInteractionProxy;                            		// 0x1288 (0x0004) [0x0000000000000000]              
	class AStationTeleporterDestination*               ResurrectStation;                                 		// 0x128C (0x0004) [0x0000000000000000]              
	class AActor*                                      ResurrectLocationActor;                           		// 0x1290 (0x0004) [0x0000000000000000]              
	class ATravelStation*                              AwaitingRespawnTravelStation;                     		// 0x1294 (0x0004) [0x0000000000000000]              
	struct FVector                                     AwaitingRespawnResurrectLocation;                 		// 0x1298 (0x000C) [0x0000000000000000]              
	int                                                AwaitingRespawnNozzleIndex;                       		// 0x12A4 (0x0004) [0x0000000000000000]              
	float                                              AwaitingRespawnStartTime;                         		// 0x12A8 (0x0004) [0x0000000000000000]              
	float                                              AwaitingRespawnLerpTime;                          		// 0x12AC (0x0004) [0x0000000000000000]              
	struct FVector                                     AwaitingRespawnStartCameraLoc;                    		// 0x12B0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    AwaitingRespawnStartCameraRot;                    		// 0x12BC (0x000C) [0x0000000000000000]              
	struct FVector                                     AwaitingRespawnEndCameraLoc;                      		// 0x12C8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    AwaitingRespawnEndCameraRot;                      		// 0x12D4 (0x000C) [0x0000000000000000]              
	float                                              AwaitingRespawnUnHidePlayerTime;                  		// 0x12E0 (0x0004) [0x0000000000000000]              
	float                                              AwaitingRespawnZoomStartTime;                     		// 0x12E4 (0x0004) [0x0000000000000000]              
	float                                              AwaitingRespawnStartZoomIn;                       		// 0x12E8 (0x0004) [0x0000000000000000]              
	struct FVector                                     AwaitingRespawnHeadLoc;                           		// 0x12EC (0x000C) [0x0000000000000000]              
	class UWillowOnDemandPackageMarker*                LinkedOnDemandPackage;                            		// 0x12F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TemporaryNonBlockedBy;                            		// 0x12FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAttachmentData                             AttachedToData;                                   		// 0x1300 (0x0028) [0x0000000000000020]              ( CPF_Net )
	int                                                UseInjuredDefinitionOverride;                     		// 0x1328 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UAttributeModifier*                          MaxHealthClipModifier;                            		// 0x132C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AAnemoneInfectionState*                      AnemoneInfectionState;                            		// 0x1330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCoordinatedEffectDefinition* >      VisionModeEffect;                                 		// 0x1334 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4638 ];

		return pClassPointer;
	};

	void UpdateVisionModeFX ( );
	void RemoveVisionModeFX ( class UCoordinatedEffectDefinition* EffectToRemove );
	void AddVisionModeFX ( class UCoordinatedEffectDefinition* NewEffect );
	void ClientStopInfected ( );
	void ClientExitInfectionVolume ( unsigned long bForceInstantHeal );
	void SetAnemoneInfectionStateImp ( unsigned long bIsInfected, unsigned long bLargeZone, class AActor* Zone, class UAnemoneInfectionDefinition* InfectionDefinition, class AHeightFog* HeightFog );
	void ClientSetAnemoneInfectionState ( unsigned long bIsInfected, unsigned long bLargeZone, class AActor* Zone, class UAnemoneInfectionDefinition* InfectionDefinition, class AHeightFog* HeightFog );
	void SetAnemoneInfectionState ( unsigned long bIsInfected, unsigned long bLargeZone, class AActor* Zone, class UAnemoneInfectionDefinition* InfectionDefinition, class AHeightFog* HeightFog );
	void ResetPawnGearLikenessComponents ( );
	void UpdateInjuredOverrideAnimNode ( );
	void ShouldCrouch ( unsigned long bCrouch );
	void eventOnAttachPlayerPawnToBase ( class USeqAct_AttachPlayerPawnToBase* Action );
	void DoAttachPlayerToBase ( class AActor* ActorToAttachTo, struct FVector AttachRelativeOffset, struct FRotator AttachRelativeRotation, struct FName NewBaseBoneName, unsigned char NewPhysicsMode );
	void SpawnDefaultController ( );
	void SetExtraMuzzleEffect ( unsigned char BulletFromClip, struct FExtraMuzzleEffect NewEffect );
	void eventUnTouch ( class AActor* Other );
	struct FVector GetAimDirection ( );
	void ServerPlayerEndUseNPC ( class AWillowAIPawn* NPC );
	void ServerPlayerBeginUseNPC ( class AWillowAIPawn* NPC );
	void Behavior_Destroy ( );
	void eventStartCrouch ( float HeightAdjust );
	void PlayPostEnvironmentTransitionAnimation ( );
	float PlayPreEnvironmentTransitionAnimation ( );
	void Behavior_Killed ( class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType );
	void SetDefaultStance ( );
	void SetRevivePct ( float NewRevivePct );
	float GetRevivePct ( );
	bool PlayInjured ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void SetUpTradeInteraction ( );
	void DestroyTradeInteraction ( );
	void ServerSetViewingThirdPersonMenu ( unsigned long bNewViewingThirdPersonMenu, unsigned long bIsStatusMenu );
	void OnSetViewingStatusMenu ( );
	void SetViewingThirdPersonMenu ( unsigned long bNewViewingThirdPersonMenu, unsigned long bIsStatusMenu );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void DestroyWeatherSystem ( );
	void CreateWeatherSystem ( class UParticleSystem* NewWeatherSystemTemplate, class UParticleSystem* NewScreenEffectsTemplate );
	void GFx_NotifyMovieDestroy ( class UGearboxGFxMovie* Movie );
	void GFx_NotifyMovieCreate ( class UGearboxGFxMovie* Movie );
	class AActor* GFx_GetMovieActor ( );
	void ResetShieldPrimeCachedValues ( class AWillowShield* Shield );
	void eventShieldTriggered ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void ClimbLadder ( class ALadderVolume* L );
	void EndClimbLadder ( class ALadderVolume* OldLadder );
	bool CanGrabLadder ( );
	class UWillowGFxThirdPersonMovie* GetThirdPersonMovie ( );
	void SetMenuMeshVisibility ( unsigned long bVisible, unsigned long bInspecting );
	void SetInstanceDataMenuState ( unsigned long bVisible, unsigned long bInspecting );
	void InitializePawnMeshes ( );
	void GetPetActors ( TArray< class AActor* >* out_PetActorList );
	void PlayUIAkEvent ( class UAkEvent* Event );
	void SetAllegiance ( class UPawnAllegiance* NewAllegiance );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	float GetMinimumHealthMaintainedByProtectionTimer ( );
	void EnableProtectionTimer ( );
	bool IsProtectionTimerActive ( );
	void CheckPhaseWalkExit ( );
	class AWillowPlayerController* GetPlayerController ( );
	void ServerIncrementEnterVehicleStat ( struct FName SpecificVehicleStatName );
	void IncrementEnterVehicleStat ( struct FName SpecificVehicleStatName );
	void eventStartDriving ( class AVehicle* V, unsigned long SkipAnim );
	void eventGetTargetName ( struct FString* TargetName );
	void UpdatePreferredColors ( );
	void DumpAnimSets ( struct FString EventStr );
	void PlayLanded ( float ImpactVel );
	void OnPlayArmAnimation ( class UWillowSeqAct_PlayArmAnimation* inAction );
	void StopWeaponRecoilAnim ( unsigned long bStopPrimaryHand, unsigned long bStopOffHand );
	void StopFirstPersonAnimations ( float BlendOutTime );
	void StopFirstPersonWeaponSMD ( unsigned char ActionType, unsigned long bInterrupted, class AWeapon* TheWeapon );
	float PlayFirstPersonWeaponSMD ( unsigned char ActionType, float PlayRateScale, float Duration, class AWeapon* TheWeapon, class USpecialMoveDefinition** PlayedSMD );
	class USpecialMoveDefinition* GetFirstPersonBodyWeaponSMD ( unsigned char BodyAction, class AWeapon* TheWeapon );
	float PlayArmAnimation ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bOverride, class UAnimSet* ReqAnimSet );
	void WeaponChanged ( class AWeapon* TheWeapon, unsigned long bOffHandWeapon );
	void ComputeIronsightsTransformOffset ( );
	void ResetArmsLeadingRotationHistory ( );
	void UpdateAnimSets ( );
	bool eventRestoreAnimSetsToDefault ( );
	void TurnOffBoundaryWarning ( );
	void TurnOnBoundaryWarning ( );
	void ToggleBoundaryWarningOnHUD ( unsigned long bEnable );
	void OnMarkExitedRegion ( class UWillowSeqAct_MarkExitedRegion* inAction );
	void ServerTellPassengersToUnlockAchievement ( unsigned char UnlockType, unsigned char OriginRegion, unsigned char DestinationRegion, float TravelTime );
	void OnMarkEnteredRegion ( class UWillowSeqAct_MarkEnteredRegion* inAction );
	void ProcessFallDistance ( struct FVector FallDistance );
	void eventFalling ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void ProtectionTimerElapsed ( );
	bool DoJump ( unsigned long bUpdating );
	bool CanJump ( );
	bool CanContinueSprinting ( );
	bool IsOnGroundOrShortFall ( );
	bool CanSprint ( );
	bool DoSprint ( unsigned long bIsUpdating );
	bool CanStuckJump ( );
	bool HideTargetInfoOnHud ( class APawn* HUDOwner );
	bool GetTargetableIsHidden ( );
	void DetachMeleeWeaponMesh ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void AttachMeleeWeaponMesh ( unsigned long bApplyToThirdPerson, unsigned long bApplyToFirstPerson );
	void SetWeaponSnagFailsafeTimer ( float Value );
	void OnWeaponSnag ( );
	void SetBaseEyeheight ( );
	void AdjustCameraAnimByEyeHeight ( unsigned long bEnabled, float InCameraAnimEyeHeight );
	bool GetCameraInfoFromViewModel ( struct FVector* out_DeltaLoc, struct FRotator* out_DeltaRot );
	bool CalcThirdPersonMenuCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void TraceCameraLocation ( class AActor* TraceActor, struct FVector TraceStart, struct FVector* CameraLocation );
	bool eventCalcInjuredPreDeathRecoveryCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool eventCalcInjuredPreDeathCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool eventCalcInjuredDeadCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void GetInjuredDeadCameraValues ( unsigned long bPreDeath, struct FVector* ViewLocation, float* CameraDistance, float* DigistructDelay );
	bool eventCalcInjuredCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void ShowDuelClip ( );
	void OutOfDuelBounds ( );
	void AcceptDuelChallenge ( class AWillowPlayerPawn* Challenger );
	void IssueDuelChallenge ( class AWillowPlayerPawn* Competitor );
	bool HasBeenIssuedDuelChallenge ( class AWillowPlayerPawn* Challenger, class AWillowVersusDuelInfo** DuelInfo );
	bool HasChallengeCoolDown ( class AWillowPlayerPawn* Challenger );
	bool HasActiveDuel ( class AWillowVersusDuelInfo** DuelInfo );
	bool IsDuelingEnabled ( );
	bool CanChallengeToDuel ( class AWillowPlayerPawn* Competitor );
	void ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FLinearColor GetLinearColor ( struct FColor C );
	void SetTeamColorForMesh ( class USkeletalMeshComponent* TheMesh, struct FLinearColor PrimaryColor, struct FLinearColor SecondaryColor, struct FLinearColor TertiaryColor );
	void SetTeamColor ( struct FLinearColor PrimaryColor, struct FLinearColor SecondaryColor, struct FLinearColor TertiaryColor );
	class AWillowPlayerPawn* GetAWillowPlayerPawn ( );
	void eventCheckLowHealthState ( );
	void SetArmPosition ( );
	void eventShowAndUnlockFirstPerson ( );
	void HideAndLockFirstPerson ( );
	void RaiseFirstPersonHands ( );
	void LowerFirstPersonHands ( );
	void ToggleFirstPersonWeaponVisibility ( );
	void SetFirstPersonVisibility ( unsigned long bVisible );
	void eventSetWeaponVisibility ( unsigned long bWeaponVisible );
	void SetOwnerVisibility ( unsigned long bVisible );
	void OnNativeApplyBodyClassStartingValuesHook ( );
	void ApplyBodyClassStartingValues ( );
	void PlayDamageCameraShake ( int Damage, struct FVector HitDir );
	void ClientSetAwaitingRespawnValues ( struct FVector InAwaitingRespawnStartCameraLoc, struct FRotator InAwaitingRespawnStartCameraRot, struct FVector InAwaitingRespawnEndCameraLoc, struct FVector InAwaitingRespawnResurrectLocation );
	void AwaitingRespawnBeginState ( struct FName PreviousStateName );
	void DeRezzedGearFinished ( );
	void DeRezGear ( );
	void RezGear ( );
	bool eventCalcAwaitingRespawnCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void AwaitingRespawnSetFirstPerson ( );
	void AwaitingRespawnSetBehindView ( );
	void AwaitingRespawnDisplayRespawnCost ( );
	void AwaitingRespawnActivateNozzle ( );
	void PreDeathRecoveryDone ( );
	void StartPreDeathRecovery ( );
	void PreDeathAnimDone ( );
	void ForceInjuredDeadState ( unsigned char KilledReason );
	void InjuredDeadTermRagdoll ( );
	void InjuredDeadInitRagdoll ( );
	void StartInjuredDeathSequence ( );
	void StartInjuredPreDeathSequence ( );
	void GetInjuredDeadCameraView ( struct FVector* CameraLocation, struct FRotator* CameraRotation );
	void eventEndInjuredDeadCamera ( );
	void EndInjuredCamera ( );
	void SetShadowCasting ( unsigned long Value );
	void CheckShouldBeAutoRevived ( );
	void ServerNotifyIWentDown ( );
	void SetInjuredDeadState ( unsigned char InjuredDeadStateVal );
	void SetInjuredState ( unsigned char InjuredStateVal );
	void AddKillStreakScore ( );
	void KilledEnemy ( class AWillowPawn* aTargetPawn );
	void ProcessInjuredViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ClearPlayerInjuredState ( );
	void SetupPlayerInjuredState ( );
	void SpawnTeleportEffect ( struct FVector TeleportEffectLocation, struct FRotator TeleportEffectRotation, unsigned long bReplicated );
	void SpawnTeleportEffectAtCurrentLocation ( );
	void ClientShowRespawnDialog ( int AmountCharged, unsigned char ResurrectReason, class APlayerReplicationInfo* DeadPlayerPRI );
	void ShowRespawnDialog ( );
	void NotifyTeleported ( );
	void MarkClientDLEsForUpdate ( );
	void MarkDLEsForUpdate ( );
	void ResurrectAtLocation ( class AActor* HoldingLoc, class AActor* TeleportLoc, unsigned char ResurrectReason, class APlayerReplicationInfo* DeadPlayerPRI );
	void HitByVehicle ( class AVehicle* Collider );
	bool eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void PlacePlayerInLevel ( unsigned long bSkipHoldingCell );
	void ResurrectPlayer ( unsigned char ResurrectReason, unsigned long bSkipHoldingCell, class APlayerReplicationInfo* DeadPlayerPRI, class ATravelStation* DestinationStation );
	class AActor* GetBestPlayerStartPoint ( );
	class ATeleporterDestination* GetBestPlayerPlacementPoint ( unsigned long bLevelTravel );
	void CrushedByActor ( class AActor* Other );
	void CrushedBy ( class APawn* OtherPawn );
	void ConditionalEndDuelOnHealthDepleted ( class AController* InstigatedBy );
	bool eventHandleHealthDepleted ( class AController* InstigatedBy, class UClass* DamageType, struct FVector HitLocation, class UIDamageCauser* DamageCauser, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void ProcessDamageTakenSkillEvents ( class UDamagePipeline* Pipeline, class AController* InstigatedBy, class UClass* DamageType );
	void ProcessDamageDealtSkillEvents ( class UDamagePipeline* Pipeline, class AController* VictimController, class UClass* DamageType );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, float* InDamage, float* DamageSeverityPercent, struct FVector* Momentum, struct FTraceHitInfo* HitInfo );
	void eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool IsDemigodMode ( );
	void eventReplicatedEvent ( struct FName VarName );
	int GetNextExpLevelPoints ( );
	bool IsVulnerableToFriendlyFire ( );
	bool AllowFallbackToDefaultCustomizations ( );
	void RefreshCustomizationsOnInstanceData ( );
	struct FName GetCustomizableName ( );
	void GetCustomizableInstanceDataSets ( TArray< struct FPointer >* OutData );
	class UCustomizationDefinition* GetDesiredCustomizationOfType ( class UClass* Type );
	void CustomizationApplied ( class UCustomizationData* Data );
	bool CanReceiveStatusEffects ( );
	void ReactToPrimaryStatusEffect ( class UStatusEffectDefinition* StatusEffect );
	bool ShieldAbsorbedAmmo ( class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	int GetGameStage ( );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	bool InitRagdoll ( );
	void OnNoLongerTargetedByAI ( class AWillowMind* AIMind );
	void OnTargetedByAI ( class AWillowMind* AIMind );
};

UClass* AWillowPlayerPawn::pClassPointer = NULL;

// Class WillowGame.WillowPawnInteractionDefinition
// 0x000C (0x007C - 0x0070)
class UWillowPawnInteractionDefinition : public UPawnInteractionDefinition
{
public:
	unsigned char                                      HUDIcon;                                          		// 0x0070 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	class UInteractionIconDefinition*                  HUDIconDef;                                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  HUDIconDefSecondary;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4640 ];

		return pClassPointer;
	};

};

UClass* UWillowPawnInteractionDefinition::pClassPointer = NULL;

// Class WillowGame.WillowPersonalTeleporter
// 0x0028 (0x01C4 - 0x019C)
class AWillowPersonalTeleporter : public ATeleporterDestination
{
public:
	TArray< class APlayerController* >                 TeleportedPlayers;                                		// 0x019C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPersonalTeleporterDefinition*               Definition;                                       		// 0x01A8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x01AC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    TeleporterParticleSystem;                         		// 0x01B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       LevelName;                                        		// 0x01B4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bActive : 1;                                      		// 0x01BC (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bReturnTeleporter : 1;                            		// 0x01BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPlacedInCommons : 1;                             		// 0x01BC (0x0004) [0x0000000000000000] [0x00000004] 
	class UAudioComponent*                             TeleporterAudio;                                  		// 0x01C0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4642 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void StopAmbientSound ( );
	void PlayAmbientSound ( );
	void eventReleaseHeldLevel ( );
	bool eventHoldLevel ( );
	void eventDeactivateTeleporter ( );
	void eventActivateTeleporter ( );
	void PlayerLeftGame ( class APlayerController* PC );
	void PlayerEnteredGame ( class APlayerController* PC );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void CreateExitPoints ( );
	bool SnapToGround ( class AActor* A );
	void IntializeParticleSystem ( );
	bool InitializeFromDefinition ( class UPersonalTeleporterDefinition* PersonalTeleporterDefinition );
	bool InitializeTeleporter ( class UPersonalTeleporterDefinition* TeleporterDefinition, unsigned long bReturnPortal );
	void SpawnReturnTeleporter ( );
	bool PlaceTeleporter ( class UPersonalTeleporterDefinition* TeleporterDefinition, class APawn* Creator );
	void ActivateTeleporterPlacedEvent ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowPersonalTeleporter::pClassPointer = NULL;

// Class WillowGame.WillowPhysicalMaterialProperty
// 0x006C (0x00A8 - 0x003C)
class UWillowPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	class UAkSwitch*                                   MaterialAkSwitch;                                 		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DamageSurfaceType;                                		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FImpactResponseData >               ImpactResponses;                                  		// 0x0044 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FImpactResponseParameters                   DefaultResponseParameters;                        		// 0x0050 (0x004C) [0x0000000000422002]              ( CPF_Const | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink )
	struct FWheelSlipModifierData                      WheelSlipModifiers;                               		// 0x009C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             ParticleSystemTemplate;                           		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4644 ];

		return pClassPointer;
	};

	void ApplyParametersToMaterialInstance ( class UMaterialInstance* Material, struct FImpactResponseParameters* ResponseParameters );
	void AttachParticleSystemComponentToActor ( class UParticleSystemComponent* PSC, class AActor* HitActor, struct FName AttachmentPointName );
	void AttachEmitterToActor ( class AEmitter* EmitterActor, class AActor* HitActor, struct FName AttachmentPointName );
	void ApplyParametersToParticleSystemComponent ( class UParticleSystemComponent* PSC, struct FImpactResponseParameters* ResponseParameters );
	void ApplyParametersToEmitter ( class AEmitter* EmitterActor, struct FImpactResponseParameters* ResponseParameters );
	void eventPlayImpactEffect ( struct FImpactResponseEffect Effect, class AActor* Instigator, class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned char Usage, unsigned long bPlaySound, unsigned long bReplicateEffect, unsigned long bIsbEffectEligibleForCensoring, class UParticleSystem* DefaultParticleTemplate, class UParticleSystem* CensoredParticleTemplateAlternative, class UAkSwitch* MaterialSwitch, class UAkEvent* ImpactAkEvent, struct FImpactResponseParameters* ResponseParameters );
	class UAkSwitch* GetPhysicalMaterialSwitch ( struct FTraceHitInfo* HitInfo );
	void StaticPlayImpactEffect ( struct FImpactResponseEffect Effect, class AActor* Instigator, class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned char Usage, unsigned long bPlaySound, unsigned long bReplicateEffect, struct FImpactResponseParameters* ResponseParameters );
	void PlayImpactEffectSound ( class AActor* Instigator, class UAkSwitch* Switch, class UAkEvent* Event, struct FVector HitLocation, unsigned char Usage, unsigned long bPlaySound, unsigned long bReplicateEffect, struct FImpactResponseParameters* ResponseParameters );
	int FindResponseIndex ( class UWillowImpactDefinition* ImpactType );
	void StaticHitInfoImpact ( class UWillowImpactDefinition* ImpactType, class UPhysicalMaterial* PhysicalMaterial, class AActor* Instigator, class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned long bPlaySound, unsigned long bReplicateEffect, struct FImpactResponseParameters* ResponseParameters );
	void StaticRigidBodyImpact ( class UWillowImpactDefinition* ImpactType, class AActor* Instigator, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, unsigned long bReplicateEffect, struct FCollisionImpactData* RigidCollisionData, struct FImpactResponseParameters* ResponseParameters );
	void StaticTraceImpact ( class UWillowImpactDefinition* ImpactType, class AActor* Instigator, struct FVector TraceEnd, struct FVector TraceStart, unsigned long bPlaySound, unsigned long bReplicateEffect, unsigned long bPlayOnNoHit, struct FImpactResponseParameters* ResponseParameters );
	bool IsImpactDebugEnabled ( );
	void ToggleImpactDebug ( );
};

UClass* UWillowPhysicalMaterialProperty::pClassPointer = NULL;

// Class WillowGame.WillowPickup
// 0x00AC (0x0270 - 0x01C4)
class AWillowPickup : public ADroppedPickup
{
public:
	struct FPointer                                    VfTable_IIMission;                                		// 0x01C4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMissionDirector;                        		// 0x01C8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIFocusable;                              		// 0x01CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UParticleSystemComponent*                    PickupParticleComponent;                          		// 0x01D0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             PickupParticles;                                  		// 0x01D4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x01D8 (0x0008) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                          		// 0x01E0 (0x0040) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x0220 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bPickupable : 1;                                  		// 0x0224 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bPickupAtRest : 1;                                		// 0x0224 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsPickupAttachedToSomething : 1;                 		// 0x0224 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsPopulationSystemAwareOfPickup : 1;             		// 0x0224 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCanBeSavedAcrossLevelTransition : 1;             		// 0x0224 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceRBToSleep : 1;                              		// 0x0224 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsMissionItem : 1;                               		// 0x0224 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bIsMissionDirector : 1;                           		// 0x0224 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bHasPickupParticleOffset : 1;                     		// 0x0224 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCostsToPickUp : 1;                               		// 0x0224 (0x0004) [0x0000000000002020] [0x00000200] ( CPF_Net | CPF_Transient )
	unsigned char                                      LifeSpanType;                                     		// 0x0228 (0x0001) [0x0000000000000000]              
	unsigned char                                      CostsToPickUpType;                                		// 0x0229 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              VeryShortLivedDropLifeSpan;                       		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              ShortLivedDropLifeSpan;                           		// 0x0230 (0x0004) [0x0000000000000000]              
	float                                              LongLivedDropLifeSpan;                            		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              PickupShrinkDuration;                             		// 0x0238 (0x0004) [0x0000000000000000]              
	float                                              MaxRBAwakeTime;                                   		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                ImpactEffectPlayCount;                            		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastImpactEffectTime;                             		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxImpactEffectPlayCount;                         		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ImpactEffectDelay;                                		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkRtpc*                                     ImpactVelocityAkRtpc;                             		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    MissionDirectorParticle;                          		// 0x0254 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                InventoryRarityLevel;                             		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x025C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                          		// 0x0260 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UInteractionIconDefinition*                  InteractionIconOverride;                          		// 0x0264 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                CostsToPickUpAmount;                              		// 0x0268 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AActor*                                      PickedUpByActor;                                  		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4646 ];

		return pClassPointer;
	};

	void OnPlayerClosedMissionUI ( class AWillowPlayerController* ThePlayer );
	void OnPlayerOpenedMissionUI ( class AWillowPlayerController* ThePlayer );
	void SetInteractionIcon ( class UEngineInteractionIconDefinition* Icon );
	bool CanSplash ( );
	bool HasAnyMissionsForPlayer ( );
	struct FVector GetMissionDirectorLocation ( );
	int GetAllDirectorData ( TArray< struct FMissionDirectorData >* OutData );
	struct FVector GetFocusScreenOffset ( );
	float GetFocusRadius ( );
	struct FVector GetFocusLocation ( );
	void EndFocus ( class APawn* User );
	void BeginFocus ( class APawn* User );
	void eventBeginShrinking ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P, unsigned long bReady );
	class AWillowPickup* CreatePickupFromMemento ( struct FPickupMemento Memento, class AWillowInventory* InventoryThisPickupIsFor );
	void eventConvertFixedToRigidBody ( );
	void eventConvertRigidBodyToFixed ( );
	void FailedPickup ( );
	struct FPickupMemento GetMemento ( );
	void AdjustPickupPhysicsAndCollisionForBeingDropped ( );
	void AdjustPickupPhysicsAndCollisionForBeingAttached ( );
	void AttachPickupToWorldBody ( class UIWorldBody* AttachmentBase, struct FName AttachmentPointName );
	class APickupableMeshActor* GetPickupableMeshActor ( );
	bool Pickupable_IsEnabled ( );
	void SetSaveRotation ( struct FRotator NewRotation );
	struct FRotator GetSaveRotation ( );
	void Behavior_Destroy ( );
	void SetMissionMaterialParameter ( );
	void SetPickupability ( unsigned long bNewPickupability );
	void Behavior_ChangeUsabilityCost ( unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType );
	void Behavior_ChangeUsability ( unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType );
	void DestroyPickupParticles ( );
	void SpawnPickupParticles ( );
	struct FVector GetPickupParticleOffset ( );
	void SetInteractParticles ( class UParticleSystem* PSys );
	void TryToSetInteractParticles ( unsigned long bTurnParticlesOn );
	void PickupAtRest ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void CheckForRigidBodySleepState ( );
	void MaxRBAwakeTimer ( );
	void StartRigidBodyTimers ( );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void EnableRagdollCollision ( );
	void InitializePickupForRBPhysics ( );
	void InventoryAssociated ( );
	void UpdateTouchRadiusForAutomaticallyPickedUpInventory ( );
	void InitializeRBPhysics ( );
	bool CanBeGrabbedByTheAI ( );
	bool ShouldSaveInPopulationSystem ( );
	void ShrinkPickupBeforeDestruction ( );
	void InitializeDropLifespan ( );
	void eventDeactivateMissionDirectorParticle ( );
	void eventSetMissionDirectorParticle ( );
	void eventMissionStatusChanged ( );
	void OnPlayerTurnedInMission ( class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn );
	void OnPlayerAcceptedMission ( class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted );
	int GetEligibleMissions ( TArray< class UMissionDefinition* >* EligibleMissions );
	int GetInProgressMissions ( TArray< class UMissionDefinition* >* InProgressMissions );
	int GetRedeemableMissions ( TArray< class UMissionDefinition* >* RedeemableMissions );
	void eventAddMissionDirective ( unsigned long bRegisterDirector, struct FMissionDirectorData* NewDirective );
	void RegisterMissionDirector ( );
	bool DenyPickupAttempt ( class APlayerController* PC );
	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
	void CheckRemoveWaypoint ( class UMissionDefinition* Mission, unsigned char NewStatus );
	void SetPickupStatusFromMissionTracker ( class AMissionTracker* Tracker );
	void InitializeFromInventory ( class AWillowInventory* InInv, class APawn* InInstigator, unsigned long bEnablePickup );
	void WaitingForDefinitionForRegisterMissionDirector ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* AWillowPickup::pClassPointer = NULL;

// Class WillowGame.WillowPlayerInput
// 0x014C (0x02C8 - 0x017C)
class UWillowPlayerInput : public UPlayerInput
{
public:
	unsigned long                                      bAlwaysPlayForceFeedback : 1;                     		// 0x017C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bDebugBindCommandsEnabled : 1;                    		// 0x017C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bHoldDuck : 1;                                    		// 0x017C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBindCommandConsumedInputEvent : 1;               		// 0x017C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCanSprint : 1;                                   		// 0x017C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bReviveHeld : 1;                                  		// 0x017C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bUpdateInputContext : 1;                          		// 0x017C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bApplyControllerViewAccel : 1;                    		// 0x017C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bTryToSprint : 1;                                 		// 0x017C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	struct FName                                       DebugBindOverrideKeyName;                         		// 0x0180 (0x0008) [0x0000000000004000]              ( CPF_Config )
	float                                              ButtonHoldEventTime;                              		// 0x0188 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastDuckTime;                                     		// 0x018C (0x0004) [0x0000000000000000]              
	unsigned char                                      ForcedDoubleClick;                                		// 0x0190 (0x0001) [0x0000000000000000]              
	float                                              RunWalkTransitionThreshold;                       		// 0x0194 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TimeSinceLastMovement;                            		// 0x0198 (0x0004) [0x0000000000000000]              
	struct FName                                       CurrentInputContextName;                          		// 0x019C (0x0008) [0x0000000000000000]              
	TArray< class UInputContextDefinition* >           CurrentInputContexts;                             		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInputAxisData >                    Axes;                                             		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01BC (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.NameToAxisStatePtr
	TArray< struct FDeviceLookAxisData >               DeviceLookAxes;                                   		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInputButtonData >                  Buttons;                                          		// 0x0204 (0x000C) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0210 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.NameToButtonStatePtr
	TArray< struct FName >                             LatentButtons;                                    		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x0258 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.InputActionToAvailabilityMap
	TArray< class UInputActionDefinition* >            PreSwitchAvailableActions;                        		// 0x0294 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ControllerSensitivityX;                           		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              ControllerSensitivityY;                           		// 0x02A4 (0x0004) [0x0000000000000000]              
	int                                                ControllerPresetIndex;                            		// 0x02A8 (0x0004) [0x0000000000000000]              
	TArray< struct FKeyRebindingData >                 KeyRebindings;                                    		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKeyRebindingData >                 ControllerRebindings;                             		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                EndCrouchOnNextForwardMovement;                   		// 0x02C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4648 ];

		return pClassPointer;
	};

	void ReleasedEndDuck ( );
	void PressedEndDuck ( );
	void ToggleViewAccel ( );
	void SetControllerSensitivityY ( int Sensitivity );
	void SetControllerSensitivityX ( int Sensitivity );
	void SetControllerSensitivity ( int Sensitivity );
	unsigned char CheckForDoubleClickMove ( float DeltaTime );
	void Jump ( );
	void DuckReleased ( );
	void DuckPressed ( );
	void SprintReleased ( );
	void SprintPressed ( );
	void TradePressed ( );
	void ReviveReleased ( );
	void RevivePressed ( );
	void eventPlayerInput ( float DeltaTime );
	bool IsReviveHeld ( );
	bool InputAllowsSprint ( );
	void SetCurrentContextType ( struct FName NewContextName );
	void SetInputContext ( struct FName NewContextName, unsigned long bForceUpdate );
	void PostChangeInputContext ( );
	void PreChangeInputContext ( );
	void UpdateLatentButtons ( );
	void PostProcessInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void InitInputSystem ( );
	void ProcessDeviceLookAxes ( float DeltaTime, float InCurrentFOV, float InDefaultFOV, unsigned long bZoomed );
	bool IsActionAvailable ( class UInputActionDefinition* Action );
	struct FName DecodeButton ( struct FName InButtonName );
	void SetControllerRebindings ( struct FString InControllerRebindingString );
	void SetKeyRebindings ( struct FString InKeyRebindingString );
	void WriteColumnText ( class AHUD* HUD, struct FString Text, int ColumnSize, int* Counter, float* SavedX, float* SavedY, float* MaxY );
	void ReleasePressedButtons ( );
	bool ResetButtonState ( struct FName ActionName );
	struct FName GetKeyForAction ( struct FName ActionName, unsigned long bOnlyKeyboardMouse, unsigned long bNoRemapping );
	void SetupInputDevices ( );
};

UClass* UWillowPlayerInput::pClassPointer = NULL;

// Class WillowGame.WillowPlayerPawnDataManager
// 0x0030 (0x006C - 0x003C)
class UWillowPlayerPawnDataManager : public UObject
{
public:
	TArray< struct FName >                             LoadedOnDemandPackageNames;                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UObjectReferencer* >                 LoadedOnDemandPackageReferencers;                 		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           PackagesUnloadedDuringGC;                         		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AWillowPlayerController* >           WillowPlayerControllersAwaitingPackages;          		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4650 ];

		return pClassPointer;
	};

	void ClearReferencers ( );
	void ReferenceHasBeenApplied ( class UObject* ReferencedObject );
	void SendRequiredOnDemandPackagesToClient ( class AWillowPlayerController* Client );
	bool InformClientsPackageUnloaded ( struct FString PackageName );
	void UnloadDataPackage ( struct FString PackageName, class AWillowPlayerController* PlayerContext );
	bool InformClientsPackageLoaded ( struct FString PackageName );
	void LoadDataPackageAsyncNoCallback ( struct FString PawnDataPath, class AWillowPlayerController* PlayerContext );
	void LoadDataPackageAsync ( struct FString PawnDataPath, struct FPointer Request );
	bool LoadDataPackage ( struct FString PackageName, class AWillowPlayerController* PlayerContext );
	class UObject* FindAlreadyLoadedObject ( struct FString ObjectPath );
	void LoadVSSVehicleDefinitionAsync ( struct FString VSSVehicleDefinitionPath, class AWillowPlayerController* PlayerContext, class UObject* Payload, class UObject* Instigator, int IntParam, float FloatParam, struct FName CallbackCustomEventName );
	class UVehicleSpawnStationVehicleDefinition* LoadVSSVehicleDefinition ( struct FString VSSVehicleDefinitionPath, class AWillowPlayerController* PlayerContext );
	void LoadSkillTreeDefinitionAsync ( struct FString SkillTreeDefinitionPath, class AWillowPlayerController* PlayerContext, class UObject* Payload, class UObject* Instigator, int IntParam, float FloatParam, struct FName CallbackCustomEventName );
	class USkillTreeDefinition* LoadSkillTreeDefinition ( struct FString SkillTreeDataPath, class AWillowPlayerController* PlayerContext );
	void LoadPlayerPawnDataAsync ( struct FString PawnDataPath, class AWillowPlayerController* PlayerContext, class UObject* Payload, class UObject* Instigator, int IntParam, float FloatParam, struct FName CallbackCustomEventName );
	class AWillowPlayerPawn* LoadPlayerPawnData ( struct FString PawnDataPath, class AWillowPlayerController* PlayerContext );
};

UClass* UWillowPlayerPawnDataManager::pClassPointer = NULL;

// Class WillowGame.WillowPlayerReplicationInfo
// 0x050C (0x0760 - 0x0254)
class AWillowPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	struct FPointer                                    VfTable_IINounAttributeProvider;                  		// 0x0254 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                ExpLevel;                                         		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ExpPointsNextLevelAt;                             		// 0x025C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ExpPointsNextLevelAtBaseValue;                    		// 0x0260 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExpPointsNextLevelAtModifierStack;                		// 0x0264 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                LevelUpCount;                                     		// 0x0270 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GeneralSkillPoints;                               		// 0x0274 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SpecialistSkillPoints;                            		// 0x0278 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                bClassModIsBuffingTeam;                           		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                bClassModIsBuffingTeamHealth;                     		// 0x0280 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                bClassModIsBuffingTeamShields;                    		// 0x0284 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                bClassModIsBuffingTeamGuns;                       		// 0x0288 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                bClassModIsBuffingTeamAmmo;                       		// 0x028C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                bClassModIsBuffingTeamActionSkill;                		// 0x0290 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FCurrencyState                              Currency[ 0xD ];                                  		// 0x0294 (0x0104) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FScriptDelegate >                   CurrencyChangedDelegates;                         		// 0x0398 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FResourcePoolReference                      HealthPool;                                       		// 0x03A4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FResourcePoolReference                      ShieldArmor;                                      		// 0x03B0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     PawnLocation;                                     		// 0x03BC (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UPawnAllegiance*                             PawnAllegiance;                                   		// 0x03C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowPlayerReplicationInfo*                VehicleBuddy;                                     		// 0x03CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      InjuredState;                                     		// 0x03D0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      InjuredDeadState;                                 		// 0x03D1 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      bGFxMenuOpen;                                     		// 0x03D2 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      NumTrackedSkillSlotsInUse;                        		// 0x03D3 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              InjuredRemainingPct;                              		// 0x03D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RevivePct;                                        		// 0x03D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bDuelingEnabled : 1;                              		// 0x03DC (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bTrainingDisabled : 1;                            		// 0x03DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLobbyReady : 1;                                  		// 0x03DC (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bTookDamageDuringLastDuel : 1;                    		// 0x03DC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSaveGameLoaded : 1;                              		// 0x03DC (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bIsSaving : 1;                                    		// 0x03DC (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bIsPartyLeader : 1;                               		// 0x03DC (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bHasSetProfileSettings : 1;                       		// 0x03DC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bIsGuest : 1;                                     		// 0x03DC (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      bHideOnHUDIfEnemy : 1;                            		// 0x03DC (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      bHasConfirmedCharacter : 1;                       		// 0x03DC (0x0004) [0x0000000000002020] [0x00000400] ( CPF_Net | CPF_Transient )
	class UPlayerNameIdentifierDefinition*             CharacterNameIdDef;                               		// 0x03E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UItemNamePartDefinition*                     ClassModNamePart;                                 		// 0x03E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                HighestCompletedPlayThrough;                      		// 0x03E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                NumReplicatedNouns;                               		// 0x03EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FNounAttributeState >               NounState;                                        		// 0x03F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FReplicatedNounAttributeState               ReplicatedNouns[ 0x14 ];                          		// 0x03FC (0x0140) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      PrimaryColor;                                     		// 0x053C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      SecondaryColor;                                   		// 0x0540 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      TertiaryColor;                                    		// 0x0544 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UCustomizationDefinition*                    LocalCustomizations[ 0x5 ];                       		// 0x0548 (0x0014) [0x0000000000000000]              
	class UCustomizationDefinition*                    RemoteCustomizations[ 0x5 ];                      		// 0x055C (0x0014) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedStandInGear                      StandInGear;                                      		// 0x0570 (0x0154) [0x0000000000000020]              ( CPF_Net )
	struct FTrackedSkillState                          TrackedSkills[ 0x11 ];                            		// 0x06C4 (0x0088) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AController*                                 InitializeFor;                                    		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumOverpowerLevelsUnlocked;                       		// 0x0750 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FScriptDelegate                             __OnCurrencyChanged__Delegate;                    		// 0x0754 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4652 ];

		return pClassPointer;
	};

	void ServerMigrateUniqueId ( struct FUniqueNetId NewNetId );
	void RefreshStandInGear ( );
	void ServerSetStandInGear ( struct FWeaponDefinitionData Weapon1Data, struct FWeaponDefinitionData Weapon2Data, struct FItemDefinitionData ShieldData, struct FItemDefinitionData GrenadeModData, struct FItemDefinitionData ClassModData );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OnPlayerJoinLeave ( );
	void eventDestroyed ( );
	bool IsRemotePlayer ( );
	class AWillowPlayerController* eventGetPrimaryPlayerPC ( );
	void ServerUpdatePRIRemoteCustomizationArray ( class UCustomizationDefinition* NewCustomization );
	void ClientInitiateCustomizationRequest ( class UCustomizationDefinition* NewCustomization );
	void ServerInitiateCustomizationRequest ( class UCustomizationDefinition* NewCustomization );
	void eventInitiateCustomizationRequest ( class UCustomizationDefinition* NewCustomization );
	void eventOnLevelUpCountIncremented ( );
	struct FString GetTrackedSkillDebugInfo ( int TrackedSkillIndex );
	void DisplayDebugTrackedSkills ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayDebugAllPlayerNouns ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventNotifySaveStatus ( unsigned long inSaving );
	bool ServerSetPlayerNameAsCharName ( class AWillowPlayerController* PC, struct FString NewPreferredName );
	bool IsInvalidName ( );
	void eventNotifyCurrencyDelegates ( );
	void UnregisterCurrencyChangedDelegate ( struct FScriptDelegate CurrencyChangedDelegate );
	void RegisterCurrencyChangedDelegate ( struct FScriptDelegate CurrencyChangedDelegate );
	void OnCurrencyChanged ( struct FCurrencyState ChangedCurrency );
	void AddCurrencyOnHand ( unsigned char FormOfCurrency, int AddValue );
	void SetCurrencyOnHand ( unsigned char FormOfCurrency, int NewValue );
	int GetCurrencyOnHand ( unsigned char FormOfCurrency );
	void GetAllCurrencyOnHand ( int* Values );
	void InitializeAllCurrencyOnHand ( int* NewValues );
	void ServerDetermineViralAchievementSpread ( );
	void HandlePlayerJoinWithValidName ( );
	struct FString GetClassModName ( );
	void NotifyPlayerExpLevelUpdated ( );
	void NotifyPlayerCharacterClassUpdated ( );
	void NotifyPrimaryPlayerOfNewCharacterSelection ( );
	void SetUniqueId ( struct FUniqueNetId PlayerUniqueId );
	void NotifyPlayerUidUpdated ( );
	void NotifyPlayerNameUpdated ( );
	void RunOnceClientInitialize ( );
	void ClientInitialize ( class AController* C );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowPlayerReplicationInfo::pClassPointer = NULL;

// Class WillowGame.WillowPointLight
// 0x001C (0x0214 - 0x01F8)
class UWillowPointLight : public UPointLightComponent
{
public:
	unsigned long                                      bCheckFrameRate : 1;                              		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              HighDetailFrameTime;                              		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lifetime;                                         		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                TimeShiftIndex;                                   		// 0x0204 (0x0004) [0x0000000000000000]              
	TArray< struct FLightValues >                      TimeShift;                                        		// 0x0208 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4654 ];

		return pClassPointer;
	};

	void ResetLight ( );
};

UClass* UWillowPointLight::pClassPointer = NULL;

// Class WillowGame.WillowPopulationDefinition
// 0x0008 (0x005C - 0x0054)
class UWillowPopulationDefinition : public UPopulationDefinition
{
public:
	class UAIDefinition*                               AIDef;                                            		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowClanDefinition*                       ClanDefinition;                                   		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4656 ];

		return pClassPointer;
	};

};

UClass* UWillowPopulationDefinition::pClassPointer = NULL;

// Class WillowGame.WillowPopulationMaster
// 0x0020 (0x00A8 - 0x0088)
class UWillowPopulationMaster : public UPopulationMaster
{
public:
	struct FVehicleSpawnStationSlot                    VehicleSpawnStationSlots[ 0x2 ];                  		// 0x0088 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4658 ];

		return pClassPointer;
	};

	void UpdateGRI ( );
	void RemoveSpawnedActor ( class AActor* TheActor, unsigned long bKeepBody, unsigned long bActorDied );
	class UVehicleSpawnStationVehicleDefinition* GetVehicleDefinitionFromVehicleSpawnStation ( int StationSlot );
	int GetPooledVehicleIndexFromVehicleSpawnStation ( int StationSlot, class UVehicleSpawnStationVehicleDefinition* VehicleDef );
	class AWillowVehicle* GetVehicleFromVehicleSpawnStation ( int StationSlot );
	void DespawnVehicleFromVehicleSpawnStation ( int StationSlot );
	bool SpawnVehicleFromVehicleSpawnStation ( int StationSlot, class UVehicleSpawnStationVehicleDefinition* SpawnVehicleDef, struct FVector VehicleLocation, struct FRotator VehicleRotation );
	class AActor* SpawnActorFromOpportunity ( class UPopulationFactory* TheFactory, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int Rarity, int OpportunityIdx, int PopOppFlags, unsigned long bCanSave, unsigned long bForceSpawn );
};

UClass* UWillowPopulationMaster::pClassPointer = NULL;

// Class WillowGame.WillowPopulationOpportunityPoint
// 0x0009 (0x0225 - 0x021C)
class AWillowPopulationOpportunityPoint : public APopulationOpportunityPoint
{
public:
	int                                                MissionObjectiveBit;                              		// 0x021C (0x0004) [0x0000000000220001]              ( CPF_Edit | CPF_EditConst )
	class UChallengeDefinition*                        AssociatedChallenge;                              		// 0x0220 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      NumberInChallengeGroup;                           		// 0x0224 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4660 ];

		return pClassPointer;
	};

};

UClass* AWillowPopulationOpportunityPoint::pClassPointer = NULL;

// Class WillowGame.WillowPopulationPoint
// 0x0074 (0x023C - 0x01C8)
class AWillowPopulationPoint : public APopulationPoint
{
public:
	struct FPointer                                    VfTable_ISpecialMoveInterface;                    		// 0x01C8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x01CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x01D0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                       		// 0x01D4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x01D8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UWillowPopulationPointDefinition*            PointDef;                                         		// 0x01DC (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	class USkeletalMeshComponent*                      PointSkelMesh;                                    		// 0x01E0 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FInstanceDataSet                            InstanceState;                                    		// 0x01E4 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                      		// 0x01F0 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class USpecialMoveComponent*                       SMComponent;                                      		// 0x0200 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bEditStretchy : 1;                                		// 0x0204 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bMarkPointInvalidForCombat : 1;                   		// 0x0204 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;         		// 0x0204 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	class AActor*                                      StretchyActor;                                    		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     StretchyOffset;                                   		// 0x020C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      StretchyType;                                     		// 0x0218 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      NumberInChallengeGroup;                           		// 0x0219 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StretchyGravity;                                  		// 0x021C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SimpleAnimState;                                  		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSimpleAnimData >                   SimpleAnimInfo;                                   		// 0x0224 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                          		// 0x0230 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AVolume*                                     CombatVolume;                                     		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UChallengeDefinition*                        AssociatedChallenge;                              		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4662 ];

		return pClassPointer;
	};

	void ClearBodyCompositionInstance ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ApplyPreviewBodyComposition ( );
	void ChangeInstanceDataSwitch ( struct FName Switch, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	void eventServerSpecialMove_StopAny ( );
	void eventServerSpecialMove_Stop ( class USpecialMoveDefinition* OldSMD );
	void eventServerSpecialMove_Queue ( class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, struct FName CallbackName, class UObject* CallbackObject, class UObject* Data );
	void eventServerSpecialMove_Play ( class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, struct FName CallbackName, class UObject* CallbackObject, class UObject* Data );
	void SetReplicatedSMData ( struct FSpecialMoveData* NewSMData );
	unsigned char GetDefaultRootMotionRotationMode ( );
	unsigned char GetDefaultRootMotionMode ( );
	class USkeletalMeshComponent* GetSkelMesh ( );
	class USpecialMoveComponent* GetSMComponent ( );
	class AActor* GetActor ( );
	bool CanSpawnFromFactory ( class UPopulationFactory* Factory, int GameStage, int Rarity );
	struct FVector GetStretchyOffset ( int MeshIndex, int AnimIndex, float Percent );
	void ApplyOffsetToComponents ( struct FVector Offset );
	void ActorSpawned ( class AActor* SpawnedActor );
	struct FVector GetSpawnLocation ( );
	void PostBeginPlay ( );
	void InitializeRBPhys ( );
};

UClass* AWillowPopulationPoint::pClassPointer = NULL;

// Class WillowGame.WillowPopulationPoint_Dynamic
// 0x0000 (0x023C - 0x023C)
class AWillowPopulationPoint_Dynamic : public AWillowPopulationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4664 ];

		return pClassPointer;
	};

};

UClass* AWillowPopulationPoint_Dynamic::pClassPointer = NULL;

// Class WillowGame.WillowPopulationPointDefinition
// 0x0070 (0x00AC - 0x003C)
class UWillowPopulationPointDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBodyInfoProvider;                       		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIAnimProvider;                           		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FSpawnAnimData >                    AnimMap;                                          		// 0x0044 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bOptimizeMemory : 1;                              		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRemoveRootBoneScaling : 1;                       		// 0x0050 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDynamicLightEnvironment : 1;                     		// 0x0050 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastShadows : 1;                                 		// 0x0050 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;              		// 0x0050 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDynamic : 1;                                     		// 0x0050 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x0050 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShadowFromEnvironment : 1;                       		// 0x0050 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                		// 0x0050 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	struct FBodyCompositionData                        BodyComposition;                                  		// 0x0054 (0x0014) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	float                                              LightingBoundsScale;                              		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumVolumeVisibilitySamples;                       		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutExponent;                         		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ModShadowFadeoutTime;                             		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientGlow;                                      		// 0x0078 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x0088 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x0094 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionStartDistance;            		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DominantShadowTransitionEndDistance;              		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4666 ];

		return pClassPointer;
	};

	void GetAnims ( TArray< class UGearboxAnimDefinition* >* OutAnims );
	class USpecialMove_PopulationPoint* GetPointAnim ( class UPopulationBodyTag* Key, class USpecialMove_Spawned* SpawnAnim );
};

UClass* UWillowPopulationPointDefinition::pClassPointer = NULL;

// Class WillowGame.WillowPopulationPointEditorComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowPopulationPointEditorComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4668 ];

		return pClassPointer;
	};

};

UClass* UWillowPopulationPointEditorComponent::pClassPointer = NULL;

// Class WillowGame.WillowPreviewComponent
// 0x0004 (0x06B0 - 0x06AC)
class UWillowPreviewComponent : public USkeletalMeshComponent
{
public:
	class AWillowPawn*                                 CurrentPawn;                                      		// 0x06AC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4670 ];

		return pClassPointer;
	};

};

UClass* UWillowPreviewComponent::pClassPointer = NULL;

// Class WillowGame.PerchPreviewComponent
// 0x0008 (0x06B8 - 0x06B0)
class UPerchPreviewComponent : public UWillowPreviewComponent
{
public:
	class UPerchDefinition*                            PerchDef;                                         		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCyclePreviewAnim : 1;                            		// 0x06B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCyclePreviewIndex : 1;                           		// 0x06B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4672 ];

		return pClassPointer;
	};

};

UClass* UPerchPreviewComponent::pClassPointer = NULL;

// Class WillowGame.PhysicsJumpPreviewComponent
// 0x0008 (0x06B8 - 0x06B0)
class UPhysicsJumpPreviewComponent : public UWillowPreviewComponent
{
public:
	class APhysicsJumpNode*                            JumpNode;                                         		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCyclePreviewAnim : 1;                            		// 0x06B4 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCyclePreviewIndex : 1;                           		// 0x06B4 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4674 ];

		return pClassPointer;
	};

};

UClass* UPhysicsJumpPreviewComponent::pClassPointer = NULL;

// Class WillowGame.WillowPopulationPointPreviewComponent
// 0x0008 (0x06B8 - 0x06B0)
class UWillowPopulationPointPreviewComponent : public UWillowPreviewComponent
{
public:
	class UWillowPopulationPointDefinition*            PointDef;                                         		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCyclePreviewAnim : 1;                            		// 0x06B4 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCyclePreviewMesh : 1;                            		// 0x06B4 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4676 ];

		return pClassPointer;
	};

};

UClass* UWillowPopulationPointPreviewComponent::pClassPointer = NULL;

// Class WillowGame.WillowProfileSettings
// 0x0000 (0x0098 - 0x0098)
class UWillowProfileSettings : public UGearboxProfileSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4678 ];

		return pClassPointer;
	};

	bool IsSetToDefaults ( );
};

UClass* UWillowProfileSettings::pClassPointer = NULL;

// Class WillowGame.WillowProjectile
// 0x02AC (0x04A0 - 0x01F4)
class AWillowProjectile : public AProjectile
{
public:
	struct FPointer                                    VfTable_IICounterBehavior;                        		// 0x01F4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IITimerBehavior;                          		// 0x01F8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIKilledBehavior;                         		// 0x01FC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIProjectileBehavior;                     		// 0x0200 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IITargetable;                             		// 0x0204 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x0208 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x020C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIAttachableActor;                        		// 0x0210 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x0214 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x0218 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDrunkenProjectile;                      		// 0x021C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIGearLikenessConsumer;                   		// 0x0220 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDynamicObstacle;                        		// 0x0224 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UProjectileDefinition*                       Definition;                                       		// 0x0228 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UWillowDamageTypeDefinition*                 MyDamageTypeDefinition;                           		// 0x022C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UExplosionDefinition*                        MyExplosionDefinition;                            		// 0x0230 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowInventory*                            GearLikenessActor;                                		// 0x0234 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UPawnAllegiance*                             Allegiance;                                       		// 0x0238 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UITargetable*                                AllegianceParent;                                 		// 0x023C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0240 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UITargetable* >                      AllegianceChildren;                               		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastRBImpactEffectTime;                           		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMeshComponent*                              MyMeshClone;                                      		// 0x0254 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FTimerBehaviorUserState                     ProjectileTimers;                                 		// 0x0258 (0x0024) [0x0000000000000000]              
	struct FCounterBehaviorUserState                   ProjectileCounters;                               		// 0x027C (0x0010) [0x0000000000000000]              
	TArray< struct FName >                             ActiveBehaviorSets;                               		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsProjectileDisabled : 1;                        		// 0x0298 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDamageReentrantFlag : 1;                         		// 0x0298 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsProjectileAttached : 1;                        		// 0x0298 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSuppressExplosionFX : 1;                         		// 0x0298 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAutoAimTarget : 1;                               		// 0x0298 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bWaitForEffects : 1;                              		// 0x0298 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bExploded : 1;                                    		// 0x0298 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bWideCheck : 1;                                   		// 0x0298 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bCheckProjectileLight : 1;                        		// 0x0298 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDLEInitialized : 1;                              		// 0x0298 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bIsHoming : 1;                                    		// 0x0298 (0x0004) [0x0000000000000020] [0x00000400] ( CPF_Net )
	unsigned long                                      RetryFindHomingTarget : 1;                        		// 0x0298 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      RetryNotInstigator : 1;                           		// 0x0298 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      RetryIgnoreFOVZTest : 1;                          		// 0x0298 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      RetryBestForwardTarget : 1;                       		// 0x0298 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      RetryUniqueHomingTarget : 1;                      		// 0x0298 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bWithinCurrentlyPursuedNodeAlertRadius : 1;       		// 0x0298 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bTakenDamage : 1;                                 		// 0x0298 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bOvercharged : 1;                                 		// 0x0298 (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	unsigned long                                      bCauseRadiusDamageToInstigator : 1;               		// 0x0298 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIsStickyGrenade : 1;                             		// 0x0298 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bIsChildOfSticky : 1;                             		// 0x0298 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bBeingHealed : 1;                                 		// 0x0298 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      WantsToLevelOffTrajectory : 1;                    		// 0x0298 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bActiveObstacle : 1;                              		// 0x0298 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      ReceiveWeaponFire : 1;                            		// 0x0298 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      IsWeaponFire : 1;                                 		// 0x0298 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	struct FVector                                     AttachmentNormal;                                 		// 0x029C (0x000C) [0x0000000000000000]              
	class UParticleSystemComponent*                    ProjEffects;                                      		// 0x02A8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    OverchargedEffect;                                		// 0x02AC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             EffectiveInFlightEffects;                         		// 0x02B0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      AutoAimProfile;                                   		// 0x02B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HomingTargetType;                                 		// 0x02B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      PayloadType;                                      		// 0x02B6 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              AccelRate;                                        		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ExpLevel;                                         		// 0x02BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                FiringOwnerStatsID;                               		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                FiringWeaponStatsID;                              		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                FiringWeaponMode;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              CheckRadius;                                      		// 0x02CC (0x0004) [0x0000000000000000]              
	class UClass*                                      ProjectileLightClass;                             		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UPointLightComponent*                        ProjectileLight;                                  		// 0x02D4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x02D8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AActor*                                      HomingActor;                                      		// 0x02DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     HomingLocation;                                   		// 0x02E0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    HomingRotationOffset;                             		// 0x02EC (0x000C) [0x0000000000000000]              
	struct FVector                                     LastHomingPollLocation;                           		// 0x02F8 (0x000C) [0x0000000000000000]              
	int                                                HomingTargetComponentIndex;                       		// 0x0304 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RetryTargetSearchRange;                           		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RetryTargetSearchFOVAngle;                        		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextRetryFindHomingTargetTime;                    		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RetryFindTargetDelay;                             		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              CustomGravityScaling;                             		// 0x0318 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FPointer                                    CurrentlyPursuedNode;                             		// 0x031C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FInstanceDataSet                            InstanceDataState;                                		// 0x0320 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                      		// 0x032C (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FHitActorData >                     HitActors;                                        		// 0x033C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UBulletListenerComponent*                    BulletListenerComponent;                          		// 0x0348 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastHomingRadius;                                 		// 0x034C (0x0004) [0x0000000000000000]              
	struct FVector                                     InitialRBImpulse;                                 		// 0x0350 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     Wave_LastOffset;                                  		// 0x035C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FWaveMotionData                             ProjectileWaveMotion;                             		// 0x0368 (0x0028) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      ExtraNonBlockingActor;                            		// 0x0390 (0x0004) [0x0000000000000000]              
	class AProximityActor*                             ProxActor;                                        		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              BaseStatusEffectChanceModifier;                   		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseStatusEffectChanceModifierBaseValue;          		// 0x039C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BaseStatusEffectChanceModifierModifierStack;      		// 0x03A0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectChanceModifier;                       		// 0x03AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StatusEffectChanceModifierBaseValue;              		// 0x03B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                StatusEffectChanceModifierModifierStack;          		// 0x03B4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectSpreadTimeIntervalModifier;           		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StatusEffectSpreadTimeIntervalModifierBaseValue;  		// 0x03C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                StatusEffectSpreadTimeIntervalModifierModifierStack;		// 0x03C8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectDamage;                               		// 0x03D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StatusEffectDamageBaseValue;                      		// 0x03D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                StatusEffectDamageModifierStack;                  		// 0x03DC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatorSelfDamageScale;                        		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatorSelfDamageScaleBaseValue;               		// 0x03EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatorSelfDamageScaleModifierStack;           		// 0x03F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              OverrideStatusEffectBaseChance;                   		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              OverrideStatusEffectChance;                       		// 0x0400 (0x0004) [0x0000000000000000]              
	float                                              OverrideStatusEffectDamage;                       		// 0x0404 (0x0004) [0x0000000000000000]              
	float                                              OverrideInstigatorSelfDamageScale;                		// 0x0408 (0x0004) [0x0000000000000000]              
	float                                              CreatedTime;                                      		// 0x040C (0x0004) [0x0000000000000000]              
	float                                              SpeedMultiplier;                                  		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedMultiplierBaseValue;                         		// 0x0414 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SpeedMultiplierModifierStack;                     		// 0x0418 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SecondsBeforeConsideringRemoval;                  		// 0x0424 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SecondsBetweenRemovalAttempts;                    		// 0x0428 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      StickyIsAttachedTo;                               		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              CollisionRadiusBeforeSticky;                      		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              FuseTime;                                         		// 0x0434 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              FuseTimeBaseValue;                                		// 0x0438 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                FuseTimeModifierStack;                            		// 0x043C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                NumberOfChildProjectiles;                         		// 0x0448 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NumberOfChildProjectilesBaseValue;                		// 0x044C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NumberOfChildProjectilesModifierStack;            		// 0x0450 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x045C (0x0004) [0x0000000000000000]              
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                  		// 0x0460 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                          		// 0x046C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowLightProjectileManager*               LightProjMgr;                                     		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DrunkenRandomNumberSeed;                          		// 0x0474 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMovementComponent*                          MovementComponent;                                		// 0x0478 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              DesiredWorldZForLeveling;                         		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LevelingTurnSpeed;                                		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      TakingDamageFromType;                             		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIDamageCauser*                              TakingDamageFromDamageCauser;                     		// 0x0488 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x048C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class AController*                                 TakingDamageFromInstigator;                       		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     BehaviorHitNormal;                                		// 0x0494 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4680 ];

		return pClassPointer;
	};

	class AWillowLightProjectileManager* GetLightProjMgrFor ( class AWillowWeapon* aWeapon );
	void CheckAIAvoidance ( );
	void GetObstacleInfo ( struct FObstacleData* Data );
	class AActor* GetObstacleActor ( );
	bool GetMagnetData ( struct FVector* MagnetLoc, struct FVector* MagnetVel );
	void SetObstacleVelocity ( struct FVector* NewVelocity );
	bool CanAvoidObstacle ( struct FObstacleData* Obstacle );
	bool CanAvoidObstacles ( );
	void SetObstacleActive ( unsigned long bActive );
	bool IsObstacleActive ( );
	bool ShouldRefreshLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
	void AssumeLikenessOf ( unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp );
	void SetTargetLocation ( struct FVector NewTargetLocation );
	void SetHomingTarget ( class AActor* NewTarget, int NewTargetComponentIndex );
	void FindHomingTarget ( unsigned char TargetType, float TargetSearchRange, float TargetSearchFOVAngle, unsigned long bNotInstigator, unsigned long bIgnoreFOVZTest, unsigned long bBestForwardTarget, unsigned long bRetryIfTargetNotFound, unsigned long bUniqueTarget );
	void SetPatsy ( class UITargetable* NewPatsy );
	class UITargetable* GetPatsy ( );
	bool IsBeingHealed ( );
	void SetBeingHealed ( unsigned long bNewBeingHealed );
	void SetDrunkenRandomNumberSeed ( int RandomNumberSeed );
	float GetTerminalVelocity ( );
	bool IsLevelingNow ( );
	void Behavior_TagPayloadType ( unsigned char InPayloadType );
	void Behavior_LevelOffTrajectory ( float ZHeight, float TurnSpeed );
	void Behavior_SetExplosionDefinition ( class UExplosionDefinition* MyExplosionDef );
	void Behavior_SetDamageTypeDefinition ( class UWillowDamageTypeDefinition* DamageTypeDef );
	void Behavior_SetStickyGrenade ( );
	void eventOnKilledEnemy ( class UObject* KilledObject );
	void eventOnKilledFriendly ( class UObject* KilledObject );
	void eventOnKilledNeutral ( class UObject* KilledObject );
	void eventOnDamagedNeutral ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage );
	void eventOnDamagedFriendly ( class UObject* DamageTaker, float DamageAmount );
	void eventOnDamagedEnemy ( class UObject* DamageTaker, unsigned long bWasCrit, float HealthDamage, float ShieldDamage );
	void SetSpeed ( float NewSpeed );
	void ClearBodyCompositionInstance ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ApplyPreviewBodyComposition ( );
	void ChangeInstanceDataSwitch ( struct FName Switch, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	float GetInstigatorSelfDamageScale ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* Context );
	float GetStatusEffectChanceModifier ( class UObject* Context );
	float GetStatusEffectBaseDamage ( class UObject* Context );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
	int GetPlayerProjectileLevel ( class AWillowPlayerController* PC );
	void SetMorphNodeWeight ( class UMorphNodeWeight* Node, float NewWeight, float WeightBlendTime );
	class UProjectileDefinition* GetProjectileDefinition ( );
	void InitializeRBPhysics ( );
	void Behavior_RegisterTargetable ( unsigned long bUnregister );
	void eventTraceTouch ( class AActor* Other, class UComponent* ComponentHit, struct FVector TouchLocation, struct FVector TouchNormal, struct FVector End, struct FVector Start, struct FVector Extent, int TraceFlags, float TouchTime );
	void SetInfoBarVisibility ( unsigned long bVisible );
	bool HideTargetInfoOnHud ( class APawn* HUDOwner );
	bool IsChampion ( );
	bool IsBoss ( );
	void eventGetTargetName ( struct FString* TargetName );
	bool DoesTargetableTakeDamage ( );
	void GetExpInfo ( int* ExpLevelValue );
	bool DisplayParentInfo ( );
	void GetAllBarInfo ( TArray< struct FInfoBarData >* BarData );
	class AActor* GetTargetableActor ( );
	void Behavior_SetCanTarget ( unsigned char ChangeStatus );
	int ShowSelfAsTarget ( unsigned long bControllersOnly );
	struct FVector GetDamageVector ( );
	class UMeshComponent* GetRigidBodyMesh ( );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	void Behavior_Killed ( class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType );
	void Behavior_CauseRadiusDamage ( float Radius, float DamageAmount, unsigned long bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, struct FVector Offset, class UIDamageCauser* DamageCauser, unsigned long bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray< class AActor* >* ActorsHurt );
	void Behavior_CauseDamage ( class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, class UIDamageCauser* DamageCauser, float BarrelSourceTime, float PlantSourceTime );
	void SetProximity ( float ProximityRadius, float ProximityHeight );
	void SetHomingRotationOffset ( struct FRotator RotationOffset );
	struct FVector GetHomingTargetLocation ( );
	unsigned char GetHomingTargetByType ( );
	void WasAttachedToActor ( struct FVector InAttachmentNormal );
	class AActor* GetAttachedToActor ( );
	struct FVector GetAttachmentNormal ( );
	void AttachToActor ( class AActor* ActorToAttachTo, struct FVector HitNormal, struct FVector HitLocation, struct FName BoneName );
	bool IsAttached ( );
	void DetonateProjectile ( );
	void Detonate ( );
	float GetNextDetonationDelta ( );
	void ResetDetonationDelta ( );
	bool SetVelocity ( struct FVector ProjectileVelocity );
	bool GetVelocity ( struct FVector* ProjectileVelocity );
	bool SetTimerState ( unsigned char TimerId, struct FBehaviorTimerState TimerState );
	bool GetTimerState ( unsigned char TimerId, struct FBehaviorTimerState* TimerState );
	float GetTimeSeconds ( );
	bool SetCounterState ( unsigned char CounterId, struct FBehaviorCounterState CounterState );
	bool GetCounterState ( unsigned char CounterId, struct FBehaviorCounterState* CounterState );
	float EvaluateAttributeInitialization ( struct FAttributeInitializationData InitData );
	class UMeshComponent* GetMesh ( );
	class UAnimNode* FindAnimNode ( struct FName NodeName );
	void SetRotationRate ( struct FRotator NewRotationRate );
	float GetCollisionRadius ( );
	class ATemporalField* IsInTemporalField ( );
	class AActor* GetHomingTarget ( class AWillowProjectile* Seeker, class AController* InstigatedBy );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void InitStats ( class AWillowWeapon* InstigatorWeapon );
	void MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void Destroyed ( );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	void HideProjectile ( );
	void eventTornOff ( );
	void ShutDown ( );
	void UnregisterBehaviorConsumerTimer ( );
	void DisableProjectile ( );
	bool GetImpactInfoForTouch ( class AActor* TouchedActor, struct FVector TouchLocation, struct FVector TouchNormal, struct FImpactInfo* ImpactData );
	void eventApplyOverchargedEffect ( );
	void eventSpawnFlightEffects ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void SpawnClientExplosion ( );
	void TryAwardExperience ( class AController* InstigatedBy, class UClass* DamageType );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DmgRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void HandleOnHitEvents ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal, struct FVector HitLocation, unsigned char DamageSurfaceType, int BoneIndex, unsigned long bIsProximityTouch );
	void SetDamageSurfaceTypeImpactDataAndBoneIndex ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal, struct FBehaviorParameters* EventData, unsigned char* DamageSurfaceType, struct FImpactInfo* ImpactData, int* BoneIndex );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void DoHitWall ( struct FVector HitNormal, class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation );
	void HitWall ( struct FVector HitNormal, class AActor* Other, class UPrimitiveComponent* OtherComp );
	bool AttemptReflection ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventProximityTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool StopsProjectile ( class AProjectile* P );
	void ProcessTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void HandleTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal, unsigned long bIsProximityTouch );
	bool ShouldIgnoreTouchFrom ( class AActor* TouchedActor, class UPrimitiveComponent* TouchedComponent, unsigned long bIsProximityTouch, unsigned char* bTurnTouchIntoHitWall );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool IsBlockedByWillowInteractiveObject ( class AActor* Other );
	void AvoidCollision ( struct FVector* Accel );
	void DrawHomingDebugTracer ( struct FColor LineColor );
	struct FVector GetCircularHomingAcceleration ( struct FVector TargetLoc );
	void OnCounterEvent ( unsigned char EventType, struct FBehaviorParameters EventData );
	void eventOnTimerEvent ( unsigned char EventType, struct FBehaviorParameters EventData );
	void eventSetInitialState ( );
	void eventCreateProjectileLight ( );
	void InitWithVelocity ( struct FVector StartingVelocity );
	void InitWithWaveMotion ( struct FVector Direction, struct FWaveMotionData CustomProjectileWaveMotion );
	void SetVelocityAndAcceleration ( struct FVector Direction );
	void Init ( struct FVector Direction );
	void InitializeExplosion ( class UExplosionDefinition* InExplosionDefinition );
	void eventInitializeDamageType ( class UWillowDamageTypeDefinition* inDamageTypeDefinition );
	void UpdateAndDestroyNonVisibleActorInTimer ( );
	void DoOnSpawn ( );
	void RefreshGearLikenessComponents ( );
	class AWillowInventory* GetGearLiknessActor ( );
	void SetGearLikenessActor ( class AWillowInventory* LikenessActor, unsigned long bRefreshLikeness );
	class UObject* eventProjectileGetBehaviorContext ( struct FBehaviorContextData* ContextData );
	void InitializeFromDefinition ( class UProjectileDefinition* InDefinition, int InExpLevel, class UWillowDamageTypeDefinition* CustomDamageTypeDefinition, unsigned long bSkipOnSpawn, class UParticleSystem* CustomInFlightEffect, class UExplosionDefinition* CustomExplosionDefinition );
	void eventReplicatedEvent ( struct FName VarName );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	class AController* GetInstigatingController ( );
	void PostBeginPlay ( );
	bool GetHitDataForActor ( class AActor* HitActor, struct FHitActorData* HitData );
	void AddHitActor ( class AActor* HitActor, struct FTraceHitInfo HitInfo, struct FVector HitLocation, struct FVector HitNormal );
	bool IsHomingDebugEnabled ( );
	void ToggleHomingDebug ( );
	void CalcTrajectoryByTime ( struct FVector StartLoc, struct FVector EndLoc, float LeapTime, float LeapGravity, struct FVector* OutVelocity );
	void CalcTrajectoryAtActor ( class AActor* Source, class AActor* Target, struct FTrajectoryData Data, unsigned long bCanDebug, float* OutTime, float* OutGravity, struct FVector* OutVelocity );
	void CalcTrajectory ( struct FVector StartLoc, struct FVector EndLoc, float LeapSpeed, float LeapAngle, float* OutTime, float* OutGravity, struct FVector* OutVelocity );
	struct FVector GetTrajectoryOffset ( float OffsetTime, float TotalTime, float Gravity, struct FVector StartVelocity );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	bool IsTargetableProxy ( );
	unsigned char GetAutoAimProfile ( );
	float GetMagnetismRange ( );
	struct FVector GetMagnetismOrigin ( );
	bool IsAutoAimTarget ( );
	float GetTargetingModifier ( );
	bool HasHomingTargetComponents ( );
	bool IsValidHomingTarget ( );
	bool IsTargetable ( unsigned long bIgnoreCloakAbility );
	bool GetTargetableIsHidden ( );
	bool CanSnapZoom ( );
	struct FVector GetSnapLocation ( );
	struct FVector GetTargetableLocation ( );
	unsigned char GetOpinion ( class UObject* Other );
	void SetAllegiance ( class UPawnAllegiance* NewAllegiance );
	class UPawnAllegiance* GetDefaultAllegiance ( );
	class UPawnAllegiance* GetObjectAllegiance ( );
	bool IsSameAllegiance ( class UObject* anObject );
	bool IsNeutral ( class UObject* anObject );
	bool IsFriendly ( class UObject* anObject );
	bool IsEnemy ( class UObject* anObject );
};

UClass* AWillowProjectile::pClassPointer = NULL;

// Class WillowGame.WillowServerSideProjectile
// 0x0024 (0x04C4 - 0x04A0)
class AWillowServerSideProjectile : public AWillowProjectile
{
public:
	struct FVector                                     ServerLocation;                                   		// 0x04A0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ServerVelocity;                                   		// 0x04AC (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ServerAcceleration;                               		// 0x04B8 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4682 ];

		return pClassPointer;
	};

};

UClass* AWillowServerSideProjectile::pClassPointer = NULL;

// Class WillowGame.WillowPursuitGrid
// 0x0014 (0x0050 - 0x003C)
class UWillowPursuitGrid : public UObject
{
public:
	TArray< struct FPursuitNode >                      PursuitNodes;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       GridName;                                         		// 0x0048 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4684 ];

		return pClassPointer;
	};

	void InitializeFromDefinition ( class UWillowPursuitGridDefinition* GridDef );
};

UClass* UWillowPursuitGrid::pClassPointer = NULL;

// Class WillowGame.WillowPursuitGridDefinition
// 0x0014 (0x0050 - 0x003C)
class UWillowPursuitGridDefinition : public UGBXDefinition
{
public:
	TArray< struct FPursuitNodeData >                  PursuitNodes;                                     		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FName                                       GridName;                                         		// 0x0048 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4686 ];

		return pClassPointer;
	};

};

UClass* UWillowPursuitGridDefinition::pClassPointer = NULL;

// Class WillowGame.WillowRegionDefinition
// 0x0004 (0x0040 - 0x003C)
class UWillowRegionDefinition : public URegionDefinition
{
public:
	class UDownloadableExpansionDefinition*            DlcExpansion;                                     		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4688 ];

		return pClassPointer;
	};

	void SetAwesomeLevelOverride ( int NewAwesomeLevelOverride );
	void SetGameStageOverride ( int NewGameStageOverride );
	bool GetDefaultRegionGameStage ( int* MinGameStage, int* MaxGameStage, int* AwesomeLevel, int* GameStageIncreaseOverPlayerLevel );
	bool TestRegionGameStage ( unsigned long bDefaultGameStage, int* GameStage, int* AwesomeLevel );
	bool GetRegionGameStage ( unsigned long bDefaultGameStage, int* GameStage, int* AwesomeLevel );
};

UClass* UWillowRegionDefinition::pClassPointer = NULL;

// Class WillowGame.WillowReplicatedAmbientSound
// 0x0024 (0x01AC - 0x0188)
class AWillowReplicatedAmbientSound : public AActor
{
public:
	class UAkEvent*                                    AkEvent;                                          		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AWillowReplicatedAmbientSoundSource* > AdditionalSources;                                		// 0x018C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x0198 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bUseSeamlessStop : 1;                             		// 0x0198 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRegistered : 1;                                  		// 0x0198 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UAkEvent*                                    StopAkEvent;                                      		// 0x019C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAkPlayingInfo                              SeamlessPlayingInfo;                              		// 0x01A0 (0x0008) [0x0000000000080000]              ( CPF_Component )
	class AWwiseSoundGroup*                            Group;                                            		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4690 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* AWillowReplicatedAmbientSound::pClassPointer = NULL;

// Class WillowGame.WillowReplicatedAmbientSoundRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowReplicatedAmbientSoundRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4692 ];

		return pClassPointer;
	};

};

UClass* UWillowReplicatedAmbientSoundRenderingComponent::pClassPointer = NULL;

// Class WillowGame.WillowReplicatedAmbientSoundSource
// 0x0000 (0x0188 - 0x0188)
class AWillowReplicatedAmbientSoundSource : public ANote
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4694 ];

		return pClassPointer;
	};

};

UClass* AWillowReplicatedAmbientSoundSource::pClassPointer = NULL;

// Class WillowGame.WillowSavedMove
// 0x0004 (0x00EC - 0x00E8)
class UWillowSavedMove : public USavedMove
{
public:
	unsigned long                                      bSprint : 1;                                      		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4696 ];

		return pClassPointer;
	};

	unsigned char SetFlags ( unsigned char Flags, class APlayerController* PC );
	unsigned char CompressedFlags ( );
	void SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick, unsigned char InAnalogPct );
	bool CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta );
	void Clear ( );
};

UClass* UWillowSavedMove::pClassPointer = NULL;

// Class WillowGame.WillowSaveGameManager
// 0x02FC (0x0338 - 0x003C)
class UWillowSaveGameManager : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                AsyncResult[ 0x4 ];                               		// 0x0040 (0x0010) [0x0000000000000000]              
	unsigned char                                      CurrentState[ 0x4 ];                              		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FLoadInfo                                   PendingLoadInfo;                                  		// 0x0054 (0x00C8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLoadInfo                                   CrossTitleLoadInfo;                               		// 0x011C (0x00C8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            LastLoadedSaveGameData;                           		// 0x01E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FDouble                                     LastLoadedFileTimeStamp;                          		// 0x01F0 (0x0008) [0x0000000000000000]              
	struct FString                                     LastLoadedFilePath;                               		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerSaveData >                   SaveDataLoadedFromList;                           		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SaveGameTitle;                                    		// 0x0210 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GraveyardTitle;                                   		// 0x021C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GraveyardSubTitle;                                		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelStr;                                         		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              SaveStartTime;                                    		// 0x0240 (0x0004) [0x0000000000000000]              
	struct FString                                     CorruptSaveDataString;                            		// 0x0244 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnloadableDlcSaveDataString;                      		// 0x0250 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DateFormat;                                       		// 0x025C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TimeFormat;                                       		// 0x0268 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SingularSecond;                                   		// 0x0274 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PluralSeconds;                                    		// 0x0280 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SingularMinute;                                   		// 0x028C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PluralMinutes;                                    		// 0x0298 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SingularHour;                                     		// 0x02A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PluralHours;                                      		// 0x02B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SingularDay;                                      		// 0x02BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PluralDays;                                       		// 0x02C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                bNeedsProfileWrite[ 0x4 ];                        		// 0x02D4 (0x0010) [0x0000000000000000]              
	struct FScriptDelegate                             __OnDeleteComplete__Delegate;                     		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnValidationComplete__Delegate;                 		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSaveComplete__Delegate;                       		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoadComplete__Delegate;                       		// 0x0308 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnListLoadComplete__Delegate;                   		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWillowOneLoadComplete__Delegate;              		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCountNumCrossTitleSaveGamesComplete__Delegate;		// 0x032C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4698 ];

		return pClassPointer;
	};

	void DestroyAllRegisteredDelegates ( );
	bool AttemptProfileWriteIfNecessary ( unsigned char ControllerId );
	void NotifyProfileWriteComplete ( unsigned char ControllerId, unsigned long bWasSuccessful );
	void SetNeedsProfileWrite ( unsigned char ControllerId, unsigned long inNeedsProfileWrite );
	bool GetNeedsProfileWrite ( unsigned char ControllerId );
	void PopulatePlayerSaveDataDefinitionContent ( struct FPlayerSaveData* SaveData );
	struct FString GetHumanReadableStringFromTimePlayed ( int TimePlayed, unsigned long bVerbose );
	struct FString GetHumanReadableStringFromSaveDateString ( struct FString SaveDate );
	struct FString GetCurrentSaveDateString ( );
	void BeginCountNumCrossTitleSaveGames ( unsigned char ControllerId, int PS3UserNum );
	void SetNumCrossTitleSaveGames ( unsigned char ControllerId, int inNumSaves );
	int GetNumCrossTitleSaveGames ( unsigned char ControllerId );
	void SetNumSaveGames ( unsigned char ControllerId, int inNumSaves );
	int GetNumSaveGames ( unsigned char ControllerId );
	void NotifySaveComplete ( unsigned char ControllerId, unsigned long bSkipHudUpdate );
	void NotifySaveStarted ( unsigned char ControllerId, unsigned long bSkipHudUpdate );
	int GetXboxDevice ( int ControllerId );
	void SetXboxDevice ( int ControllerId, int DeviceID );
	void SaveGame ( unsigned char ControllerId, class UPlayerSaveGame* SaveGame, struct FString Filename, int PS3UserNum );
	bool ValidateSaveData ( unsigned char ControllerId, struct FString LoadPath );
	bool DeleteSaveGame ( unsigned char ControllerId, struct FString Filename, int PS3UserNum );
	int GetHighestSaveIdFromFileList ( unsigned char ControllerId, TArray< struct FString > RawList );
	int GetLastSaveGameId ( unsigned char ControllerId );
	int GetLastSaveGame ( unsigned char ControllerId, int PS3UserNum, struct FString SaveFilePrefix );
	TArray< struct FPlayerSaveData > EndGetSaveGameDataFromList ( unsigned char ControllerId );
	void BeginGetSaveGameDataFromList ( unsigned char ControllerId, TArray< struct FString > SaveGameList, int PS3UserNum, unsigned long bCrossTitle );
	TArray< struct FString > GetCrossTitleSaveGameList ( unsigned char ControllerId, int PS3UserNum );
	TArray< struct FString > GetSaveGameList ( unsigned char ControllerId, int PS3UserNum, struct FString SaveFilePrefix );
	TArray< unsigned char > LoadRawData ( unsigned char ControllerId, struct FString Filename, int PS3UserNum );
	class UUBMGraveyardSaveData* LoadGraveyard ( unsigned char ControllerId, struct FString Filename, int PS3UserNum );
	void EndLoadWillowOneGame ( unsigned char ControllerId );
	void BeginLoadWillowOneGame ( unsigned char ControllerId, struct FString Filename, int PS3UserNum );
	class UPlayerSaveGame* EndLoadGame ( unsigned char ControllerId, unsigned char LoadPlayerBehavior, struct FLoadInfo* Info );
	bool BeginLoadGame ( unsigned char ControllerId, struct FString Filename, int PS3UserNum );
	void SetCachedPlayerSaveGame ( unsigned char ControllerId, class UPlayerSaveGame* SaveGame );
	bool HasCachedPlayerSaveGame ( unsigned char ControllerId );
	class UPlayerSaveGame* GetCachedPlayerSaveGame ( unsigned char ControllerId );
	void SaveRawData ( unsigned char ControllerId, TArray< unsigned char > Contents, struct FString Filename, int PS3UserNum, struct FString FileTitle, struct FString FileSubTitle );
	void SaveGraveyard ( unsigned char ControllerId, class UUBMGraveyardSaveData* Graveyard, struct FString Filename, int PS3UserNum );
	void Save ( class AWillowPlayerController* WPC, struct FString Filename, int PS3UserNum );
	bool ClearCache ( unsigned char ControllerId );
	void OnCountNumCrossTitleSaveGamesComplete ( unsigned long bWasSuccessful );
	void OnWillowOneLoadComplete ( unsigned long bWasSuccessful );
	void OnListLoadComplete ( unsigned long bWasSuccessful );
	void OnLoadComplete ( unsigned long bWasSuccessful );
	void OnSaveComplete ( float SaveDuration );
	void OnValidationComplete ( unsigned long bWasSuccessful );
	void OnDeleteComplete ( unsigned long bWasSuccessful );
	unsigned char GetResult ( unsigned char ControllerId );
};

UClass* UWillowSaveGameManager::pClassPointer = NULL;

// Class WillowGame.WillowScout
// 0x0000 (0x0724 - 0x0724)
class AWillowScout : public AScout
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4700 ];

		return pClassPointer;
	};

};

UClass* AWillowScout::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ElevatorFinished
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_ElevatorFinished : public USequenceAction
{
public:
	class AWillowElevator*                             Elevator;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4702 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ElevatorFinished::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_MissionSmokeTest
// 0x0018 (0x00CC - 0x00B4)
class UWillowSeqAct_MissionSmokeTest : public USeqAct_Latent
{
public:
	TArray< struct FString >                           SaveGameList;                                     		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentSavegame;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned char                                      TestStatus;                                       		// 0x00C4 (0x0001) [0x0000000000000000]              
	float                                              LatentFloat;                                      		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4704 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_MissionSmokeTest::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_MoveElevator
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_MoveElevator : public USequenceAction
{
public:
	class AWillowElevator*                             Elevator;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	unsigned char                                      Usage;                                            		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                CallFloor;                                        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4706 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_MoveElevator::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_ElevatorUsed
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_ElevatorUsed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4708 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_ElevatorUsed::pClassPointer = NULL;

// Class WillowGame.WillowSkelControlSpline
// 0x0024 (0x00C0 - 0x009C)
class UWillowSkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SplineBoneAxis;                                   		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotMode;                                      		// 0x00A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EndSplineLocationSpace;                           		// 0x00A2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      StartSplineLocationSpace;                         		// 0x00A3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertSplineBoneAxis : 1;                        		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector                                     EndSplineOffset;                                  		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSplineOffset;                                		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4710 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControlSpline::pClassPointer = NULL;

// Class WillowGame.WillowSpectatorPoint
// 0x0000 (0x0288 - 0x0288)
class AWillowSpectatorPoint : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4712 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* AWillowSpectatorPoint::pClassPointer = NULL;

// Class WillowGame.WillowStaggerAnimNodeBlend
// 0x0047 (0x010C - 0x00C5)
class UWillowStaggerAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	int                                                StaggerNodeIndex;                                 		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              StaggerNodeWeight;                                		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              StaggerNodeWeightTarget;                          		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FReferencePointComparisonData               AltCondition;                                     		// 0x00D8 (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bMirrorStaggerDef : 1;                            		// 0x00F0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMirrorStaggerAlt : 1;                            		// 0x00F0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FRotator                                    AdditionalRotationDef;                            		// 0x00F4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    AdditionalRotationAlt;                            		// 0x0100 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4714 ];

		return pClassPointer;
	};

	bool EndStaggerBlend ( );
	bool StartStaggerBlend ( );
	bool PlayStaggerAnimation ( );
	bool StopStaggerAnimation ( );
};

UClass* UWillowStaggerAnimNodeBlend::pClassPointer = NULL;

// Class WillowGame.WillowSystemSettings
// 0x0034 (0x0070 - 0x003C)
class UWillowSystemSettings : public UObject
{
public:
	TArray< struct FSystemOption >                     SystemOptions;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FResolution >                       SupportedResolutions;                             		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                QueuedResolution;                                 		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ResolutionTimeout;                                		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ResolutionDlg;                                    		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPauseTicker*                          ResolutionTicker;                                 		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueuedWindowMode;                                 		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueuedVSyncMode;                                  		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousVSyncMode;                                		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4716 ];

		return pClassPointer;
	};

	void UpdateViewDistance ( );
	void ResetResolution ( );
	bool ConfirmResolution_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void UpdateResolutionTimer ( );
	void UpdateResolution ( );
	struct FString GetWindowModeString ( unsigned long bAllowedQueued );
	void Options_VSyncModeDirty ( int Value );
	void Options_WindowModeDirty ( int Value );
	void Options_ResolutionDirty ( int Value );
	void UpdateSystemOption ( struct FName SettingName, int Value );
	void UpdateTextureFade ( int Value );
	void LoadSystemSettings ( unsigned long bSkipResolutionUpdate );
};

UClass* UWillowSystemSettings::pClassPointer = NULL;

// Class WillowGame.WillowTacticalMapVolume
// 0x0008 (0x01C4 - 0x01BC)
class AWillowTacticalMapVolume : public AVolume
{
public:
	float                                              UnrealUnitsPerPixel;                              		// 0x01BC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              NorthOffsetInDegreesClockwise;                    		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4718 ];

		return pClassPointer;
	};

};

UClass* AWillowTacticalMapVolume::pClassPointer = NULL;

// Class WillowGame.WillowTradeManager
// 0x04CC (0x0654 - 0x0188)
class AWillowTradeManager : public AActor
{
public:
	unsigned char                                      Status;                                           		// 0x0188 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Stance;                                           		// 0x0189 (0x0001) [0x0000000000000000]              
	unsigned char                                      PartnerStance;                                    		// 0x018A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      UnresolvedFlags;                                  		// 0x018B (0x0001) [0x0000000000000000]              
	int                                                TransactionHash;                                  		// 0x018C (0x0004) [0x0000000000000000]              
	class AWillowTradeManager*                         Partner;                                          		// 0x0190 (0x0004) [0x0000000000000000]              
	class AWillowPlayerController*                     PartnerWPC;                                       		// 0x0194 (0x0004) [0x0000000000000000]              
	class AWillowPlayerReplicationInfo*                PartnerPRI;                                       		// 0x0198 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxPartnerReceivableInventory;                    		// 0x019C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PartnerCashOffered;                               		// 0x01A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FTradeSlot                                  PartnerInvOffered[ 0x4 ];                         		// 0x01A4 (0x0250) [0x0000000000000020]              ( CPF_Net )
	int                                                MyCashOffered;                                    		// 0x03F4 (0x0004) [0x0000000000000000]              
	struct FTradeSlot                                  MyInvOffered[ 0x4 ];                              		// 0x03F8 (0x0250) [0x0000000000000000]              
	class AWillowVersusDuelInfo*                       DuelInfo;                                         		// 0x0648 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x064C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAccepted : 1;                                    		// 0x064C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                MaxMyReceivableInventory;                         		// 0x0650 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4720 ];

		return pClassPointer;
	};

	void OnPartnerInvChanged ( );
	int FindInventorySlot ( class AWillowInventory* WInv, unsigned long bPartner );
	bool CanDrop ( class AWillowInventory* Inv );
	void OnUIClosed ( );
	bool IsForTrade ( class AInventory* Inv );
	bool IsPendingItemSale ( struct FItemDefinitionData DefinitionData );
	bool IsPendingWeaponSale ( struct FWeaponDefinitionData DefinitionData );
	bool IsResolving ( );
	void UpdateInventoryOffered ( class AWillowInventory* Inv, int Slot, int Quantity );
	void UpdatePartnerInventoryRefs ( );
	void DuelFinished ( class AWillowVersusDuelInfo* FinishedDuel );
	bool IsDueling ( );
	bool IsTradeInitialized ( );
	void UpdateCashOffered ( int NewCashValue );
	void UpdateStance ( unsigned char NewStance );
	void eventCancelTrade ( );
	void RejectPendingRequest ( );
	void AcceptPendingRequest ( );
	void SharedInit ( class AWillowPlayerController* NewPartner );
	void InitAsRequestee ( class AWillowPlayerController* NewPartner );
	void InitAsRequester ( class AWillowPlayerController* NewPartner );
	bool FindAndRemoveInv ( struct FTradeSlot Slot );
	bool InventoryMatch ( class AWillowInventory* Inv, struct FTradeSlot Slot );
	class UHUDWidget_Trading* GetTradingWidget ( );
	void OnAccepted ( );
	void OnInitialized ( );
	void CheckAcceptance ( );
	void CheckInitialization ( );
	void LogCurrentTrade ( );
	struct FString GetInvDesc ( int Slot, unsigned long FromPartner );
	struct FString GetInvDescSub ( struct FTradeSlot Slot );
	int GetInvHash ( struct FTradeSlot Slot );
	void DoUpdateStance ( unsigned char NewStance, int NewTransactionHash );
	void DoUpdateCashOffered ( int NewCashValue );
	class AWillowPlayerController* GetWPC ( );
	int CalcTransactionHash ( );
	void TradeParametersUpdated ( );
	void BreakTradeBond ( unsigned char SelfStatus, unsigned char PartnerStatus );
	bool IsTradeHalfValid ( );
	void BeginDuel ( );
	void ResolveDuel ( );
	bool SetAssideDuelAssets ( );
	bool HashCheck ( );
	void CheckTradeComplete ( );
	void ResolveDuelWin ( );
	void ResolveDuelDraw ( );
	void ResolveDuelLoss ( );
	void ResolveTrade ( );
	void PerformTransaction ( );
	void TerminateTrade ( unsigned char Reason );
	void eventKillTrade ( unsigned char SelfReason, unsigned char PartnerReason );
	void InvalidateStance ( );
	void ServerTradeComplete ( );
	void ClientResolveTrade ( unsigned char UnresolvedTradeSlots );
	void ServerOfferItem ( struct FItemDefinitionData ItemDef, int Slot, int Quantity );
	void ServerOfferWeapon ( struct FWeaponDefinitionData WeaponDef, int Slot );
	void ServerEmptyInvSlot ( int Slot );
	void ClientStanceReset ( int Hash );
	void ServerUpdateCashOffered ( int NewCashValue );
	void ForceCancelTrade ( );
	void ServerCancelTrade ( );
	void ServerUpdateStance ( unsigned char NewStance, int NewTransactionHash );
	void ServerAcceptPendingRequest ( );
	void ServerRejectPendingRequest ( );
	void eventDestroyed ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool CanRetractOffer ( );
	bool CanStartOffer ( );
};

UClass* AWillowTradeManager::pClassPointer = NULL;

// Class WillowGame.WillowTrigger
// 0x001C (0x01B0 - 0x0194)
class AWillowTrigger : public ATrigger
{
public:
	struct FPointer                                    VfTable_IIUsable;                                 		// 0x0194 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      HUDIcon;                                          		// 0x0198 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      CostsToUseType;                                   		// 0x0199 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  HUDIconDef;                                       		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ParticleHighlight;                                		// 0x01A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            TriggerSprite;                                    		// 0x01A4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bCostsToUse : 1;                                  		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                CostsToUseAmount;                                 		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4722 ];

		return pClassPointer;
	};

	void NotifyUserCouldNotAffordAttemptedUse ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void PostBeginPlay ( );
};

UClass* AWillowTrigger::pClassPointer = NULL;

// Class WillowGame.WillowWaypoint
// 0x0028 (0x01D8 - 0x01B0)
class AWillowWaypoint : public AWillowTrigger
{
public:
	struct FPointer                                    VfTable_IIMission;                                		// 0x01B0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMissionObjectiveWaypointData               WaypointInfo;                                     		// 0x01B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                AreaRadius;                                       		// 0x01C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateObjectiveOnPlayerTouch : 1;                		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class AVolume* >                           TouchVolumes;                                     		// 0x01CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4724 ];

		return pClassPointer;
	};

	void eventMissionReactionObjectiveComplete ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective );
	void eventMissionReactionObjectiveCleared ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective );
	void eventMissionReactionObjectiveUpdated ( class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective );
	void eventMissionReactionObjectiveSetChanged ( class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet );
	void eventMissionReactionLevelLoad ( class AMissionTracker* Tracker, class UMissionDefinition* Mission );
	void eventMissionReactionStatusChanged ( class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus );
	void ClearWaypoint ( );
	void ProcessPlayerTouch ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void PostBeginPlay ( );
};

UClass* AWillowWaypoint::pClassPointer = NULL;

// Class WillowGame.WillowUIInteraction
// 0x0AA8 (0x0C1C - 0x0174)
class UWillowUIInteraction : public UUIInteraction
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x0174 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FString >                           ExpandedMissions;                                 		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuData                                  BlankEntry;                                       		// 0x0184 (0x0098) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FMenuHeaderData                             BlankMenuHeader;                                  		// 0x021C (0x0040) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FtMenuData >                        CurrentMenu;                                      		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MenuURL;                                          		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MenuTitle;                                        		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      HintFontSize;                                     		// 0x0280 (0x0001) [0x0000000000000000]              
	unsigned char                                      MemDetailsSortStyle;                              		// 0x0281 (0x0001) [0x0000000000000000]              
	unsigned char                                      NetChannelSortStyle;                              		// 0x0282 (0x0001) [0x0000000000000000]              
	unsigned char                                      GearBuilderSortMode;                              		// 0x0283 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      AttributeSortMode;                                		// 0x0284 (0x0001) [0x0000000000000000]              
	struct FString                                     MenuHint;                                         		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MenuItemDetail;                                   		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MenuDescriptionBoxStr;                            		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMenuHeaderData >                   MenuHeaders;                                      		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveMenu;                                       		// 0x02B8 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DebugConsoleHeaders;                              		// 0x02BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDebugConsoleCommand >              DebugConsoleCommands;                             		// 0x02C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FMenuHeaderData >                   SubMenuHeaders;                                   		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveSubMenu;                                    		// 0x02E0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           MenuStack;                                        		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FtMenuData >                        WillowMenu;                                       		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                StatusMenuLayout;                                 		// 0x02FC (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                MemoryMenuLayout;                                 		// 0x0374 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                NetworkMenuLayout;                                		// 0x03EC (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                MissionMenuLayout;                                		// 0x0464 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                SkillMenuLayout;                                  		// 0x04DC (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                GearBuilderMenuLayout;                            		// 0x0554 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                CommerceMenuLayout;                               		// 0x05CC (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                ChallengeMenuLayout;                              		// 0x0644 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                CurrentMenuLayout;                                		// 0x06BC (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                TeleportingMenuLayout;                            		// 0x0734 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                SharedInspectorMenuLayout;                        		// 0x07AC (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                CustomizationMenuLayout;                          		// 0x0824 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FtMenuLayout                                DLCMenuLayout;                                    		// 0x089C (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              UIScaleX;                                         		// 0x0914 (0x0004) [0x0000000000000000]              
	float                                              UIScaleY;                                         		// 0x0918 (0x0004) [0x0000000000000000]              
	int                                                Menu_Top;                                         		// 0x091C (0x0004) [0x0000000000000000]              
	int                                                Menu_At;                                          		// 0x0920 (0x0004) [0x0000000000000000]              
	int                                                Menu_IPP;                                         		// 0x0924 (0x0004) [0x0000000000000000]              
	class AWillowPlayerController*                     OwnerPC;                                          		// 0x0928 (0x0004) [0x0000000000000000]              
	struct FColor                                      BrightWhite;                                      		// 0x092C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      DarkGrey;                                         		// 0x0930 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      MediumGrey;                                       		// 0x0934 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      LightGrey;                                        		// 0x0938 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      Yellow;                                           		// 0x093C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bOpened : 1;                                      		// 0x0940 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoGatherNetworkData : 1;                       		// 0x0940 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCollapseChannelsByClass : 1;                     		// 0x0940 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bServerCPUSaturatedThisFrame : 1;                 		// 0x0940 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bOnlyShowRegisteredChallenges : 1;                		// 0x0940 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDisplayDetailedAttributes : 1;                   		// 0x0940 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              TimeUntilMenuRefresh;                             		// 0x0944 (0x0004) [0x0000000000000000]              
	float                                              NextHorizontalInputAxisTime;                      		// 0x0948 (0x0004) [0x0000000000000000]              
	float                                              NextHorizontalInputAxisInterval;                  		// 0x094C (0x0004) [0x0000000000000000]              
	float                                              NextVerticalInputAxisTime;                        		// 0x0950 (0x0004) [0x0000000000000000]              
	float                                              NextVerticalInputAxisInterval;                    		// 0x0954 (0x0004) [0x0000000000000000]              
	int                                                LastWeaponIndex;                                  		// 0x0958 (0x0004) [0x0000000000000000]              
	int                                                LastMerchantWeaponIndex;                          		// 0x095C (0x0004) [0x0000000000000000]              
	int                                                LastItemIndex;                                    		// 0x0960 (0x0004) [0x0000000000000000]              
	int                                                BlockUIInputSemaphore;                            		// 0x0964 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             SortedTravelStationList;                          		// 0x0968 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNetworkChannelData >               NetworkChannels;                                  		// 0x0974 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              NovodexMemoryEstimationFactor;                    		// 0x0980 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           WeaponBalanceDefinitions;                         		// 0x0984 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FItemBuilderData >                  ItemBuilder;                                      		// 0x0990 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FItemBuilderBalanceDefinition >     ItemBuilderBalanceDefinitions;                    		// 0x099C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DebugPlayerIdentifiersAdded;                      		// 0x09A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           ItemTabNames;                                     		// 0x09AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FItemSettings                               ItemParts;                                        		// 0x09B8 (0x011C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FWeaponSettings                             WeaponParts;                                      		// 0x0AD4 (0x0114) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ExpLevel;                                         		// 0x0BE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GameStage;                                        		// 0x0BEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AwesomeLevel;                                     		// 0x0BF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UChallengeConditionDefinition* >     BrokenChallengeConditions;                        		// 0x0BF4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGearBuilderCustomizationUsageData > CustomizationBalanceDefinitionsByUsage;           		// 0x0C00 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            PotentialCustomizationUsagesToFilterBy;           		// 0x0C0C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentCustomizationUsageFilterIndex;             		// 0x0C18 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4726 ];

		return pClassPointer;
	};

	void HandleClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void CloseMenu ( unsigned long bOnGameSessionEnded );
	void CloseStatusMenu ( class AWillowPlayerController* PC );
	void RunStatusMenu ( class AWillowPlayerController* PC );
	void Initialized ( );
	void AddNetworkSubmenuHeaders ( );
	void CalcActorClassStats ( );
	void SortNetworkUsageData ( );
	void FillChannelData ( class UChannel* Chan );
	void GenerateNetworkChannelUsageNative ( );
	void GenerateMemoryUsageDataNative ( );
	void ExportMemoryUsageDataNative ( );
	void LogMemoryUsageDataNative ( );
	void SortMemoryUsageData ( );
	struct FString FormatFloatAsString ( float Number, int FloatPrecision );
	struct FString FormatNumberAsString ( int Number );
	void SyncContentBrowser ( struct FString ObjPath );
	bool eventInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	bool eventInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	void AddNetworkSnapshotSubmenuScreen ( struct FtMenuData MenuEntryTemplate );
	void AddMemorySnapshotSubmenuScreen ( struct FtMenuData MenuEntryTemplate );
	void AddMemorySnapshotSummaryScreen ( struct FtMenuData MenuEntryTemplate );
	struct FString GetMemorySnapshotTimestamp ( );
	void AddMemorySubmenuHeaders ( );
	void IncrementInstanceDataSwitch ( struct FName InstanceDataSwitchName, int NewSwitchValue );
	void GetBodyCompositionFromScript ( class UIBodyInfoProvider* BodyInfoProvider, struct FBodyCompositionData* BodyComposition );
	int GetNumberOfConfigurationsForRemainingWeaponParts ( class UWeaponBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int StartingFromWeaponPartType );
	int GetNumberOfConfigurationsForWeaponManufacturer ( class UWeaponBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer );
	int GetNumberOfConfigurationsForWeaponBalanceDefinition ( class UWeaponBalanceDefinition* BalanceDefinition );
	void GetWeightedWeaponPartList ( class UWeaponBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int WeaponPartType, TArray< struct FGearBuilderWeightedWeaponPart >* WeightedParts );
	class UManufacturerDefinition* GetSoleManufacturerForWeapon ( class UWeaponBalanceDefinition* BalanceDefinition );
	int GetNumberOfConfigurationsForRemainingItemParts ( class UInventoryBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int StartingFromItemPartType );
	int GetNumberOfConfigurationsForItemManufacturer ( class UInventoryBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer );
	int GetNumberOfConfigurationsForItemBalanceDefinition ( class UInventoryBalanceDefinition* BalanceDefinition );
	void GetWeightedItemPartList ( class UInventoryBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int ItemPartType, TArray< struct FGearBuilderWeightedInventoryPart >* WeightedParts );
	void GenerateListOfPossibleItemsToBuild ( class UClass* DesiredInventoryClass, TArray< struct FString >* BalanceDefNames );
	void GenerateListOfPossibleWeaponsToBuild ( );
	void GenerateListOfPossibleCustomizationsToBuild ( );
	void eventTickImp ( float DeltaTime );
	bool ShouldProcessUIInput ( );
	void eventBlockUIInput ( unsigned long bBlock );
	void eventClearUIInputBlocks ( );
	void CreateAttributeMenu ( unsigned long bNotFilter, unsigned char SortMode, unsigned long Detailed, TArray< struct FString >* Filter );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
};

UClass* UWillowUIInteraction::pClassPointer = NULL;

// Class WillowGame.WillowVehicleBase
// 0x0050 (0x0878 - 0x0828)
class AWillowVehicleBase : public ASVehicle
{
public:
	struct FPointer                                    VfTable_IIResourcePoolProvider;                   		// 0x0828 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyPawn;                               		// 0x082C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              CustomGravityZ;                                   		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SightOriginType;                                  		// 0x0834 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SightOffset;                                      		// 0x0838 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SightSocket;                                      		// 0x0844 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLookingBack : 1;                                 		// 0x084C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisableReloadMessages : 1;                       		// 0x084C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      TurretMovingNow : 1;                              		// 0x084C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              LookingYaw;                                       		// 0x0850 (0x0004) [0x0000000000000000]              
	float                                              LookingYawSpeed;                                  		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowLightProjectileManager*               LightProjMgr;                                     		// 0x0858 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WeaponAmmo;                                       		// 0x085C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxWeaponAmmo;                                    		// 0x0860 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     WeaponTypeScaleformName;                          		// 0x0864 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	class USwfMovie*                                   WeaponTypeScaleformDLCClip;                       		// 0x0870 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USpecialMove_Vehicle*                        ExitAnimationInUse;                               		// 0x0874 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4728 ];

		return pClassPointer;
	};

	void Destroyed_HandleDriver ( );
	void TeleportVehicleToStation ( class ATravelStation* DestinationStation );
	void TeleportVehicleToLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	bool NoFailSetPawnLocation ( class APawn* aPawn, struct FVector NewLocation );
	void UnsitAnimFinished ( );
	bool TeleportExitingDriver ( class APawn* ExitingDriver, struct FVector OldLocation, struct FVector ExitLocation );
	bool FindAutoExitGearbox ( class APawn* ExitingDriver, class AWillowVehicle* TheVehicle, class UWillowVehicleSeatDefinition* TheSeatDef, struct FVector DriverOldLocation, int RecursionLevel );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	bool ExitAnimIsSafeToUse ( class AWillowVehicle* TheVehicleItself, class APawn* ExitingPawn, int MySeatIndex, class USpecialMove_Vehicle* ExitSeq, struct FVector* ExitPosition );
	bool GetExitLocationForAnim ( class AWillowVehicle* TheVehicle, class UAnimSequence* Seq, class APawn* P, unsigned long Mirrored, int SeatIndex, struct FVector* Loc, struct FVector* MeshSpaceLoc );
	bool ExitLocationIsSafeToUse ( struct FVector WorldSpaceExitLocation, class AWillowVehicle* TheVehicle, class APawn* ExitingPawn, int RecursionLevel, unsigned long SkipSnapToFloor, struct FName DebugName, struct FVector* AdjustedExitLocation );
	void ResurrectVehicle ( unsigned char ResurrectReason );
	class AWillowVehicle* GetWillowVehicle ( );
	void ClientUnsitDriver ( class AWillowPawn* WillowP, int SeatIndex );
	struct FVector GetDefaultExitLocation ( class APawn* ExitingDriver );
	class AWillowLightProjectileManager* GetLightProjMgrFor ( class AWillowWeapon* aWeapon );
	bool IsOccupantAllowedToTakeDamage ( class AWillowPawn* Occupant, int OccupantSeatNdx );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	class APawn* GetPawnToTeleport ( );
	void ProcessViewRotationInVehicle ( class UPassengerCameraDefinition* Camera, struct FRotator VehicleRotation, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ComputeViewPitchRange ( class UPassengerCameraDefinition* Camera, struct FRotator VehicleRotation, struct FRotator ViewRotation, float* out_ViewPitchHorizontal, float* out_ViewPitchMin, float* out_ViewPitchMax );
	class AWillowAIPawn* GetAWillowAIPawn ( );
	class AWillowPlayerPawn* GetAWillowPlayerPawn ( );
	class AWillowPawn* GetAWillowPawn ( );
	struct FResourcePoolReference GetResourcePoolForResourceDefinition ( class UResourceDefinition* Resource, unsigned long bCreatePoolIfOneDoesntExist );
	void VehicleAdjustInput ( float* aTurn, float* aLookUp, float* aForward, float* aStrafe );
	void VehicleNoLookBack ( );
	void VehicleLookBack ( );
	struct FVector GetExitAnimEndPosition ( class UAnimSequence* Seq );
	void AttachDriver ( class APawn* P, unsigned long SkipAnim );
	bool eventDriverLeave ( unsigned long bForceLeave, unsigned long SkipPawnPlacement );
	bool DriverAllowedToLeave ( );
	bool DriverEnter ( class APawn* P, unsigned long SkipAnim );
	void UnPossessed ( );
	bool NeedToTurn ( struct FVector targ );
	float GetDamageScaling ( );
	bool BotFire ( unsigned long bFinished );
	unsigned char ChooseFireMode ( );
	void Suicide ( );
	void ServerChangeSeat ( int RequestedSeat );
	void AdjacentSeat ( int Direction, class AController* C );
	void OnTurretStatusChange ( unsigned long bTurretIsMoving );
	bool IsTargetable ( unsigned long bIgnoreCloakAbility );
	bool GetVehicleAndSeatIndex ( class AWillowVehicle** WVehicle, int* SeatIndex );
	void TickReplicatedAmmoCount ( );
};

UClass* AWillowVehicleBase::pClassPointer = NULL;

// Class WillowGame.WillowVehicle
// 0x049C (0x0D14 - 0x0878)
class AWillowVehicle : public AWillowVehicleBase
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x0878 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDamageSurface;                          		// 0x087C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIUsable;                                 		// 0x0880 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x0884 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIStatusEffectTarget;                     		// 0x0888 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIHealable;                               		// 0x088C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDamageable;                             		// 0x0890 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyInfoProvider;                       		// 0x0894 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x0898 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x089C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IICustomizable;                           		// 0x08A0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x08A4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIHitRegionConsumer;                      		// 0x08A8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_ISpecialMoveInterface;                    		// 0x08AC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMapDisplayInfo;                         		// 0x08B0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                ExpLevel;                                         		// 0x08B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GameStage;                                        		// 0x08B8 (0x0004) [0x0000000000000000]              
	int                                                AwesomeLevel;                                     		// 0x08BC (0x0004) [0x0000000000000000]              
	float                                              ExperiencePointMultiplier;                        		// 0x08C0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              ExperiencePointMultiplierBaseValue;               		// 0x08C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExperiencePointMultiplierModifierStack;           		// 0x08C8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bIsInvulnerable : 1;                              		// 0x08D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsAIInvulnerable : 1;                            		// 0x08D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInDriverLeave : 1;                               		// 0x08D4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAICanUse : 1;                                    		// 0x08D4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAIClaimed : 1;                                   		// 0x08D4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bTeamLocked : 1;                                  		// 0x08D4 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bKeyVehicle : 1;                                  		// 0x08D4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEjectPassengersWhenFlipped : 1;                  		// 0x08D4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDestroyVehicleWhenFlippedAndAIControlled : 1;    		// 0x08D4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMustBeUpright : 1;                               		// 0x08D4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNeverReset : 1;                                  		// 0x08D4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bEjectKilledBodies : 1;                           		// 0x08D4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bReducedFallingCollisionDamage : 1;               		// 0x08D4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bTakingRadiusDamage : 1;                          		// 0x08D4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bNoTeleportEffects : 1;                           		// 0x08D4 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bInitialDamageReplicated : 1;                     		// 0x08D4 (0x0004) [0x0000000000000020] [0x00008000] ( CPF_Net )
	unsigned long                                      bDamageSmoking : 1;                               		// 0x08D4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bHeavyDamageSmoking : 1;                          		// 0x08D4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      UseSimplifiedAIEngineRtpcModel : 1;               		// 0x08D4 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlayingSpawnEffect : 1;                          		// 0x08D4 (0x0004) [0x0000000000000020] [0x00080000] ( CPF_Net )
	unsigned long                                      bShowDamageDebug : 1;                             		// 0x08D4 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bStealthVehicle : 1;                              		// 0x08D4 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bHandbrakeEffects : 1;                            		// 0x08D4 (0x0004) [0x0000000000000020] [0x00400000] ( CPF_Net )
	unsigned long                                      bHoldingCam : 1;                                  		// 0x08D4 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bReverseCam : 1;                                  		// 0x08D4 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      AfterburnerEngaged : 1;                           		// 0x08D4 (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      bInitialized : 1;                                 		// 0x08D4 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bHeadlightsOn : 1;                                		// 0x08D4 (0x0004) [0x0000000000002020] [0x08000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bBraking : 1;                                     		// 0x08D4 (0x0004) [0x0000000000002020] [0x10000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bReversing : 1;                                   		// 0x08D4 (0x0004) [0x0000000000002020] [0x20000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bThrottling : 1;                                  		// 0x08D4 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bIsStationaryTurret : 1;                          		// 0x08D4 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bSpawning : 1;                                    		// 0x08D8 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bDespawned : 1;                                   		// 0x08D8 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bDisableSeatSwap : 1;                             		// 0x08D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFrontalCollision : 1;                            		// 0x08D8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bFrontalCollisionWithFixed : 1;                   		// 0x08D8 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bScrapeActive : 1;                                		// 0x08D8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bScrapeCurrent : 1;                               		// 0x08D8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsAvailableForUse : 1;                           		// 0x08D8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bCostsToUse : 1;                                  		// 0x08D8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bResurrecting : 1;                                		// 0x08D8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bSuspendBaseRestrictions : 1;                     		// 0x08D8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	float                                              MinRBImpactDamageForce;                           		// 0x08DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ImpactDamage;                                     		// 0x08E0 (0x0004) [0x0000000000000000]              
	float                                              RunOverDamage;                                    		// 0x08E4 (0x0004) [0x0000000000000000]              
	float                                              FeedbackDamage;                                   		// 0x08E8 (0x0004) [0x0000000000000000]              
	float                                              LastRBImpactDamage;                               		// 0x08EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HangTime;                                         		// 0x08F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DebugPursuitPoint;                                		// 0x08F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      VehicleFOVState;                                  		// 0x0900 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      Team;                                             		// 0x0901 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      TurretFiringMode;                                 		// 0x0902 (0x0001) [0x0000000000000000]              
	unsigned char                                      VehicleDeathStatus;                               		// 0x0903 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      VehicleDamagePct;                                 		// 0x0904 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      LastBarrelIndex;                                  		// 0x0905 (0x0001) [0x0000000000000000]              
	unsigned char                                      CostsToUseType;                                   		// 0x0906 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              VehicleDesiredFOV;                                		// 0x0908 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       HoodLeftSocketName;                               		// 0x090C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HoodRightSocketName;                              		// 0x0914 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ActorSpawnCost;                                   		// 0x091C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UHitRegionHelper*                            MyHitRegionHelper;                                		// 0x0920 (0x0004) [0x0000000000000000]              
	class UWillowVehicleControlDefinition*             CachedControlDef;                                 		// 0x0924 (0x0004) [0x0000000000000000]              
	float                                              MaxInvertedGroundTime;                            		// 0x0928 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FirstInvertedGroundCollisionTime;                 		// 0x092C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastInvertedGroundCollisionTime;                  		// 0x0930 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VehicleLostTime;                                  		// 0x0934 (0x0004) [0x0000000000000000]              
	float                                              TeamUseTime;                                      		// 0x0938 (0x0004) [0x0000000000000000]              
	float                                              PlayerStartTime;                                  		// 0x093C (0x0004) [0x0000000000000000]              
	float                                              RespawnTime;                                      		// 0x0940 (0x0004) [0x0000000000000000]              
	float                                              InitialSpawnDelay;                                		// 0x0944 (0x0004) [0x0000000000000000]              
	float                                              ObjectiveGetOutDist;                              		// 0x0948 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    LockedOnAkEvent;                                  		// 0x094C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      RanOverDamageType;                                		// 0x0950 (0x0004) [0x0000000000000000]              
	class UClass*                                      RanIntoDamageType;                                		// 0x0954 (0x0004) [0x0000000000000000]              
	float                                              MinRunOverSpeed;                                  		// 0x0958 (0x0004) [0x0000000000000000]              
	int                                                StolenAnnouncementIndex;                          		// 0x095C (0x0004) [0x0000000000000000]              
	float                                              LastRunOverWarningTime;                           		// 0x0960 (0x0004) [0x0000000000000000]              
	float                                              MinRunOverWarningAim;                             		// 0x0964 (0x0004) [0x0000000000000000]              
	class AWillowVehicle*                              NextVehicle;                                      		// 0x0968 (0x0004) [0x0000000000000000]              
	class AWillowVehicleFactory*                       ParentFactory;                                    		// 0x096C (0x0004) [0x0000000000000000]              
	class AWillowMind*                                 Reservation;                                      		// 0x0970 (0x0004) [0x0000000000000000]              
	float                                              ResetTime;                                        		// 0x0974 (0x0004) [0x0000000000000000]              
	float                                              TeamBeaconMaxDist;                                		// 0x0978 (0x0004) [0x0000000000000000]              
	float                                              TeamBeaconPlayerInfoMaxDist;                      		// 0x097C (0x0004) [0x0000000000000000]              
	float                                              WaterDamage;                                      		// 0x0980 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AccumulatedWaterDamage;                           		// 0x0984 (0x0004) [0x0000000000000000]              
	class UClass*                                      VehicleDrowningDamType;                           		// 0x0988 (0x0004) [0x0000000000000000]              
	struct FRotator                                    WeaponRotation;                                   		// 0x098C (0x000C) [0x0000000000000020]              ( CPF_Net )
	class AWillowVehicleWeapon*                        AttachedWeapon;                                   		// 0x0998 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     TurretFlashLocation;                              		// 0x099C (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                TurretFlashCount;                                 		// 0x09A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    TurretWeaponRotation;                             		// 0x09AC (0x000C) [0x0000000000000020]              ( CPF_Net )
	class AWillowWeapon*                               TurretAttachedWeapon;                             		// 0x09B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UStatusEffectsComponent*                     StatusEffectComp;                                 		// 0x09BC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              YawDampingVelMin;                                 		// 0x09C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawDampingVelMax;                                 		// 0x09C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawDampingAngPow;                                 		// 0x09C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVehicleSeatInstance >              Seats;                                            		// 0x09CC (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	int                                                DebugLastSeatNdx;                                 		// 0x09D8 (0x0004) [0x0000000000000000]              
	TArray< struct FVirtualSeatStruct >                VirtualSeats;                                     		// 0x09DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVehicleEffect >                    VehicleEffects;                                   		// 0x09E8 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FFDamageMorphTargets >              DamageMorphTargets;                               		// 0x09F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                OldVehicleHealth;                                 		// 0x0A00 (0x0004) [0x0000000000000000]              
	class USpecialMoveComponent*                       SMComponent;                                      		// 0x0A04 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FReplicatedSpecialMoveData                  ReplicatedSMData;                                 		// 0x0A08 (0x0014) [0x0000000000000020]              ( CPF_Net )
	float                                              LastCheckedAnimSetsTime;                          		// 0x0A1C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRefreshedIdleAnimsTime;                       		// 0x0A20 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageSmokeThreshhold;                            		// 0x0A24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeavyDamageSmokeThreshhold;                       		// 0x0A28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFireEffectDistance;                            		// 0x0A2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastJumpOutCheck;                                 		// 0x0A30 (0x0004) [0x0000000000000000]              
	class UExplosionDefinition*                        ExplosionDefintion;                               		// 0x0A34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionRadius;                                  		// 0x0A38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionDamage;                                  		// 0x0A3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionMomentum;                                		// 0x0A40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    HeavySuspensionShiftAkEvent;                      		// 0x0A44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    LightSuspensionShiftAkEvent;                      		// 0x0A48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightSuspensionShiftThreshold;                    		// 0x0A4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeavySuspensionShiftThreshold;                    		// 0x0A50 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightSuspensionRefireRate;                        		// 0x0A54 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSuspensionSound >                  SuspensionSounds;                                 		// 0x0A58 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FAkPlayingInfo                              HeavySuspensionPlayingInfo;                       		// 0x0A64 (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	class UAkEvent*                                    TireLongAkEvent;                                  		// 0x0A6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    TireLatAkEvent;                                   		// 0x0A70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkRtpc*                                     TireLongAkRtpc;                                   		// 0x0A74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkRtpc*                                     TireLatAkRtpc;                                    		// 0x0A78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TireNoiseCutoffSpeed;                             		// 0x0A7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TireSlideCutoffRatio;                             		// 0x0A80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TireNoiseSmoothingSpeed;                          		// 0x0A84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TireSlideDecayRate;                               		// 0x0A88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAkPlayingInfo                              TireLongPlayingInfo;                              		// 0x0A8C (0x0008) [0x0000000000080000]              ( CPF_Component )
	struct FAkPlayingInfo                              TireLatPlayingInfo;                               		// 0x0A94 (0x0008) [0x0000000000080000]              ( CPF_Component )
	float                                              TireNoiseSmoothedValue;                           		// 0x0A9C (0x0004) [0x0000000000000000]              
	class UAkSwitch*                                   LastTireMaterialAkSwitch;                         		// 0x0AA0 (0x0004) [0x0000000000000000]              
	float                                              LastTireLatRtpcValue;                             		// 0x0AA4 (0x0004) [0x0000000000000000]              
	class UAkEvent*                                    VehicleScrapeAkEvent;                             		// 0x0AA8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     VehicleScrapeAkRtpc;                              		// 0x0AAC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VehicleScrapeRtpcDecayRate;                       		// 0x0AB0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAkPlayingInfo                              VehicleScrapeAkPlayingInfo;                       		// 0x0AB4 (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	float                                              LastVehicleScrapeAkRtpcValue;                     		// 0x0ABC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    VehicleCollisionAkEvent;                          		// 0x0AC0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     VehicleImpactForceAkRtpc;                         		// 0x0AC4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinRBCollisionForceSound;                         		// 0x0AC8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAkPlayingInfo                              VehicleImpactAkPlayingInfo;                       		// 0x0ACC (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	float                                              LastImpactAkEventTime;                            		// 0x0AD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastImpactAkRtpcValue;                            		// 0x0AD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    EngineStartAkEvent;                               		// 0x0ADC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    EngineStopAkEvent;                                		// 0x0AE0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     EngineRpmAkRtpc;                                  		// 0x0AE4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     EngineLoadAkRtpc;                                 		// 0x0AE8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkRtpc*                                     EngineThrottleAkRtpc;                             		// 0x0AEC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineRpmDecayRate;                               		// 0x0AF0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineRpmIncreaseRate;                            		// 0x0AF4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineRpmDecelRate;                               		// 0x0AF8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineLoadIncreaseRate;                           		// 0x0AFC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineLoadDecayRate;                              		// 0x0B00 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAkPlayingInfo                              EngineAkPlayingInfo;                              		// 0x0B04 (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	float                                              LastRpmRtpcValue;                                 		// 0x0B0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastLoadRtpcValue;                                		// 0x0B10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastEffectiveSpeed;                               		// 0x0B14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DecelTimeStamp;                                   		// 0x0B18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AfterburnerBelowThresholdTime;                    		// 0x0B1C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TeamBeaconOffset;                                 		// 0x0B20 (0x000C) [0x0000000000000000]              
	float                                              SpawnRadius;                                      		// 0x0B2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  LockedTexture;                                    		// 0x0B30 (0x0004) [0x0000000000000000]              
	struct FVector                                     CachedPlayerWeaponAimPoint;                       		// 0x0B34 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PlayerControllerNameForLastCachedAimPoint;        		// 0x0B40 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              FullSteerThreshold;                               		// 0x0B48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AISteerChangeThreshold;                           		// 0x0B4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseAngle;                                     		// 0x0B50 (0x0004) [0x0000000000000000]              
	float                                              SlopeMinDriveLimit;                               		// 0x0B54 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeMaxDriveLimit;                               		// 0x0B58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseAngleDegrees;                              		// 0x0B5C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ImpulseMultiplier;                                		// 0x0B60 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              KillswitchBrakes;                                 		// 0x0B6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AICollisionBackupDistance;                        		// 0x0B70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AICollisionTraceExtent;                           		// 0x0B74 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLatVelCutoff;                            		// 0x0B80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelParticleCurrentScale;                        		// 0x0B84 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCamDist;                                   		// 0x0B88 (0x0004) [0x0000000000000000]              
	float                                              DesiredCamDist;                                   		// 0x0B8C (0x0004) [0x0000000000000000]              
	struct FVector                                     SmoothedCamRotZ;                                  		// 0x0B90 (0x000C) [0x0000000000000000]              
	float                                              ReleaseCamTime;                                   		// 0x0B9C (0x0004) [0x0000000000000000]              
	float                                              ReverseCamTime;                                   		// 0x0BA0 (0x0004) [0x0000000000000000]              
	float                                              AfterburnerThreshold;                             		// 0x0BA4 (0x0004) [0x0000000000000000]              
	float                                              AfterburnerActivationTime;                        		// 0x0BA8 (0x0004) [0x0000000000000000]              
	float                                              AfterburnerTorqueBonus;                           		// 0x0BAC (0x0004) [0x0000000000000000]              
	struct FResourcePoolReference                      AfterburnerPool;                                  		// 0x0BB0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              SpeedMultiplierAIOnly;                            		// 0x0BBC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedMultiplierAIOnlyBaseValue;                   		// 0x0BC0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SpeedMultiplierAIOnlyModifierStack;               		// 0x0BC4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              SpeedMultiplierAll;                               		// 0x0BD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedMultiplierAllBaseValue;                      		// 0x0BD4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SpeedMultiplierAllModifierStack;                  		// 0x0BD8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UWillowPursuitGrid* >                PursuitGrids;                                     		// 0x0BE4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystemComponent*                    SkidEffect;                                       		// 0x0BF0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    AtRestEffect;                                     		// 0x0BF4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LockedForwardVel;                                 		// 0x0BF8 (0x0004) [0x0000000000000000]              
	struct FIndexPair                                  SwapPair;                                         		// 0x0BFC (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                          		// 0x0C04 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastMakeNoiseTime;                                		// 0x0C08 (0x0004) [0x0000000000000000]              
	class AResourcePoolManager*                        ResourcePoolManager;                              		// 0x0C0C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DriverThreshold;                                  		// 0x0C10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UpdateWheelContactNum;                            		// 0x0C14 (0x0004) [0x0000000000000000]              
	float                                              UpdateWheelContactTime;                           		// 0x0C18 (0x0004) [0x0000000000000000]              
	float                                              UpdateWheelContactInterval;                       		// 0x0C1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UVSSUIDefinition*                            VSSUIDef;                                         		// 0x0C20 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UVehicleHandlingDefinition*                  HandlingDef;                                      		// 0x0C24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UChassisDefinition*                          ChassisDef;                                       		// 0x0C28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UVehicleClassDefinition*                     VehicleDef;                                       		// 0x0C2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UVehicleSpawnStationVehicleDefinition*       VSSVehicleDef;                                    		// 0x0C30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                      		// 0x0C34 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FReplicatedCoordinatedEffect                ReplicatedCFX;                                    		// 0x0C44 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FInstanceDataSet                            InstanceDataState;                                		// 0x0C4C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UMaterialInstance*                           VehicleMaterial;                                  		// 0x0C58 (0x0004) [0x0000000000000000]              
	class UMaterialInstance*                           VehicleMaterialParent;                            		// 0x0C5C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LastCheckedHeadlightsTime;                        		// 0x0C60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowVehicleCombatArea*                    LastVehicleCombatArea;                            		// 0x0C64 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCombatAreaCheckTime;                          		// 0x0C68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CombatAreaCheckInterval;                          		// 0x0C6C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     VelocityBeforeRBCollision;                        		// 0x0C70 (0x000C) [0x0000000000000000]              
	float                                              MeleeImpulse;                                     		// 0x0C7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastFrontalCollisionWithFixedTime;                		// 0x0C80 (0x0004) [0x0000000000000000]              
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0C84 (0x0004) [0x0000000000000000]              
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                  		// 0x0C88 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                          		// 0x0C94 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              HitRegionHealthScaleAttribute;                    		// 0x0C98 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitRegionHealthScaleAttributeBaseValue;           		// 0x0C9C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                HitRegionHealthScaleAttributeModifierStack;       		// 0x0CA0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ImpactEffectReFireDelay;                          		// 0x0CAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactEffectThreshold;                            		// 0x0CB0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWillowImpactDefinition*                     ImpactEffectDefinition;                           		// 0x0CB4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastImpactEffectTime;                             		// 0x0CB8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    ScrapeEffectComponent;                            		// 0x0CBC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPhysEffectInfo                             ScrapeEffectInfo;                                 		// 0x0CC0 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             DefaultWheelParticleSystem;                       		// 0x0CD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinParticleSlipVelocity;                          		// 0x0CD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastScrapeTime;                                   		// 0x0CDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotalSlip;                                        		// 0x0CE0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastSlideActive;                                  		// 0x0CE4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FItemPoolInfo >                     ItemPoolList;                                     		// 0x0CE8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                CostsToUseAmount;                                 		// 0x0CF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    CachedCustomization;                              		// 0x0CF8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              StrafeSteeringValue;                              		// 0x0CFC (0x0004) [0x0000000000000000]              
	float                                              PreviousSteeringTime;                             		// 0x0D00 (0x0004) [0x0000000000000000]              
	float                                              TimeSelfLastDamagedByCollision;                   		// 0x0D04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastKnownNumberOfPlayers;                         		// 0x0D08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastKnownMaxPlayerExpLevel;                       		// 0x0D0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeBetweenBalanceChecks;                         		// 0x0D10 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4730 ];

		return pClassPointer;
	};

	void CrushedByActor ( class AActor* Other );
	class APawn* GetOccupantWhoCanPickup ( class UIPickupable* Pickup, class AController** OutController );
	void ClientInitiateCustomizationRequest ( class UCustomizationDefinition* NewCustomization );
	void eventInitiateCustomizationRequest ( class UCustomizationDefinition* NewCustomization );
	struct FString eventGetMapDisplayName ( );
	struct FString eventGetMapDisplayHeader ( );
	bool eventHandleHealthDepleted ( class AController* InstigatedBy, class UClass* DamageType, struct FVector HitLocation, class UIDamageCauser* DamageCauser, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void Behavior_ChangeUsabilityCost ( unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType );
	void Behavior_ChangeUsability ( unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType );
	void OnDefaultFOVChanged ( );
	float GetAfterburnerVehicleFOV ( );
	float GetDefaultVehicleFOV ( );
	float GetFlexibleVehicleFOV ( float InFOV );
	void SetSimObject ( class USVehicleSimBase* NewSimObject );
	void eventServerSpecialMove_StopAny ( );
	void eventServerSpecialMove_Stop ( class USpecialMoveDefinition* OldSMD );
	void eventServerSpecialMove_Queue ( class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, struct FName CallbackName, class UObject* CallbackObject, class UObject* Data );
	void eventServerSpecialMove_Play ( class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, struct FName CallbackName, class UObject* CallbackObject, class UObject* Data );
	void SetReplicatedSMData ( struct FSpecialMoveData* NewSMData );
	unsigned char GetDefaultRootMotionRotationMode ( );
	unsigned char GetDefaultRootMotionMode ( );
	class USkeletalMeshComponent* GetSkelMesh ( );
	class USpecialMoveComponent* GetSMComponent ( );
	class AActor* GetActor ( );
	void PlayUIAkEvent ( class UAkEvent* Event );
	bool ShieldAbsorbedAmmo ( class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb );
	float GetIntrinsicArmor ( );
	void OnShieldDepleted ( class AController* DamageInstigator, unsigned char DamageType );
	void SetShieldStrength ( float ShieldValue );
	float GetMaxShieldStrength ( );
	float GetShieldStrength ( );
	void NotifyDamageTaken ( struct FDamageEventSummary* DamageSummary );
	void SetHidden ( unsigned long bNewHidden );
	void eventFreezeForCinematicMode ( );
	bool eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void ResurrectVehicle ( unsigned char ResurrectReason );
	class AWillowVehicle* GetWillowVehicle ( );
	void SetVehicleDespawned ( unsigned long bInDespawned, struct FVector NewLocation, struct FRotator NewRotation );
	void OnNoLongerTargetedByAI ( class AWillowMind* AIMind );
	void OnTargetedByAI ( class AWillowMind* AIMind );
	void PancakeOther ( class APawn* Other );
	void GetExpInfo ( int* ExpLevelValue );
	bool GetVehicleAndSeatIndex ( class AWillowVehicle** WVehicle, int* SeatIndex );
	void Behavior_RegisterTargetable ( unsigned long bUnregister );
	void SetVehicleSpawning ( unsigned long bInSpawning );
	void eventServerSetVehicleSpawning ( unsigned long bInSpawning );
	void SetVehicleMaterial ( class UMaterialInstance* MatInst );
	void eventServerSetVehicleMaterial ( class UMaterialInstance* MatInst );
	void ServerNotifyAltFireTriggered ( );
	void ServerNotifyTargetLockSuccessful ( class AActor* NewLockOnTarget );
	void RouteCallToServerForAltFireTrigger ( );
	void RouteCallToServerForTargetLockSuccess ( class AActor* NewLockOnTarget );
	void ServerStopFireTurret ( unsigned char FireModeNum );
	void StopAltFireTurret ( );
	void StartAltFireTurret ( );
	void StopFireTurret ( );
	void ServerStartFireTurret ( unsigned char FireModeNum );
	void StartFireTurret ( );
	void ServerClearStatusEffects ( unsigned long bKillImmediately );
	void Behavior_ClearStatusEffects ( unsigned long bKillImmediately );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	class UImpactDefinition* GetUntouchImpact ( );
	class UImpactDefinition* GetTouchImpact ( );
	bool CanSplash ( );
	void FadeInTireNoise ( );
	void SetCanTargetCheat ( unsigned long bCanTargetIn );
	bool CanTarget ( );
	void SetCanTarget ( unsigned long bCanTargetIn );
	void ResetDebugData ( );
	class APawn* DebugGetNextDriverOrPassenger ( );
	struct FResourcePoolReference GetResourcePoolForResourceDefinition ( class UResourceDefinition* Resource, unsigned long bCreatePoolIfOneDoesntExist );
	void SetupSeatPawnViewLimits ( int SeatIndex );
	void VehicleAdjustInput ( float* aTurn, float* aLookUp, float* aForward, float* aStrafe );
	void eventGetTargetName ( struct FString* TargetName );
	struct FVector GetTargetableLocation ( );
	bool DisplayParentInfo ( );
	void GetAllBarInfo ( TArray< struct FInfoBarData >* BarData );
	bool IsAutoAimTarget ( );
	bool IsInvulnerable ( );
	void UpdateEngineSound ( unsigned long bStopSound );
	void StopEngineSound ( );
	void StartEngineSound ( );
	void NotifyUserCouldNotAffordAttemptedUse ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void SetInteractionIcon ( class UInteractionIconDefinition* Icon, unsigned char UsedType );
	bool UseObject ( class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType );
	void ApplyCameraYawDamping ( float* aTurn );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	bool GetSeatLocationAndRotation ( int SeatIndex, struct FVector* SeatLocation, struct FRotator* SeatRotation );
	struct FVector GetHijackLocation ( int SeatIndex );
	unsigned char GetSide ( struct FVector WorldLoc, int SeatIndex );
	void KillAfterburnerEffects ( );
	void AfterburnerEffects ( float DeltaTime, unsigned long AfterburnerIsOn );
	class APlayerController* ControllerToPlayEffects ( );
	void AfterburnerShakeTimer ( );
	void AfterburnerOff ( );
	void eventServerAfterburnerOff ( );
	void AfterburnerOn ( );
	void ServerAfterburnerOn ( );
	void ValidateAfterburner ( );
	void Turbo ( );
	bool CanDeactivateAfterburner ( );
	bool CanActivateAfterburner ( );
	void TickPursuitNodes ( float DeltaTime );
	class AWillowWeapon* GetCharacterWeapon ( class AController* CharController );
	void DrawReverseConeDebug ( struct FVector vecForward );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	void eventSetAIInputs ( float InForward, struct FVector DesiredSteeringDirection, float InUp );
	void SpawnTracer ( int nSeat, struct FVector EffectLocation, struct FVector HitLocation );
	void DamageDamage ( int Index );
	void DamageDebug ( );
	void DrawHUD ( class AHUD* H );
	void OnExitVehicle ( class UWillowSeqAct_ExitVehicle* Action );
	void GetSVehicleDebug ( TArray< struct FString >* DebugInfo );
	void eventMorphTargetDestroyed ( int MorphNodeIndex );
	void SetMorphTarget ( struct FString Cmd );
	void eventSetInitialMorph ( );
	void eventApplyMorphHeal ( int Amount );
	void ApplyMorphDamage ( struct FVector HitLocation, int Damage );
	void InitializeMorphs ( );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* Collision );
	void ApplyCollisionDamageFrom ( class AActor* DamageCauser, class UPrimitiveComponent* OtherComponent, float DamageToApply );
	void ApplyCollisionDamageTo ( class AActor* ActorToReceiveDamage, unsigned char CollisionEnum, class UPrimitiveComponent* OtherComponent, struct FVector inVelocity, unsigned long bRunOverDamage );
	void TookDamageFromEnemy ( class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	struct FString GetHumanReadableName ( );
	int FindSeatIndexForPawn ( class APawn* inPawn );
	void SitAnimFinished ( );
	void ClientCheckForSitAnimFinished ( );
	void UnsitDriver ( class AWillowPawn* WillowP, class AWillowVehicleBase* VehicleOrWeaponPawn, int SeatIndex );
	void ClientUnsitDriver ( class AWillowPawn* WillowP, int SeatIndex );
	void SitDriver ( class AWillowPawn* WillowP, int SeatIndex, unsigned char Side, unsigned long SkipAnim );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P, unsigned long SkipAnim );
	void PlayTeleportOutOfVehicleEffect ( class AWillowPawn* WP );
	void PlayTeleportEffectAtLocation ( class AWillowPawn* WP, struct FVector TeleportLocation );
	void PlayTeleportIntoVehicleEffect ( class AWillowPawn* WP );
	void CheckVehicleDamage ( );
	void DropItemPoolItems ( );
	float AdjustFOVAngle ( float VFOVAngle );
	void VehicleCalcCamera ( float DeltaTime, int SeatIndex, unsigned long bPivotOnly, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	bool CalcCamera ( float DeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void VehicleWeaponHitLocationEffects ( int SeatIndex, struct FVector HitLocation );
	void eventVehicleAdjustFlashLocation ( int SeatIndex, unsigned char FireModeNum, struct FVector NewLocation, unsigned long bClear );
	void VehicleAdjustFlashCount ( int SeatIndex, unsigned char FireModeNum, unsigned long bClear );
	void VehicleWeaponImpactEffects ( struct FVector HitLocation, int SeatIndex );
	void VehicleWeaponFireEffects ( struct FVector HitLocation, int SeatIndex );
	void eventVehicleWeaponStoppedFiring ( unsigned long bViaReplication, int SeatIndex );
	void WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication );
	void eventVehicleWeaponFired ( unsigned long bViaReplication, struct FVector HitLocation, int SeatIndex );
	class APlayerController* GetPlayerController ( int SeatIndex );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void GetWeaponViewAxes ( class AWillowWeapon* WhichWeapon, struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis );
	bool OverrideEndFire ( unsigned char FireModeNum );
	bool OverrideBeginFire ( unsigned char FireModeNum );
	struct FRotator GetWeaponAim ( class AWillowVehicleWeapon* VWeapon, unsigned long bUseSeatPivotPoint );
	bool IsValidVehicleWeaponAimTraceHitActor ( class AActor* HitActor );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector GetPhysicalFireStartLoc ( class AWillowWeapon* ForWeapon );
	struct FVector GetEffectLocation ( int SeatIndex );
	bool eventGetBarrelLocationAndRotation ( int SeatIndex, struct FVector* SocketLocation, struct FRotator* SocketRotation );
	void ClearFlashLocation ( class AWeapon* Who );
	void SetFlashLocation ( class AWeapon* Who, unsigned char FireModeNum, struct FVector NewLoc );
	void IncrementFlashCount ( class AWeapon* Who, unsigned char FireModeNum );
	void ClearFlashCount ( class AWeapon* Who );
	void UnPossessed ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void InitializeTurrets ( );
	class UMeshComponent* GetGunMeshFromInstanceData ( int SeatIndex );
	void PreCacheSeatNames ( );
	void ClientInitializeSeats ( );
	class AWillowVehicleWeapon* SpawnWeaponForSeat ( int SeatIndex );
	void ReinitializeSeats ( );
	void InitializeSeats ( );
	bool ImportantVehicle ( );
	bool IsArtillery ( );
	class AActor* GetHomingTarget ( class AWillowProjectile* Seeker, class AController* InstigatedBy );
	bool IsFullyArmored ( );
	unsigned char GetDamageSurfaceTypeFromHit ( struct FTraceHitInfo* HitInfo );
	unsigned char GetDefaultDamageSurfaceType ( );
	float AdjustMomentumForSurfaceType ( float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo HitInfo );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, float* InDamage, float* DamageSeverityPercent, struct FVector* Momentum, struct FTraceHitInfo* HitInfo );
	void TookDamageFromFriendly ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void eventTakeDamage ( float RawDamage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool HealDamage ( float Amount, class AController* Healer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, unsigned long bIsShieldRestore );
	void SetReservation ( class AController* C );
	bool StopsProjectile ( class AProjectile* P );
	bool SpokenFor ( class AController* C );
	bool ChangedReservation ( class APawn* P );
	float ReservationCostMultiplier ( class APawn* P );
	unsigned char GetTeamNum ( );
	bool OpenPositionFor ( class APawn* P );
	bool IndependentVehicle ( );
	void eventCheckReset ( );
	bool ApplySeatRuleSet ( int SeatIndex, class AWillowMind* WMind );
	void PassengerLeave ( int SeatIndex );
	bool eventDriverLeave ( unsigned long bForceLeave, unsigned long SkipPawnPlacement );
	void SetupHandIKForPawn ( class AWillowPawn* WPawn, int SeatIndex );
	void UpdateVirtualSeatMapping ( int RealSeat );
	bool PassengerEnter ( class APawn* P, int SeatIndex, unsigned long SkipAnim );
	int GetFirstAvailableHijackSeat ( class APawn* Attacker );
	int GetFirstAvailableSeatFor ( class AController* C );
	void DriverLeft ( );
	void ActivateWeapon ( int WeaponSeatIndex );
	bool DriverEnter ( class APawn* P, unsigned long SkipAnim );
	void SetVehicleBlockingMeshCollision ( class APawn* DriverPawn );
	class AWillowVehicle* GetMoveTargetFor ( class APawn* P );
	int NumPassengers ( );
	void UpdateControllerOnPossess ( unsigned long bVehicleTransition );
	void PlayHorn ( );
	bool TooCloseToAttack ( class AActor* Other );
	void LockOnWarning ( class AWillowProjectile* IncomingMissile );
	void SendLockOnMessage ( int Switch );
	void ShootMissile ( class AProjectile* P );
	void IncomingMissile ( class AProjectile* P );
	bool Dodge ( unsigned char DoubleClickMove );
	void TeamChanged ( );
	void eventSetTeamNum ( unsigned char T );
	void PostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void VehicleLocked ( class APawn* P );
	bool TryToHijack ( class APawn* P, int SeatIndex, unsigned long SkipAnim );
	bool CanDrive ( class APawn* P );
	bool TryToRide ( class APawn* P, unsigned long SkipAnim, int PreferredSeat );
	void eventDeactivateVehicle ( unsigned long PlayDeSpawnEffect );
	void eventBlowupVehicle ( );
	bool IsSafeFromBoundaryTurrets ( );
	bool IsOnTheGround ( );
	void ServerUnlockAchievementForAllPassengers ( unsigned char Achievement );
	unsigned char LeviathanConvertDeathStatus ( );
	void ProcessLeviathanVehicleDeathEvent ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	void eventDiedEx ( unsigned long ForceResurrectPlayerOccupants, class AController* Killer, class UClass* DamageType, struct FVector HitLocation, unsigned long bInstaKill, unsigned long bKilledByKillVolume, class UDamagePipeline* Pipeline );
	void eventTornOff ( );
	bool ChangeSeat ( class AController* ControllerToMove, int RequestedSeat );
	bool HasPriority ( class AController* first, class AController* Second );
	void ServerChangeSeat ( int RequestedSeat );
	void SwitchSeats ( );
	int GetAdjacentSeatIndex ( int Direction, class AController* C );
	class AController* GetControllerForSeatPosition ( unsigned char SeatPosition );
	class AController* GetControllerForSeatIndex ( int SeatIndex );
	int GetSeatIndexForController ( class AController* ControllerToMove );
	bool AnySeatAvailable ( );
	bool HijackSeatAvailable ( int SeatIndex, unsigned char Side );
	void eventDrivingStatusChanged ( );
	void eventEjectPassengers ( unsigned long KillThemAsWell, unsigned long ForceResurrectKilledPlayers, unsigned long bInstaKill, unsigned long bKilledByKillVolume, class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector HitLocation );
	void ProcessOneEjectedPassenger ( class APawn* OnePassenger, unsigned long KillHimAsWell, unsigned long ForceResurrectKilledPlayers, unsigned long bInstaKill, unsigned long bKilledByKillVolume, class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector HitLocation );
	void EjectPassengerPosition ( unsigned char PositionToEject, unsigned long bSkipExitAnim );
	bool SeatHasOccupant ( int SeatIndex );
	int GetTotalOccupants ( );
	bool HasAIOccupants ( );
	bool HasPlayerOccupants ( );
	bool HasOccupiedTurret ( );
	bool HasAnySeatAvailableFor ( class AController* C, int SeatIndex );
	bool SeatAvailableFor ( class AController* C, int SeatIndex );
	bool Occupied ( );
	void ActivateHeadLight ( unsigned long bActivated );
	void ActivateReverseLight ( unsigned long bActivated );
	void ActivateBrakeLight ( unsigned long bActivated );
	void AttachGun ( int SeatIndex );
	void eventReplicatedEvent ( struct FName VarName );
	void WeaponRotationChanged ( int SeatIndex );
	void Destroyed ( );
	bool IsOccupantAllowedToTakeDamage ( class AWillowPawn* Occupant, int OccupantSeatNdx );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void eventTakeWaterDamage ( float DeltaTime );
	void eventRanInto ( class AActor* Other );
	void ShutOffVehicleEffectsOnDeath ( );
	void VehicleEvent ( struct FName EventTag );
	void UpdateVehicleEffect ( struct FName EventTag );
	void TriggerVehicleEffect ( struct FName EventTag );
	void SetVehicleEffectParms ( struct FName TriggerName, class UParticleSystemComponent* PSC );
	void InitializeEffects ( );
	bool FastVehicle ( );
	void eventJumpOutCheck ( );
	void EjectDriver ( );
	void eventSelfDestruct ( );
	void StopDeSpawnEffect ( class UObject* Target );
	void StopSpawnEffect ( class UObject* Target );
	void NotifyFinishTeleport ( );
	void RefreshCrewIdleAnimations ( );
	void NotifyBeginTeleport ( );
	bool PlayDeSpawnEffect ( );
	void PlaySpawnEffect ( );
	float GetChargePower ( );
	void eventAttach ( class AActor* Other );
	void FilterActorAttachmentRequest ( class AActor* Other );
	void UnwrapToSimObj ( );
	void eventUnwrapSimpleSettings ( );
	bool NodeIsOnFavoredSide ( unsigned long TargetOnRight, unsigned long IsTargetInFront, unsigned long FacingSame, unsigned long NodeOnLeft );
	int FindGrid ( class UWillowPursuitGridDefinition* GridDef );
	void ReserveBestNode ( class AActor* ReservationRequester, unsigned long TargetIsOnRight, unsigned long IsTargetInFront, unsigned long FacingSame, class UWillowPursuitGridDefinition* GridDef, struct FName PreferredNodeType, int* GridIndex, int* NodeIndex );
	void RecalculateAttributeInitializedState ( );
	void eventOnExpLevelChange ( );
	void eventBalanceVehicleForPlayerUse ( );
	void SetHealthResourcePoolDefinition ( class UResourcePoolDefinition* Definition, class AResourcePoolManager** InResourcePoolManager );
	void PostBeginPlay ( );
	void InitializeBehaviorConsumer ( );
	void SetDefaultInventory ( TArray< class UItemPoolDefinition* >* NewDefaultInventory );
	void SetDefaultInventoryWithProbability ( TArray< struct FItemPoolInfo >* NewDefaultInventory );
	void CheckForCollision ( );
	bool CanReceiveStatusEffects ( );
	void ReactToPrimaryStatusEffect ( class UStatusEffectDefinition* StatusEffect );
	class UObject* GetAttributeContextSource ( );
	float GetBoundingSphereRadius ( );
	void GetHitRegions ( TArray< class UBodyHitRegionDefinition* >* Regions, class UBodyHitRegionDefinition** DefaultRegion );
	void AttachEmitter ( class AEmitter* E, struct FName SocketName );
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate ( );
	TArray< struct FName > GetDefaultStatusEffectSockets ( );
	class UStatusEffectsComponent* GetStatusEffectsComponent ( );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
	bool CanEnterVehicle ( class APawn* P );
	bool HasHomingTargetComponents ( );
	bool IsValidHomingTarget ( );
	bool IsTargetable ( unsigned long bIgnoreCloakAbility );
	bool IsCollisionDebugEnabled ( );
	void ToggleCollisionDebug ( );
	bool IsReverseConeDebugEnabled ( );
	void ToggleReverseConeDebug ( );
	bool IsVehiclePatrolDebugEnabled ( );
	void ToggleVehiclePatrolDebug ( );
	bool IsVehiclePursuitDebugEnabled ( );
	void ToggleVehiclePursuitDebug ( );
	void InitializeRBPhys ( );
	void TerminateRBPhys ( );
	int GetBarrelIndex ( int SeatIndex );
	struct FVector GetSeatPivotPoint ( int SeatIndex );
	void ForceWeaponRotation ( int SeatIndex, struct FRotator NewRotation );
	class AWillowVehicleWeapon* SeatAttachedWeapon ( int SeatIndex, class AWillowVehicleWeapon* NewAttachedWeapon, unsigned long bReadValue );
	int SeatFiringMode ( int SeatIndex, int NewFireMode, unsigned long bReadValue );
	int SeatFlashCount ( int SeatIndex, int NewCount, unsigned long bReadValue );
	struct FVector SeatFlashLocation ( int SeatIndex, struct FVector NewLoc, unsigned long bReadValue );
	struct FRotator SeatWeaponRotation ( int SeatIndex, struct FRotator NewRot, unsigned long bReadValue );
	void PlayHit ( class APawn* SomePawn, struct FVector HitLocation, class UClass* inDamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	bool WasSpawnedFromASpawnStation ( );
	class UWillowVehicleSeatDefinition* GetSeatDefinition ( int InSeatIndex );
	void RemoveCrewAnimSetFromOccupant ( class AWillowPawn* WillowP );
	void AddCrewAnimSetToOccupant ( class AWillowPawn* WillowP );
	bool IsChampion ( );
	void ResetHitRegionHealth ( class UBodyHitRegionDefinition* HitRegion );
	void PlayHealingReaction ( struct FDamageReactionData* Data );
	void PlayDamageReaction ( struct FName HitBone, unsigned long bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum );
	void GetHitRegionHealthValues ( class UBodyHitRegionDefinition* HitRegion, float* outHealth, float* outMaxHealth );
	void ReplicateDamageEffect ( class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, unsigned long bWasHeal );
	void AddDamageToHitRegion ( class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, struct FVector HitLocation, struct FVector HitMomentum, struct FDamageEventSummary* DamageSummary );
	void HealDamageOnHitRegion ( class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary );
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage ( class AController* InstigatedBy, struct FTraceHitInfo HitInfo );
	void ClearBodyCompositionInstance ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ApplyPreviewBodyComposition ( );
	void ChangeInstanceDataSwitch ( struct FName Switch, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	bool IsInsideCombatArea ( class AWillowVehicleCombatArea* TheCombatArea );
	bool AllowFallbackToDefaultCustomizations ( );
	void RefreshCustomizationsOnInstanceData ( );
	struct FName GetCustomizableName ( );
	class UCustomizationDefinition* GetDesiredCustomizationOfType ( class UClass* Type );
	void CustomizationApplied ( class UCustomizationData* Data );
	void GetCustomizableInstanceDataSets ( TArray< struct FPointer >* OutData );
	void RemoveAllStatusEffects ( );
	void FullyReplenishShields ( );
	void FullyReplenishLife ( );
	void SearchForBaseBelow ( float HeightBelow, class AActor** NewBase, struct FVector* HitNormal );
};

UClass* AWillowVehicle::pClassPointer = NULL;

// Class WillowGame.WillowVehicle_ChopperVehicle
// 0x004C (0x0D60 - 0x0D14)
class AWillowVehicle_ChopperVehicle : public AWillowVehicle
{
public:
	TArray< int >                                      GroundEffectIndices;                              		// 0x0D14 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxGroundEffectDist;                              		// 0x0D20 (0x0004) [0x0000000000000000]              
	struct FName                                       GroundEffectDistParameterName;                    		// 0x0D24 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             WaterGroundEffect;                                		// 0x0D2C (0x0004) [0x0000000000000000]              
	float                                              FullAirSpeed;                                     		// 0x0D30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      ContrailEffectIndices;                            		// 0x0D34 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ContrailColorParameterName;                       		// 0x0D40 (0x0008) [0x0000000000000000]              
	unsigned long                                      bAutoLand : 1;                                    		// 0x0D48 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFreelanceStart : 1;                              		// 0x0D48 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              PushForce;                                        		// 0x0D4C (0x0004) [0x0000000000000000]              
	struct FString                                     RadarLockMessage;                                 		// 0x0D50 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastRadarLockWarnTime;                            		// 0x0D5C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4732 ];

		return pClassPointer;
	};

	void SetInputs ( float InForward, float InStrafe, float InUp );
	bool ShouldClamp ( );
	void ResetTurningSpeed ( );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	bool Dodge ( unsigned char DoubleClickMove );
	bool FastVehicle ( );
	bool RecommendLongRangedAttack ( );
	void SetDriving ( unsigned long bNewDriving );
};

UClass* AWillowVehicle_ChopperVehicle::pClassPointer = NULL;

// Class WillowGame.WillowVehicle_FlyingVehicle
// 0x004C (0x0D60 - 0x0D14)
class AWillowVehicle_FlyingVehicle : public AWillowVehicle
{
public:
	float                                              FlyingSpeed;                                      		// 0x0D14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AirTransFriction;                                 		// 0x0D18 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirRotFriction;                                   		// 0x0D24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ForceScalar;                                      		// 0x0D28 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorqueScalar;                                     		// 0x0D34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TiltScalar;                                       		// 0x0D38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveTiltAmount;                                   		// 0x0D3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightMin;                                        		// 0x0D40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightMax;                                        		// 0x0D44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightDesiredMin;                                 		// 0x0D48 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightDesiredMax;                                 		// 0x0D4C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DyingGravity;                                     		// 0x0D50 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceLookAheadVelocityScalar;                     		// 0x0D54 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceStartHeight;                                 		// 0x0D58 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurretConeAngle;                                  		// 0x0D5C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4734 ];

		return pClassPointer;
	};

	void ApplyCameraYawDamping ( float* aTurn );
	struct FImpactInfo TraceThroughTriggers ( struct FVector EndTrace, struct FVector StartTrace );
	float SuggestRiseInput ( float LookAheadVelocityScalar, float TestHeight );
	float GetRiseInput ( float LookAheadScale, float TestHeight );
	void eventSetAIInputs ( float InForward, struct FVector DesiredSteeringDirection, float InRise );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	void UnwrapToSimObj ( );
};

UClass* AWillowVehicle_FlyingVehicle::pClassPointer = NULL;

// Class WillowGame.WillowVehicle_Tank
// 0x0018 (0x0D2C - 0x0D14)
class AWillowVehicle_Tank : public AWillowVehicle
{
public:
	unsigned long                                      bUseSensors : 1;                                  		// 0x0D14 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSteerToFaceDirection : 1;                        		// 0x0D14 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FTankSensor >                       Sensors;                                          		// 0x0D18 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TimeBetweenSensorTests;                           		// 0x0D24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SensorCheckTime;                                  		// 0x0D28 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4736 ];

		return pClassPointer;
	};

	void eventSetAIInputs ( float InForward, struct FVector DesiredSteeringDirection, float InRise );
	void CheckForCollision ( );
};

UClass* AWillowVehicle_Tank::pClassPointer = NULL;

// Class WillowGame.WillowVehicle_WheeledVehicle
// 0x000C (0x0D20 - 0x0D14)
class AWillowVehicle_WheeledVehicle : public AWillowVehicle
{
public:
	float                                              DriftingTimeStamp;                                		// 0x0D14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             BeamTemplate;                                     		// 0x0D18 (0x0004) [0x0000000000000000]              
	class UNxForceFieldRadialComponent*                TemplateFF;                                       		// 0x0D1C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4738 ];

		return pClassPointer;
	};

	int GetWheelIndexFromBoneName ( struct FName BoneName );
	void UnwrapToSimObj ( );
	void ProcessViewRotationInVehicle ( class UPassengerCameraDefinition* Camera, struct FRotator VehicleRotation, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ServerNoHandbrake ( );
	void ServerHandBrake ( );
	void NoHandbrake ( );
	void Handbrake ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
};

UClass* AWillowVehicle_WheeledVehicle::pClassPointer = NULL;

// Class WillowGame.WillowWeaponPawn
// 0x0014 (0x088C - 0x0878)
class AWillowWeaponPawn : public AWillowVehicleBase
{
public:
	class AWillowVehicleWeapon*                        MyVehicleWeapon;                                  		// 0x0878 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x087C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MySeatIndex;                                      		// 0x0880 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      DriverIsAttached : 1;                             		// 0x0884 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      SeatIndexReceived : 1;                            		// 0x0884 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInDriverLeave : 1;                               		// 0x0884 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              FixViewTime;                                      		// 0x0888 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4740 ];

		return pClassPointer;
	};

	struct FVector GetAimDirection ( );
	struct FVector GetPivotPoint ( );
	void SetAllegiance ( class UPawnAllegiance* NewAllegiance );
	bool eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	class AWillowVehicle* GetWillowVehicle ( );
	void ClientUnsitDriver ( class AWillowPawn* WillowP, int SeatIndex );
	bool GetVehicleAndSeatIndex ( class AWillowVehicle** WVehicle, int* SeatIndex );
	void ServerNotifyAltFireTriggered ( );
	void ServerNotifyTargetLockSuccessful ( class AActor* NewLockOnTarget );
	void StopFireTurret ( );
	void StartFireTurret ( );
	class APawn* GetPawnToTeleport ( );
	void ProcessViewRotationForAttachedRiders ( float DeltaTime, struct FRotator* out_ViewRotation );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void VehicleAdjustInput ( float* aTurn, float* aLookUp, float* aForward, float* aStrafe );
	void GetExpInfo ( int* ExpLevelValue );
	bool DisplayParentInfo ( );
	void GetAllBarInfo ( TArray< struct FInfoBarData >* BarData );
	bool IsDead ( );
	void eventTakeDamage ( float RawDamage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void SitAnimFinished ( );
	void ClientCheckForSitAnimFinished ( );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	bool IndependentVehicle ( );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P, unsigned long SkipAnim );
	void WaitingForReplicatedData ( );
	void SetBaseEyeheight ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	float GetCollisionRadius ( );
	bool DoJump ( unsigned long bUpdating );
	void SetMovementPhysics ( );
	void eventBaseChange ( );
	void JumpOffPawn ( );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo HitInfo );
	void DropToGround ( );
	void ServerChangeSeat ( int RequestedSeat );
	void SwitchSeats ( );
	bool IsOccupantAllowedToTakeDamage ( class AWillowPawn* Occupant, int OccupantSeatNdx );
	void DoAttachedRiderSetup ( class AController* C );
	bool eventDriverLeave ( unsigned long bForceLeave, unsigned long SkipPawnPlacement );
	void PossessWeaponPawnForAttachedRiderExit ( );
	void ClientPossessAttachedRiderOnEntry ( class APawn* RiderPawn );
	void ServerPossessAttachedRiderOnEntry ( class AController* C );
	void DriverLeft ( );
	bool DriverEnter ( class APawn* P, unsigned long SkipAnim );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void ClearFlashLocation ( class AWeapon* Who );
	void SetFlashLocation ( class AWeapon* Who, unsigned char FireModeNum, struct FVector NewLoc );
	void ClearFlashCount ( class AWeapon* Who );
	void IncrementFlashCount ( class AWeapon* Who, unsigned char FireModeNum );
	void GetWeaponFacingDir ( struct FVector* OutFacingDir );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void SetVehicleData ( class AWillowVehicle* InMyVehicle, class AWillowVehicleWeapon* InVehicleWeapon, int InSeatIndex );
	bool IsAttachedRiderSeat ( );
	class AController* GetDriverController ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowWeaponPawn::pClassPointer = NULL;

// Class WillowGame.WillowVehicleCombatArea
// 0x0010 (0x0198 - 0x0188)
class AWillowVehicleCombatArea : public AActor
{
public:
	float                                              CombatRadius;                                     		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CombatDisplayHeight;                              		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisplayCombatRadius : 1;                         		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AWillowVehicleCombatArea*                    NextVehicleCombatArea;                            		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4742 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	bool IsActorInside ( class AActor* TestActor );
	void RemoveFromList ( );
	void AddToList ( );
};

UClass* AWillowVehicleCombatArea::pClassPointer = NULL;

// Class WillowGame.WillowVehicleCombatAreaRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowVehicleCombatAreaRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4744 ];

		return pClassPointer;
	};

};

UClass* UWillowVehicleCombatAreaRenderingComponent::pClassPointer = NULL;

// Class WillowGame.WillowVehicleControlDefinition
// 0x0002 (0x003E - 0x003C)
class UWillowVehicleControlDefinition : public UGBXDefinition
{
public:
	unsigned char                                      CameraSetting;                                    		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SteeringSetting;                                  		// 0x003D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4746 ];

		return pClassPointer;
	};

};

UClass* UWillowVehicleControlDefinition::pClassPointer = NULL;

// Class WillowGame.WillowVehicleFactory
// 0x0038 (0x027C - 0x0244)
class AWillowVehicleFactory : public ANavigationPoint
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowVehicle*                              VehicleArchetype;                                 		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowVehicle*                              ChildVehicle;                                     		// 0x024C (0x0004) [0x0000000000000000]              
	float                                              RespawnProgress;                                  		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              RespawnRateModifier;                              		// 0x0254 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStartNeutral : 1;                                		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasLockedVehicle : 1;                            		// 0x0258 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      IsActive : 1;                                     		// 0x0258 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	int                                                TeamNum;                                          		// 0x025C (0x0004) [0x0000000000000000]              
	struct FVector                                     HUDLocation;                                      		// 0x0260 (0x000C) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   HUDMaterialInstance;                              		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FRotator >                          InitialGunRotations;                              		// 0x0270 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4748 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void SpawnVehicle ( );
	void eventPreSpawn ( );
	unsigned char GetTeamNum ( );
	void VehicleDestroyed ( class AWillowVehicle* V );
	void TarydiumBoost ( float Quantity );
	void Deactivate ( );
	void Activate ( unsigned char T );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventSetInitialState ( );
	void PostBeginPlay ( );
};

UClass* AWillowVehicleFactory::pClassPointer = NULL;

// Class WillowGame.WillowVehicleSeatDefinition
// 0x0120 (0x015C - 0x003C)
class UWillowVehicleSeatDefinition : public UGBXDefinition
{
public:
	unsigned long                                      bDoNotUseThisSeat : 1;                            		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AimTowardCameraLookSpot : 1;                      		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHideOccupant : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      TransferVehicleDamageToSeat : 1;                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      TransferVehicleDamageToSeat_AI : 1;               		// 0x003C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      DisplayHealthBarForPassenger : 1;                 		// 0x003C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bHijackSeat : 1;                                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAIOnly : 1;                                      		// 0x003C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      IsAttachedRiderSeat : 1;                          		// 0x003C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      ForceOccupantCrouch : 1;                          		// 0x003C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      DeadPawnsDropLootFromThisSeat : 1;                		// 0x003C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	struct FName                                       VirtualSeatKey;                                   		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UInteractionIconDefinition*                  InteractIcon;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULocalizedStringDefinition*                  SeatInteractTextDefinition;                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerInteractionLeftMinAngle;                    		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayerInteractionRightMaxAngle;                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SeatAnchor;                                       		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPassengerCameraDefinition*                  CameraDef;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OccupantCullDistance;                             		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ViewLimitLowerLeft;                               		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ViewLimitUpperRight;                              		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UInventoryBalanceDefinition*                 WeaponBalanceDefinition;                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GunAttachmentSocket;                              		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFinalAimAdjustment;                            		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             GunSocket;                                        		// 0x0090 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             GunPivotPoints;                                   		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TurretControls;                                   		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       WeaponFireSwitch;                                 		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TurretVarPrefix;                                  		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USpecialMoveDefinition*                      WeaponFireSMD;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NextSeatIndex;                                    		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USpecialMove_Vehicle* >              Anim_SeatSwap;                                    		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USpecialMove_Vehicle*                        Anim_EnterLeft;                                   		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_Vehicle*                        Anim_EnterRight;                                  		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_Vehicle*                        Anim_EnterFront;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_Vehicle*                        Anim_EnterBack;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_Vehicle*                        Anim_Idle;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_Vehicle*                        Anim_Hijack;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_Vehicle*                        Anim_Exit1;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMove_Vehicle*                        Anim_Exit2;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeftHandPlacementName;                            		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightHandPlacementName;                           		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              GrenadeThrowHeight;                               		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAIDefinition*                               SeatAIDef;                                        		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      HijackSide;                                       		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AISeatPos;                                        		// 0x0115 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DamageRules;                                      		// 0x0116 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreferredExitSide;                                		// 0x0117 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DontResetWeaponFireSwitchPerShot;                 		// 0x0118 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HijackAimSocket;                                  		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageTransferFactor;                             		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageTransferFactor_AI;                          		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRagdollDeathImpulseStruct >        ExtraDeathImpulsesDuringRagdoll;                  		// 0x012C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UStatusEffectDefinition*                     StatusEffectToApplyOnKillEjection;                		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                HUD_SeatIndexForWeapon;                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EjectRandMin;                                     		// 0x0140 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EjectRandMax;                                     		// 0x014C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      ControllerRumbleWhenRotating;                     		// 0x0158 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4750 ];

		return pClassPointer;
	};

};

UClass* UWillowVehicleSeatDefinition::pClassPointer = NULL;

// Class WillowGame.WillowVehicleSimCar
// 0x006C (0x0134 - 0x00C8)
class UWillowVehicleSimCar : public USVehicleSimCar
{
public:
	struct FInterpCurveFloat                           TorqueVSpeedCurve;                                		// 0x00C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           DefaultTorqueVSpeedCurve;                         		// 0x00D8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TotalSpinVel;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              LSDFactor;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThrottleSpeed;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeMinDriveLimit;                               		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeMaxDriveLimit;                               		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRPM;                                           		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              MaxRPM;                                           		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              ActualThrottle;                                   		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceThrottle : 1;                               		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasForcedThrottle : 1;                           		// 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              LastLerpVal;                                      		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              WheelSmoothingSpeed;                              		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              FrontalCollisionGripFactor;                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InAirUprightTorqueFactor;                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InAirUprightMaxTorque;                            		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPhysicalMaterialTireModel >        PhysicalMaterialTireModels;                       		// 0x0120 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CachedMaxTorqueCurveSpeed;                        		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedSpeedCapMultiplier;                         		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4752 ];

		return pClassPointer;
	};

	void ResetTorqueCurve ( );
	void StretchTorqueCurve ( float Multiplier );
};

UClass* UWillowVehicleSimCar::pClassPointer = NULL;

// Class WillowGame.WillowVehicleSimChopper
// 0x00BC (0x0150 - 0x0094)
class UWillowVehicleSimChopper : public USVehicleSimBase
{
public:
	float                                              MaxThrustForce;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxReverseForce;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongDamping;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStrafeForce;                                   		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatDamping;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirectionChangeForce;                             		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRiseForce;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpDamping;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueFactor;                                 		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueMax;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnDamping;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYawRate;                                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueFactor;                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueMax;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchDamping;                                     		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueTurnFactor;                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueStrafeFactor;                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueMax;                                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollDamping;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRandForce;                                     		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandForceInterval;                                		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowZThrust : 1;                                		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFullThrustOnDirectionChange : 1;                 		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShouldCutThrustMaxOnImpact : 1;                  		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRecentlyHit : 1;                                 		// 0x00EC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStrafeAffectsTurnDamping : 1;                    		// 0x00EC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHeadingInitialized : 1;                          		// 0x00EC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bStabilizeStops : 1;                              		// 0x00EC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAutoHover : 1;                                   		// 0x00EC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	float                                              StrafeTurnDamping;                                		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              TargetHeading;                                    		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              TargetPitch;                                      		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              PitchViewCorrelation;                             		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FVector                                     RandForce;                                        		// 0x0100 (0x000C) [0x0000000000000000]              
	struct FVector                                     RandTorque;                                       		// 0x010C (0x000C) [0x0000000000000000]              
	float                                              AccumulatedTime;                                  		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              StabilizationForceMultiplier;                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentStabilizationMultiplier;                   		// 0x0120 (0x0004) [0x0000000000000000]              
	struct FVector                                     OldVelocity;                                      		// 0x0124 (0x000C) [0x0000000000000000]              
	float                                              StoppedBrakeTorque;                               		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              HardLimitAirSpeedScale;                           		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              MaxVelocityWhenAdjustingHover;                    		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HoverDeadZone;                                    		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RiseAdjustmentInterval;                           		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DesiredHoverHeight;                               		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              PreviousZVel;                                     		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              AdjustedRise;                                     		// 0x014C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4754 ];

		return pClassPointer;
	};

};

UClass* UWillowVehicleSimChopper::pClassPointer = NULL;

// Class WillowGame.WillowVehicleSimFly
// 0x0008 (0x009C - 0x0094)
class UWillowVehicleSimFly : public USVehicleSimBase
{
public:
	float                                              RiseSpeed;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveSpeed;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4756 ];

		return pClassPointer;
	};

};

UClass* UWillowVehicleSimFly::pClassPointer = NULL;

// Class WillowGame.WillowVehicleSimHover
// 0x002C (0x00F4 - 0x00C8)
class UWillowVehicleSimHover : public USVehicleSimCar
{
public:
	class AWillowVehicle_FlyingVehicle*                FlyingVehicle;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FVector                                     AirTransFriction;                                 		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirRotFriction;                                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ForceScalar;                                      		// 0x00DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorqueScalar;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TiltScalar;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveTiltAmount;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4758 ];

		return pClassPointer;
	};

};

UClass* UWillowVehicleSimHover::pClassPointer = NULL;

// Class WillowGame.WillowVehicleSimTank
// 0x000C (0x0104 - 0x00F8)
class UWillowVehicleSimTank : public USVehicleSimTank
{
public:
	unsigned long                                      bDoStoppedTurns : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SteeringThresholdForStoppedTurns;                 		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDampingOnStoppedTurns;                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4760 ];

		return pClassPointer;
	};

};

UClass* UWillowVehicleSimTank::pClassPointer = NULL;

// Class WillowGame.WillowWaterSMActor
// 0x0000 (0x0190 - 0x0190)
class AWillowWaterSMActor : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4762 ];

		return pClassPointer;
	};

};

UClass* AWillowWaterSMActor::pClassPointer = NULL;

// Class WillowGame.WillowWeapon
// 0x05B4 (0x0F60 - 0x09AC)
class AWillowWeapon : public AWeapon
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x09AC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIMissionInventory;                       		// 0x09B0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x09B4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIItemCardable;                           		// 0x09B8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IINounAttributeProvider;                  		// 0x09BC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                NextFiringPatternIndex;                           		// 0x09C0 (0x0004) [0x0000000000000000]              
	int                                                StoredAmmo;                                       		// 0x09C4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FResourcePoolReference                      AmmoPool;                                         		// 0x09C8 (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                AmmoNotInClip;                                    		// 0x09D4 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned long                                      bUpdateAmmoNotInClip : 1;                         		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAmmoRefilledDuringReload : 1;                    		// 0x09D8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bItemNameGenerated : 1;                           		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseOverheatBehavior : 1;                         		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBurstDelayActive : 1;                            		// 0x09D8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDisplayWeaponShotDebug : 1;                      		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDisableFireViewShake : 1;                        		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDisableWeaponSpread : 1;                         		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bHoldToZoom : 1;                                  		// 0x09D8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bFadeOnZoomBegin : 1;                             		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bFadeOnZoomEnd : 1;                               		// 0x09D8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bDeRezzed : 1;                                    		// 0x09D8 (0x0004) [0x0000000000002020] [0x00000800] ( CPF_Net | CPF_Transient )
	unsigned long                                      bReplicateFiringSounds : 1;                       		// 0x09D8 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bSwappingWeaponAfterPutDown : 1;                  		// 0x09D8 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bMuzzleFlashPSCLoops : 1;                         		// 0x09D8 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bSelectRandomPartsOnInitialization : 1;           		// 0x09D8 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bInitAnimationsOnAttach : 1;                      		// 0x09D8 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bContinuousBeamIsFiring : 1;                      		// 0x09D8 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCrosshairEnabled : 1;                            		// 0x09D8 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bSuppressCrosshair : 1;                           		// 0x09D8 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIsBlockedAfterBusy : 1;                          		// 0x09D8 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bUseRealTimeForZoom : 1;                          		// 0x09D8 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bAttachedToInstigator : 1;                        		// 0x09D8 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bHolsteredOnBody : 1;                             		// 0x09D8 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bActivatedDuringVehicleTransition : 1;            		// 0x09D8 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bOnlyPlayFirstPersonAnimOnNextEquip : 1;          		// 0x09D8 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bManualReload : 1;                                		// 0x09D8 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	int                                                ShotCost;                                         		// 0x09DC (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	int                                                ShotCostBaseValue;                                		// 0x09E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShotCostModifierStack;                            		// 0x09E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                AdditionalRicochets;                              		// 0x09F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AdditionalRicochetsBaseValue;                     		// 0x09F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AdditionalRicochetsModifierStack;                 		// 0x09F8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastFireTime;                                     		// 0x0A04 (0x0004) [0x0000000000000000]              
	int                                                ClipSize;                                         		// 0x0A08 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ClipSizeBaseValue;                                		// 0x0A0C (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                ClipSizeModifierStack;                            		// 0x0A10 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                LastReloadCnt;                                    		// 0x0A1C (0x0004) [0x0000000000000000]              
	int                                                LastClipSize;                                     		// 0x0A20 (0x0004) [0x0000000000000000]              
	int                                                AmmoLeftInClipDuringReload;                       		// 0x0A24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReloadCnt;                                        		// 0x0A28 (0x0004) [0x0000000000000000]              
	int                                                CurrentBurstShotCount;                            		// 0x0A2C (0x0004) [0x0000000000000000]              
	float                                              ReloadTime;                                       		// 0x0A30 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              ReloadTimeBaseValue;                              		// 0x0A34 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                ReloadTimeModifierStack;                          		// 0x0A38 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      ReplicatedReloadState;                            		// 0x0A44 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      bUseWeaponMelee;                                  		// 0x0A45 (0x0001) [0x0000000000000000]              
	unsigned char                                      ZoomState;                                        		// 0x0A46 (0x0001) [0x0000000000000000]              
	unsigned char                                      BodyVariation;                                    		// 0x0A47 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PutDownAnimState;                                 		// 0x0A48 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      MagazineSpinState;                                		// 0x0A49 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      LastProcessedMagazineSpinState;                   		// 0x0A4A (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      BarrelSpinState;                                  		// 0x0A4B (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      LastProcessedBarrelSpinState;                     		// 0x0A4C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      VisibleAmmoState;                                 		// 0x0A4D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      QuickSelectSlot;                                  		// 0x0A4E (0x0001) [0x0000000000000020]              ( CPF_Net )
	class USpecialMoveDefinition*                      Playing1stPersonReloadSMD;                        		// 0x0A50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpecialMoveDefinition*                      Playing3rdPersonReloadSMD;                        		// 0x0A54 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     GeneratedItemName;                                		// 0x0A58 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              OverheatRegenDelay;                               		// 0x0A64 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              OverheatRegenDelayBaseValue;                      		// 0x0A68 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                OverheatRegenDelayModifierStack;                  		// 0x0A6C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              FireRegenDelay;                                   		// 0x0A78 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              FireRegenDelayBaseValue;                          		// 0x0A7C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                FireRegenDelayModifierStack;                      		// 0x0A80 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              RegenRate;                                        		// 0x0A8C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              RegenRateBaseValue;                               		// 0x0A90 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                RegenRateModifierStack;                           		// 0x0A94 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              RegenAmount;                                      		// 0x0AA0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OverheatAmmo;                                     		// 0x0AA4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AmmoRegenStartTime;                               		// 0x0AA8 (0x0004) [0x0000000000000000]              
	float                                              MeleeDamage;                                      		// 0x0AAC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              MeleeDamageBaseValue;                             		// 0x0AB0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MeleeDamageModifierStack;                         		// 0x0AB4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NormalizedInstantHitDamage;                       		// 0x0AC0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              NormalizedInstantHitDamageBaseValue;              		// 0x0AC4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NormalizedInstantHitDamageModifierStack;          		// 0x0AC8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NormalizedMeleeDamage;                            		// 0x0AD4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              NormalizedMeleeDamageBaseValue;                   		// 0x0AD8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NormalizedMeleeDamageModifierStack;               		// 0x0ADC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BurstInterval;                                    		// 0x0AE8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BurstIntervalBaseValue;                           		// 0x0AEC (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                BurstIntervalModifierStack;                       		// 0x0AF0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                AutomaticBurstCount;                              		// 0x0AFC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AutomaticBurstCountBaseValue;                     		// 0x0B00 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AutomaticBurstCountModifierStack;                 		// 0x0B04 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BurstShotAccuracyImpulseScale;                    		// 0x0B10 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BurstShotAccuracyImpulseScaleBaseValue;           		// 0x0B14 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BurstShotAccuracyImpulseScaleModifierStack;       		// 0x0B18 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastAutomaticBurstTime;                           		// 0x0B24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInstanceDataSet                            InstanceDataState;                                		// 0x0B28 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	TArray< class AWeaponShotDebug* >                  WeaponShotDebugHistory;                           		// 0x0B34 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              BaseStatusEffectChanceModifier;                   		// 0x0B40 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BaseStatusEffectChanceModifierBaseValue;          		// 0x0B44 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BaseStatusEffectChanceModifierModifierStack;      		// 0x0B48 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectChanceModifier;                       		// 0x0B54 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              StatusEffectChanceModifierBaseValue;              		// 0x0B58 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                StatusEffectChanceModifierModifierStack;          		// 0x0B5C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectSpreadTimeIntervalModifier;           		// 0x0B68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StatusEffectSpreadTimeIntervalModifierBaseValue;  		// 0x0B6C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                StatusEffectSpreadTimeIntervalModifierModifierStack;		// 0x0B70 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              StatusEffectDamage;                               		// 0x0B7C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              StatusEffectDamageBaseValue;                      		// 0x0B80 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                StatusEffectDamageModifierStack;                  		// 0x0B84 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ZoomedEndFOV;                                     		// 0x0B90 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              ZoomedEndFOVBaseValue;                            		// 0x0B94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ZoomedEndFOVModifierStack;                        		// 0x0B98 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ZoomedFOV;                                        		// 0x0BA4 (0x0004) [0x0000000000000000]              
	float                                              ZoomedRate;                                       		// 0x0BA8 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              ZoomedRateBaseValue;                              		// 0x0BAC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ZoomedRateModifierStack;                          		// 0x0BB0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ZoomFadeTime;                                     		// 0x0BBC (0x0004) [0x0000000000000000]              
	float                                              ZoomStartTime;                                    		// 0x0BC0 (0x0004) [0x0000000000000000]              
	class UMaterialInstance*                           WeaponMaterial;                                   		// 0x0BC4 (0x0004) [0x0000000000000000]              
	class UMaterialInstance*                           SightFXCrosshairMaterial;                         		// 0x0BC8 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      ThirdPersonMesh;                                  		// 0x0BCC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                CurrentSlot;                                      		// 0x0BD0 (0x0004) [0x0000000000000000]              
	TArray< struct FExtraWeaponSlot >                  ExtraSlots;                                       		// 0x0BD4 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     CachedMuzzleLocation;                             		// 0x0BE0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedMuzzleLocationFrameNumber;                  		// 0x0BEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      CachedMuzzleLocationMesh;                         		// 0x0BF0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWillowAnimNodeSlot*                         WeaponAnimNodeSlot;                               		// 0x0BF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowAnimNodeSlot*                         ArmAnimNodeSlot;                                  		// 0x0BF8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    BulletWhipAkEvent;                                		// 0x0BFC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FImpactResponseParameters                   MyWeaponImpactResponseParameters;                 		// 0x0C00 (0x004C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MagazineSpinUpDuration;                           		// 0x0C4C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              MagazineSpinUpDurationBaseValue;                  		// 0x0C50 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MagazineSpinUpDurationModifierStack;              		// 0x0C54 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              MagazineSpinDownDuration;                         		// 0x0C60 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              MagazineSpinDownDurationBaseValue;                		// 0x0C64 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MagazineSpinDownDurationModifierStack;            		// 0x0C68 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              MagazineSpinUpPercent;                            		// 0x0C74 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BodyFlapsExpandDuration;                          		// 0x0C78 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BodyFlapsExpandDurationBaseValue;                 		// 0x0C7C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BodyFlapsExpandDurationModifierStack;             		// 0x0C80 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BodyFlapsCollapseDuration;                        		// 0x0C8C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BodyFlapsCollapseDurationBaseValue;               		// 0x0C90 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BodyFlapsCollapseDurationModifierStack;           		// 0x0C94 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BarrelFlapsExpandDuration;                        		// 0x0CA0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BarrelFlapsExpandDurationBaseValue;               		// 0x0CA4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BarrelFlapsExpandDurationModifierStack;           		// 0x0CA8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BarrelFlapsCollapseDuration;                      		// 0x0CB4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BarrelFlapsCollapseDurationBaseValue;             		// 0x0CB8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BarrelFlapsCollapseDurationModifierStack;         		// 0x0CBC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BaseGlowScale;                                    		// 0x0CC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FinalGlowScale;                                   		// 0x0CCC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWeaponGlowEffectDefinition*                 GlowEffect;                                       		// 0x0CD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlowEffectStartTime;                              		// 0x0CD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlowImpulseScale;                                 		// 0x0CD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlowImpulseDecayStartTime;                        		// 0x0CDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    FirstPersonMuzzleFlash;                           		// 0x0CE0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          FirstPersonAltMuzzleFlashes;                      		// 0x0CE4 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystemComponent*                    ThirdPersonMuzzleFlash;                           		// 0x0CF0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          ThirdPersonAltMuzzleFlashes;                      		// 0x0CF4 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                NumberOfMuzzleFlashes;                            		// 0x0D00 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CurrentMuzzleFlashIndex;                          		// 0x0D04 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UParticleSystemComponent*                    FirstPersonShellCasing;                           		// 0x0D08 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWillowPointLight*                           MuzzleFlashLight;                                 		// 0x0D0C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWillowPointLight*                           ThirdPersonMuzzleFlashLight;                      		// 0x0D10 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    TracerParameterTemplate;                          		// 0x0D14 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             MuzzleFlashPSTemplate;                            		// 0x0D18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentRating;                                    		// 0x0D1C (0x0004) [0x0000000000000000]              
	int                                                OwnerStatsID;                                     		// 0x0D20 (0x0004) [0x0000000000000000]              
	int                                                WeaponStatsID;                                    		// 0x0D24 (0x0004) [0x0000000000000000]              
	float                                              ExtraShotChance;                                  		// 0x0D28 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ExtraShotChanceBaseValue;                         		// 0x0D2C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExtraShotChanceModifierStack;                     		// 0x0D30 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ExtraShotDelay;                                   		// 0x0D3C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ExtraShotDelayBaseValue;                          		// 0x0D40 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExtraShotDelayModifierStack;                      		// 0x0D44 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FLockOnTargetStateStruct                    LockOnTargetState;                                		// 0x0D50 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              BarrelSpinUpDuration;                             		// 0x0D60 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BarrelSpinUpDurationBaseValue;                    		// 0x0D64 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BarrelSpinUpDurationModifierStack;                		// 0x0D68 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BarrelSpinDownDuration;                           		// 0x0D74 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BarrelSpinDownDurationBaseValue;                  		// 0x0D78 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                BarrelSpinDownDurationModifierStack;              		// 0x0D7C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              BarrelSpinUpPercent;                              		// 0x0D88 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FColor                                      WeaponColor;                                      		// 0x0D8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimError;                                         		// 0x0D90 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              AimErrorBaseValue;                                		// 0x0D94 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AimErrorModifierStack;                            		// 0x0D98 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PerShotAccuracyImpulse;                           		// 0x0DA4 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              PerShotAccuracyImpulseBaseValue;                  		// 0x0DA8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PerShotAccuracyImpulseModifierStack;              		// 0x0DAC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ProjectilesPerShot;                               		// 0x0DB8 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	int                                                ProjectilesPerShotBaseValue;                      		// 0x0DBC (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                ProjectilesPerShotModifierStack;                  		// 0x0DC0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           ExternalAttributeModifiers;                       		// 0x0DCC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           WeaponAttributeModifiers;                         		// 0x0DD8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           ZoomExternalAttributeModifiers;                   		// 0x0DE4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           ZoomWeaponAttributeModifiers;                     		// 0x0DF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FModifierValuePresentationData >    WeaponCardModifierStats;                          		// 0x0DFC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FReplicatedInventoryCardData                ReplicatedWeaponCardModifierValues[ 0x5 ];        		// 0x0E08 (0x0028) [0x0000000000002022]              ( CPF_Const | CPF_Net | CPF_Transient )
	struct FWeaponDefinitionData                       DefinitionData;                                   		// 0x0E30 (0x0044) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UWeaponPartListCollectionDefinition*         PartListCollection;                               		// 0x0E74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FWeaponBoneControllerInstance >     WeaponPartBoneControllers;                        		// 0x0E78 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ReloadCntOnLastVisibleAmmoBoneUpdate;             		// 0x0E84 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            VisibleAmmoBoneIndices;                           		// 0x0E88 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       LeftHandGripAnimWeapon;                           		// 0x0E94 (0x0008) [0x0000000000000000]              
	class AWillowWeapon*                               LastComparedWeapon;                               		// 0x0E9C (0x0004) [0x0000000000000000]              
	struct FName                                       StoredPreviousStateName;                          		// 0x0EA0 (0x0008) [0x0000000000000000]              
	TArray< struct FShellCasingImpact >                ShellCasingImpacts;                               		// 0x0EA8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ProjectileSpeedMultiplier;                        		// 0x0EB4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ProjectileSpeedMultiplierBaseValue;               		// 0x0EB8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ProjectileSpeedMultiplierModifierStack;           		// 0x0EBC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              UpdateMipTimer;                                   		// 0x0EC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WantsMissedShotNotifications;                     		// 0x0ECC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WantsMissedShotNotificationsBaseValue;            		// 0x0ED0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                WantsMissedShotNotificationsModifierStack;        		// 0x0ED4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0EE0 (0x0004) [0x0000000000000000]              
	TArray< struct FNounAttributeState >               NounState;                                        		// 0x0EE4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TotalAutomaticFiringTime;                         		// 0x0EF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FImpactInfo                                 LastLocalHitTraceInfo;                            		// 0x0EF4 (0x005C) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	struct FString                                     CrosshairFrameOverride;                           		// 0x0F50 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ReplicatedZoomedEndFOVBaseValue;                  		// 0x0F5C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4764 ];

		return pClassPointer;
	};

	bool eventGetCanHolster ( );
	struct FName eventGetBodyWeaponHoldName ( );
	void ForcePutDownInactiveWeapon ( );
	struct FString GetCrosshairFrame ( );
	bool IsUsefulToThisPlayer ( class APlayerController* C );
	bool CheckDefMatch ( unsigned long bShortCheck, unsigned long bUniqueIDCheck, struct FWeaponDefinitionData* Def, struct FWeaponDefinitionData* OtherDef );
	bool SerialNumberMatchesDef ( unsigned long bShortCheck, unsigned long bUniqueIDCheck, struct FInventorySerialNumber* SerialNumber, struct FWeaponDefinitionData* Def );
	class AWillowWeapon* CreateWeaponFromSerialNumber ( class UObject* InAdditionalQueryInterfaceSource, struct FInventorySerialNumber* SerialNumber );
	bool UnpackSerialNumber ( struct FInventorySerialNumber* SerialNumber, struct FWeaponDefinitionData* Def );
	struct FInventorySerialNumber PackSerialNumber ( struct FWeaponDefinitionData* Def );
	struct FInventorySerialNumber CreateSerialNumber ( );
	void AddGlowScaleImpulse ( float ScaleImpulse );
	void StopAnyGlowEffect ( );
	void StopGlowEffect ( class UWeaponGlowEffectDefinition* Effect );
	void PlayGlowEffect ( class UWeaponGlowEffectDefinition* Effect );
	float GetLockOnStartTime ( );
	float GetLockOnRequiredTime ( );
	bool LockOnInProgress ( );
	void eventForceZoomDebug ( );
	class UImpactDefinition* GetTraceImpact ( );
	void ServerNotifyTargetLockSuccessful ( class AActor* NewLockOnTarget );
	void eventNotifyTargetLockSuccessful ( class AActor* NewLockOnTarget );
	void DefinitionFromHashString ( struct FString HashString, struct FWeaponDefinitionData* WeaponData );
	struct FString GetHashString ( );
	void OverrideRecoilAnimScaleDebug ( float AnimScale );
	float GetCurrentZoomedRecoilAnimScale ( );
	float GetCurrentRecoilAnimScale ( unsigned long bIgnoreZoom );
	class AWillowWeapon* CreateWeaponFromDef ( struct FWeaponDefinitionData NewWeaponDef, class AWillowPawn* PlayerOwner, unsigned long bForceSelectNameParts );
	bool DoesDamageType ( unsigned char DamageType );
	bool IsDamageCauser ( unsigned char DamageCauserType );
	bool IsMissionWeapon ( );
	bool CanBeSaved ( );
	int GetControllerPlayerExpLevelRequiredToUse ( class AController* OtherController );
	bool CanInventoryBeSoldOrStoredByOwner ( );
	bool CanInventoryBeDroppedByOwner ( );
	void eventHitRegionConsumerPlayHit ( struct FImpactInfo Impact );
	void PlayImpactEffects ( struct FVector FireLocation, struct FVector HitLocation );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* Context );
	float GetStatusEffectChanceModifier ( class UObject* Context );
	float GetStatusEffectBaseDamage ( class UObject* Context );
	bool CanBeUsedBy ( class APawn* Other );
	class AWillowWeapon* CreateWeaponFromMemento ( struct FWeaponMemento Memento, struct FVector SpawnLocation, struct FRotator SpawnRotation, class UObject* InAdditionalQueryInterfaceSource );
	struct FWeaponMemento GetMemento ( );
	struct FString GetModelName ( );
	bool GetSocketLocationOnOwnerOrWeapon ( struct FName SocketName, struct FVector* SourceLocation );
	void Behavior_Fire ( class UFiringModeDefinition* FiringModeDefinition, struct FVector Direction, class UIWorldBody* WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, struct FName FireSourceSocket, unsigned long bTreatDirectionAsDestination );
	class UImpactDefinition* GetDroppedImpactDefinition ( );
	void FinishedWeaponAction ( );
	void Behavior_ChangeVisibility ( unsigned long bVisible );
	void Behavior_ToggleVisibility ( );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	void SpawnTracerAtLocation ( struct FVector EffectLocation, struct FVector HitLocation );
	void eventSpawnTracer ( struct FVector HitLocation );
	struct FVector GetTracerStartLocation ( );
	bool CanCompareUIStat ( class UAttributePresentationDefinition* Attrib, class UAttributePresentationDefinition* CompareAttrib, class AWillowWeapon* CompareItem );
	int CompareUIStat ( int StatIdx, class AWillowInventory* CompareTo );
	float GetAIRangeValue ( struct FAIRange* Range );
	float GetAIBurstLength ( );
	float GetAIFireDelay ( );
	float GetBarrelRotationsPerSecondAtFullFireRate ( );
	unsigned char GetBarrelSpinMode ( );
	float GetFireSpeed ( );
	void NotifyWeaponBoneControlStoppedFiring ( );
	void NotifyWeaponBoneControlFiredShot ( );
	void NotifyWeaponBoneControl ( struct FName BoneControlName, unsigned char WeaponEventType, unsigned char WeaponPartType );
	void StopAnimation ( unsigned char AnimType, float fDesiredDuration );
	float PlayAnimation ( unsigned char AnimType, struct FName Sequence, float fDesiredDuration, unsigned long bLoop, float BlendInTime, float BlendOutTime );
	void StopFirstPersonBodyAnimation ( unsigned char ActionType, unsigned long bInterrupted );
	float PlayFirstPersonBodyAnimation ( unsigned char ActionType, float PlayRateScale, float Duration, class USpecialMoveDefinition** PlayedSMD );
	struct FString GetTemplateString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ChangeParticleAttachmentVisibilityInternal ( unsigned long bIsVisible );
	void ChangeParticleAttachmentVisibility ( unsigned long bIsVisible );
	void ChangeAltMuzzleFlashesVisibility ( unsigned long bIsVisible, TArray< class UParticleSystemComponent* >* MuzzleFlashes );
	void ChangeThirdPersonVisibility ( unsigned long bIsVisible );
	void ToggleThirdPersonVisibility ( );
	void ChangeFirstPersonVisibility ( unsigned long bIsVisible );
	void ToggleFirstPersonVisibility ( );
	void ChangeVisibility ( unsigned long bIsVisible );
	float GetDamageRadius ( );
	void RefireDelayAfterBusy ( );
	void OwnerEnteredVehicle ( );
	void eventDestroyed ( );
	void BeginReload ( unsigned char FireModeNum );
	void BeginManualReload ( unsigned char FireModeNum );
	void ServerStartReload ( unsigned char FireModeNum );
	void StartReload ( unsigned char FireModeNum );
	void TimeWeaponReload ( );
	void StopReloadAnim ( );
	void PlayReloadAnim ( );
	unsigned char GetReplicatedReloadState ( );
	void SetReplicatedReloadState ( unsigned char ReloadState );
	int SelectAnimationData ( TArray< struct FConditionalAnimationData >* Animations );
	struct FName SelectAnimation ( TArray< struct FConditionalAnimationData >* Animations, class UAnimSet** ReqAnimSet );
	void AmmoReloaded ( );
	void ReloadDone ( );
	void StopWeaponAnimation ( );
	class UWillowAnimNodeSlot* GetWeaponAnimNodeSlot ( unsigned char AnimationType );
	class UWillowAnimNodeSlot* GetWillowAnimNodeSlot ( class USkeletalMeshComponent* SKMesh, unsigned long bOffHandSlot );
	void StopReloading ( );
	bool NeedToReload ( );
	void DisassociateAmmoPool ( );
	void ItemRemovedFromInvManager ( );
	void ClientSoldTo ( unsigned long bSoldAll );
	void LoadedWeapon ( int AmmoCnt );
	void AssociateAmmoPool ( );
	void UpdateStatsOnWeaponPickup ( class APawn* NewOwner );
	void AnnouncePickup ( class APawn* Other );
	void GivenTo ( class APawn* NewOwner, unsigned long bReady, unsigned long bDoNotActivate );
	void RemoveFromShop ( );
	void eventRefireCheckTimer ( );
	void GetZoomSocketBone ( struct FVector* BoneLocation, struct FRotator* BoneRotation );
	void GetZoomSocket ( struct FVector* SocketLocation, struct FRotator* SocketRotation );
	class USkeletalMeshSocket* GetIronsightsSocket ( struct FName SocketName );
	struct FVector GetEffectLocation ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	void UninitializeAfterPutDown ( );
	void UpdateLastReloadCnt ( );
	void TryPutDownEx ( );
	bool TryPutDown ( );
	void Unreadied ( );
	class AController* GetResourcePoolContext ( );
	void ClientSetReloadCounts ( int InLastReloadCnt, int InReloadCnt );
	void InitializeWeaponAfterBringUp ( );
	void InitializeAmmoAfterBringUp ( );
	void BurstDelayComplete ( );
	bool ShouldRefire ( );
	void TickMagazineSpinUp ( float DeltaSeconds );
	void TickBarrelSpinUp ( float DeltaSeconds );
	float GetBurstInterval ( );
	float GetFireInterval ( unsigned char FireModeNum );
	void RefillClip ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	void eventAddRegeneratedAmmo ( int Amount );
	void ExtraFireAmmunition ( );
	void SharedFireAmmunition ( );
	void FireAmmunition ( );
	void AddAccuracyImpulse ( float Impulse );
	void ClientVehicleTransitionWeaponSet ( unsigned long bOnlyPlayFirstPersonEquipAnim );
	void VehicleTransitionWeaponSet ( unsigned long bOnlyPlayFirstPersonEquipAnim );
	bool ClientWeaponSetWaitForAmmoPool ( );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	bool ForceWeaponToBeEquipped ( );
	void SendToFiringState ( unsigned char FireModeNum );
	bool CanPerformAction ( );
	void CheckZoomState ( );
	void ForceUnzoom ( unsigned long bClearInput );
	void ClientStartZoom ( );
	void StopZoom ( unsigned long bSuppressFade );
	void StartZoom ( );
	float GetZoomTime ( );
	void ClientStopZoom ( unsigned long bSupressFade );
	void SetZoomStartTime ( float ZoomDuration );
	void AdjustZoomBasisTime ( unsigned long bUseRealTime );
	float GetZoomBasisTime ( );
	void EndFire ( unsigned char FireModeNum );
	void ClientEndFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void ServerSetZoomState ( unsigned char NewZoomState );
	void eventDisplayScope ( unsigned long bDisplay );
	bool eventIsScoped ( );
	void AdjustMuzzleFlashForZoomState ( unsigned char NewZoomState );
	void eventSetZoomState ( unsigned char NewZoomState );
	void SetViewDistanceScaleWeaponZoomFactor ( float ZoomFactor );
	void TickZoom ( float DeltaTime );
	float AdjustFOVAngle ( float VFOVAngle );
	bool IsZoomedIn ( unsigned long bTransitionCounts );
	bool bZoomed ( );
	void RemoveAllZoomWeaponAttributeEffects ( );
	void RemoveAllZoomExternalAttributeEffects ( );
	void eventApplyAllZoomWeaponAttributeEffects ( );
	void eventApplyAllZoomExternalAttributeEffects ( );
	void UpdateFiredStats ( int NoShots );
	unsigned char GetDamageSurfaceTypeFromImpact ( struct FImpactInfo* Impact );
	void ProcessInstantHitBullet ( unsigned char FiringMode, struct FImpactInfo Impact, float BulletDamage, class UFiringModeDefinition* FiringModeDefinition, class APawn* InstigatorOverride, unsigned long bOvercharged, class UWillowDamagePipeline** PipelineObject );
	void CustomFire ( );
	void ExecuteProjectileFiredConstructEvent ( class UObject* InInstigator, class UObject* InProjectile, struct FBehaviorConsumerHandle* InConsumerHandle );
	void ConditionalSetGearLikenessOnProjectile ( class AWillowProjectile* SpawnedProjectile );
	class AProjectile* eventProjectileDefinitionFire ( class UFiringModeDefinition* FireModeDef );
	void eventFiringModeDefinitionFire ( class UFiringModeDefinition* FiringModeDefinition );
	void InstantFire ( );
	bool ShouldBulletRicochetTowardsEnemy ( );
	bool IsOvercharged ( );
	class UFiringModeDefinition* GetFiringModeDefinition ( );
	void eventClearSavedFireData ( );
	void SaveFireData ( struct FVector AimPosition, struct FRotator AimDirection, struct FRotator AimAdjustment, struct FRotator SpreadAimAdjustment, float ShotDistance );
	struct FVector InstantFireEndTrace ( struct FVector StartTrace );
	struct FVector InstantFireStartTrace ( );
	void ClientWeaponEmpty ( );
	void WeaponEmpty ( );
	void PlayDryFireSound ( unsigned long bTryingToFire );
	bool DenyPickupQuery ( class UIPickupable* Pickup );
	void UpdateVisibleAmmoBones ( );
	void SetVisibleAmmoState ( unsigned char NewState );
	bool ShouldAutoReloadWhileFiring ( );
	bool HasSpareAmmo ( );
	bool HasAnyAmmo ( );
	bool HasActiveAmmo ( unsigned char FireModeNum, int Amount );
	bool eventHasAmmo ( unsigned char FireModeNum, int Amount );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool ReadyToFire ( unsigned long bFinished );
	unsigned char BestMode ( );
	bool ShouldFireWithoutTarget ( );
	bool FireOnRelease ( );
	void FireHack ( unsigned char Mode );
	bool CanHeal ( class AActor* Other );
	float GetWeaponRating ( );
	float GetZoomFOVEffect ( );
	float GetZoomEffect ( );
	unsigned char GetHand ( );
	void SetHand ( unsigned char NewWeaponHand );
	bool CanThrow ( );
	void GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis );
	void DumpAnimSets ( struct FString EventStr );
	void DetachWeapon ( );
	void DetachMuzzleFlash ( );
	void AttachMuzzleFlash ( );
	void CreateAltMuzzleFlashes ( class UParticleSystemComponent* MuzzleFlashTemplate, TArray< class UParticleSystemComponent* >* MuzzleFlashes );
	void AttachAltMuzzleFlashes ( class USkeletalMeshComponent* ParentComp, TArray< class UParticleSystemComponent* >* MuzzleFlashes );
	void DetachAltMuzzleFlashes ( class USkeletalMeshComponent* ParentComp, TArray< class UParticleSystemComponent* >* MuzzleFlashes );
	void ClearAltMuzzleFlashes ( class USkeletalMeshComponent* ParentComp, TArray< class UParticleSystemComponent* >* MuzzleFlashes );
	void AttachShellCasingComponent ( );
	class UParticleSystem* GetShellCasingPSCTemplate ( );
	struct FRotator GetOffHandShellCasingRotOffset ( );
	struct FVector GetScopedShellCasingOffset ( );
	struct FName GetShellCasingSocket ( );
	void UpdateForegroundFOV ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void PlayWeaponEquip ( unsigned long bPlay3rdPerson, unsigned long bPlay1stPerson );
	void NotifyPawnWeaponChanged ( );
	void TimeWeaponEquipping ( );
	float GetEquipTime ( );
	float RaiseFirstPersonWeapon ( );
	float LowerFirstPersonWeapon ( );
	void StopWeaponPutDownAnim ( unsigned long bStop3rdPerson, unsigned long bStop1stPerson );
	void PlayWeaponPutDown ( unsigned long bSwappingWeapons );
	void eventTimeWeaponPutDown ( );
	float GetPutDownTime ( );
	void TryTimeWeaponPutDown ( );
	void eventStopMuzzleFlash ( );
	void eventCauseMuzzleFlash ( class USkeletalMeshComponent* WeaponMesh, class UParticleSystemComponent* MuzzleFlash, class UWillowPointLight** FlashLight );
	void eventMuzzleFlashTimer ( );
	void PlayStopSpinningUpSound ( );
	void PlayStartSpinningUpSound ( );
	void MagazineSpinStateChanged ( unsigned char NewState );
	void BarrelSpinStateChanged ( unsigned char NewState );
	void PlayStoppedFiringSound ( );
	void PlayFiringSound ( );
	void ShakeView ( );
	void PlayRezEffect ( );
	void DeRezEffectFinished ( );
	float PlayDeRezEffect ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	struct FRotator GetWeaponMuzzleRotation ( class USkeletalMeshComponent* WeaponMesh );
	struct FVector GetWeaponMuzzleLocation ( class USkeletalMeshComponent* WeaponMesh );
	struct FString GenerateHumanReadableNameFromDefinitionParts ( unsigned long bIncludeManufacturer, unsigned long bIncludeModelName, unsigned long bIncludePrefixTitle, struct FWeaponDefinitionData* DefData );
	struct FString eventGetInventoryCardString ( unsigned long bIncludeManufacturer, unsigned long bIncludeModelName, unsigned long bIncludePrefixTitle );
	struct FString GenerateHumanReadableNameFromDefinition ( struct FWeaponDefinitionData* DefData );
	struct FString GenerateHumanReadableName ( );
	struct FString eventGetShortHumanReadableName ( );
	struct FString GetHumanReadableName ( );
	class UInventoryCardPresentationDefinition* GetPresentationDefinition ( );
	struct FString FormatFunStatsText ( TArray< struct FModifierValuePresentationData >* BottomStats );
	struct FString GenerateFunStatsText ( );
	void GetInventoryStatTextData ( TArray< struct FModifierValuePresentationData >* Stats );
	void GetInventoryStatNumberData ( class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray< struct FTopStatData >* Stats );
	void CacheWeaponCard ( );
	int GetAmmoCount ( );
	int GetMaxAmmo ( );
	void eventDrawZoomDebug ( class AHUD* H );
	bool IsCrosshairEnabled ( unsigned long bForScope );
	void SetCrosshairEnabled ( unsigned long bNewCrosshairEnabled );
	float GetMultiProjectileDamage ( );
	void ComputeValueOfParts ( );
	bool IsAllPartsDebugEnabled ( );
	void ToggleAllPartsDebug ( );
	class UWeaponNamePartDefinition* SelectNamePartFromList ( TArray< class UWeaponNamePartDefinition* >* NameList );
	void ChooseRandomNameParts ( );
	void ChooseRandomParts ( class UObject* ContextSource );
	void ChoosePartListCollection ( );
	void RemoveAllExternalAttributeEffects ( );
	void ApplyNamePartWeaponAttributeEffects ( );
	void ApplyAllWeaponAttributeEffects ( unsigned long bIncludeNameParts );
	void ApplyAllExternalAttributeEffects ( );
	void ApplyAnimThresholdAttributeValues ( );
	bool ClientInitializeFromWeaponTypeDefinition ( );
	int StaticCalculateWeaponRarityLevel ( struct FWeaponDefinitionData* InDefinitionData );
	class UWillowDamageTypeDefinition* StaticGetWeaponDamageType ( struct FWeaponDefinitionData* InDefinitionData );
	bool StaticIsTechWeapon ( struct FWeaponDefinitionData* InDefinitionData );
	class UDamageTypeDefinition* GetDamageTypeDefinitionForFiringMode ( class UFiringModeDefinition* FiringMode );
	void CalculatePartDependentWeaponBaseValues ( );
	void CalculateWeaponBaseValues ( );
	void RecomputeAttributeBaseValues ( );
	void RecomputeNormalizedDamageValues ( );
	void StoreExplosionInstanceData ( class UExplosionDefinition* ExplosionDef, struct FName InstanceDataName );
	void AdjustWeaponForBeingInBackpack ( );
	void InitializeInternal ( unsigned long bForceSelectNameParts );
	void eventInitializeFromDefinitionData ( struct FWeaponDefinitionData NewDefinitionData, class UObject* InAdditionalQueryInterfaceSource, unsigned long bForceSelectNameParts );
	void eventInitializeInventory ( class UBaseBalanceDefinition* InBalanceDef, class UManufacturerDefinition* InManufacturer, int InGradeIndex, class UObject* InAdditionalQueryInterfaceSource );
	void CheckWeaponAgainstEquippedWeaponsBeingSwapped ( );
	void CheckWeaponAgainstBackpackInventoryBeingEquipped ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetElementalFrame ( );
	void ChangeAltMuzzleFlashOwnerVisibility ( unsigned long bInOwnerNoSee, TArray< class UParticleSystemComponent* >* MuzzleFlashes );
	void ChangeFirstPersonOwnerVisibility ( unsigned long bInOwnerNoSee );
	void ChangeThirdPersonOwnerVisibility ( unsigned long bInOwnerNoSee );
	void ChangeOwnerVisibility ( unsigned long bIsFirstPerson );
	void eventDetachThirdPersonMesh ( );
	void StopLoopingSounds ( );
	void eventRemoteDetachWeapon ( );
	void eventDetachFirstPersonMesh ( );
	void AttachThirdPersonMeshToComponent ( class USkeletalMeshComponent* SkeletalMesh, unsigned long bOwnerNoSee, unsigned long bOffHandWeapon );
	void AttachFirstPersonMeshToRemotePlayer ( class USkeletalMeshComponent* MeshCpnt, unsigned long bOffHandWeapon );
	class UMeshComponent* ClonePrimaryMesh ( );
	void eventCloneAppearance ( class AActor* CloneOwner, class USkeletalMeshComponent* ClonedPrimaryMeshComponent, TArray< class UPrimitiveComponent* >* ClonedComponentsAttachedToPrimaryMesh, class UMaterialInstance** ClonedMeshMaterial );
	void PreRemoveNotify ( class UMeshComponent* Mesh );
	void PostInitNotify ( class UMeshComponent* Mesh );
	void AttachMeshToPickup ( class AActor* Pickup );
	void InitVisibleAmmoBones ( );
	void InitEffects ( );
	void InitPartParticles ( );
	void EnableAnimations ( unsigned long InEnabled );
	void InitMeshAnimation ( class USkeletalMeshComponent* Component, unsigned long bIsFirstPersonComponent );
	struct FVector GetExtraSlotLocation ( );
	float GetExtraSlotModifier ( );
	void InitExtraMeshes ( );
	void InitMeshAnimations ( );
	void InitAltMuzzleFlashes ( );
	void InitMeshes ( );
	void HideBonesInMesh ( class USkeletalMeshComponent* InMesh );
	class UMeshComponent* eventInitConstructPreview ( class UMeshComponent* Existing, class UWillowInventoryDefinition* InvDefinition );
	class UMaterialInstance* BuildWeaponMaterial ( class AActor* MaterialOwner, class USkeletalMeshComponent* FallbackMeshComp, struct FWeaponDefinitionData* InDefinitionData );
	class USkeletalMesh* BuildCompositeMesh ( class USkeletalMeshComponent* WeaponMeshComp, struct FWeaponDefinitionData* InDefinitionData );
	void AddWeaponBoneControllers ( class USkeletalMeshComponent* Component, unsigned long bIsFirstPerson );
	class AWillowInventory* CreateClone ( );
	struct FRotator GetDroppedPickupRotation ( );
	class ADroppedPickup* DropFrom ( struct FVector StartLocation, struct FVector StartVelocity, unsigned long bForceNoRBPhysics, unsigned long bTorque, struct FVector Torque );
	unsigned char GetHolsteredGearLikenessType ( );
	unsigned char GetHolsteredWeaponSizeType ( );
	struct FName GetEquippedStat ( );
	void OnAbortReload ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnZoomOut ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnZoomIn ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnUnequip ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnEquip ( class UObject* EventInstigator, TArray< class UBehaviorProviderDefinition* >* Providers );
	void OnCreate ( TArray< class UBehaviorProviderDefinition* >* Providers );
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void DeactivateAttributeSlotSkill ( );
	void ActivateAttributeSlotSkill ( );
	bool IsPuttingDown ( );
	bool IsEquipping ( );
	void AllParts ( unsigned long bIncludeNameParts, struct FWeaponDefinitionData* DefData, class UWeaponPartDefinition** Part );
	bool IsZoomSocketsDebugEnabled ( );
	void ToggleZoomSocketsDebug ( );
	bool IsZoomDebugEnabled ( );
	void ToggleZoomDebug ( );
};

UClass* AWillowWeapon::pClassPointer = NULL;

// Class WillowGame.WillowBuzzaxeWeapon
// 0x000D (0x0F6D - 0x0F60)
class AWillowBuzzaxeWeapon : public AWillowWeapon
{
public:
	struct FPointer                                    VfTable_IIWeaponThrow;                            		// 0x0F60 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       BodyWeaponHoldNameOverride;                       		// 0x0F64 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      PreviousActiveWeaponSlot;                         		// 0x0F6C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4766 ];

		return pClassPointer;
	};

	void EquipPreviousWeapon ( );
	void BuzzaxeIsDown ( );
	bool eventGetCanHolster ( );
	void eventDestroyed ( );
	struct FName GetBodyWeaponHoldName ( );
	void Behavior_WeaponThrow ( );
	class AProjectile* eventProjectileDefinitionFire ( class UFiringModeDefinition* FireModeDef );
	void ConditionalSetGearLikenessOnProjectile ( class AWillowProjectile* SpawnedProjectile );
	void DetachWeapon ( );
	void StartFire ( unsigned char FireModeNum );
	void Activate ( unsigned long bEquipInOffHand );
	bool HasSpareAmmo ( );
	void eventReplicatedEvent ( struct FName VarName );
	void InitVisibleAmmoBones ( );
	void AssociateAmmoPool ( );
	void DetachMuzzleFlash ( );
	void AttachMuzzleFlash ( );
	bool IsCrosshairEnabled ( unsigned long bForScope );
	float GetZoomFOVEffect ( );
	void GetZoomSocket ( struct FVector* SocketLocation, struct FRotator* SocketRotation );
};

UClass* AWillowBuzzaxeWeapon::pClassPointer = NULL;

// Class WillowGame.WillowTurretWeapon
// 0x0024 (0x0F84 - 0x0F60)
class AWillowTurretWeapon : public AWillowWeapon
{
public:
	TArray< struct FName >                             FireTriggerTags;                                  		// 0x0F60 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             AltFireTriggerTags;                               		// 0x0F6C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AimTraceRange;                                    		// 0x0F78 (0x0004) [0x0000000000000000]              
	struct FName                                       TurretWeaponSocketName;                           		// 0x0F7C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4768 ];

		return pClassPointer;
	};

	bool HasSpareAmmo ( );
	void DetachMuzzleFlash ( );
	void AttachMuzzleFlash ( );
	void Behavior_ChangeVisibility ( unsigned long bVisible );
	void Behavior_ToggleVisibility ( );
	void ChangeVisibility ( unsigned long bIsVisible );
	float PlayAnimation ( unsigned char AnimType, struct FName Sequence, float fDesiredDuration, unsigned long bLoop, float BlendInTime, float BlendOutTime );
	float PlayFirstPersonBodyAnimation ( unsigned char ActionType, float PlayRateScale, float Duration, class USpecialMoveDefinition** PlayedSMD );
	struct FVector InstantFireStartTrace ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	void AttachThirdPersonMeshToComponent ( class USkeletalMeshComponent* SkeletalMesh, unsigned long bOwnerNoSee, unsigned long bOffHandWeapon );
	void DetachFirstPersonMesh ( );
	void eventDetachThirdPersonMesh ( );
	void InitMeshes ( );
	void PostBeginPlay ( );
};

UClass* AWillowTurretWeapon::pClassPointer = NULL;

// Class WillowGame.WillowVehicleWeapon
// 0x0034 (0x0F94 - 0x0F60)
class AWillowVehicleWeapon : public AWillowWeapon
{
public:
	int                                                SeatIndex;                                        		// 0x0F60 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x0F64 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FName >                             FireTriggerTags;                                  		// 0x0F68 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             AltFireTriggerTags;                               		// 0x0F74 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      GoodAimColor;                                     		// 0x0F80 (0x0004) [0x0000000000000000]              
	struct FColor                                      BadAimColor;                                      		// 0x0F84 (0x0004) [0x0000000000000000]              
	float                                              AimTraceRange;                                    		// 0x0F88 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWeaponOperated : 1;                              		// 0x0F8C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	class APawn*                                       CrosshairOwner;                                   		// 0x0F90 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4770 ];

		return pClassPointer;
	};

	void ClearFlashLocation ( );
	void ClearFlashCount ( );
	float GetBurstInterval ( );
	float GetFireInterval ( unsigned char FireModeNum );
	void WeaponPlayAkEvent ( class UAkEvent* Event, unsigned long bReplicate );
	bool CanBeUsedBy ( class APawn* Other );
	void ServerOnAltFireTriggered ( );
	void RouteCallToServerForAltFireTrigger ( );
	void StartZoom ( );
	float PlayAnimation ( unsigned char AnimType, struct FName Sequence, float fDesiredDuration, unsigned long bLoop, float BlendInTime, float BlendOutTime );
	float PlayFirstPersonBodyAnimation ( unsigned char ActionType, float PlayRateScale, float Duration, class USpecialMoveDefinition** PlayedSMD );
	void ExecuteProjectileFiredConstructEvent ( class UObject* InInstigator, class UObject* InProjectile, struct FBehaviorConsumerHandle* InConsumerHandle );
	class AProjectile* eventProjectileDefinitionFire ( class UFiringModeDefinition* FireModeDef );
	class AProjectile* ProjectileFire ( );
	void AdjustFiredProjectileVelocity ( class AProjectile* Proj );
	void ClientStopZoom ( unsigned long bSupressFade );
	struct FVector InstantFireEndTrace ( struct FVector StartTrace );
	struct FVector GetTracerStartLocation ( );
	struct FVector InstantFireStartTrace ( );
	bool IsCrosshairEnabled ( unsigned long bForScope );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	void AddAccuracyImpulse ( float Impulse );
	void eventNotifyTargetLockSuccessful ( class AActor* NewLockOnTarget );
	void EndFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	void NotifyWeaponNotBeingOperated ( );
	void NotifyWeaponBeingOperated ( );
	void PutDownWeapon ( );
	void Activate ( unsigned long bEquipInOffHand );
	void DetachWeapon ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	unsigned char GetHand ( );
	void SetHand ( unsigned char NewWeaponHand );
	struct FName GetFireTriggerTag ( int BarrelIndex, int FireMode );
	bool IsAimCorrect ( );
	struct FVector GetDesiredAimPoint ( );
	bool ClientWeaponSetWaitForAmmoPool ( );
	class AController* GetResourcePoolContext ( );
	void AssociateAmmoPool ( );
	int AddAmmo ( int Amount );
	void InitializeWeaponAfterBringUp ( );
	bool HasSpareAmmo ( );
	int eventGetAmmoCount ( );
	void PostBeginPlay ( );
	void RefreshCrosshairForPlayer ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowVehicleWeapon::pClassPointer = NULL;

// Class WillowGame.WillowWeaponTypes
// 0x0000 (0x003C - 0x003C)
class UWillowWeaponTypes : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4772 ];

		return pClassPointer;
	};

};

UClass* UWillowWeaponTypes::pClassPointer = NULL;

// Class WillowGame.WillowWorldSoundManager
// 0x0044 (0x01E0 - 0x019C)
class AWillowWorldSoundManager : public AWorldSoundManager
{
public:
	class UAkComponent*                                MusicComponent;                                   		// 0x019C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAkEvent*                                    CurrentMusicStartAkEvent;                         		// 0x01A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkEvent*                                    CurrentMusicStopAkEvent;                          		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkState*                                    CurrentAmbientAkState;                            		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkState*                                    CurrentCombatAkState;                             		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkState*                                    CurrentBossAkState;                               		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentMusicState;                                		// 0x01B4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UAkState*                                    CurrentCustomCombatMusicAkState;                  		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkState*                                    CurrentCustomAmbientMusicAkState;                 		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInCombatMusicVolumeTransition : 1;               		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              CombatMusicTransitionValue;                       		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CombatMusicTransitionStartValue;                  		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CombatMusicTransitionTargetValue;                 		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CombatMusicTransitionStartTime;                   		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CombatMusicTransitionEndTime;                     		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTransitionDuration;                           		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkRtpc*                                     CombatMusicRtpc;                                  		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4774 ];

		return pClassPointer;
	};

	bool IsLevelMusicPlaying ( );
	void StaticSetCustomAmbientMusicAkState ( class UAkState* CustomAmbientMusicAkState );
	void StaticSetBossAkState ( class UAkState* BossAkState );
	void StaticConfigureLevelMusic ( class UAkEvent* StartMusicAkEvent, class UAkEvent* StopMusicAkEvent, class UAkState* AmbientAkState, class UAkState* CombatAkState );
};

UClass* AWillowWorldSoundManager::pClassPointer = NULL;

// Class WillowGame.WorldBody
// 0x0090 (0x00CC - 0x003C)
class UWorldBody : public UObject
{
public:
	struct FPointer                                    VfTable_IIWorldBody;                              		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class APawn*                                       Instigator;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FVector                                     Location;                                         		// 0x0044 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x0050 (0x000C) [0x0000000000000000]              
	struct FVector                                     Velocity;                                         		// 0x005C (0x000C) [0x0000000000000000]              
	class UObject*                                     WorldBodyAttachmentProxy;                         		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FImpactInfo                                 AttachmentProxyImpactInfo;                        		// 0x006C (0x005C) [0x0000000000080000]              ( CPF_Component )
	class UObject*                                     AdditionalQueryInterfaceSource;                   		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4776 ];

		return pClassPointer;
	};

	void Behavior_CauseRadiusDamage ( float Radius, float DamageAmount, unsigned long bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, struct FVector Offset, class UIDamageCauser* DamageCauser, unsigned long bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray< class AActor* >* ActorsHurt );
	void Behavior_CauseDamage ( class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, class UIDamageCauser* DamageCauser, float BarrelSourceTime, float PlantSourceTime );
	void ShutDown ( );
	void InitializeFromImpact ( class APawn* InInstigator, struct FImpactInfo InAttachmentProxyImpactInfo, class UObject* InAdditionalQueryInterfaceSource );
	void Initialize ( class APawn* InInstigator, struct FVector InLocation, struct FRotator InRotation, struct FVector inVelocity, class UObject* InWorldBodyAttachmentProxy, class UObject* InAdditionalQueryInterfaceSource );
	bool WorldBodyAttachComponent ( class UActorComponent* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachActor ( class AActor* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachTo ( class UIWorldBody* OtherWorldBody, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	class UIWorldBody* GetWorldBodyAttachmentBase ( );
	struct FName GetWorldBodyAttachmentBoneForComponent ( class UActorComponent* AttachedComponent );
	bool GetWorldBodyAttachmentLocationAndRotation ( struct FName AttachmentPointName, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentRotation ( struct FName AttachmentPointName, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentLocation ( struct FName AttachmentPointName, struct FVector* OutLocation );
	struct FVector GetWorldBodyVelocity ( );
	struct FRotator GetWorldBodyRotation ( );
	struct FVector GetWorldBodyLocation ( );
};

UClass* UWorldBody::pClassPointer = NULL;

// Class WillowGame.WorldDiscoveryArea
// 0x0064 (0x01EC - 0x0188)
class AWorldDiscoveryArea : public AActor
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bForFogOfWarOnly : 1;                             		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseCustomName : 1;                               		// 0x018C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWorldAreaVolume : 1;                             		// 0x018C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bWorldAreaRadius : 1;                             		// 0x018C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       DefaultWorldAreaShortName;                        		// 0x0190 (0x0008) [0x0000000000222001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	struct FName                                       CustomName;                                       		// 0x0198 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class AVolume* >                           DetectionVolumes;                                 		// 0x01A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DetectionRadius;                                  		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetectionHeight;                                  		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     WorldAreaDisplayName;                             		// 0x01B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkEvent*                                    DiscoveryAkEvent;                                 		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URegionDefinition*                           BalanceToRegionDef;                               		// 0x01C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                ExperienceRewardMultiplier;                       		// 0x01C8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                GameStage;                                        		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class APlayerController* >                 PlayersDetected;                                  		// 0x01DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              NextDetectionTime;                                		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4778 ];

		return pClassPointer;
	};

	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
	int GetExperienceReward ( class AWillowPlayerController* DiscoveringPlayer );
	struct FName GetWorldAreaShortName ( );
};

UClass* AWorldDiscoveryArea::pClassPointer = NULL;

// Class WillowGame.WorldDiscoveryAreaRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWorldDiscoveryAreaRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4780 ];

		return pClassPointer;
	};

};

UClass* UWorldDiscoveryAreaRenderingComponent::pClassPointer = NULL;

// Class WillowGame.AnimNotify_CustomEvent
// 0x0008 (0x0044 - 0x003C)
class UAnimNotify_CustomEvent : public UAnimNotify
{
public:
	struct FName                                       CustomEventName;                                  		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4782 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_CustomEvent::pClassPointer = NULL;

// Class WillowGame.AnimNotify_DialogEvent
// 0x0008 (0x0044 - 0x003C)
class UAnimNotify_DialogEvent : public UAnimNotify
{
public:
	class UGearboxDialogEventTag*                      EventTag;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogGroup*                         Group;                                            		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4784 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_DialogEvent::pClassPointer = NULL;

// Class WillowGame.AnimNotify_EnableHandIK
// 0x0008 (0x0044 - 0x003C)
class UAnimNotify_EnableHandIK : public UAnimNotify
{
public:
	int                                                Hand;                                             		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableIK : 1;                                    		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4786 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_EnableHandIK::pClassPointer = NULL;

// Class WillowGame.AnimNotify_EnableHeadLookAt
// 0x000C (0x0048 - 0x003C)
class UAnimNotify_EnableHeadLookAt : public UAnimNotify
{
public:
	struct FName                                       HeadControlName;                                  		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnable : 1;                                      		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4788 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_EnableHeadLookAt::pClassPointer = NULL;

// Class WillowGame.AnimNotify_UseBehavior
// 0x0011 (0x004D - 0x003C)
class UAnimNotify_UseBehavior : public UAnimNotify
{
public:
	TArray< class UBehaviorBase* >                     Behaviors;                                        		// 0x003C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bRunOnServer : 1;                                 		// 0x0048 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRunOnClient : 1;                                 		// 0x0048 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRunIfLocalPlayer : 1;                            		// 0x0048 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPassInstigatorAsSelfContext : 1;                 		// 0x0048 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      InstigatorContextForBehavior;                     		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4790 ];

		return pClassPointer;
	};

	bool PreTestNotify ( class AWillowPawn* anOwner );
};

UClass* UAnimNotify_UseBehavior::pClassPointer = NULL;

// Class WillowGame.IWeaponBoneController
// 0x0000 (0x003C - 0x003C)
class UIWeaponBoneController : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4792 ];

		return pClassPointer;
	};

	void UnPause ( );
	void Pause ( );
	void Stop ( );
	void SpinImpulseOnFire ( float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval );
	void EndFire ( float SpinDownDuration );
	void BeginFire ( float SpinUpDuration, float FireInterval );
	void IncrementWeaponBoneControl ( float FireInterval );
	struct FName GetControlName ( );
};

UClass* UIWeaponBoneController::pClassPointer = NULL;

// Class WillowGame.SkelControlHandModifier
// 0x0048 (0x00E4 - 0x009C)
class USkelControlHandModifier : public USkelControlBase
{
public:
	class UAnimSequence*                               HandAnimSeq;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	struct FName                                       CurrentSequenceName;                              		// 0x00A0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00A8 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.SkelControlHandModifier.ActiveBoneMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4794 ];

		return pClassPointer;
	};

};

UClass* USkelControlHandModifier::pClassPointer = NULL;

// Class WillowGame.SkelControlLeftHandGripWeapon
// 0x0008 (0x010C - 0x0104)
class USkelControlLeftHandGripWeapon : public USkelControlLimb
{
public:
	unsigned long                                      bEditWeaponHoldIKInfo : 1;                        		// 0x0104 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	class UBodyClassDefinition*                        CachedBodyClass;                                  		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4796 ];

		return pClassPointer;
	};

};

UClass* USkelControlLeftHandGripWeapon::pClassPointer = NULL;

// Class WillowGame.StanceExpressionEvaluator
// 0x0005 (0x0041 - 0x003C)
class UStanceExpressionEvaluator : public UExpressionEvaluator
{
public:
	class UStanceTypeDefinition*                       Stance;                                           		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Option;                                           		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4798 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UStanceExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.WillowAnimBlendByPosture
// 0x0008 (0x00EC - 0x00E4)
class UWillowAnimBlendByPosture : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMakeCrouched : 1;                                		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4800 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimBlendByPosture::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_AddCameraBone
// 0x0038 (0x0110 - 0x00D8)
class UWillowAnimNode_AddCameraBone : public UAnimNodeBlend
{
public:
	struct FName                                       BoneName;                                         		// 0x00D8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendWeight;                                      		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            LocalToCompReqBones;                              		// 0x00E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FBoneAtom                                   CachedRefBoneCompSpaceTransform;                  		// 0x00F0 (0x0020) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4802 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

UClass* UWillowAnimNode_AddCameraBone::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_AimState
// 0x0014 (0x00F8 - 0x00E4)
class UWillowAnimNode_AimState : public UAnimNodeBlendList
{
public:
	TArray< struct FAimAnimTransitionData >            TransitionAnims;                                  		// 0x00E4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                CurrentModeChildIndex;                            		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TransitionBlendOutTime;                           		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4804 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNode_AimState::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_ClimbLadder
// 0x0000 (0x00D4 - 0x00D4)
class UWillowAnimNode_ClimbLadder : public UAnimNodeScaleRateBySpeed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4806 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNode_ClimbLadder::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_Condition
// 0x0010 (0x00E8 - 0x00D8)
class UWillowAnimNode_Condition : public UAnimNodeBlend
{
public:
	float                                              BlendTime;                                        		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CheckRate;                                        		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFlagDefinition*                             FlagCondition;                                    		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastCheckTime;                                    		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4808 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNode_Condition::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_MovementTransition
// 0x0030 (0x0114 - 0x00E4)
class UWillowAnimNode_MovementTransition : public UAnimNodeBlendList
{
public:
	float                                              LaunchBlendTime;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostLaunchBlendTime;                              		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StoppingBlendTime;                                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostStopBlendTime;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LaunchAnimName;                                   		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StopAnimName;                                     		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LaunchDelayTime;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MoveState;                                        		// 0x0108 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bWantsToMove : 1;                                 		// 0x010C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              CurrentLaunchDelayTime;                           		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4810 ];

		return pClassPointer;
	};

	bool NodeIsIdle ( );
};

UClass* UWillowAnimNode_MovementTransition::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_Prism
// 0x002F (0x00F4 - 0x00C5)
class UWillowAnimNode_Prism : public UAnimNodeBlendBase
{
public:
	TArray< struct FPrismDataContainer >               PrismData;                                        		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BlendTime;                                        		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshOffsetTurnThreshold;                          		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MeshOffsetTurn;                                   		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      MeshOffsetTurnOnlyWhenStopped : 1;                		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlendDown : 1;                                   		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                PreviousGroup;                                    		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentGroup;                                     		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentBlendValue;                                		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EditorSliderValue;                                		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4812 ];

		return pClassPointer;
	};

	bool NodeIsActive ( );
};

UClass* UWillowAnimNode_Prism::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_WeaponHold
// 0x0004 (0x00E8 - 0x00E4)
class UWillowAnimNode_WeaponHold : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4814 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNode_WeaponHold::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_WeaponRecoil
// 0x0008 (0x0114 - 0x010C)
class UWillowAnimNode_WeaponRecoil : public UAnimNodeSpecialMoveBlend
{
public:
	unsigned long                                      bOffHandWeapon : 1;                               		// 0x010C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bComputeBaseRecoilScaleOnNextTick : 1;            		// 0x010C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              BaseRecoilScale;                                  		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4816 ];

		return pClassPointer;
	};

	float PlayData ( struct FName AnimNameOverride, float PlayRateScale, float BlendInOverride, float BlendOutOverride, struct FSpecialMoveData* SMData );
};

UClass* UWillowAnimNode_WeaponRecoil::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeAimOffset
// 0x0030 (0x0140 - 0x0110)
class UWillowAnimNodeAimOffset : public UAnimNodeAimOffset
{
public:
	float                                              AimSpeed;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWrapYaw : 1;                                     		// 0x0114 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWrapPitch : 1;                                   		// 0x0114 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bArbitraryOrientation : 1;                        		// 0x0114 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseLikeHeadLookAt : 1;                           		// 0x0114 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLimitRange : 1;                                  		// 0x0114 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMigrated : 1;                                    		// 0x0114 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsInterpolatingAim : 1;                          		// 0x0114 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	struct FName                                       PivotOverrideSocket;                              		// 0x0118 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawRange;                                         		// 0x0120 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PitchRangeUp;                                     		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PitchRangeDown;                                   		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawLimitPct;                                      		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PitchLimitPct;                                    		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    AngleRange;                                       		// 0x0134 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4818 ];

		return pClassPointer;
	};

	bool GetTargetLocation ( struct FVector* TargetLoc );
	bool GetPivotPoint ( struct FVector* PivotPoint );
	struct FVector2D InterpAim ( float DeltaTime );
	struct FVector2D GetDesiredAim ( );
	struct FRotator GetCurrentAim ( );
	void DebugAimOffset ( struct FVector2D DesiredAim );
	bool IsAimNodeDebugEnabled ( );
	void ToggleAimNodeDebug ( );
};

UClass* UWillowAnimNodeAimOffset::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeAimOffset_BoundaryTurret
// 0x0000 (0x0140 - 0x0140)
class UWillowAnimNodeAimOffset_BoundaryTurret : public UWillowAnimNodeAimOffset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4820 ];

		return pClassPointer;
	};

	struct FVector2D GetDesiredAim ( );
};

UClass* UWillowAnimNodeAimOffset_BoundaryTurret::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendByAimState
// 0x0008 (0x00EC - 0x00E4)
class UWillowAnimNodeBlendByAimState : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCurrentAimAtTarget : 1;                          		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bEditorAimAtTarget : 1;                           		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4822 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendByAimState::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendByRotationSpeed
// 0x0014 (0x00F8 - 0x00E4)
class UWillowAnimNodeBlendByRotationSpeed : public UAnimNodeBlendList
{
public:
	unsigned long                                      NoSpeedScaling : 1;                               		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCallPlayAnimOnSwitch : 1;                        		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThresholdRate;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferenceSpeed;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewRotationRate;                              		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4824 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendByRotationSpeed::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendByStance
// 0x0044 (0x0128 - 0x00E4)
class UWillowAnimNodeBlendByStance : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< float >                                    ReferencesSpeeds;                                 		// 0x00E8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            DefaultStances;                                   		// 0x00F4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UStanceTypeDefinition* >             ChildStanceTypes;                                 		// 0x0100 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bCatchUnspecifiedStances : 1;                     		// 0x010C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bApplyRateScale : 1;                              		// 0x010C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCached : 1;                                      		// 0x010C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              Scale;                                            		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DiagScale;                                        		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStanceTypeDefinition*                       CurrentStanceType;                                		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class USkelControlBase* >                  CachedSkelControls;                               		// 0x011C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4826 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendByStance::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendDirectional
// 0x0017 (0x00DC - 0x00C5)
class UWillowAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseAcceleration : 1;                             		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseControllerLookDirection : 1;                  		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4828 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendDirectional::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendInjured
// 0x0008 (0x00EC - 0x00E4)
class UWillowAnimNodeBlendInjured : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMakeInjured : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4830 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendInjured::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendList
// 0x000C (0x00F0 - 0x00E4)
class UWillowAnimNodeBlendList : public UAnimNodeBlendList
{
public:
	TArray< float >                                    ChildBlendInTime;                                 		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4832 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendList::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_Falling
// 0x0014 (0x0104 - 0x00F0)
class UWillowAnimNode_Falling : public UWillowAnimNodeBlendList
{
public:
	float                                              DelayBeforeStartFalling;                          		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinStartFallingVelocity;                          		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterruptEndFallMovementSpeed;                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartFallingTime;                                 		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StuckFallingTimer;                                		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4834 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNode_Falling::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendSwitch
// 0x0028 (0x010C - 0x00E4)
class UWillowAnimNodeBlendSwitch : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ChildSwitches;                                    		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       CurrentSwitch;                                    		// 0x00F4 (0x0008) [0x0000000000000000]              
	struct FName                                       DesiredSwitch;                                    		// 0x00FC (0x0008) [0x0000000000000000]              
	struct FName                                       DefaultSwitch;                                    		// 0x0104 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4836 ];

		return pClassPointer;
	};

	void SetCurrentSwitch ( struct FName NewSwitch );
};

UClass* UWillowAnimNodeBlendSwitch::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendThirdPersonMenu
// 0x0008 (0x00EC - 0x00E4)
class UWillowAnimNodeBlendThirdPersonMenu : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMakeThirdPerson : 1;                             		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4838 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendThirdPersonMenu::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendTurning
// 0x0020 (0x0104 - 0x00E4)
class UWillowAnimNodeBlendTurning : public UAnimNodeBlendList
{
public:
	float                                              TurnTransitionDelay;                              		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendUpTime;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      fTurning : 1;                                     		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                PrevAngle;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                PrevDeltaAngle;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                DeltaAngle;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              CurrentTurnTransitionDelay;                       		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4840 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendTurning::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendVehicleDirectional
// 0x000F (0x00D4 - 0x00C5)
class UWillowAnimNodeBlendVehicleDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4842 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendVehicleDirectional::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeBlendWheeledPawn
// 0x0037 (0x00FC - 0x00C5)
class UWillowAnimNodeBlendWheeledPawn : public UAnimNodeBlendBase
{
public:
	struct FDirChangeRateRange                         DirChangeRateMin;                                 		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FDirChangeRateRange                         DirChangeRateMax;                                 		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferenceSpeed;                                   		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedUpRate;                                      		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedDownRate;                                    		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrakeRate;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleBlendTime;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseBaseRotation : 1;                             		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsIdle : 1;                                      		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOneFrameMovementAdded : 1;                       		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              DirAngle;                                         		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              CurSpeed;                                         		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4844 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimNodeBlendWheeledPawn::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeFeatherBlend
// 0x0028 (0x0100 - 0x00D8)
class UWillowAnimNodeFeatherBlend : public UAnimNodeBlend
{
public:
	TArray< struct FFeatherBoneBlendTarget >           BoneBlendTargets;                                 		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x00E4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< float >                                    Child2PerBoneWeight;                              		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            LocalToCompReqBones;                              		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4846 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

UClass* UWillowAnimNodeFeatherBlend::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeSequence
// 0x0010 (0x0124 - 0x0114)
class UWillowAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned long                                      bAutoStart : 1;                                   		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoopLastSequence : 1;                            		// 0x0114 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FName >                             SeqStack;                                         		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4848 ];

		return pClassPointer;
	};

	void eventOnInit ( );
	void PlayAnimationSet ( TArray< struct FName > Sequences, float SeqRate, unsigned long bLoopLast );
	void PlayAnimation ( struct FName Sequence, float SeqRate, unsigned long bSeqLoop );
};

UClass* UWillowAnimNodeSequence::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeSequenceAdditiveBlend
// 0x0014 (0x0128 - 0x0114)
class UWillowAnimNodeSequenceAdditiveBlend : public UAnimNodeSequence
{
public:
	unsigned long                                      bAutoGenerateAdditiveSeqName : 1;                 		// 0x0114 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FName                                       AddAnimSeqName;                                   		// 0x0118 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimSequence*                               AddAnimSeq;                                       		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AddAnimLinkupIndex;                               		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4850 ];

		return pClassPointer;
	};

	void SetAddAnim ( struct FName Sequence );
	void SetAnim ( struct FName Sequence );
};

UClass* UWillowAnimNodeSequenceAdditiveBlend::pClassPointer = NULL;

// Class WillowGame.WillowAnimNodeSlot
// 0x0000 (0x00EC - 0x00EC)
class UWillowAnimNodeSlot : public UAnimNodeSlot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4852 ];

		return pClassPointer;
	};

	void StopCustomAnimationOnLastFrame ( );
};

UClass* UWillowAnimNodeSlot::pClassPointer = NULL;

// Class WillowGame.WillowAnimTree
// 0x0018 (0x0148 - 0x0130)
class UWillowAnimTree : public UAnimTree
{
public:
	TArray< struct FName >                             SimpleAnimNames;                                  		// 0x0130 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      PreviewWeapon;                                    		// 0x013C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       LeftHandAnimation;                                		// 0x0140 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4854 ];

		return pClassPointer;
	};

};

UClass* UWillowAnimTree::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_EyelidLook
// 0x0034 (0x0100 - 0x00CC)
class UWillowSkelControl_EyelidLook : public USkelControlSingleBone
{
public:
	float                                              OriginalHorizAngle;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              OriginalVertAngle;                                		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FName                                       EyeBoneName;                                      		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                EyeMaterialIndex;                                 		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              vertMax;                                          		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              vertMin;                                          		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              horizMax;                                         		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              horizMin;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              maxOpenValue;                                     		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              minOpenValue;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClosedValue;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EyeLidMoveable : 1;                               		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4856 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_EyelidLook::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_LowerEyelidLook
// 0x0000 (0x0100 - 0x0100)
class UWillowSkelControl_LowerEyelidLook : public UWillowSkelControl_EyelidLook
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4858 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_LowerEyelidLook::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_UpperEyelidLook
// 0x0014 (0x0114 - 0x0100)
class UWillowSkelControl_UpperEyelidLook : public UWillowSkelControl_EyelidLook
{
public:
	struct FVector                                     LookAtOffset;                                     		// 0x0100 (0x000C) [0x0000000000000000]              
	unsigned long                                      EyeMoveable : 1;                                  		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              EyeInterpSpeed;                                   		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4860 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_UpperEyelidLook::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_FootPlacement
// 0x0028 (0x0150 - 0x0128)
class UWillowSkelControl_FootPlacement : public USkelControlFootPlacement
{
public:
	struct FVector                                     LastOffset;                                       		// 0x0128 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CachedFloor;                                      		// 0x0134 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPawn*                                 CachedPawn;                                       		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpSpeed;                                      		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ExpensiveDistanceFactor;                          		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bMoreAccurateAndMoreExpensive : 1;                		// 0x014C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4862 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_FootPlacement::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_LookAtActor
// 0x0018 (0x0150 - 0x0138)
class UWillowSkelControl_LookAtActor : public USkelControlLookAt
{
public:
	struct FVector                                     AdditionalOffset;                                 		// 0x0138 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutOfRangeBlendTime;                              		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOutOfRange : 1;                                  		// 0x0148 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x0148 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class AWillowAIPawn*                               MyAIPawn;                                         		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4864 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_LookAtActor::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_RotateFlapFromFiring
// 0x0020 (0x00EC - 0x00CC)
class UWillowSkelControl_RotateFlapFromFiring : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                   		// 0x00CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FRotator                                    RotationExtent;                                   		// 0x00D0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bPaused : 1;                                      		// 0x00DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              BlendPercent;                                     		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendPercentRate;                                 		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendPercentRateDelay;                            		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4866 ];

		return pClassPointer;
	};

	void UnPause ( );
	void Pause ( );
	void Stop ( );
	void SpinImpulseOnFire ( float ExpandPercentPerImpulse, float CollapseDuration, float FireInterval );
	void EndFire ( float CollapseDuration );
	void BeginFire ( float ExpandDuration, float FireInterval );
	void IncrementWeaponBoneControl ( float FireInterval );
	struct FName GetControlName ( );
};

UClass* UWillowSkelControl_RotateFlapFromFiring::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_RotateWeaponBoneFromFiring
// 0x0030 (0x00FC - 0x00CC)
class UWillowSkelControl_RotateWeaponBoneFromFiring : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                   		// 0x00CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bAdjustMaxRotationByFireInterval : 1;             		// 0x00D0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPaused : 1;                                      		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                NumberOfShotsPerRotation;                         		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxRotationsPerSecond;                            		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinRotationsPerSecond;                            		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    RotationExtent;                                   		// 0x00E0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CurrentMaxRotationsPerSecond;                     		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendPercent;                                     		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendPercentRate;                                 		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendPercentRateDelay;                            		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4868 ];

		return pClassPointer;
	};

	void UnPause ( );
	void Pause ( );
	void Stop ( );
	void SpinImpulseOnFire ( float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval );
	void EndFire ( float SpinDownDuration );
	void BeginFire ( float SpinUpDuration, float FireInterval );
	void IncrementWeaponBoneControl ( float FireInterval );
	struct FName GetControlName ( );
};

UClass* UWillowSkelControl_RotateWeaponBoneFromFiring::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_RotationRate
// 0x000C (0x00D8 - 0x00CC)
class UWillowSkelControl_RotationRate : public USkelControlSingleBone
{
public:
	struct FRotator                                    RotationRate;                                     		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4870 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_RotationRate::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_RotationRateBySpeed
// 0x0028 (0x0100 - 0x00D8)
class UWillowSkelControl_RotationRateBySpeed : public UWillowSkelControl_RotationRate
{
public:
	unsigned long                                      bUseBaseSkelComponentOwner : 1;                   		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      SpeedComponent;                                   		// 0x00DC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinSpeed;                                         		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxSpeed;                                         		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    MinRotationRate;                                  		// 0x00E8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    MaxRotationRate;                                  		// 0x00F4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4872 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_RotationRateBySpeed::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_TurretConstrained
// 0x0064 (0x0130 - 0x00CC)
class UWillowSkelControl_TurretConstrained : public USkelControlSingleBone
{
public:
	unsigned long                                      bConstrainPitch : 1;                              		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bConstrainYaw : 1;                                		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConstrainRoll : 1;                               		// 0x00CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInvertPitch : 1;                                 		// 0x00CC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvertYaw : 1;                                   		// 0x00CC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bInvertRoll : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bFixedWhenFiring : 1;                             		// 0x00CC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bResetWhenUnattended : 1;                         		// 0x00CC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsInMotion : 1;                                  		// 0x00CC (0x0004) [0x0000000000000000] [0x00000100] 
	struct FTurretConstraintData                       MaxAngle;                                         		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FTurretConstraintData                       MinAngle;                                         		// 0x00DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecondYaw;                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecondPitch;                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecondRoll;                          		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DesiredBoneRotation;                              		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                AssociatedSeatIndex;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	struct FRotator                                    DefaultRotation;                                  		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       VirtualSeatKey;                                   		// 0x0110 (0x0008) [0x0000000000000000]              
	struct FRotator                                    ConstrainedBoneRotation;                          		// 0x0118 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnTurretStatusChange__Delegate;                 		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4874 ];

		return pClassPointer;
	};

	void OnTurretStatusChange ( unsigned long bIsMoving );
};

UClass* UWillowSkelControl_TurretConstrained::pClassPointer = NULL;

// Class WillowGame.WillowSkelControlHandPlacement
// 0x000C (0x0110 - 0x0104)
class UWillowSkelControlHandPlacement : public USkelControlLimb
{
public:
	class UObject*                                     TargetRef;                                        		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       TargetAttachmentName;                             		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4876 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControlHandPlacement::pClassPointer = NULL;

// Class WillowGame.WillowSkelControlLerpSingleBone
// 0x003C (0x0108 - 0x00CC)
class UWillowSkelControlLerpSingleBone : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                   		// 0x00CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FRotator                                    RotationExtent;                                   		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAdjustRotationRateByFireInterval : 1;            		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              RotationRate;                                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IncrementSize;                                    		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    StartRotation;                                    		// 0x00E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DestinationRotation;                              		// 0x00F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RemainingRotations;                               		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentRotationRate;                              		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4878 ];

		return pClassPointer;
	};

	void UnPause ( );
	void Pause ( );
	void Stop ( );
	void SpinImpulseOnFire ( float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval );
	void EndFire ( float SpinDownDuration );
	void BeginFire ( float SpinUpDuration, float FireInterval );
	void IncrementWeaponBoneControl ( float FireInterval );
	struct FName GetControlName ( );
};

UClass* UWillowSkelControlLerpSingleBone::pClassPointer = NULL;

// Class WillowGame.SeqAct_AllPlayersInMesh
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_AllPlayersInMesh : public USequenceAction
{
public:
	TArray< class ADynamicSMActor* >                   Meshes;                                           		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bAllActorsInMesh : 1;                             		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4880 ];

		return pClassPointer;
	};

	bool AllPlayersInMesh ( );
	bool MeshEncompassesActor ( class APlayerController* CurActor, class ADynamicSMActor* CurMesh );
	bool PlayerIsInAMesh ( class APlayerController* PC );
};

UClass* USeqAct_AllPlayersInMesh::pClassPointer = NULL;

// Class WillowGame.SeqAct_AttachPlayerPawnToBase
// 0x0025 (0x00C9 - 0x00A4)
class USeqAct_AttachPlayerPawnToBase : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeOffset;                                   		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PhysicsMode;                                      		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4882 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AttachPlayerPawnToBase::pClassPointer = NULL;

// Class WillowGame.SeqAct_ConditionallyLoadCommons
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_ConditionallyLoadCommons : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4884 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ConditionallyLoadCommons::pClassPointer = NULL;

// Class WillowGame.SeqAct_DiscardInventory
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_DiscardInventory : public USequenceAction
{
public:
	unsigned long                                      bSpawnPickupsForOldInventory : 1;                 		// 0x00A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRepopulateInventory : 1;                         		// 0x00A4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4886 ];

		return pClassPointer;
	};

	void eventOnActivated ( class AWillowPawn* WPawn );
};

UClass* USeqAct_DiscardInventory::pClassPointer = NULL;

// Class WillowGame.SeqAct_DiscoverLevelChallengeObject
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_DiscoverLevelChallengeObject : public USequenceAction
{
public:
	class UObject*                                     LevelChallengeObject;                             		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreNumbering : 1;                             		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4888 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DiscoverLevelChallengeObject::pClassPointer = NULL;

// Class WillowGame.SeqAct_DisplayTrainingDefinitionMessage
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_DisplayTrainingDefinitionMessage : public USequenceAction
{
public:
	float                                              Duration;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4890 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DisplayTrainingDefinitionMessage::pClassPointer = NULL;

// Class WillowGame.SeqAct_DisplayTrainingMessage
// 0x0030 (0x00D4 - 0x00A4)
class USeqAct_DisplayTrainingMessage : public USequenceAction
{
public:
	struct FString                                     Key;                                              		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     TitleKey;                                         		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Duration;                                         		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     HUDInitializationFrame;                           		// 0x00C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      PausesGame : 1;                                   		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMandatory : 1;                                   		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              PauseContinueDelay;                               		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4892 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DisplayTrainingMessage::pClassPointer = NULL;

// Class WillowGame.SeqAct_DisplayWillowHUDMessage
// 0x0014 (0x00B8 - 0x00A4)
class USeqAct_DisplayWillowHUDMessage : public USequenceAction
{
public:
	unsigned char                                      MessageType;                                      		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MarkupString;                                     		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Duration;                                         		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4894 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DisplayWillowHUDMessage::pClassPointer = NULL;

// Class WillowGame.SeqAct_ExecuteSkill
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_ExecuteSkill : public USequenceAction
{
public:
	unsigned long                                      bAllowMultipleInstancesOfSkill : 1;               		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsSkillActive : 1;                               		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000002] 
	class USkillDefinition*                            SkillEffect;                                      		// 0x00A8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4896 ];

		return pClassPointer;
	};

	bool eventExecuteSkill ( class AController* SkillInstigator, class USkillDefinition* Definition, unsigned char SequenceInput );
};

UClass* USeqAct_ExecuteSkill::pClassPointer = NULL;

// Class WillowGame.SeqAct_GetAttributeValue
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_GetAttributeValue : public USequenceAction
{
public:
	class UAttributeDefinition*                        AttributeDef;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResultValue;                                      		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4898 ];

		return pClassPointer;
	};

};

UClass* USeqAct_GetAttributeValue::pClassPointer = NULL;

// Class WillowGame.SeqAct_LoadingMovie
// 0x0018 (0x00BC - 0x00A4)
class USeqAct_LoadingMovie : public USequenceAction
{
public:
	struct FString                                     MovieName;                                        		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShowMovie : 1;                                   		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPauseAfterHide : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              PauseDuration;                                    		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KeepPlayingDuration;                              		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4900 ];

		return pClassPointer;
	};

};

UClass* USeqAct_LoadingMovie::pClassPointer = NULL;

// Class WillowGame.SeqAct_MathBase
// 0x0001 (0x00A5 - 0x00A4)
class USeqAct_MathBase : public USequenceAction
{
public:
	unsigned char                                      Operation;                                        		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4902 ];

		return pClassPointer;
	};

};

UClass* USeqAct_MathBase::pClassPointer = NULL;

// Class WillowGame.SeqAct_MathFloat
// 0x000F (0x00B4 - 0x00A5)
class USeqAct_MathFloat : public USeqAct_MathBase
{
public:
	float                                              ValueA;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Result;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4904 ];

		return pClassPointer;
	};

};

UClass* USeqAct_MathFloat::pClassPointer = NULL;

// Class WillowGame.SeqAct_MathInteger
// 0x000F (0x00B4 - 0x00A5)
class USeqAct_MathInteger : public USeqAct_MathBase
{
public:
	int                                                ValueA;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Result;                                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4906 ];

		return pClassPointer;
	};

};

UClass* USeqAct_MathInteger::pClassPointer = NULL;

// Class WillowGame.SeqAct_ModifyHUDElement
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_ModifyHUDElement : public USequenceAction
{
public:
	unsigned char                                      HUDElement;                                       		// 0x00A4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisplayOnHUD : 1;                                		// 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     ResPoolDefinition;                                		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4908 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ModifyHUDElement::pClassPointer = NULL;

// Class WillowGame.SeqAct_PlayBinkMovie
// 0x0010 (0x00C4 - 0x00B4)
class USeqAct_PlayBinkMovie : public USeqAct_Latent
{
public:
	struct FString                                     BinkMovieName;                                    		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      PlayStreamed : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      BlockUntilFinished : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      LoopPlayback : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4910 ];

		return pClassPointer;
	};

};

UClass* USeqAct_PlayBinkMovie::pClassPointer = NULL;

// Class WillowGame.SeqAct_PossessForPlayer
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_PossessForPlayer : public USequenceAction
{
public:
	unsigned long                                      bDestroyOldPawn : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHideOldPawn : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4912 ];

		return pClassPointer;
	};

};

UClass* USeqAct_PossessForPlayer::pClassPointer = NULL;

// Class WillowGame.SeqAct_PrimaryPlayerBusyDelay
// 0x0004 (0x00B8 - 0x00B4)
class USeqAct_PrimaryPlayerBusyDelay : public USeqAct_Latent
{
public:
	class AWillowPlayerController*                     PrimaryPlayer;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4914 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
};

UClass* USeqAct_PrimaryPlayerBusyDelay::pClassPointer = NULL;

// Class WillowGame.SeqAct_ProceduralSwitch
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_ProceduralSwitch : public USequenceAction
{
public:
	TArray< unsigned char >                            Possibilities;                                    		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4916 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ProceduralSwitch::pClassPointer = NULL;

// Class WillowGame.SeqAct_ProceduralSwitchNumeric
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_ProceduralSwitchNumeric : public USequenceAction
{
public:
	TArray< float >                                    Possibilities;                                    		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4918 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ProceduralSwitchNumeric::pClassPointer = NULL;

// Class WillowGame.SeqAct_SetChallengeCompleted
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_SetChallengeCompleted : public USequenceAction
{
public:
	class UChallengeDefinition*                        ChallengeDef;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4920 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetChallengeCompleted::pClassPointer = NULL;

// Class WillowGame.SeqAct_SetShadowParent
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_SetShadowParent : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4922 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetShadowParent::pClassPointer = NULL;

// Class WillowGame.SeqAct_TimedMessage
// 0x0004 (0x00C8 - 0x00C4)
class USeqAct_TimedMessage : public USeqAct_Log
{
public:
	float                                              MessageTime;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4924 ];

		return pClassPointer;
	};

};

UClass* USeqAct_TimedMessage::pClassPointer = NULL;

// Class WillowGame.SeqCond_HasValidSaveGame
// 0x0000 (0x008C - 0x008C)
class USeqCond_HasValidSaveGame : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4926 ];

		return pClassPointer;
	};

};

UClass* USeqCond_HasValidSaveGame::pClassPointer = NULL;

// Class WillowGame.SeqCond_IsPlayerCharacterClass
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsPlayerCharacterClass : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4928 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsPlayerCharacterClass::pClassPointer = NULL;

// Class WillowGame.SeqEvent_WorldDiscoveryArea
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_WorldDiscoveryArea : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4930 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_WorldDiscoveryArea::pClassPointer = NULL;

// Class WillowGame.SeqVar_OverpowerLevel
// 0x0000 (0x005C - 0x005C)
class USeqVar_OverpowerLevel : public USeqVar_Int
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4932 ];

		return pClassPointer;
	};

};

UClass* USeqVar_OverpowerLevel::pClassPointer = NULL;

// Class WillowGame.SeqVar_PrimaryLocalPlayer
// 0x0000 (0x0068 - 0x0068)
class USeqVar_PrimaryLocalPlayer : public USeqVar_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4934 ];

		return pClassPointer;
	};

};

UClass* USeqVar_PrimaryLocalPlayer::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ActivateInstancedBehaviorSequences
// 0x0014 (0x00B8 - 0x00A4)
class UWillowSeqAct_ActivateInstancedBehaviorSequences : public USequenceAction
{
public:
	class UMissionDefinition*                          Mission;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMissionObjectiveDefinition*                 MissionObjective;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SequenceName;                                     		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCustomObjComment : 1;                            		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4936 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ActivateInstancedBehaviorSequences::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AIScripted
// 0x0012 (0x00C6 - 0x00B4)
class UWillowSeqAct_AIScripted : public USeqAct_Latent
{
public:
	class AActor*                                      LookAt;                                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Destination;                                      		// 0x00B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      Stance;                                           		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FocusStyle;                                       		// 0x00C5 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4938 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AIScripted::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AIScriptedAnim
// 0x000C (0x00C0 - 0x00B4)
class UWillowSeqAct_AIScriptedAnim : public USeqAct_Latent
{
public:
	class UWillowAnimDefinition*                       Anim;                                             		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimDefinition*                       EditInlineAnim;                                   		// 0x00B8 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	unsigned long                                      bHoldAI : 1;                                      		// 0x00BC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4940 ];

		return pClassPointer;
	};

	class UWillowAnimDefinition* GetAnim ( );
};

UClass* UWillowSeqAct_AIScriptedAnim::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_CompleteMission
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_CompleteMission : public USequenceAction
{
public:
	class UMissionDefinition*                          AssociatedMission;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4942 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_CompleteMission::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ConfigureBossMusic
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_ConfigureBossMusic : public USequenceAction
{
public:
	class UAkState*                                    BossAkState;                                      		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4944 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ConfigureBossMusic::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ConfigureCustomAmbientMusic
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_ConfigureCustomAmbientMusic : public USequenceAction
{
public:
	class UAkState*                                    AmbientMusicAkState;                              		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4946 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ConfigureCustomAmbientMusic::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ConfigureLevelMusic
// 0x0010 (0x00B4 - 0x00A4)
class UWillowSeqAct_ConfigureLevelMusic : public USequenceAction
{
public:
	class UAkEvent*                                    MusicStartAkEvent;                                		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    MusicStopAkEvent;                                 		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkState*                                    AmbientAkState;                                   		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkState*                                    CombatAkState;                                    		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4948 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ConfigureLevelMusic::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_CoordinateOperations
// 0x0018 (0x00BC - 0x00A4)
class UWillowSeqAct_CoordinateOperations : public USequenceAction
{
public:
	TArray< class USequenceOp* >                       AllOperations;                                    		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USequenceOp* >                       OperationsRemaining;                              		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4950 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_CoordinateOperations::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_DayNightCycle
// 0x0000 (0x0178 - 0x0178)
class UWillowSeqAct_DayNightCycle : public USeqAct_Interp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4952 ];

		return pClassPointer;
	};

	bool TogglePauseDayCycle ( );
	void SetTimeOfDay ( float NewTimeOfDay );
};

UClass* UWillowSeqAct_DayNightCycle::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_DisableCombatMusicLogic
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_DisableCombatMusicLogic : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4954 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_DisableCombatMusicLogic::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_EnableCombatMusicLogic
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_EnableCombatMusicLogic : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4956 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_EnableCombatMusicLogic::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_GiveMission
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_GiveMission : public USequenceAction
{
public:
	class UMissionDefinition*                          AssociatedMission;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4958 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_GiveMission::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_InterpMenu
// 0x001C (0x0194 - 0x0178)
class UWillowSeqAct_InterpMenu : public USeqAct_Interp
{
public:
	float                                              IdleTime;                                         		// 0x0178 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ControllerSensitivityScale;                       		// 0x017C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MouseSensitivityScale;                            		// 0x0180 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AutoPlayRate;                                     		// 0x0184 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ManualPlayRate;                                   		// 0x0188 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InputDelta;                                       		// 0x018C (0x0004) [0x0000000000000000]              
	float                                              InputTime;                                        		// 0x0190 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4960 ];

		return pClassPointer;
	};

	void InputAxis ( class AWillowPlayerController* WPC, float Delta, unsigned long bGamepad );
};

UClass* UWillowSeqAct_InterpMenu::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_InterpPawn
// 0x000C (0x00C0 - 0x00B4)
class UWillowSeqAct_InterpPawn : public USeqAct_Latent
{
public:
	unsigned long                                      bLinear : 1;                                      		// 0x00B4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              InterpSpeed;                                      		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      Goal;                                             		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4962 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_InterpPawn::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_MissionCustomEvent
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_MissionCustomEvent : public USequenceAction
{
public:
	class UMissionDefinition*                          AssociatedMission;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4964 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_MissionCustomEvent::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_PrepareMapChangeFromDefinition
// 0x000C (0x00D8 - 0x00CC)
class UWillowSeqAct_PrepareMapChangeFromDefinition : public USeqAct_PrepareMapChange
{
public:
	struct FName                                       DefaultMap;                                       		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowVehicles : 1;                               		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4966 ];

		return pClassPointer;
	};

	struct FName GetPersistentMap ( );
	void SetPersistentMap ( struct FName MapToLoad );
};

UClass* UWillowSeqAct_PrepareMapChangeFromDefinition::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_PrepareSavedMapChange
// 0x0000 (0x00CC - 0x00CC)
class UWillowSeqAct_PrepareSavedMapChange : public USeqAct_PrepareMapChange
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4968 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_PrepareSavedMapChange::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_QueryTeleporterStatus
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_QueryTeleporterStatus : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4970 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_QueryTeleporterStatus::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ReleaseTeleporterHeldLevel
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ReleaseTeleporterHeldLevel : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4972 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ReleaseTeleporterHeldLevel::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ResurrectPlayer
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ResurrectPlayer : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4974 ];

		return pClassPointer;
	};

	void eventOnActivated ( class AWillowPlayerController* aWPC );
};

UClass* UWillowSeqAct_ResurrectPlayer::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_RunCustomEvent
// 0x0010 (0x00B4 - 0x00A4)
class UWillowSeqAct_RunCustomEvent : public USequenceAction
{
public:
	struct FName                                       CustomEventName;                                  		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     EventInstigator;                                  		// 0x00AC (0x0004) [0x0000000000000000]              
	class UObject*                                     OtherEventParticipant;                            		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4976 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_RunCustomEvent::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_SetAIFlag
// 0x0008 (0x00AC - 0x00A4)
class UWillowSeqAct_SetAIFlag : public USequenceAction
{
public:
	class UFlagDefinition*                             FlagDefinition;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFlagState : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4978 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_SetAIFlag::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_SetInteractionProxyState
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_SetInteractionProxyState : public USequenceAction
{
public:
	unsigned long                                      bPassEventsToKismet : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4980 ];

		return pClassPointer;
	};

	void eventOnActivated ( class AWillowMind* aWMind );
};

UClass* UWillowSeqAct_SetInteractionProxyState::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_SetLockout
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_SetLockout : public USequenceAction
{
public:
	class ULockoutDefinition*                          LockoutDef;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4982 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_SetLockout::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_SetLookAtActor
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_SetLookAtActor : public USequenceAction
{
public:
	struct FVector                                     Offset;                                           		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4984 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_SetLookAtActor::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ToggleCinematicModeAffectsAll
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ToggleCinematicModeAffectsAll : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4986 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ToggleCinematicModeAffectsAll::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_TogglePostRenderFor
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_TogglePostRenderFor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4988 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_TogglePostRenderFor::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ToggleRestrictions
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_ToggleRestrictions : public USequenceAction
{
public:
	unsigned long                                      bToggleWeapons : 1;                               		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggleTeleporters : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4990 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ToggleRestrictions::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_TravelStationTeleport
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_TravelStationTeleport : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4992 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_TravelStationTeleport::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_TurnOffCombatMusic
// 0x0008 (0x00AC - 0x00A4)
class UWillowSeqAct_TurnOffCombatMusic : public USequenceAction
{
public:
	float                                              FadeOutTime;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableAmbientMusic : 1;                          		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4994 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_TurnOffCombatMusic::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_WaypointObjective
// 0x0018 (0x00BC - 0x00A4)
class UWillowSeqAct_WaypointObjective : public USequenceAction
{
public:
	unsigned long                                      bRemoveObjective : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FMissionObjectiveWaypointData               WaypointInfo;                                     		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMissionObjectiveDefinition*                 WaypointObjective;                                		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4996 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_WaypointObjective::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_AnyPlayerHasMarketingUnlock
// 0x0004 (0x0090 - 0x008C)
class UWillowSeqCond_AnyPlayerHasMarketingUnlock : public USequenceCondition
{
public:
	class UMarketingUnlockDefinition*                  MarketingUnlockDef;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4998 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_AnyPlayerHasMarketingUnlock::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_CheckLockout
// 0x0004 (0x0090 - 0x008C)
class UWillowSeqCond_CheckLockout : public USequenceCondition
{
public:
	class ULockoutDefinition*                          LockoutDef;                                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5000 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_CheckLockout::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_GoStraightToMainMenu
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_GoStraightToMainMenu : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5002 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_GoStraightToMainMenu::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_IsCombatMusicPlaying
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_IsCombatMusicPlaying : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5004 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_IsCombatMusicPlaying::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_IsPlayerServer
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_IsPlayerServer : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5006 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_IsPlayerServer::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_MultiplePlayersInGame
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_MultiplePlayersInGame : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5008 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_MultiplePlayersInGame::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_ShouldStartNewGameCinematics
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_ShouldStartNewGameCinematics : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5010 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_ShouldStartNewGameCinematics::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_SplitScreen
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_SplitScreen : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5012 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqCond_SplitScreen::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_CombatMusicStarted
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_CombatMusicStarted : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5014 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_CombatMusicStarted::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_CustomEvent
// 0x0008 (0x00CC - 0x00C4)
class UWillowSeqEvent_CustomEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                        		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5016 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_CustomEvent::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_FastTravel
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_FastTravel : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5018 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_FastTravel::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_MissionRemoteEvent
// 0x000C (0x00D0 - 0x00C4)
class UWillowSeqEvent_MissionRemoteEvent : public USequenceEvent
{
public:
	class UMissionDefinition*                          AssociatedMissionDefinition;                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5020 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_MissionRemoteEvent::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_VehicleSpawned
// 0x0004 (0x00C8 - 0x00C4)
class UWillowSeqEvent_VehicleSpawned : public USequenceEvent
{
public:
	class AWillowVehicle*                              SpawnedVehicle;                                   		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5022 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_VehicleSpawned::pClassPointer = NULL;

// Class WillowGame.WillowSeqVar_DayNightCycleVariable
// 0x0000 (0x005C - 0x005C)
class UWillowSeqVar_DayNightCycleVariable : public USeqVar_Float
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5024 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqVar_DayNightCycleVariable::pClassPointer = NULL;

// Class WillowGame.WillowSeqVar_DayNightCycleRate
// 0x0000 (0x005C - 0x005C)
class UWillowSeqVar_DayNightCycleRate : public UWillowSeqVar_DayNightCycleVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5026 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqVar_DayNightCycleRate::pClassPointer = NULL;

// Class WillowGame.WillowSeqVar_TimeOfDay
// 0x0000 (0x005C - 0x005C)
class UWillowSeqVar_TimeOfDay : public UWillowSeqVar_DayNightCycleVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5028 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqVar_TimeOfDay::pClassPointer = NULL;

// Class WillowGame.ActionSkillStateExpressionEvaluator
// 0x0004 (0x0040 - 0x003C)
class UActionSkillStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bIsRunning : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsNotRunning : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5030 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UActionSkillStateExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.HealthStateExpressionEvaluator
// 0x0004 (0x0040 - 0x003C)
class UHealthStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bHealthy : 1;                                     		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInjured : 1;                                     		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDead : 1;                                        		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5032 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UHealthStateExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.NumberWeaponsEquippedExpressionEvaluator
// 0x0004 (0x0040 - 0x003C)
class UNumberWeaponsEquippedExpressionEvaluator : public UExpressionEvaluator
{
public:
	int                                                NumberOfWeapons;                                  		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5034 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UNumberWeaponsEquippedExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.PlayerActionExpressionEvaluator
// 0x000C (0x0048 - 0x003C)
class UPlayerActionExpressionEvaluator : public UExpressionEvaluator
{
public:
	TArray< struct FEvalActionData >                   EvalActions;                                      		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5036 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UPlayerActionExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.SkillAttributeContextResolver
// 0x0038 (0x0074 - 0x003C)
class USkillAttributeContextResolver : public UAttributeContextResolver
{
public:
	class USkillDefinition*                            AssociatedSkill;                                  		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FNameBasedObjectPath                        AssociatedSkillPathName;                          		// 0x0040 (0x0034) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5038 ];

		return pClassPointer;
	};

};

UClass* USkillAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.SkillEffectManager
// 0x001C (0x01A4 - 0x0188)
class ASkillEffectManager : public AActor
{
public:
	unsigned long                                      bAllowSkillActivation : 1;                        		// 0x0188 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdatingSkills : 1;                              		// 0x0188 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAddedHUDTrackedSkillsLastTick : 1;               		// 0x0188 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< struct FDeferredSkillActivationData >      DeferredSkillActivationList;                      		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USkill* >                            ActiveSkills;                                     		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5040 ];

		return pClassPointer;
	};

	void TriggerTakeHitEvents ( class UITargetable* Victim, class AController* InstigatedBy, class AController* VictimController, class UClass* DamageType, class UDamagePipeline* Pipeline );
	class USkill* GetActiveSkillForInstigatorByDefinition ( class AController* SkillInstigator, class USkillDefinition* Definition );
	class USkill* GetActiveSkillForInstigator ( class AController* SkillInstigator, struct FName SkillFName );
	bool UpdateSkillGrade ( class AController* SkillInstigator, class USkillDefinition* Definition, int Grade );
	void NotifySkillDamagedEvent ( unsigned char EventType, class AController* EventInstigator, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline );
	void NotifySkillEvent ( unsigned char EventType, class AController* EventInstigator, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline, class UObject* ContextObject );
	bool IsSkillActive ( class AController* SkillInstigator, class USkillDefinition* Definition );
	bool IsSkillPaused ( class AController* SkillInstigator, class USkillDefinition* Definition );
	void eventDeactivateSkill ( class AController* SkillInstigator, class USkillDefinition* Definition, unsigned long bIgnoreSkillInstigator );
	bool eventActivateSkill ( class AController* SkillInstigator, class USkillDefinition* Definition, class UObject* AdditionalSkillTarget, int SkillGrade, struct FScriptDelegate StateChangeDelegate );
	int DeferActivateSkill ( class AController* SkillInstigator, class USkillDefinition* Definition, class UObject* AdditionalSkillTarget, int SkillGrade, struct FScriptDelegate StateChangeDelegate );
	void RefreshSkillsAffectingInstigator ( class AController* SkillInstigator );
	void RefreshSkillsForInstigator ( class AController* SkillInstigator );
	void DeactivateAllSkillTreeSkillsForPlayer ( class AWillowPlayerController* WPC );
	void DeactivateAllSkillsForInstigator ( class AController* SkillInstigator );
};

UClass* ASkillEffectManager::pClassPointer = NULL;

// Class WillowGame.SkillExpressionEvaluator
// 0x0005 (0x0041 - 0x003C)
class USkillExpressionEvaluator : public UExpressionEvaluator
{
public:
	class USkillDefinition*                            Skill;                                            		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SkillState;                                       		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5042 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* USkillExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.VehiclePassengerExpressionEvaluator
// 0x0004 (0x0040 - 0x003C)
class UVehiclePassengerExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bNotInVehicle : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDriver : 1;                                      		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPassenger : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAttachedRider : 1;                               		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5044 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UVehiclePassengerExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.WeaponActionAvailableExpressionEvaluator
// 0x0000 (0x003C - 0x003C)
class UWeaponActionAvailableExpressionEvaluator : public UExpressionEvaluator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5046 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UWeaponActionAvailableExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.WeaponEquippedExpressionEvaluator
// 0x0001 (0x003D - 0x003C)
class UWeaponEquippedExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned char                                      WeaponType;                                       		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5048 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UWeaponEquippedExpressionEvaluator::pClassPointer = NULL;

// Class WillowGame.AIPawnBalanceDefinition
// 0x0078 (0x00B4 - 0x003C)
class UAIPawnBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UExpressionEvaluator*                        CanSpawnIf;                                       		// 0x0040 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	TArray< struct FAIPawnPlaythroughData >            PlayThroughs;                                     		// 0x0044 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class AWillowAIPawn*                               AIPawnArchetype;                                  		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      Champion : 1;                                     		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUnlockOnDeathAchievementForAllPlayers : 1;       		// 0x0054 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	TArray< class UPopulationSpawnedActorTagDefinition* > ActorTags;                                        		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FAttributeInitializationData                DefaultExpLevel;                                  		// 0x0064 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      BaseItemGameStage;                                		// 0x0074 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AchievementToUnlockOnDeath;                       		// 0x0075 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      HasLookedUpFixupIndex;                            		// 0x0076 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FAttributeInitializationData                ItemGameStageOffset;                              		// 0x0078 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UItemPoolListDefinition* >           DefaultItemPoolIncludedLists;                     		// 0x0088 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FItemPoolInfo >                     DefaultItemPoolList;                              		// 0x0094 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAIPawnGameStageGradeWeightData >   Grades;                                           		// 0x00A0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                FixupAIPawnNameIndex;                             		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAIPawnBalanceModifierDefinition*            BalanceModifier;                                  		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5050 ];

		return pClassPointer;
	};

	struct FName GetTransformedKillStat ( unsigned char Transform );
	struct FString GetTransformedDisplayName ( unsigned char Transform );
	bool SetupPawnItemPoolList ( class AWillowAIPawn* SpawnedPawn );
	class AWillowAIPawn* GetPawnArchetype ( );
	int GetPlayThroughIndex ( );
};

UClass* UAIPawnBalanceDefinition::pClassPointer = NULL;

// Class WillowGame.AttackLocation
// 0x0004 (0x0040 - 0x003C)
class UAttackLocation : public UObject
{
public:
	unsigned long                                      bRequired : 1;                                    		// 0x003C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5052 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
	bool IsRunning ( class UIAIInterface* AI );
	bool CanPath ( class UIAIInterface* AI );
};

UClass* UAttackLocation::pClassPointer = NULL;

// Class WillowGame.AttackLocation_Direct
// 0x0000 (0x0040 - 0x0040)
class UAttackLocation_Direct : public UAttackLocation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5054 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
};

UClass* UAttackLocation_Direct::pClassPointer = NULL;

// Class WillowGame.AttackLocation_Height
// 0x0008 (0x0048 - 0x0040)
class UAttackLocation_Height : public UAttackLocation
{
public:
	unsigned char                                      Restriction;                                      		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Height;                                           		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5056 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
};

UClass* UAttackLocation_Height::pClassPointer = NULL;

// Class WillowGame.AttackLocation_LineOfSight
// 0x002C (0x006C - 0x0040)
class UAttackLocation_LineOfSight : public UAttackLocation
{
public:
	unsigned char                                      LineOfSight;                                      		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ValidTime;                                        		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bFullLineOfSight : 1;                             		// 0x0048 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMustHaveNavMesh : 1;                             		// 0x0048 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	float                                              ArcAnglePct;                                      		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ArcSpeed;                                         		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ArcStartOffset;                                   		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ArcEndOffset;                                     		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5058 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
};

UClass* UAttackLocation_LineOfSight::pClassPointer = NULL;

// Class WillowGame.AttackLocation_MaxDistance
// 0x0004 (0x0044 - 0x0040)
class UAttackLocation_MaxDistance : public UAttackLocation
{
public:
	float                                              MaxDistance;                                      		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5060 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
};

UClass* UAttackLocation_MaxDistance::pClassPointer = NULL;

// Class WillowGame.AttackLocation_Move
// 0x0008 (0x0048 - 0x0040)
class UAttackLocation_Move : public UAttackLocation
{
public:
	float                                              MaxTime;                                          		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MoveDistance;                                     		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5062 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
};

UClass* UAttackLocation_Move::pClassPointer = NULL;

// Class WillowGame.AttackLocation_ParentDistance
// 0x000C (0x004C - 0x0040)
class UAttackLocation_ParentDistance : public UAttackLocation
{
public:
	unsigned char                                      Restriction;                                      		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Distance;                                         		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCheckDestination : 1;                            		// 0x0048 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5064 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
};

UClass* UAttackLocation_ParentDistance::pClassPointer = NULL;

// Class WillowGame.AttackLocation_Range
// 0x000C (0x004C - 0x0040)
class UAttackLocation_Range : public UAttackLocation
{
public:
	unsigned long                                      bCanPath : 1;                                     		// 0x0040 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FAIRange                                    Range;                                            		// 0x0044 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5066 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
	bool CanPath ( class UIAIInterface* AI );
};

UClass* UAttackLocation_Range::pClassPointer = NULL;

// Class WillowGame.AttackLocation_Side
// 0x0000 (0x0040 - 0x0040)
class UAttackLocation_Side : public UAttackLocation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5068 ];

		return pClassPointer;
	};

	bool ValidLocation ( class UIAIInterface* AI, struct FVector* TestLoc );
};

UClass* UAttackLocation_Side::pClassPointer = NULL;

// Class WillowGame.Behavior_AISpawn
// 0x0040 (0x008C - 0x004C)
class UBehavior_AISpawn : public UBehaviorBase
{
public:
	unsigned long                                      bForceSpawn : 1;                                  		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnFromSpawnPointInstanceData : 1;             		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FName                                       SpawnPointName;                                   		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPopulationDefinition*                       PopDef;                                           		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        SpawnContext;                                     		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       InstanceDataName;                                 		// 0x006C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        OverrideContext;                                  		// 0x0074 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       PopulationOverrideName;                           		// 0x0084 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5070 ];

		return pClassPointer;
	};

	class AActor* SpawnActor ( class UObject* ContextObject, class UPopulationDefinition* EffectivePopDef, class UObject* SpawnLocationContext );
	void PublishBehaviorOutput ( class AActor* SpawnedActor, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AISpawn::pClassPointer = NULL;

// Class WillowGame.DownloadableFixupAIPawnNamesDefinition
// 0x000C (0x0048 - 0x003C)
class UDownloadableFixupAIPawnNamesDefinition : public UGBXDefinition
{
public:
	TArray< struct FAIPawnPlaythroughThreeData >       PlayThroughThree;                                 		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5072 ];

		return pClassPointer;
	};

};

UClass* UDownloadableFixupAIPawnNamesDefinition::pClassPointer = NULL;

// Class WillowGame.EventFilter_OnTakeDamage
// 0x0004 (0x0044 - 0x0040)
class UEventFilter_OnTakeDamage : public UBehaviorEventFilterBase
{
public:
	float                                              DamageThreshold;                                  		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5074 ];

		return pClassPointer;
	};

};

UClass* UEventFilter_OnTakeDamage::pClassPointer = NULL;

// Class WillowGame.FromContextFlagValueResolver
// 0x0004 (0x0040 - 0x003C)
class UFromContextFlagValueResolver : public UFlagValueResolver
{
public:
	class UFlagDefinition*                             MyFlagDef;                                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5076 ];

		return pClassPointer;
	};

};

UClass* UFromContextFlagValueResolver::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryWillowAIPawn
// 0x0054 (0x00AC - 0x0058)
class UPopulationFactoryWillowAIPawn : public UPopulationFactory
{
public:
	class AWillowAIPawn*                               WillowAIPawnArchetype;                            		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                PawnExpLevel;                                     		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                PawnWeaponLevel;                                  		// 0x006C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FFlagDefinitionInitialization >     FlagsToSet;                                       		// 0x007C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeBaseValueData >           AttributeStartingValues;                          		// 0x0088 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FItemPoolInfo >                     ItemPoolList;                                     		// 0x0094 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UItemPoolListDefinition* >           ItemPoolIncludedLists;                            		// 0x00A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5078 ];

		return pClassPointer;
	};

	struct FString eventGetDescriptionOfFactoryOutput ( );
	class AWillowAIPawn* eventRestorePopulatedAIPawn ( class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, struct FPopulatedAIPawnMemento AIPawnMemento );
	void CreateSavedInventory ( class AWillowAIPawn* aWPawn, struct FPopulatedAIPawnMemento AIPawnMemento );
	void eventGetPopulatedAIPawnMemento ( class AWillowAIPawn* aWPawn, struct FPopulatedAIPawnMemento* Memento );
	bool eventShouldSavePopulationActor ( class UPopulationMaster* Master, class AActor* ActorToSave );
	bool eventDestroyPopulationActor ( class UPopulationMaster* Master, int nOpportunityIdx, class AActor* ActorToDestroy, class UPopulationFactory* SpawnFactory, int CreationFlags, unsigned long bDontSaveActor );
	class AActor* eventCreatePopulationActor ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel );
	void SetupPopulationActor ( class UPopulationMaster* Master, class AWillowAIPawn* SpawnedPawn, class UObject* SpawnLocationContextObject, int GameStage, int AwesomeLevel, unsigned long bUseMemento, struct FPopulatedAIPawnMemento AIPawnMemento );
	void SetFlagDefinitions ( class AWillowAIPawn* aPawn );
	void ApplyPopulationDefinition ( class UPopulationMaster* Master, class AWillowAIPawn* AIPawn );
	class UObject* GetAContextSourceForThePopulationActor ( class UPopulationMaster* Master );
	struct FBoxSphereBounds eventGetSpawnVisibilityBounds ( int GameStage, int AwesomeLevel );
	class UPawnAllegiance* GetActorAllegiance ( int GameStage, int AwesomeLevel );
	int eventGetActorSpawnCost ( int GameStage, int AwesomeLevel, unsigned long bCanSpawnTest );
	void eventSetupMatineeForActor ( class AActor* aNewActor );
};

UClass* UPopulationFactoryWillowAIPawn::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryBalancedAIPawn
// 0x0008 (0x00B4 - 0x00AC)
class UPopulationFactoryBalancedAIPawn : public UPopulationFactoryWillowAIPawn
{
public:
	class UAIPawnBalanceDefinition*                    PawnBalanceDefinition;                            		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseInstigatorLevel : 1;                          		// 0x00B0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5080 ];

		return pClassPointer;
	};

	float GetSpawnProbabilityAtThisGameStage ( int GameStage, int AwesomeLevel );
	struct FString eventGetDescriptionOfFactoryOutput ( );
	class AWillowAIPawn* SpawnAIPawn ( class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, unsigned long bUseMemento, struct FPopulatedAIPawnMemento AIPawnMemento );
	class AWillowAIPawn* eventRestorePopulatedAIPawn ( class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, struct FPopulatedAIPawnMemento AIPawnMemento );
	class AActor* eventCreatePopulationActor ( class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel );
	void ApplyAttributeStartingValues ( class AWillowAIPawn* SpawnedPawn );
	void SetupBalancedPopulationActor ( class UPopulationMaster* Master, class UIBalancedActor* BalancedInstigator, class AWillowAIPawn* SpawnedPawn, class UObject* SpawnLocationContextObject, int GameStage, int AwesomeLevel, unsigned long bUseMemento, struct FPopulatedAIPawnMemento AIPawnMemento );
	struct FBoxSphereBounds eventGetSpawnVisibilityBounds ( int GameStage, int AwesomeLevel );
	class UPawnAllegiance* GetActorAllegiance ( int GameStage, int AwesomeLevel );
	int eventGetActorSpawnCost ( int GameStage, int AwesomeLevel, unsigned long bCanSpawnTest );
	bool CanSpawn ( class APopulationOpportunity* SpawningOpportunity );
};

UClass* UPopulationFactoryBalancedAIPawn::pClassPointer = NULL;

// Class WillowGame.PopulationFactoryWillowInventory
// 0x0000 (0x0058 - 0x0058)
class UPopulationFactoryWillowInventory : public UPopulationFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5082 ];

		return pClassPointer;
	};

	class AWillowPickup* eventRestorePickup ( class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, struct FVector SpawnLocation, struct FRotator SpawnRotation, int GameStage, int AwesomeLevel, struct FPopulatedPickupMemento Memento );
	class AWillowPickup* CreateInventoryPickup ( class UPopulationMaster* Master, struct FPopulatedPickupMemento Memento, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void eventGetPopulatedPickupMemento ( class AWillowPickup* Pickup, struct FPopulatedPickupMemento* Memento );
	bool eventShouldSavePopulationActor ( class UPopulationMaster* Master, class AActor* ActorToSave );
};

UClass* UPopulationFactoryWillowInventory::pClassPointer = NULL;

// Class WillowGame.RES_AIOperation
// 0x0000 (0x003C - 0x003C)
class URES_AIOperation : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5084 ];

		return pClassPointer;
	};

};

UClass* URES_AIOperation::pClassPointer = NULL;

// Class WillowGame.RES_Behavior
// 0x0000 (0x003C - 0x003C)
class URES_Behavior : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5086 ];

		return pClassPointer;
	};

};

UClass* URES_Behavior::pClassPointer = NULL;

// Class WillowGame.RES_CharacterDialog
// 0x0000 (0x003C - 0x003C)
class URES_CharacterDialog : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5088 ];

		return pClassPointer;
	};

};

UClass* URES_CharacterDialog::pClassPointer = NULL;

// Class WillowGame.RES_CustomAnimation
// 0x0000 (0x003C - 0x003C)
class URES_CustomAnimation : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5090 ];

		return pClassPointer;
	};

};

UClass* URES_CustomAnimation::pClassPointer = NULL;

// Class WillowGame.RES_Firing
// 0x0000 (0x003C - 0x003C)
class URES_Firing : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5092 ];

		return pClassPointer;
	};

};

UClass* URES_Firing::pClassPointer = NULL;

// Class WillowGame.RES_Moving
// 0x0000 (0x003C - 0x003C)
class URES_Moving : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5094 ];

		return pClassPointer;
	};

};

UClass* URES_Moving::pClassPointer = NULL;

// Class WillowGame.RES_Posture
// 0x0000 (0x003C - 0x003C)
class URES_Posture : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5096 ];

		return pClassPointer;
	};

};

UClass* URES_Posture::pClassPointer = NULL;

// Class WillowGame.RES_Skill
// 0x0000 (0x003C - 0x003C)
class URES_Skill : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5098 ];

		return pClassPointer;
	};

};

UClass* URES_Skill::pClassPointer = NULL;

// Class WillowGame.RES_Sound
// 0x0000 (0x003C - 0x003C)
class URES_Sound : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5100 ];

		return pClassPointer;
	};

};

UClass* URES_Sound::pClassPointer = NULL;

// Class WillowGame.RES_SpecialMovement
// 0x0000 (0x003C - 0x003C)
class URES_SpecialMovement : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5102 ];

		return pClassPointer;
	};

};

UClass* URES_SpecialMovement::pClassPointer = NULL;

// Class WillowGame.RES_SpeedChange
// 0x0000 (0x003C - 0x003C)
class URES_SpeedChange : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5104 ];

		return pClassPointer;
	};

};

UClass* URES_SpeedChange::pClassPointer = NULL;

// Class WillowGame.RES_UseVehicle
// 0x0000 (0x003C - 0x003C)
class URES_UseVehicle : public UActionResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5106 ];

		return pClassPointer;
	};

};

UClass* URES_UseVehicle::pClassPointer = NULL;

// Class WillowGame.TargetMetaInfoValueResolver
// 0x0008 (0x0044 - 0x003C)
class UTargetMetaInfoValueResolver : public UAttributeValueResolver
{
public:
	struct FName                                       PropertyName;                                     		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5108 ];

		return pClassPointer;
	};

};

UClass* UTargetMetaInfoValueResolver::pClassPointer = NULL;

// Class WillowGame.TransformedFlagValueResolver
// 0x0001 (0x003D - 0x003C)
class UTransformedFlagValueResolver : public UFlagValueResolver
{
public:
	unsigned char                                      Transform;                                        		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5110 ];

		return pClassPointer;
	};

};

UClass* UTransformedFlagValueResolver::pClassPointer = NULL;

// Class WillowGame.WillowActionSequencePawn
// 0x0078 (0x0128 - 0x00B0)
class UWillowActionSequencePawn : public UActionSequencePawn
{
public:
	class UWillowAIComponent*                          WillowAI;                                         		// 0x00B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWillowNavigationHandle*                     MyNavHandle;                                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	class AWillowMind*                                 MyWillowMind;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	class AWillowAIPawn*                               MyWillowPawn;                                     		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FPathFindData                               PathData;                                         		// 0x00C0 (0x0058) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      Target;                                           		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowMindTargetInfo*                       TargetRec;                                        		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowMindTargetInfo*                       ParentTargetRec;                                  		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastYawCheck;                                     		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5112 ];

		return pClassPointer;
	};

	void CreateActorPath ( class AActor* GoalActor, float MaxDist, unsigned long bAdjustStartForMotion );
	struct FVector GetActorFloorLoc ( class AActor* GoalActor );
	void CreateBackupFlyerPath ( struct FVector GoalVector, unsigned long bAdjustStartForMotion );
	void CreateVectorPath ( struct FVector GoalVector, struct FGBXNavMeshPolyRef GoalPoly, unsigned long bAdjustStartForMotion );
	struct FVector GetFinalDestination ( );
	struct FVector GetPointOnGround ( struct FVector StartPoint, float Tolerance );
	bool CanMoveTo ( struct FVector GoalPoint );
	bool ReachedDestination ( );
	void FinishPath ( );
	void WaitForPath ( );
	void FollowPath ( );
	bool PathIsValid ( );
	void InvalidatePath ( );
	bool eventPathFind ( );
	bool TargetTooFar ( );
	void eventActivateEvent ( struct FName EventName );
	bool IsWalking ( );
	bool IsCurrentlyFlying ( );
	bool IsFixingFlying ( );
	bool IsFlying ( );
	void eventStop ( );
	void eventStart ( );
	void eventInit ( );
	void SetPawnMovementSpeed ( unsigned char NewPawnMovementSpeed );
	void WaitForPawnToTurn ( );
	void WaitForPawnToStop ( );
};

UClass* UWillowActionSequencePawn::pClassPointer = NULL;

// Class WillowGame.Action_Burrow
// 0x0008 (0x0130 - 0x0128)
class UAction_Burrow : public UWillowActionSequencePawn
{
public:
	class USpecialMove_Cloak*                          BurrowEnter;                                      		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpecialMove_Cloak*                          BurrowExit;                                       		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5114 ];

		return pClassPointer;
	};

	void CheckCloaked ( unsigned char Type, unsigned long bForceUncloak );
	bool SafeToUncloak ( );
	void ForceUncloak ( );
	void ForceCloak ( );
	void CheckStateTransition ( );
	void eventStart ( );
};

UClass* UAction_Burrow::pClassPointer = NULL;

// Class WillowGame.Action_GenericAttack
// 0x0050 (0x0180 - 0x0130)
class UAction_GenericAttack : public UAction_Burrow
{
public:
	unsigned long                                      bLimitedMovement : 1;                             		// 0x0130 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBurrowAttack : 1;                                		// 0x0130 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShootTarget : 1;                                 		// 0x0130 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPathingFailed : 1;                               		// 0x0130 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bWantsCrouchIdle : 1;                             		// 0x0130 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bWantsCrouchMove : 1;                             		// 0x0130 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bCanBeLimitedByDownedPlayers : 1;                 		// 0x0130 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWantsFullLOSTrace : 1;                           		// 0x0130 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	TArray< class UAttackLocation* >                   Limits;                                           		// 0x0134 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CrouchIdleChance;                                 		// 0x0140 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CrouchMoveChance;                                 		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CheckRate;                                        		// 0x0148 (0x0004) [0x0000000000000000]              
	unsigned char                                      Type;                                             		// 0x014C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      Validity;                                         		// 0x014D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     AttackLoc;                                        		// 0x0150 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FCombatZone                                 MyZone;                                           		// 0x015C (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              IdleTime;                                         		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5116 ];

		return pClassPointer;
	};

	bool ReachedAttackLoc ( );
	bool HalfExposed ( );
	float GetDotToTarget ( );
	bool TargetReachable ( );
	struct FVector GetNearestLocationToTarget ( unsigned long bCanBeExpensive );
	bool eventPathFind ( );
	bool WantsPathFind ( );
	void CheckExpiredZone ( );
	bool OnlyExpireMyZone ( );
	bool CanCheckExpiredZone ( );
	void CheckForNewZone ( );
	bool CanClaimZones ( );
	bool ValidLocation ( unsigned long bAllAreRequired, struct FVector* TestLoc );
	void CheckAttackLocation ( );
	void UnclaimMovement ( );
	void ClaimMovement ( );
	bool CanMove ( );
	void CheckStateTransition ( );
	struct FName GetDesiredState ( );
	bool TargetIsDownedPlayer ( );
	void eventUpdate ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
	void eventInit ( );
	void InitData ( );
};

UClass* UAction_GenericAttack::pClassPointer = NULL;

// Class WillowGame.Action_AnimAttack
// 0x0014 (0x0194 - 0x0180)
class UAction_AnimAttack : public UAction_GenericAttack
{
public:
	unsigned char                                      AimType;                                          		// 0x0180 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VisionAngle;                                      		// 0x0184 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      AttackAnim;                                       		// 0x0188 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Aim;                                              		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bTargetHeld : 1;                                  		// 0x0190 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTempHardAttach : 1;                              		// 0x0190 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5118 ];

		return pClassPointer;
	};

	bool IsAimed ( );
	void ReleaseTarget ( );
	void HoldTarget ( );
	void AttackFinished ( );
	bool OnlyExpireMyZone ( );
	bool CanCheckExpiredZone ( );
	struct FName GetDesiredState ( );
	void eventUpdate ( );
	void eventStop ( );
	void eventStart ( );
	void eventInit ( );
};

UClass* UAction_AnimAttack::pClassPointer = NULL;

// Class WillowGame.Action_BasicAttack
// 0x0054 (0x01E8 - 0x0194)
class UAction_BasicAttack : public UAction_AnimAttack
{
public:
	unsigned long                                      bMigrated : 1;                                    		// 0x0194 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bTargetMustBeInRange : 1;                         		// 0x0194 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bInterpToAimDirection : 1;                        		// 0x0194 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bAlwaysFaceTarget : 1;                            		// 0x0194 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	float                                              Angle;                                            		// 0x0198 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VerticalDistMax;                                  		// 0x019C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FAIRange                                    Range;                                            		// 0x01A0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RangeType;                                        		// 0x01A8 (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FCombatZoneSearchData                       ZoneSearch;                                       		// 0x01AC (0x0028) [0x0000000000000000]              
	class USpecialMoveDefinition*                      AttackSMD;                                        		// 0x01D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FAIRange                                    InnerRadius;                                      		// 0x01D8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FAIRange                                    OuterRadius;                                      		// 0x01E0 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5120 ];

		return pClassPointer;
	};

};

UClass* UAction_BasicAttack::pClassPointer = NULL;

// Class WillowGame.Action_LeapAtTarget
// 0x002C (0x0214 - 0x01E8)
class UAction_LeapAtTarget : public UAction_BasicAttack
{
public:
	struct FTrajectoryData                             Options;                                          		// 0x01E8 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMoveDefinition*                      LaunchAnimation;                                  		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      LandAnimation;                                    		// 0x020C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      InAirAttackIdleAnimation;                         		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5122 ];

		return pClassPointer;
	};

	void LandFinished ( );
	void PlayLand ( unsigned long bInterrupted );
	void PlayIdle ( unsigned long bInterrupted );
	void PlayLaunch ( );
	void eventActivateEvent ( struct FName EventName );
	bool TargetTooFar ( );
	struct FName eventCanRun ( );
};

UClass* UAction_LeapAtTarget::pClassPointer = NULL;

// Class WillowGame.Action_ShootTarget
// 0x0044 (0x01C4 - 0x0180)
class UAction_ShootTarget : public UAction_GenericAttack
{
public:
	float                                              ChanceToCrouch;                                   		// 0x0180 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ChanceToMoveCrouch;                               		// 0x0184 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bMigrated : 1;                                    		// 0x0188 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              Angle;                                            		// 0x018C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FAIRange                                    Range;                                            		// 0x0190 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RangeType;                                        		// 0x0198 (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FCombatZoneSearchData                       ZoneSearch;                                       		// 0x019C (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5124 ];

		return pClassPointer;
	};

};

UClass* UAction_ShootTarget::pClassPointer = NULL;

// Class WillowGame.Action_CoverAttack
// 0x003C (0x0164 - 0x0128)
class UAction_CoverAttack : public UWillowActionSequencePawn
{
public:
	TArray< class UAttackLocation* >                   Limits;                                           		// 0x0128 (0x000C) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              LineOfSightTime;                                  		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FCoverInfo                                  MyCover;                                          		// 0x0138 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FCombatZone                                 MyZone;                                           		// 0x0140 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              IdleTime;                                         		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5126 ];

		return pClassPointer;
	};

	bool eventPathFind ( );
	void CheckExpiredZone ( );
	void CheckForNewZone ( );
	void FindCover ( );
	bool ReachedCoverLoc ( );
	bool IsInCover ( );
	bool CoverValid ( );
	bool CheckCoverLocation ( struct FCoverInfo* Cover, struct FVector* CoverLoc, int* BestScore );
	bool IsValidCover ( struct FCoverInfo* Cover );
	void CreateCoverList ( struct FVector* TestLoc );
	struct FCoverInfo GetCoverPoint ( );
	struct FVector GetCoverLocation ( );
	void CheckStateTransition ( );
	void eventUpdate ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
	void eventInit ( );
	void InitData ( );
};

UClass* UAction_CoverAttack::pClassPointer = NULL;

// Class WillowGame.Action_CombatPoint
// 0x0034 (0x0198 - 0x0164)
class UAction_CombatPoint : public UAction_CoverAttack
{
public:
	unsigned long                                      bMigrated : 1;                                    		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FCombatPointSearchData                      Search;                                           		// 0x0168 (0x0030) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5128 ];

		return pClassPointer;
	};

};

UClass* UAction_CombatPoint::pClassPointer = NULL;

// Class WillowGame.Action_SwoopAttack
// 0x0054 (0x017C - 0x0128)
class UAction_SwoopAttack : public UWillowActionSequencePawn
{
public:
	float                                              SwoopFarDistance;                                 		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SwoopFarHeight;                                   		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SwoopCloseDistance;                               		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SwoopCloseHeight;                                 		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bShootTarget : 1;                                 		// 0x0138 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOffset : 1;                                   		// 0x0138 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFoundAttackOffset : 1;                           		// 0x0138 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCacheTargetLoc : 1;                              		// 0x0138 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              SwoopAttackDistance;                              		// 0x013C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FSwoopAttackData >                  SwoopAttackDistances;                             		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Offset;                                           		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OffsetDirection;                                  		// 0x0150 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Direction;                                        		// 0x0151 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     AttackOffset;                                     		// 0x0154 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClosestAttackDist;                                		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastAttackLocation;                               		// 0x0164 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CachedTargetLoc;                                  		// 0x0170 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5130 ];

		return pClassPointer;
	};

	float GetDistToGoal ( );
	struct FVector GetGoalLocation ( unsigned long bForce );
	void SetAllTriggered ( unsigned long bTriggered );
	float GetDistToTarget ( );
	bool eventPathFind ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
	void eventInit ( );
};

UClass* UAction_SwoopAttack::pClassPointer = NULL;

// Class WillowGame.WillowAIComponent
// 0x00D4 (0x01C0 - 0x00EC)
class UWillowAIComponent : public UAIComponent
{
public:
	class AWillowMind*                                 MyWillowMind;                                     		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APopulationOpportunityDen*                   MyDen;                                            		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowAIBlackboardComponent*                MyBlackboard;                                     		// 0x00F4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UIAIInterface*                               TargetLeader;                                     		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00FC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIAIInterface*                               FormationLeader;                                  		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0104 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< int >                                      InvalidCombatZones;                               		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      ClaimedCombatZones;                               		// 0x0114 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ZoneTime;                                         		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FCombatZone                                 LastZone;                                         		// 0x0124 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FCombatZone                                 CurrentZone;                                      		// 0x0144 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FCombatZone                                 ClaimedZone;                                      		// 0x0164 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AVolume*                                     CombatVolume;                                     		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;         		// 0x0188 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanUseCover : 1;                                 		// 0x0188 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FCoverInfo                                  DesiredCover;                                     		// 0x018C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHurtTime;                                     		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAttackedTime;                                 		// 0x0198 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastAttacker;                                     		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAIHoldData >                       HeadLookHolds;                                    		// 0x01A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAIHoldData >                       PhaseLockHolds;                                   		// 0x01AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastTickTime;                                     		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TickThrottleTime;                                 		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5132 ];

		return pClassPointer;
	};

	bool IsAIThrottled ( );
	bool IsAttackDebugEnabled ( );
	void ToggleAttackDebug ( );
	void DrawAttackDebug ( );
	class AWillowVehicle* ClaimNearbyVehicle ( );
	bool CanPhaseLock ( );
	void ReleasePhaseLock ( struct FName HoldName, class UObject* Tag );
	void HoldPhaseLock ( struct FName HoldName, class UObject* Tag );
	bool PhaseLockOnHold ( );
	void ReleaseHeadLook ( struct FName HoldName, class UObject* Tag );
	void HoldHeadLook ( struct FName HoldName, class UObject* Tag );
	bool HeadLookOnHold ( );
	bool OnHold ( );
	float GetTimeSinceAttacked ( );
	float GetTimeSinceHurt ( );
	void SetThreatLevel ( class AActor* Target, unsigned char NewThreat );
	unsigned char GetThreatLevel ( class AActor* Target );
	unsigned char GetHighestThreatLevel ( );
	struct FCoverExposureData GetCoverExposure ( struct FCoverInfo* Cover );
	void TryEnterCover ( );
	void TryExitCover ( );
	bool IsLocationValid ( unsigned long bZoneCheck, unsigned long bAllowPartial, struct FVector* TestLoc, TArray< class UAttackLocation* >* Limits );
	int GetLocationScore ( unsigned long bZoneCheck, struct FVector* TestLoc, TArray< class UAttackLocation* >* Limits );
	void InvalidateCombatZone ( int ZoneIndex );
	void MarkCurrentCombatZone ( );
	struct FCombatZone GetCombatZoneByLocation ( struct FVector* TestLoc );
	bool CombatZoneAvailable ( struct FCombatZone* Zone );
	void UnclaimCombatZone ( struct FCombatZone* Zone );
	void ClaimCombatZone ( struct FCombatZone* Zone );
	float DistToFormationLeader ( );
	class UWillowFormationComponent* GetFormation ( class UWillowFormationComponent* Current, struct FName Tag, class AWillowPawn* LeaderPawn );
	void SetFormationLeader ( class UIAIInterface* NewLeader, unsigned long bOverride );
	class UIAIInterface* GetFormationLeader ( );
	void SetTargetLeader ( class UIAIInterface* NewLeader, unsigned long bOverride );
	class UIAIInterface* GetTargetLeader ( );
	class AActor* GetForcedTarget ( );
	bool HasForcedTarget ( );
	void Release ( struct FName HoldName, class UObject* Tag );
	void Hold ( struct FName HoldName, class UObject* Tag );
	void TargetChanged ( class AActor* OldTarget, class AActor* NewTarget );
	void InitializeTargetRecord ( class UMindTargetInfo* TargetRec );
	void TargetRemoved ( class UMindTargetInfo* TargetRec );
	bool ValidCurrentTarget ( class UMindTargetInfo* TargetRec );
	bool ValidTarget ( class AActor* Target );
	void AddDenTargets ( class APopulationOpportunityDen* Den );
	void GetTargetsFromParents ( );
	void GetTargets ( );
	void NotifyAttackedBy ( class AActor* Attacker );
	void ClearState ( );
};

UClass* UWillowAIComponent::pClassPointer = NULL;

// Class WillowGame.WillowAIBlackboardComponent
// 0x0004 (0x01C4 - 0x01C0)
class UWillowAIBlackboardComponent : public UWillowAIComponent
{
public:
	class UPawnAllegiance*                             Allegiance;                                       		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5134 ];

		return pClassPointer;
	};

	class UPawnAllegiance* GetAllegiance ( );
	void GetTargets ( );
};

UClass* UWillowAIBlackboardComponent::pClassPointer = NULL;

// Class WillowGame.WillowAIDenComponent
// 0x0004 (0x01C4 - 0x01C0)
class UWillowAIDenComponent : public UWillowAIComponent
{
public:
	class UWillowAIDenComponent*                       ParentDenAI;                                      		// 0x01C0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5136 ];

		return pClassPointer;
	};

	bool ShouldRemoveTarget ( class UMindTargetInfo* TargetRec );
	void FindTargetsInDen ( class APopulationOpportunityDen* Den );
	void FindTargets ( );
};

UClass* UWillowAIDenComponent::pClassPointer = NULL;

// Class WillowGame.WillowAIDefinition
// 0x001C (0x007C - 0x0060)
class UWillowAIDefinition : public UAIDefinition
{
public:
	class UActionSequence*                             PatrolAction;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	class UActionSequence*                             ScriptedAction;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	class UExpressionEvaluator*                        WantsFormation;                                   		// 0x0068 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              ReacquireTime;                                    		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReacquireDistance;                                		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bGetTargetsFromParents : 1;                       		// 0x0074 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SuppressionFireTime;                              		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5138 ];

		return pClassPointer;
	};

	void OnRevivedPlayerMaster ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnDismount ( struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UWillowAIDefinition::pClassPointer = NULL;

// Class WillowGame.WillowAIDenDefinition
// 0x0008 (0x0068 - 0x0060)
class UWillowAIDenDefinition : public UAIDefinition
{
public:
	float                                              MinEngagementTime;                                		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinProvokedTime;                                  		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5140 ];

		return pClassPointer;
	};

};

UClass* UWillowAIDenDefinition::pClassPointer = NULL;

// Class WillowGame.WillowAIMoveNode
// 0x0011 (0x01D5 - 0x01C4)
class AWillowAIMoveNode : public AGearboxAIMoveNode
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;              		// 0x01C4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bPreviewJump : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowPath : 1;                                    		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFuzzyArrival : 1;                                		// 0x01C8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              PawnArrivalRadius;                                		// 0x01CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AISpeedPercentageHere;                            		// 0x01D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      VehicleNodeType;                                  		// 0x01D4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5142 ];

		return pClassPointer;
	};

	void eventNotifyPathChanged ( );
};

UClass* AWillowAIMoveNode::pClassPointer = NULL;

// Class WillowGame.Perch
// 0x007F (0x0254 - 0x01D5)
class APerch : public AWillowAIMoveNode
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                           		// 0x01D8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                		// 0x01DC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIBehaviorConsumer;                       		// 0x01E0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x01E4 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UPerchDefinition*                            PerchDef;                                         		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPerchPreviewComponent*                      PreviewComponent;                                 		// 0x01EC (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              UseRadius;                                        		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UseHeight;                                        		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverrideLoopTime : 1;                            		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLookForPlayersInRange : 1;                       		// 0x01F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FAIRange                                    LoopTimeOverride;                                 		// 0x01FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AVolume* >                           TargetVolumes;                                    		// 0x0204 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AWillowAIPawn*                               User;                                             		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CooldownTime;                                     		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextPlayerInRangeCheckTime;                       		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInstanceDataSet                            InstanceState;                                    		// 0x021C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                      		// 0x0228 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                   		// 0x0238 (0x0004) [0x0000000000000000]              
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                          		// 0x023C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                  		// 0x0240 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                          		// 0x024C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5144 ];

		return pClassPointer;
	};

	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle ( );
	void RegisterBehaviorConsumer ( );
	void ClearBodyCompositionInstance ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ApplyPreviewBodyComposition ( );
	void ChangeInstanceDataSwitch ( struct FName Switch, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	struct FAIRange GetLoopRange ( );
	void CheckStartReplication ( );
	void InitBody ( );
	void InitializeRBPhys ( );
	void PostBeginPlay ( );
	void SetPerchDef ( class UPerchDefinition* NewPerchDef );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* APerch::pClassPointer = NULL;

// Class WillowGame.SpecialMove_Cover
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Cover : public UWillowAnimDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5146 ];

		return pClassPointer;
	};

	class UAnimNodeSpecialMoveBlend* GetSMNode ( class USpecialMoveInterface* SMI );
};

UClass* USpecialMove_Cover::pClassPointer = NULL;

// Class WillowGame.WillowAwarenessZoneDefinition
// 0x0001 (0x006D - 0x006C)
class UWillowAwarenessZoneDefinition : public UAwarenessZoneDefinition
{
public:
	unsigned char                                      ThreatLevel;                                      		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5148 ];

		return pClassPointer;
	};

};

UClass* UWillowAwarenessZoneDefinition::pClassPointer = NULL;

// Class WillowGame.WillowBoundaryTurret
// 0x005C (0x01E4 - 0x0188)
class AWillowBoundaryTurret : public AActor
{
public:
	float                                              ShotTime;                                         		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SeekTime;                                         		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFiringModeDefinition*                       FiringModeDef;                                    		// 0x0190 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ViewWidth;                                        		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KillDistance;                                     		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarnDistance;                                     		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInstaKill : 1;                                   		// 0x01A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSocket1 : 1;                                  		// 0x01A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWarningEffectsOn : 1;                            		// 0x01A0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UAkEvent*                                    ShootAkEvent;                                     		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MuzzleSocket1;                                    		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MuzzleSocket2;                                    		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    PlayWarningSoundsAkEvent;                         		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StopWarningSoundsAkEvent;                         		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        BaseMesh;                                         		// 0x01C0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      TurretMesh;                                       		// 0x01C4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LaserEffects1;                                    		// 0x01C8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LaserEffects2;                                    		// 0x01CC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    WarningEffects;                                   		// 0x01D0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AWillowPawn*                                 CurrentTarget;                                    		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AWillowPlayerPawn* >                 PlayersInWarnZone;                                		// 0x01D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5150 ];

		return pClassPointer;
	};

	bool IsLethalLocation ( struct FVector TestLocation );
	void Shoot ( );
	void eventSetInitialState ( );
	void eventSetWarningEffects ( );
	void eventUnwarnPlayer ( class AWillowPlayerPawn* WPP );
	void eventWarnPlayer ( class AWillowPlayerPawn* WPP );
	void eventKillPlayer ( class AWillowPlayerPawn* WPP );
};

UClass* AWillowBoundaryTurret::pClassPointer = NULL;

// Class WillowGame.AIClassDefinition
// 0x0104 (0x0398 - 0x0294)
class UAIClassDefinition : public UWillowCharacterClassDefinition
{
public:
	class UAIDefinition*                               AIDef;                                            		// 0x0294 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     DefaultDisplayName;                               		// 0x0298 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UBMKilledByMessageString;                         		// 0x02A4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bWatchPlayerWhenUsed : 1;                         		// 0x02B0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bIsCrawler : 1;                                   		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsTurret : 1;                                    		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLeadTarget : 1;                                  		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAvoidObstacles : 1;                              		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAvoidTarget : 1;                                 		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      CheckForVehiclesBeforeUnCloaking : 1;             		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bApplySlowDown : 1;                               		// 0x02B0 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSimpleFlight : 1;                             		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bHeloStyle : 1;                                   		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bFlyOverrideNavSize : 1;                          		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bDropDefaultWeaponOnDeath : 1;                    		// 0x02B0 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBoss : 1;                                        		// 0x02B0 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsable : 1;                                      		// 0x02B0 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSecondaryUsable : 1;                             		// 0x02B0 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTriggerFootstepEvent : 1;                        		// 0x02B0 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFriendlyFireAlwaysFiresEvents : 1;               		// 0x02B0 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAwardKillsToAllPlayers : 1;                      		// 0x02B0 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRootOnlyYawRotation : 1;                         		// 0x02B0 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	float                                              WatchPlayerTime;                                  		// 0x02B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SightViewCone;                                    		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SightFireCone;                                    		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrawlerMeshLerpSpeed;                             		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MoveAtDestinationThreshold;                       		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    AkStartRotation;                                  		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    AkStopRotation;                                   		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationRate;                                     		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Physics;                                          		// 0x02DC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsableIcon;                                       		// 0x02DD (0x0001) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	float                                              AccelRate;                                        		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrawlerRotationModifier;                          		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CornerCutDistance;                                		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAheadDistance;                                		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookInterpRate;                                   		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlowDownDist;                                     		// 0x02F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SlowDownMinPct;                                   		// 0x02F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FlyMaxRotationModifier;                           		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyBlockedDistModifier;                           		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyLookAheadTime;                                 		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyNavMeshCheckDist;                              		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyStartSlowPct;                                  		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyStopSlowPct;                                   		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyExtentModifier;                                		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideNavSize;                                  		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideNavHeight;                                		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USkillDefinition* >                  PassiveSkills;                                    		// 0x0320 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UInventoryBalanceDefinition*                 DefaultWeapon;                                    		// 0x032C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPawnInteractionDefinition*                  InteractionDefinition;                            		// 0x0330 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CombatMusicTargetingThreat;                       		// 0x0334 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkState*                                    SpecialCombatMusicState;                          		// 0x0338 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SpecialCombatMusicPriority;                       		// 0x033C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInteractionIconDefinition*                  UsableIconDef;                                    		// 0x0340 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInteractionIconDefinition*                  UsableIconDefSecondary;                           		// 0x0344 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnUsedBehaviors;                                  		// 0x0348 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnUsedBehaviors_NoMission;                        		// 0x0354 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnDismissedBehaviors;                             		// 0x0360 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnLingeringBehaviors;                             		// 0x036C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	struct FAttributeInitializationData                TimeUntilConsideredLingering;                     		// 0x0378 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FocusRadius;                                      		// 0x0388 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     FocusOffset;                                      		// 0x038C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5152 ];

		return pClassPointer;
	};

	void OnAllPickupsDetached ( class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnPickupDetached ( class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnFootStep ( int Foot, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUnTouch ( unsigned char EventOutput, class UObject* Other, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTouch ( unsigned char EventOutput, class UObject* Other, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUncloak ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnCloak ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTakeHeal ( class UObject* Instigator, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnVehicleTakeDamage ( class UObject* Instigator, class UObject* HitVehicle, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnTakeDamage ( class UObject* Instigator, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnSpawned ( struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUserCouldNotAffordSecondary ( unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUserCouldNotAfford ( unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnSecondaryUsed ( unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
	void OnUsed ( unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle );
};

UClass* UAIClassDefinition::pClassPointer = NULL;

// Class WillowGame.WillowCombatPoint
// 0x0010 (0x0198 - 0x0188)
class AWillowCombatPoint : public AActor
{
public:
	unsigned char                                      ConstraintType;                                   		// 0x0188 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UPopulationSpawnedActorTagDefinition* > ConstraintTags;                                   		// 0x018C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5154 ];

		return pClassPointer;
	};

};

UClass* AWillowCombatPoint::pClassPointer = NULL;

// Class WillowGame.WillowCoverComponent
// 0x000B (0x0064 - 0x0059)
class UWillowCoverComponent : public UActorComponent
{
public:
	class AWillowAIPawn*                               AIPawn;                                           		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpecialMove_Cover*                          LastAction;                                       		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5156 ];

		return pClassPointer;
	};

	void IdleTimer ( );
	void FireTimer ( );
	float GetRange ( struct FAIRange* Range );
	bool eventCanFire ( );
	void ClearCover ( );
	void PlayTimedAction ( class USpecialMove_Cover* Action );
	void eventUpdateAction ( );
	struct FName GetAction ( );
	class UWillowCoverStanceDefinition* GetStance ( );
	struct FRotator GetCoverRotation ( struct FCoverInfo* Cover );
	struct FVector GetCoverLocation ( struct FCoverInfo* Cover );
	void ResetExposure ( );
	void ActionFinished ( );
};

UClass* UWillowCoverComponent::pClassPointer = NULL;

// Class WillowGame.WillowCoverStanceDefinition
// 0x0020 (0x005C - 0x003C)
class UWillowCoverStanceDefinition : public UGBXDefinition
{
public:
	struct FName                                       AimProfile;                                       		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMove_Cover*                          Enter;                                            		// 0x0044 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_Cover*                          Exit;                                             		// 0x0048 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_Cover*                          Idle;                                             		// 0x004C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_Cover*                          FireEnter;                                        		// 0x0050 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_Cover*                          FireExit;                                         		// 0x0054 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_Cover*                          FireIdle;                                         		// 0x0058 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5158 ];

		return pClassPointer;
	};

};

UClass* UWillowCoverStanceDefinition::pClassPointer = NULL;

// Class WillowGame.WillowFormationComponent
// 0x0014 (0x0224 - 0x0210)
class UWillowFormationComponent : public UPrimitiveComponent
{
public:
	struct FName                                       NameTag;                                          		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMagnetize : 1;                                   		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldCrouch : 1;                                		// 0x0218 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UIAIInterface*                               AIOwner;                                          		// 0x021C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0220 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5160 ];

		return pClassPointer;
	};

};

UClass* UWillowFormationComponent::pClassPointer = NULL;

// Class WillowGame.WillowMind
// 0x00C4 (0x082C - 0x0768)
class AWillowMind : public AGearboxMind
{
public:
	struct FPointer                                    VfTable_IISeeTargetable;                          		// 0x0768 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIControllerLocator;                      		// 0x076C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIConstructObject;                        		// 0x0770 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UAIClassDefinition*                          AIClass;                                          		// 0x0774 (0x0004) [0x0000000000000000]              
	class AWillowAIPawn*                               MyWillowPawn;                                     		// 0x0778 (0x0004) [0x0000000000000000]              
	class UAIDefinition*                               AIDefOverride;                                    		// 0x077C (0x0004) [0x0000000000000000]              
	unsigned long                                      bCharacterClassInitialized : 1;                   		// 0x0780 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantsToSprint : 1;                               		// 0x0780 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCurrentlyScripted : 1;                           		// 0x0780 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bScriptedHoldPosition : 1;                        		// 0x0780 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bScriptedCanAttack : 1;                           		// 0x0780 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWantsToFireWeapon : 1;                           		// 0x0780 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bWeaponsRestricted : 1;                           		// 0x0780 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWeaponFireUseRotation : 1;                       		// 0x0780 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bProvoked : 1;                                    		// 0x0780 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPawnAddedToRadar : 1;                            		// 0x0780 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bWantsRotationAudio : 1;                          		// 0x0780 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	class AWillowMind*                                 SpawnParent;                                      		// 0x0784 (0x0004) [0x0000000000000000]              
	TArray< class AWillowMind* >                       SpawnChildren;                                    		// 0x0788 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalSpawnedChildren;                             		// 0x0794 (0x0004) [0x0000000000000000]              
	struct FVector                                     DirectionHint;                                    		// 0x0798 (0x000C) [0x0000000000000000]              
	class UWillowNavigationHandle*                     WillowNav;                                        		// 0x07A4 (0x0004) [0x0000000000000000]              
	float                                              DistanceToGoal;                                   		// 0x07A8 (0x0004) [0x0000000000000000]              
	class AWillowAIMoveNode*                           LastPatrolNode;                                   		// 0x07AC (0x0004) [0x0000000000000000]              
	class AWillowAIMoveNode*                           LastScriptedNode;                                 		// 0x07B0 (0x0004) [0x0000000000000000]              
	unsigned char                                      ScriptedStance;                                   		// 0x07B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      ScriptedFocusStyle;                               		// 0x07B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      WeaponFireMode;                                   		// 0x07B6 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UWillowSeqAct_AIScriptedAnim*                ScriptedAction;                                   		// 0x07B8 (0x0004) [0x0000000000000000]              
	float                                              LastUsedTime;                                     		// 0x07BC (0x0004) [0x0000000000000000]              
	struct FFlag                                       LookAtPlayer;                                     		// 0x07C0 (0x0010) [0x0000000000000000]              
	class AActor*                                      FollowActor;                                      		// 0x07D0 (0x0004) [0x0000000000000000]              
	float                                              FollowMinDist;                                    		// 0x07D4 (0x0004) [0x0000000000000000]              
	float                                              FollowMaxDist;                                    		// 0x07D8 (0x0004) [0x0000000000000000]              
	class UWillowFormationComponent*                   FollowComponent;                                  		// 0x07DC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SightFireCone;                                    		// 0x07E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastWeaponFireTime;                               		// 0x07E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WeaponBurstEndTime;                               		// 0x07E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextAvailableFireTime;                            		// 0x07EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APerch*                                      PatrolPerch;                                      		// 0x07F0 (0x0004) [0x0000000000000000]              
	class APerch*                                      CombatPerch;                                      		// 0x07F4 (0x0004) [0x0000000000000000]              
	float                                              RotationRateModifier;                             		// 0x07F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RotationRateModifierBaseValue;                    		// 0x07FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                RotationRateModifierModifierStack;                		// 0x0800 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UAttributeModifier*                          AvoidanceModifier;                                		// 0x080C (0x0004) [0x0000000000000000]              
	struct FVector                                     ProvokedLocation;                                 		// 0x0810 (0x000C) [0x0000000000000000]              
	class APawnInteractionProxy*                       InteractionProxy;                                 		// 0x081C (0x0004) [0x0000000000000000]              
	class AActor*                                      SpawnedHelperActor;                               		// 0x0820 (0x0004) [0x0000000000000000]              
	float                                              SightViewCone;                                    		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinAggroTimeToConsiderAwareOfTarget;              		// 0x0828 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5162 ];

		return pClassPointer;
	};

	void eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall );
	void PassInteractionProxyEventsToKismet ( unsigned long bPassEventsToKismet );
	void ProcessTraceTouch ( class AActor* Other, class UComponent* ComponentHit, struct FVector TouchLocation, struct FVector TouchNormal, struct FVector End, struct FVector Start, struct FVector Extent, int TraceFlags );
	void eventTraceTouch ( class AActor* Other, class UComponent* ComponentHit, struct FVector TouchLocation, struct FVector TouchNormal, struct FVector End, struct FVector Start, struct FVector Extent, int TraceFlags, float TouchTime );
	bool IsTooFarFromHome ( );
	struct FVector GetViewLocation ( );
	class AActor* GetWorldBody ( );
	class AWillowMind* GetAWillowMind ( );
	class AWillowPlayerController* GetAWillowPlayerController ( );
	class AController* GetABaseController ( );
	void StopRotationAudio ( );
	void StartRotationAudio ( );
	void SetWantsRotationAudio ( unsigned long bWantsAudio );
	bool GetWantsRotationAudio ( );
	float ParentIsScripted ( );
	float GetNumSpawnChildren ( );
	float ParentDistToTarget ( );
	bool InGodMode ( );
	void SetAIDemigod ( unsigned long bAIDemigod );
	bool GetAIDemigod ( );
	void SetAIGod ( unsigned long bAIGod );
	bool GetAIGod ( );
	int ActivateEventRule ( struct FName RuleEventName );
	void SetOverrideAIDef ( class UAIDefinition* NewAIDef );
	void InitSequence ( class UActionSequence* NewSequence );
	class UAIDefinition* GetAIDefinition ( );
	class UIAIInterface* GetAIParent ( );
	bool CanTickAI ( );
	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	void KillHelperActor ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	class APawn* GetInstanceDataPawn ( );
	class AController* Behavior_GetSkillInstigatorController ( );
	void Behavior_UpgradeSkill ( class USkillDefinition* SkillToUpgrade, int NumberOfLevelsToRaise, int MaximumLevelToRaiseSkill );
	void Behavior_DeactivateSkill ( class USkillDefinition* SkillToDeactivate, unsigned long bIgnoreSkillInstigator );
	void Behavior_ActivateSkill ( class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade );
	void SetFlag ( class UFlagDefinition* FlagDef, unsigned long FlagValue );
	void NotifyTakeHit ( class AController* InstigatedBy, class APawn* HitPawn, struct FVector HitLocation, float Damage, class UClass* DamageType, struct FVector Momentum, class UDamagePipeline* Pipeline );
	struct FVector GetRallyPoint ( );
	class APopulationOpportunityDen* GetPopOpDen ( );
	struct FVector GetPerchLocation ( class APerch* TestPerch );
	void CheckForPerch ( unsigned long bCombat, unsigned long bClosestPerch );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void eventReceiveRunOverWarning ( class AWillowVehicle* Vehicle );
	struct FVector GetDirectionHint ( );
	void ExitVehicle ( class AWillowVehicle* ExitedVehicle );
	void EnterVehicle ( class AWillowVehicle* EnteredVehicle, unsigned long bDriver );
	bool TargetIsFriendly ( );
	bool AddTargetable ( class AActor* NewTarget, unsigned long bSeeTarget, unsigned long bHearThreat, unsigned long bSmellTarget );
	bool IsAwareOfTarget ( class AActor* PotentialTarget );
	void NotifyAttackedBy ( class AActor* Attacker, unsigned long bDamaged );
	void OnAICombatVolume ( class UWillowSeqAct_AICombatVolume* Action );
	void OnAILookAt ( class UWillowSeqAct_AILookAt* Action );
	void OnAIProvoke ( class UWillowSeqAct_AIProvoke* Action );
	void OnAIScriptedFollow ( class UWillowSeqAct_AIScriptedFollow* Action );
	void OnAIScriptedDeath ( class UWillowSeqAct_AIScriptedDeath* Action );
	void StopScriptedAnim ( class UWillowSeqAct_AIScriptedAnim* OverrideAction );
	void ScriptedAnimEnded ( );
	void OnAIScriptedAnim ( class UWillowSeqAct_AIScriptedAnim* Action );
	void OnAIScriptedHold ( class UWillowSeqAct_AIScriptedHold* Action );
	void OnAIScripted ( class UWillowSeqAct_AIScripted* Action );
	void ClearScriptedMove ( unsigned long bAborted, class UWillowSeqAct_AIScripted* OverrideAction );
	void OnAIAbortMoveToActor ( class USeqAct_AIAbortMoveToActor* Action );
	void ForceMoveToActor ( class AActor* destActor );
	bool IsFlying ( );
	bool WantsToSprint ( );
	void SetWantsToSprint ( unsigned long bInWantsToSprint );
	bool ShouldLookAtPlayer ( );
	bool IsInScriptedMovement ( );
	void InitNavigationHandle ( );
	bool CanHoldWeapon ( class APawn* Holder, class AWeapon* TestWeapon, unsigned long bHoldInOffHand );
	void SetWeaponsRestricted ( unsigned long bNewWeaponsRestrictedState );
	struct FVector GetTargetLeadOffset ( );
	bool ShouldPauseFiring ( );
	bool ShouldStopFiring ( );
	bool CanFireMyWeapon ( );
	void TickWeaponFire ( float DeltaTime );
	float eventGetWeaponBurstLength ( );
	float eventGetWeaponFireDelay ( );
	float eventGetWeaponSpeed ( );
	void eventStopFiringWeapon ( unsigned long bPaused );
	void eventStartFiringWeapon ( unsigned long bPaused );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector StartFireLoc );
	void RecalculateAttributeInitializedState ( );
	void ApplyCharacterClassDefaults ( class APawn* P, class UCharacterClassDefinition* CharClass );
	class UCharacterClassDefinition* GetClassDefinition ( );
	void CleanSpawnFamily ( class APawn* Killer );
	void PawnDied ( class APawn* P );
	void eventUnPossess ( );
	void InitializeCharacterClass ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void OnTeleport ( class USeqAct_Teleport* Action );
	class UPawnAllegiance* GetAllegiance ( );
	class APawn* GetWorldPawn ( );
	class AActor* GetActor ( );
	void eventDestroyed ( );
};

UClass* AWillowMind::pClassPointer = NULL;

// Class WillowGame.WillowMindAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UWillowMindAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5164 ];

		return pClassPointer;
	};

};

UClass* UWillowMindAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.WillowMindTargetInfo
// 0x0054 (0x012C - 0x00D8)
class UWillowMindTargetInfo : public UMindTargetInfo
{
public:
	class UITargetable*                                Targetable;                                       		// 0x00D8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00DC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              Distance2D;                                       		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              DotToTarget;                                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              DotFromTarget;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              DistanceVertical;                                 		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              WeaponDotToTarget;                                		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              LeftDotToTarget;                                  		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              DotTargetFacing;                                  		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned char                                      ThreatLevel;                                      		// 0x00FC (0x0001) [0x0000000000000000]              
	unsigned char                                      Exposure;                                         		// 0x00FD (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverExposure;                                    		// 0x00FE (0x0001) [0x0000000000000000]              
	float                                              ForgetTime;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              AggroTime;                                        		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              ExposureChangeTime;                               		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastKnownLocation;                                		// 0x010C (0x000C) [0x0000000000000000]              
	unsigned long                                      bTargetLost : 1;                                  		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LastAttackTime;                                   		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotalDamagePct;                                   		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIAIInterface*                               MovingAI;                                         		// 0x0124 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0128 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5166 ];

		return pClassPointer;
	};

	struct FVector GetTargetLocation ( );
};

UClass* UWillowMindTargetInfo::pClassPointer = NULL;

// Class WillowGame.WillowNavigationHandle
// 0x00C8 (0x0368 - 0x02A0)
class UWillowNavigationHandle : public UGearboxNavigationHandle
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bGoalActorIsFinalDest : 1;                        		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNavMeshWalking : 1;                              		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFlightBlocked : 1;                               		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bFlightFullyBlocked : 1;                          		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIsAvoidingObstacle : 1;                          		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bWasAvoidingObstacle : 1;                         		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	class AWillowMind*                                 MyWillowMind;                                     		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowAIPawn*                               MyWillowPawn;                                     		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowActionSequencePawn*                   ControllingAction;                                		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PathFindActionIndex;                              		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCombatZone                                 PathZone;                                         		// 0x02B4 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      FixMode;                                          		// 0x02D4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      FlightMode;                                       		// 0x02D5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              FixStartTime;                                     		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FBasedPosition                              FixPosition;                                      		// 0x02DC (0x0034) [0x0000000000002000]              ( CPF_Transient )
	float                                              FixWaitTime;                                      		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FixMoveTime;                                      		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FixLerpTime;                                      		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FixMaxDist;                                       		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FixFailedWaitTime;                                		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FlyHitIndex;                                      		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OriginalFlyDirection;                             		// 0x0328 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           FlyHits;                                          		// 0x0334 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FVector >                           FlyDirections;                                    		// 0x0340 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              FlightObstacleDistPct;                            		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FlyFixRate;                                       		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FlyFixLastCheckTime;                              		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FlyFixLocation;                                   		// 0x0358 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                MyNextExpensiveFrame;                             		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5168 ];

		return pClassPointer;
	};

	bool PassedCurrentFlyGoal ( );
	bool ReachedCurrentFlyGoal ( );
	void CheckFlying ( );
	void TickFlying ( float DeltaTime );
	void SetWantsToFly ( unsigned long bNewWantsToFly );
	bool WantsToFly ( );
	bool ShouldFly ( );
	bool IsFlying ( );
	void ProcessObstacleAvoidance ( );
	void NotifyAvoidingObstacle ( );
	bool CanAvoidObstacles ( );
	void FixByLerping ( );
	void FixByMoving ( );
	void FixAnchor ( );
	void ClearSpecialMovement ( );
	bool IsPaused ( );
	bool IsHardAttached ( );
	bool GoalReachable ( );
	bool PointReachable ( struct FVector Point, struct FVector OverrideStartPoint, unsigned long bAllowHitsInEndCollisionBox );
	bool TrySpecialMove ( struct FBasedPosition* MoveTarget );
	struct FVector GetMoveVector ( unsigned char MoveStyle );
	void SetFacingPolicy ( unsigned char MoveStyle );
	bool IsGoalValid ( );
	void MovePawnToGoal ( );
	void SetPawnPhysics ( );
	void FindActionPaths ( );
	bool ClearPath ( unsigned long bStopMovement, unsigned long bAllowDelayedClear );
	bool PathIsValid ( unsigned long bCheckAnchor, struct FPathFindData* Data );
	bool CanFollowPath ( );
	bool FollowPath ( struct FPathFindData* PathData );
	bool CreateConstrainedPath ( struct FVector DestLocation, struct FPathFindData* PathData, TArray< class UAttackLocation* >* Constraints );
};

UClass* UWillowNavigationHandle::pClassPointer = NULL;

// Class WillowGame.WillowClientNavigationHandle
// 0x0000 (0x0368 - 0x0368)
class UWillowClientNavigationHandle : public UWillowNavigationHandle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5170 ];

		return pClassPointer;
	};

};

UClass* UWillowClientNavigationHandle::pClassPointer = NULL;

// Class WillowGame.WillowNavMeshPathFinder
// 0x0000 (0x0048 - 0x0048)
class UWillowNavMeshPathFinder : public UGBXNavMeshPathFinder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5172 ];

		return pClassPointer;
	};

	bool FindConstrainedPath ( class UIAIInterface* AI, struct FGBXNavMeshPath* Path, struct FNavMeshPathParams* PathParams, struct FVector* SrcLocation, struct FGBXNavMeshPolyRef* SrcPoly, struct FVector* DestLocation, TArray< class UAttackLocation* >* Constraints );
};

UClass* UWillowNavMeshPathFinder::pClassPointer = NULL;

// Class WillowGame.WillowObstacleRenderComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowObstacleRenderComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5174 ];

		return pClassPointer;
	};

};

UClass* UWillowObstacleRenderComponent::pClassPointer = NULL;

// Class WillowGame.DeployableTurretActor
// 0x0028 (0x134C - 0x1324)
class ADeployableTurretActor : public AWillowAIPawn
{
public:
	unsigned long                                      bIsAttached : 1;                                  		// 0x1324 (0x0004) [0x0000000000000000] [0x00000001] 
	class UWillowImpactDefinition*                     BounceImpact;                                     		// 0x1328 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AtRestSpeedThreshold;                             		// 0x132C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FTurretEffect >                     TurretEffects;                                    		// 0x1330 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      TurretDamagePct;                                  		// 0x133C (0x0001) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FTurretDamageEffectData >           DamageEffectTriggers;                             		// 0x1340 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5176 ];

		return pClassPointer;
	};

	void PostSpawnCheckForPlayerOverlap ( );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void FindBase ( );
	void CheckTurretDamage ( );
	void TriggerTurretEffect ( struct FName EventTag );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	bool eventHandleHealthDepleted ( class AController* InstigatedBy, class UClass* DamageType, struct FVector HitLocation, class UIDamageCauser* DamageCauser, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void ShutOffTurretEffectsOnDeath ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ADeployableTurretActor::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_DenStat
// 0x0004 (0x00C8 - 0x00C4)
class UWillowSeqEvent_DenStat : public USequenceEvent
{
public:
	int                                                TriggerValue;                                     		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5178 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_DenStat::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_Provoked
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_Provoked : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5180 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_Provoked::pClassPointer = NULL;

// Class WillowGame.WillowTI_CalcCanFire
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcCanFire : public UTI_Calc
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5182 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_CalcCanFire::pClassPointer = NULL;

// Class WillowGame.WillowTI_CalcDistances
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcDistances : public UTI_Calc
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5184 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_CalcDistances::pClassPointer = NULL;

// Class WillowGame.WillowTI_CalcExposure
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcExposure : public UTI_Calc
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5186 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_CalcExposure::pClassPointer = NULL;

// Class WillowGame.WillowTI_CalcThreat
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcThreat : public UTI_Calc
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5188 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_CalcThreat::pClassPointer = NULL;

// Class WillowGame.WillowTI_PrioritizeAttacking
// 0x0008 (0x0058 - 0x0050)
class UWillowTI_PrioritizeAttacking : public UTI_Prioritize
{
public:
	float                                              DecayRate;                                        		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FullyEngagedPct;                                  		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5190 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_PrioritizeAttacking::pClassPointer = NULL;

// Class WillowGame.WillowTI_PrioritizeHealth
// 0x0001 (0x0051 - 0x0050)
class UWillowTI_PrioritizeHealth : public UTI_Prioritize
{
public:
	unsigned char                                      Priority;                                         		// 0x0050 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5192 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_PrioritizeHealth::pClassPointer = NULL;

// Class WillowGame.WillowTI_PrioritizeIdle
// 0x0004 (0x0054 - 0x0050)
class UWillowTI_PrioritizeIdle : public UTI_Prioritize
{
public:
	int                                                MaxAICurrentlyTargeting;                          		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5194 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_PrioritizeIdle::pClassPointer = NULL;

// Class WillowGame.WillowTI_PrioritizeOpinion
// 0x0001 (0x0051 - 0x0050)
class UWillowTI_PrioritizeOpinion : public UTI_Prioritize
{
public:
	unsigned char                                      Opinion;                                          		// 0x0050 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5196 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_PrioritizeOpinion::pClassPointer = NULL;

// Class WillowGame.AIDebugDummyBase
// 0x0020 (0x01EC - 0x01CC)
class AAIDebugDummyBase : public ASkeletalMeshActor
{
public:
	class USkeletalMeshComponent*                      MyMesh;                                           		// 0x01CC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   MatInstBody;                                      		// 0x01D0 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MatInstHead;                                      		// 0x01D4 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MatInstHelmet;                                    		// 0x01D8 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                DummyColor;                                       		// 0x01DC (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5198 ];

		return pClassPointer;
	};

	void eventSetSkeletalMesh ( class USkeletalMesh* NewMesh );
	void PostBeginPlay ( );
};

UClass* AAIDebugDummyBase::pClassPointer = NULL;

// Class WillowGame.WillowAIDebugCamera
// 0x0018 (0x00A4 - 0x008C)
class UWillowAIDebugCamera : public UAIDebugCamera
{
public:
	TArray< class AAIDebugDummyBase* >                 Dummies;                                          		// 0x008C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      AIDebugDummyClass;                                		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumDummies;                                       		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bShowAINodeReservation : 1;                       		// 0x00A0 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowTerritoryZones : 1;                          		// 0x00A0 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowWillowInspectorStats : 1;                    		// 0x00A0 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowAccuracyDebug : 1;                           		// 0x00A0 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5200 ];

		return pClassPointer;
	};

	void ToggleAccuracyDebug ( );
	void ToggleWillowInspectorStats ( );
	void ToggleTerritoryZones ( );
	void ToggleAIShowNodeReservation ( );
	void SetRuleEngine ( class URuleEngine* NewRuleEngine );
	void InitDummies ( int NewNumDummies );
	void SetPrevSnapshot ( );
	void SetNextSnapshot ( );
	void NotifyGameUnPaused ( );
	void NotifyGamePaused ( );
};

UClass* UWillowAIDebugCamera::pClassPointer = NULL;

// Class WillowGame.WillowNavDebug
// 0x0000 (0x0188 - 0x0188)
class AWillowNavDebug : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5202 ];

		return pClassPointer;
	};

};

UClass* AWillowNavDebug::pClassPointer = NULL;

// Class WillowGame.WillowPawnSnapshotRecord
// 0x00C4 (0x1090 - 0x0FCC)
class UWillowPawnSnapshotRecord : public UGearboxPawnSnapshotRecord
{
public:
	struct FName                                       MyWillowPawnName;                                 		// 0x0FCC (0x0008) [0x0000000000000000]              
	struct FName                                       MyWeaponName;                                     		// 0x0FD4 (0x0008) [0x0000000000000000]              
	struct FName                                       MyDrivenVehicleName;                              		// 0x0FDC (0x0008) [0x0000000000000000]              
	unsigned char                                      FacingPolicy;                                     		// 0x0FE4 (0x0001) [0x0000000000000000]              
	unsigned char                                      MyPhysics;                                        		// 0x0FE5 (0x0001) [0x0000000000000000]              
	unsigned char                                      MyRootMotionMode;                                 		// 0x0FE6 (0x0001) [0x0000000000000000]              
	TArray< struct FAwarenessInfo >                    TerritoryZones;                                   		// 0x0FE8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTargetPriorityInfo                         BestTargetData;                                   		// 0x0FF4 (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     BestTargetLocation;                               		// 0x1010 (0x000C) [0x0000000000000000]              
	struct FVector                                     Destination;                                      		// 0x101C (0x000C) [0x0000000000000000]              
	TArray< struct FMatrix >                           SpaceBases;                                       		// 0x1028 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ExperienceLevel;                                  		// 0x1034 (0x0004) [0x0000000000000000]              
	int                                                GameStage;                                        		// 0x1038 (0x0004) [0x0000000000000000]              
	int                                                AwesomeLevel;                                     		// 0x103C (0x0004) [0x0000000000000000]              
	float                                              CurHealth;                                        		// 0x1040 (0x0004) [0x0000000000000000]              
	float                                              CurShield;                                        		// 0x1044 (0x0004) [0x0000000000000000]              
	float                                              MaxShield;                                        		// 0x1048 (0x0004) [0x0000000000000000]              
	int                                                WeaponLevel;                                      		// 0x104C (0x0004) [0x0000000000000000]              
	int                                                WeaponDamage;                                     		// 0x1050 (0x0004) [0x0000000000000000]              
	struct FString                                     PathState;                                        		// 0x1054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PathFailTime;                                     		// 0x1060 (0x0004) [0x0000000000000000]              
	int                                                PathFailCount;                                    		// 0x1064 (0x0004) [0x0000000000000000]              
	struct FString                                     PathFailName;                                     		// 0x1068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           TargetVehiclePursuitPoints;                       		// 0x1074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TargetVehicleSelectedPursuitPointNdx;             		// 0x1080 (0x0004) [0x0000000000000000]              
	TArray< struct FDebugListItem >                    ExtraDebugItems;                                  		// 0x1084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5204 ];

		return pClassPointer;
	};

};

UClass* UWillowPawnSnapshotRecord::pClassPointer = NULL;

// Class WillowGame.WillowSnapshotRecord
// 0x0000 (0x0D00 - 0x0D00)
class UWillowSnapshotRecord : public USnapshotRecord
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5206 ];

		return pClassPointer;
	};

};

UClass* UWillowSnapshotRecord::pClassPointer = NULL;

// Class WillowGame.WillowPlayerSnapshotRecord
// 0x0008 (0x0D08 - 0x0D00)
class UWillowPlayerSnapshotRecord : public UWillowSnapshotRecord
{
public:
	struct FName                                       MyWillowPawnName;                                 		// 0x0D00 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5208 ];

		return pClassPointer;
	};

};

UClass* UWillowPlayerSnapshotRecord::pClassPointer = NULL;

// Class WillowGame.HUDDefinition
// 0x0094 (0x00D0 - 0x003C)
class UHUDDefinition : public UGBXDefinition
{
public:
	int                                                MaxDamageIndicators;                              		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DamageIndicatorLifetime;                          		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ItemCardAwarenessRange;                           		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupRange;                                      		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CompassIconScaleMax;                              		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CompassIconScaleMin;                              		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CompassIconScaleMaxRange;                         		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CompassIconScaleMinRange;                         		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributePresentationDefinition*            CustomAttributePresentation;                      		// 0x005C (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MaximumPainRotation;                              		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumPainOffset;                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumPainFOV;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaximumDamage;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PainLength;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWillowLevelTimerDefinition*                 LevelTimerDefinition;                             		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         HUDMovieDefinition;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         StatusMenuDefinition;                             		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                QUICKSLOT_SELECTED;                               		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                QUICKSLOT_LOCKED;                                 		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                QUICKSLOT_AVAILABLE;                              		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             P1QuickSlotTextures;                              		// 0x008C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             P2QuickSlotTextures;                              		// 0x0098 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                QUICKSLOT_TEX_WIDTH;                              		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                QUICKSLOT_TEX_HEIGHT;                             		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       P1ItemCardTexture;                                		// 0x00AC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       P2ItemCardTexture;                                		// 0x00B4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       PlayerNameBone;                                   		// 0x00BC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayerNameHeightOffset;                           		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HealthAnimationTime;                              		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    AutosaveAkEvent;                                  		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5210 ];

		return pClassPointer;
	};

};

UClass* UHUDDefinition::pClassPointer = NULL;

// Class WillowGame.WillowRadarManager
// 0x0448 (0x05D0 - 0x0188)
class AWillowRadarManager : public AActor
{
public:
	float                                              DefaultIconLifeTime[ 0x11 ];                      		// 0x0188 (0x0044) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	int                                                NumberOfDynamicIcons;                             		// 0x01CC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FServerDynamicRadarIconData                 ServerDynamicIcons[ 0x12 ];                       		// 0x01D0 (0x00D8) [0x0000000000000000]              
	class AActor*                                      SkillStations[ 0x1C ];                            		// 0x02A8 (0x0070) [0x0000000000000000]              
	struct FRemoteDynamicRadarIconData                 RemoteDynamicIcons[ 0x12 ];                       		// 0x0318 (0x0168) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     SkillStationLocations[ 0x1C ];                    		// 0x0480 (0x0150) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5212 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void RemoveSkillStation ( class AActor* TheStation );
	void AddSkillStation ( class AActor* TheStation );
	void RemoveDynamicIcon ( class UObject* Source );
	void AddDynamicIcon ( unsigned char IconType, class UObject* Source, float Duration );
};

UClass* AWillowRadarManager::pClassPointer = NULL;

// Class WillowGame.WillowSeqCond_SwitchByPlatform
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_SwitchByPlatform : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5214 ];

		return pClassPointer;
	};

	unsigned char eventGetPlatform ( );
};

UClass* UWillowSeqCond_SwitchByPlatform::pClassPointer = NULL;

// Class WillowGame.WillowUIDataStore_StringAliasMap
// 0x0004 (0x00D4 - 0x00D0)
class UWillowUIDataStore_StringAliasMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                     		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5216 ];

		return pClassPointer;
	};

	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
};

UClass* UWillowUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class WillowGame.PlayerStatsNotifier
// 0x003C (0x0078 - 0x003C)
class UPlayerStatsNotifier : public UObject
{
public:
	struct FMultiMap_Mirror                            StatIdListenerMap;                                		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5218 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* H, float* out_YL, float* out_YPos );
	void OnStatIncrement ( class AWillowPlayerStats* StatContext, struct FName StatId, int Amount );
	void UnRegisterListeners ( class AWillowPlayerController* PCOwner );
	void UnRegisterListener ( struct FTrainingData* Listener );
	void RegisterListener ( struct FTrainingData* Listener );
};

UClass* UPlayerStatsNotifier::pClassPointer = NULL;

// Class WillowGame.WillowBaseStats
// 0x006C (0x01F4 - 0x0188)
class AWillowBaseStats : public AInfo
{
public:
	struct FPointer                                    VfTable_ISparkUpdateCallback;                     		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                SaveVersion;                                      		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                ReadVersion;                                      		// 0x0190 (0x0004) [0x0000000000000000]              
	TArray< struct FWillowStatProperty >               StatProperties;                                   		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01A0 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowBaseStats.StatIDToStatArrayMapping
	unsigned long                                      bStatPostingInFlight : 1;                         		// 0x01DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bStatPostingIncomplete : 1;                       		// 0x01DC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UStatChannel*                                ReplicationChannel;                               		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DebugDisplayFilter;                               		// 0x01E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentDebugPage;                                 		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5220 ];

		return pClassPointer;
	};

	void ClearSparkCallbacks ( );
	void DirtyAllStats ( );
	void ReportDirtyStats ( );
	void AllDirtyStats ( int* StatIdx );
	void UpdateChallengeBaseValues ( );
	void TryAndSpawnReplicationChannel ( class UNetConnection* Connection );
	struct FString StatPropertyToStringFromName ( struct FName StatName );
	struct FString StatPropertyToString ( int StatIdx );
	void SetFloatStat ( struct FName StatId, float Value );
	void SetIntStat ( struct FName StatId, int Value, unsigned long bSkipNotify );
	float GetFloatStat ( struct FName StatId, unsigned long bForChallenges );
	int GetIntStat ( struct FName StatId, unsigned long bForChallenges );
	void IncrementFloatStat ( struct FName StatId, float IncAmount );
	void IncrementIntStat ( struct FName StatId, int IncAmount );
	void PreviousDebugPage ( );
	void NextDebugPage ( );
};

UClass* AWillowBaseStats::pClassPointer = NULL;

// Class WillowGame.WillowPlayerStats
// 0x0004 (0x01F8 - 0x01F4)
class AWillowPlayerStats : public AWillowBaseStats
{
public:
	int                                                nNumConsecutiveSniperRifleKills;                  		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5222 ];

		return pClassPointer;
	};

	void IncrementPlayerLauncherDirectHitStat ( class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* DamagePipeline, class APawn* DamagedPawn );
	void IncrementPlayerKnockedDownProjectileStat ( class UClass* DamageType, class UIDamageCauser* DamageCauser );
	void IncrementPlayerTedioreReloadDamageStat ( class UIDamageCauser* DamageCauser, float Amount );
	void IncrementPlayerSecondWindStat ( class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UIDamageCauser* DamageCauser );
	void IncrementPlayerCriticalHitStat ( class UClass* DamageType, class UIDamageCauser* DamageCauser );
	void UpdatePlayerShotStats ( class UClass* DamageType, class UIDamageCauser* DamageCauser, unsigned long bMiss, unsigned long bKill );
	void ResetPlayerShotStats ( );
	void IncrementPlayerKillStat ( class UCharacterClassDefinition* CharacterClass, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UIDamageCauser* DamageCauser, unsigned long bCritical, unsigned long bCrouched, float ZoomedTime, float KillDistance, class UDamagePipeline* DamagePipeline, class APawn* KilledPawn, int IncAmount );
	void IncrementWeaponFiredStat ( class AWillowWeapon* WWeapon, int IncAmount );
	void SetIntStat ( struct FName StatId, int Value, unsigned long bSkipNotify );
	void IncrementIntStat ( struct FName StatId, int IncAmount );
};

UClass* AWillowPlayerStats::pClassPointer = NULL;

// Class WillowGame.WillowVersusDuelArena
// 0x0084 (0x020C - 0x0188)
class AWillowVersusDuelArena : public AActor
{
public:
	class AWillowVersusDuelInfo*                       DuelInfo;                                         		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                ArenaIndex;                                       		// 0x018C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowPlayerPawn*                           Challenger;                                       		// 0x0190 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowPlayerPawn*                           Competitor;                                       		// 0x0194 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UWillowVersusDuelGlobals*                    DuelGlobals;                                      		// 0x0198 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent*                        ArenaMeshComponent;                               		// 0x019C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   ArenaMaterialInstance;                            		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              ArenaStatus;                                      		// 0x01A4 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                CurrentChallengerTeamColorPrimary;                		// 0x01A8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentChallengerTeamColorSecondary;              		// 0x01B8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentChallengerTeamColorTertiary;               		// 0x01C8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentCompetitorTeamColorPrimary;                		// 0x01D8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentCompetitorTeamColorSecondary;              		// 0x01E8 (0x0010) [0x0000000000000000]              
	struct FLinearColor                                CurrentCompetitorTeamColorTertiary;               		// 0x01F8 (0x0010) [0x0000000000000000]              
	unsigned long                                      bChallengerOOB : 1;                               		// 0x0208 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCompetitorOOB : 1;                               		// 0x0208 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5224 ];

		return pClassPointer;
	};

	void eventDestroyDuelArena ( );
	void OnDuelEnd ( );
	void eventCreateDuelArena ( );
	void InitializeDuelArena ( class AWillowVersusDuelInfo* NewDuelInfo, int NewArenaIndex, class AWillowPlayerPawn* NewChallenger, class AWillowPlayerPawn* NewCompetitor );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* AWillowVersusDuelArena::pClassPointer = NULL;

// Class WillowGame.WillowVersusDuelGlobals
// 0x0078 (0x00B4 - 0x003C)
class UWillowVersusDuelGlobals : public UGBXDefinition
{
public:
	int                                                ArenaMaterialIndex;                               		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ArenaMaterialParamName;                           		// 0x0040 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UStaticMesh*                                 ArenaMesh;                                        		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ArenaMeshRadiusActual;                            		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ArenaMeshRadiusDesired;                           		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ArenaSetupTime;                                   		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ArenaTakeDownTime;                                		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnChallengeIssued;                                		// 0x005C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnDuelStarted;                                    		// 0x0068 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnLeftDuelArena;                                  		// 0x0074 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnDuelWinLoss;                                    		// 0x0080 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnDuelDraw;                                       		// 0x008C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	float                                              DuelArenaTimeout;                                 		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DuelChallengeCoolDown;                            		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DuelChallengeTimeout;                             		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DuelLength;                                       		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FDuelTeamPair >                     DuelTeams;                                        		// 0x00A8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5226 ];

		return pClassPointer;
	};

};

UClass* UWillowVersusDuelGlobals::pClassPointer = NULL;

// Class WillowGame.WillowVersusDuelInfo
// 0x005C (0x01E4 - 0x0188)
class AWillowVersusDuelInfo : public AReplicationInfo
{
public:
	class UWillowVersusDuelGlobals*                    DuelGlobals;                                      		// 0x0188 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTimedOut : 1;                                    		// 0x018C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuelEnded : 1;                                   		// 0x018C (0x0004) [0x0000000000000000] [0x00000002] 
	class AWillowPlayerPawn*                           Challenger;                                       		// 0x0190 (0x0004) [0x0000000000000000]              
	class AWillowPlayerPawn*                           Competitor;                                       		// 0x0194 (0x0004) [0x0000000000000000]              
	class AWillowPlayerPawn*                           Winner;                                           		// 0x0198 (0x0004) [0x0000000000000000]              
	class AWillowPlayerPawn*                           Loser;                                            		// 0x019C (0x0004) [0x0000000000000000]              
	class AWillowPlayerReplicationInfo*                ChallengerPRI;                                    		// 0x01A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWillowPlayerReplicationInfo*                CompetitorPRI;                                    		// 0x01A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ActiveDuelIndex;                                  		// 0x01A8 (0x0004) [0x0000000000000000]              
	class AWillowVersusDuelArena*                      DuelArena;                                        		// 0x01AC (0x0004) [0x0000000000000000]              
	struct FTempProfileStruct                          TemporaryChallengerProfile;                       		// 0x01B0 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTempProfileStruct                          TemporaryCompetitorProfile;                       		// 0x01C8 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AWillowTradeManager*                         TradeManager;                                     		// 0x01E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5228 ];

		return pClassPointer;
	};

	void ProcessLeviathanDuelStartedEvent ( );
	void ClearCombatantStateForDuel ( );
	void InitializeValuesOnCombatants ( );
	void RemoveFromActiveDuels ( );
	void ReviveLoser ( );
	void RestoreTemporaryProfile ( class AWillowPlayerPawn* Combatant, struct FTempProfileStruct TempProfile );
	void RestoreTemporaryProfilesForCombatants ( );
	void OnDuelArenaDestroyed ( );
	class AWillowPlayerPawn* GetLoser ( );
	class AWillowPlayerPawn* GetWinner ( );
	void OnDuelEnd ( );
	void UpdatePlayerStat ( class AWillowPlayerPawn* Combatant, struct FName Stat );
	void NotifyDuelResult ( );
	void SetWinnerAndLoser ( class AWillowPlayerPawn* NewWinner, class AWillowPlayerPawn* NewLoser );
	void EndDuel ( class AWillowPlayerPawn* NewWinner, class AWillowPlayerPawn* NewLoser, unsigned long bCausedByGoingOutOfBounds );
	void OnCompetitorOutOfBounds ( );
	void eventOnCompetitorLeftDuelArena ( );
	void eventOnCompetitorEnteredDuelArena ( );
	void OnChallengerOutOfBounds ( );
	void eventOnChallengerLeftDuelArena ( );
	void eventOnChallengerEnteredDuelArena ( );
	void OnDuelLengthElapsed ( );
	bool CombatantsAreDueling ( );
	void StartDuelTimer ( );
	void SetAllegianceForCombatants ( );
	void OnDuelArenaCreated ( );
	struct FTempProfileStruct SaveTemporaryProfile ( class AWillowPlayerPawn* Combatant );
	void SaveTemporaryProfilesForCombatants ( );
	void ClearPotentialDuelsForCombatants ( );
	struct FVector GetDuelArenaLocation ( );
	void CreateDuelArena ( );
	void ClearDuelTimers ( );
	void RegisterDuelAsActive ( );
	void StartDuel ( );
	void SetCompetitor ( class AWillowPlayerPawn* NewCompetitor );
	class AWillowPlayerReplicationInfo* GetCompetitorPRI ( );
	class AWillowPlayerPawn* GetCompetitor ( );
	void SetChallenger ( class AWillowPlayerPawn* NewChallenger );
	class AWillowPlayerReplicationInfo* GetChallengerPRI ( );
	class AWillowPlayerPawn* GetChallenger ( );
	void RemoveFromPotentialDuels ( );
	bool CoolDownActive ( );
	void OnChallengeCoolDown ( );
	bool TimedOut ( );
	void OnChallengeTimeout ( );
	void InitializeDuel ( );
	void PostBeginPlay ( );
};

UClass* AWillowVersusDuelInfo::pClassPointer = NULL;

// Class WillowGame.BaseInventoryPanelGFxObject
// 0x0034 (0x00AC - 0x0078)
class UBaseInventoryPanelGFxObject : public UGFxObject
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanRolloverEmptyCells : 1;                       		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FASValue >                          HandleRollOverArgs;                               		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        CellObjects;                                      		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        EmptyWidgetObjects;                               		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBaseTopLevelPanelGFxObject*                 ParentPanel;                                      		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UWillowInventoryGFxMovie*                    OwningMovie;                                      		// 0x00A4 (0x0004) [0x0000000000000000]              
	class UWillowInventoryGFxDefinition*               OwningMovieDef;                                   		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5230 ];

		return pClassPointer;
	};

	void handleRollOver ( );
	void handleRollOver_Generic ( int Index );
	void RedirectRollOver ( class UGFxObject* Cell, int Index, struct FString OriginalFunctionName );
	void FlourishActiveCell ( );
	void OnStartDrag ( class UGFxObject* StartingCell, class UGFxObject* OutDragData );
	class UGFxObject* extStartDrag ( class UGFxObject* StartingCell );
	void OnSettingPanelForTransferring ( unsigned long bFocused, unsigned long bEquipping );
	void extOnSetActive ( unsigned long _bActive );
	void SetActive ( unsigned long _bActive );
	void InspectItem ( class AWillowInventory* Thing );
	class AWillowInventory* GetSelectedThing ( );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool Init ( class UBaseTopLevelPanelGFxObject* InParentPanel, struct FName InPanelName );
};

UClass* UBaseInventoryPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.BadassPanelGFxObject
// 0x00D0 (0x017C - 0x00AC)
class UBadassPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	struct FString                                     BA_RankString;                                    		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BA_TokensString;                                  		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BA_RedeemTokenButtonString;                       		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              TokenUpPct;                                       		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PossibleRewardIndices[ 0x5 ];                     		// 0x00D4 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	class UGFxClikWidget*                              RedeemButton;                                     		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxClikWidget*                              Selections[ 0x5 ];                                		// 0x00EC (0x0014) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     TooltipsText_Cancel;                              		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Close;                               		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Redeem;                              		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Reward;                              		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BonusStatsHeader;                                 		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BonusStatsDisabledHeader;                         		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RewardChoiceHeader;                               		// 0x0148 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RewardString;                                     		// 0x0154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_ActivateBonusStats;                  		// 0x0160 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_DeactivateBonusStats;                		// 0x016C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bBrowsingRewards : 1;                             		// 0x0178 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5232 ];

		return pClassPointer;
	};

	void UpdateTrainingBox ( );
	void OnRewardFocused ( struct FEventData Data );
	void OnRedeemTokensFocused ( struct FEventData Data );
	void UpdateRedeemTokensFocusedTooltips ( );
	void ToggleBadassSkill ( );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool BlockInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool DeferInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	void UpdateCounters ( );
	void UpdateBars ( );
	void Tick ( float DeltaTime );
	void SetBonusStatsText ( );
	void OnRewardSelected ( int RewardNumber );
	void OnReward5Selected ( struct FEventData Data );
	void OnReward4Selected ( struct FEventData Data );
	void OnReward3Selected ( struct FEventData Data );
	void OnReward2Selected ( struct FEventData Data );
	void OnReward1Selected ( struct FEventData Data );
	void OnRedeemTokensClicked ( struct FEventData Data );
	void UpdatePercents ( );
	void HideCurrencies ( );
	void UpdateCurrencies ( );
	void SetUpBadassPanel ( );
	void SetInitialButtonStates ( );
	void extOnSetActive ( unsigned long _bActive );
	void OnSetInactive ( );
	bool Init ( class UBaseTopLevelPanelGFxObject* InParentPanel, struct FName InPanelName );
};

UClass* UBadassPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.ChallengesPanelGFxObject
// 0x007C (0x0128 - 0x00AC)
class UChallengesPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	class UGFxTextListContainer*                       ChallengeLogTextList;                             		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStatusMenuGFxDefinition*                    StatusMenuDef;                                    		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     MyWPC;                                            		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     TooltipsText_Cancel;                              		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Track;                               		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Untrack;                             		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Reset;                               		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnspecifiedCategoryHeader;                        		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TrackedCategoryHeader;                            		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ChallengeCategories;                              		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      CurrentSortMode;                                  		// 0x010C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ChallengeSortTooltip;                             		// 0x0110 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChallengeRewardHeader;                            		// 0x011C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5234 ];

		return pClassPointer;
	};

	void UpdatePrestigeIndicator ( );
	struct FString GetSortString ( );
	void SortModeChanged ( );
	void UpdateTooltips ( );
	void RefreshChallengesOnReset ( );
	void SetListHeader ( struct FString Header );
	void SetChallengeDescription ( struct FString ChallengeName, struct FString ChallengeDescription, struct FString ChallengeLevels, struct FString RewardHeader, struct FString Reward );
	void UpdateChallengeDescription ( );
	void UpdateListOfChallenges ( );
	void extOnSetActive ( unsigned long _bActive );
	void ScrollLog ( unsigned char MoveDir );
	void Tick ( float DeltaTime );
	void TrackHighlightedObject ( );
	void ChangeSort ( );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool BlockInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool DeferInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	void Deinit ( );
	bool Init ( class UBaseTopLevelPanelGFxObject* InParentPanel, struct FName InPanelName );
	void SetLastSortMode ( unsigned char SortMode );
	unsigned char GetLastSortMode ( );
	void SetLastHighlightedEntry ( int EntryIdx );
	int GetLastHighlightedEntry ( );
	void UpdateChallengeTextList ( );
};

UClass* UChallengesPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.InventoryListPanelGFxObject
// 0x005C (0x0108 - 0x00AC)
class UInventoryListPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	class UInventoryDataProviderGFxObject*             DataProvider;                                     		// 0x00AC (0x0004) [0x0000000000000000]              
	class UMultitypeScrollingListGFxObject*            InventoryList;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                CurrentSelectedIndex;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                CachedSelectedIndex;                              		// 0x00B8 (0x0004) [0x0000000000000000]              
	TArray< struct FCellContentData >                  InventoryCellsData;                               		// 0x00BC (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UGearboxRenderTextureManager*                RTM;                                              		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FName                                       PanelName;                                        		// 0x00CC (0x0008) [0x0000000000000000]              
	struct FSortFilterConfiguration                    CurrentSortFilterConfig;                          		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PanelTitle;                                       		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bCellUnselected : 1;                              		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanChangeSort : 1;                               		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowSoldOutIfEmpty : 1;                          		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTrashFavoritesEnabled : 1;                       		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSkipSetRenderInfo : 1;                           		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              OriginalTrashFavXPosition;                        		// 0x00F4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Container;                                        		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnListSort__Delegate;                           		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5236 ];

		return pClassPointer;
	};

	void SetCanDrag ( unsigned long bCanDrag );
	void eventSetEmptyPanelWidget ( unsigned long bVisible, unsigned long bSoldOutTextVisible );
	void SetPanelHighlight ( unsigned long bVisible );
	void OnStartDrag ( class UGFxObject* StartingCell, class UGFxObject* OutDragData );
	void RestoreState ( );
	void SaveState ( );
	void ClearCell ( int ItemIdx );
	void FreeCellData ( );
	class UGFxObject* GetCellObject ( int DesiredCellIndex );
	void CycleSelectedThingAsTrashOrFavorite ( );
	void extOnTrashFavChanged ( int RendererIndex, int Mark, unsigned long bEnabled );
	void SetTrashFavoritesEnabled ( unsigned long bEnabled );
	void SetCellTrashFavoritesEnabled ( class UGFxObject* Cell, unsigned long bEnabled );
	void extOnNewBackpackRenderer ( int RendererIndex, struct FString TextureLinkage );
	void SetRendererInfo ( int DataIndex, int RendererType, int RendererIndex );
	void extOnCellUnselected ( int Index );
	void extOnBackpackItemSelected ( int SelectedIndex, unsigned long bSelected );
	void extOnCellPressed ( int PressedIndex );
	void FixupSelectedIndex ( );
	bool IsCurrentCellValid ( );
	class AWillowInventory* GetThingByIndex ( int Index );
	class AWillowInventory* GetSelectedThing ( );
	void UpdateList ( TArray< class AWillowInventory* >* NewListThings );
	int MoveDelta ( int Delta, int StartIndex, int OriginalIndex );
	void Move ( int Delta );
	void SetSelectedIndexByThing ( class AWillowInventory* ThingToBeSelected );
	void extOnSetActive ( unsigned long _bActive );
	void extOnPanelRollOver ( int ControllerId );
	void extOnStoragePanelPressed ( int ControllerId );
	void SetPanelTitleStorage ( );
	void SetPanelTitle ( struct FString NewTitle );
	void SetSortLabel ( struct FSortFilterConfiguration* SortFilterCategorizeData );
	void extOnChangeSort ( int Delta );
	void ApplySortConfiguration ( struct FSortFilterConfiguration* SortFilterCategorizeData );
	void SetList ( int UnloadableCount, TArray< class AWillowInventory* >* InventoryThings, struct FSortFilterConfiguration* SortFilterCategorizeData );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void __SetHeaderIconClip ( struct FString MoviePath );
	void SetHeaderIconClip ( class USwfMovie* MovieClip );
	void __SetBackgroundTint ( int BackgroundTint, float BackgroundTintAlpha );
	void SetBackgroundTint ( struct FColor BackgroundTint );
	void __SetBackground ( struct FString Background );
	void SetBackground ( unsigned char Background );
	bool Init ( class UBaseTopLevelPanelGFxObject* InParentPanel, struct FName InPanelName );
	void OnListSort ( );
	unsigned char GetInventoryType ( class AWillowInventory* WInv );
	void InitializePlayerClasses ( );
};

UClass* UInventoryListPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.StatusMenuEquippedPanelGFxObject
// 0x003C (0x00E8 - 0x00AC)
class UStatusMenuEquippedPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	TArray< int >                                      RainbowCell;                                      		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CachedCellInfo;                                   		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedCellSuffix;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                PreferredDownCellSuffix;                          		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                EquippedTypeCellSuffix;                           		// 0x00CC (0x0004) [0x0000000000000000]              
	class UStatusMenuGFxDefinition*                    StatusDef;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bReadyWeaponLeftUnlocked : 1;                     		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReadyWeaponRightUnlocked : 1;                    		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000002] 
	class UGFxObject*                                  CachedCurrentlySelectedCell;                      		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __MoveFunction__Delegate;                         		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5238 ];

		return pClassPointer;
	};

	void ShowDualWieldInventoryGuides ( unsigned long bShow, int SlotsUnlocked );
	void CleanUpAfterCancelledDrag ( );
	void PrepareForFinishDrag ( int CellSuffix );
	bool CanFinishDragOnCell ( int CellSuffix );
	void OnStartDrag ( class UGFxObject* StartingCell, class UGFxObject* OutDragData );
	void SetCellMarkForIndex ( int Index, int Mark );
	void SetCellMarkForThing ( class AWillowInventory* Thing );
	void __SetCellMarks ( int Mark1, int Mark2, int Mark3, int Mark4, int Mark5, int Mark6, int Mark7, int Mark8 );
	void __SetCellInfo ( int ReadyWeaponUpInfo, int RWD, int RWL, int RWR, int ShieldInfo, int GrenadeModInfo, int ClassModInfo, int ArtifactInfo );
	void extOnTrashFavChanged ( int Index, int Mark, unsigned long bEnabled );
	int GetMarkFromInventory ( class AWillowInventory* WInv );
	void SetCellInfo ( );
	unsigned char GetSelectedCellInventoryType ( );
	int GetSuffixFromQuickSlot ( unsigned char Slot );
	unsigned char GetWeaponSlotFromSuffix ( int Suffix );
	unsigned char GetWeaponSlotFromThing ( class AWillowInventory* Thing );
	unsigned char GetHighlightedWeaponSlot ( );
	int GetTypeCellSuffixBasedOnPosition ( );
	int GetTypeCellSuffixBasedOnThing ( class AWillowInventory* EquippingThing );
	bool IsAWeaponSuffix ( int Suffix );
	void StopEquip ( );
	void SelectTypeCellBasedOnThing ( int TypeCellSuffix );
	void StartEquip ( class AWillowInventory* EquippingThing, unsigned long bShouldSelectTypeCell );
	bool EquippingMove ( unsigned char Dir );
	void extOnMouseUp ( int controllerIdx );
	void extOnCellPressed ( int Suffix );
	void extOnEquippedPanelPressed ( int controllerIdx );
	bool NormalMove ( unsigned char Dir );
	void RestoreCurrentSelectedCell ( );
	void CacheCurrentSelectedCellAndSetToNone ( );
	void ResetCacheCurrentSelectedCell ( );
	class UGFxObject* GetCurrentSelectedCell ( );
	void extOnCellUnselected ( int InSelectedCellSuffix );
	void extOnCellSelected ( int InSelectedCellSuffix );
	class AWillowInventory* GetThingByIndex ( int Index );
	class AWillowInventory* GetSelectedThing ( );
	void __SetSelectedCell ( int SelectedCell );
	void SetCellsForEquipping ( int TypeCellSuffix );
	void SetSelectedCell ( );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void SetReadyWeaponRight ( unsigned long bVisible );
	void SetReadyWeaponLeft ( unsigned long bVisible );
	void FlourishWeaponLeft ( );
	void FlourishWeaponRight ( );
	void SetUpEquippedSlotIcons ( );
	void Refresh ( );
	bool Init ( class UBaseTopLevelPanelGFxObject* InParentPanel, struct FName InPanelName );
	bool MoveFunction ( unsigned char Dir );
};

UClass* UStatusMenuEquippedPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.BaseTopLevelPanelGFxObject
// 0x0034 (0x00AC - 0x0078)
class UBaseTopLevelPanelGFxObject : public UGFxObject
{
public:
	class UWillowInventoryGFxMovie*                    ParentMovie;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	class UWillowInventoryGFxDefinition*               ParentMovieDef;                                   		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< struct FItemCardInfo >                     ItemCards;                                        		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       QueuedTriggerKey;                                 		// 0x008C (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             QueuedInputKey;                                   		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInputKey__Delegate;                           		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5240 ];

		return pClassPointer;
	};

	void OnTrashFavChanged ( class AWillowInventory* Thing );
	void OnCellPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void OnStartDrag ( class UGFxObject* StartingCell, class UGFxObject* OutDragData );
	unsigned char GetInspectedItemCurrencyType ( class AWillowInventory* Thing );
	int GetInspectedItemOverridePrice ( class AWillowInventory* Thing );
	void __SetComparingTweenInfo ( float TT, float MCLX, float MCLY, float MCLZ, float MCRX, float MCRY, float MCRZ, float CCLX, float CCLY, float CCLZ, float CCRX, float CCRY, float CCRZ, float MCSL, float MCSR, float CCSL, float CCSR );
	void SetComparingTweenInfo ( struct FName MainCardName, struct FName CompareCardName, struct FName LeftPanelName, struct FName RightPanelName );
	struct FCardInfo GetCard ( struct FName CardName );
	void OnItemSelected ( class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing );
	void UpdateDynamicCard ( class AWillowInventory* Thing );
	void SetUpCardEx ( struct FName CardName, class AWillowInventory* Thing, class AWillowInventory* CompareAgainstThing, unsigned char CurrencyType, int OverrideValue );
	void SetUpCard ( struct FName CardName, class AWillowInventory* Thing, class AWillowInventory* CompareAgainstThing, int OverrideValue );
	int GetItemCardContentIndex ( struct FName CardName );
	class UItemCardGFxObject* GetItemCard ( struct FName CardName );
	struct FItemCardInfo GetItemCardInfo ( struct FName CardName );
	struct FPanelInfo GetPanel ( struct FName PanelName );
	void extInitComplete ( );
	void extInitRightPanel ( );
	void extInitLeftPanel ( );
	void InitPanels ( );
	void AssignPanels ( );
	void extInitPanels ( );
	void RefreshItemCards ( );
	void InitItemCards ( );
	void AssignItemCards ( );
	void extInitItemCards ( );
	void SetActivePanelByName ( struct FString PanelName );
	void OnPanelPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void __SetFocusUnfocusedCompareTweenPositions ( struct FString PN, float TT, float FX, float FY, float FZ, float UFX, float UFY, float UFZ, float CX, float CY, float CZ );
	void TweenPanel ( struct FString PanelName, unsigned long bFocused, unsigned long bCompare );
	void TweenPanelToPosition ( struct FName PanelName, unsigned char NewPanelPosition );
	void SetFocusUnfocusedCompareTweenPositions ( struct FName PanelName );
	bool SwitchToQueuedInputHandler ( struct FName ukey, unsigned char uevent );
	void QueueNewInputHandler ( struct FScriptDelegate NewInputKey, struct FName TriggerKey );
	bool Init ( class UWillowInventoryGFxMovie* InParent );
	bool OnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
};

UClass* UBaseTopLevelPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.ChallengesScreenGFxObject
// 0x0010 (0x00BC - 0x00AC)
class UChallengesScreenGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	unsigned char                                      CurrentPanel;                                     		// 0x00AC (0x0001) [0x0000000000000000]              
	class UBadassPanelGFxObject*                       BadassPanel;                                      		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UChallengesPanelGFxObject*                   ChallengesPanel;                                  		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UChallengesPanelDefinition*                  PanelDef;                                         		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5242 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void SetTooltipText ( struct FString TooltipsText );
	void ConfigureForPlayer ( float ControllerId );
	bool OfferInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool NormalInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool BlockInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool DeferInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void SwitchToPanel ( unsigned char Panel );
	void SwitchFocus ( unsigned char NewPanel, unsigned long bPlaySound );
	void RestoreState ( );
	void Refresh ( );
	void DeinitPanels ( );
	void Deinit ( );
	void InitPanels ( );
	void AssignPanels ( );
	bool Init ( class UWillowInventoryGFxMovie* InParent );
};

UClass* UChallengesScreenGFxObject::pClassPointer = NULL;

// Class WillowGame.StatusMenuInventoryPanelGFxObject
// 0x0050 (0x00FC - 0x00AC)
class UStatusMenuInventoryPanelGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	unsigned long                                      bShouldStartOnEquippedPanel : 1;                  		// 0x00AC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bInEquippedView : 1;                              		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSwitchedPanelsMousePress : 1;                    		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsDoingEquip : 1;                                		// 0x00AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShouldShowDualWieldGuides : 1;                   		// 0x00AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bInitialSetupFinished : 1;                        		// 0x00AC (0x0004) [0x0000000000000000] [0x00000020] 
	class UStatusMenuEquippedPanelGFxObject*           EquippedPanel;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UInventoryListPanelGFxObject*                BackpackPanel;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UAmmoPanelGFxObject*                         AmmoPanel;                                        		// 0x00B8 (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            EquippingThing;                                   		// 0x00BC (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            SecondEquippingThing;                             		// 0x00C0 (0x0004) [0x0000000000000000]              
	class UBaseInventoryPanelGFxObject*                StartEquipPanel;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                SlotsUsed;                                        		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                MaxCapacity;                                      		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FSortFilterConfiguration                    CachedSortFilterConfig;                           		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalSlotCount;                                   		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                NewlyOpenedSlotCount;                             		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                BackpackSortConfigIndex;                          		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                StartingBackpackSortConfigIndex;                  		// 0x00EC (0x0004) [0x0000000000000000]              
	TArray< struct FSortFilterConfiguration >          BackpackSortConfigurations;                       		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5244 ];

		return pClassPointer;
	};

	class UGFxObject* GetCurrentCellObject ( );
	void OnCellPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void extCompleteDrag_Backpack ( int DropTargetIndex );
	void extCompleteDrag_Equipped ( int CellSuffix );
	void extCancelDrag ( );
	void OnStartDrag ( class UGFxObject* StartingCell, class UGFxObject* OutDragData );
	void SetLeftRightArrowVisibility ( unsigned long bArrowLeftVisible, unsigned long bArrowRightVisible );
	void TweenCards ( unsigned long bTransferring, unsigned long bStartedFromLeftPanel );
	void __SetStorageInfoCardData ( struct FString NewInfo );
	void SetStorageInfoCardData ( );
	void SetStorageInfoCardTitle ( struct FString NewTitle );
	void FreeCellData ( );
	void OnTrashFavChanged ( class AWillowInventory* Thing );
	void CycleSelectedThingAsTrashOrFavorite ( );
	void CycleEquippedThingAsTrashOrFavorite ( );
	void FlourishDrop ( struct FString Text );
	bool CanDrop ( class AWillowInventory* ThingToBeDropped );
	void DropSelectedThing ( );
	bool CanUnready ( class AWillowInventory* ReadiedThing );
	bool CanReady ( class AWillowInventory* WInv );
	bool CanUseConsume ( class AWillowInventory* WInv );
	bool UnreadyThing ( class AWillowInventory* ReadiedThing );
	bool IsComparing ( );
	void SetBackpackList ( struct FSortFilterConfiguration ConfigData, TArray< class AWillowInventory* >* BackpackThings );
	void SetTooltipText ( struct FString TooltipsText );
	void __SetDPadFrames ( struct FString Platform );
	void SetDPadFrames ( );
	void SetTotalCredits ( int Credits );
	void SetAllAmmoCounts ( );
	void __SetPortrait ( struct FString PortraitPath );
	void SetPortrait ( );
	void ShowDualWieldInventoryGuides ( unsigned long bShow, int SlotsUnlocked );
	void FlourishNewSlots ( int NewSlotsToShow );
	void SetBackpackCapacity ( int InSlotsUsed, int InMaxCapacity );
	void __AwardNewQuickSlots ( );
	void AwardNewQuickSlots ( int TotalSlotCountIn, int NewlyOpenedSlotCountIn, unsigned long bShouldShowDualWieldGuidesIn );
	void ConfigureForPlayer ( float ControllerId );
	void FlourishEquip ( struct FString Text );
	void FinishEquip ( struct FName TriggerKey, unsigned long bCompleted );
	void CancelEquip ( );
	bool CompleteEquip ( );
	void TryUnlockedFlourish ( class AWillowInventory* WInv );
	void StartEquip ( struct FName TriggerKey, unsigned long bIsDragAndDrop );
	bool EquipInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	unsigned char GetEquippedPanelCurrentCellType ( );
	void OnItemSelected ( class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing );
	bool NormalInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void InspectSelectedItem ( );
	class AWillowInventory* eventGetSelectedThingFromNative ( );
	class AWillowInventory* GetSelectedThing ( );
	void UpdateDynamicCard ( class AWillowInventory* Thing );
	void RefreshItemCards ( );
	void SwitchToEquippedPanel ( );
	void SwitchToBackpackPanel ( );
	void UpdateTooltipsText ( );
	void SwitchFocus ( unsigned char NewPanel, unsigned long bPlaySound );
	void OnPanelPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void RestoreState ( );
	void Refresh ( );
	void OnListSort ( );
	void SaveBackpackSortPreference ( );
	void extInitComplete ( );
	void RefreshBackpackPanel ( );
	void extInitRightPanel ( );
	void extInitLeftPanel ( );
	void InitItemCards ( );
	void AssignItemCards ( );
	bool Init ( class UWillowInventoryGFxMovie* InParent );
};

UClass* UStatusMenuInventoryPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.TradingPanelGFxObject
// 0x0024 (0x00D0 - 0x00AC)
class UTradingPanelGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	class UInventoryListPanelGFxObject*                BackpackPanel;                                    		// 0x00AC (0x0004) [0x0000000000000000]              
	class UTradingOffersPanelGFxObject*                OffersPanel;                                      		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentPanel;                                     		// 0x00B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      ReturnPanel;                                      		// 0x00B5 (0x0001) [0x0000000000000000]              
	class AWillowInventory*                            OfferingThing;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FSortFilterConfiguration                    CachedSortFilterConfig;                           		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bCancelNextDrag : 1;                              		// 0x00CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5246 ];

		return pClassPointer;
	};

	void extCompleteDrag_Backpack ( int DropTargetIndex );
	void extCompleteDrag_Offered ( int CellSuffix );
	void extCancelDrag ( );
	bool CanDragSelectedThing ( );
	void OnStartDrag ( class UGFxObject* StartingCell, class UGFxObject* OutDragData );
	void SetLeftRightArrowVisibility ( unsigned long bLeftArrowVisible, unsigned long bRightArrowVisible );
	void InspectItem ( class AWillowInventory* Thing );
	void SetBackpackList ( TArray< class AWillowInventory* >* BackpackThings );
	void SetTooltipText ( struct FString TooltipsText );
	void SetTotalCredits ( int Credits );
	void ConfigureForPlayer ( float ControllerId );
	void FinishOffer ( );
	void CancelOffer ( );
	bool CompleteOffer ( );
	void StartOffer ( );
	bool CanUseCLIKButtons ( );
	bool CanStartOffer ( );
	bool OfferInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool NormalInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool BlockInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool DeferInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	class AWillowInventory* GetSelectedThing ( );
	void RefreshItemCards ( );
	void SwitchToPanel ( unsigned char Panel );
	void SwitchFocus ( unsigned char NewPanel );
	void RestoreState ( );
	void OnItemSelected ( class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing );
	void Refresh ( );
	void OnListSort ( );
	void InitPanels ( );
	void AssignPanels ( );
	void InitItemCards ( );
	void AssignItemCards ( );
	bool Init ( class UWillowInventoryGFxMovie* InParent );
};

UClass* UTradingPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.TwoPanelInterfaceGFxObject
// 0x0070 (0x011C - 0x00AC)
class UTwoPanelInterfaceGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	class UITwoPanelInterface*                         TwoPanelInterface;                                		// 0x00AC (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UInventoryListPanelGFxObject*                StoragePanel;                                     		// 0x00B4 (0x0004) [0x0000000000000000]              
	class UInventoryListPanelGFxObject*                PlayerPanel;                                      		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bOnLeftPanel : 1;                                 		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStartedOnLeftPanel : 1;                          		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLeftPanelRefreshed : 1;                          		// 0x00BC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRightPanelRefreshed : 1;                         		// 0x00BC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOwningMovieHandlesCellPress : 1;                 		// 0x00BC (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                frameNum;                                         		// 0x00C0 (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            TransferringThing;                                		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FName                                       DynamicCardName;                                  		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FString                                     HeaderNavLeftTooltip;                             		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HeaderNavRightTooltip;                            		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StoragePanelLabel;                                		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerPanelLabel;                                 		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      bCanAcceptInput;                                  		// 0x0100 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __SwitchToStartingPanel__Delegate;                		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDynamicCardUpdated__Delegate;                 		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5248 ];

		return pClassPointer;
	};

	void OnCellPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void InitForConsole ( );
	void InitForPC ( );
	bool OnValidCell ( );
	class UGFxObject* GetCurrentCellObject ( );
	class UInventoryListPanelGFxObject* GetCurrentPanel ( );
	unsigned char GetInspectedItemCurrencyType ( class AWillowInventory* Thing );
	int GetInspectedItemOverridePrice ( class AWillowInventory* Thing );
	void SetActivePanelSelectIndexByThing ( class AWillowInventory* Thing );
	void SetActivePanelSortConfiguration ( struct FSortFilterConfiguration NewConfiguration );
	void SetTabIconFrame ( int IconNumber, struct FString frame );
	void SetActiveTab ( struct FString Tab );
	void __SetNavTooltips ( struct FString LeftTooltip, struct FString RightTooltip );
	void SetNavTooltips ( );
	void SetTooltipText ( struct FString TooltipsText );
	void Cleanup ( );
	void SetStorageInfoCardVisible ( unsigned long bVisible );
	void __SetStorageInfoCardData ( struct FString NewInfo );
	void SetStorageInfoCardData ( );
	void SetStorageInfoCardTitle ( struct FString NewTitle );
	void CycleSelectedThingAsTrashOrFavorite ( );
	void TweenCards ( unsigned long bTransferring, unsigned long bStartedFromLeftPanel );
	void FinishTransfer ( struct FName TriggerKey, unsigned long bCompleted );
	void CancelTransfer ( struct FName ukey );
	void ConfirmTransfer ( struct FName ukey );
	bool TransferInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void StartTransfer ( struct FName TriggerKey );
	bool IsTransferring ( );
	bool NormalInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool PanelInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void OnItemSelected ( class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing );
	void InitItemCards ( );
	void AssignItemCards ( );
	void SetHeader ( struct FString frame, struct FString Title );
	class AWillowInventory* GetSelectedThing ( );
	class AWillowInventory* GetEquippedAnalogueThroughInterface ( class AWillowInventory* InThing );
	class AWillowInventory* GetSelectedThingThroughInterface ( );
	void UpdateDynamicCard ( class AWillowInventory* Thing );
	void RefreshItemCards ( );
	void SetUpCard ( struct FName CardName, class AWillowInventory* Thing, class AWillowInventory* CompareAgainstThing, int OverrideValue );
	void SetActive ( unsigned long bSelected );
	void SwitchPanelsForComparing ( );
	bool TrySwitchToRightPanel ( );
	bool TrySwitchToLeftPanel ( );
	void SwitchToRightPanel ( unsigned long bSetHeader );
	void SwitchToLeftPanel ( unsigned long bSetHeader );
	void OnListSort ( );
	void ConfigureForPlayer ( float ControllerId );
	void OnTick ( );
	void Refresh ( );
	void RefreshRightPanel ( );
	void RefreshLeftPanel ( );
	void SetActiveHeaderIcon ( struct FString Position );
	void SetHeaderLabel ( struct FString NewLabel );
	void SetPlayerPanelHidden ( );
	void SetNavHeaderIconCount ( int IconCount );
	void extInitRightPanel ( );
	void extInitLeftPanel ( );
	bool Init ( class UWillowInventoryGFxMovie* InParent );
	void OnDynamicCardUpdated ( class AWillowInventory* WInv );
	void SwitchToStartingPanel ( unsigned long bSetHeader );
};

UClass* UTwoPanelInterfaceGFxObject::pClassPointer = NULL;

// Class WillowGame.DeferredDataProviderGFxObject
// 0x0010 (0x0088 - 0x0078)
class UDeferredDataProviderGFxObject : public UGFxObject
{
public:
	class UGFxMoviePlayer*                             BaseOwningMovie;                                  		// 0x0078 (0x0004) [0x0000000000000000]              
	TArray< class UGFxObject* >                        CachedObjects;                                    		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5250 ];

		return pClassPointer;
	};

	int GetLength ( );
	void eventInvalidate ( int Length );
	void EmptyData ( );
	class UGFxObject* RequestItemRange ( int StartIndex, int EndIndex, class UGFxObject* Scope, struct FString CallBack );
	class UGFxObject* RequestItemAt ( int Index, class UGFxObject* Scope, struct FString CallBack );
	void Init ( );
};

UClass* UDeferredDataProviderGFxObject::pClassPointer = NULL;

// Class WillowGame.InventoryDataProviderGFxObject
// 0x003C (0x00C4 - 0x0088)
class UInventoryDataProviderGFxObject : public UDeferredDataProviderGFxObject
{
public:
	class UWillowInventoryGFxMovie*                    OwningMovie;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	class UInventoryListPanelGFxObject*                OwningPanel;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	TArray< struct FHeavyInventoryElement >            HeavyweightArray;                                 		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSortableDataElement >              LightweightArray;                                 		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CategoryLabelsArray;                              		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        RainbowObjects;                                   		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                UnloadableCount;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5252 ];

		return pClassPointer;
	};

	void OnTrashFavChanged ( class AWillowInventory* WInv );
	unsigned char GetEntryKindAtIndex ( int Index );
	void AddDataEntry ( class UObject* Entry, struct FString LocalizedText, struct FColor RarityColor );
	void EmptyData ( );
	int FindIndexOfThing ( class AWillowInventory* ThingToBeSelected );
	class AWillowInventory* GetInventoryAtIndex ( int Index );
	void Init ( );
};

UClass* UInventoryDataProviderGFxObject::pClassPointer = NULL;

// Class WillowGame.GFxTextListContainer
// 0x0050 (0x008C - 0x003C)
class UGFxTextListContainer : public UObject
{
public:
	TArray< struct FOneTimeDataElement >               OneTimeArray;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CategoryLabelsArray;                              		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSortableDataElement >              SortableArray;                                    		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGFxTextEntry >                     TextEntries;                                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxMovie*                                   ParentMovie;                                      		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                HighlightedEntry;                                 		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                IndexOfTopEntry;                                  		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                NumberEntriesPerPage;                             		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                SavedHighlightedEntry;                            		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                SavedIndexOfTopEntry;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	class UGFxTextListDefinition*                      ListDef;                                          		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHighlightBarNormal : 1;                          		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5254 ];

		return pClassPointer;
	};

	int GetIndexOfNextCategory ( );
	int GetIndexOfPreviousCategory ( );
	void SetMoreBars ( unsigned long bMoreUp, unsigned long bMoreDown );
	void UpdateTextEntries ( );
	void MoveHighlightBar ( int frame );
	int GetTextEntryIndexOfFirstRealEntry ( );
	bool GetTextAndIconAtIndex ( int Idx, struct FString* Text, struct FString* Icon );
	unsigned char GetTextEntryKindAtIndex ( int Idx );
	class UObject* GetObjectAtIndex ( int Idx );
	void RemoveObject ( class UObject* anObject );
	void ScrollToBottomOfList ( );
	void SetIconOverrideFor ( class UObject* anObject, struct FString IconOverride );
	void SetObjectHighlighted ( class UObject* anObject );
	int FindObjectIndex ( class UObject* anObject );
	void SetHighlightBarOff ( );
	void SetHighlightBarNormal ( );
	void SetHighlightBarSelected ( );
	void UnHighlightAll ( );
	void PositionHighlightBar ( );
	void ResetState ( );
	void RestoreState ( );
	void SaveState ( );
	struct FString GetHighlightedText ( );
	class UObject* GetHighlightedObject ( );
	bool IsSlotValid ( int Slot );
	bool SelectSlot ( int Slot );
	void RepositionToFitIndex ( int IndexToFit );
	class UObject* Move ( unsigned char Dir );
	void UpdateEntriesPerPage ( int NewSize );
	void AddDataEntry ( class UObject* Entry, struct FString LocalizedText, struct FColor UnselectedTextColor, struct FString IconFrameLabel );
	void EmptyData ( );
	void Init ( class UGFxMovie* Parent, class UGFxTextListDefinition* Def );
};

UClass* UGFxTextListContainer::pClassPointer = NULL;

// Class WillowGame.GFxTextListDefinition
// 0x0060 (0x009C - 0x003C)
class UGFxTextListDefinition : public UGBXDefinition
{
public:
	struct FString                                     ContainerName;                                    		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     FunctionPath;                                     		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     MoreUpName;                                       		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     MoreDownName;                                     		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     CategoryPrefix;                                   		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     CategoryPostfix;                                  		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     CategoryIconLabel;                                		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FColor                                      TextNormalColor;                                  		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      TextHighlightColor;                               		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                InitialEntryCount;                                		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5256 ];

		return pClassPointer;
	};

};

UClass* UGFxTextListDefinition::pClassPointer = NULL;

// Class WillowGame.HashDisplayGFxDefinition
// 0x0024 (0x00E0 - 0x00BC)
class UHashDisplayGFxDefinition : public UGFxMovieDefinition
{
public:
	class UGFxTextListDefinition*                      LeftSideDef;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EmptySlotColor;                                   		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardCellWidth;                                    		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardCellHeight;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardTextureWidth;                                 		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardTextureHeight;                                		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Card1ExternalTextureMap;                          		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5258 ];

		return pClassPointer;
	};

};

UClass* UHashDisplayGFxDefinition::pClassPointer = NULL;

// Class WillowGame.HUDScalingAnchorDefinition
// 0x0008 (0x0044 - 0x003C)
class UHUDScalingAnchorDefinition : public UGBXDefinition
{
public:
	struct FVector2D                                   AnchorPosition;                                   		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5260 ];

		return pClassPointer;
	};

};

UClass* UHUDScalingAnchorDefinition::pClassPointer = NULL;

// Class WillowGame.HUDWidget_Base
// 0x0004 (0x007C - 0x0078)
class UHUDWidget_Base : public UGFxObject
{
public:
	class UWillowHUDGFxMovie*                          MyHUDMovie;                                       		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5262 ];

		return pClassPointer;
	};

	void Update ( float DeltaTime );
	void Deinit ( );
	void Init ( class UWillowHUDGFxMovie* OwnerMovie );
};

UClass* UHUDWidget_Base::pClassPointer = NULL;

// Class WillowGame.HUDWidget_Challenges
// 0x0038 (0x00B4 - 0x007C)
class UHUDWidget_Challenges : public UHUDWidget_Base
{
public:
	unsigned long                                      bShowing : 1;                                     		// 0x007C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UGFxObject*                                  InnerClip;                                        		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  HeaderClip;                                       		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  SubtextClip;                                      		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  SubtextInnerClip;                                 		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  SubtextInnerTextClip;                             		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FlipTime;                                         		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HideTime;                                         		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     Header_InProgress;                                		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Header_Complete;                                  		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5264 ];

		return pClassPointer;
	};

	struct FString GetRewardString ( );
	struct FString GetProgressString ( );
	struct FString GetNameString ( );
	void Hide ( );
	void Flip ( );
	void ConditionalShowNextQueuedChallenge ( );
	void ShowNextQueuedChallenge ( );
	void Update ( float DeltaTime );
	void Deinit ( );
	void Init ( class UWillowHUDGFxMovie* OwnerMovie );
};

UClass* UHUDWidget_Challenges::pClassPointer = NULL;

// Class WillowGame.HUDWidget_Crosshairs
// 0x0024 (0x00A0 - 0x007C)
class UHUDWidget_Crosshairs : public UHUDWidget_Base
{
public:
	float                                              CrosshairSize;                                    		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CrosshairFrame;                                   		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CrosshairVisibility;                              		// 0x0084 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MyCrosshairColor;                                 		// 0x0085 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                ChargeFrame;                                      		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  OuterClip;                                        		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  InnerClip;                                        		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ChargeClip;                                       		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowWeapon*                               WWeap;                                            		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bScopeCrosshair : 1;                              		// 0x009C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDualWieldCrosshair : 1;                          		// 0x009C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5266 ];

		return pClassPointer;
	};

	void AssociateWeapon ( class AWillowWeapon* InWeap );
	void UpdateCrosshairColor ( );
	void UpdateCrosshairFrame ( );
	void SetCrosshairVisibility ( unsigned long bVisible );
	void Update ( float DeltaTime );
	void Deinit ( );
	void Init ( class UWillowHUDGFxMovie* OwnerMovie );
};

UClass* UHUDWidget_Crosshairs::pClassPointer = NULL;

// Class WillowGame.HUDWidget_Minimap
// 0x00F4 (0x0170 - 0x007C)
class UHUDWidget_Minimap : public UHUDWidget_Base
{
public:
	unsigned long                                      bPlayerRelative : 1;                              		// 0x007C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowThreats : 1;                                 		// 0x007C (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	float                                              WorldRadius;                                      		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              UnrealUnitsPerPixel;                              		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetWorldRadius;                                		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OuterRadius;                                      		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RadiusLerpPerSecond;                              		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MapClip;                                          		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  DirArrowClip;                                     		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  NorthMarkerClip;                                  		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     NorthMarkerOffset;                                		// 0x00A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedPlayerYaw;                                  		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MapYawOffset;                                     		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMinimapObjectiveIconClip >         Icons_Objective;                                  		// 0x00B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_AreaObjective;                              		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapObjectiveIconClip >         Icons_AreaObjectiveSticky;                        		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_CustomObjective;                            		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_Threats;                                    		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_Allies;                                     		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_Vehicles;                                   		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_Shops;                                      		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_VSS;                                        		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_HealthStations;                             		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_FastTravelStations;                         		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_LevelTravelStations;                        		// 0x0138 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_CustomizationStations;                      		// 0x0144 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_MissionEligible;                            		// 0x0150 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMinimapIconClip >                  Icons_MissionRedeemable;                          		// 0x015C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AWillowTacticalMapVolume*                    TacticalMapVolume;                                		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowHUDGFxMovieDefinition*                HUDMovieDef;                                      		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5268 ];

		return pClassPointer;
	};

	void eventToggleFogOfWarBlob ( struct FString BlobName, unsigned long bEnabled );
	void eventInitFogOfWarBlobs ( );
	void UpdateTargetRadius ( unsigned long bInVehicle, float LerpTime );
	void SetMapMovie ( struct FString MapMoviePath );
	void Update ( float DeltaTime );
	void Deinit ( );
	void InitOverheadMapVolume ( );
	void Init ( class UWillowHUDGFxMovie* OwnerMovie );
};

UClass* UHUDWidget_Minimap::pClassPointer = NULL;

// Class WillowGame.HUDWidget_Missions
// 0x00D8 (0x0154 - 0x007C)
class UHUDWidget_Missions : public UHUDWidget_Base
{
public:
	unsigned long                                      bMissionWidgetNeedsRefresh : 1;                   		// 0x007C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCachedMissionTimerRunning : 1;                   		// 0x007C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCachedMissionBranches : 1;                       		// 0x007C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCachedMissionTurnIn : 1;                         		// 0x007C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bCachedMissionFailed : 1;                         		// 0x007C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDoingNonTrackedMissionFlip : 1;                  		// 0x007C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bRejectFurtherNonTrackedAdds : 1;                 		// 0x007C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	TArray< class UMissionObjectiveDefinition* >       CachedActiveMissionObjectives;                    		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UMissionObjectiveDefinition* >       CachedBranchedMissionObjectives;                  		// 0x008C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UMissionObjectiveDefinition* >       DisplayedActiveMissionObjectives;                 		// 0x0098 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UMissionObjectiveDefinition* >       DisplayedBranchedMissionObjectives;               		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      DisplayedActiveMissionObjectiveCounts;            		// 0x00B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      DisplayedBranchedMissionObjectiveCounts;          		// 0x00BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedMissionName;                                		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedMissionTimerSeconds;                        		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedMissionDefenseHealth;                       		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMissionObjectiveDefinition*                 CachedMissionDefenseObjective;                    		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMissionDefinition*                          CachedNonTrackedMission;                          		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMissionObjectiveDefinition*                 CachedNonTrackedMissionObjective;                 		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NonTrackedMissionStartTime;                       		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NonTrackedMissionDuration;                        		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              MissionModuleTweenDuration;                       		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FString                                     MissionTurnInString;                              		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionFailedString;                              		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefendString;                                     		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TimerPausedString;                                		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OrString;                                         		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FMissionWidgetMessage >             MessageQueue;                                     		// 0x0130 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMissionWidgetMessage >             ProcessedMessageQueue;                            		// 0x013C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        ActiveFlyingCheckmarks;                           		// 0x0148 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5270 ];

		return pClassPointer;
	};

	void ClearAllCheckmarks ( );
	void ClearNextCheckmark ( );
	int FindModuleNumForDisplayedObjective ( class UMissionObjectiveDefinition* Objective );
	void DoMissionStatusFanfare ( struct FString frame, class UMissionDefinition* MissionDef, unsigned long bShowObjectiveFlourish, class UMissionObjectiveDefinition* MissionObjective );
	void SetDisplayedMission ( class UMissionDefinition* MissionDef );
	void SendMissionWidgetMessage ( struct FMissionWidgetMessage* Message );
	void RefreshMissionWidget ( );
	void extMissionModuleAnimFinished ( struct FString AnimName, struct FString ModuleName );
	void ProcessMissionWidgetMessages ( float DeltaTime );
	void UpdateActiveMission ( );
	void Update ( float DeltaTime );
	void Deinit ( );
	void Init ( class UWillowHUDGFxMovie* OwnerMovie );
};

UClass* UHUDWidget_Missions::pClassPointer = NULL;

// Class WillowGame.HUDWidget_Trading
// 0x0108 (0x0184 - 0x007C)
class UHUDWidget_Trading : public UHUDWidget_Base
{
public:
	struct FString                                     TradePrompt_Send;                                 		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradePrompt_Accept;                               		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeSentTo;                                      		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeReceivedFrom;                                		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled;                                    		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeFinished;                                    		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeDisabled;                                    		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradingDisabled;                                  		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_Busy;                               		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_OutOfRange;                         		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_SelfRefused;                        		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_OtherRefused;                       		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_SelfWithdrew;                       		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_OtherWithdrew;                      		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_SelfCanceled;                       		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeCanceled_OtherCanceled;                      		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeFinished_Won;                                		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeFinished_Lost;                               		// 0x0148 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeFinished_Draw;                               		// 0x0154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxObject*                                  InnerClip;                                        		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  Line1Clip;                                        		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  Line2Clip;                                        		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowTradeManager*                         TradeManager;                                     		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedStatus;                                     		// 0x0170 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      CachedPartnerPRI;                                 		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bTipsShown : 1;                                   		// 0x0178 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              ReasonMessageDuration;                            		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              LastReasonMessageTime;                            		// 0x0180 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5272 ];

		return pClassPointer;
	};

	void TradeManagerShutDown ( unsigned char Reason );
	void TradeManagerInitialized ( class AWillowTradeManager* InTradeManager );
	void HideTips ( unsigned long bForceOff );
	void ShowTips ( );
	void Update ( float DeltaTime );
	void Deinit ( );
	void Init ( class UWillowHUDGFxMovie* OwnerMovie );
};

UClass* UHUDWidget_Trading::pClassPointer = NULL;

// Class WillowGame.HUDWidget_WorldSpace
// 0x0098 (0x0114 - 0x007C)
class UHUDWidget_WorldSpace : public UHUDWidget_Base
{
public:
	TArray< struct FObjectiveIcon >                    ObjectiveIcons;                                   		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPlayerIcon >                       PlayerIcons;                                      		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPlayerIcon >                       NPCAllyIcons;                                     		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWillowHUDGFxMovieDefinition*                HUDDef;                                           		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerPawn*                           RelevantPlayerPawns[ 0x3 ];                       		// 0x00A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                NextRelevantPlayerPawnIndex;                      		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedPlayerName[ 0x3 ];                          		// 0x00B4 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      bCachedPlayerState[ 0x3 ];                        		// 0x00D8 (0x0003) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedNPCAllyName[ 0x2 ];                         		// 0x00DC (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector2D                                   VVOrg;                                            		// 0x00F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   VVExt;                                            		// 0x00FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  TopLevelClip;                                     		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MinimapWrapperClip;                               		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MinimapClip;                                      		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ParentClip;                                       		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5274 ];

		return pClassPointer;
	};

	class APlayerReplicationInfo* GetPRIFor ( class AWillowPlayerPawn* WPP );
	void NotifyOfPawnRelevance ( class AWillowPlayerPawn* WPP );
	void UpdateNPCAllyIcons ( float DeltaTime, class AWillowGameReplicationInfo* WGRI, class ULocalPlayer* LP, struct FVector ViewLocation, struct FRotator ViewRotation, float ViewFOV );
	void UpdatePlayerIcons ( float DeltaTime, class AWillowGameReplicationInfo* WGRI, class ULocalPlayer* LP, struct FVector ViewLocation, struct FRotator ViewRotation, float ViewFOV );
	void UpdateObjectiveIcons ( float DeltaTime, class AWillowGameReplicationInfo* WGRI, class ULocalPlayer* LP, struct FVector ViewLocation, struct FRotator ViewRotation, float ViewFOV );
	bool IsShowingObjective ( int ObjectiveIndex );
	void SetVirtualViewport ( );
	void Update ( float DeltaTime );
	void Deinit ( );
	void Init ( class UWillowHUDGFxMovie* OwnerMovie );
};

UClass* UHUDWidget_WorldSpace::pClassPointer = NULL;

// Class WillowGame.InventoryDataProviderElement
// 0x0008 (0x0080 - 0x0078)
class UInventoryDataProviderElement : public UGFxObject
{
public:
	unsigned char                                      Kind;                                             		// 0x0078 (0x0001) [0x0000000000000000]              
	int                                                LightweightIdx;                                   		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5276 ];

		return pClassPointer;
	};

};

UClass* UInventoryDataProviderElement::pClassPointer = NULL;

// Class WillowGame.ItemCardGFxObject
// 0x0004 (0x007C - 0x0078)
class UItemCardGFxObject : public UGFxObject
{
public:
	unsigned long                                      bIsVisible : 1;                                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5278 ];

		return pClassPointer;
	};

	void SetVisible_ ( unsigned long bVisible );
	void SetBackgroundStyle ( struct FString Style );
	void __SetTopStat ( int StatIndex, struct FString LabelText, struct FString ValueText, struct FString CompareArrow, struct FString AuxText, struct FString IconName );
	void __SetTitle ( struct FString Manufacturer, struct FString Title, int Rarity, struct FString TypeIcon, struct FString ElementalIcon, unsigned long bIsReadied );
	void SetCardUIStats ( TArray< struct FTopStatData >* TopStats );
	void AdjustHeight ( );
	void SetHeight ( );
	void SetLevelRequirement ( unsigned long bHasRequirement, unsigned long bMetRequirement, unsigned long bAlreadyUsed, struct FString RequirementText );
	void ToggleCreditsSpinner ( unsigned long bVisible );
	void SetEridiumValue ( int Amount );
	void SetValue ( int Amount );
	void SetFunStats ( struct FString FunStatsText );
	void SetTopStat ( int StatIndex, struct FString LabelText, struct FString ValueText, unsigned char CompareArrow, struct FString AuxText, struct FString IconName );
	void eventSetColor ( struct FString Manufacturer, struct FString Title, struct FColor newColor, struct FString TypeIcon, struct FString ElementalIcon, unsigned long bIsReadied );
	void SetTitle ( struct FString Manufacturer, struct FString Title, struct FColor Rarity, struct FString TypeIcon, struct FString ElementalIcon, unsigned long bIsReadied );
	void SetItemCardEx ( class AWillowPlayerController* WPC, class UIItemCardable* InventoryItem, class AWillowInventory* CompareAgainstInventoryItem, unsigned char CurrencyType, int OverrideValue );
	int GetPlayerLevel ( class AWillowPlayerController* WPC );
	void eventSetItemCard ( class AWillowPlayerController* WPC, class UIItemCardable* InventoryItem, class AWillowInventory* CompareAgainstInventoryItem, int OverrideValue );
	void Init ( );
	struct FColor GetCurrentRainbowColor ( );
	void UnregisterRainbowCardToHUD ( );
	void RegisterRainbowCardToHUD ( class UIItemCardable* InventoryItem );
};

UClass* UItemCardGFxObject::pClassPointer = NULL;

// Class WillowGame.ItemOfTheDayPanelGFxObject
// 0x000C (0x0084 - 0x0078)
class UItemOfTheDayPanelGFxObject : public UGFxObject
{
public:
	class UVendingMachineExGFxMovie*                   VendingMachineMovie;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	class UTexture*                                    CellThumbnail;                                    		// 0x007C (0x0004) [0x0000000000000000]              
	class USwfMovie*                                   CustomMovieClip;                                  		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5280 ];

		return pClassPointer;
	};

	class UGFxObject* GetCellObject ( );
	void extOnIOTDPress ( );
	void extOnIOTDRollOut ( );
	void extOnIOTDRollOver ( );
	void SetCellStatus ( unsigned long bIsEmpty, unsigned long bIsSoldOut );
	void __SetBackgroundClip ( struct FString MoviePath );
	void SetBackgroundClip ( class USwfMovie* MovieClip );
	void __SetBackground ( struct FString Background );
	void SetBackground ( unsigned char Background );
	void __SetRarityColor ( int RarityColorInt );
	void SetRarityColor ( struct FColor Rarity );
	void SetItemOfTheDayItem ( class AWillowInventory* ItemOfTheDay );
	void SetSelected ( unsigned long bSelected );
	void SetCellData ( int Width, int Height, int PlayerNumber );
	void SetTimeRemaining ( struct FString TimeRemaining );
	void SetVisibility ( unsigned long bVisible );
	void __SetLocalizedStrings ( struct FString Header, struct FString Caption );
	void SetLocalizedStrings ( struct FString Header, struct FString Caption );
	void Cleanup ( );
	void InitLabels ( );
	void Init ( class UVendingMachineExGFxMovie* InVendingMachineMovie );
};

UClass* UItemOfTheDayPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.ItemPickupGFxDefinition
// 0x001C (0x00D8 - 0x00BC)
class UItemPickupGFxDefinition : public UGFxMovieDefinition
{
public:
	class UMaterial*                                   MatSrc;                                           		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Particle;                                         		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParticleMatParamName;                             		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MatTexParamName;                                  		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TallItemZOffsetPercentage;                        		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5282 ];

		return pClassPointer;
	};

};

UClass* UItemPickupGFxDefinition::pClassPointer = NULL;

// Class WillowGame.MontageGFxObject
// 0x0028 (0x00A0 - 0x0078)
class UMontageGFxObject : public UGFxObject
{
public:
	class AWillowPlayerController*                     WPCOwner;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	class UCreditsGFxDefinition*                       CreditsDef;                                       		// 0x007C (0x0004) [0x0000000000000000]              
	struct FString                                     LinkageName;                                      		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MontageIdx;                                       		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      bShouldShowImages : 1;                            		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMontageTexturesLoaded : 1;                       		// 0x0090 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< class UTexture2D* >                        MontageTextures;                                  		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5284 ];

		return pClassPointer;
	};

	void extFadeOutComplete ( );
	void extFadeInComplete ( );
	void FadeOut ( );
	void FadeIn ( );
	void StartNewTexture ( );
	bool StartNextTexture ( );
	void Close ( );
	void eventOnMontageTexturesLoaded ( );
	void Init ( class UCreditsGFxDefinition* CreditsDefinition, struct FString TextureLinkageName );
	void SetShouldShowImages ( );
	void ClearMontageTextures ( );
	void AddMontageTextures ( );
};

UClass* UMontageGFxObject::pClassPointer = NULL;

// Class WillowGame.ScrollingListGFxObject
// 0x0000 (0x0078 - 0x0078)
class UScrollingListGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5286 ];

		return pClassPointer;
	};

	void eventSetSelectedIndex ( int SelectedIndex );
	void ScrollToIndex ( int ScrollToIndex );
	void Init ( );
};

UClass* UScrollingListGFxObject::pClassPointer = NULL;

// Class WillowGame.MultitypeScrollingListGFxObject
// 0x000C (0x0084 - 0x0078)
class UMultitypeScrollingListGFxObject : public UScrollingListGFxObject
{
public:
	class UIMultitypeScrollingList*                    ParentPanel;                                      		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x007C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	unsigned long                                      bInitialInitComplete : 1;                         		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5288 ];

		return pClassPointer;
	};

	void ContinueInitialInit ( );
	void extGameScroll ( int Delta );
	class UGFxObject* getRendererAt ( int Index );
	void SetEquippingState ( unsigned long bEquipping );
	void extSetRendererInfo ( int DataIndex, int RendererType, int RendererIndex );
	void Init ( );
	void InitMultitype ( class UIMultitypeScrollingList* InParentPanel );
};

UClass* UMultitypeScrollingListGFxObject::pClassPointer = NULL;

// Class WillowGame.SkillTreeGFxDefinition
// 0x029C (0x02D8 - 0x003C)
class USkillTreeGFxDefinition : public UGBXDefinition
{
public:
	struct FString                                     SkillMovieClip;                                   		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ArtifactDialogMovieClip;                          		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     IconOnName;                                       		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     IconOffName;                                      		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     IconHiddenName;                                   		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     IncendiaryArtifactName;                           		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     CorrosiveArtifactName;                            		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ShockArtifactName;                                		// 0x0090 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ExplosiveArtifactName;                            		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                ArtifactListSize;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SkillSelectedName;                                		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillUnselectedName;                              		// 0x00B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillDisabledName;                                		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillEnabledName;                                 		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillPartialName;                                 		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillMaxedName;                                   		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillSpentName;                                   		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillRushShowName;                                		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillRushHideName;                                		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillArtifactShowName;                            		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillArtifactHideName;                            		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillArtifactSelectionName;                       		// 0x0130 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillArtifactIconName;                            		// 0x013C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillArtifactListItemName;                        		// 0x0148 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionBackgroundUnlockedName;                		// 0x0154 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionBackgroundLockedName;                  		// 0x0160 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionBackgroundFirstName;                   		// 0x016C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionBackgroundSomeName;                    		// 0x0178 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionBackgroundMaxedName;                   		// 0x0184 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     KillSkillPrefix;                                  		// 0x0190 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillPointsName;                                  		// 0x019C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillPointsSpentVersusTotalName;                  		// 0x01A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillPointsRemainingName;                         		// 0x01B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillPointSpentName;                              		// 0x01C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillRushName;                                    		// 0x01CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionBackgroundName;                        		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DescriptionName;                                  		// 0x01E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillName;                                        		// 0x01F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PortraitName;                                     		// 0x01FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     InfoBoxName;                                      		// 0x0208 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ClassModPath;                                     		// 0x0214 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ClassName;                                        		// 0x0220 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ArtifactName;                                     		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillFirstTreeMovieClip;                          		// 0x0238 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillLeftTreeMovieClip;                           		// 0x0244 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillMiddleTreeMovieClip;                         		// 0x0250 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SkillRightTreeMovieClip;                          		// 0x025C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                FirstBranchProgressionMaskSize;                   		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SkillBranchProgressionMaskSize;                   		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchProgressionMaskSpeed;                       		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BranchProgressionMaskSpeedEnterScreen;            		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumBranchesPerTree;                               		// 0x0278 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumTiersPerBranch;                                		// 0x027C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumCellsPerTier;                                  		// 0x0280 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     SelectedLocation;                                 		// 0x0284 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     UnselectedOffset;                                 		// 0x0290 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     OverviewOffset;                                   		// 0x029C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     OverviewGlobalOffset;                             		// 0x02A8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TweenDuration;                                    		// 0x02B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SelectedScale;                                    		// 0x02B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UnselectedScale;                                  		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverviewScale;                                    		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SelectedAlpha;                                    		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UnselectedAlpha;                                  		// 0x02C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverviewAlpha;                                    		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SelectedSkillZOffset;                             		// 0x02D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SelectedSkillZTweenTime;                          		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5290 ];

		return pClassPointer;
	};

};

UClass* USkillTreeGFxDefinition::pClassPointer = NULL;

// Class WillowGame.SkillTreeGFxObject
// 0x01A6 (0x021E - 0x0078)
class USkillTreeGFxObject : public UGFxObject
{
public:
	struct FString                                     Artifacts;                                        		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoArtifactsDescription;                           		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ArtifactsDescription;                             		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquipArtifact;                                    		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoArtifactEquippedDescription;                    		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoArtifactOption;                                 		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AdrenalineRush;                                   		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Level;                                            		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillModifierNextLevel;                           		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClassModBonusString;                              		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPoints_Sing;                                 		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPoints_Plur;                                 		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClassModUntrainedString;                          		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillPointsRemainingString;                       		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USkillTreeGFxDefinition*                     MovieDef;                                         		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStatusMenuExGFxMovie*                       Movie;                                            		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     WPCOwner;                                         		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumSkillPoints;                                   		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ProgressionMaskSpeed;                             		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FinalFirstBranchProgressionMask;                  		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentFirstBranchProgressionMask;                		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FinalLeftBranchProgressionMask;                   		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentLeftBranchProgressionMask;                 		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FinalMiddleBranchProgressionMask;                 		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMiddleBranchProgressionMask;               		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FinalRightBranchProgressionMask;                  		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentRightBranchProgressionMask;                		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCanPlayRushingHelpClip : 1;                      		// 0x0154 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInstinctDialogOpen : 1;                          		// 0x0154 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bArtifactDialogOpen : 1;                          		// 0x0154 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUsingLockedSkillNameColor : 1;                   		// 0x0154 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bOverviewMode : 1;                                		// 0x0154 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	int                                                EquippedArtifactIndex;                            		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct Fartifact_datum >                   ArtifactList;                                     		// 0x015C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentArtifactIndex;                             		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PreviousSkillNameColor;                           		// 0x016C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FColor                                      SkillIntermediateGradeColor;                      		// 0x0178 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      SkillMaxGradeColor;                               		// 0x017C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      SkillLockedTextColor;                             		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     SkillNextGradeModifierTextHTML;                   		// 0x0184 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SkillLockedModifierTextHTML;                      		// 0x0190 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USkillDefinition*                            CurrentSkill;                                     		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkillDefinition*                            CurrentSkill_Rollover;                            		// 0x01A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CellNavPref;                                      		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BranchNavPref;                                    		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OverrideBranchNum;                                		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     Tooltips_SpendPoints;                             		// 0x01B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Tooltips_Overview;                                		// 0x01BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Tooltips_Cancel;                                  		// 0x01C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxObject*                                  InformationBox;                                   		// 0x01D4 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01D8 (0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.SkillTreeGFxObject.SkillDefinitionToUICell
	int                                                HACK_PrevBranchForClick;                          		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bSetProgressTree1;                                		// 0x0218 (0x0001) [0x0000000000000000]              
	unsigned char                                      bSetProgressTree2;                                		// 0x0219 (0x0001) [0x0000000000000000]              
	unsigned char                                      bSetProgressTree3;                                		// 0x021A (0x0001) [0x0000000000000000]              
	unsigned char                                      bTree1Init;                                       		// 0x021B (0x0001) [0x0000000000000000]              
	unsigned char                                      bTree2Init;                                       		// 0x021C (0x0001) [0x0000000000000000]              
	unsigned char                                      bTree3Init;                                       		// 0x021D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5292 ];

		return pClassPointer;
	};

	void eventOnCellRolledOver ( class USkillDefinition* CellSkill );
	void CellRolledOver ( int BranchNum, int TierNum, int CellNum );
	void eventOnCellClicked ( class USkillDefinition* CellSkill );
	void CellClicked ( int BranchNum, int TierNum, int CellNum );
	class AWillowClassMod* GetPlayerClassMod ( );
	void Flash_UpdateArtifactSelection ( );
	void Flash_PopulateArtifactList ( );
	int BuildArtifactList ( TArray< struct Fartifact_datum >* List );
	struct FString GetSkillDescriptionForGrade ( class USkillDefinition* SkillDef, int Grade, int GradeModifier, class AWillowPlayerController* PlayerOwner, unsigned long bIncludeHTML );
	void SetSkillNameColorToUnlocked ( );
	void SetSkillNameColorToLocked ( );
	struct FString GetSkillNameColorPath ( );
	void Flash_SetSkillPointProperties_AS ( int NewNumSkillPoints );
	void Flash_SetSkillPointProperties ( );
	void Flash_SetCharacter_AS ( struct FString ClassModText, struct FString ClassName, struct FString PortraitPath );
	void Flash_SetCharacter ( );
	void EquipSelectedArtifact ( );
	void RequestRespec ( );
	void HandleArtifactChange ( unsigned char ElementalSkillIndex, unsigned char UnequippedElementalSkillIndex );
	void HandleSkillTreeReset ( int NewSkillPoints );
	void HandleSkillPointsChange ( int NewSkillPoints );
	void PlaySpendFlourish ( class USkillDefinition* SkillDef, int Grade );
	void HandleSkillGradeChange ( class USkillDefinition* Skill, unsigned char NewSkillPoints, unsigned char Grade );
	void RequestSkillUpgrade ( );
	unsigned char CanUpgradeSkill ( );
	bool Nav_Back ( int InPlayerIndex );
	bool ToggleOverviewMode ( int InPlayerIndex );
	bool Reset ( int InPlayerIndex );
	void HoverSkillCell ( struct FString HoveredCell );
	bool Activate ( int InPlayerIndex );
	void ArtifactSelect ( int IdxSelected );
	void Nav_DownArtifact ( );
	void Nav_UpArtifact ( );
	void UpdateSkillIcon ( class USkillDefinition* SkillDef, class AWillowClassMod* ClassMod );
	void UpdateAllSkillIcons_Branch ( int DesiredBranchNumber );
	void UpdateAllSkillIcons ( );
	void SetSkillIconVisibility ( int CurrentBranch );
	void UpdateInfoBox ( );
	void UpdateBranchLocations ( unsigned long bImmediate, unsigned char Dir );
	void UpdateBranchDepths ( );
	int eventGetEffectiveCurrentBranchNumber ( );
	void UpdateTooltips ( );
	void PostNav ( class USkillDefinition* PreviousSkill, unsigned char Dir );
	class UGFxObject* GetHighlightClip ( class USkillDefinition* SkillDef );
	class UGFxObject* GetCellClip ( class USkillDefinition* SkillDef );
	bool GetUICell ( class USkillDefinition* SkillDef, struct FSkillTreeUICell* OutCell );
	class USkillDefinition* Navigate ( unsigned char Dir );
	bool Nav_Right ( int InPlayerIndex );
	bool Nav_Left ( int InPlayerIndex );
	bool Nav_Down ( int InPlayerIndex, unsigned long bPage );
	bool Nav_Up ( int InPlayerIndex, unsigned long bPage );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void extInitTree ( int TreeNum, struct FString TreePath );
	void ClearCellMap ( );
	void HandleClose ( );
	void Init ( );
	void HandleOpen ( class AWillowPlayerController* WPC, class UStatusMenuExGFxMovie* GFxMovie, class USkillTreeGFxDefinition* SkillDef );
	void CalculateBranchProgression ( );
	void Flash_SendInitialSkillData ( );
};

UClass* USkillTreeGFxObject::pClassPointer = NULL;

// Class WillowGame.StatusMenuMapGFxObject
// 0x022C (0x02A4 - 0x0078)
class UStatusMenuMapGFxObject : public UGFxObject
{
public:
	float                                              ViewBorder;                                       		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              PanRate;                                          		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     CompassIconFrames[ 0x11 ];                        		// 0x0080 (0x00CC) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class AWillowPlayerController*                     PlayerOwner;                                      		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMapObjectData >                    MapObjects;                                       		// 0x0150 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x015C (0x0004) MISSED OFFSET
	struct FMatrix                                     Transform;                                        		// 0x0160 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CoordScale;                                       		// 0x01A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   ClipSize;                                         		// 0x01A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FClipRect                                   MapClipRect;                                      		// 0x01B0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   ViewSize;                                         		// 0x01C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   ViewOffset;                                       		// 0x01C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   DesiredCenter;                                    		// 0x01D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSizesInitialized : 1;                            		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bMapFrameDirty : 1;                               		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDesiredCenterDirty : 1;                          		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCenterDirty : 1;                                 		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPlayersDirty : 1;                                		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              PanScalingFactor;                                 		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrScaleVal;                                     		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomSpeedFactor;                                  		// 0x01E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxScale;                                         		// 0x01E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinScale;                                         		// 0x01EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AWillowTacticalMapVolume*                    TacticalMapVolume;                                		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              UnrealUnitsPerPixel;                              		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MapPlaceholderClip;                               		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  MaskClip;                                         		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  InfoBoxClip;                                      		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InfoBoxIconIndex;                                 		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InfoBoxDistance;                                  		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PanIncrement;                                     		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PanZoomFactor;                                    		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   CursorPos;                                        		// 0x0214 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                MapYawOffset;                                     		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AndMore;                                          		// 0x0220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomObjectiveToggle;                            		// 0x022C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_Player;                                     		// 0x0238 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_CustomObjective;                            		// 0x0244 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_MissionAvailable;                           		// 0x0250 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_MissionComplete;                            		// 0x025C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_Vehicle;                                    		// 0x0268 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_Objective;                                  		// 0x0274 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_AreaObjective;                              		// 0x0280 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Title_InteractiveObject;                          		// 0x028C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionTurnIn;                                    		// 0x0298 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5294 ];

		return pClassPointer;
	};

	void ToggleFogOfWarBlob ( struct FString BlobName, unsigned long bEnabled );
	void ToggleLegend ( );
	void eventSetPlayerInfo ( int PlayerIndex, struct FString PlayerInfo );
	void eventHidePlayerInfo ( int PlayerIndex );
	void SetMapScale ( float MapScale );
	void SetMapMovie ( struct FString MapMoviePath );
	void FindLandmarks ( );
	void PanVert ( float Dir );
	void PanHorz ( float Dir );
	float GetZoomScalingFactor ( );
	void ApplyAnalogScale ( float ScaleVal );
	bool AnalogScale ( float ScaleVal );
	float GetDeltaTimeScalar ( );
	void ResetMapObjects ( );
	void OnClose ( );
	void PostMapMovieLoad ( );
	void Init ( class AWillowPlayerController* MyOwner );
	void UpdateInfoBox ( );
	void QuickAccessInit ( );
	void PlaceCustomObjective ( );
	void RemoveCustomObjective ( );
	void AddCustomObjective ( );
	int GetCustomObjectiveIndex ( );
	bool HasCustomObjective ( );
	float GetUnrealMapScale ( );
	void FindObjects ( );
	void FindPlayers ( );
	void UpdateObjects ( unsigned long bStaticUpdate );
	void ApplyFlash ( );
	void SetMapHeader ( );
	void InitMapFrameVars ( );
};

UClass* UStatusMenuMapGFxObject::pClassPointer = NULL;

// Class WillowGame.WillowGFxColiseumOverlayDefinition
// 0x002C (0x00E8 - 0x00BC)
class UWillowGFxColiseumOverlayDefinition : public UGFxMovieDefinition
{
public:
	class UAttributeDefinition*                        CurrentRoundCounter;                              		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAttributeDefinition*                        CurrentWaveCounter;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAttributeDefinition*                        MaxRoundCounter;                                  		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAttributeInitializationDefinition*          HealthModifier;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAttributeInitializationDefinition*          DamageModifier;                                   		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAttributeInitializationDefinition*          ShieldModifier;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           WaveLabels;                                       		// 0x00D4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              RefreshInterval;                                  		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UColiseumRuleDefinition*                     AllRulesDefinition;                               		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5296 ];

		return pClassPointer;
	};

	struct FString EvaluateBalanceFormula ( class UAttributeInitializationDefinition* InDef, float Multiplier );
};

UClass* UWillowGFxColiseumOverlayDefinition::pClassPointer = NULL;

// Class WillowGame.WillowGFxMenuHelperSaveGame
// 0x0058 (0x0094 - 0x003C)
class UWillowGFxMenuHelperSaveGame : public UObject
{
public:
	class UWillowGFxDialogBox*                         LoadingListDlg;                                   		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         DeletingDlg;                                      		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ValidatingDlg;                                    		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPlayerSaveData >                   SaveGames;                                        		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PlayerIndex;                                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxMovie*                             MenuOwner;                                        		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSelection;                                 		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bValidateOnly : 1;                                		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsEnumerating : 1;                               		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bShouldLoadDefaultProfileAfterDelete : 1;         		// 0x0060 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FScriptDelegate                             __OnDeleted__Delegate;                            		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSaveGamesUpdated__Delegate;                   		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDeleteStarted__Delegate;                      		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDeleteEnded__Delegate;                        		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5298 ];

		return pClassPointer;
	};

	void CheckForPS3SaveList ( );
	bool CheckForPS3LoadGame ( struct FLoadInfo* outLI );
	void BeginPS3LoadGame ( int ControllerId, int PS3UserNum );
	void OnDeleteComplete ( unsigned long bWasSuccessful );
	int GetSaveIdFromFilePath ( struct FString FilePath );
	int IntFromHex ( struct FString HexStr );
	bool ConfirmSaveDelete_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void FinishSaveGameUpdate ( );
	void SortResults ( TArray< struct FPlayerSaveData >* Results );
	void OnSaveGameListLoadComplete ( unsigned long bWasSuccessful );
	void GetSaveList ( TArray< struct FString > filenames );
	void GetSaveListComplete ( unsigned long bWasSuccessful );
	void OnSaveGameLoadComplete ( unsigned long bWasSuccessful );
	void LoadSelectedCharacter ( unsigned long bValidated );
	void OnValidationComplete ( unsigned long bWasSuccessful );
	TArray< struct FString > GetSaveGames ( );
	void OnLoadingStorageDeviceChanged ( unsigned long bIsValid, class UWillowGFxDialogBox* Dlg );
	void ShowBlockingLoadingDialog ( );
	void BeginGetSaveList ( unsigned long bForceReload );
	void EmptyResults ( );
	void EmptyContent ( );
	void OnDeleteStorageDeviceChanged ( unsigned long bIsValid, class UWillowGFxDialogBox* Dlg );
	void Delete ( int SelectionIndex );
	void Activate ( int SelectionIndex );
	void AbortRead ( );
	void SetOwner ( class UWillowGFxMovie* InMenuOwner, int InPlayerIndex );
	void Init ( class UWillowGFxMovie* InMenuOwner, int InPlayerIndex );
	void OnDeleteEnded ( unsigned long bWasDeleted );
	void OnDeleteStarted ( );
	void OnSaveGamesUpdated ( int InPlayerIndex );
	void OnDeleted ( int InPlayerIndex, unsigned long bWasSuccessful );
};

UClass* UWillowGFxMenuHelperSaveGame::pClassPointer = NULL;

// Class WillowGame.WillowGFxMovie
// 0x0010 (0x0264 - 0x0254)
class UWillowGFxMovie : public UGearboxGFxMovie
{
public:
	unsigned long                                      bAutoCloseHUD : 1;                                		// 0x0254 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAutoCloseAll : 1;                                		// 0x0254 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	int                                                DefaultRTTSize_PC;                                		// 0x0258 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DefaultRTTSize_Console;                           		// 0x025C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AWillowPlayerController*                     WPCOwner;                                         		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5300 ];

		return pClassPointer;
	};

	int GetQuadrantForControllerId ( int ControllerId );
	void extConditionalBeginSway ( struct FString ClipPath );
	void GetRecommendedRTTSizesFor ( unsigned char TargetType, int* TexWidth, int* TexHeight, int* CellWidth, int* CellHeight );
	class UTexture* GetRecommendedThumbnail ( unsigned char UpdateType, unsigned char TargetType, struct FName _tag );
	void eventFreeGFxThumbnails ( );
	void eventFreeGFxThumbnail ( class UTexture* Tex );
	class UTexture* eventGetGFxThumbnail ( int TextureSizeX, int TextureSizeY, unsigned char UpdateType, int SizeX, int SizeY, struct FName _tag );
	struct FString ResolveMission ( int MissionNumber );
	bool IsPresenceContextMatch ( struct FOnlineFriend Friend, struct FString ContextKey );
	void GetFriendCharacterClassAndLevel ( struct FOnlineFriend Friend, struct FString* CharacterClassPath, int* Level );
	void GetFriendLocation ( struct FOnlineFriend Friend, int* PlayThrough, struct FString* Mission );
	unsigned char GetInviteType ( class UOnlineGameSettings* GameSettings );
	unsigned char GetNetworkType ( class UOnlineGameSettings* GameSettings );
	int GetCappedDisplayCurrencyAmount ( unsigned char FormOfCurrency, int Amount );
	struct FString GFxColoredText ( unsigned long bAppendNewline, struct FColor* C, struct FString* S );
	void ConditionalLoadGame ( struct FLoadInfo LI, int PlayerIndex );
	void NotifyLoadGameStarted ( );
	bool DoDeviceSelection ( class AWillowPlayerController* WPC );
	class UOnlineGameInterface* GetGameInterface ( );
	void ShowGamerCardUI ( int ControllerId, struct FUniqueNetId* PlayerUniqueId );
	void ShowLivePartyUI ( );
	void ShowAchievementsUI ( );
	int CheckControllerStatus ( int ControllerId, unsigned char MinStatus );
	void FocusOn ( class UGFxObject* Thing );
	unsigned char GetControllerId ( int PlayerIndex );
	int GetInputPlayerIndex ( int ControllerId );
	class AWillowPlayerController* GetWillowOwner ( );
	bool Movie_IsPlaying ( struct FString MovieFileName );
	void Movie_Stop ( float fDelaySeconds, unsigned long bWait );
	void Movie_Play ( struct FString MovieFileName, unsigned long bIsStreamed );
	bool LocText ( struct FString Section, struct FString File, struct FString* Key );
	struct FString GetFallbackLocSection ( );
	struct FString GetFallbackLocFile ( );
	class UAkEvent* LookupFallbackAkEventFromGlobalsDefinition ( struct FName UIEvent );
	void UpdateHUDVisibility ( class AWillowPlayerController* _WPCOwner, unsigned long bShowHUD );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	void CleanupDestroyedMovies ( );
	void SingleArgInvokeSF ( struct FString Command, struct FString Arg );
};

UClass* UWillowGFxMovie::pClassPointer = NULL;

// Class WillowGame.GearboxAccountGFxMovie
// 0x0064 (0x02C8 - 0x0264)
class UGearboxAccountGFxMovie : public UWillowGFxMovie
{
public:
	class UGearboxAccountGFxObject*                    GearboxAccountObj;                                		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           ScreenStack;                                      		// 0x0268 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CurrentAgeString;                                 		// 0x0274 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                authenticationAttempts;                           		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsFirstWelcome : 1;                              		// 0x0284 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x0284 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasSeenOffers : 1;                               		// 0x0284 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bViewingEula : 1;                                 		// 0x0284 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	int                                                SparkInteractionWaitInSeconds;                    		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NextSparkInteractionTime;                         		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPauseTicker*                          SparkTicker;                                      		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OfferCount;                                       		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DefaultInitTime;                                  		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MinInitTime;                                      		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxInitTime;                                      		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPauseTicker*                          InitTicker;                                       		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ShiftUrlString;                                   		// 0x02A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWillowGFxDialogBox*                         RetrievingEulaDlg;                                		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastEulaRequestId;                                		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnConsoleInputComplete__Delegate;               		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5302 ];

		return pClassPointer;
	};

	bool IsSparkTimerActive ( struct FName FuncName );
	void ClearSparkTimer ( struct FName FuncName );
	void SetSparkTimer ( float Rate, unsigned long bLoop, struct FName FuncName );
	bool CanRunSparkInteraction ( struct FName FuncName );
	struct FString GetShiftMenuTextString ( struct FString Key );
	void DelayNextSparkInteraction ( );
	void UpdateLegal ( );
	bool OnCanceledRetrievingEulaDialog ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void CancelPendingEulaRequest ( );
	void NotifyShiftCommunicationFailure ( );
	void ReuseCachedEula ( );
	void NotifyShiftCommunicationSuccess ( TArray< struct FEULAData >* EulaChain );
	void CloseRetrievingEulaDialog ( );
	void RetrieveEulaLatestText ( );
	void extRequestCurrentOffers ( );
	void extRequestConsoleCodeEntry ( );
	void extRequestConfigureSignUpAdditionalTextMessage ( struct FString MessagePath );
	void extRequestConfigureAdditionalBenefitsMessage ( struct FString MessagePath );
	void extGearboxAccountOnLoad ( struct FString TargetPath );
	void DisplaySupportId ( );
	void TryPasteKeyCode ( );
	void PopulateOffers ( );
	void OnEntitlementsUpdated ( class UGearboxAccountData* GearboxAccount );
	void PerformRedeemCode ( );
	void OnRedeemCodeButtonClick ( class UGFxObject* EventObj );
	void OnAgeGateConfirmAgeButtonClick ( class UGFxObject* EventObj );
	void PerformSignUp ( );
	void OnSignUpScreenSignUpButtonClick ( class UGFxObject* EventObj );
	void OnEULAScreenAcceptButtonClick ( class UGFxObject* EventObj );
	void PerformResetPassword ( );
	void OnResetPasswordScreenResetPasswordButtonClick ( class UGFxObject* EventObj );
	void OnSignInScreenResetPasswordButtonClick ( class UGFxObject* EventObj );
	void PerformSignIn ( );
	void OnSignInScreenSignInButtonClick ( class UGFxObject* EventObj );
	void OnGetUserAgeGroup ( unsigned char LocalUserNum, unsigned char UserAgeGroup );
	void OnWelcomeScreenSignUpButtonClick ( class UGFxObject* EventObj );
	void OnWelcomeScreenSignInButtonClick ( class UGFxObject* EventObj );
	void OnConfirmPasswordButtonClick ( class UGFxObject* EventObj );
	void OnPasswordButtonClick ( class UGFxObject* EventObj );
	void OnEmailButtonClick ( class UGFxObject* EventObj );
	void OnBackButtonClick ( class UGFxObject* EventObj );
	int IsConsole ( );
	bool IsSteamworksInitialized ( );
	int IsSignedIn ( );
	int IsAuthenticated ( );
	int IsFirstWelcome ( );
	void AttachFunctions ( );
	void OnEmailOrPasswordEntryComplete ( unsigned long bSuccessful );
	void OnRedeemCodeEntryComplete ( unsigned long bSuccessful );
	void OnAgeYearEntryComplete ( unsigned long bSuccessful );
	void OnAgeDayEntryComplete ( unsigned long bSuccessful );
	void OnAgeMonthEntryComplete ( unsigned long bSuccessful );
	void OnConsoleCodeEntryComplete ( unsigned long bSuccessful );
	void OnConfirmPasswordInputComplete ( unsigned long bSuccessful );
	void OnPasswordInputComplete ( unsigned long bSuccessful );
	void OnEmailInputComplete ( unsigned long bSuccessful );
	void ConsolePlayerInput ( struct FScriptDelegate OnInputCompleteDelegate, struct FString TitleText, struct FString DescriptionText, unsigned char KeyboardType, int MaxLength );
	bool ValidateConfirmPassword ( );
	bool ValidatePassword ( );
	bool ValidateEmail ( );
	bool ValidateAge ( int Month, int Day, int Year );
	void UpdateTooltips ( );
	void UpdateSignInStatus ( );
	void UpdateShiftUrl ( );
	void UpdatePlayerName ( );
	void ReturnToWelcomeScreen ( );
	bool PopScreen ( );
	void PushScreen ( struct FString Screen );
	void HandleBack ( );
	bool OnCodeRedemptionSuccessClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void HandleCodeRedeemed ( unsigned char Result, struct FString CustomTitle, struct FString CustomBody );
	void HandleResetPassword ( unsigned char Result );
	void HandleAccountSignUp ( unsigned char Result );
	void HandleAgeGate ( unsigned char Result );
	void HandleAccountSignIn ( unsigned char Result );
	bool HandleInitializedTimeoutClicked ( class UWillowGFxDialogBox* DialogBox, int ControllerId );
	void HandleInitializedTimeout ( );
	void HandleInitialized ( unsigned char InitializedResult );
	void eventOnClose ( );
	void extConfigureForViewOffers ( );
	void ResetSparkAndHideMovie ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void OnConsoleInputComplete ( unsigned long bUserCancelled );
	struct FString GetRegion ( );
	bool IsKeyValid ( struct FString Key );
	void GetCurrentDate ( int* Month, int* Day, int* Year );
};

UClass* UGearboxAccountGFxMovie::pClassPointer = NULL;

// Class WillowGame.HashDisplayGFxMovie
// 0x0070 (0x02D4 - 0x0264)
class UHashDisplayGFxMovie : public UWillowGFxMovie
{
public:
	class AWillowInventoryManager*                     WInvMgr;                                          		// 0x0264 (0x0004) [0x0000000000000000]              
	class UHashDisplayGFxDefinition*                   HashDisplayDef;                                   		// 0x0268 (0x0004) [0x0000000000000000]              
	class UGFxTextListContainer*                       LeftSideTextList;                                 		// 0x026C (0x0004) [0x0000000000000000]              
	class UGearboxRenderTextureManager*                RTM;                                              		// 0x0270 (0x0004) [0x0000000000000000]              
	class UTexture*                                    Card1Tex;                                         		// 0x0274 (0x0004) [0x0000000000000000]              
	class UMeshComponent*                              Card1Mesh;                                        		// 0x0278 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FSortFilterConfiguration >          SortConfigurations;                               		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LeftSideSortConfigIndex;                          		// 0x0288 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           UsedInvTypes;                                     		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           UsedManufacturers;                                		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           UsedWeaponTypes;                                  		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           EquippedLabels;                                   		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EmptySlotText;                                    		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStatefulInputKey__Delegate;                   		// 0x02C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5304 ];

		return pClassPointer;
	};

	void ConfigureForPlayer ( float ControllerId );
	void FadePopup_AS ( );
	void ShowPopup_AS ( struct FString PopupText, struct FString PopupTitle );
	void ShowPopup ( struct FString PopupText, struct FString PopupTitle );
	void SetAmmoCount ( struct FString FlashString, class UResourceDefinition* ResourceDef );
	void SetAllAmmoCounts ( );
	void ToggleSort ( unsigned char Direction );
	void UpdateCardPanelWithCurrentActiveListEntry ( );
	void UpdateCardPanel ( int CardIndex, class AWillowInventory* MainThing, class AWillowInventory* OtherThing );
	struct FString GetHashDisplayStringForItem ( struct FItemDefinitionData ItemDefData );
	struct FString GetHashDisplayStringForWeapon ( struct FWeaponDefinitionData WeapDefData );
	void MoveHighlightBar ( unsigned char Dir );
	void SortContainer ( class UGFxTextListContainer* Container );
	void SetupContainerWithData ( class UGFxTextListContainer* Container, TArray< class AWillowInventory* >* Things );
	void StartClosing ( );
	void extUpdateLeftListSize ( int NewSize );
	void extPopupFading ( );
	void SetCredits_Wrapper ( int Credits );
	void SetCredits ( int Credits );
	void extSetupScreen ( );
	void HandleMove ( struct FName ukey, unsigned char uevent );
	void PopupStateInputKey ( struct FName ukey, unsigned char uevent );
	void NormalStateInputKey ( struct FName ukey, unsigned char uevent );
	bool MainInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	void OnStatefulInputKey ( struct FName ukey, unsigned char uevent );
};

UClass* UHashDisplayGFxMovie::pClassPointer = NULL;

// Class WillowGame.ItemPickupGFxMovie
// 0x005C (0x02C0 - 0x0264)
class UItemPickupGFxMovie : public UWillowGFxMovie
{
public:
	class UMaterial*                                   MatSrc;                                           		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Particle;                                         		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParticleMatParamName;                             		// 0x026C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MatTexParamName;                                  		// 0x0274 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TallItemZOffsetPercentage;                        		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowHUD*                                  MyHUDOwner;                                       		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    MyPSC;                                            		// 0x0284 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   MyMati;                                           		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextureRenderTarget2D*                      MyRenderTexture;                                  		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture*                                    PickupTex;                                        		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMeshComponent*                              PickupMesh;                                       		// 0x0294 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AWillowInventory*                            CompareAgainstThing;                              		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bReadyToDisplay : 1;                              		// 0x029C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShouldGetCompareAgainstThing : 1;                		// 0x029C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                SplitIndex;                                       		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     WeapTexName;                                      		// 0x02A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ItemCardHeight;                                   		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnItemCardHeightCalculatedHandler__Delegate;    		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5306 ];

		return pClassPointer;
	};

	void InitFromDefinition ( );
	void EnableThumbnail ( );
	void extOnItemCardHeightCalculated ( float NewHeight );
	void extReadyForInventoryInfo ( struct FString Path );
	void UpdateCompareAgainstThing ( );
	class AWillowInventory* GetCompareAgainstThing ( );
	void Show ( unsigned long bShow );
	void InitializeFrom ( class UGearboxGFxMovie* SrcMovie );
	void CreateBackupRenderTarget ( );
	void SetOnItemCardHeightCalculatedHandler ( class UGFxObject* Context, struct FScriptDelegate F );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	void OnItemCardHeightCalculatedHandler ( float NewHeight );
};

UClass* UItemPickupGFxMovie::pClassPointer = NULL;

// Class WillowGame.OnlineMessageGFxMovie
// 0x0014 (0x0278 - 0x0264)
class UOnlineMessageGFxMovie : public UWillowGFxMovie
{
public:
	class UGFxObject*                                  BlockingMessageClip;                              		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  NonBlockingMessageClip;                           		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     BlockingSubtitle;                                 		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5308 ];

		return pClassPointer;
	};

	void extOnHideBegin ( class UGFxObject* Clip );
	void extOnlineMessageOnLoad ( struct FString blockingPath, struct FString nonBlockingPath );
	void UpdateAspectRatio ( );
	void HACK_DontActuallyBlock ( );
	void SetBlocking ( unsigned long bBlocking );
	bool IsBlocking ( );
	void DisplayMessageInternal ( struct FString Message, unsigned long bShowBusyIndicator );
	void HideBlocking ( );
	void Hide ( );
	void AppendSubtitle ( struct FString Subtitle, struct FString* Message );
	void DisplayMessageAndSubtitle ( struct FString Message, struct FString Subtitle );
	void DisplayMessage ( struct FString Message );
	void DisplayBlockingMessage ( struct FString Message );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UOnlineMessageGFxMovie::pClassPointer = NULL;

// Class WillowGame.TextChatGFxMovie
// 0x0004 (0x0268 - 0x0264)
class UTextChatGFxMovie : public UWillowGFxMovie
{
public:
	class UGFxObject*                                  ChatObj;                                          		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5310 ];

		return pClassPointer;
	};

	void extTextChatOnLoad ( struct FString TargetPath );
	void AddChatMessageInternal ( struct FString PlayerName, struct FString msg );
	bool HandleTextChatInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	struct FString GetChatObjText ( );
	void StopTextChatInternal ( );
	void StartTextChatInternal ( );
	struct FString GetTimestampString ( struct FString TimeFormat );
	void AddChatMessage ( class APlayerReplicationInfo* PRI, struct FString msg );
	void StartTextChat ( );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UTextChatGFxMovie::pClassPointer = NULL;

// Class WillowGame.WillowGFxDialogBox
// 0x0090 (0x02F4 - 0x0264)
class UWillowGFxDialogBox : public UWillowGFxMovie
{
public:
	TArray< struct FDialogBoxLayout >                  Layouts;                                          		// 0x0264 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FDialogBoxButton >                  Buttons;                                          		// 0x0270 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DlgCaptionMarkup;                                 		// 0x027C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DlgTextMarkup;                                    		// 0x0288 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       CancelButtonTag;                                  		// 0x0294 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       DialogResult;                                     		// 0x029C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSelection;                                 		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AutoLocFile;                                      		// 0x02A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     AutoLocSection;                                   		// 0x02B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bAutoLocEnabled : 1;                              		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bHasTips : 1;                                     		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAllowNonOwnerInput : 1;                          		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNoCancel : 1;                                    		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FString                                     DefaultTooltips;                                  		// 0x02C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStorageDeviceChanged__Delegate;               		// 0x02D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnButtonClicked__Delegate;                      		// 0x02DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHandleInputKey__Delegate;                     		// 0x02E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5312 ];

		return pClassPointer;
	};

	void SetViewScaleMode ( unsigned char SM );
	struct FString GetFallbackLocSection ( );
	struct FString GetFallbackLocFile ( );
	void SetButtonCaption ( int ButtonIndex, struct FString NewCaption );
	void SetQuadrant ( unsigned char ControllerId );
	void SetAllowNonOwnerInput ( unsigned long InAllowNonOwnerInput );
	void StorageDeviceChanged ( unsigned char ControllerId, unsigned long bIsValid );
	void SetTooltips ( struct FString TooltipText );
	void ShowTooltips ( unsigned long bShow );
	class UWillowGFxDialogBox* DisplayBlockingBox ( struct FString File, struct FString Section );
	void DisplayCustomYesNoBox ( struct FString CaptionFile, struct FString CaptionSection, struct FString CaptionKey, struct FString PromptFile, struct FString PromptSection, struct FString PromptKey, struct FScriptDelegate OnClicked );
	void DisplayYesNoBox ( struct FString File, struct FString Section, struct FScriptDelegate OnClicked, struct FString CaptionPrefix );
	class UWillowGFxDialogBox* DisplayOkBoxTextFromSpark ( struct FString File, struct FString Section, struct FScriptDelegate OnClicked, struct FString CustomCaption, struct FString CustomPrompt );
	class UWillowGFxDialogBox* DisplayOkBox ( struct FString File, struct FString Section, struct FScriptDelegate OnClicked );
	void ApplySelection ( );
	void OnWidgetClicked ( int ButtonIndex, int ControllerId );
	void OnWidgetFocused ( int ButtonIndex );
	void OnWidget4Clicked ( struct FEventData Data );
	void OnWidget3Clicked ( struct FEventData Data );
	void OnWidget2Clicked ( struct FEventData Data );
	void OnWidget1Clicked ( struct FEventData Data );
	void OnWidget0Clicked ( struct FEventData Data );
	void OnWidget4Focused ( struct FEventData Data );
	void OnWidget3Focused ( struct FEventData Data );
	void OnWidget2Focused ( struct FEventData Data );
	void OnWidget1Focused ( struct FEventData Data );
	void OnWidget0Focused ( struct FEventData Data );
	void AddEventListenersForWidget ( class UGFxClikWidget* Widget, int ButtonIndex );
	void ApplyFlashButtons ( );
	int GetWidgetIndex ( int LogicalIndex );
	int GetLogicalIndex ( int WidgetIndex );
	void ApplyFlashSelection ( );
	void ApplyFlashText ( );
	void ApplyLayout ( );
	void SetDefaultButton ( struct FName ButtonTag, unsigned long bSetCancelButton );
	void ReplaceDialogCaption ( struct FString Replace, struct FString With );
	void ReplaceDialogText ( struct FString Replace, struct FString With );
	bool SetLayout ( struct FName LayoutTag );
	bool SetButtonTip ( struct FName ButtonTag, struct FString TipText );
	bool SetButtonCallback ( struct FName ButtonTag, struct FScriptDelegate OnClicked );
	bool AutoAppendButton ( struct FName ButtonTag, struct FScriptDelegate OnClicked );
	bool AutoLoc ( struct FString* Key );
	void AutoLocEnablePrompt ( struct FString File, struct FString Section, struct FString Key );
	void AutoLocEnableCaption ( struct FString File, struct FString Section, struct FString Key );
	void AutoLocEnable ( struct FString File, struct FString Section );
	bool AppendButton ( struct FName ButtonTag, struct FString Caption, struct FString TipText, struct FScriptDelegate OnClicked );
	void ClearButtons ( );
	void SetText ( struct FString CaptionMarkup, struct FString TextMarkup );
	void Accepted ( int ControllerId );
	void Cancelled ( int ControllerId );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	bool OnHandleInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	bool OnButtonClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void OnStorageDeviceChanged ( unsigned long bIsValid, class UWillowGFxDialogBox* Dlg );
};

UClass* UWillowGFxDialogBox::pClassPointer = NULL;

// Class WillowGame.WillowGFxMovie3D
// 0x012C (0x0390 - 0x0264)
class UWillowGFxMovie3D : public UWillowGFxMovie
{
public:
	class UWillowGFxMovie3DDefinition*                 My3DDefinition;                                   		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFullscreenMovie : 1;                             		// 0x0268 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bApplyHUDScale : 1;                               		// 0x0268 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNoSplitscreenPanning : 1;                        		// 0x0268 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNoSplitscreenScaling : 1;                        		// 0x0268 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNeedsMatricesUpdated : 1;                        		// 0x0268 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDidHorizontalSplitscreenPanningLastTick : 1;     		// 0x0268 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bAlwaysHideInCinematicMode : 1;                   		// 0x0268 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	struct FVector2D                                   SplitRegionOrg;                                   		// 0x026C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   SplitRegionExt;                                   		// 0x0274 (0x0008) [0x0000000000000000]              
	struct FMap_Mirror                                 ChainedObjectMap;                                 		// 0x027C (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class UGFxObject* >                        RedundantClipArray;                               		// 0x02B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  FocusObject;                                      		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FocusOffset;                                      		// 0x02C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     InterpFocusOffset;                                		// 0x02D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGFxObject* >                        SlidingObjects;                                   		// 0x02E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        SlidingObjectMetrics;                             		// 0x02EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FVector >                           SlidingObjectOrigins;                             		// 0x02F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0304 (0x000C) MISSED OFFSET
	struct FMatrix                                     CachedViewMat;                                    		// 0x0310 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FMatrix                                     CachedProjMat;                                    		// 0x0350 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5314 ];

		return pClassPointer;
	};

	void extGenericButtonClicked ( struct FString ActionName );
	void InitForConsole ( );
	void InitForPC ( );
	void InitForPlatform ( );
	bool eventFilterAxisInput ( int ControllerId, struct FName Key, float Delta, float DeltaTime );
	bool eventFilterButtonInput ( int ControllerId, struct FName ButtonName, unsigned char InputEvent );
	float GetDynamicFOVScalar ( );
	float GetHUDElemScale ( );
	struct FVector2D GetHUDScale ( );
	class AWillowPlayerController* GetPrimaryPlayerWPC ( );
	bool IsPropTweening ( class UGFxObject* Clip, struct FString PropertyName );
	struct FASValue GetMaybeTweenedProperty ( class UGFxObject* Clip, struct FString PropertyName );
	struct FVector2D GetViewportScale ( );
	struct FVector2D GetViewportDimensions ( );
	class UGameViewportClient* GetViewport ( );
	struct FVector2D GetMovieDimensions ( );
	void ClearSplitscreenPanningCache ( );
	void ResetSlidingObjects ( );
	void UpdateSlidingObjects ( );
	void AddSlidingObject ( class UGFxObject* Slider, class UGFxObject* Metric );
	void ClampFocusOffset ( );
	void UpdateFocusOffset ( );
	void FocusOn ( class UGFxObject* Thing );
	class UGFxObject* GetParentClip ( class UGFxObject* Thing );
	void AddClipToMap ( class UGFxObject* Thing );
	int GetKeyFor ( class UGFxObject* Thing );
	bool DoVerticalSplitscreenPanning ( );
	bool DoHorizontalSplitscreenPanning ( );
	struct FRotator Get3DRotationOffset ( );
	struct FVector Get3DLocationOffset ( );
	void Set3DMatrices ( );
	void InitFromDefinition ( );
	void eventOnSetViewport ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UWillowGFxMovie3D::pClassPointer = NULL;

// Class WillowGame.CharacterSelectionReduxGFxMovie
// 0x00F0 (0x0480 - 0x0390)
class UCharacterSelectionReduxGFxMovie : public UWillowGFxMovie3D
{
public:
	float                                              FadeInTimeInSeconds;                              		// 0x0390 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FadeOutTimeInSeconds;                             		// 0x0394 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UCharacterSelectionGFxObject*                CharacterSelectClip;                              		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCharacterCustomizationMenuGFxObject*        CustomizationMenu[ 0x2 ];                         		// 0x039C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCharacterSelectionCustomizationListGFxObject* CustomizationList[ 0x2 ];                         		// 0x03A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UPlayerNameIdentifierDefinition* >   SelectableCharacters;                             		// 0x03AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCustomizationDefinition*                    EquippedHeadCustomization[ 0x2 ];                 		// 0x03B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    EquippedSkinCustomization[ 0x2 ];                 		// 0x03C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    PreviewHeadCustomization[ 0x2 ];                  		// 0x03C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    PreviewSkinCustomization[ 0x2 ];                  		// 0x03D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APlayerStandIn*                              StandIn[ 0x2 ];                                   		// 0x03D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UCustomizationDefinition* >          PrimaryPlayerHeadCustomizations;                  		// 0x03E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          PrimaryPlayerSkinCustomizations;                  		// 0x03EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          SplitPlayerHeadCustomizations;                    		// 0x03F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          SplitPlayerSkinCustomizations;                    		// 0x0404 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SelectedCharacterIndex[ 0x2 ];                    		// 0x0410 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentUIState[ 0x2 ];                            		// 0x0418 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedEntryIdx[ 0x2 ];                          		// 0x0420 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentPlayerEnteringName;                        		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     TimerCaption;                                     		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingMessage;                                   		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectCharMessage;                                		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              HACK_NextInputTime;                               		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      CachedIsWidescreen : 1;                           		// 0x0454 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCheckPauseState : 1;                             		// 0x0454 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bChangingPrimaryStandInPosition : 1;              		// 0x0454 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bChangingSplitStandInPosition : 1;                		// 0x0454 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class UWillowPauseTicker*                          TimerPauseTicker;                                 		// 0x0458 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         UseCurrentSaveGameDlg;                            		// 0x045C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ConfirmQuitDlg;                                   		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxLobbyLoadCharacter*                LoadCharacterLobby;                               		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousStartGameTimer;                           		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AdjustStandInDebugMessageKey;                     		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviewIndex[ 0x2 ];                              		// 0x0470 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastOfferPlayerIndex;                             		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         PurchaseDialog;                                   		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5316 ];

		return pClassPointer;
	};

	void extOnFadeInComplete ( );
	void extCharacterSelectOnLoad ( struct FString TargetPath, struct FString P1CustomizationMenuTargetPath, struct FString P2CustomizationMenuTargetPath, struct FString P1CustomizationListTargetPath, struct FString P2CustomizationListTargetPath );
	void CheckForStartFadeIn ( );
	void FindAndViewCharacterSelectCamera ( );
	void RegisterStandIns ( );
	void ApplyPriorityVisibilityEffect ( unsigned long bRemoveEffect );
	void ApplyPriorityBlurEffect ( unsigned long bRemoveEffect );
	void CharacterLoadCanceled ( );
	void CharacterLoadComplete ( struct FLoadInfo LI, int PlayerIndex );
	void OpenCharacterSelect ( int PlayerIndex );
	void AppendSelectTooltipSuffix ( int PlayerIndex, struct FString* TooltipString );
	void AppendTooltipPlayerRestriction ( unsigned long bAvailableToP1, unsigned long bAvailableToP2, struct FString* TooltipString );
	void AppendTooltipSpacing ( int TooltipCount, struct FString* Tooltip );
	void UpdateTooltips ( );
	void PopulateSkinCustomizationList ( int PlayerIndex );
	void PopulateHeadCustomizationList ( int PlayerIndex );
	bool IsTimerActive ( struct FName FuncName );
	void ClearTimer ( struct FName FuncName );
	void SetTimer ( float Rate, unsigned long bLoop, struct FName FuncName );
	bool HasNonLocalPlayers ( );
	void UpdateMessages ( );
	void UpdatePartySelections ( );
	void UpdatePlayerStandIn ( int PlayerIndex, class AWillowPlayerController* WPC, class UPlayerSaveGame* SaveGame );
	void UpdatePlayerSaveGameFromSelectedCharacter ( int PlayerIndex );
	void ClearLocalCustomizationsForPlayer ( class AWillowPlayerController* WPC );
	void UpdateSplitPlayerStandIn ( );
	void UpdatePrimaryPlayerStandIn ( );
	void UpdateCustomizations ( int PlayerIndex );
	void UpdateCharacterDisplay ( int PlayerIndex, int CharacterIndex, unsigned long bRefreshStandIn );
	void UpdateAspectRatio ( );
	void SetUIState ( int PlayerIndex, int NewState );
	void SetSelectedCharacterIndex ( int PlayerIndex, int NewSelectedIndex );
	void PromptQuit ( );
	bool OnQuitCanceled ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnQuitConfirmed ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	struct FString GetSelectedCharacterDefaultName ( int PlayerIndex );
	void ValidatePlayerName ( int PlayerIndex, struct FString PlayerName );
	void SetPlayerName ( int PlayerIndex, struct FString PlayerName );
	void OnPlayerNameInputFinished ( unsigned long bSuccessful );
	void InputName ( int PlayerIndex );
	void UpdateSkinPreview ( int PlayerIndex, class UCustomizationDefinition* CustomDef );
	void UpdateHeadPreview ( int PlayerIndex, class UCustomizationDefinition* CustomDef );
	void CancelSkinCustomization ( int PlayerIndex );
	void CancelHeadCustomization ( int PlayerIndex );
	void CommitSkinCustomization ( int PlayerIndex );
	void CommitHeadCustomization ( int PlayerIndex );
	void RecordCustomizationEventForPlayerIndex ( int PlayerIndex, class UCustomizationDefinition* Definition );
	void HandleCustomizationSelected ( int PlayerIndex, struct FString EventName, int EntryIndex );
	bool UsingGamepad ( );
	void HandleCustomizationMenuEntryClick ( int PlayerIndex, int EntryIndex );
	void HandleCharacterMouseOver ( int PlayerIndex, int CharacterIndex );
	void HandleCharacterClicked ( int ControllerId, int CharacterIndex );
	void PromptPlayerUseCurrentSaveGame ( class AWillowPlayerController* WPC, class UPlayerSaveGame* SaveGame );
	bool OnBeginGameWithCurrentCharacterDeclined ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnBeginGameWithCurrentCharacterConfirmed ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void DetermineStartingCharacterIndex ( );
	bool OnPurchaseCanceled ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void MarketplaceDownloadComplete ( );
	bool OnPurchaseRequest ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ConfirmCharacter ( int PlayerIndex );
	void CacheCustomizations ( int PlayerIndex );
	void DEBUG_AddDummyCharacters ( int NumDummyChars );
	void BuildCharacterList ( );
	bool IsUnownedDlcClass ( int SelectedCharIdx );
	int GetOfferIdForSelectedIndex ( int SelectedCharIdx );
	bool GetOfferIdForDlc ( class UDownloadableContentDefinition* DlcDef, int* OfferId );
	bool GetHasPurchaseInfoForDlc ( class UDownloadableContentDefinition* DlcDef );
	bool HandleChooseCustomizationInput ( int PlayerIndex, struct FName Key, unsigned char Event );
	bool HandleCustomizeCharacterInput ( int PlayerIndex, struct FName Key, unsigned char Event );
	bool HandleChooseCharacterInput ( int PlayerIndex, int ControllerId, struct FName Key, unsigned char Event );
	void NotifyPauseMenuOpened ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool FadeInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void eventOnTick ( );
	void eventOnClose ( );
	void BeginClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UCharacterSelectionReduxGFxMovie::pClassPointer = NULL;

// Class WillowGame.ItemInspectionGFxMovie
// 0x0130 (0x04C0 - 0x0390)
class UItemInspectionGFxMovie : public UWillowGFxMovie3D
{
public:
	class UItemInspectionGFxMovieDefinition*           MyInspDef;                                        		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartTime;                                        		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMeshComponent*                              MyInspectionMesh;                                 		// 0x0398 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWillowInventoryDefinition*                  InvDef;                                           		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    MeshRotation;                                     		// 0x03A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x03AC (0x0004) MISSED OFFSET
	struct FQuat                                       MeshRotationQuat;                                 		// 0x03B0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FQuat                                       MeshRotationPitchQuat;                            		// 0x03C0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FQuat                                       MeshRotationYawQuat;                              		// 0x03D0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentItemScale;                                 		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentOffset;                                    		// 0x03E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartFOV;                                         		// 0x03F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OffsetBounds;                                     		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDraggingMouse_LMB : 1;                           		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDraggingMouse_RMB : 1;                           		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bReverseIntroRotation : 1;                        		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bInvertIntroAlphaPower : 1;                       		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      CachedWidescreen : 1;                             		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bLBDown : 1;                                      		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bRBDown : 1;                                      		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bXDown : 1;                                       		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bRequestInFlight : 1;                             		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	struct FIntPoint                                   DragMouseLoc;                                     		// 0x03FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              MouseDragScale_Rotate;                            		// 0x0404 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseDragScale_Pan;                               		// 0x0408 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseWheelScale;                                  		// 0x040C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeyPanScale;                                      		// 0x0410 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     TooltipsText_Pan_Mouse;                           		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Pan_Controller;                      		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Rotate_Mouse;                        		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Rotate_Controller;                   		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Zoom_Mouse;                          		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Zoom_Controller;                     		// 0x0450 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Screenshot_Keyboard;                 		// 0x045C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Screenshot_Controller;               		// 0x0468 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipsText_Close;                               		// 0x0474 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FRotator                                    RandomIntroRotation;                              		// 0x0480 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RandomIntroAlphaPower;                            		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UItemCardGFxObject*                          ItemCard;                                         		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCellContentData                            CardContents;                                     		// 0x0494 (0x0010) [0x0000000000080000]              ( CPF_Component )
	int                                                ScreenShotCounter;                                		// 0x04A4 (0x0004) [0x0000000000000000]              
	struct FString                                     SerialNumberString;                               		// 0x04A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DemoPerkCode;                                     		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5318 ];

		return pClassPointer;
	};

	void ShowDemoPerkCreatedDialog ( unsigned long Success, struct FString Code );
	void HandleCreateDemoPerkResponse ( struct FSparkResult* Result );
	void SaveDemoPerk ( );
	void TrySaveDemoPerk ( );
	void eventUpdateTooltips ( );
	struct FQuat MakeQuatFromAxisAndAngle ( struct FVector Axis, float Angle );
	void HandleMouseDrag ( int dx, int DY );
	void StopMouseDrag ( unsigned long bRMB );
	void StartMouseDrag ( unsigned long bRMB );
	struct FBoxSphereBounds GetBoundsFor ( class UMeshComponent* MeshComponent );
	float GetCurrentMeshScale ( );
	struct FRotator GetCurrentMeshRotation ( );
	float IntroAlpha ( );
	bool PlayingIntro ( );
	void ScaleMesh ( float dz );
	void PanMesh ( float dx, float DY );
	void RotateMesh ( float dYaw, float dPitch );
	void eventOnClose ( );
	void InspectItem ( class AWillowInventory* Thing, int OverrideValue, unsigned char CurrencyType );
	bool HandleInputAxis ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void eventUpdateFrameForAspectRatio ( unsigned long bWidescreen );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UItemInspectionGFxMovie::pClassPointer = NULL;

// Class WillowGame.LANServerBrowserGFxMovie
// 0x0048 (0x03D8 - 0x0390)
class ULANServerBrowserGFxMovie : public UWillowGFxMovie3D
{
public:
	class ULANServerBrowserGFxObject*                  ServerBrowserObj;                                 		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsLanBrowser : 1;                                		// 0x0394 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSearchingForGames : 1;                           		// 0x0394 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUseDebugSearchResults : 1;                       		// 0x0394 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	struct FString                                     HeaderTextPath;                                   		// 0x0398 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipTextPath;                                  		// 0x03A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FOnlineGameSearchResult                     MatchmakingResult;                                		// 0x03B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPauseTicker*                          TimerPauseTicker;                                 		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      IncompatibleGameVersionsServerIndex;              		// 0x03BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      SortType;                                         		// 0x03C8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SortDirection;                                    		// 0x03C9 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FResultEntry >                      SortedResults;                                    		// 0x03CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5320 ];

		return pClassPointer;
	};

	struct FString GetFriendlyGameVersionString ( );
	void extLANServerBrowserOnLoad ( struct FString TargetPath, struct FString HeaderPath, struct FString VersionPath, struct FString TooltipPath );
	void HandleServerBrowserSortDirectionButtonClick ( class UGFxObject* EventObj );
	void HandleServerBrowserSortTypeButtonClick ( class UGFxObject* EventObj );
	struct FString GetSortDirectionString ( );
	struct FString GetSortString ( );
	void SetTooltips ( );
	void SetSearchingForGames ( unsigned long bSearching );
	void SetHeaderText ( );
	void SetBrowserType ( unsigned long bInIsLanBrowser );
	void SortResults ( );
	void PopulateSearchResults ( );
	void DebugGenerateSearchResults ( int NumResults );
	void SetSort ( unsigned char NewSortType, unsigned char NewSortDirection );
	void FilterResults ( );
	void OnFindGamesComplete ( unsigned long bWasSuccessful );
	void CancelGameSearch ( );
	void FindGames ( );
	void OnJoinMatchComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroyGameForMatchJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void JoinMatchmakingSession ( );
	void HandleServerBrowserItemClick ( int ServerIndex );
	unsigned char GetNextSortType ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void BeginClose ( );
	void eventOnClose ( );
	bool Start ( unsigned long bStartPaused );
};

UClass* ULANServerBrowserGFxMovie::pClassPointer = NULL;

// Class WillowGame.QuestAcceptGFxMovie
// 0x005C (0x03EC - 0x0390)
class UQuestAcceptGFxMovie : public UWillowGFxMovie3D
{
public:
	class UQuestAcceptGFxDefinition*                   MissionUIDef;                                     		// 0x0390 (0x0004) [0x0000000000000000]              
	class UGFxTextListContainer*                       MissionTextList;                                  		// 0x0394 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           MissionCategories;                                		// 0x0398 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UIMissionDirector*                           MissionDirector;                                  		// 0x03A4 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x03A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UIFocusable*                                 FocusSubject;                                     		// 0x03AC (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x03B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class AWillowAIPawn*                               ContextNPC;                                       		// 0x03B4 (0x0004) [0x0000000000000000]              
	int                                                RedeemableCount;                                  		// 0x03B8 (0x0004) [0x0000000000000000]              
	int                                                EligibleCount;                                    		// 0x03BC (0x0004) [0x0000000000000000]              
	int                                                InProgressCount;                                  		// 0x03C0 (0x0004) [0x0000000000000000]              
	TArray< struct FStatusMenuMissionEligibilityData > MissionList;                                      		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStatusMenuMissionEligibilityData > InProgressMissionList;                            		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMissionDefinition*                          MissionDefForRewardPage;                          		// 0x03DC (0x0004) [0x0000000000000000]              
	unsigned long                                      bAcceptedMission : 1;                             		// 0x03E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTurnedInPlotMission : 1;                         		// 0x03E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bSingleMissionDisplay : 1;                        		// 0x03E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UMissionRewardGFxObject*                     RewardObject;                                     		// 0x03E4 (0x0004) [0x0000000000000000]              
	int                                                WantsAcceptCounter;                               		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5322 ];

		return pClassPointer;
	};

	void extGenericButtonClicked ( struct FString ActionName );
	void eventOnTick ( );
	void InitForConsole ( );
	void InitForPC ( );
	void OnClosedOnDeath ( );
	void UpdateMissionList ( class UMissionDefinition* OnlyIfThisMissionIsAlreadyInTheList );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void MoveHighlight ( );
	void StopMovingHighlight ( );
	void StartMovingHighlight ( );
	void SetDescriptionScrollValue ( float NewScrollValue );
	void extSetDescriptionScrollValue ( float NewScrollValue );
	void extLogDown ( );
	void LogDown ( );
	void extLogUp ( );
	void LogUp ( );
	void ConditionallyScroll ( struct FString Direction );
	void SetFocus ( );
	void UpdateMissionTextList ( );
	void SetScrollArrows ( );
	void SetLevelAndDifficulty ( struct FString LevelText, struct FString Difficulty );
	void SetRewardsItem ( );
	void SetRewardsXP ( struct FString XPText );
	void SetPlayerXP ( struct FString XPText, int XPPercent );
	void SetRewardsTotalOtherCurrency ( int Amount );
	void SetRewardsTotalCredits ( int Credits );
	void SetPlayerDisplayedCredits ( int Credits );
	void SetPlayerTotalCredits ( int Credits );
	void eventOnClose ( );
	void extChoiceConfirmed ( );
	void extChoiceCancelled ( );
	void extHover ( int HoverIndex );
	void extLogListTrack ( int SlotIndex );
	void extLogListRollOver ( int SlotIndex );
	void extNavigateDown ( );
	void extNavigateUp ( );
	void extOnRolloverChoice ( int RewardChoice );
	void extOnFocusedChoice ( int RewardChoice );
	void AcceptReward ( int RewardChoice );
	void extOnClickedChoice ( int RewardChoice );
	bool HandleRewardInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void ShowNoRewardScreen ( class UMissionDefinition* Mission, unsigned char OldStatus );
	void DisplayRewardsPage ( struct FPendingMissionRewardData MissionReward );
	void extCompleteConfirmed ( );
	void extAcceptConfirmed ( );
	void SetRewardCard ( class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC );
	void SetInnerReward ( class UGFxObject* InnerRewardClip, struct FMissionRewardPresentationData Presentation );
	TArray< struct FMissionRewardPresentationData > GetRewardPresentations ( class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC );
	void ProtectedFillOutCommonScreenDetails ( );
	void extFillOutQuestAllScreenDetails ( );
	int GetSelectedIndex ( );
	void UpdateMissionDetails ( );
	void GotoCorrectPartOfMovie ( unsigned long bDisplayChoiceIntro );
	void SetQuestTitle ( int Index, struct FString MissionName, struct FString IconType );
	void extPopulateQuestEntries ( );
	void QuestTitlesPrevFrame ( );
	void QuestTitlesNextFrame ( );
	void DetermineQuestEntries ( );
	bool HandleInputAxis ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	void HideTopPanel ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UQuestAcceptGFxMovie::pClassPointer = NULL;

// Class WillowGame.VehicleSpawnStationGFxMovie
// 0x00EC (0x047C - 0x0390)
class UVehicleSpawnStationGFxMovie : public UWillowGFxMovie3D
{
public:
	struct FPointer                                    VfTable_IIStreamingDataEvent;                     		// 0x0390 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UGFxObject*                                  VSSWrapperObj;                                    		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UVehicleFamilySelectorGFxObject*             VehicleFamilySelector;                            		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UVehicleChoiceInfoCardGFxObject*             VehicleChoiceInfoCard;                            		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UVehicleChoiceModuleGFxObject*               VehicleChoiceModule[ 0x2 ];                       		// 0x03A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UVehicleSpawnStationGFxDefinition*           MyVehicleSpawnStationDefinition;                  		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UVehicleFamilyDefinition* >          AvailableVehicleFamilyDefinitions;                		// 0x03AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UVehicleFamilyDefinition*                    DesiredFamilyDefinition;                          		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeStartedWaitingForFamilyChange;                		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChangeFamilyRequestMinWaitDuration;               		// 0x03C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ChangeFamilyRequestTimeOutDuration;               		// 0x03C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UVSSUIDefinition* >                  AvailableVehicleUIDefinitions;                    		// 0x03C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          AvailableVehicleSkinDefinitions;                  		// 0x03D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          SeenVehicleSkinDefinitions;                       		// 0x03E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      CurrentStage;                                     		// 0x03EC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                VehicleCellCount;                                 		// 0x03F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedModuleIndex;                              		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSmartVector                                ClientPawnLocationAtTeleportTime;                 		// 0x03F8 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SpawnVehicleLabel;                                		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RespawnVehicleLabel;                              		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeleportLabel;                                    		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoSkinAvailableLabel;                             		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoSkinSelectedLabel;                              		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnlockedText;                                     		// 0x0450 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bChoosingFamily : 1;                              		// 0x045C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      WaitingOnReplicatedData : 1;                      		// 0x045C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UWillowGFxMovie*                             WaitingOnDataDlg;                                 		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartTimeWaitingOnReplicatedData;                 		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AVehicleStandIn*                             PreviewActor[ 0x2 ];                              		// 0x0468 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartTime;                                        		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartFOV;                                         		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviewIndex;                                     		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5324 ];

		return pClassPointer;
	};

	void eventRunStreamingDataEvent ( struct FName EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, int IntParam, float FloatParam );
	void CloseOrReturnToFamilySelection ( );
	void extGenericButtonClicked ( struct FString ActionName );
	void InitForConsole ( );
	void InitForPC ( );
	bool HandleInputAxis ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	void UpdatePreview ( class UCustomizationDefinition* CustomDef );
	void CancelCustomization ( );
	void CommitCustomization ( );
	void extOnSkinCellClick ( struct FString EventName, int CellIndex );
	bool UsingGamepad ( );
	void extOnVehicleFamilyCellClick ( int CellIndex );
	void extOnVehicleCellHighlight ( int CellIndex );
	void extOnVehicleCellClick ( int CellIndex );
	void extOnSkinTypeButtonClick ( int ModuleIndex );
	void extOnVehicleTypeButtonClick ( int ModuleIndex );
	void extOnTeleportButtonClick ( int ModuleIndex );
	void extOnSpawnVehicleButtonClick ( int ModuleIndex );
	void extOnVehicleChoiceInfoCardLoad ( struct FString TargetPath, int InVehicleCellCount );
	void extOnVehicleChoiceModuleLoad ( struct FString TargetPath, int ModuleIndex );
	void extOnVehicleFamilySelectorLoad ( struct FString TargetPath );
	void extCacheVSSClip ( struct FString TargetPath );
	bool VehicleFamilyInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool SharedInfoCardInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool SkinChoiceInfoCardInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool VehicleChoiceInfoCardInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool HandleKeyDefaults ( int ControllerId, struct FName ukey, unsigned char uevent );
	void eventTrySetFocus ( int ModuleIndex, int ButtonIndex );
	void eventRefreshFocus ( );
	void eventConfigureTooltips ( );
	void ConfigureTooltipsInternal ( struct FString Tooltips );
	void eventConfigureVSSWrapper ( );
	void HideSkinInfoCard ( int ModuleIndex );
	void ShowSkinInfoCard ( int ModuleIndex );
	void HideVehicleInfoCard ( int ModuleIndex );
	void ShowVehicleInfoCard ( int ModuleIndex );
	void ConfigureSkinTypeChoices ( int ModuleIndex );
	void ConfigureVehicleTypeChoices ( int ModuleIndex );
	void AddVehicleChoices ( );
	void eventRefreshVehicleChoiceModule ( int ModuleIndex );
	class UVehicleChoiceModuleGFxObject* GetVehicleChoiceModule ( int ModuleIndex );
	bool VehicleExistsAndIsOccupied ( class UVehicleFamilyDefinition** OutSpawnedVehicleFamilyDef );
	void eventOnClose ( );
	void eventUpdatePreviewFromVSSUIDef ( int ModuleIndex, class UVSSUIDefinition* VehicleUIDef );
	void DestroyPreviewMeshes ( );
	void DestroyPreviewActors ( );
	void CreatePreviewActors ( );
	void eventShowPlayersMustExitMessage ( );
	void eventShowProcessingRequestMessage ( );
	void eventShowPleaseWaitMessage ( );
	void eventShowNoVehiclesMessage ( );
	bool eventStart ( unsigned long StartPaused );
	float GetCurrentMeshScale ( );
	float IntroAlpha ( );
	bool PlayingIntro ( );
	struct FBoxSphereBounds GetBoundsFor ( class UMeshComponent* MeshComponent );
	void InitVehicleChoiceModules ( );
	bool HandleVehicleFamilySelection ( );
	void SetCurrentStage ( unsigned char NewCurrentStage );
	void UpdateSkinsOnVehicleTypeChange ( int ModuleIndex );
	void CacheDefinitions ( int VehicleFamilyIndex );
	void CacheVehicleFamilies ( );
};

UClass* UVehicleSpawnStationGFxMovie::pClassPointer = NULL;

// Class WillowGame.WeaponScopeGFxMovie
// 0x005C (0x03EC - 0x0390)
class UWeaponScopeGFxMovie : public UWillowGFxMovie3D
{
public:
	class UWeaponScopeGFxDefinition*                   MyScopeDefinition;                                		// 0x0390 (0x0004) [0x0000000000000000]              
	class UHUDWidget_Crosshairs*                       CrosshairWidget;                                  		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedFLN_Housing;                                		// 0x0398 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedFLN_Stock;                                  		// 0x03A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedFLN_Grip;                                   		// 0x03B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedFLN_Collateral;                             		// 0x03BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedFLN_Crosshairs;                             		// 0x03C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedSFN;                                        		// 0x03D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CachedElementalName;                              		// 0x03E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5326 ];

		return pClassPointer;
	};

	void InitializeAsTelescope ( );
	void CloseScope ( );
	void InitCrosshair ( class AWillowWeapon* WWeapon );
	void InitElemental ( struct FString ElementalName, class UGFxObject* HousingClip );
	struct FString GetElementalName ( class AWillowWeapon* WWeapon );
	void InitializeFromWeapon ( class AWillowWeapon* WWeapon, unsigned long bDisplay );
	void ClearCached ( );
	class UManufacturerDefinition* GetManufacturerDefinitionFromWeaponPart ( class UWeaponPartDefinition* PartDef, class UManufacturerDefinition* DefaultDef );
	struct FString GetWeaponTypeNameForLinkage ( struct FString WeaponTypeLabel );
	struct FString GetManufacturerNameForLinkage ( struct FString ManufacturerLabel );
	struct FString GetLinkageName ( struct FString ScopePart, struct FString ManufacturerLabel, struct FString WeaponTypeLabel );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UWeaponScopeGFxMovie::pClassPointer = NULL;

// Class WillowGame.WillowGFxMovieCredits
// 0x0054 (0x03E4 - 0x0390)
class UWillowGFxMovieCredits : public UWillowGFxMovie3D
{
public:
	struct FString                                     ceStarted;                                        		// 0x0390 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     ceFinished;                                       		// 0x039C (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	class UCreditsGFxObject*                           Credits;                                          		// 0x03A8 (0x0004) [0x0000000000000000]              
	class UMontageGFxObject*                           Montage;                                          		// 0x03AC (0x0004) [0x0000000000000000]              
	class UCreditsDataProviderGFxObject*               DataProvider;                                     		// 0x03B0 (0x0004) [0x0000000000000000]              
	class UCreditsGFxDefinition*                       CreditsDef;                                       		// 0x03B4 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  MiddlewareTexture;                                		// 0x03B8 (0x0004) [0x0000000000000000]              
	struct FString                                     MiddlewareTextureLinkageName;                     		// 0x03BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bMiddlewareTextureLoaded : 1;                     		// 0x03C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSplatTextureLoaded : 1;                          		// 0x03C8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bClosing : 1;                                     		// 0x03C8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UTexture2D*                                  SplatTexture;                                     		// 0x03CC (0x0004) [0x0000000000000000]              
	struct FString                                     SplatTextureLinkageName;                          		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ClosingTimeRemaining;                             		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AxisResetCounter;                                 		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5328 ];

		return pClassPointer;
	};

	bool HandleInputAxis ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void BeginClosing ( );
	void extCreditsFinished ( );
	void extOnSplatClipOnLoad ( struct FString TextureLinkageName );
	void eventOnSplatTextureLoaded ( );
	void ClearSplatTexture ( );
	void LoadSplatTexture ( );
	void extOnMiddlewareClipOnLoad ( struct FString TextureLinkageName );
	void eventOnMiddlewareTextureLoaded ( );
	void ClearMiddlewareTexture ( );
	void LoadMiddlewareTexture ( );
	void extInitMontage ( struct FString PathToMontageObject, struct FString TextureLinkageName );
	void extInitCredits ( struct FString PathToCreditsObject, class UGFxObject* DataProviderObject );
	void eventOnTick ( );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UWillowGFxMovieCredits::pClassPointer = NULL;

// Class WillowGame.WillowGFxThirdPersonMovie
// 0x00AC (0x043C - 0x0390)
class UWillowGFxThirdPersonMovie : public UWillowGFxMovie3D
{
public:
	class UWillowGFxThirdPersonDefinition*             MyThirdPersonDefinition;                          		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              CameraYaw;                                        		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraPitch;                                      		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraRotation;                                   		// 0x039C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraLocation;                                   		// 0x03A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraSplitOffset;                                		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraSplitSpread;                                		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CameraFocusBoneName;                              		// 0x03BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraFocusYaw;                                   		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCameraPitchTime;                              		// 0x03C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAdjustedCameraLastTick : 1;                      		// 0x03CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bClosing : 1;                                     		// 0x03CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bControlModeAdjustsMenu : 1;                      		// 0x03CC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNeedsCamRotUpdate : 1;                           		// 0x03CC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDoCameraCollision : 1;                           		// 0x03CC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHideMeshInVertSplit : 1;                         		// 0x03CC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDraggingMouse_Camera : 1;                        		// 0x03CC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bDoMenuSpring : 1;                                		// 0x03CC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	float                                              MenuYaw;                                          		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MenuPitch;                                        		// 0x03D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    MenuRotation;                                     		// 0x03D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MenuLocation;                                     		// 0x03E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CloseTime;                                        		// 0x03F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CloseCamLoc;                                      		// 0x03F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CloseCamRot;                                      		// 0x0400 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MenuSpringYaw;                                    		// 0x040C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MenuSpringPitch;                                  		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    MenuSpringRotation;                               		// 0x0414 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FIntPoint                                   DragMouseLoc_Camera;                              		// 0x0420 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              MouseDragScale_Camera;                            		// 0x0428 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseDrag_Region_Left;                            		// 0x042C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseDrag_Region_Right;                           		// 0x0430 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseDrag_Region_Top;                             		// 0x0434 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MouseDrag_Region_Bottom;                          		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5330 ];

		return pClassPointer;
	};

	void HandleMouseDrag_Camera ( int dx, int DY );
	struct FRotator Get3DRotationOffset ( );
	struct FVector Get3DLocationOffset ( );
	void ToggleControlMode ( );
	void EnableControl ( unsigned long bEnable );
	void SaveTabView ( );
	void StopMouseDrag ( );
	void TryStartMouseDrag ( );
	bool HandleKeyDefaults ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool HandleInputAxisPlayerCameraRotation ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	bool HandleCameraInputAxis ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	void UpdateDesiredCameraPosition ( );
	void eventOnClose ( );
	void eventFinishClosing ( );
	void eventBeginClosing ( );
	int eventGetCurrentTab ( );
	bool eventStart ( unsigned long StartPaused );
	bool AmITheStatusMenu ( );
};

UClass* UWillowGFxThirdPersonMovie::pClassPointer = NULL;

// Class WillowGame.CustomizationGFxMovie
// 0x0104 (0x0540 - 0x043C)
class UCustomizationGFxMovie : public UWillowGFxThirdPersonMovie
{
public:
	class UCharacterCustomizationMenuGFxObject*        CharacterCustomizationMenu;                       		// 0x043C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCharacterCustomizationInfoCardGFxObject*    CharacterCustomizationInfoCard;                   		// 0x0440 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SkillBranchDescriptions[ 0x3 ];                   		// 0x0444 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          HeadCustomizations;                               		// 0x0468 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          SeenHeadCustomizations;                           		// 0x0474 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          SkinCustomizations;                               		// 0x0480 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          SeenSkinCustomizations;                           		// 0x048C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCustomizationDefinition*                    EquippedHeadCustomization;                        		// 0x0498 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    EquippedSkinCustomization;                        		// 0x049C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    PreviewHeadCustomization;                         		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCustomizationDefinition*                    PreviewSkinCustomization;                         		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSelectingFromList : 1;                           		// 0x04A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bHasSpentSkillPoints : 1;                         		// 0x04A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                SelectedEntryIdx;                                 		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     StringPreKeyboardUI;                              		// 0x04B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxNameLength;                                    		// 0x04BC (0x0004) [0x0000000000000000]              
	struct FString                                     HeaderText;                                       		// 0x04C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoValidHeadCaption;                               		// 0x04CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoValidSkinCaption;                               		// 0x04D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnlockedText;                                     		// 0x04E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnlockedHeadsNumbersText;                         		// 0x04F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     UnlockedSkinsNumbersText;                         		// 0x04FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     TooltipsPath;                                     		// 0x0508 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PreviewIndex;                                     		// 0x0514 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PreviewType;                                      		// 0x0518 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          UnauthorizedHeadCustomizations;                   		// 0x0524 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UCustomizationDefinition* >          UnauthorizedSkinCustomizations;                   		// 0x0530 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCustomizationDefinition*                    PotentialCustomizationForPurchase;                		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5332 ];

		return pClassPointer;
	};

	void MarketplaceDownloadComplete ( );
	bool GetOfferIdForCustomization ( class UCustomizationDefinition* Customization, int* OfferIdForCustomization );
	void extGenericButtonClicked ( struct FString ActionName );
	void InitForConsole ( );
	void InitForPC ( );
	int eventGetCurrentTab ( );
	void extInitSkinInfoCard ( );
	void extInitHeadInfoCard ( );
	void extInitRespecInfoCard ( );
	void extInitNameInfoCard ( );
	void extInitPlayerClassDisplay ( struct FString TextFieldTargetPath );
	void SetToolTipsForPurchase ( );
	void SetTooltips ( );
	void extCharacterCustomizationOnLoad ( struct FString InfoCardTargetPath, struct FString MenuTargetPath, struct FString TooltipsTargetPath );
	void ValidatePlayerName ( struct FString PlayerName );
	void SetPlayerName ( struct FString PlayerName );
	void OnPlayerNameInputFinished ( unsigned long bSuccessful );
	void InputName ( );
	void OnCurrencyChanged ( struct FCurrencyState ChangedCurrency );
	void OnSkillTreeReset ( int NewPoints );
	void SetUnlockedText_Skins ( );
	void SetUnlockedText_Heads ( );
	void UpdateInfoCard ( int EntryIndex );
	void UpdateSkinPreview ( class UCustomizationDefinition* CustomDef );
	void UpdateHeadPreview ( class UCustomizationDefinition* CustomDef );
	void CancelSkinCustomization ( );
	void CancelHeadCustomization ( );
	bool OnPurchaseCanceled ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnPurchaseRequest ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool ShowMarketplaceOfferFor ( class AWillowPlayerController* WPC, int OfferId );
	bool ShowPurchaseDialog ( class AWillowPlayerController* WPC, struct FScriptDelegate PurchaseRequested, struct FScriptDelegate PurchaseCanceled, class UWillowGFxDialogBox** DialogOwner );
	void CommitSkinCustomization ( class UCustomizationDefinition* TargetCustomization );
	void CommitHeadCustomization ( class UCustomizationDefinition* TargetCustomization );
	void HandleCustomizationEvent ( struct FString CustomizationType, struct FString EventName, int ItemIndex );
	bool UsingGamepad ( );
	void HandleMenuEntryRollOver ( int EntryIndex );
	void HandleMenuEntryFocus ( int EntryIndex );
	void HandleMenuEntryClick ( int EntryIndex );
	void CacheCustomizations ( );
	void CacheSkillBranchDescriptions ( );
	bool MainInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void OnClose ( );
	void BeginClosing ( );
	bool eventStart ( unsigned long StartPaused );
	struct FString GetSonyTitleID ( );
};

UClass* UCustomizationGFxMovie::pClassPointer = NULL;

// Class WillowGame.FastTravelStationGFxMovie
// 0x0098 (0x04D4 - 0x043C)
class UFastTravelStationGFxMovie : public UWillowGFxThirdPersonMovie
{
public:
	TArray< struct FString >                           LocationDisplayNames;                             		// 0x043C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           LocationDisplayNamesAlphabetical;                 		// 0x0448 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned long >                            LocationIsHeader;                                 		// 0x0454 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           LocationStationStrings;                           		// 0x0460 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UFastTravelStationDefinition* >      LocationStationDefinitions;                       		// 0x046C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UFastTravelStationDefinition*                CurrentWaypointStationDef;                        		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFastTravelStationGFxObject*                 FastTravelClip;                                   		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  FastTravelLocationListPanelClip;                  		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InitialSelectionIndex;                            		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousSelectionIndex;                           		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SortMode;                                         		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LocationsHeader;                                  		// 0x0490 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocationsHeaderAlphabetical;                      		// 0x049C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocationMissionTeaserHeader;                      		// 0x04A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocationMissionTeaser;                            		// 0x04B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              NextWaypointCheckTime;                            		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastSelectionIndex;                               		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __ListPanelItemDelegate__Delegate;                		// 0x04C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5334 ];

		return pClassPointer;
	};

	void eventSetCurrentWaypoint ( int WaypointIndex );
	void extGenericButtonClicked ( struct FString ActionName );
	void InitForConsole ( );
	void InitForPC ( );
	void extRequestLocationMissionData ( int LocationIndex );
	void extRegisterMapLocationBlob ( struct FString TargetPath );
	void extEnterTeleportScreen ( struct FString TargetPath );
	void extActivate ( int LocationIndex );
	void eventBeginClosing ( );
	void extPlayItemChangeSound ( );
	void BuildDLCMapLocations ( TArray< struct FString >* DLCMapLocations );
	void ProcessDLCMovies ( );
	struct FString GetFastTravelHeader ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void BuildMissionDataForLocation ( int LocationIndex, TArray< struct FString >* MissionNames, TArray< int >* MissionType );
	void BuildLocationData ( );
	void eventOnClose ( );
	void HandleOpen ( );
	void UpdateLocationDisplayNamesAlphabetical ( int _waypointLocationIndex );
	void OverrideNavigation ( );
	void eventUpdateListPanelItemRenderers ( );
	void SetOnListPanelItemChangeDelegate ( struct FScriptDelegate InDelegate );
	void OnListPanelItemChange ( class UGFxObject* Obj );
	void OnListPanelItemChangeInternal ( int nIndex, class UGFxObject* Obj );
	void ScrollLocationListDown ( int nIndex );
	void ScrollLocationListUp ( int nIndex );
	void ListPanelItemDelegate ( class UGFxObject* Obj );
};

UClass* UFastTravelStationGFxMovie::pClassPointer = NULL;

// Class WillowGame.WillowInventoryGFxMovie
// 0x002C (0x0468 - 0x043C)
class UWillowInventoryGFxMovie : public UWillowGFxThirdPersonMovie
{
public:
	class UGearboxRenderTextureManager*                RTM;                                              		// 0x043C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCellContentData >                  CardContents;                                     		// 0x0440 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class AWillowInventory*                            FrozenThing;                                      		// 0x044C (0x0004) [0x0000000000000000]              
	unsigned char                                      FrozenThingType;                                  		// 0x0450 (0x0001) [0x0000000000000000]              
	TArray< struct FString >                           UsedInvTypes;                                     		// 0x0454 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWillowInventoryGFxDefinition*               MyInventoryDef;                                   		// 0x0460 (0x0004) [0x0000000000000000]              
	class AWillowInventoryManager*                     WInvMgr;                                          		// 0x0464 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5336 ];

		return pClassPointer;
	};

	void GetPlayerThings ( TArray< class AWillowInventory* >* Things );
	int GetTotalCredits ( );
	void EvaluateCurrentSelection ( );
	void OnPanelRollOver ( class UInventoryListPanelGFxObject* Panel, int ControllerId );
	class AWillowInventory* GetEquippedAnalogue ( class AWillowInventory* NavigatedThing );
	void PressedHotkeyNumber ( int HotkeyNum );
	void OnInventoryPanelSetActive ( class UBaseInventoryPanelGFxObject* PanelObject, unsigned long bActive );
	bool GetNextSortConfiguration ( class UInventoryListPanelGFxObject* PanelObject, int Delta, struct FSortFilterConfiguration* NewSortConfig );
	void GetPlayerPanelItems ( TArray< class AWillowInventory* >* Things );
	void FillOutListOfPlayerThings ( unsigned long bIncludeReadied, unsigned char MaxDroppability, TArray< class AWillowInventory* >* Things );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UWillowInventoryGFxMovie::pClassPointer = NULL;

// Class WillowGame.StatusMenuExGFxMovie
// 0x034C (0x07B4 - 0x0468)
class UStatusMenuExGFxMovie : public UWillowInventoryGFxMovie
{
public:
	class UStatusMenuGFxDefinition*                    StatusDef;                                        		// 0x0468 (0x0004) [0x0000000000000000]              
	class USkillTreeGFxDefinition*                     SkillDef;                                         		// 0x046C (0x0004) [0x0000000000000000]              
	struct FString                                     InventoryTabString;                               		// 0x0470 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LogTabString;                                     		// 0x047C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapTabString;                                     		// 0x0488 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LevelString;                                      		// 0x0494 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XPString;                                         		// 0x04A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NextString;                                       		// 0x04AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PoweredByString;                                  		// 0x04B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoMissionsString;                                 		// 0x04C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoClassModString;                                 		// 0x04D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EmptyInventorySlotText;                           		// 0x04DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AlreadyEquipped;                                  		// 0x04E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Trans;                                        		// 0x04F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Outpost;                                      		// 0x0500 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_POI;                                          		// 0x050C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Player;                                       		// 0x0518 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Buddy;                                        		// 0x0524 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Waypoint;                                     		// 0x0530 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Vss;                                          		// 0x053C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_BB;                                           		// 0x0548 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Health;                                       		// 0x0554 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Shop;                                         		// 0x0560 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Unknown;                                      		// 0x056C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Vehicle;                                      		// 0x0578 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_CustomWaypoint;                               		// 0x0584 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Leg_Customization;                                		// 0x0590 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_Replay;                         		// 0x059C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_Track;                          		// 0x05A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_Scroll;                         		// 0x05B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_Sort;                           		// 0x05C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_ViewWorldMissions;              		// 0x05CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_ViewMyMissions;                 		// 0x05D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_Ignore;                         		// 0x05E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_Unignore;                       		// 0x05F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionLogTooltip_Cancel;                         		// 0x05FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FStatusMenuMissionEligibilityData > ClientMissions;                                   		// 0x0608 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ClientActiveMissionIndex;                         		// 0x0614 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FStatusMenuMissionEligibilityData > WorldMissions;                                    		// 0x0618 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bShowWorldMissions : 1;                           		// 0x0624 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOnLeftSide : 1;                                  		// 0x0624 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFullyOpened : 1;                                 		// 0x0624 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasScreenToCleanup : 1;                          		// 0x0624 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bMissionUpdated : 1;                              		// 0x0624 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bHasReadiableWeapon : 1;                          		// 0x0624 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bHasReadiableShield : 1;                          		// 0x0624 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bHasReadiableGrenadeMod : 1;                      		// 0x0624 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bHasReadiableClassMod : 1;                        		// 0x0624 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bHasReadiableArtifact : 1;                        		// 0x0624 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bInListView : 1;                                  		// 0x0624 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bContextMenuUp : 1;                               		// 0x0624 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDisplayMarketingUnlockDialogOnNextTick : 1;      		// 0x0624 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bDraggingMouse : 1;                               		// 0x0624 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bShouldSaveGame : 1;                              		// 0x0624 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned char                                      MissionSortType;                                  		// 0x0628 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentScreen;                                    		// 0x0629 (0x0001) [0x0000000000000000]              
	int                                                MaxCapacity;                                      		// 0x062C (0x0004) [0x0000000000000000]              
	int                                                SlotsUsed;                                        		// 0x0630 (0x0004) [0x0000000000000000]              
	float                                              InventoryRefreshRate;                             		// 0x0634 (0x0004) [0x0000000000000000]              
	int                                                CachedMaxCapacity;                                		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NewSlots;                                         		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedMaxReadied;                                 		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxReadiedWeapons;                                		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCachedInvData >                    CachedInventory;                                  		// 0x0648 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USkillTreeGFxObject*                         SkillTreePanel;                                   		// 0x0654 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStatusMenuMapGFxObject*                     StatusMenuMap;                                    		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCellContentData                            EquippedContents[ 0x8 ];                          		// 0x065C (0x0080) [0x0000000000080000]              ( CPF_Component )
	TArray< class AWillowInventory* >                  BackpackThings;                                   		// 0x06DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AWillowInventory* >                  AllThings;                                        		// 0x06E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       CurrentCellName;                                  		// 0x06F4 (0x0008) [0x0000000000000000]              
	struct FName                                       LastMainAction;                                   		// 0x06FC (0x0008) [0x0000000000000000]              
	struct FString                                     PlayerName;                                       		// 0x0704 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ChangingCard;                                     		// 0x0710 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           UsedManufacturers;                                		// 0x0714 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           UsedWeaponTypes;                                  		// 0x0720 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           EquippedLabels;                                   		// 0x072C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSortFilterConfiguration                    CompareConfiguration;                             		// 0x0738 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSortFilterConfiguration >          SortConfigurations;                               		// 0x0748 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LeftSideSortConfigIndex;                          		// 0x0754 (0x0004) [0x0000000000000000]              
	struct FName                                       ScreenExitKey;                                    		// 0x0758 (0x0008) [0x0000000000000000]              
	class UGFxTextListContainer*                       MissionLogTextList;                               		// 0x0760 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           MissionCategories;                                		// 0x0764 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MoreArrowsDirection;                              		// 0x0770 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MoveHighlightRepeatRate;                          		// 0x077C (0x0004) [0x0000000000000000]              
	struct FIntPoint                                   DragMouseLoc;                                     		// 0x0780 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              MouseDragScale;                                   		// 0x0788 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UStatusMenuInventoryPanelGFxObject*          InventoryPanel;                                   		// 0x078C (0x0004) [0x0000000000000000]              
	class UChallengesScreenGFxObject*                  ChallengesPanel;                                  		// 0x0790 (0x0004) [0x0000000000000000]              
	float                                              CurrentScreenTime;                                		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrMapZoomAudioLoopCounter;                      		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PrevMapZoomAudioLoopCounter;                      		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MapZoomAudioRefireDelay;                          		// 0x07A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MapZoomAudioRefireDuration;                       		// 0x07A4 (0x0004) [0x0000000000000000]              
	float                                              LastMissionLogTickTime;                           		// 0x07A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TicksUntilPanelSwitchAllowed;                     		// 0x07AC (0x0004) [0x0000000000000000]              
	class UPCContextMenuObject*                        PCContextMenu;                                    		// 0x07B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5338 ];

		return pClassPointer;
	};

	void TrySwitchToScreen ( unsigned char DesiredScreen );
	void extChallLogDown ( );
	void extChallLogUp ( );
	void extGenericButtonClicked ( struct FString ActionName );
	void extCellRolledOver ( int BranchNum, int TierNum, int CellNum );
	void extCellClicked ( int BranchNum, int TierNum, int CellNum );
	void EnableControl ( unsigned long bEnable );
	void extArtifactClose ( );
	void extArtifactSelect ( int IdxSelected );
	void extSkillActivate ( );
	void extHoverSkillCell ( struct FString HoveredCell );
	void NotifySkillPointsChanged ( );
	void InvalidateQuickAccess ( );
	void SetupSkillTree ( );
	bool PanMap ( float X, float Y );
	void eventHandleMouseDrag ( int dx, int DY );
	void StopMouseDrag ( );
	void HandleMapZoom ( float Delta, unsigned long bLoopingAudio );
	bool HandleMapInputAxis ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	bool HandleMapInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool HandleSkillsInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool CanToggleMissionView ( );
	bool CanShowWorldMissionView ( );
	bool CanShowClientMissionView ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void GotoNextTab ( );
	void GotoPrevTab ( );
	bool HasVehicleRestrictions ( );
	void ToggleUndiscoveredMissionVisibility ( );
	void RepositionMissionLog ( int IndexToSelect );
	void OnMissionFilteredChanged ( );
	void ToggleMissionFiltered ( );
	bool IsHighlightedMissionFiltered ( );
	bool CanToggleHighlightedMissionFilter ( );
	void extStatusMenuMapPostMapMovieLoad ( float Top, float Right, float Bottom, float Left );
	void UpdateMousePositionForMap ( );
	void extStatusMenuMapOnLoad ( struct FString TargetPath );
	void ShowPopupModal ( struct FString PopupText, struct FString PopupTitle );
	void ShowPopup ( struct FString PopupText, struct FString PopupTitle );
	void extSetupNoMissionsPage ( );
	void GotoRegularMissions ( );
	void GotoNoMissions ( );
	void ResetScroll ( );
	void UpdateActiveMissionIcon ( );
	void OnActiveMissionChanged ( );
	void HitEnterOnLog ( );
	void ScrollSidePanel ( struct FString Direction );
	void SetDescriptionScrollValue ( float NewScrollValue );
	void extSetDescriptionScrollValue ( float NewScrollValue );
	void extChallListTrack ( int SlotIndex );
	void extChallListRollOver ( int SlotIndex );
	void extLogListTrack ( int SlotIndex );
	void extLogListRollOver ( int SlotIndex );
	void extLogDown ( );
	void LogDown ( );
	void extLogUp ( );
	void LogUp ( );
	void SetLevelAndDifficulty ( struct FString LevelText, struct FString Difficulty );
	void SetRewardsItem ( );
	void SetRewardsXP ( struct FString XPText );
	void SetPlayerXP ( struct FString XPText, int XPPercent );
	void SetPlayerLevel ( struct FString LevelText );
	void SetRewardsTotalOtherCurrency ( int Amount );
	void SetRewardsTotalCredits ( int Credits );
	void SetPlayerDisplayedEridium ( int Eridium );
	void SetPlayerTotalEridium ( int Eridium );
	void SetPlayerDisplayedCredits ( int Credits );
	void SetPlayerTotalCredits ( int Credits );
	void SetRewardCard ( class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC );
	void SetInnerReward ( class UGFxObject* InnerRewardClip, struct FMissionRewardPresentationData Presentation );
	TArray< struct FMissionRewardPresentationData > GetRewardPresentations ( class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC );
	void SetScrollArrows ( );
	void eventUpdateGeneralDetails ( );
	struct FString GetRightMostDelimited ( struct FString Text, struct FString Delimiter );
	void UpdateMissionDetails ( );
	void OnMissionObjectivesChanged ( class UMissionDefinition* MissionThatChanged );
	void SetActiveMission ( int Index );
	void UpdateListOfMissionTitles ( );
	void FilterMissions ( TArray< struct FStatusMenuMissionEligibilityData >* MissionSet );
	void StaticFilterMissions ( TArray< struct FStatusMenuMissionEligibilityData >* MissionSet );
	class UMissionDefinition* GetHighestPlotMissionDependency ( class UMissionDefinition* InMission );
	bool ArePlotMissionsInSequence ( class UMissionDefinition* CurrentMission, class UMissionDefinition* PreviousMission );
	class UMissionDefinition* GetHighestChainedPlotMissionCompleted ( TArray< struct FStatusMenuMissionEligibilityData > MissionSet, class UDownloadableExpansionDefinition* DlcExpansion );
	bool AllSideMissionDependenciesComplete ( TArray< struct FStatusMenuMissionEligibilityData > MissionSet, class UMissionDefinition* InMission );
	void GetUndiscoveredMissions ( TArray< struct FStatusMenuMissionEligibilityData > MissionSet, class UDownloadableExpansionDefinition* DlcExpansion, class AWillowPlayerController* OwningPC, TArray< class UMissionDefinition* >* out_UndiscoveredMissions );
	void eventGetAllUndiscoveredMissions ( TArray< struct FStatusMenuMissionEligibilityData > MissionSet, class AWillowPlayerController* OwningPC, TArray< class UMissionDefinition* >* out_UndiscoveredMissions );
	int GetFirstMissionNumber ( class UDownloadableExpansionDefinition* DlcExpansion );
	void UpdateMissionTextList ( );
	void SetAvailability ( unsigned long T1, unsigned long T2, unsigned long T3, unsigned long T4, unsigned long T5, unsigned long T6, unsigned long T7, unsigned long T8, unsigned long T9, unsigned long T10, unsigned long T11, unsigned long T12, unsigned long T13, unsigned long T14, unsigned long T15, unsigned long T16 );
	void SetupChallengesScreen ( );
	bool IsPrimaryHostPlayer ( );
	void extSetupMissionLogScreen ( );
	void OnMissionStatusChanged ( );
	void ChangeMissionLogSorting ( );
	unsigned char GetNextMissionSortType ( );
	void eventSetupGenericLogs ( class AWillowPlayerController* WPC );
	void SetCellsForWeaponEquipping ( unsigned long bIsEquipping );
	void EnterCellsView ( );
	void SwitchToCellsView ( );
	void EnterListView ( );
	void SwitchToListView ( );
	void ConditionallyScroll ( struct FString Direction );
	void MoveHighlight ( );
	void StopMovingHighlight ( );
	void StartMovingHighlight ( );
	void extInventoryListSet ( int NewEntry );
	void extInventoryListMove ( struct FString Direction );
	void extCellsSet ( struct FString NewCellString );
	bool IsCellValid ( struct FName NewCell );
	struct FName TryToFindNextValidCell ( struct FName Direction, struct FName NewCell );
	void ProcessCellMove ( struct FName Direction );
	void extInventoryCellMove ( struct FString Direction );
	void UpdateCardPanel ( int CardIndex, class AWillowInventory* MainThing, class AWillowInventory* OtherThing );
	void AddCell ( struct FString CellName );
	void SetDissimilarCells ( );
	void FlourishDrop ( );
	void extDropItem ( );
	void EquipFlourish ( struct FString CellName );
	void DetachCell ( int CellIndex );
	void UpdateCellData ( int CellIndex, class AWillowInventory* TheItem, class UMeshComponent* TheMesh );
	void FreeCellData ( );
	void InitCellData ( );
	void extContextMenuClicked ( struct FString Tag );
	void ShowContextMenuWrapper ( );
	void ShowContextMenu ( );
	void Cancel ( );
	void SetSelectedState ( struct FString CellName, unsigned char NewState );
	void RestoreAllNormalState ( );
	void DisableCancel ( );
	void EnableCancel ( );
	void extUpdateBackpackListSize ( int NewSize );
	void PrepareForCompare_Equipped ( );
	void PrepareForCompare_Backpack ( );
	void CleanupCompare ( );
	void extQuitCompare ( );
	void extCard2Visible ( unsigned long bCard2OnLeft );
	void extCompare ( );
	class AWillowInventory* GetEquippedCellInventory ( int CellIndex );
	class AWillowInventory* GetHighlightedCellEntry ( );
	class AWillowInventory* GetHighlightedRightSideEntry ( );
	class AWillowInventory* GetHighlightedLeftSideEntry ( );
	class AWillowInventory* GetCurrentHighlightedObject ( );
	void ClearInventoryRefreshTimer ( );
	void SetInventoryRefreshTimer ( );
	void RefreshInventoryScreen ( unsigned long bForce );
	bool HasAnyBackpackOfCorrectType ( );
	bool CanSort ( );
	bool CanSwap ( class AWillowInventory* WInv );
	bool CanUnready ( class AWillowInventory* WInv );
	bool CanReady ( class AWillowInventory* WInv );
	bool CanDrop ( class AWillowInventory* WInv );
	bool CanCompare ( class AWillowInventory* WInv );
	void SetInventoryTooltipsText ( class AWillowInventory* WInv );
	void SetTooltipsText ( );
	struct FString GetSortString ( unsigned char SortType );
	bool CanTrackHighlightedMission ( );
	bool GetCurrentMainAction ( class AWillowInventory* WInv, struct FName* MainAction );
	void extToggleSort ( struct FString Direction );
	void extUpdateLeftSideListSize ( int NewSize );
	void extSetInitialHighlightBar ( struct FString Container );
	void SortContainer ( class UGFxTextListContainer* Container );
	void UpdateCachedInventoryMarkForThing ( class AWillowInventory* Thing );
	void UpdateCachedInventoryMarks ( );
	void PrepareListOfAllInventory ( );
	bool eventIsComparing ( );
	void SetupInventoryScreen ( );
	bool InventoryPanelInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void ShowInventoryContextMenu ( unsigned long bIsCompareMode );
	void InventoryContextMenuClosed ( );
	void InventoryContextMenuActivated ( struct FString Action );
	void GetPlayerThings ( TArray< class AWillowInventory* >* Things );
	void SetPlayerCardInfo ( struct FString ClassModText, struct FString ClassModFrameLabel, struct FString LevelText, int LevelPercent, struct FString XPText, int XPPercent, struct FString ShieldText, int ShieldPercent, struct FString HealthText, int HealthPercent );
	void SetCondensedHealthWidget_Wrapper ( struct FString HealthText, int HealthNumber );
	void SetCondensedHealthWidget ( );
	void eventDisplayMarketingUnlockDialogIfNecessary ( );
	void HandleCurrencyChanged ( struct FCurrencyState ChangedCurrency );
	void eventOnClose ( );
	unsigned char GetScreenByName ( struct FString ScreenName );
	void CleanupScreen ( unsigned char Screen );
	void extSetCurrentScreen ( struct FString ScreenName );
	void Flash_SetMissionLogEnabled ( unsigned long bEnabled );
	void Flash_SetVehicleRestrictions ( );
	void Flash_SetCurrentScreen ( );
	struct FString GetInitialScreen ( );
	unsigned char GetInitialMissionSortType ( );
	int eventGetCurrentTab ( );
	void eventFinishClosing ( );
	void Hide ( );
	void DisplayRewardsPanel ( struct FPendingMissionRewardData MissionReward );
	void TryDisplayRewardPanel ( );
	void eventGetAllWorldMissions ( TArray< struct FStatusMenuMissionEligibilityData >* out_WorldMissions );
	void RegisterMissionDelegates ( );
	void InitForConsole ( );
	void InitForPC ( );
	bool AmITheStatusMenu ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UStatusMenuExGFxMovie::pClassPointer = NULL;

// Class WillowGame.TradingGFxMovie
// 0x0154 (0x05BC - 0x0468)
class UTradingGFxMovie : public UWillowInventoryGFxMovie
{
public:
	struct FString                                     OfferingString;                                   		// 0x0468 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ReceivingString;                                  		// 0x0474 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipString;                                    		// 0x0480 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ToolTipString_Split;                              		// 0x048C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ReadyString;                                      		// 0x0498 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TradeString;                                      		// 0x04A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuelString;                                       		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelDuelString;                                 		// 0x04BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelTradeString;                                		// 0x04C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WinnerTakeAllString;                              		// 0x04D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoRoomForItemsString;                             		// 0x04E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                MyMoneyOffer;                                     		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedPartnerMoneyOffer;                          		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedMyStance;                                   		// 0x04F4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedPartnerStance;                              		// 0x04F5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FCellContentData                            OfferedContents[ 0x8 ];                           		// 0x04F8 (0x0080) [0x0000000000080000]              ( CPF_Component )
	TArray< class AWillowInventory* >                  BackpackThings;                                   		// 0x0578 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTradingPanelGFxObject*                      TradingPanel;                                     		// 0x0584 (0x0004) [0x0000000000000000]              
	class UTradingGFxDefinition*                       TradingDef;                                       		// 0x0588 (0x0004) [0x0000000000000000]              
	struct FSortFilterConfiguration                    CompareConfiguration;                             		// 0x058C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSortFilterConfiguration >          GenericSortConfigurations;                        		// 0x059C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GenericSortConfigIndex;                           		// 0x05A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDoDuelingCheck : 1;                              		// 0x05AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuelingAllowed : 1;                              		// 0x05AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseTextboxForMoney : 1;                          		// 0x05AC (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     LastMoneyOfferString;                             		// 0x05B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5340 ];

		return pClassPointer;
	};

	bool UpdateMoneyOfferFromTextbox ( );
	void extGenericButtonClicked ( struct FString ActionName );
	void extMoneyWidgetActivated ( unsigned long bActivated );
	void FreeCellData ( );
	class AWillowInventory* GetLocalInvForTradeSlot ( struct FTradeSlot Slot );
	void OnPartnerInvChanged ( );
	class AWillowInventory* GetOfferedCellInventory ( int CellIndex );
	void UpdateTimer ( );
	void extSetDuel ( unsigned long bNewDuel );
	void extSetTrade ( unsigned long bNewTrade );
	void eventUnselectActionButtons ( );
	void eventSetPlayerInventoryMoney ( int Money );
	void eventSetPartnerMoneyOffer ( int PartnerMoneyOffer );
	void eventSetPlayerMoneyOffer ( int PlayerMoneyOffer );
	void eventOnClose ( );
	void UpdateMoneyOffer ( int iMoney );
	void extExitMoneyWidget ( float fMoney );
	void TweenOut ( );
	void eventBeginClosing ( );
	void InitTradingScreen ( );
	void SetTooltips ( );
	class AWillowTradeManager* GetTradeManager ( );
	void InitCellData ( );
	bool IsOffering ( class AWillowInventory* WInv, unsigned long bPartner );
	void AddInventory ( class AWillowInventory* WInv );
	void PrepareListOfAllInventory ( );
	void RefreshContents ( );
	void InitForConsole ( );
	void InitForPC ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UTradingGFxMovie::pClassPointer = NULL;

// Class WillowGame.TwoPanelInterfaceGFxMovie
// 0x003C (0x04A4 - 0x0468)
class UTwoPanelInterfaceGFxMovie : public UWillowInventoryGFxMovie
{
public:
	class UTwoPanelInterfaceGFxObject*                 TwoPanelInterface;                                		// 0x0468 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShouldStartOnLeftPanel : 1;                      		// 0x046C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	TArray< struct FSortFilterConfiguration >          GenericSortConfigurations;                        		// 0x0470 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GenericSortConfigIndex_Storage;                   		// 0x047C (0x0004) [0x0000000000000000]              
	int                                                GenericSortConfigIndex_Player;                    		// 0x0480 (0x0004) [0x0000000000000000]              
	class AWillowInteractiveObject*                    InteractiveObjectContext;                         		// 0x0484 (0x0004) [0x0000000000000000]              
	struct FString                                     StoragePanelLabel;                                		// 0x0488 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerPanelLabel;                                 		// 0x0494 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                NumHeaderButtons;                                 		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5342 ];

		return pClassPointer;
	};

	void SetItemLocation ( class AWillowInventory* Thing );
	void PressedHotkeyNumber ( int HotkeyNum );
	void extGenericButtonClicked ( struct FString ActionName );
	void InitForConsole ( );
	void InitForPC ( );
	void SetTooltips ( );
	struct FString _GetAddTip ( );
	struct FString GetAddTip ( );
	void AttachBackgroundClip ( struct FString PathToBackgroundClip );
	void OnCellPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void PanelOnItemSelected ( class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing );
	bool ShouldStoragePanelHighlightFrozen ( );
	class AWillowInventory* GetSelectedThing ( );
	struct FString GetPlayerPanelLabel ( );
	struct FString GetStoragePanelLabel ( );
	bool ShouldShowPanelNavTooltips ( );
	void NotifySelectionChange ( );
	unsigned char GetCurrencyTypeForInventory ( class AWillowInventory* WInv );
	int GetOverridePriceForInventory ( class AWillowInventory* WInv );
	void GetSortConfigDataForPanel ( class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData );
	void OnLeftPanelInit ( class UInventoryListPanelGFxObject* LeftPanel );
	class UIWillowStorable* GetStorageReferenceForTransferring ( );
	class UIWillowStorable* GetStorageReferenceForSwapping ( );
	void GetPlayerPanelItems ( TArray< class AWillowInventory* >* Things );
	void GetStoragePanelItems ( TArray< class AWillowInventory* >* Things, int* UnloadableCount );
	struct FString GetTitle ( );
	bool ShouldStartOnLeftPanel ( );
	void InitCardCellData ( struct FCardInfo MainCardInfo );
	void extInitMainPanel ( struct FString MainPanelTargetPath );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UTwoPanelInterfaceGFxMovie::pClassPointer = NULL;

// Class WillowGame.VendingMachineExGFxMovie
// 0x016C (0x05D4 - 0x0468)
class UVendingMachineExGFxMovie : public UWillowInventoryGFxMovie
{
public:
	class AWillowVendingMachineBase*                   VM;                                               		// 0x0468 (0x0004) [0x0000000000000000]              
	class UVendingMachineExGFxDefinition*              VMGFxDef;                                         		// 0x046C (0x0004) [0x0000000000000000]              
	class AWillowPawn*                                 OwnerInventoryPawn;                               		// 0x0470 (0x0004) [0x0000000000000000]              
	struct FShopItemData                               ItemOfTheDayData;                                 		// 0x0474 (0x000C) [0x0000000000000000]              
	TArray< struct FShopItemData >                     ShopItems;                                        		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FShopItemData >                     BuyBackItems;                                     		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsStoragePanelShowingBuyback : 1;                		// 0x0498 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShouldStartOnLeftPanel : 1;                      		// 0x0498 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bOnItemOfTheDay : 1;                              		// 0x0498 (0x0004) [0x0000000000000000] [0x00000004] 
	class UTwoPanelInterfaceGFxObject*                 TwoPanelInterface;                                		// 0x049C (0x0004) [0x0000000000000000]              
	class UItemOfTheDayPanelGFxObject*                 ItemOfTheDayPanel;                                		// 0x04A0 (0x0004) [0x0000000000000000]              
	class UValueGFxObject*                             PlayerMoney;                                      		// 0x04A4 (0x0004) [0x0000000000000000]              
	class UHealthBarGFxObject*                         HealthBar;                                        		// 0x04A8 (0x0004) [0x0000000000000000]              
	class UShieldBarGFxObject*                         ShieldBar;                                        		// 0x04AC (0x0004) [0x0000000000000000]              
	class UAmmoPanelGFxObject*                         AmmoPanel;                                        		// 0x04B0 (0x0004) [0x0000000000000000]              
	class UVendingMachineFeedbackGFxObject*            Feedback;                                         		// 0x04B4 (0x0004) [0x0000000000000000]              
	struct FString                                     HealthShopTitle;                                  		// 0x04B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemsShopTitle;                                   		// 0x04C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponsShopTitle;                                 		// 0x04D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BlackMarketTitle;                                 		// 0x04DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VisitLabel;                                       		// 0x04E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemOfTheDayLabel;                                		// 0x04F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VisitLabel_BlackMarket;                           		// 0x0500 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemOfTheDayLabel_BlackMarket;                    		// 0x050C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StoragePanelLabel;                                		// 0x0518 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerPanelLabel;                                 		// 0x0524 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuybackPanelLabel;                                		// 0x0530 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ComparePanelLabel;                                		// 0x053C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      CurrentSelectionShopStatus;                       		// 0x0548 (0x0001) [0x0000000000000000]              
	unsigned char                                      ShopType;                                         		// 0x0549 (0x0001) [0x0000000000000000]              
	unsigned char                                      bCanAcceptInput;                                  		// 0x054A (0x0001) [0x0000000000000000]              
	class AWillowInventory*                            CurrentSelectionItem;                             		// 0x054C (0x0004) [0x0000000000000000]              
	int                                                CachedCurrency;                                   		// 0x0550 (0x0004) [0x0000000000000000]              
	int                                                StoragePanelSortConfigIndex;                      		// 0x0554 (0x0004) [0x0000000000000000]              
	int                                                PlayerPanelSortConfigIndex;                       		// 0x0558 (0x0004) [0x0000000000000000]              
	TArray< struct FSortFilterConfiguration >          WeaponsSortConfigurations;                        		// 0x055C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                WeaponsSortConfigIndex;                           		// 0x0568 (0x0004) [0x0000000000000000]              
	TArray< struct FSortFilterConfiguration >          HealthSortConfigurations;                         		// 0x056C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                HealthSortConfigIndex;                            		// 0x0578 (0x0004) [0x0000000000000000]              
	TArray< struct FSortFilterConfiguration >          GrenadesSortConfigurations;                       		// 0x057C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GrenadesSortConfigIndex;                          		// 0x0588 (0x0004) [0x0000000000000000]              
	TArray< struct FSortFilterConfiguration >          BlackMarketSortConfigurations;                    		// 0x058C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BlackMarketSortConfigIndex;                       		// 0x0598 (0x0004) [0x0000000000000000]              
	TArray< struct FSortFilterConfiguration >          GenericSortConfigurations;                        		// 0x059C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GenericSortConfigIndex;                           		// 0x05A8 (0x0004) [0x0000000000000000]              
	struct FSortFilterConfiguration                    CompareConfiguration;                             		// 0x05AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              VendingMachineRefreshRate;                        		// 0x05BC (0x0004) [0x0000000000000000]              
	int                                                NumHeaderButtons;                                 		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPCContextMenuObject*                        PCContextMenu;                                    		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ShopIconBase;                                     		// 0x05C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5344 ];

		return pClassPointer;
	};

	void SetItemLocation ( class AWillowInventory* Thing );
	void CycleSelectedThingAsTrashOrFavorite ( );
	void PressedHotkeyNumber ( int HotkeyNum );
	void extGenericButtonClicked ( struct FString ActionName );
	void InitForConsole ( );
	void InitForPC ( );
	void RefreshShieldBar ( );
	void RefreshHealthBar ( );
	void TweenOut ( );
	void BeginClosing ( );
	void SetTooltips ( );
	void FinishCompare ( struct FName ukey );
	void StartCompare ( struct FName ukey );
	void CheckShopOpStatus ( );
	bool CanSellAllTrash ( );
	void SellAllTrash ( );
	void PlayFeedback_CannotCarryOrUse ( );
	void PlayFeedback_CannotAfford ( );
	void ConditionalStartTransfer ( struct FName ukey );
	bool GetCurrentShopMode ( unsigned char* ShopMode, int* bCanActivate );
	bool IsCurrentSelectionBuyBack ( );
	bool IsCurrentSelectionSell ( );
	unsigned char GetStatusForItem ( class AWillowInventory* Thing );
	void EvaluateCurrentSelection ( );
	bool ShouldStoragePanelHighlightFrozen ( );
	void SwitchToItemOfTheDay ( );
	void SwitchToPanels ( );
	void OnPanelRollOver ( class UInventoryListPanelGFxObject* Panel, int ControllerId );
	void OnDynamicCardUpdated ( class AWillowInventory* WInv );
	void InspectItem ( class AWillowInventory* Thing );
	bool CompareInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool HandleItemOfTheDayInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool CanSwitchToBuyback ( );
	bool MainInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void OnInventoryPanelSetActive ( class UBaseInventoryPanelGFxObject* PanelObject, unsigned long bActive );
	void ShowContextMenu ( unsigned long bIsCompareMode );
	class UGFxObject* GetCurrentCellObject ( );
	void ContextMenuClosed ( );
	void ContextMenuActivated ( struct FString Action );
	void OnCellPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void PanelOnItemSelected ( class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing );
	class AWillowInventory* GetSelectedThing ( );
	struct FString GetPlayerPanelLabel ( );
	struct FString GetStoragePanelLabel ( );
	void NotifySelectionChange ( );
	unsigned char GetCurrencyTypeForInventory ( class AWillowInventory* WInv );
	int GetOverridePriceForInventory ( class AWillowInventory* WInv );
	void GetSortConfigDataForPanel ( class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData );
	void SetPlayerCurrencyType ( int CurrencyType );
	class UIWillowStorable* GetStorageReferenceForTransferring ( );
	class UIWillowStorable* GetStorageReferenceForSwapping ( );
	void GetPlayerPanelItems ( TArray< class AWillowInventory* >* Things );
	void GetStoragePanelItems ( TArray< class AWillowInventory* >* Things, int* UnloadableCount );
	struct FString GetTitle ( );
	bool ShouldStartOnLeftPanel ( );
	bool ShouldShowPanelNavTooltips ( );
	void SetCreditsDisplay ( );
	unsigned char GetCurrencyType ( );
	void UpdateTimeRemaining ( );
	void eventOnTick ( );
	void ConfigureShopForType ( unsigned char InShopType );
	void Refresh ( );
	void RefreshStoragePanelItems ( TArray< struct FShopItemData >* NewList );
	void RefreshTransientData ( );
	void ClearVendingMachineRefreshTimer ( );
	void SetVendingMachineRefreshTimer ( );
	class UTexture* InitCardCellThumbnail ( struct FCardInfo InCardInfo );
	void FreeTextures ( );
	void eventOnClose ( );
	void ConfigureForType_IOTD ( );
	void ConfigureForType_TPI ( );
	void ConfigureForType_Shop ( );
	void OnLeftPanelInit ( class UInventoryListPanelGFxObject* LeftPanel );
	void extInitMainPanel ( struct FString MainPanelTargetPath );
	void extInitCustomItemOfTheDayBackground ( );
	void extInitItemOfTheDayPanel ( struct FString ItemOfTheDayPanelPath );
	void extInitVendingMachine ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UVendingMachineExGFxMovie::pClassPointer = NULL;

// Class WillowGame.WillowHUDGFxMovie
// 0x0550 (0x08E0 - 0x0390)
class UWillowHUDGFxMovie : public UWillowGFxMovie3D
{
public:
	unsigned long                                      bIsWidescreen : 1;                                		// 0x0390 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsPrimary : 1;                                   		// 0x0390 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUsingPC360 : 1;                                  		// 0x0390 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUpdateSplitRegionNextTick : 1;                   		// 0x0390 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHasEverPickedUpGrenades : 1;                     		// 0x0390 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bShowLevelTimer : 1;                              		// 0x0390 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bShowIpAddr : 1;                                  		// 0x0390 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bGameStageDebugEnabled : 1;                       		// 0x0390 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCachedPersistentMapNameMatchesRecordingList : 1; 		// 0x0390 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bDisplayTradeIcon_HUD : 1;                        		// 0x0390 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDisplayTradeDisabledIcon_HUD : 1;                		// 0x0390 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      RetryTraining_PausesGame : 1;                     		// 0x0390 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      RetryTraining_bIsntActuallyATrainingMessage : 1;  		// 0x0390 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      RetryTraining_bMandatory : 1;                     		// 0x0390 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bMidTick : 1;                                     		// 0x0390 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned char                                      SplitscreenMode;                                  		// 0x0394 (0x0001) [0x0000000000000000]              
	unsigned char                                      bIsInVehicle;                                     		// 0x0395 (0x0001) [0x0000000000000000]              
	unsigned char                                      bNeedsWidgetsRenewed;                             		// 0x0396 (0x0001) [0x0000000000000000]              
	unsigned char                                      bNeedsXPUpdate;                                   		// 0x0397 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedKillSkillsEnabled;                         		// 0x0398 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedShieldPrimed;                              		// 0x0399 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedHasActiveSkill;                             		// 0x039A (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedCrouched;                                  		// 0x039B (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedInjured;                                   		// 0x039C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedHadReviveTarget;                           		// 0x039D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedActionSkillTooltip;                         		// 0x039E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bActionSkillGuideIsHidden;                        		// 0x039F (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CachedAllyExists[ 0x3 ];                          		// 0x03A0 (0x0003) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedAllyInjured[ 0x3 ];                        		// 0x03A3 (0x0003) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedAllyReviving[ 0x3 ];                       		// 0x03A6 (0x0003) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bDrawEnemyHealth;                                 		// 0x03A9 (0x0001) [0x0000000000000000]              
	unsigned char                                      bNewTarget;                                       		// 0x03AA (0x0001) [0x0000000000000000]              
	unsigned char                                      bLastShieldPresentUpdated;                        		// 0x03AB (0x0001) [0x0000000000000000]              
	unsigned char                                      bLastMinibarPresentUpdated;                       		// 0x03AC (0x0001) [0x0000000000000000]              
	unsigned char                                      bLastChampionUpdated;                             		// 0x03AD (0x0001) [0x0000000000000000]              
	unsigned char                                      bLastFullyArmoredUpdated;                         		// 0x03AE (0x0001) [0x0000000000000000]              
	unsigned char                                      bLastBeingHealedUpdated;                          		// 0x03AF (0x0001) [0x0000000000000000]              
	unsigned char                                      EquippedCardType;                                 		// 0x03B0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedBoundaryWarningEnabled;                    		// 0x03B1 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DesiredCrosshairColor;                            		// 0x03B2 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedBossBar;                                   		// 0x03B3 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedBossHasShield;                             		// 0x03B4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bCachedRecording;                                 		// 0x03B5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RetryTraining_StatusMenuTab;                      		// 0x03B6 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastShutoffTime;                                  		// 0x03B8 (0x0004) [0x0000000000000000]              
	class APawn*                                       Pawn;                                             		// 0x03BC (0x0004) [0x0000000000000000]              
	class AWillowPlayerReplicationInfo*                WPRI;                                             		// 0x03C0 (0x0004) [0x0000000000000000]              
	class AWillowWeapon*                               WWeap;                                            		// 0x03C4 (0x0004) [0x0000000000000000]              
	class AWillowHUD*                                  MyHUDOwner;                                       		// 0x03C8 (0x0004) [0x0000000000000000]              
	class UHUDDefinition*                              MyHUDDefinition;                                  		// 0x03CC (0x0004) [0x0000000000000000]              
	struct FCriticalTextMessageArray                   CriticalTextMessages;                             		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCriticalTextMessageArray                   ChatTextMessages;                                 		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCriticalTextMessageArray                   TrainingTextMessages;                             		// 0x03E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FResourcePoolReference                      SavedGrenadePool;                                 		// 0x03F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedXP;                                         		// 0x0400 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumSkillSkillsVisible;                            		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedCooldown;                                   		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedMaxCooldown;                                		// 0x040C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedCooldownFrame;                              		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCachedWeaponInfo                           CachedWeaponInfo;                                 		// 0x0414 (0x0028) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UHUDWidget_Crosshairs*                       CrosshairWidget;                                  		// 0x043C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedGrenades;                                   		// 0x0440 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedMaxGrenades;                                		// 0x0444 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowGrenadeMod*                           CachedGrenadeMod;                                 		// 0x0448 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UItemNamePartDefinition*                     CachedClassModNamePart;                           		// 0x044C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedHealth;                                     		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedMaxHealth;                                  		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedShields;                                    		// 0x0458 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedMaxShields;                                 		// 0x045C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedShieldType;                                 		// 0x0460 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWillowDamageTypeDefinition*                 CachedShieldDamageResistanceType;                 		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ShieldClip;                                       		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedLevel;                                      		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerNameIdentifierDefinition*             CachedPlayerNameIds;                              		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedSkillPointsToSpend;                         		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SkillPointsPromptTimer;                           		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedAfterburner;                                		// 0x0484 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedCreditStopTime;                             		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedExCurrency[ 0xD ];                          		// 0x048C (0x0034) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedExCurrencyStopTime;                         		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedCreditRemovalStopTime;                      		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoneyWidgetInterval;                              		// 0x04C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExCurrencyWidgetInterval;                         		// 0x04CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MoneyRemovalInterval;                             		// 0x04D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     MoneyRemovalFrame;                                		// 0x04D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FCellContentData >                  WeaponSelect;                                     		// 0x04E0 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	int                                                CachedInjuredPct;                                 		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedRevivePct;                                  		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedTargetRevivePct;                            		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedActionSkillTime;                            		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedAllyName[ 0x3 ];                            		// 0x04FC (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UItemNamePartDefinition*                     CachedAllyClassModNamePart[ 0x3 ];                		// 0x0520 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedAllyHealth[ 0x3 ];                          		// 0x052C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedAllyMaxHealth[ 0x3 ];                       		// 0x0538 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedAllyShields[ 0x3 ];                         		// 0x0544 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedAllyMaxShields[ 0x3 ];                      		// 0x0550 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedAllyLevel[ 0x3 ];                           		// 0x055C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerNameIdentifierDefinition*             CachedAllyPlayerNameIds[ 0x3 ];                   		// 0x0568 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedAllyInjuredPct[ 0x3 ];                      		// 0x0574 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                CachedAllyTeamBuffs[ 0x3 ];                       		// 0x0580 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UITargetable*                                CurrentTargetable;                                		// 0x058C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0590 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UITargetable*                                LastTargetable;                                   		// 0x0594 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0598 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UITargetable*                                FadingTargetable;                                 		// 0x059C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x05A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UPawnAllegiance*                             CurrentTargetAllegiance;                          		// 0x05A4 (0x0004) [0x0000000000000000]              
	class UPawnAllegiance*                             LastTargetAllegiance;                             		// 0x05A8 (0x0004) [0x0000000000000000]              
	int                                                LastMyLevelUpdated;                               		// 0x05AC (0x0004) [0x0000000000000000]              
	float                                              LastHealthUpdated;                                		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              LastShieldUpdated;                                		// 0x05B4 (0x0004) [0x0000000000000000]              
	float                                              LastMinibarUpdated;                               		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              CurrentHealth;                                    		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              CurrentShield;                                    		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              CurrentMinibar;                                   		// 0x05C4 (0x0004) [0x0000000000000000]              
	int                                                LastEnemyLevelUpdated;                            		// 0x05C8 (0x0004) [0x0000000000000000]              
	struct FString                                     LastEnemyNameUpdated;                             		// 0x05CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  TargetWidgetClip;                                 		// 0x05D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DangerousDifference;                              		// 0x05DC (0x0004) [0x0000000000000000]              
	int                                                ImpossibleDifference;                             		// 0x05E0 (0x0004) [0x0000000000000000]              
	float                                              SkillPointsPromptInterval;                        		// 0x05E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UGearboxRenderTextureManager*                RTM;                                              		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowInventory*                            SavedEquippedItemForCard;                         		// 0x05EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowInventory*                            SavedComparisonItemForCard;                       		// 0x05F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EquippedCardHideTime;                             		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueuedLevelUpLevel;                               		// 0x05F8 (0x0004) [0x0000000000000000]              
	struct FHUDInteractionIcon                         CurrentInteractionIcon;                           		// 0x05FC (0x0028) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AllyLeveledUpString;                              		// 0x0624 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AllyDyingString;                                  		// 0x0630 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AllyRevivingString;                               		// 0x063C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerInjuredString;                              		// 0x0648 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SecondWindString;                                 		// 0x0654 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerRevivingString;                             		// 0x0660 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RevivingTargetString;                             		// 0x066C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InjuredTooltipString1;                            		// 0x0678 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InjuredTooltipString2;                            		// 0x0684 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ContextualPromptString;                           		// 0x0690 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ContextualPromptButtonString;                     		// 0x069C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CannotOpenMenuString;                             		// 0x06A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CannotSpendMoneyString;                           		// 0x06B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BadassTokenGet;                                   		// 0x06C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CharacterHeadGet;                                 		// 0x06CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CharacterSkinGet;                                 		// 0x06D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VehicleSkinGet;                                   		// 0x06E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     XPGet;                                            		// 0x06F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastHUDTickTime;                                  		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CrosshairSmoothingSpeed;                          		// 0x0700 (0x0004) [0x0000000000000000]              
	struct FString                                     MyIpAddress;                                      		// 0x0704 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastLevelTimerTime;                               		// 0x0710 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelTimerString;                                 		// 0x0714 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameStageString;                                  		// 0x0720 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              HealthLerpStartValue;                             		// 0x072C (0x0004) [0x0000000000000000]              
	float                                              HealthLerpCurrValue;                              		// 0x0730 (0x0004) [0x0000000000000000]              
	float                                              HealthLerpDesiredTime;                            		// 0x0734 (0x0004) [0x0000000000000000]              
	float                                              HealthLerpElapsedTime;                            		// 0x0738 (0x0004) [0x0000000000000000]              
	class UHUDWidget_Missions*                         MyMissionWidget;                                  		// 0x073C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UHUDWidget_Minimap*                          MyMinimapWidget;                                  		// 0x0740 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UHUDWidget_WorldSpace*                       MyWorldSpaceWidget;                               		// 0x0744 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UHUDWidget_Trading*                          MyTradingWidget;                                  		// 0x0748 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UHUDWidget_Challenges*                       MyChallengesWidget;                               		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowAIPawn*                               CachedBossPawn;                                   		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedBossHealthAmt;                              		// 0x0754 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedBossShieldAmt;                              		// 0x0758 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CachedBossName;                                   		// 0x075C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CachedBossLevel;                                  		// 0x0768 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CachedPersistentMapName;                          		// 0x076C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRecordingCheckTime;                           		// 0x0774 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FTrackedSkillIconState                      CachedTSkillIcon_TrigResp[ 0xB ];                 		// 0x0778 (0x00B0) [0x0000000000002000]              ( CPF_Transient )
	struct FTrackedSkillIconState                      CachedTSkillIcon_Flask;                           		// 0x0828 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FTrackedSkillIconState                      CachedTSkillIcon_Kill[ 0x5 ];                     		// 0x0838 (0x0050) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAvailableTrackedSkill >            AvailableTrackedSkills;                           		// 0x0888 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumPurchasedTrigRespSlots;                        		// 0x0894 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RetryTrainingTime;                                		// 0x0898 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RetryTrainingDuration;                            		// 0x089C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     RetryTraining_MessageString;                      		// 0x08A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     RetryTraining_TitleString;                        		// 0x08AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              RetryTraining_Duration;                           		// 0x08B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      RetryTraining_DrawColor;                          		// 0x08BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     RetryTraining_HUDInitializationFrame;             		// 0x08C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              RetryTraining_PauseContinueDelay;                 		// 0x08CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      RetryTraining_Related_PRI1;                       		// 0x08D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowHUDGFxMovieDefinition*                HUDGFxDef;                                        		// 0x08D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartTime;                                        		// 0x08D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UEchoVersionGFxMovie*                        EchoVersionMovie;                                 		// 0x08DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5346 ];

		return pClassPointer;
	};

	bool ShouldShowAllyWidget ( class AWillowPlayerReplicationInfo* AllyPRI );
	void ShowPullThePinNotification ( class USwfMovie* ExternalClip );
	void extInitMinimapFogOfWar ( class UGFxObject* MinimapClip );
	void extExecuteReadyNeedsUpdate ( );
	float GetDynamicFOVScalar ( );
	struct FVector2D GetActualCoordsForAnchor ( class UHUDScalingAnchorDefinition* Anchor );
	void ApplyElementScaling ( );
	void eventShowRewardPopup ( unsigned char Type );
	void eventOnSetViewport ( );
	void UpdateMinimapRadius ( unsigned long bInVehicle, float LerpTime );
	void eventSetExCurrency ( unsigned char Type, int Amount );
	void eventSetCredits ( int Credits );
	void extContextualPromptFadedOut ( );
	void ToggleContextualPrompt ( struct FString ContextString, unsigned long bEnabled );
	void UpdateSkillIcon ( unsigned long bIsPurchasedTrigRespSlot, struct FTrackedSkillIconState* IconState, struct FTrackedSkillState* SkillState, struct FString* Path, struct FString* frame );
	void FindTrackedSkill ( unsigned char Type, int Slot, struct FTrackedSkillState* OutState, struct FString* OutPathString, struct FString* OutFrameString );
	void UpdateSkillIcons ( );
	int GetRemappedSlot ( class USkillDefinition* SkillDef );
	void SortAvailableTrackedSkills ( );
	void eventInitSkillIconsAvailability ( );
	void AddTrackedSkill ( class USkillDefinition* SkillDef );
	void UpdateRecording ( );
	void UpdateBossBar ( );
	void ShowChapterHeader ( class UMissionDefinition* MissionDef );
	void ResetShieldPrimeCachedValues ( class AWillowShield* Shield );
	void SetShieldTriggeredState ( );
	void AmmoAbsorbed ( class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef );
	void EnableActionSkill ( class AActionSkill* Skill, unsigned long bEnable );
	void ShowWorldDiscovery ( struct FName DiscoveryName, struct FString DiscoveredArea, unsigned long bFirstDiscovery, unsigned long bForFogOfWarOnly );
	void ResumeActionSkillGuides ( );
	void HideActionSkillGuides ( );
	void extDuelClipEnded ( );
	void UpdateCachedXPValue ( int ExpPoints );
	void extMissionModuleAnimFinished ( struct FString AnimName, struct FString ModuleName );
	void DoMissionStatusFanfare ( struct FString frame, class UMissionDefinition* MissionDef, unsigned long bShowObjectiveFlourish, class UMissionObjectiveDefinition* MissionObjective );
	void UpdateBoundaryWarning ( );
	void eventTEMPClearOtherSkillIcons ( );
	void eventToggleKillSkills ( unsigned long bEnable );
	void ShowToolTip ( struct FInteractionIconWithOverrides HUDIcon, unsigned char UsabilityType );
	void SetEquippedCardUIStats ( class UWillowGFxMovie* Movie, TArray< struct FTopStatData >* UIStats );
	void UpdateEquippedCardFrom ( class AWillowInventory* TheItem, class AWillowInventory* CompareItem );
	void extEquippedCardOpened ( );
	void HighlightSlotForPlayer ( unsigned long bPrimaryPlayer, unsigned char QuickSlot );
	void DisplayAllyDing ( class AWillowPlayerReplicationInfo* InAllyPRI );
	void DisplayGenericRevive ( class UGenericReviveMessageDefinition* ReviveDef, class APlayerReplicationInfo* OtherPRI, unsigned long bIsOtherEventParticipant );
	void DisplaySecondWind ( );
	void DisplayDuel ( );
	void DisplayLevelUp ( int ExpLevel );
	void TickDisplayLevelUp ( );
	bool CanDisplayLevelUp ( );
	void QueueDisplayLevelUp ( int ExpLevel );
	void FreeResourcesInArray ( TArray< struct FCellContentData >* Resources );
	unsigned char HideQuickSelectWeaponMenuForPlayer ( unsigned long bPrimaryPlayer );
	void PrivateOpenQuickSelectWeaponMenuForPlayer ( unsigned long bPrimaryPlayer, int UpStatus, int DownStatus, int LeftStatus, int RightStatus, int PlatformNumber );
	void SetResourcesInArray ( class AWillowInventory* UpThing, class AWillowInventory* DownThing, class AWillowInventory* LeftThing, class AWillowInventory* RightThing, TArray< struct FCellContentData >* Resources, TArray< struct FName >* TextureNames );
	void OpenQuickSelectWeaponMenuForPlayer ( unsigned long bPrimaryPlayer, int UpStatus, int DownStatus, int LeftStatus, int RightStatus, class AWillowInventory* UpThing, class AWillowInventory* DownThing, class AWillowInventory* LeftThing, class AWillowInventory* RightThing, int PlatformNumber );
	void SetDangerousIconDifference ( int DangerousIconDifference, int ImpossibleIconDifference );
	void extTrainingTextBoxOpened ( );
	void CloseTrainingTextBox ( );
	void OpenTrainingTextBox ( );
	void DrawTrainingText ( );
	void DrawChatText ( );
	struct FString GetFontColorTag ( struct FColor DrawColor );
	void DrawCriticalText ( );
	void TickCriticalText ( float DeltaTime );
	void eventClearTrainingText ( );
	void eventAddTrainingText ( struct FString MessageString, struct FString TitleString, float Duration, struct FColor DrawColor, struct FString HUDInitializationFrame, unsigned long PausesGame, float PauseContinueDelay, class APlayerReplicationInfo* Related_PRI1, unsigned long bIsntActuallyATrainingMessage, unsigned char StatusMenuTab, unsigned long bMandatory );
	void eventAddChatText ( struct FString MessageString, float Duration, struct FColor DrawColor, class APlayerReplicationInfo* Related_PRI1 );
	void eventAddCriticalText ( struct FString MessageString, float Duration, struct FColor DrawColor, class APlayerReplicationInfo* Related_PRI1 );
	void UpdateDebug ( );
	void DisplayCouldNotSpendMoneyMessage ( unsigned char UsedType );
	void DisplayCouldNotOpenMenuMessage ( );
	void DisplayCouldNotPickUpMessage ( class AWillowPlayerController* Player, struct FString Message );
	void extTooltipFadedOut ( struct FString TooltipPath );
	void extShieldTriggerComplete ( );
	void extEnemyRingFadeInFinished ( );
	void extEnemyRingFadeOutFinished ( );
	void UpdateTargetInformation ( unsigned long bForceUpdateIcons );
	void UpdateCurrentTarget ( class UITargetable* CurrentTarget );
	void SetVehicleUIWidgetVisibility ( class APawn* PossessedPawn, unsigned long bInVehicle, unsigned long bInTurret );
	void HideEchoCaller ( );
	void ShowEchoCaller ( class UWillowDialogNameTag* Caller, struct FScaleformPortraitData PortraitData, class AWillowPlayerController* Player, unsigned long bDisableEchoVideos, unsigned long bSkipFadeIn );
	void UpdateSplitRegion ( );
	void Refresh ( );
	void UpdateMainFrame ( );
	void extResAnimFinished ( );
	void ClearAllyCache ( int AllyNum );
	void UpdateAllyTeamBuffs ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyInjured ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyTalkingFromNetId ( struct FUniqueNetId Player );
	void UpdateAllyTalking ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyClassMod ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyName ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyCharacter ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyLevel ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyShield ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void UpdateAllyHealth ( int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString );
	void SetAllyVisible ( int AllyNum, unsigned long bVisible, struct FString* AllyString );
	void UpdateInteractionIcon ( );
	void UpdateCrouched ( );
	void UpdateBootup ( );
	void UpdateInjured ( );
	void UpdateExCurrency ( );
	void UpdateCredits ( );
	void UpdateAfterburner ( );
	void UpdateSkillPoints ( );
	void UpdateCharacter ( );
	void UpdateClassMod ( );
	void UpdateLevel ( );
	void UpdateGrenades ( );
	void UpdateAmmo ( unsigned char AmmoBar, class AWillowWeapon* OverrideWeapon, struct FCachedWeaponInfo* OverrideCache, struct FCachedWeaponInfo* AdditionalCache );
	void UpdateActionSkillPortrait ( );
	void UpdateActionSkill ( );
	void UpdateXP ( );
	void UpdateShield ( );
	void UpdateHealth ( );
	float GetUncappedXP ( );
	void InitCachedValues ( );
	void eventOnClose ( );
	void DoInitialSetupStuff ( );
	bool eventStart ( unsigned long StartPaused );
	void InitFromDefinition ( );
	void ShowIpAddress ( );
	void LevelTimer ( );
	void eventLoadDebugStrings ( );
	void UpdateCachedPlayerInfo ( );
	bool UpdateCachedViewportInfo ( );
};

UClass* UWillowHUDGFxMovie::pClassPointer = NULL;

// Class WillowGame.WillowGFxMoviePressStart
// 0x004B (0x02AF - 0x0264)
class UWillowGFxMoviePressStart : public UWillowGFxMovie
{
public:
	float                                              IdleTimeBeforeStartingAttractLoop;                		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrIdleTime;                                     		// 0x0268 (0x0004) [0x0000000000000000]              
	struct FString                                     AttractModeMovieName;                             		// 0x026C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Legal_ESRBDisclaimer;                             		// 0x0278 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Legal_GearboxTrademarks;                          		// 0x0284 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Legal_GearboxTrademarks_Console;                  		// 0x0290 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bAsyncInProgress : 1;                             		// 0x029C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDisableAttractLoop : 1;                          		// 0x029C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bMutedWorld : 1;                                  		// 0x029C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      ShouldStartSparkInitialization : 1;               		// 0x029C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class UWillowPauseTicker*                          TimerPauseTicker;                                 		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentStartupStep;                               		// 0x02A4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      EggCode[ 0xA ];                                   		// 0x02A5 (0x000A) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5348 ];

		return pClassPointer;
	};

	void extSetLegalText ( );
	bool IsTimerActive ( struct FName FuncName );
	void ClearTimer ( struct FName FuncName );
	void SetTimer ( float Rate, unsigned long bLoop, struct FName FuncName );
	bool ValidateEggCode ( );
	void eventOnClose ( );
	void ClearDelegates ( );
	void ContinueToMenu ( );
	void SessionCreationComplete ( );
	void OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void TryCreateLANGame ( );
	void TryCreateInternetGame ( );
	void CreateSession ( );
	class UGFxMovieDefinition* GetFrontEndMovieDef ( );
	void DoStartupDeviceSelection ( );
	void PatcherDownloadProcessComplete ( );
	void DownloadPatcherFiles ( );
	void RefreshMissionTracker ( );
	void DlcRefreshComplete ( );
	void DlcRefreshCompleteFromBusy ( );
	void DoDlcEnumeration ( );
	void DoSparkAuthentication ( );
	void PerformStartupStep ( );
	void GotoNextStartupStep ( );
	void BeginStartupProcess ( );
	void CustomPlay ( struct FString frame );
	void extContinue ( );
	void extBeginWait ( );
	void HandleEggInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool HandleInputKey_AtTitle ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool HandleInputKey_ShowingLegal ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool ConditionalSkipToMenu ( );
	bool OnReturnToTitleScreen_Click ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool IsDialogOpen ( );
	void eventOnTick ( );
	bool OnInviteDialogClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool eventStart ( unsigned long StartPaused );
	void StopAttractLoop ( );
	bool IsAttractPlaying ( );
	void PlayAttractLoop ( );
};

UClass* UWillowGFxMoviePressStart::pClassPointer = NULL;

// Class WillowGame.WillowGFxMovie3DDefinition
// 0x0034 (0x00F0 - 0x00BC)
class UWillowGFxMovie3DDefinition : public UGFxMovieDefinition
{
public:
	float                                              View3DFOV;                                        		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              View3DScale;                                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     View3DTrans;                                      		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    View3DRot;                                        		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetMatricesEveryTick : 1;                        		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SplitscreenFOVScalar;                             		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplitscreenSizeScalar;                            		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalSplitscreenPanning;                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalSplitscreenPanning_Spread;                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5350 ];

		return pClassPointer;
	};

};

UClass* UWillowGFxMovie3DDefinition::pClassPointer = NULL;

// Class WillowGame.BankGFxDefinition
// 0x0034 (0x0124 - 0x00F0)
class UBankGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	class UGFxTextListDefinition*                      LeftSideDef;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      RightSideDef;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EmptySlotColor;                                   		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardCellWidth;                                    		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardCellHeight;                                   		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardTextureWidth;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardTextureHeight;                                		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Card1ExternalTextureMap;                          		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Card2ExternalTextureMap;                          		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5352 ];

		return pClassPointer;
	};

};

UClass* UBankGFxDefinition::pClassPointer = NULL;

// Class WillowGame.CreditsGFxDefinition
// 0x0070 (0x0160 - 0x00F0)
class UCreditsGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray< struct FCreditsLine >                      CreditData;                                       		// 0x00F0 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	float                                              DefaultSpeed;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFastForwardSpeed;                              		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRewindSpeed;                                   		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCreditsTextureInfo >               ImageMontage;                                     		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ImageMontagePackageName;                          		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                ImageDuration;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ImageBlankSpace;                                  		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InitialBlankSpace;                                		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoopMontageImages : 1;                           		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     MiddlewareLogosPackageName;                       		// 0x0130 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MiddlewareTexturePath;                            		// 0x013C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SplatPackageName;                                 		// 0x0148 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SplatTexturePath;                                 		// 0x0154 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5354 ];

		return pClassPointer;
	};

};

UClass* UCreditsGFxDefinition::pClassPointer = NULL;

// Class WillowGame.ItemInspectionGFxMovieDefinition
// 0x003C (0x012C - 0x00F0)
class UItemInspectionGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              ItemFOV;                                          		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ItemScale;                                        		// 0x00F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationSpeed;                                    		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleSpeed;                                       		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleMin;                                         		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleMax;                                         		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IntroTime;                                        		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    IntroRotation;                                    		// 0x010C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    IntroRotationRandomness;                          		// 0x0118 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IntroRotationAlphaPowerRandomness;                		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HeightThreshold;                                  		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5356 ];

		return pClassPointer;
	};

};

UClass* UItemInspectionGFxMovieDefinition::pClassPointer = NULL;

// Class WillowGame.VehicleSpawnStationGFxDefinition
// 0x0080 (0x0170 - 0x00F0)
class UVehicleSpawnStationGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray< unsigned char >                            SupportedTags;                                    		// 0x00F0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< unsigned char >                            RequiredTags;                                     		// 0x00FC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bUsePPOverride : 1;                               		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PostProcessInterpolationTime;                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewMeshFOV;                                   		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PreviewMeshScale;                                 		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IntroTime;                                        		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    DefaultMeshRotation[ 0x2 ];                       		// 0x011C (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    MeshRotationSpeed[ 0x2 ];                         		// 0x0134 (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     MeshOffset[ 0x2 ];                                		// 0x014C (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     HeaderTextOverrideKey;                            		// 0x0164 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5358 ];

		return pClassPointer;
	};

};

UClass* UVehicleSpawnStationGFxDefinition::pClassPointer = NULL;

// Class WillowGame.VendingMachineGFxDefinition
// 0x00C8 (0x01B8 - 0x00F0)
class UVendingMachineGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              StrictGiveUpDistance;                             		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LooseGiveUpDistance;                              		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrictTolerance;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LooseTolerance;                                   		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InitialLeftCell;                                  		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InitialRightCell;                                 		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ItemOfTheDayCell;                                 		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Card1Tex;                                         		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Card2Tex;                                         		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             RightSideCellOrderNames;                          		// 0x0130 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             BackpackCellNames;                                		// 0x013C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             EquippedCellNames;                                		// 0x0148 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TotalNumberOfCells;                               		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      WeaponsLeftSideDef;                               		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      WeaponsRightSideDef;                              		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      GrenadesLeftSideDef;                              		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      GrenadesRightSideDef;                             		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      HealthLeftSideDef;                                		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      HealthRightSideDef;                               		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ItemOfTheDay_Texture_Width;                       		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ItemOfTheDay_Texture_Height;                      		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ItemOfTheDay_Cell_Width;                          		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ItemOfTheDay_Cell_Height;                         		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Card_Texture_Width;                               		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Card_Texture_Height;                              		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Card_Cell_Width;                                  		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Card_Cell_Height;                                 		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ItemOfTheDayTextureLinkage;                       		// 0x0190 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Card1TextureLinkage;                              		// 0x019C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Card2TextureLinkage;                              		// 0x01A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                RefreshInterval;                                  		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5360 ];

		return pClassPointer;
	};

};

UClass* UVendingMachineGFxDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponScopeGFxDefinition
// 0x0018 (0x0108 - 0x00F0)
class UWeaponScopeGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray< struct FLabelToLinkageMapping >            LinkageMappings_Manufacturers;                    		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLabelToLinkageMapping >            LinkageMappings_WeaponTypes;                      		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5362 ];

		return pClassPointer;
	};

};

UClass* UWeaponScopeGFxDefinition::pClassPointer = NULL;

// Class WillowGame.WillowGFxThirdPersonDefinition
// 0x0030 (0x0120 - 0x00F0)
class UWillowGFxThirdPersonDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              CameraInterpSpeed;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloseInterpTime;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloseInterpDistSqThreshold;                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUsePPOverride : 1;                               		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFixedYaw : 1;                                    		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              PostProcessInterpolationTime;                     		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FThirdPersonMenuView >              TabViews;                                         		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CameraPitchMin;                                   		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraPitchMax;                                   		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MenuRotationSpeed;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MenuRotationSmoothingSpeed;                       		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5364 ];

		return pClassPointer;
	};

};

UClass* UWillowGFxThirdPersonDefinition::pClassPointer = NULL;

// Class WillowGame.CustomizationGFxDefinition
// 0x0000 (0x0120 - 0x0120)
class UCustomizationGFxDefinition : public UWillowGFxThirdPersonDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5366 ];

		return pClassPointer;
	};

};

UClass* UCustomizationGFxDefinition::pClassPointer = NULL;

// Class WillowGame.WillowInventoryGFxDefinition
// 0x0038 (0x0158 - 0x0120)
class UWillowInventoryGFxDefinition : public UWillowGFxThirdPersonDefinition
{
public:
	unsigned char                                      TF_Standard;                                      		// 0x0120 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TF_Trash;                                         		// 0x0121 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TF_Favorite;                                      		// 0x0122 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TweenTime;                                        		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPanelInfo >                        Panels;                                           		// 0x0128 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCardInfo >                         Cards;                                            		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           ExternalTextureMap;                               		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           CardExternalTextureMap;                           		// 0x014C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5368 ];

		return pClassPointer;
	};

};

UClass* UWillowInventoryGFxDefinition::pClassPointer = NULL;

// Class WillowGame.StatusMenuGFxDefinition
// 0x0150 (0x02A8 - 0x0158)
class UStatusMenuGFxDefinition : public UWillowInventoryGFxDefinition
{
public:
	TArray< struct FDirectionData >                    Directions;                                       		// 0x0158 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumEntriesOnMissionLog;                           		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      MissionLogTextDefinition;                         		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMissionStatusPresentation                  Pres_Active;                                      		// 0x016C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_ActivePlot;                                  		// 0x017C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_ReadyToTurnIn;                               		// 0x018C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_NotStarted;                                  		// 0x019C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_Complete;                                    		// 0x01AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_Ineligible;                                  		// 0x01BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_Failed;                                      		// 0x01CC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      UnselectedChallengeLogTextColor;                  		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxTextListDefinition*                      ChallengeLogTextDefinition;                       		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EmptyInventorySlotColor;                          		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Up;                                               		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Down;                                             		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Left;                                             		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Right;                                            		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Shield;                                           		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       mod;                                              		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Deck;                                             		// 0x0218 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponUpIdx;                                 		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponDownIdx;                               		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponLeftIdx;                               		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponRightIdx;                              		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedShieldIdx;                                		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedGrenadeModIdx;                            		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedClassModIdx;                              		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedArtifactIdx;                              		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponUpSuffix;                              		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponDownSuffix;                            		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponLeftSuffix;                            		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReadyWeaponRightSuffix;                           		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedShieldSuffix;                             		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedGrenadeModSuffix;                         		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedClassModSuffix;                           		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedArtifactSuffix;                           		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquippedCellWidth;                                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquippedCellHeight;                               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquippedSmCellWidth;                              		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquippedSmCellHeight;                             		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedTextureWidth;                             		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EquippedTextureHeight;                            		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardCellWidth;                                    		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardCellHeight;                                   		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardTextureWidth;                                 		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CardTextureHeight;                                		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BackpackCellWidth;                                		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BackpackCellHeight;                               		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkillTreeGFxDefinition*                     SkillDef;                                         		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     InventoryPanelPath;                               		// 0x0294 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UChallengesPanelDefinition*                  ChallengesPanelDef;                               		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         LatentRewardDef;                                  		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5370 ];

		return pClassPointer;
	};

};

UClass* UStatusMenuGFxDefinition::pClassPointer = NULL;

// Class WillowGame.TradingGFxDefinition
// 0x0000 (0x0158 - 0x0158)
class UTradingGFxDefinition : public UWillowInventoryGFxDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5372 ];

		return pClassPointer;
	};

};

UClass* UTradingGFxDefinition::pClassPointer = NULL;

// Class WillowGame.WillowHUDGFxMovieDefinition
// 0x0084 (0x0174 - 0x00F0)
class UWillowHUDGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              MinimapRadius;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimapRadiusInVehicle;                           		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimapRadiusLerpTime;                            		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaForInWorldObjectives;                        		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StatusFanfareTweenTime;                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldSpaceIconRangeIn;                            		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldSpaceIconRangeOut;                           		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldSpaceIconLerpTime;                           		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ObjFadeAlpha;                                     		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ObjFadeScale;                                     		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ObjFadeSpeed;                                     		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionTestInterval;                            		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionAlpha;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChallengePart1Time;                               		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChallengePart2Time;                               		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UPawnAllegiance* >                   NoLevelAllegiances;                               		// 0x012C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UPawnAllegiance* >                   UsableFadeAllegiances;                            		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMissionObjectiveDefinition* >       RecordingObjectives;                              		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             RecordingMaps;                                    		// 0x0150 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FScaledHUDElement >                 ScaledElements;                                   		// 0x015C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FInjuredStringReplacementSet >      InjuredStringReplacements;                        		// 0x0168 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5374 ];

		return pClassPointer;
	};

};

UClass* UWillowHUDGFxMovieDefinition::pClassPointer = NULL;

// Class WillowGame.WillowGFxMovieStatePlatform
// 0x0010 (0x006C - 0x005C)
class UWillowGFxMovieStatePlatform : public UGFxMovieState
{
public:
	TArray< struct FMovieStateData >                   PlatformStates;                                   		// 0x005C (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	unsigned long                                      UseXboxFrameForPCWithGamepad : 1;                 		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5376 ];

		return pClassPointer;
	};

};

UClass* UWillowGFxMovieStatePlatform::pClassPointer = NULL;

// Class WillowGame.WillowGFxMovieStateUsable
// 0x000C (0x0068 - 0x005C)
class UWillowGFxMovieStateUsable : public UGFxMovieState
{
public:
	TArray< struct FMovieStateData >                   UsabilityStates;                                  		// 0x005C (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5378 ];

		return pClassPointer;
	};

};

UClass* UWillowGFxMovieStateUsable::pClassPointer = NULL;

// Class WillowGame.WillowGFxUIManager
// 0x003C (0x0078 - 0x003C)
class UWillowGFxUIManager : public UObject
{
public:
	class UWillowGFxUIManagerDefinition*               MyDefinition;                                     		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     PlayerOwner;                                      		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PlayerViewOffset;                                 		// 0x0044 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UMeshComponent*                              ScreenMesh;                                       		// 0x0050 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UTextureRenderTarget2D*                      RenderTarget;                                     		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGearboxGFxMovie* >                  ScreenMovies;                                     		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bDefaultScreenMesh : 1;                           		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPassAxisInputToScreenMovies : 1;                 		// 0x0064 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UGFxMovieDefinition*                         TheLobby;                                         		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __OnMovieSpawned__Delegate;                       		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5380 ];

		return pClassPointer;
	};

	bool WantsPause ( );
	void UpdatePause ( );
	void Movie_OnClosed ( class UGearboxGFxMovie* Movie );
	void ScreenMovie_OnClosed ( class UGearboxGFxMovie* Movie );
	void UpdateFocus ( class UGearboxGFxMovie* Movie );
	class UGearboxGFxMovie* FindFocusMovie ( );
	class UWillowGFxTrainingDialogBox* ShowTrainingDialog ( struct FString Message, struct FString Title, float PauseDuration, unsigned char StatusMenuTab, unsigned long bNoPause );
	class UWillowGFxEditDialog* ShowEditDialog ( );
	class UWillowGFxDialogBox* ShowDialog ( unsigned long bRestrictToOwnerViewport );
	void OnRestrictDialogToOwnerViewport ( class UGearboxGFxMovie* Movie );
	class UGearboxGFxMovie* GetPlayingMovie ( );
	bool eventIsBlockingMoviePlaying ( );
	void CloseMovie ( class UGFxMovieDefinition* MovieDefinition );
	bool IsMoviePlaying ( class UGFxMovieDefinition* MovieDefinition );
	class UGearboxGFxMovie* PlayMovie ( class UGFxMovieDefinition* MovieDefinition, class UObject* OtherObject );
	void OnMovieSpawned ( class UGearboxGFxMovie* Movie );
	int ModalGameMenuCount ( );
	void Init ( class UWillowGFxUIManagerDefinition* Definition, class AWillowPlayerController* Owner );
	bool ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	bool CalcCamera ( float fDeltaTime, struct FVector* CamLoc, struct FRotator* out_CamRot );
	void UpdateScreenMesh ( );
};

UClass* UWillowGFxUIManager::pClassPointer = NULL;

// Class WillowGame.WillowGFxUIManagerDefinition
// 0x0084 (0x00C0 - 0x003C)
class UWillowGFxUIManagerDefinition : public UGBXDefinition
{
public:
	struct FVector                                     MeshTranslation[ 0x6 ];                           		// 0x003C (0x0048) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    MeshRotation;                                     		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ViewOffsetClamp;                                  		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewOffsetScale;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TextureParameterName;                             		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RenderTextureMode;                                		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         DialogBoxDefinition;                              		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         TrainingDialogBoxDefinition;                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         TrainingDialogBoxDefinition_NoPause;              		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieDefinition*                         EditDialogBoxDefinition;                          		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RenderTextureSize;                                		// 0x00BC (0x0004) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5382 ];

		return pClassPointer;
	};

	struct FVector GetTranslation ( class AWillowPlayerController* PC );
};

UClass* UWillowGFxUIManagerDefinition::pClassPointer = NULL;

// Class WillowGame.WillowLeviathanService
// 0x0004 (0x0050 - 0x004C)
class UWillowLeviathanService : public ULeviathanService
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x004C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 5384 ];

		return pClassPointer;
	};

	void RecordDiagnosticEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char ActionType, int DiagnosticData1 );
	void RecordCustomizeCharacterEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FName CustomizationName, unsigned char CustomizationEventType );
	void RecordCharacterDeletedEventForPlayer ( class AGearboxPlayerController* ForPlayer, int DeletedCharPlayTime, int DeletedCharLevel, struct FString DeletedCharGuid );
	void RecordCharacterCreatedEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FName CreatedClass, struct FString CreatedGuid );
	void RecordCharacterLoadedEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FString LoadedGuid, int LoadedPlayTime );
	void RecordPointsSpentEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Type, struct FName ThingBought );
	void RecordPointsResetEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Type, int Amount );
	void RecordPointsEarnedEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Type, int Amount, int PostEarnedUnspent );
	void RecordPartnerLeftGameEventForAllPlayers ( struct FString LeavingPlayerId, int SessionPlayerNumber, unsigned char LeavingPlayerType );
	void RecordPartnerLeftGameEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FString LeavingPlayerId, int SessionPlayerNumber, unsigned char LeavingPlayerType );
	void RecordPartnerJoinedGameEventForAllPlayers ( struct FString JoiningPlayerId, int SessionPlayerNumber, unsigned char JoiningPlayerType );
	void RecordPartnerJoinedGameEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FString JoiningPlayerId, int SessionPlayerNumber, unsigned char JoiningPlayerType );
	void RecordCharacterRevivedEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Reason );
	void RecordCharacterKilledEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Reason );
	void RecordCharacterDownEventForPlayer ( class AGearboxPlayerController* ForPlayer, int EnemyLevel, struct FName Enemy, struct FVector2D* Location );
	void RecordTeleportedToVehicleEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FName VehicleType, int DistanceToVehicle );
	void RecordDestroyVehicleEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FName DestroyedVehicleType, unsigned char VehicleDestructionReason );
	void RecordSpawnVehicleEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FName SpawnedVehicleType );
	void RecordDeclinedDuelEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char DuelDeclineReason );
	void RecordDuelEndedEventForPlayer ( class AGearboxPlayerController* ForPlayer, int DuelEndedVersus, unsigned char DuelResult );
	void RecordMinorActionEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char ActionType );
	void RecordMissionFastForwardEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char FastForwardResult, struct FName MissionDefinition );
	void RecordMissionObjectiveChangedEventForPlayer ( class AGearboxPlayerController* ForPlayer, int ObjectiveIndex, int ObjectiveProgress, int PreviousObjectiveProgress, struct FName MissionDefinition );
	void RecordMissionObjectiveSetActivatedEventForPlayer ( class AGearboxPlayerController* ForPlayer, int ObjectiveSetIndex, struct FName MissionDefinition );
	void RecordMissionStatusChangedEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Status, struct FName MissionDefinition );
	void RecordDiscoverLocationEventForPlayer ( class AGearboxPlayerController* ForPlayer, int ExperienceGained, struct FName Location );
	void RecordWieldedWeaponChangedEventForPlayer ( class AGearboxPlayerController* ForPlayer, class AWillowInventory* Inv, unsigned long OffHand );
	void RecordBlackMarketUpgradePurchasedEventForPlayer ( class AGearboxPlayerController* ForPlayer, int UpgradeLevel, struct FName UpgradeDefinition );
	void RecordItemMovedInInventoryEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Slot, class AWillowInventory* Inv );
	void RecordItemFromInventoryEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Location, unsigned char Slot, class AWillowInventory* Inv, int SessionPlayerNumber );
	void RecordItemToInventoryEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Location, unsigned char Slot, class AWillowInventory* Inv, int SessionPlayerNumber, unsigned long ReplacedEquipped );
	void RecordItemSpawnedEventForAllPlayers ( unsigned char Location, class AWillowInventory* Inv, struct FName SourceResponsible, struct FName SourceDefinition );
	void RecordItemSpawnedEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Location, class AWillowInventory* Inv, struct FName SourceResponsible, struct FName SourceDefinition );
	void RecordPlayerCharacterGainedLevelEventForPlayer ( class AGearboxPlayerController* ForPlayer, int NewLevel );
	void RecordExperienceGainedEventForPlayer ( class AGearboxPlayerController* ForPlayer, unsigned char Source, int ExperienceGained );
	void RecordLocationPulseEventForPlayer ( class AGearboxPlayerController* ForPlayer, struct FVector2D* Location );
	bool IsLeviathanEnabled ( );
	void PublishEvents ( );
	void NewPlaySession ( class AWillowPlayerController* ForPlayer );
};

UClass* UWillowLeviathanService::pClassPointer = NULL;

// Class WillowGame.Action_AimAtScanRange
// 0x0010 (0x0138 - 0x0128)
class UAction_AimAtScanRange : public UWillowActionSequencePawn
{
public:
	int                                                YawRange;                                         		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScanSpeed;                                        		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PointDelay;                                       		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentYawRange;                                  		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48253 ];

		return pClassPointer;
	};

	void SetNewRotation ( );
	void eventStop ( );
	void eventStart ( );
};

UClass* UAction_AimAtScanRange::pClassPointer = NULL;

// Class WillowGame.Action_AimAtThreat
// 0x0000 (0x0128 - 0x0128)
class UAction_AimAtThreat : public UWillowActionSequencePawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48265 ];

		return pClassPointer;
	};

	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_AimAtThreat::pClassPointer = NULL;

// Class WillowGame.BehaviorAliasLookupDefinition
// 0x000C (0x0048 - 0x003C)
class UBehaviorAliasLookupDefinition : public UGBXDefinition
{
public:
	TArray< struct FBehaviorAliasReference >           BehaviorAliasList;                                		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48576 ];

		return pClassPointer;
	};

	bool RunBehaviorAlias ( class UBehaviorAliasDefinition* BehaviorAlias, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData );
};

UClass* UBehaviorAliasLookupDefinition::pClassPointer = NULL;

// Class WillowGame.PhaseLockDefinition
// 0x001C (0x0058 - 0x003C)
class UPhaseLockDefinition : public UGBXDefinition
{
public:
	float                                              DropTime;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HeightFromGround;                                 		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExpressionEvaluator*                        CanPlayDropAnims;                                 		// 0x0044 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class USpecialMove_PhaseLock*                      LiftAnim;                                         		// 0x0048 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_PhaseLock*                      LoopAnim;                                         		// 0x004C (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_PhaseLock*                      DropAnim;                                         		// 0x0050 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USpecialMove_PhaseLock*                      LandAnim;                                         		// 0x0054 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48720 ];

		return pClassPointer;
	};

};

UClass* UPhaseLockDefinition::pClassPointer = NULL;

// Class WillowGame.Action_AttackLoop
// 0x0020 (0x0208 - 0x01E8)
class UAction_AttackLoop : public UAction_BasicAttack
{
public:
	struct FAIRange                                    LoopCount;                                        		// 0x01E8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      StartSMD;                                         		// 0x01F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      StopSMD;                                          		// 0x01F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      LoopSMD;                                          		// 0x01F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExpressionEvaluator*                        LoopCondition;                                    		// 0x01FC (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	int                                                NumLoops;                                         		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxLoops;                                         		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49130 ];

		return pClassPointer;
	};

	bool PlayAnim ( class USpecialMoveDefinition* Anim, struct FName CallbackName );
};

UClass* UAction_AttackLoop::pClassPointer = NULL;

// Class WillowGame.Action_BikeMove
// 0x003C (0x0164 - 0x0128)
class UAction_BikeMove : public UWillowActionSequencePawn
{
public:
	unsigned long                                      bLimitedMovement : 1;                             		// 0x0128 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPathingFailed : 1;                               		// 0x0128 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FVector >                           TargetOffsets;                                    		// 0x012C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              RecalcDestTargetMoveDist;                         		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReachDistance;                                    		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinTravelDistance;                                		// 0x0140 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVector >                           Dests;                                            		// 0x0144 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DestIdx;                                          		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumFailedDests;                                   		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CachedTargetLoc;                                  		// 0x0158 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49152 ];

		return pClassPointer;
	};

	bool WantsPathFind ( );
	bool ShouldRecalcDests ( );
	bool IsDestClose ( );
	void UnclaimMovement ( );
	void ClaimMovement ( );
	bool CanMove ( );
	void ResetDests ( );
	bool HasDests ( );
	void CalcDests ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_BikeMove::pClassPointer = NULL;

// Class WillowGame.Action_FollowPath
// 0x0024 (0x0154 - 0x0130)
class UAction_FollowPath : public UAction_Burrow
{
public:
	unsigned long                                      bPerchExiting : 1;                                		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWaitingOnPerch : 1;                              		// 0x0130 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWaitingOnTimer : 1;                              		// 0x0130 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWaitingOnSpecialMoves : 1;                       		// 0x0130 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bReachedNode : 1;                                 		// 0x0130 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bPathInterrupted : 1;                             		// 0x0130 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FPerchAnimData                              PerchData;                                        		// 0x0134 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class AWillowAIMoveNode*                           MoveNode;                                         		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowAIMoveNode*                           NextNode;                                         		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastPathFailTime;                                 		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeToStopLooping;                                		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49240 ];

		return pClassPointer;
	};

	void PathAttemptFinished ( );
	void PerchStop ( );
	void PerchDone ( );
	void PerchPlayStop ( unsigned long bInterrupted );
	void PerchPlayLoop ( unsigned long bInterrupted );
	void PerchPlayIdle ( unsigned long bInterrupted );
	void PerchStart ( class APerch* NewPerch );
	struct FBehaviorConsumerHandle GetPerchConsumerHandle ( );
	void SetPerch ( );
	void SpecialMoveCallback ( );
	void SetSpecialMoves ( );
	void MoveTimerCallback ( );
	void SetMoveTimer ( );
	void eventStop ( );
	void SetMoveNode ( class AWillowAIMoveNode* NewNode );
	class AWillowAIMoveNode* GetMoveNode ( );
	void SetMoveFacingPolicy ( );
	void SetMoveNodeSpeed ( );
};

UClass* UAction_FollowPath::pClassPointer = NULL;

// Class WillowGame.Action_BunkerBoss_Flight
// 0x0088 (0x01DC - 0x0154)
class UAction_BunkerBoss_Flight : public UAction_FollowPath
{
public:
	unsigned long                                      bShowDebug : 1;                                   		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDebugPerch : 1;                                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnScriptedPath : 1;                              		// 0x0154 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bMoveToOffset : 1;                                		// 0x0154 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNearDeath : 1;                                   		// 0x0154 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bTurnOffSkelControl : 1;                          		// 0x0154 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	float                                              OffsetDistance;                                   		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeBetweenAttacks;                               		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CircleFlightDistance;                             		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CircleFlightHeight;                               		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     NonTargetOrigin;                                  		// 0x0168 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UExpressionEvaluator*                        NearDeathExpression;                              		// 0x0174 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	struct FVector                                     MoveToPointNearDeath;                             		// 0x0178 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UExpressionEvaluator*                        PerchLoopExpression;                              		// 0x0184 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class USpecialMoveDefinition*                      Turn360Anim;                                      		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFlagDefinition*                             BackupPerchFlag;                                  		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DeathPerchName;                                   		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RotationOffsetName;                               		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastLocation;                                     		// 0x01A0 (0x000C) [0x0000000000000000]              
	struct FVector                                     BackupOffset;                                     		// 0x01AC (0x000C) [0x0000000000000000]              
	float                                              TimeOfNextAttack;                                 		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              NextValidationTime;                               		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              BackupDist;                                       		// 0x01C0 (0x0004) [0x0000000000000000]              
	int                                                PerchFailCount;                                   		// 0x01C4 (0x0004) [0x0000000000000000]              
	struct FVector                                     PerchOffset;                                      		// 0x01C8 (0x000C) [0x0000000000000000]              
	class APerch*                                      DeathPerch;                                       		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      RotOffsetBone;                                    		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49311 ];

		return pClassPointer;
	};

	void PerchStart ( class APerch* NewPerch );
	struct FVector GetFlightPathToPerch ( );
	void PerchDone ( );
	bool ReadyToDie ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_BunkerBoss_Flight::pClassPointer = NULL;

// Class WillowGame.Action_Idle
// 0x001C (0x014C - 0x0130)
class UAction_Idle : public UAction_Burrow
{
public:
	struct FAIRange                                    IdleTime;                                         		// 0x0130 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CloakBehavior;                                    		// 0x0138 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      FollowType;                                       		// 0x0139 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bLookAtTarget : 1;                                		// 0x013C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              DistMin;                                          		// 0x0140 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DistMax;                                          		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CheckRate;                                        		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49426 ];

		return pClassPointer;
	};

	void CheckStateTransition ( );
	bool ShouldPathToTarget ( );
	class AActor* GetGoalActor ( );
	void IdleFinished ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_Idle::pClassPointer = NULL;

// Class WillowGame.Action_BurrowIdle
// 0x0000 (0x014C - 0x014C)
class UAction_BurrowIdle : public UAction_Idle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49454 ];

		return pClassPointer;
	};

};

UClass* UAction_BurrowIdle::pClassPointer = NULL;

// Class WillowGame.Action_ChargeTarget
// 0x0018 (0x0200 - 0x01E8)
class UAction_ChargeTarget : public UAction_BasicAttack
{
public:
	float                                              MissDistance;                                     		// 0x01E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StrikeDistance;                                   		// 0x01EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMove_Motion*                         ChargeStart;                                      		// 0x01F0 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class USpecialMove_Motion*                         ChargeStop;                                       		// 0x01F4 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class USpecialMove_Motion*                         ChargeStrike;                                     		// 0x01F8 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class USpecialMove_Motion*                         ChargeHitWall;                                    		// 0x01FC (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49460 ];

		return pClassPointer;
	};

	void StopCharge ( class USpecialMoveDefinition* SMD );
	void ChargeFinished ( );
	struct FName eventCanRun ( );
};

UClass* UAction_ChargeTarget::pClassPointer = NULL;

// Class WillowGame.Action_CombatPerch
// 0x0004 (0x0158 - 0x0154)
class UAction_CombatPerch : public UAction_FollowPath
{
public:
	unsigned long                                      bMustHaveTarget : 1;                              		// 0x0154 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTeleport : 1;                                    		// 0x0154 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPickClosestPerch : 1;                            		// 0x0154 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49495 ];

		return pClassPointer;
	};

	bool eventPathFind ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_CombatPerch::pClassPointer = NULL;

// Class WillowGame.Action_DeathTrap
// 0x003C (0x0164 - 0x0128)
class UAction_DeathTrap : public UWillowActionSequencePawn
{
public:
	struct FAIRange                                    MoveRange;                                        		// 0x0128 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bRandomOffsets : 1;                               		// 0x0130 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanShoot : 1;                                    		// 0x0130 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAttacking : 1;                                   		// 0x0130 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCloseToOwner : 1;                                		// 0x0130 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FAIRange                                    RandomHOffset;                                    		// 0x0134 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    RandomVOffset;                                    		// 0x013C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    RandomTime;                                       		// 0x0144 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    RandomAngleLimits;                                		// 0x014C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AttackDist;                                       		// 0x0154 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     CurrentMoveOffset;                                		// 0x0158 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49572 ];

		return pClassPointer;
	};

	void Reinitialize ( );
	bool WantsPath ( float Distance );
	void StopAttacking ( );
	void StartAttacking ( );
	void CheckAttack ( );
	bool CanAttack ( );
	void eventActivateEvent ( struct FName EventName );
	float GetBufferDist ( );
	struct FVector GetMoveLoc ( );
	void PickRandomOffset ( );
	int GetRandomYaw ( );
	class AActor* GetPointDefense ( );
	class APawn* GetOwner ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_DeathTrap::pClassPointer = NULL;

// Class WillowGame.Action_Drive_Pursuit
// 0x008C (0x01B4 - 0x0128)
class UAction_Drive_Pursuit : public UWillowActionSequencePawn
{
public:
	float                                              TargetForwardVelocityStartAction;                 		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetForwardVelocityStopAction;                  		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeBeforeExitingActionIfTargetSlowsDown;         		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeedMultiplier;                               		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedMultiplierDuringSharpTurns;                  		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetStartAction;                      		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetStopAction;                       		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceStopUsingBreadcrumbs;                     		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetPursue;                           		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetRetreat;                          		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseHandbrakeToStop : 1;                           		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseAfterburnerBoosting : 1;                       		// 0x0150 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      HasStarted : 1;                                   		// 0x0150 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      WantsToBoost : 1;                                 		// 0x0150 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      WantsToStopBoosting : 1;                          		// 0x0150 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              CanUseHandbrakeSpeedThreshold;                    		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoHandbrakeSpeedThreshold;                        		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimeTargetWasFastEnough;                      		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PursuitPoint;                                     		// 0x0164 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedMultiplier;                                  		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeOfLastBraking;                                		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowVehicleCombatArea*                    MyCombatArea;                                     		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowVehicleCombatArea*                    TargetCombatArea;                                 		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBoostTime;                                    		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeStampOutsideCombatArea;                       		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowVehicle*                              TargetVehicle;                                    		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FEnemyBreadCrumbStruct >            EnemyPosBreadCrumbs;                              		// 0x018C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      CurrentState;                                     		// 0x0198 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                I;                                                		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinTimeSpentBraking;                              		// 0x01A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RequiredDelayBetweenBrakings;                     		// 0x01A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RequiredDelayBetweenBoosts;                       		// 0x01A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BreadCrumbCoalesceThreshold;                      		// 0x01AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              OutOfCombatAreaGracePeriod;                       		// 0x01B0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49650 ];

		return pClassPointer;
	};

	void DisplayDebugBreadCrumbs ( );
	bool ReachedBreadCrumb ( );
	void UpdateBreadCrumbs ( );
	bool IsSharpTurn ( struct FVector InPursuitPoint );
	struct FVector GetPursuitPointAndSpeedMultiplier ( float* OutSpeedMultiplier );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
	void ComputeCurrentState ( );
};

UClass* UAction_Drive_Pursuit::pClassPointer = NULL;

// Class WillowGame.Action_Drive_AlongsideTarget
// 0x001C (0x01D0 - 0x01B4)
class UAction_Drive_AlongsideTarget : public UAction_Drive_Pursuit
{
public:
	float                                              IdealDistanceFromTarget;                          		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdealDistanceAheadOfTarget;                       		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinSpeedMultiplierWhenAheadOfTarget;              		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeedMultiplierWhenAheadOfTarget;              		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedDamperWhenRightAlongsideTarget;              		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceAheadOfTargetToAimFor;                    		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NudgeDistance;                                    		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49725 ];

		return pClassPointer;
	};

	struct FVector GetPursuitPointAndSpeedMultiplier ( float* OutSpeedMultiplier );
	struct FVector DetermineClosestFlankPoint ( );
};

UClass* UAction_Drive_AlongsideTarget::pClassPointer = NULL;

// Class WillowGame.Action_Drive_AvoidWall
// 0x0040 (0x0168 - 0x0128)
class UAction_Drive_AvoidWall : public UWillowActionSequencePawn
{
public:
	float                                              LineCheckDistance;                                		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumLineChecks;                                    		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitNormalDotZThreshold;                           		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedThresholdWhenVeering;                        		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PursuitPoint;                                     		// 0x013C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CollisionPoint;                                   		// 0x0148 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     HitNormal;                                        		// 0x0154 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              Speed;                                            		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedMultiplier;                                  		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49749 ];

		return pClassPointer;
	};

	bool IAmBlocked ( );
	struct FVector GetPursuitPoint ( float* OutSpeedMultiplier );
	void eventStart ( );
	struct FName eventCanRun ( );
	bool TestForCollision ( );
};

UClass* UAction_Drive_AvoidWall::pClassPointer = NULL;

// Class WillowGame.Action_Drive_BackUpAndAdjust
// 0x0004 (0x016C - 0x0168)
class UAction_Drive_BackUpAndAdjust : public UAction_Drive_AvoidWall
{
public:
	unsigned long                                      HasStarted : 1;                                   		// 0x0168 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49781 ];

		return pClassPointer;
	};

	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_Drive_BackUpAndAdjust::pClassPointer = NULL;

// Class WillowGame.Action_Drive_GoBackToCombatArea
// 0x0010 (0x0138 - 0x0128)
class UAction_Drive_GoBackToCombatArea : public UWillowActionSequencePawn
{
public:
	float                                              MinSpeedMultiplier;                               		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxSpeedMultiplier;                               		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	unsigned long                                      HasStarted : 1;                                   		// 0x0134 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49791 ];

		return pClassPointer;
	};

	void SetSpeedMultiplier ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_Drive_GoBackToCombatArea::pClassPointer = NULL;

// Class WillowGame.Action_Drive_Pursuit_TargetOnFoot
// 0x0050 (0x0178 - 0x0128)
class UAction_Drive_Pursuit_TargetOnFoot : public UWillowActionSequencePawn
{
public:
	float                                              MaxSpeedMultiplier;                               		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedMultiplierDuringSharpTurns;                  		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetStartAction;                      		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetStopAction;                       		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetPursue;                           		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceToTargetRetreat;                          		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseHandbrakeToStop : 1;                           		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      HasStarted : 1;                                   		// 0x0140 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              CanUseHandbrakeSpeedThreshold;                    		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoHandbrakeSpeedThreshold;                        		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PursuitPoint;                                     		// 0x0150 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedMultiplier;                                  		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeOfLastBraking;                                		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowVehicleCombatArea*                    MyCombatArea;                                     		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeStampOutsideCombatArea;                       		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinTimeSpentBraking;                              		// 0x016C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RequiredDelayBetweenBrakings;                     		// 0x0170 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              OutOfCombatAreaGracePeriod;                       		// 0x0174 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49805 ];

		return pClassPointer;
	};

	bool IsSharpTurn ( struct FVector InPursuitPoint );
	struct FVector GetPursuitPointAndSpeedMultiplier ( float* OutSpeedMultiplier );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_Drive_Pursuit_TargetOnFoot::pClassPointer = NULL;

// Class WillowGame.Action_DriveVehicle
// 0x0040 (0x0168 - 0x0128)
class UAction_DriveVehicle : public UWillowActionSequencePawn
{
public:
	float                                              MaxSpeedMultiplier;                               		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ReachedNodeWeighting;                             		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	class AGearboxAIMoveNode*                          MoveNode;                                         		// 0x0134 (0x0004) [0x0000000000000000]              
	class AGearboxAIMoveNode*                          NextMoveNode;                                     		// 0x0138 (0x0004) [0x0000000000000000]              
	struct FVector                                     StartLoc;                                         		// 0x013C (0x000C) [0x0000000000000000]              
	struct FVector                                     VectA;                                            		// 0x0148 (0x000C) [0x0000000000000000]              
	struct FVector                                     VectB;                                            		// 0x0154 (0x000C) [0x0000000000000000]              
	float                                              T;                                                		// 0x0160 (0x0004) [0x0000000000000000]              
	unsigned long                                      HasStarted : 1;                                   		// 0x0164 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49846 ];

		return pClassPointer;
	};

	void AdvanceNodes ( );
	bool PassedNode ( );
	bool ReachedNode ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
	class AWillowAIMoveNode* GetBestPatrolNode ( );
};

UClass* UAction_DriveVehicle::pClassPointer = NULL;

// Class WillowGame.Action_FinalBoss
// 0x0000 (0x0154 - 0x0154)
class UAction_FinalBoss : public UAction_FollowPath
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49875 ];

		return pClassPointer;
	};

	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_FinalBoss::pClassPointer = NULL;

// Class WillowGame.Action_FinalBossFly
// 0x003C (0x0190 - 0x0154)
class UAction_FinalBossFly : public UAction_FollowPath
{
public:
	struct FName                                       LandPerchID;                                      		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightSplineName;                                 		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightSplineReverseName;                          		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightAnimNodeRName;                              		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FlightAnimNodeLName;                              		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class APerch*                                      FlyToPerch;                                       		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASplineActor*                                FlightSpline;                                     		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bReverse : 1;                                     		// 0x0184 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UAnimNodeSequence*                           MyAnimSeqR;                                       		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           MyAnimSeqL;                                       		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49884 ];

		return pClassPointer;
	};

	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_FinalBossFly::pClassPointer = NULL;

// Class WillowGame.Action_FlyAnimAttack
// 0x0028 (0x0158 - 0x0130)
class UAction_FlyAnimAttack : public UAction_Burrow
{
public:
	unsigned char                                      AimType;                                          		// 0x0130 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VisionAngle;                                      		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAIRange                                    Range;                                            		// 0x0138 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bShootTarget : 1;                                 		// 0x0140 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAttackFromOppositeSideOfMaster : 1;              		// 0x0140 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTargetHeld : 1;                                  		// 0x0140 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class USpecialMoveDefinition*                      AttackAnim;                                       		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CheckRate;                                        		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              Aim;                                              		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAIRange                                    ActualRange;                                      		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49910 ];

		return pClassPointer;
	};

	bool ValidAttackLoc ( struct FVector TestLoc );
	struct FVector GetAttackLoc ( );
	bool IsAimed ( );
	float GetDotToTarget ( );
	void AttackFinished ( );
	void CheckStateTransition ( );
	struct FName GetDesiredState ( );
	void eventActivateEvent ( struct FName EventName );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
	void eventInit ( );
};

UClass* UAction_FlyAnimAttack::pClassPointer = NULL;

// Class WillowGame.Action_GoToScriptedDestination
// 0x0004 (0x0158 - 0x0154)
class UAction_GoToScriptedDestination : public UAction_FollowPath
{
public:
	float                                              FindLookAtTargetTime;                             		// 0x0154 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49962 ];

		return pClassPointer;
	};

	void FindLookAtTarget ( );
	bool ReachedFormation ( struct FVector TestLoc );
	bool CanFollowFormationOwner ( );
	bool InRange ( struct FVector TestLoc );
	bool WantsPath ( );
	void SetMoveNode ( class AWillowAIMoveNode* NewNode );
	class AWillowAIMoveNode* GetMoveNode ( );
	void SetMoveNodeSpeed ( );
	unsigned char GetDefaultMoveNodeSpeed ( );
	void SetMoveFacingPolicy ( );
	void LookAtScriptedFocus ( );
	void CheckStateTransition ( );
	struct FName GetDesiredStateName ( );
	bool ShouldLookAtPlayer ( );
	void eventActivateEvent ( struct FName EventName );
	void eventUpdate ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_GoToScriptedDestination::pClassPointer = NULL;

// Class WillowGame.Action_GrabPickup
// 0x0020 (0x0148 - 0x0128)
class UAction_GrabPickup : public UWillowActionSequencePawn
{
public:
	float                                              CheckRadius;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMoveDefinition*                      PickupAnim;                                       		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShootTarget : 1;                                 		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              GrabTimer;                                        		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CheckTime;                                        		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              CheckRadiusSq;                                    		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCheckTime;                                    		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPickup*                               MyPickup;                                         		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50054 ];

		return pClassPointer;
	};

	void ActuallyPickupItem ( );
	bool eventPathFind ( );
	struct FVector GetPathLocation ( );
	bool HasPathToPickup ( );
	void CheckPickUp ( );
	bool ValidPickup ( class AWillowPickup* CheckPickUp );
	void eventStart ( );
	struct FName eventCanRun ( );
	void eventInit ( );
};

UClass* UAction_GrabPickup::pClassPointer = NULL;

// Class WillowGame.WillowReplicatedEmitter
// 0x0074 (0x0210 - 0x019C)
class AWillowReplicatedEmitter : public AWillowEmitter
{
public:
	struct FEmitterTemplateOptions                     EmitterTemplate;                                  		// 0x019C (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              ServerLifeSpan;                                   		// 0x01A8 (0x0004) [0x0000000000000000]              
	int                                                NumFloatParameters;                               		// 0x01AC (0x0004) [0x0000000000000000]              
	int                                                NumVectorParameters;                              		// 0x01B0 (0x0004) [0x0000000000000000]              
	int                                                NumColorParameters;                               		// 0x01B4 (0x0004) [0x0000000000000000]              
	struct FFloatParameter                             ReplicatedFloatParameters[ 0x2 ];                 		// 0x01B8 (0x0018) [0x0000000000000020]              ( CPF_Net )
	struct FVectorParameter                            ReplicatedVectorParameters[ 0x2 ];                		// 0x01D0 (0x0028) [0x0000000000000020]              ( CPF_Net )
	struct FColorParameter                             ReplicatedColorParameters[ 0x2 ];                 		// 0x01F8 (0x0018) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50129 ];

		return pClassPointer;
	};

	void Behavior_ChangeParticleSystemActiveState ( unsigned char ChangeType );
	void Behavior_SetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** Param );
	bool Behavior_GetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** Param );
	bool Behavior_GetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Param );
	bool Behavior_GetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* Param );
	bool Behavior_GetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* Param );
	void Behavior_SetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Param );
	void Behavior_SetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* Param );
	void Behavior_SetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* Param );
	void ApplyColorParameters ( );
	void ApplyVectorParameters ( );
	void ApplyFloatParameters ( );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
	void SetTemplateWithCensoredAlternative ( class UParticleSystem* DefaultTemplate, class UParticleSystem* CensoredTemplateAlternative, unsigned long bEffectEligibleForCensoring, unsigned long bDestroyOnFinish );
	void eventReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
};

UClass* AWillowReplicatedEmitter::pClassPointer = NULL;

// Class WillowGame.Action_MortarAttack
// 0x007C (0x0264 - 0x01E8)
class UAction_MortarAttack : public UAction_BasicAttack
{
public:
	float                                              ShotDelay;                                        		// 0x01E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MortarSocket;                                     		// 0x01EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FTrajectoryData                             Options;                                          		// 0x01F4 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumShots;                                         		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           MortarValues;                                     		// 0x0218 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UProjectileDefinition*                       MortarProjectile;                                 		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMoveDefinition*                      StartAnim;                                        		// 0x0228 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      ShootAnim;                                        		// 0x022C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      StopAnim;                                         		// 0x0230 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BeamSocket;                                       		// 0x0234 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFiringModeDefinition*                       BeamFiringModeDefinition;                         		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bStartAnimDefinesSeekTime : 1;                    		// 0x0240 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMoveSeeker : 1;                                  		// 0x0240 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSeeking : 1;                                     		// 0x0240 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FVector                                     SeekStartOffset;                                  		// 0x0244 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SeekTime;                                         		// 0x0250 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             TargetParticle;                                   		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SeekSpeed;                                        		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ShotsTaken;                                       		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AEmitter*                                    Effect;                                           		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50300 ];

		return pClassPointer;
	};

	void FireMortar ( );
	void CreateEffect ( );
	void DetachBeam ( );
	void AttachBeam ( );
	void eventStop ( );
};

UClass* UAction_MortarAttack::pClassPointer = NULL;

// Class WillowGame.ILightProjectileManagerOwner
// 0x0000 (0x003C - 0x003C)
class UILightProjectileManagerOwner : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50325 ];

		return pClassPointer;
	};

	class AWillowLightProjectileManager* GetLightProjMgrFor ( class AWillowWeapon* aWeapon );
};

UClass* UILightProjectileManagerOwner::pClassPointer = NULL;

// Class WillowGame.Action_MoveToFormation
// 0x0014 (0x0144 - 0x0130)
class UAction_MoveToFormation : public UAction_Burrow
{
public:
	unsigned long                                      bBurrow : 1;                                      		// 0x0130 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShootTarget : 1;                                 		// 0x0130 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCompleteUponArrival : 1;                         		// 0x0130 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCompletionMustRotate : 1;                        		// 0x0130 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	float                                              HoldDistance;                                     		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       NameTag;                                          		// 0x0138 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowFormationComponent*                   MyFormation;                                      		// 0x0140 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50353 ];

		return pClassPointer;
	};

	bool HalfExposed ( );
	bool RotatedEnough ( );
	bool CloseEnough ( );
	bool CanBeMagnetized ( );
	bool OwnerIsMoving ( );
	void SetFacingPolicy ( );
	void CheckFormation ( );
	class AWillowPawn* GetLeaderPawn ( );
	bool CanFollowOwner ( );
	void CheckStateTransition ( );
	void eventUpdate ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_MoveToFormation::pClassPointer = NULL;

// Class WillowGame.Action_MoveToVehicle
// 0x0010 (0x0140 - 0x0130)
class UAction_MoveToVehicle : public UAction_Burrow
{
public:
	float                                              EnterDistance;                                    		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AWillowVehicle*                              MyVehicle;                                        		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              CheckRate;                                        		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              LastCheckTime;                                    		// 0x013C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50403 ];

		return pClassPointer;
	};

	bool eventPathFind ( );
	bool CloseEnough ( );
	void GetMyVehicle ( );
	float GetEnterDistance ( );
	void eventUpdate ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_MoveToVehicle::pClassPointer = NULL;

// Class WillowGame.Action_Patrol
// 0x0028 (0x017C - 0x0154)
class UAction_Patrol : public UAction_FollowPath
{
public:
	unsigned long                                      bTryToHideIfProvoked : 1;                         		// 0x0154 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTryToHide : 1;                                   		// 0x0154 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FAIRange                                    TimeBetweenPatrolMovement;                        		// 0x0158 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TimeOfNextRandomPatrol;                           		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     HideLocation;                                     		// 0x0164 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAttackLocation* >                   HideLimits;                                       		// 0x0170 (0x000C) [0x0000000004400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50426 ];

		return pClassPointer;
	};

	void CheckFullyBlocked ( );
	struct FVector GetRandomHomeLocation ( );
	void SetMoveNode ( class AWillowAIMoveNode* NewNode );
	class AWillowAIMoveNode* GetMoveNode ( );
	void SetMoveNodeSpeed ( );
	void SetMoveFacingPolicy ( );
	void ShowDesignError ( );
	void CheckStateTransition ( );
	struct FName GetPatrolState ( );
	void eventStop ( );
	void eventStart ( );
	void eventScriptCleanUp ( );
};

UClass* UAction_Patrol::pClassPointer = NULL;

// Class WillowGame.Action_PlayCustomAnimation
// 0x0008 (0x0130 - 0x0128)
class UAction_PlayCustomAnimation : public UWillowActionSequencePawn
{
public:
	class USpecialMoveDefinition*                      SpecialMove;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStopMovement : 1;                                		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWaitForMovementToStop : 1;                       		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStopOnInterrupt : 1;                             		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUninteruptible : 1;                              		// 0x012C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bMovementHeld : 1;                                		// 0x012C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50503 ];

		return pClassPointer;
	};

	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_PlayCustomAnimation::pClassPointer = NULL;

// Class WillowGame.Action_ScriptedNPC
// 0x0004 (0x015C - 0x0158)
class UAction_ScriptedNPC : public UAction_GoToScriptedDestination
{
public:
	unsigned long                                      bLoadBalanceNPC : 1;                              		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIdleNPC : 1;                                     		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStuckOnPerch : 1;                                		// 0x0158 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50517 ];

		return pClassPointer;
	};

	void PerchPlayStopBalanced ( );
	void PerchPlayStop ( unsigned long bInterrupted );
	void PerchDone ( );
	void PerchStart ( class APerch* NewPerch );
	unsigned char GetDefaultMoveNodeSpeed ( );
	void SetMoveFacingPolicy ( );
	void SetupLoadBalancePathing ( );
	void SetupLoadBalanceDefaults ( );
	void CreateVectorPath ( struct FVector GoalVector, struct FGBXNavMeshPolyRef GoalPoly, unsigned long bAdjustStartForMotion );
	void CreateActorPath ( class AActor* GoalActor, float MaxDist, unsigned long bAdjustStartForMotion );
	void SetPerch ( );
	void PathAttemptFinished ( );
	struct FName GetDesiredStateName ( );
	void CheckStateTransition ( );
	struct FName eventCanRun ( );
};

UClass* UAction_ScriptedNPC::pClassPointer = NULL;

// Class WillowGame.Behavior_AISetFlight
// 0x0001 (0x004D - 0x004C)
class UBehavior_AISetFlight : public UBehaviorBase
{
public:
	unsigned char                                      Mode;                                             		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50575 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AISetFlight::pClassPointer = NULL;

// Class WillowGame.Action_SetFlight
// 0x003C (0x0164 - 0x0128)
class UAction_SetFlight : public UWillowActionSequencePawn
{
public:
	unsigned char                                      Mode;                                             		// 0x0128 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      Anim;                                             		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBasedPosition                              LandPos;                                          		// 0x0130 (0x0034) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50587 ];

		return pClassPointer;
	};

	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_SetFlight::pClassPointer = NULL;

// Class WillowGame.Action_ShootThreatWhenInView
// 0x0000 (0x0128 - 0x0128)
class UAction_ShootThreatWhenInView : public UAction_AimAtThreat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50609 ];

		return pClassPointer;
	};

	void eventStop ( );
	void eventStart ( );
};

UClass* UAction_ShootThreatWhenInView::pClassPointer = NULL;

// Class WillowGame.Action_SweepAttack
// 0x0028 (0x0150 - 0x0128)
class UAction_SweepAttack : public UWillowActionSequencePawn
{
public:
	unsigned long                                      bShootTarget : 1;                                 		// 0x0128 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              Angle;                                            		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Height;                                           		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Radius;                                           		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Direction;                                        		// 0x0138 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SweepDirection;                                   		// 0x0139 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxIntervalAngle;                                 		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     NextLoc;                                          		// 0x0140 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              AngleTraveled;                                    		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50613 ];

		return pClassPointer;
	};

	void CalcNextLoc ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_SweepAttack::pClassPointer = NULL;

// Class WillowGame.Action_VehicleTurret
// 0x0000 (0x0128 - 0x0128)
class UAction_VehicleTurret : public UWillowActionSequencePawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50693 ];

		return pClassPointer;
	};

	void eventUpdate ( );
	void eventStop ( );
	void eventStart ( );
	struct FName eventCanRun ( );
};

UClass* UAction_VehicleTurret::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_TimerElapsed
// 0x0001 (0x00C5 - 0x00C4)
class UWillowSeqEvent_TimerElapsed : public USequenceEvent
{
public:
	unsigned char                                      Event;                                            		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50923 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_TimerElapsed::pClassPointer = NULL;

// Class WillowGame.ActorFactoryInteractiveSwitch
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryInteractiveSwitch : public UActorFactoryInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50958 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryInteractiveSwitch::pClassPointer = NULL;

// Class WillowGame.ActorFactoryPopulationOpportunityPoint
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPopulationOpportunityPoint : public UActorFactoryPopulationOpportunityArea
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50961 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPopulationOpportunityPoint::pClassPointer = NULL;

// Class WillowGame.ActorFactoryPropObject
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryPropObject : public UActorFactoryInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50963 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPropObject::pClassPointer = NULL;

// Class WillowGame.ActorFactoryVehicleSpawnStationPlatform
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryVehicleSpawnStationPlatform : public UActorFactoryInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50965 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryVehicleSpawnStationPlatform::pClassPointer = NULL;

// Class WillowGame.ActorFactoryVehicleSpawnStationTerminal
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryVehicleSpawnStationTerminal : public UActorFactoryInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50967 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryVehicleSpawnStationTerminal::pClassPointer = NULL;

// Class WillowGame.WillowCoopPlayerStart
// 0x0000 (0x0254 - 0x0254)
class AWillowCoopPlayerStart : public APlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50969 ];

		return pClassPointer;
	};

};

UClass* AWillowCoopPlayerStart::pClassPointer = NULL;

// Class WillowGame.AIDebugDummy
// 0x0000 (0x01EC - 0x01EC)
class AAIDebugDummy : public AAIDebugDummyBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51470 ];

		return pClassPointer;
	};

};

UClass* AAIDebugDummy::pClassPointer = NULL;

// Class WillowGame.AmmoPanelGFxObject
// 0x0028 (0x00A0 - 0x0078)
class UAmmoPanelGFxObject : public UGFxObject
{
public:
	struct FString                                     AmmoTitle;                                        		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CachedRepeater;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                CachedSMG;                                        		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                CachedShotgun;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                CachedAR;                                         		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                CachedSniper;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                CachedRocket;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                CachedGrenade;                                    		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51562 ];

		return pClassPointer;
	};

	void __SetHighlight ( struct FString HighlightFrame );
	void SetHighlight ( class AWillowInventory* WInv );
	void SetAmmoLabels ( struct FString LabelNameBase, int HasAmount, int MaxAmount );
	void SetAmmoCount ( struct FString FlashString, class UResourceDefinition* ResourceDef, class AWillowPlayerController* WPCOwner, int* CachedAmount );
	void SetAllAmmoCounts ( );
	void RefreshTransientData ( );
	void SetTitle ( struct FString Title );
	void Init ( );
};

UClass* UAmmoPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.GFxMovieInteractiveObject
// 0x0000 (0x0254 - 0x0254)
class UGFxMovieInteractiveObject : public UGearboxGFxMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51786 ];

		return pClassPointer;
	};

};

UClass* UGFxMovieInteractiveObject::pClassPointer = NULL;

// Class WillowGame.InputContextSelectorBase
// 0x0000 (0x003C - 0x003C)
class UInputContextSelectorBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52113 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* UInputContextSelectorBase::pClassPointer = NULL;

// Class WillowGame.DefaultInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UDefaultInputContextSelector : public UInputContextSelectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52117 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* UDefaultInputContextSelector::pClassPointer = NULL;

// Class WillowGame.AssassinInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UAssassinInputContextSelector : public UDefaultInputContextSelector
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52122 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* UAssassinInputContextSelector::pClassPointer = NULL;

// Class WillowGame.ExecuteActionSkill
// 0x0160 (0x0394 - 0x0234)
class AExecuteActionSkill : public AActionSkill
{
public:
	struct FAttributeInitializationData                ExecuteDurationFormula;                           		// 0x0234 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestoreControlAfterMeleeSwingDelay;               		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AutoSwingAngleInDegrees;                          		// 0x0248 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      ForceSwingOnWallCollision : 1;                    		// 0x024C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      ForceSwingOnExecuteDashTimeout : 1;               		// 0x024C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableExecuteAimAssistance : 1;                  		// 0x024C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableExecuteAbility : 1;                       		// 0x024C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTargetRequiredForExecute : 1;                    		// 0x024C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnemyTargetRequiredForExecute : 1;               		// 0x024C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMustBeOnGroundToExecute : 1;                     		// 0x024C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      StopExecuteDashIfTouchFriendly : 1;               		// 0x024C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      ClearVelocityOnDashEndInAir : 1;                  		// 0x024C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLockMovementAndRotation : 1;                     		// 0x024C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      ExecuteDOFEffectActive : 1;                       		// 0x024C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bAttemptedExecute : 1;                            		// 0x024C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bEnableAnalogMovementBackup : 1;                  		// 0x024C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bExecuteIsAvailable : 1;                          		// 0x024C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bMovementHasBeenRestored : 1;                     		// 0x024C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCleaningUpExecute : 1;                           		// 0x024C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bFindMeleeTarget : 1;                             		// 0x024C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bAttachedMeleeWeapon : 1;                         		// 0x024C (0x0004) [0x0000000000000000] [0x00020000] 
	struct FString                                     ExecuteCaption;                                   		// 0x0250 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USkillDefinition*                            ExecuteMeleeSkill;                                		// 0x025C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ExecuteAnimDelay;                                 		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMeleeDefinition*                            ExecuteMeleeDef;                                  		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CheckForTargetDistance;                           		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              InitiateMeleeDistance;                            		// 0x026C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ExecuteVelocity;                                  		// 0x0270 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AirSpeed;                                         		// 0x0274 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AccelRateMultiplier;                              		// 0x0278 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MinHitWallOverrideFormula;                        		// 0x027C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DashEndInAirVelocityScale;                        		// 0x028C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      BeginExecuteSMD;                                  		// 0x0298 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      IdleExecuteSMD;                                   		// 0x029C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      ExecuteAttackSMD;                                 		// 0x02A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDOFEffectData                              ExecuteDOFEffectData;                             		// 0x02A4 (0x002C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDOFEffectModifierData                      ExecuteDOFModiferData;                            		// 0x02D0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ExecuteDOFEffectName;                             		// 0x02DC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CancelDashAngleInDegrees;                         		// 0x02E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInterface*                          VisionModeMaterial;                               		// 0x02E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPostProcessChain*                           VisionModePostProcessChain;                       		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPostProcessChainOptions                    VisionModePostProcessChainOptions;                		// 0x02F0 (0x0018) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UCoordinatedEffectDefinition*                VisionModeCoordinatedEffect;                      		// 0x0308 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCoordinatedEffectDefinition*                VisionModeCurrentTargetCoordinatedEffect;         		// 0x030C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            CritLocationsSkill;                               		// 0x0310 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInstanceConstant*                   VisionModeMaterialInstance;                       		// 0x0314 (0x0004) [0x0000000000000000]              
	struct FDOFEffectModifierData                      PrevVisionModePPCModifierData;                    		// 0x0318 (0x000C) [0x0000000000000000]              
	struct FDOFEffectData                              PrevVisionModeDOFEffectData;                      		// 0x0324 (0x002C) [0x0000000000000000]              
	struct FVector                                     PreExecuteVelocity;                               		// 0x0350 (0x000C) [0x0000000000000000]              
	struct FVector                                     PrevFrameExecuteVelocity;                         		// 0x035C (0x000C) [0x0000000000000000]              
	float                                              CachedAccelRate;                                  		// 0x0368 (0x0004) [0x0000000000000000]              
	float                                              CachedMinHitWall;                                 		// 0x036C (0x0004) [0x0000000000000000]              
	class APawn*                                       MyTarget;                                         		// 0x0370 (0x0004) [0x0000000000000000]              
	float                                              InitiateMeleeDistanceSquared;                     		// 0x0374 (0x0004) [0x0000000000000000]              
	class USkill*                                      ActionSkill;                                      		// 0x0378 (0x0004) [0x0000000000000000]              
	float                                              MeleeAttackAnimDuration;                          		// 0x037C (0x0004) [0x0000000000000000]              
	float                                              ExecuteDuration;                                  		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              MinHitWallOverride;                               		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              AutoSwingAngleCos;                                		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              CancelDashAngleCos;                               		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              SkillDuration;                                    		// 0x0390 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52127 ];

		return pClassPointer;
	};

	bool HasTrainedCritLocationsSkill ( );
	bool eventOverrideCrosshairVisibility ( unsigned long bVisible, unsigned long bForScope );
	void eventDisableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void eventEnableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void eventTickActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie, float ActionSkillTime, float DeltaTime );
	void UpdateHUDTimer ( class UWillowHUDGFxMovie* HUDMovie, float Time );
	bool FoundBadReflectionVelocity ( );
	void OnExecuteEndEarlyDueToCollision ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnExecuteFailedToKillTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnExecuteKilledTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnExecuteAttackBegin ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnExecuteDashEnd ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnExecuteEnd ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnExecuteBegin ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void OnExecuteIsNowAvailable ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle );
	void DrawExecuteDebug ( struct FVector ExecuteStartLocation, struct FVector ExecuteEndLocation, unsigned char R, unsigned char G, unsigned char B );
	bool IsExecuting ( );
	void CleanUpExecute ( );
	void EndExecuteEarlyDueToCollision ( );
	void RestorePhysicsPostExecute ( );
	void RestrictPlayerMovementPreExecute ( );
	void RestorePlayerMovementPostExecute ( );
	void EnableDOFEffect ( unsigned long bEnable );
	void EnableVisionModeEffect ( unsigned long bEnable );
	void OnActionSkillOwnerTouchedActor ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void OnActionSkillOwnerHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void PlayMeleeAttackAnim ( );
	void AttachMeleeWeapon ( );
	void FirePawnCannon ( );
	void ServerFirePawnCannon ( );
	void WeaponDeEquipped ( );
	void DrawGhettoDebugSphere ( struct FVector Center, struct FVector Forward, float LineLength, unsigned char R, unsigned char G, unsigned char B );
	void ClientPerformExecuteAttack ( );
	void UpdateExecuteRotation ( float DeltaTime );
	bool IsTargetWithinAutoSwingCone ( );
	void TriggerExecuteAttack ( );
	bool CanHitExecuteTarget ( );
	void UpdateExecuteTooltip ( );
	void ClientExecuteIsAvailable ( unsigned long Enable );
	void OnExecuteIsAvailable ( unsigned long Enable );
	void SetExecuteAvailability ( unsigned long Enable );
	bool HasAutoAimTarget ( unsigned long bTargetShouldBeEnemy );
	void TryEnablingExecuteCooldown ( );
	void ClientEndExecuteDash ( );
	void EndExecuteDash ( );
	void ExecuteDashTimerUp ( );
	void ServerEndExecute ( );
	void EndExecute ( );
	void ClientEndExecute ( );
	void RemoveExecuteFlagInstanceData ( );
	void SetExecuteFlagInstanceData ( );
	bool IsVisionModeEffectEnabled ( class AWillowPawn* WP );
	void RemoveVisionModeFromPawns ( );
	void UpdateVisionModeForPawns ( );
	void ActionSkillComplete ( );
	void BeginExecute ( );
	void TryExecuting ( );
	void StartActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* AutoAimTarget );
	void OnActionSkillOwnerMelee ( class AWillowPawn* AutoAimTarget );
	bool CanInitiateNewExecuteAttack ( class AWillowPawn* AutoAimTarget );
	bool ReadyToInterceptMelee ( class AWillowPawn* AutoAimTarget );
	void eventOnActionSkillTick ( float DeltaTime );
	void RemoveCritLocationEffect ( class AWillowPawn* WP );
	void OnActionSkillKilledEnemy ( class AWillowPawn* KilledPawn );
	void eventOwnerAcquiredAutoAimTarget ( class UITargetable* NewTargetable );
	void OnActionSkillShowBackMenu ( unsigned long bOpened );
	void OnActionSkillOwnerWeaponSwitched ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void OnActionSkillEnded ( );
	void ClientActionSkillWantsToDeactivate ( );
	void eventOnActionSkillWantsToDeactivate ( );
	void OnActionSkillStarted ( class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn );
};

UClass* AExecuteActionSkill::pClassPointer = NULL;

// Class WillowGame.ValueGFxObject
// 0x0000 (0x0078 - 0x0078)
class UValueGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52428 ];

		return pClassPointer;
	};

	void SetValue ( int InValue );
};

UClass* UValueGFxObject::pClassPointer = NULL;

// Class WillowGame.EridiumValueGFxObject
// 0x000C (0x0084 - 0x0078)
class UEridiumValueGFxObject : public UValueGFxObject
{
public:
	TArray< struct FString >                           CurrencyFrames;                                   		// 0x0078 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52427 ];

		return pClassPointer;
	};

	void SetCurrencyClip ( struct FString InMoviePath );
	void SetCurrencyFrame ( struct FString InCurrencyFrame );
	bool SetCurrencyType ( unsigned char CurrencyType );
	void SetValue ( int InValue );
};

UClass* UEridiumValueGFxObject::pClassPointer = NULL;

// Class WillowGame.DeveloperPerksDefinition
// 0x0030 (0x006C - 0x003C)
class UDeveloperPerksDefinition : public UGBXDefinition
{
public:
	TArray< struct FDeveloperData >                    DeveloperInfo;                                    		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPerkData >                         PerkInfo;                                         		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UKeyedItemPoolDefinition* >          DeveloperCustomizationUnlocks;                    		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPerkData >                         PatchedPerkInfo;                                  		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52966 ];

		return pClassPointer;
	};

	void CheckUnlockGamerpics ( unsigned char ControllerId, struct FString NickName, struct FUniqueNetId UniqueId );
	bool IsDeveloper ( struct FString NickName, struct FUniqueNetId UniqueId, int ControllerId, struct FDeveloperData* OutDevData );
	bool IsValidPlatform ( unsigned char Platform );
	void CheckForButtonChain ( class AWillowPlayerController* WPC, TArray< struct FName >* EnteredButtons );
	void PopulatePatchedPerkInfo ( );
};

UClass* UDeveloperPerksDefinition::pClassPointer = NULL;

// Class WillowGame.WillowVersusDuelMessage
// 0x0093 (0x00DC - 0x0049)
class UWillowVersusDuelMessage : public ULocalMessage
{
public:
	struct FString                                     DuelingDisabled;                                  		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AlreadyDueling;                                   		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AlreadyChallenged;                                		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuelTimeout;                                      		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IssuedChallenge;                                  		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ReceivedChallenge;                                		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AcceptedChallenge;                                		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuelStart;                                        		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ArenaWarning;                                     		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuelDraw;                                         		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuelWin;                                          		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuelNotRightNow;                                  		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53649 ];

		return pClassPointer;
	};

	float GetLifeTime ( int Switch );
	unsigned char GetMsgType ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UWillowVersusDuelMessage::pClassPointer = NULL;

// Class WillowGame.WillowGFxColiseumOverlayMovie
// 0x00A8 (0x030C - 0x0264)
class UWillowGFxColiseumOverlayMovie : public UWillowGFxMovie
{
public:
	class UWillowGFxColiseumOverlayDefinition*         OverlayDef;                                       		// 0x0264 (0x0004) [0x0000000000000000]              
	class UColiseumRuleDefinition*                     CurrentRules[ 0x4 ];                              		// 0x0268 (0x0010) [0x0000000000000000]              
	struct FString                                     RoundPrefix;                                      		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     WavePrefix;                                       		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CertificateText;                                  		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CachedRound;                                      		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                CachedWave;                                       		// 0x02A0 (0x0004) [0x0000000000000000]              
	int                                                CachedMaxRound;                                   		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FString                                     RoundResult;                                      		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RoundSummary;                                     		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EnemyDamage;                                      		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EnemyHealth;                                      		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EnemyShields;                                     		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSuppressHUD : 1;                                 		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDismissable : 1;                                 		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEveryoneSignedInOn360 : 1;                       		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      LatentScreenType;                                 		// 0x02E8 (0x0001) [0x0000000000000000]              
	unsigned char                                      Platform;                                         		// 0x02E9 (0x0001) [0x0000000000000000]              
	TArray< struct FPlayerLineInfo >                   PlayerLines;                                      		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                HighlightedResultsLine;                           		// 0x02F8 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      SortedResultsPRI[ 0x4 ];                          		// 0x02FC (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53961 ];

		return pClassPointer;
	};

	void CertificateGotoAndStop ( int frameNum );
	void HighlightGotoFrame ( int frame );
	void CatchupColiseumRule_Wrapper ( int RuleNum, struct FString RuleTitle, struct FString RuleDesc, struct FString FrameLabel );
	void CatchupColiseum_Wrapper ( struct FString RoundText, struct FString WaveText, struct FString WaveTitleText, struct FString FilledRoundSummary, int WaveNumber );
	void CloseConfirm_Wrapper ( );
	void ShowColiseumToLobbyConfirm_Wrapper ( );
	void ShowPenaltyBox_Wrapper ( int PlayerNumber );
	void CloseCertificate_Wrapper ( );
	void AwardCertificate_Wrapper ( );
	void CloseResults_Wrapper ( );
	void ConfigureResultsScreen_Wrapper ( struct FString Type, struct FString P1Avatar, struct FString P1Name, struct FString P1RoundKills, struct FString P1TotalKills, struct FString P2Avatar, struct FString P2Name, struct FString P2RoundKills, struct FString P2TotalKills, struct FString P3Avatar, struct FString P3Name, struct FString P3RoundKills, struct FString P3TotalKills, struct FString P4Avatar, struct FString P4Name, struct FString P4RoundKills, struct FString P4TotalKills, struct FString TotalRoundKills, struct FString GrandTotalKills );
	void ShowResults_Wrapper ( );
	void Notify_Wrapper ( struct FString NotifyString );
	void RuleAnnounce_Wrapper ( );
	void RoundAnnounce_Wrapper ( struct FString RoundText, struct FString WaveText, struct FString WaveTitleText, struct FString FilledRoundSummary, int WaveNumber, struct FString Horde, struct FString HealthModText, struct FString DamageModTex, struct FString ShieldModTex );
	void StartColiseumTimer_Wrapper ( struct FString CountdownString );
	void UpdateWaveDisplay ( struct FString WaveText, struct FString WaveTitle );
	void UpdateRoundDisplay ( struct FString RoundText );
	void TurnOffColiseumRule_Wrapper ( int Rule );
	void UpdateColiseumRule_Wrapper ( int RuleToUpdate, struct FString RuleTitle, struct FString RuleDescription, struct FString FrameLabel );
	void RulesGotoLabel ( struct FString Label );
	void ShowGamerTagCard ( int ControllerId );
	void SetInput ( struct FScriptDelegate Del );
	void MoveResultsHighlight ( unsigned char MoveDir );
	void UpdateVisibilityForStatusMenu ( unsigned long bMenuVisible );
	void CatchupColiseumOverlay ( int CurrRound, int CurrWave, int CurrMaxRound, class UColiseumRuleDefinition* Rule1, class UColiseumRuleDefinition* Rule2, class UColiseumRuleDefinition* Rule3, class UColiseumRuleDefinition* Rule4 );
	void CatchupNewPlayer ( class AWillowPlayerController* NewPlayer );
	void CloseConfirm ( );
	void ShowColiseumToLobbyConfirm ( );
	void ShowPenaltyBox ( class AWillowPlayerController* WPC );
	void OnCertificateScreenDismissable ( );
	void OnResultsScreenDismissable ( );
	void CloseCertificateScreen ( );
	void AwardCertificate ( );
	void CloseResultsScreen ( );
	void ShowResultsScreen ( unsigned char ScreenType, unsigned long bEnableGamerCardUI );
	void PublishColiseumStatDelta ( struct FString CharacterName, class APlayerReplicationInfo* PRI, unsigned char StatType, int StatDelta );
	void Notify ( unsigned char NotifyType );
	void RuleAnnounce ( );
	void RoundAnnounce ( int Round, int Wave, int MaxRound, struct FString HealthModText, struct FString DamageModTex, struct FString ShieldModTex );
	struct FString GetFilledInRoundSummary ( int Round, int MaxRound );
	void BeginRoundAnnounce ( );
	void StartColiseumTimer ( unsigned char CountdownLength );
	void UpdateColiseumRule ( class UColiseumRuleDefinition* RuleInfo, unsigned char UpdateMode );
	void extConfirmIsOpen ( );
	void extSetupCertificate ( );
	void extSetupResultsScreen ( );
	void extRuleAnnounceComplete ( );
	bool OnConsumeEverything ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool OnConfirmInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool OnCertificateInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool OnResultsScreenInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UWillowGFxColiseumOverlayMovie::pClassPointer = NULL;

// Class WillowGame.ColiseumRuleDefinition
// 0x0024 (0x0060 - 0x003C)
class UColiseumRuleDefinition : public UGBXDefinition
{
public:
	struct FString                                     RuleTitle;                                        		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RuleDescription;                                  		// 0x0048 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FrameLabel;                                       		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53966 ];

		return pClassPointer;
	};

};

UClass* UColiseumRuleDefinition::pClassPointer = NULL;

// Class WillowGame.NxFootForceFieldComponent
// 0x0000 (0x0274 - 0x0274)
class UNxFootForceFieldComponent : public UNxForceFieldRadialComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55067 ];

		return pClassPointer;
	};

};

UClass* UNxFootForceFieldComponent::pClassPointer = NULL;

// Class WillowGame.ITinnitusTarget
// 0x0000 (0x003C - 0x003C)
class UITinnitusTarget : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55788 ];

		return pClassPointer;
	};

	void TriggerTinnitus ( float Strength, class UAkEvent* OverrideTinnitusEvent, struct FVector* VToSource );
	void TriggerTinnitusFromLocation ( float Radius, float StrengthModifier, class UAkEvent* OverrideTinnitusEvent, struct FVector* SourceLocation );
};

UClass* UITinnitusTarget::pClassPointer = NULL;

// Class WillowGame.BuzzaxeActionSkill
// 0x0038 (0x026C - 0x0234)
class ABuzzaxeActionSkill : public AActionSkill
{
public:
	unsigned char                                      ActiveWeaponSlot;                                 		// 0x0234 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMenuOpen : 1;                                    		// 0x0238 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bHideBuzzaxe : 1;                                 		// 0x0238 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDoNotPutDownBuzzaxe : 1;                         		// 0x0238 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bAllowNonBuzzaxeEquip : 1;                        		// 0x0238 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPlayerRevived : 1;                               		// 0x0238 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bHoldOverrideSkillActive : 1;                     		// 0x0238 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	class AWillowBuzzaxeWeapon*                        Buzzaxe;                                          		// 0x023C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class USkill*                                      MyActionSkill;                                    		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWeaponBalanceDefinition*                    BuzzaxeBalanceDef;                                		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      BuzzaxeSMD;                                       		// 0x0248 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      BuzzaxeSelfSMD;                                   		// 0x024C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MeleePercentage;                                  		// 0x0250 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            HoldOverrideSkill;                                		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       HoldNameOverride;                                 		// 0x0258 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMove_FirstAndThirdPersonAnimation*   OverrideSMD;                                      		// 0x0260 (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	class USpecialMove_FirstAndThirdPersonAnimation*   OverrideEndSMD;                                   		// 0x0264 (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	float                                              OverrideEndInjuredOverridePercentage;             		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56042 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void OnActionSkillWeaponsRestricted ( unsigned long bWeaponsRestricted );
	void OnActionSkillOwnerRevived ( );
	float OnInjuredOverride ( );
	void UpdateThirdPersonBuzzaxeMesh ( );
	void ServerNotifyModalGameMenuClosing ( );
	void ServerNotifyModalGameMenuOpening ( );
	void NotifyModalGameMenuClosing ( );
	void NotifyModalGameMenuOpening ( );
	void eventDisableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void eventEnableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void MeleeAttack ( unsigned char BodyWeaponAction );
	void ServerMeleeSelf ( );
	void ServerMeleeAttack ( );
	void OnActionSkillOwnerMelee ( class AWillowPawn* AutoAimTarget );
	bool CanStartMeleeSkill ( );
	bool OverridesStandardMelee ( );
	bool CanEquipWeapon ( class AWeapon* DesiredWeapon );
	void SetActiveOrBestWeapon ( );
	void OnActionSkillEnded ( );
	void EndSkill ( );
	void ResetCooldownAndTearOff ( );
	void TearOff ( );
	void BuzzaxeEquipFailsafe ( );
	void WaitingForBuzzaxeEquip ( );
	void SpawnBuzzaxe ( );
	bool IsHoldOverrideSkillRunning ( );
	void ForceWeaponDown ( );
	void ClientEquipBuzzaxe ( );
	void ClientPlayOverrideSMD ( );
	bool PlayOverrideSMD ( );
	void WeaponIsDown ( );
	void OnActionSkillStarted ( class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ABuzzaxeActionSkill::pClassPointer = NULL;

// Class WillowGame.InjuredFeedbackMessage
// 0x000C (0x0058 - 0x004C)
class UInjuredFeedbackMessage : public UWillowLocalMessage
{
public:
	struct FString                                     SecondWind;                                       		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56151 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UInjuredFeedbackMessage::pClassPointer = NULL;

// Class WillowGame.WillowEmitterServerSide
// 0x0000 (0x0210 - 0x0210)
class AWillowEmitterServerSide : public AWillowReplicatedEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56653 ];

		return pClassPointer;
	};

};

UClass* AWillowEmitterServerSide::pClassPointer = NULL;

// Class WillowGame.IRBCollisionListener
// 0x0000 (0x003C - 0x003C)
class UIRBCollisionListener : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56747 ];

		return pClassPointer;
	};

	void NotifyRigidBodyCollision ( class UObject* ContextObject, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactSide, struct FCollisionImpactData* RigidCollisionData );
};

UClass* UIRBCollisionListener::pClassPointer = NULL;

// Class WillowGame.WillowEmit_HitEffect
// 0x0008 (0x0218 - 0x0210)
class AWillowEmit_HitEffect : public AWillowReplicatedEmitter
{
public:
	struct FName                                       BoneName;                                         		// 0x0210 (0x0008) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57028 ];

		return pClassPointer;
	};

	void AttachTo ( class APawn* P, struct FName NewBoneName );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AWillowEmit_HitEffect::pClassPointer = NULL;

// Class WillowGame.IAttributeEffectBehavior
// 0x0000 (0x003C - 0x003C)
class UIAttributeEffectBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57203 ];

		return pClassPointer;
	};

};

UClass* UIAttributeEffectBehavior::pClassPointer = NULL;

// Class WillowGame.IFireShotBehavior
// 0x0000 (0x003C - 0x003C)
class UIFireShotBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57204 ];

		return pClassPointer;
	};

	void Behavior_Fire ( class UFiringModeDefinition* FiringModeDefinition, struct FVector Direction, class UIWorldBody* WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, struct FName FireSourceSocket, unsigned long bTreatDirectionAsDestination );
};

UClass* UIFireShotBehavior::pClassPointer = NULL;

// Class WillowGame.IBehaviorAliasProvider
// 0x0000 (0x003C - 0x003C)
class UIBehaviorAliasProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57205 ];

		return pClassPointer;
	};

	class UBehaviorAliasLookupDefinition* BehaviorAlias_GetLookupDefinition ( );
};

UClass* UIBehaviorAliasProvider::pClassPointer = NULL;

// Class WillowGame.WillowEmit_BloodSpray
// 0x0000 (0x0218 - 0x0218)
class AWillowEmit_BloodSpray : public AWillowEmit_HitEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57206 ];

		return pClassPointer;
	};

};

UClass* AWillowEmit_BloodSpray::pClassPointer = NULL;

// Class WillowGame.MissionFeedbackMessage
// 0x003C (0x0088 - 0x004C)
class UMissionFeedbackMessage : public UWillowLocalMessage
{
public:
	struct FString                                     MissionAdded;                                     		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionCompleted;                                 		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionFailed;                                    		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionRequiredObjectivesComplete;                		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionReadyToTurnIn;                             		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58011 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UMissionFeedbackMessage::pClassPointer = NULL;

// Class WillowGame.DualWieldActionSkill
// 0x0058 (0x028C - 0x0234)
class ADualWieldActionSkill : public AActionSkill
{
public:
	struct FCachedWeaponInfo                           WeaponCache;                                      		// 0x0234 (0x0028) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FCachedWeaponInfo                           OffhandWeaponCache;                               		// 0x025C (0x0028) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UHUDWidget_Crosshairs*                       CrosshairWidget;                                  		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowWeapon*                               RestoreOffHandWeapon;                             		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58627 ];

		return pClassPointer;
	};

	void eventTickActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie, float ActionSkillTime, float DeltaTime );
	void eventDisableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void SetOffHandCrosshair ( class AWillowWeapon* OffHandWeapon );
	void eventEnableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void SetDualWieldSwitchEx ( unsigned long bEnabled, class USkeletalMeshComponent* MeshComp, float BlendTime );
	void SetDualWieldSwitch ( unsigned long bEnabled, unsigned long bApplyToFirstPerson, unsigned long bApplyToThirdPerson, float BlendTime );
	void ClientBringWeaponsUpAfterPutDown ( class AWillowWeapon* MainHandWeapon, class AWillowWeapon* OffHandWeapon );
	void BringWeaponsUpAfterPutDown ( unsigned char MainHandWeaponSlot, unsigned char OffHandWeaponSlot );
	void ForceRefreshSkills ( );
	void SwitchToWeapon ( class AWillowWeapon* NewWeapon );
	void SwitchWeapons ( );
	void SprintTransition ( );
	void EquipInitialWeapons ( );
	void SelectInitialWeapons ( class AWillowWeapon** MainHandWeapon, class AWillowWeapon** OffHandWeapon );
	class AWillowWeapon* ReturnFirstWeapon ( class AWillowWeapon* first, class AWillowWeapon* Second, class AWillowWeapon* Third );
	void SetLeftSideControl ( );
	void OnActionSkillWeaponsRestricted ( unsigned long bWeaponsRestricted );
	void OnActionSkillOwnerWeaponSwitched ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void OnActionSkillEnded ( );
	void OnActionSkillStarted ( class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn );
};

UClass* ADualWieldActionSkill::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_PlayerJoined
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_PlayerJoined : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58852 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_PlayerJoined::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSettings
// 0x0000 (0x00C8 - 0x00C8)
class UWillowOnlineGameSettings : public UOnlineGameSettings
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58920 ];

		return pClassPointer;
	};

	struct FString GetConnectionQualityUIString ( class UOnlineGameSettings* OGS );
	void UpdateActivePlotMission ( int InActivePlotMission );
	int GetActivePlotMission ( class UOnlineGameSettings* GameSettings );
	void UpdateIsPublic ( int InIsPublic );
	void UpdateExpLevel ( int InExpLevel );
	int GetExpLevel ( class UOnlineGameSettings* GameSettings );
	void UpdateDlcFlag ( int InDlcFlag );
	void UpdateMapDlcContentId ( struct FDlcContentId InContentId );
	void UpdatePlaythrough ( int InPlaythrough );
	int GetPlaythrough ( class UOnlineGameSettings* GameSettings );
	void UpdateActiveMission ( int InActiveMission );
};

UClass* UWillowOnlineGameSettings::pClassPointer = NULL;

// Class WillowGame.MarketingUnlockInventoryDefinition
// 0x000C (0x0064 - 0x0058)
class UMarketingUnlockInventoryDefinition : public UMarketingUnlockDefinition
{
public:
	TArray< struct FUnlockItemData >                   UnlockItems;                                      		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59119 ];

		return pClassPointer;
	};

	bool GenerateUnlockedItems ( class AWillowPlayerController* PlayerToGenerateRewardsFor, TArray< class AWillowInventory* >* GeneratedItems );
};

UClass* UMarketingUnlockInventoryDefinition::pClassPointer = NULL;

// Class WillowGame.WeaponProficiencyFeedbackMessage
// 0x000F (0x0058 - 0x0049)
class UWeaponProficiencyFeedbackMessage : public ULocalMessage
{
public:
	struct FString                                     IsNowLevel;                                       		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59455 ];

		return pClassPointer;
	};

	unsigned char GetMsgType ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UWeaponProficiencyFeedbackMessage::pClassPointer = NULL;

// Class WillowGame.LocalWeaponMessage
// 0x0000 (0x004C - 0x004C)
class ULocalWeaponMessage : public UWillowLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59478 ];

		return pClassPointer;
	};

	struct FString GetWeaponString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FWeaponDefinitionData WeaponInfo, struct FColor WeaponColor );
	struct FColor GetWeaponColor ( struct FWeaponDefinitionData WeaponInfo );
	void ClientWeaponReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FWeaponDefinitionData WeaponInfo );
};

UClass* ULocalWeaponMessage::pClassPointer = NULL;

// Class WillowGame.ReceivedWeaponMessage
// 0x0018 (0x0064 - 0x004C)
class UReceivedWeaponMessage : public ULocalWeaponMessage
{
public:
	struct FString                                     ReceivedWeapon;                                   		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfReceivedItem;                                 		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59477 ];

		return pClassPointer;
	};

	struct FString GetWeaponString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FWeaponDefinitionData WeaponInfo, struct FColor WeaponColor );
};

UClass* UReceivedWeaponMessage::pClassPointer = NULL;

// Class WillowGame.LocalItemMessage
// 0x0000 (0x004C - 0x004C)
class ULocalItemMessage : public UWillowLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59483 ];

		return pClassPointer;
	};

	struct FString GetItemString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FItemDefinitionData ItemInfo, struct FColor ItemColor );
	struct FColor GetItemColor ( struct FItemDefinitionData ItemInfo );
	void ClientItemReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FItemDefinitionData ItemInfo );
};

UClass* ULocalItemMessage::pClassPointer = NULL;

// Class WillowGame.ReceivedItemMessage
// 0x0018 (0x0064 - 0x004C)
class UReceivedItemMessage : public ULocalItemMessage
{
public:
	struct FString                                     ReceivedItem;                                     		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfReceivedItem;                                 		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59482 ];

		return pClassPointer;
	};

	struct FString GetItemString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FItemDefinitionData ItemInfo, struct FColor ItemColor );
};

UClass* UReceivedItemMessage::pClassPointer = NULL;

// Class WillowGame.ReceivedCreditsMessage
// 0x0040 (0x008C - 0x004C)
class UReceivedCreditsMessage : public UWillowLocalMessage
{
public:
	struct FString                                     ReceivedCredits;                                  		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelfReceivedCredits;                              		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NumberOfCredits;                                  		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OneCredit;                                        		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MoreCredits;                                      		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CreditsFakedRarityLevelForItemColor;              		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59487 ];

		return pClassPointer;
	};

	struct FColor GetCreditsColor ( );
	struct FString GetNumberOfCreditsString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
	struct FString GetCreditString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
	void ClientCreditReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, int GainedAmount );
};

UClass* UReceivedCreditsMessage::pClassPointer = NULL;

// Class WillowGame.ExperienceFeedbackMessage
// 0x000F (0x0058 - 0x0049)
class UExperienceFeedbackMessage : public ULocalMessage
{
public:
	struct FString                                     IsNowLevel;                                       		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59497 ];

		return pClassPointer;
	};

	unsigned char GetMsgType ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UExperienceFeedbackMessage::pClassPointer = NULL;

// Class WillowGame.RotationArrowComponent
// 0x0000 (0x021C - 0x021C)
class URotationArrowComponent : public UArrowComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59889 ];

		return pClassPointer;
	};

};

UClass* URotationArrowComponent::pClassPointer = NULL;

// Class WillowGame.PlayerInteractionClient
// 0x0000 (0x003C - 0x003C)
class UPlayerInteractionClient : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59941 ];

		return pClassPointer;
	};

	void eventSendMessage ( int MessageData, class UObject* Data );
	void HandleMessage ( int MessageData, class UObject* Data );
	void ShutDown ( );
	void Initialize ( int MessageData );
};

UClass* UPlayerInteractionClient::pClassPointer = NULL;

// Class WillowGame.PersonalTeleporterDefinition
// 0x0034 (0x0070 - 0x003C)
class UPersonalTeleporterDefinition : public UGBXDefinition
{
public:
	class UParticleSystem*                             ParticleEffect;                                   		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             PlayerTeleportedEffect;                           		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PlayerTeleportedEffectLifespan;                   		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SpawnDistance;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ReturnTeleporterLocationOffset;                   		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PlaceTeleporterSound;                             		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USoundCue*                                   EnterTeleporterSound;                             		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USoundCue*                                   AmbientTeleporterSound;                           		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CollisionRadius;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              CollisionHeight;                                  		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              ExitPointDistance;                                		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60216 ];

		return pClassPointer;
	};

};

UClass* UPersonalTeleporterDefinition::pClassPointer = NULL;

// Class WillowGame.TeleporterFeedbackMessage
// 0x001B (0x0064 - 0x0049)
class UTeleporterFeedbackMessage : public ULocalMessage
{
public:
	struct FString                                     Teleporter_Disabled;                              		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Teleporter_NoRoom;                                		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60219 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UTeleporterFeedbackMessage::pClassPointer = NULL;

// Class WillowGame.PlayerTrainingMessageListDefinition
// 0x000C (0x0048 - 0x003C)
class UPlayerTrainingMessageListDefinition : public UGBXDefinition
{
public:
	TArray< class UTrainingMessageDefinition* >        TrainingMessages;                                 		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60321 ];

		return pClassPointer;
	};

};

UClass* UPlayerTrainingMessageListDefinition::pClassPointer = NULL;

// Class WillowGame.SeqEvent_TrainingMessage
// 0x0004 (0x00C8 - 0x00C4)
class USeqEvent_TrainingMessage : public USequenceEvent
{
public:
	class UObject*                                     TrainingMessageDefinition;                        		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60413 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_TrainingMessage::pClassPointer = NULL;

// Class WillowGame.FrontendGFxMovie
// 0x0164 (0x04F4 - 0x0390)
class UFrontendGFxMovie : public UWillowGFxMovie3D
{
public:
	class UFrontendGFxMovieDefinition*                 MyFrontendDefinition;                             		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFrontendMenuGFxObject*                      FrontendMenu;                                     		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowScrollingList*                        TheList;                                          		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UFrontEndPlayerListGFxObject*                PlayerList;                                       		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOptionsGFxMovie*                            OptionsMovie;                                     		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMatchmakingLobbyGFxMovie*                   MatchmakingMovie;                                 		// 0x03A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ULANServerBrowserGFxMovie*                   ServerBrowserMovie;                               		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGearboxAccountGFxMovie*                     AccountMovie;                                     		// 0x03AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMarketplaceGFxMovie*                        MarketplaceMovie;                                 		// 0x03B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         MatchmakingDialog;                                		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UNetworkOptionsGFxMovie*                     NetworkOptionsMovie;                              		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DlcWarningPlaythroughLevel;                       		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPauseTicker*                          TimerPauseTicker;                                 		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FOnlineFriend >                     FriendsList;                                      		// 0x03C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USplitscreenHelper*                          SSHelper;                                         		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSplitJoinInProgress : 1;                         		// 0x03D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSplitJoinAwaitingNetworkTransition : 1;          		// 0x03D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      CachedWidescreen : 1;                             		// 0x03D4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bMatchmakingInProgress : 1;                       		// 0x03D4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class UWillowGFxDialogBox*                         ConnectingDlg;                                    		// 0x03D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ConfirmDisconnectDlg;                             		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         ConfirmReturnToTitleDlg;                          		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         SaveGameDlg;                                      		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SaveGameStartTime;                                		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CancelTooltip;                                    		// 0x03EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelTooltip_TwoPlayer;                          		// 0x03F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectTooltip;                                    		// 0x0404 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NetworkOptionsTooltip;                            		// 0x0410 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LANServerBrowserTooltip;                          		// 0x041C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CharacterSelectTooltip;                           		// 0x0428 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartyInviteTooltip;                               		// 0x0434 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartyUITooltip;                                   		// 0x0440 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PS3InviteTooltip;                                 		// 0x044C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OptionsTooltip;                                   		// 0x0458 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpectatorTooltip;                                 		// 0x0464 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisconnectString;                                 		// 0x0470 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeaveString;                                      		// 0x047C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelString;                                     		// 0x0488 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DlcInstallOnTitleScreenReturnString;              		// 0x0494 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TooltipSpacing;                                   		// 0x04A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SavedSplitJoinControllerId;                       		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FOnlineGameSearchResult                     MatchmakingResult;                                		// 0x04B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RestoreInviteType;                                		// 0x04B8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                SavedDlcEnumNetworkOptionsButtonClickIndex;       		// 0x04BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMessageOfTheDay >                  MessagesOfTheDay;                                 		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MessageOfTheDayIdx;                               		// 0x04CC (0x0004) [0x0000000000000000]              
	int                                                RegisteredControllerId;                           		// 0x04D0 (0x0004) [0x0000000000000000]              
	int                                                CurrentSelectedOverpowerLevel;                    		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSelectedDifficulty;                        		// 0x04D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FEULAData >                         LastEULAText;                                     		// 0x04DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __PrePopupInputHandler__Delegate;                 		// 0x04E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60609 ];

		return pClassPointer;
	};

	void StartMenuMusic ( );
	void ShowLanBrowser ( );
	bool IsOverlayMenuOpen ( );
	void HideOptionsMovie ( );
	void HideMatchmakingDialog ( );
	void HideMarketplaceMovie ( );
	void ShowCompatibilityPack ( );
	void HideAccountMovie ( );
	void ShowAccountMovie ( );
	void ShowServerBrowser ( unsigned long bIsLanBrowser );
	void HideServerBrowser ( );
	void Refresh ( );
	void OpenGearboxAccountUI ( );
	bool HasUnnotifiedOffers ( );
	bool HasMessageOfTheDay ( struct FString KeyName );
	void RefreshOffers ( );
	void RefreshDLC ( );
	void ApplyPriorityVisibilityEffect ( unsigned long bRemoveEffect );
	void ApplyPriorityBlurEffect ( unsigned long bRemoveEffect );
	void ShowOptions ( int PlayerIndex );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void OnPartyMemberListChanged ( unsigned long bJoinedOrLeft, struct FString PlayerName, struct FUniqueNetId PlayerID );
	bool OnClickShowMarketplace ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnClickNotLoggedInForPSN ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void CheckDownloadableContentListCompleted ( unsigned char LocalUserNum, unsigned long bDownloadableContentListAvailable );
	void ShowMarketplaceMovie ( );
	void OnHostUpdateComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void HostOnlineGame ( );
	void HideMatchmakingMovie ( );
	void CancelMatchmaking ( );
	void UserCancelledMatchmaking ( );
	void UpdateMatchmakingMovie ( unsigned char MatchmakingState );
	void ShowMatchmakingMovie ( unsigned char MatchmakingState );
	void OnMatchmakingStateChanged ( unsigned char NewState );
	void OnDestroyGameForMatchJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void JoinMatchmakingSession ( );
	void NextMatchmakingSearch ( );
	void OnFindMatchmakingGamesComplete ( unsigned long bWasSuccessful );
	int GetNumMatchmakingPlayers ( );
	void DoMatchmakingSearch ( struct FName SearchName );
	void OnUpdateForMatchmakingComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartMatchmaking ( );
	bool OnCanStartMatchmaking_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool CanStartMatchmaking ( unsigned long bPrompt );
	unsigned char GetMatchmakingState ( );
	void SetMatchmakingState ( unsigned char NewState );
	void NotifyLoginStatusChange ( unsigned char LoginStatus );
	void NotifyLinkLost ( );
	void NotifyLinkOn ( );
	bool ConfirmQuit_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void DisplayConfirmQuitDialog ( );
	bool OpenCredits ( );
	class UGearboxGFxMovie* OpenMovieLink ( struct FName MovieName );
	class UGearboxGFxMovie* PlayMovieLink ( struct FName MovieName );
	struct FString BuildOverpowerPromptString ( int CurrentOverpowerLevel, int MaxOverpowerLevel );
	bool OverpowerLevelInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	bool OnSelectOverpowerLevel_Click ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ConfirmOverpowerLevel ( int DesiredPlaythrough, class UPlayerSaveGame* SaveGame );
	bool OnChooseDifficulty_Click ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ConfirmPlaythrough ( class UPlayerSaveGame* SaveGame );
	void LaunchSaveGameEx ( int PlayThrough );
	void LaunchSaveGame ( int PlayThrough );
	class UTravelStationDefinition* GetSaveGameTravelStationDefinition ( );
	bool NotAllClientsCanAccessDlc_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool DisplayLastStationUninstalledDlc_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool DisplayDlcLevelCapInUninstalledDlc_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ConditionalLookForCrossTitleSaveGames ( );
	void LaunchNewGame ( );
	void OnJoinMatchComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void HandleNetworkOptionsButtonClickEx ( int Index );
	void DlcNetworkOptionsRefreshComplete ( );
	void DlcRefreshCompleteFromBusy ( );
	void HandleNetworkOptionsButtonClick ( int Index );
	void OnNetworkOptionsLoaded ( class UNetworkOptionsGFxObject* InNetworkOptionsDialog );
	bool LanNetworkOptionsAvailable ( );
	bool OnlineNetworkOptionsAvailable ( );
	void HideNetworkOptions ( );
	void ShowNetworkOptions ( );
	void ShowNetworkOptionsFromList ( );
	void HandleSplitscreenJoinFail ( struct FString Reason );
	void HandleSplitscreenJoinSuccess ( class AWillowPlayerController* SplitPC );
	void OnSaveGameLoaded ( unsigned char LoadGameResult );
	void FinishSavingCache ( );
	void OnSaveCachedGameComplete ( float SaveDuration );
	bool OnChoosePlaythrough_Click ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnResetPlaythroughClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool DifficultyDialogInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	bool ConditionalAddPlaythroughResetToDialogTooltip ( class UWillowGFxDialogBox* Dlg );
	void CharacterLoadComplete ( struct FLoadInfo LI, int PlayerIndex );
	void OpenCharacterSelect ( int PlayerIndex );
	void OpenCharacterSelectFromList ( );
	void SplitJoinNetworkTransitionFailed ( );
	void AddSplitPlayerAfterNetworkTransition ( );
	bool OnConfirmSwitchSession ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ShowSplitJoinSessionChangeConfirmation ( unsigned char CurrentNetworkType, unsigned char SplitPlayerLoginStatus );
	void ShowSplitJoinFailureMessage ( unsigned char NetworkType );
	void ClearSplitscreenLoginDelegates ( );
	void OnSplitLoginCancelled ( );
	void ConfirmSplitLoginSucceeded ( );
	void OnSplitLoginChanged ( unsigned char ControllerId );
	void SplitJoinFailed ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void ShowSplitLoginUI ( );
	bool OnSplitLeaveClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ShowConfirmSplitLeaveDialog ( int ControllerId );
	void HandleSplitscreenLeaveAttempt ( int ControllerId );
	bool IsProfileValidForCurrentGame ( unsigned char CurrentNetworkType, unsigned char LoginStatus, int ControllerId );
	void HandleSplitscreenJoinAttempt ( int ControllerId );
	void AddSplitscreenPlayer ( int ControllerId );
	class USplitscreenHelper* GetSplitscreenHelper ( );
	class UWillowGFxMovie3DDefinition* GetPlayerDetailsMovieDef ( );
	bool IsPlayerOwner ( int ControllerId );
	bool CanKick ( struct FUniqueNetId UniqueId );
	bool CanUnmute ( struct FUniqueNetId UniqueId );
	bool CanMute ( struct FUniqueNetId UniqueId );
	bool CanViewGamercard ( int ControllerId, struct FUniqueNetId UniqueId );
	bool CanInvite ( struct FUniqueNetId UniqueId );
	bool CanJoin ( struct FUniqueNetId UniqueId );
	bool GetFriend ( struct FUniqueNetId UniqueId, struct FOnlineFriend* out_Friend );
	class AWillowPlayerController* GetWPCOwner ( );
	bool CanPlayOnline ( int ControllerId );
	bool IsLocalPlayerId ( struct FUniqueNetId UniqueId );
	bool IsPrimaryPlayer ( struct FUniqueNetId UniqueId );
	void OnReadFriendsComplete ( unsigned long bWasSuccessful );
	void RefreshFriends ( );
	void ConfigureFriendsList ( );
	void OnPlayerCharacterClassUpdated ( class AWillowPlayerReplicationInfo* WPRI );
	void OnPlayerExpLevelUpdated ( class AWillowPlayerReplicationInfo* WPRI );
	void OnPlayerUidUpdated ( class APlayerReplicationInfo* PRI );
	void OnPlayerNameUpdated ( class APlayerReplicationInfo* PRI );
	void OnPlayerRemoved ( );
	void RefreshPlayerList ( );
	void WaitForPRI ( );
	void extOnPlayerListSelectionChange ( int EntryIndex, int RowTypeId );
	void extOnPlayerListButtonClick ( int ControllerId, int EntryIndex, int RowTypeId );
	void extOnPlayerListLoad ( struct FString TargetPath );
	void extFrontEndMenuOnLoad ( struct FString TargetPath );
	void OnScrollingListItemFocus ( struct FEventData Data );
	void GetPlayer1CancelButtonString ( struct FString* Text );
	void AppendCancelButtonTooltip ( unsigned long bAppendPlayerDesignations, struct FString* TooltipString );
	void DelayedHideMOTD ( );
	void DelayedResetMOTD ( );
	void ResetMOTD ( );
	struct FString GetCharacterSelectTooltip ( unsigned long bAppendPlayerDesignations );
	struct FString GetGenericTooltip ( struct FString Tooltip, unsigned long bAppendPlayerDesignations );
	void UpdateTooltips ( );
	struct FString AddDisabledStringMarkup ( struct FString Text );
	void AppendTooltipString ( struct FString StringToAppend, unsigned long bDisabled, struct FString* TooltipString );
	void UpdateHeader ( );
	void OnDeviceCheckSaveGamesAvailableComplete ( unsigned long bSaveGamesAvailable );
	void OnDeviceSelectionDone ( unsigned long bWasSuccessful );
	void OnStorageDeviceChange ( );
	bool OnConfirmReturnToTitle ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ShowConfirmReturnToTitleDialog ( );
	bool OnConfirmDisconnect ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ShowConfirmDisconnectDialog ( );
	bool PlayerListInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool DefaultHandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void PreviewInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool CanShowSpectatorControls ( );
	bool CanShowCharacterSelect ( int ControllerId );
	void HandlePopListFail ( );
	bool SharedHandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void RefreshListHandler ( );
	void OnScrollingListChanged ( );
	void UpdateFrameForAspectRatio ( unsigned long bWidescreen );
	bool IsTimerActive ( struct FName FuncName );
	void ClearTimer ( struct FName FuncName );
	void SetTimer ( float Rate, unsigned long bLoop, struct FName FuncName );
	void eventOnTick ( );
	void ClearOSSDelegates ( );
	void RegisterOSSDelegates ( );
	void ClearGRIDelegates ( );
	void RegisterGRIDelegates ( );
	void eventOnClose ( );
	void HideMOTD ( );
	void ShowMOTD ( );
	bool IsValidMessageOfTheDay ( struct FMessageOfTheDay MOTD );
	struct FMessageOfTheDay GetMessageOfTheDay ( struct FString SectionName, struct FString KeyName, struct FString PackageName );
	TArray< struct FMessageOfTheDay > GetMessagesOfTheDay ( );
	bool ShouldDoInitialDeviceSelection ( );
	void NotifyAtMainMenu ( );
	void OnProfileWriteComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool eventStart ( unsigned long StartPaused );
	bool PrePopupInputHandler ( int ControllerId, struct FName ukey, unsigned char uevent );
};

UClass* UFrontendGFxMovie::pClassPointer = NULL;

// Class WillowGame.FrontendGFxMovieDefinition
// 0x0080 (0x0170 - 0x00F0)
class UFrontendGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray< class UBehaviorBase* >                     OnStart;                                          		// 0x00F0 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UTestMapsListDefinition*                     WalkableMapList;                                  		// 0x00FC (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UTestMapsListDefinition*                     BlockoutMapList;                                  		// 0x0100 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UTestMapsListDefinition*                     TestMapList;                                      		// 0x0104 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	struct FString                                     ListPath;                                         		// 0x0108 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     HeaderPath;                                       		// 0x0114 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              InviteDisplayTime;                                		// 0x0120 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     MOTD_HeaderPath;                                  		// 0x0124 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     MOTD_BodyPath;                                    		// 0x0130 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              MOTD_Delay;                                       		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     TooltipPath;                                      		// 0x0140 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Header_TopLevel;                                  		// 0x014C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UWillowGFxMovie3DDefinition*                 NetworkOptionsMovieDef;                           		// 0x0158 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowGFxMovie3DDefinition*                 PlayerDetailsMovieDef;                            		// 0x015C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowGFxMovie3DDefinition*                 OptionsMovieDef;                                  		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowGFxMovie3DDefinition*                 MatchmakingMovieDef;                              		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGFxMovieDefinition*                         ConfirmCharacterMovieDef;                         		// 0x0168 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      InitialScrollingListProviderClass;                		// 0x016C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60611 ];

		return pClassPointer;
	};

};

UClass* UFrontendGFxMovieDefinition::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_PlayCameraAnim
// 0x0014 (0x00B8 - 0x00A4)
class UWillowSeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 AnimToPlay;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rate;                                             		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntensityScale;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60724 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_PlayCameraAnim::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_StopCameraAnim
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_StopCameraAnim : public USequenceAction
{
public:
	unsigned long                                      bStopImmediately : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60732 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_StopCameraAnim::pClassPointer = NULL;

// Class WillowGame.SeqAct_UnlockAchievement
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_UnlockAchievement : public USequenceAction
{
public:
	unsigned char                                      AchievementId;                                    		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumPlayersRequired;                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60869 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_UnlockAchievement::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_ShowCharacterSelectUI
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_ShowCharacterSelectUI : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60974 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_ShowCharacterSelectUI::pClassPointer = NULL;

// Class WillowGame.FastTravelStationDiscoveryMessage
// 0x001B (0x0064 - 0x0049)
class UFastTravelStationDiscoveryMessage : public ULocalMessage
{
public:
	struct FString                                     StationDiscoveredSolo;                            		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StationDiscoveredTeam;                            		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61104 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UFastTravelStationDiscoveryMessage::pClassPointer = NULL;

// Class WillowGame.IStorageDevice
// 0x0000 (0x003C - 0x003C)
class UIStorageDevice : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61374 ];

		return pClassPointer;
	};

	void StorageDeviceChanged ( unsigned char ControllerId, unsigned long bIsValid );
};

UClass* UIStorageDevice::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_MarkEnteredRegion
// 0x0001 (0x00A5 - 0x00A4)
class UWillowSeqAct_MarkEnteredRegion : public USequenceAction
{
public:
	unsigned char                                      Region;                                           		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61506 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_MarkEnteredRegion::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_MarkExitedRegion
// 0x0001 (0x00A5 - 0x00A4)
class UWillowSeqAct_MarkExitedRegion : public USequenceAction
{
public:
	unsigned char                                      Region;                                           		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61510 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_MarkExitedRegion::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumAnnouncePenaltyBox
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumAnnouncePenaltyBox : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61810 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ColiseumAnnouncePenaltyBox::pClassPointer = NULL;

// Class WillowGame.VehicleSeatSwap_PlayerInteractionClient
// 0x0010 (0x004C - 0x003C)
class UVehicleSeatSwap_PlayerInteractionClient : public UPlayerInteractionClient
{
public:
	struct FString                                     MsgTitle;                                         		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIsInstigator : 1;                                		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61925 ];

		return pClassPointer;
	};

	void ShutDown ( );
	bool HandleSeatSwapCommand ( );
	void Initialize ( int MessageData );
};

UClass* UVehicleSeatSwap_PlayerInteractionClient::pClassPointer = NULL;

// Class WillowGame.LobbyGFxMovie
// 0x0008 (0x04FC - 0x04F4)
class ULobbyGFxMovie : public UFrontendGFxMovie
{
public:
	class AWillowPlayerReplicationInfo*                PrimaryPlayerPRI;                                 		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerReplicationInfo*                SplitPlayerPRI;                                   		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62375 ];

		return pClassPointer;
	};

	void FadeLobbyDeco ( );
	void ShowConfirmQuitDialog ( );
	bool OnQuitConfirmed ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool CanShowSpectatorControls ( );
	void extFrontEndMenuOnLoad ( struct FString TargetPath );
	void OnConfirmCharacters ( );
	void PromptConfirmCharacters ( );
	void eventOnClose ( );
	void CheckSpectatorPoint ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* ULobbyGFxMovie::pClassPointer = NULL;

// Class WillowGame.OptionsGFxMovie
// 0x0038 (0x03C8 - 0x0390)
class UOptionsGFxMovie : public UWillowGFxMovie3D
{
public:
	class UOptionsGFxObject*                           OptionsObj;                                       		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowScrollingList*                        TheList;                                          		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     TooltipSpacing;                                   		// 0x0398 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PreviousMenuHeader;                               		// 0x03A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      CachedWidescreen : 1;                             		// 0x03B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTrainingWasEnabled : 1;                          		// 0x03B0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UWillowSystemSettings*                       SystemSettings;                                   		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowScrollingListDataProviderOptionsBase* HandleInputKeyHook;                               		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     BackTooltip;                                      		// 0x03BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62493 ];

		return pClassPointer;
	};

	void extOptionsMenuOnLoad ( struct FString TargetPath, struct FString ListTargetPath );
	class UWillowSystemSettings* GetSystemSettings ( );
	void OnScrollingListItemFocus ( struct FEventData Data );
	void UpdateTooltips ( );
	void AppendTooltipString ( struct FString StringToAppend, unsigned long bDisabled, struct FString* TooltipString );
	void UpdateHeader ( );
	void CloseMovie ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void RefreshListHandler ( );
	void OnScollingListSelectedIndexChanged ( int NewSelectedIndex );
	void OnScrollingListChanged ( );
	void UpdateFrameForAspectRatio ( unsigned long bWidescreen );
	void eventOnTick ( );
	void SaveOptions ( );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UOptionsGFxMovie::pClassPointer = NULL;

// Class WillowGame.SeqAct_CausePlayerDeath
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_CausePlayerDeath : public USequenceAction
{
public:
	unsigned long                                      bInstaKill : 1;                                   		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62539 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CausePlayerDeath::pClassPointer = NULL;

// Class WillowGame.ISkillBehavior
// 0x0000 (0x003C - 0x003C)
class UISkillBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63515 ];

		return pClassPointer;
	};

	class AController* Behavior_GetSkillInstigatorController ( );
	void Behavior_UpgradeSkill ( class USkillDefinition* SkillToUpgrade, int NumberOfLevelsToRaise, int MaximumLevelToRaiseSkill );
	void Behavior_DeactivateSkill ( class USkillDefinition* SkillToDeactivate, unsigned long bIgnoreSkillInstigator );
	void Behavior_ActivateSkill ( class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade );
};

UClass* UISkillBehavior::pClassPointer = NULL;

// Class WillowGame.IChallengeRecipient
// 0x0000 (0x003C - 0x003C)
class UIChallengeRecipient : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63516 ];

		return pClassPointer;
	};

	void ReceiveChallenge ( class UChallengeDefinition* ChalDef, unsigned long bIsCharacterLoad, unsigned long bGiveToAllPlayers );
};

UClass* UIChallengeRecipient::pClassPointer = NULL;

// Class WillowGame.WillowPlayerCamera
// 0x0000 (0x0400 - 0x0400)
class AWillowPlayerCamera : public AGearboxCameraBasic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63517 ];

		return pClassPointer;
	};

	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void PostBeginPlay ( );
};

UClass* AWillowPlayerCamera::pClassPointer = NULL;

// Class WillowGame.WillowCheatManager
// 0x008C (0x00E8 - 0x005C)
class UWillowCheatManager : public UCheatManager
{
public:
	struct FString                                     ClassModPoolDefinitionName;                       		// 0x005C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              CurrencyBalanceFormulaMultiplier;                 		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrencyBalanceFormulaLevel;                      		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrencyBalanceFormulaOffset;                     		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AwesomeLevelBoostForAutoBalancedInventory;        		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     BalanceMeItemPoolListDefinitionName;              		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                BalanceMeAwesomeLevel;                            		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      DEBUG_bSkipSkillDependencyCheck : 1;              		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSkillDebugWatchPlayers : 1;                      		// 0x0088 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bSkillDebugWatchNonPlayers : 1;                   		// 0x0088 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bShowTimeOfDay : 1;                               		// 0x0088 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bLevelHacksEnabled : 1;                           		// 0x0088 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPreHLQNoClipCanTargetCheatState : 1;             		// 0x0088 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPreHLQNoClipDemigodState : 1;                    		// 0x0088 (0x0004) [0x0000000000000000] [0x00000040] 
	TArray< struct FBalanceMeResourceUpgradePath >     ResourceUpgrades;                                 		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FStatusEffectNameMapping >          StatusEffects;                                    		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class USkillDefinition* >                  WatchedSkills;                                    		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AController* >                       SkillDebugPages;                                  		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastDebugPageIndex;                               		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              LastSkillDebugPageUpdateTime;                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                LastDamagedAmount;                                		// 0x00C4 (0x0004) [0x0000000000000000]              
	class UItemPoolDefinition*                         SpawnItemPool_PoolToSpawnOutOf;                   		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnItemPool_GameStage;                          		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnItemPool_AwesomeLevel;                       		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnItemPool_NumTimesToSpawnFromPool;            		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpawnItemPool_LastUpdateTime;                     		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpawnItemPool_AccruedTime;                        		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SpawnItemPool_FuncName;                           		// 0x00E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63518 ];

		return pClassPointer;
	};

};

UClass* UWillowCheatManager::pClassPointer = NULL;

// Class WillowGame.IMultitypeScrollingList
// 0x0000 (0x003C - 0x003C)
class UIMultitypeScrollingList : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64028 ];

		return pClassPointer;
	};

	void Move ( int Delta );
	void SetRendererInfo ( int DataIndex, int RendererType, int RendererIndex );
};

UClass* UIMultitypeScrollingList::pClassPointer = NULL;

// Class WillowGame.TwoPanelInterfaceGFxDefinition
// 0x000C (0x0164 - 0x0158)
class UTwoPanelInterfaceGFxDefinition : public UWillowInventoryGFxDefinition
{
public:
	struct FString                                     PathToBackgroundArtClip;                          		// 0x0158 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64230 ];

		return pClassPointer;
	};

};

UClass* UTwoPanelInterfaceGFxDefinition::pClassPointer = NULL;

// Class WillowGame.IWillowStorable
// 0x0000 (0x003C - 0x003C)
class UIWillowStorable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64249 ];

		return pClassPointer;
	};

	bool Put ( class AInventory* Thing );
	bool Get ( class AWillowInventory* Thing );
	bool Swap ( class AWillowInventory* ThingA, class AWillowInventory* ThingB );
};

UClass* UIWillowStorable::pClassPointer = NULL;

// Class WillowGame.ITwoPanelInterface
// 0x0000 (0x003C - 0x003C)
class UITwoPanelInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64311 ];

		return pClassPointer;
	};

	void OnCellPressed ( class UBaseInventoryPanelGFxObject* Panel );
	void OnLeftPanelInit ( class UInventoryListPanelGFxObject* LeftPanel );
	void SetItemLocation ( class AWillowInventory* Thing );
	void PanelOnItemSelected ( class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing );
	bool ShouldStoragePanelHighlightFrozen ( );
	class AWillowInventory* GetEquippedAnalogue ( class AWillowInventory* InThing );
	class AWillowInventory* GetSelectedThing ( );
	struct FString GetPlayerPanelLabel ( );
	struct FString GetStoragePanelLabel ( );
	bool ShouldShowPanelNavTooltips ( );
	void NotifySelectionChange ( );
	unsigned char GetCurrencyTypeForInventory ( class AWillowInventory* WInv );
	int GetOverridePriceForInventory ( class AWillowInventory* WInv );
	void GetSortConfigDataForPanel ( class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData );
	class UIWillowStorable* GetStorageReferenceForTransferring ( );
	class UIWillowStorable* GetStorageReferenceForSwapping ( );
	void GetPlayerPanelItems ( TArray< class AWillowInventory* >* Things );
	void GetStoragePanelItems ( TArray< class AWillowInventory* >* Things, int* UnloadableCount );
	struct FString GetTitle ( );
	bool ShouldStartOnLeftPanel ( );
};

UClass* UITwoPanelInterface::pClassPointer = NULL;

// Class WillowGame.BankGFxMovie
// 0x001C (0x04C0 - 0x04A4)
class UBankGFxMovie : public UTwoPanelInterfaceGFxMovie
{
public:
	struct FString                                     BankTitle;                                        		// 0x04A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BankAddTip;                                       		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UWillowInventoryStorage*                     BankStorage;                                      		// 0x04BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64312 ];

		return pClassPointer;
	};

	void SetItemLocation ( class AWillowInventory* Thing );
	void OnInventoryPanelSetActive ( class UBaseInventoryPanelGFxObject* PanelObject, unsigned long bActive );
	class UIWillowStorable* GetStorageReferenceForTransferring ( );
	class UIWillowStorable* GetStorageReferenceForSwapping ( );
	void GetPlayerPanelItems ( TArray< class AWillowInventory* >* Things );
	void GetStoragePanelItems ( TArray< class AWillowInventory* >* Things, int* UnloadableCount );
	struct FString GetAddTip ( );
	struct FString GetTitle ( );
	void eventOnClose ( );
	void extInitMainPanel ( struct FString MainPanelTargetPath );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UBankGFxMovie::pClassPointer = NULL;

// Class WillowGame.Behavior_ActivateListenerSkill
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ActivateListenerSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToActivate;                                  		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64499 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ActivateListenerSkill::pClassPointer = NULL;

// Class WillowGame.Behavior_ActivateSkill
// 0x0018 (0x0064 - 0x004C)
class UBehavior_ActivateSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToActivate;                                  		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseAdditionalSkillTarget : 1;                    		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNoSkillStacking : 1;                             		// 0x0050 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        AdditionalTargetContext;                          		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64519 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ActivateSkill::pClassPointer = NULL;

// Class WillowGame.Behavior_AddInstanceData
// 0x0010 (0x005C - 0x004C)
class UBehavior_AddInstanceData : public UBehaviorBase
{
public:
	unsigned long                                      bAllowDuplicates : 1;                             		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FInstanceDataUnion >                InstanceData;                                     		// 0x0050 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64533 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AddInstanceData::pClassPointer = NULL;

// Class WillowGame.Behavior_AddInstanceDataFromBehaviorContext
// 0x001C (0x0068 - 0x004C)
class UBehavior_AddInstanceDataFromBehaviorContext : public UBehaviorBase
{
public:
	struct FName                                       DatumName;                                        		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDeleteByOwner : 1;                               		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        ObjectContext;                                    		// 0x0058 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64547 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AddInstanceDataFromBehaviorContext::pClassPointer = NULL;

// Class WillowGame.Behavior_AddInventoryToStorage
// 0x0090 (0x00DC - 0x004C)
class UBehavior_AddInventoryToStorage : public UBehaviorBase
{
public:
	struct FItemDefinitionData                         ItemDef;                                          		// 0x004C (0x0044) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FWeaponDefinitionData                       WeaponDef;                                        		// 0x0090 (0x0044) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      InvType;                                          		// 0x00D4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Destination;                                      		// 0x00D5 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreCapacityCheck : 1;                         		// 0x00D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUniqueInventory : 1;                             		// 0x00D8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64561 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AddInventoryToStorage::pClassPointer = NULL;

// Class WillowGame.Behavior_AddObjectInstanceData
// 0x0010 (0x005C - 0x004C)
class UBehavior_AddObjectInstanceData : public UBehaviorBase
{
public:
	class UObject*                                     InstanceDataObject;                               		// 0x004C (0x0004) [0x0000000000000000]              
	struct FName                                       InstanceDataName;                                 		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeleteByOwner : 1;                               		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowDuplicateNames : 1;                         		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64596 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AddObjectInstanceData::pClassPointer = NULL;

// Class WillowGame.Behavior_AdjustCameraAnimByEyeHeight
// 0x0008 (0x0054 - 0x004C)
class UBehavior_AdjustCameraAnimByEyeHeight : public UBehaviorBase
{
public:
	unsigned long                                      bEnable : 1;                                      		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              BaseEyeHeight;                                    		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64611 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AdjustCameraAnimByEyeHeight::pClassPointer = NULL;

// Class WillowGame.Behavior_AIChangeInventory
// 0x0018 (0x0064 - 0x004C)
class UBehavior_AIChangeInventory : public UBehaviorBase
{
public:
	TArray< struct FItemPoolInfo >                     NewItemPoolList;                                  		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UItemPoolListDefinition* >           NewItemPoolIncludedLists;                         		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64630 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AIChangeInventory::pClassPointer = NULL;

// Class WillowGame.Behavior_AIFollow
// 0x0020 (0x006C - 0x004C)
class UBehavior_AIFollow : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ToFollow;                                         		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanShoot : 1;                                    		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFormation : 1;                                		// 0x005C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned char                                      Action;                                           		// 0x0060 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Stance;                                           		// 0x0061 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              CatchupDistance;                                  		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HoldStillDistance;                                		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64646 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AIFollow::pClassPointer = NULL;

// Class WillowGame.Behavior_AILevelUp
// 0x0008 (0x0054 - 0x004C)
class UBehavior_AILevelUp : public UBehaviorBase
{
public:
	unsigned long                                      bResetHealth : 1;                                 		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                MaxLevelUps;                                      		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64664 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AILevelUp::pClassPointer = NULL;

// Class WillowGame.Behavior_AIPatsy
// 0x0014 (0x0060 - 0x004C)
class UBehavior_AIPatsy : public UBehaviorBase
{
public:
	unsigned long                                      bClearPatsy : 1;                                  		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        Patsy;                                            		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64679 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AIPatsy::pClassPointer = NULL;

// Class WillowGame.Behavior_AIProvoke
// 0x0010 (0x005C - 0x004C)
class UBehavior_AIProvoke : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ProvokeInstigator;                                		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64692 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AIProvoke::pClassPointer = NULL;

// Class WillowGame.Behavior_AIResetProvocation
// 0x0000 (0x004C - 0x004C)
class UBehavior_AIResetProvocation : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64704 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AIResetProvocation::pClassPointer = NULL;

// Class WillowGame.Behavior_AISetItemTossTarget
// 0x0010 (0x005C - 0x004C)
class UBehavior_AISetItemTossTarget : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        TossTarget;                                       		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64717 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AISetItemTossTarget::pClassPointer = NULL;

// Class WillowGame.Behavior_AISetWeaponFireRotation
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AISetWeaponFireRotation : public UBehaviorBase
{
public:
	unsigned long                                      bUseWeaponRotation : 1;                           		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64729 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AISetWeaponFireRotation::pClassPointer = NULL;

// Class WillowGame.Behavior_AITakeMoney
// 0x0024 (0x0070 - 0x004C)
class UBehavior_AITakeMoney : public UBehaviorBase
{
public:
	float                                              TakePercent;                                      		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        GiveTo;                                           		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UItemPoolDefinition*                         CashItemPool;                                     		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     HUDSpecialRemovalFrame;                           		// 0x0064 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64770 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AITakeMoney::pClassPointer = NULL;

// Class WillowGame.INPCBehavior
// 0x0000 (0x003C - 0x003C)
class UINPCBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64807 ];

		return pClassPointer;
	};

	class UProjectileDefinition* GetCurrentProjectile ( );
	class AWillowGrenadeMod* GetGrenadeMod ( );
};

UClass* UINPCBehavior::pClassPointer = NULL;

// Class WillowGame.Behavior_AssignBoolVariable
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AssignBoolVariable : public UBehaviorBase
{
public:
	unsigned long                                      Value : 1;                                        		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64841 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( unsigned long Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AssignBoolVariable::pClassPointer = NULL;

// Class WillowGame.Behavior_AssignFloatVariable
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AssignFloatVariable : public UBehaviorBase
{
public:
	float                                              Value;                                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64854 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( float Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AssignFloatVariable::pClassPointer = NULL;

// Class WillowGame.Behavior_AssignIntVariable
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AssignIntVariable : public UBehaviorBase
{
public:
	int                                                Value;                                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64867 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( int Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AssignIntVariable::pClassPointer = NULL;

// Class WillowGame.Behavior_AssignObjectVariable
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AssignObjectVariable : public UBehaviorBase
{
public:
	class UObject*                                     Value;                                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64880 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class UObject* Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AssignObjectVariable::pClassPointer = NULL;

// Class WillowGame.Behavior_AssignVectorVariable
// 0x000C (0x0058 - 0x004C)
class UBehavior_AssignVectorVariable : public UBehaviorBase
{
public:
	struct FVector                                     Value;                                            		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64893 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( struct FVector Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AssignVectorVariable::pClassPointer = NULL;

// Class WillowGame.Behavior_AttachActor
// 0x0024 (0x0070 - 0x004C)
class UBehavior_AttachActor : public UBehaviorBase
{
public:
	struct FName                                       AttachmentPointName;                              		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        ToAttach;                                         		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AttachTime;                                       		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       InstanceDataName;                                 		// 0x0068 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64906 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AttachActor::pClassPointer = NULL;

// Class WillowGame.Behavior_AttachAOEStatusEffect
// 0x000C (0x0058 - 0x004C)
class UBehavior_AttachAOEStatusEffect : public UBehaviorBase
{
public:
	class UWillowDamageTypeDefinition*                 StatusEffectDamageType;                           		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SaveReferenceName;                                		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64926 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AttachAOEStatusEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_AttachItems
// 0x0004 (0x0050 - 0x004C)
class UBehavior_AttachItems : public UBehaviorBase
{
public:
	unsigned long                                      bDisablePickups : 1;                              		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64948 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AttachItems::pClassPointer = NULL;

// Class WillowGame.Behavior_AttributeEffect
// 0x0010 (0x005C - 0x004C)
class UBehavior_AttributeEffect : public UBehaviorBase
{
public:
	class USkillDefinition*                            AttributeEffect;                                  		// 0x004C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	TArray< struct FAttributeEffectData >              AttributeEffects;                                 		// 0x0050 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65036 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AttributeEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_AwardExperienceForMyDeath
// 0x0000 (0x004C - 0x004C)
class UBehavior_AwardExperienceForMyDeath : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65051 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_AwardExperienceForMyDeath::pClassPointer = NULL;

// Class WillowGame.Behavior_BeginLifting
// 0x0030 (0x007C - 0x004C)
class UBehavior_BeginLifting : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        LifterSkillContext;                               		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        LifterPawnContext;                                		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                HeightFromGroundFormula;                          		// 0x006C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65070 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_BeginLifting::pClassPointer = NULL;

// Class WillowGame.ILiftBehavior
// 0x0000 (0x003C - 0x003C)
class UILiftBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65077 ];

		return pClassPointer;
	};

	void BeginLifting ( class AWillowPawn* TargetPawn, float HeightFromGround );
	void FinishLifting ( unsigned long bDropImmediately );
	void SelectTarget ( class AWillowPawn* NewTarget );
};

UClass* UILiftBehavior::pClassPointer = NULL;

// Class WillowGame.Behavior_BoolMath
// 0x0005 (0x0051 - 0x004C)
class UBehavior_BoolMath : public UBehaviorBase
{
public:
	unsigned long                                      A : 1;                                            		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      B : 1;                                            		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      Operation;                                        		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65085 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( unsigned long Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_BoolMath::pClassPointer = NULL;

// Class WillowGame.Behavior_BroadcastEcho
// 0x0000 (0x004C - 0x004C)
class UBehavior_BroadcastEcho : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65101 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_BroadcastEcho::pClassPointer = NULL;

// Class WillowGame.Behavior_CauseTinnitus
// 0x0028 (0x0074 - 0x004C)
class UBehavior_CauseTinnitus : public UBehaviorBase
{
public:
	struct FAttributeInitializationData                Radius;                                           		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                StrengthModifier;                                 		// 0x005C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bOverrideTinnitusAkEvent : 1;                     		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	class UAkEvent*                                    OverrideTinnitusAkEvent;                          		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65164 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CauseTinnitus::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeBehaviorSetState
// 0x0009 (0x0055 - 0x004C)
class UBehavior_ChangeBehaviorSetState : public UBehaviorBase
{
public:
	struct FName                                       BehaviorSetName;                                  		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChangeStatus;                                     		// 0x0054 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65179 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeBehaviorSetState::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeCanTarget
// 0x0001 (0x004D - 0x004C)
class UBehavior_ChangeCanTarget : public UBehaviorBase
{
public:
	unsigned char                                      ChangeStatus;                                     		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65191 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeCanTarget::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeDenAllegiance
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ChangeDenAllegiance : public UBehaviorBase
{
public:
	class UPawnAllegiance*                             Allegiance;                                       		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65202 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeDenAllegiance::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeDialogName
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ChangeDialogName : public UBehaviorBase
{
public:
	class UGearboxDialogNameTag*                       NewNameTag;                                       		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65213 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeDialogName::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeEnvironmentTag
// 0x000C (0x0058 - 0x004C)
class UBehavior_ChangeEnvironmentTag : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UEnvironmentTagDefinition*                   EnvironmentTag;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverwriteExistingTag : 1;                        		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65224 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeEnvironmentTag::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeInstanceDataSwitch
// 0x0010 (0x005C - 0x004C)
class UBehavior_ChangeInstanceDataSwitch : public UBehaviorBase
{
public:
	struct FName                                       SwitchName;                                       		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NewValue;                                         		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSimulated : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65238 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeInstanceDataSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeSkillBehaviorSequenceState
// 0x0010 (0x005C - 0x004C)
class UBehavior_ChangeSkillBehaviorSequenceState : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SequenceName;                                     		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            SkillDef;                                         		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65251 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeSkillBehaviorSequenceState::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeUsability
// 0x0002 (0x004E - 0x004C)
class UBehavior_ChangeUsability : public UBehaviorBase
{
public:
	unsigned char                                      ChangeUsability;                                  		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UsabilityType;                                    		// 0x004D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65271 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeUsability::pClassPointer = NULL;

// Class WillowGame.IChangeUsabilityBehavior
// 0x0000 (0x003C - 0x003C)
class UIChangeUsabilityBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65277 ];

		return pClassPointer;
	};

	void Behavior_ChangeUsabilityCost ( unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType );
	void Behavior_ChangeUsability ( unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType );
};

UClass* UIChangeUsabilityBehavior::pClassPointer = NULL;

// Class WillowGame.Behavior_ChangeWeaponVisibility
// 0x0008 (0x0054 - 0x004C)
class UBehavior_ChangeWeaponVisibility : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bApplyToFirstPerson : 1;                          		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bApplyToThirdPerson : 1;                          		// 0x0050 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65285 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeWeaponVisibility::pClassPointer = NULL;

// Class WillowGame.Behavior_Charm
// 0x0014 (0x0060 - 0x004C)
class UBehavior_Charm : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        CharmOwner;                                       		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65297 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Charm::pClassPointer = NULL;

// Class WillowGame.Behavior_CheckMapChangeConditions
// 0x0010 (0x005C - 0x004C)
class UBehavior_CheckMapChangeConditions : public UBehaviorBase
{
public:
	struct FName                                       MapChangeCustomEvent;                             		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       PlayerBusyCustomEvent;                            		// 0x0054 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65313 ];

		return pClassPointer;
	};

	void PlayerBusyEvent ( class UICustomEvent* CustomEventInterface );
	void MapChangeEvent ( class UICustomEvent* CustomEventInterface );
	class ULevelTravelStationDefinition* GetDestinationStationDefinition ( class ULevelTravelStationDefinition* Source );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CheckMapChangeConditions::pClassPointer = NULL;

// Class WillowGame.Behavior_ClearStatusEffects
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ClearStatusEffects : public UBehaviorBase
{
public:
	unsigned long                                      bKillImmediately : 1;                             		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65344 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ClearStatusEffects::pClassPointer = NULL;

// Class WillowGame.Behavior_CombatPerch
// 0x0009 (0x0055 - 0x004C)
class UBehavior_CombatPerch : public UBehaviorBase
{
public:
	struct FName                                       AttachmentName;                                   		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Action;                                           		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65355 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CombatPerch::pClassPointer = NULL;

// Class WillowGame.Behavior_CombatPerchThrow
// 0x0004 (0x00AC - 0x00A8)
class UBehavior_CombatPerchThrow : public UBehavior_AIThrowProjectileAtTarget
{
public:
	unsigned long                                      bDrop : 1;                                        		// 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65371 ];

		return pClassPointer;
	};

	void ThrowProjectile ( class AWillowProjectile* NewProjectile, class UIAIInterface* AI, class UObject* ContextObject, int ExpLevel );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CombatPerchThrow::pClassPointer = NULL;

// Class WillowGame.Behavior_CompareFloat
// 0x0008 (0x0054 - 0x004C)
class UBehavior_CompareFloat : public UBehaviorBase
{
public:
	float                                              ValueA;                                           		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65389 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CompareFloat::pClassPointer = NULL;

// Class WillowGame.Behavior_CompareInt
// 0x0008 (0x0054 - 0x004C)
class UBehavior_CompareInt : public UBehaviorBase
{
public:
	int                                                A;                                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                B;                                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65400 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CompareInt::pClassPointer = NULL;

// Class WillowGame.Behavior_CompareObject
// 0x0008 (0x0054 - 0x004C)
class UBehavior_CompareObject : public UBehaviorBase
{
public:
	class UObject*                                     ObjectA;                                          		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UObject*                                     ObjectB;                                          		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65411 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CompareObject::pClassPointer = NULL;

// Class WillowGame.Behavior_CoordinatedEffect
// 0x0008 (0x0054 - 0x004C)
class UBehavior_CoordinatedEffect : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                           		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UCoordinatedEffectDefinition*                Effect;                                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65468 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CoordinatedEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_Crane
// 0x0001 (0x004D - 0x004C)
class UBehavior_Crane : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65484 ];

		return pClassPointer;
	};

	void DontDoShit ( class AWillowAICranePawn* CranePawn );
	void FollowDummy ( class AWillowAICranePawn* CranePawn );
	void DetachDummy ( class AWillowAICranePawn* CranePawn );
	void AttachDummy ( class AWillowAICranePawn* CranePawn );
	void FindDummy ( class AWillowAICranePawn* CranePawn );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Crane::pClassPointer = NULL;

// Class WillowGame.Behavior_CreateImpactEffect
// 0x0018 (0x0064 - 0x004C)
class UBehavior_CreateImpactEffect : public UBehaviorBase
{
public:
	class UWillowImpactDefinition*                     ImpactDefinition;                                 		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ImpactPointName;                                  		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ImpactDirection;                                  		// 0x0058 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ImpactTraceLength;                                		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ImpactTraceStartBackupLength;                     		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65506 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CreateImpactEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_CreateWeatherSystem
// 0x0008 (0x0054 - 0x004C)
class UBehavior_CreateWeatherSystem : public UBehaviorBase
{
public:
	class UParticleSystem*                             WeatherSystemTemplate;                            		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             ScreenEffectTemplate;                             		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65525 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CreateWeatherSystem::pClassPointer = NULL;

// Class WillowGame.Behavior_DamageArea
// 0x0001 (0x004D - 0x004C)
class UBehavior_DamageArea : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65537 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DamageArea::pClassPointer = NULL;

// Class WillowGame.Behavior_DamageClassSwitch
// 0x0004 (0x0050 - 0x004C)
class UBehavior_DamageClassSwitch : public UBehaviorBase
{
public:
	class UObject*                                     HitObject;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65550 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DamageClassSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_DamageSourceSwitch
// 0x0004 (0x0050 - 0x004C)
class UBehavior_DamageSourceSwitch : public UBehaviorBase
{
public:
	class UObject*                                     DamageSource;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65561 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DamageSourceSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_DamageSurfaceTypeSwitch
// 0x0004 (0x0050 - 0x004C)
class UBehavior_DamageSurfaceTypeSwitch : public UBehaviorBase
{
public:
	int                                                DamageSurfaceType;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65572 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DamageSurfaceTypeSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_DeactivateSkill
// 0x0008 (0x0054 - 0x004C)
class UBehavior_DeactivateSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToDeactivate;                                		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreSkillInstigator : 1;                       		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65583 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DeactivateSkill::pClassPointer = NULL;

// Class WillowGame.Behavior_DebugMessage
// 0x002C (0x0078 - 0x004C)
class UBehavior_DebugMessage : public UBehaviorBase
{
public:
	struct FString                                     DebugMessage;                                     		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Duration;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DebugBool : 1;                                    		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOutputBool : 1;                                  		// 0x005C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOutputFloat : 1;                                 		// 0x005C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOutputInt : 1;                                   		// 0x005C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOutputObject : 1;                                		// 0x005C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bOutputVector : 1;                                		// 0x005C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bOutputToLogFile : 1;                             		// 0x005C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              DebugFloat;                                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DebugInt;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     DebugObject;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DebugVector;                                      		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65595 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DebugMessage::pClassPointer = NULL;

// Class WillowGame.Behavior_DestroyBeams
// 0x0014 (0x0060 - 0x004C)
class UBehavior_DestroyBeams : public UBehaviorBase
{
public:
	unsigned long                                      bDestroyAllBeams : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        TargetContext;                                    		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65626 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DestroyBeams::pClassPointer = NULL;

// Class WillowGame.Behavior_DestroyBeamsForSource
// 0x0018 (0x0064 - 0x004C)
class UBehavior_DestroyBeamsForSource : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        SourceContext;                                    		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SourceSocket;                                     		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65638 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DestroyBeamsForSource::pClassPointer = NULL;

// Class WillowGame.Behavior_DestroyWeatherSystem
// 0x0000 (0x004C - 0x004C)
class UBehavior_DestroyWeatherSystem : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65650 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DestroyWeatherSystem::pClassPointer = NULL;

// Class WillowGame.Behavior_DetachActor
// 0x0034 (0x0080 - 0x004C)
class UBehavior_DetachActor : public UBehaviorBase
{
public:
	unsigned long                                      bSetActorToPhysFallingOnDetach : 1;               		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAddVelocityOnDetach : 1;                         		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	struct FRelativeDirectionData                      DetachDirection;                                  		// 0x0050 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DetachSpeed;                                      		// 0x0070 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65660 ];

		return pClassPointer;
	};

	void ApplyDetachVelocity ( class AActor* ActorToDetach, struct FVector DetachVelocity );
	struct FVector CalculateDetachVelocity ( class AActor* ActorToDetach );
	void DetachActor ( class AActor* ActorToDetach );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DetachActor::pClassPointer = NULL;

// Class WillowGame.Behavior_DisableFallingDamage
// 0x0004 (0x0050 - 0x004C)
class UBehavior_DisableFallingDamage : public UBehaviorBase
{
public:
	unsigned long                                      bDisableFallingDamage : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65684 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DisableFallingDamage::pClassPointer = NULL;

// Class WillowGame.Behavior_DiscoverLevelChallengeObject
// 0x0008 (0x0054 - 0x004C)
class UBehavior_DiscoverLevelChallengeObject : public UBehaviorBase
{
public:
	class UObject*                                     UnlockForPlayer;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForAllPlayers : 1;                               		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreNumbering : 1;                             		// 0x0050 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65695 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DiscoverLevelChallengeObject::pClassPointer = NULL;

// Class WillowGame.Behavior_DropItems
// 0x0058 (0x00A4 - 0x004C)
class UBehavior_DropItems : public UBehaviorBase
{
public:
	struct FVector                                     ItemDropOffset;                                   		// 0x004C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ItemDropVelocity;                                 		// 0x0058 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ItemScatterOffset;                                		// 0x0064 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisablePickups : 1;                              		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCircularScatter : 1;                             		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTorque : 1;                                      		// 0x0070 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	struct FRelativeDirectionData                      CustomDirection;                                  		// 0x0074 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomVelocity;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Torque;                                           		// 0x0098 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65709 ];

		return pClassPointer;
	};

	void DropItems ( class UIWorldBody* AttachmentBase, TArray< struct FSpawnedDroppedLootData >* SpawnedLoot );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DropItems::pClassPointer = NULL;

// Class WillowGame.Behavior_DropProjectile
// 0x0024 (0x0070 - 0x004C)
class UBehavior_DropProjectile : public UBehaviorBase
{
public:
	struct FName                                       InstanceDataName;                                 		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeBaseValueData >           ChildProjectileBaseValues;                        		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UProjectileDefinition*                       ProjectileDef;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDropProjectileBehaviorSequenceStateData > SetProjectileSequenceState;                       		// 0x0064 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65746 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DropProjectile::pClassPointer = NULL;

// Class WillowGame.Behavior_DuplicateInstanceData
// 0x0018 (0x0064 - 0x004C)
class UBehavior_DuplicateInstanceData : public UBehaviorBase
{
public:
	struct FName                                       DuplicateName;                                    		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceData;                                     		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65777 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_DuplicateInstanceData::pClassPointer = NULL;

// Class WillowGame.Behavior_EnterVehicle
// 0x0014 (0x0060 - 0x004C)
class UBehavior_EnterVehicle : public UBehaviorBase
{
public:
	int                                                SeatPos;                                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBehaviorContextData                        VehicleContext;                                   		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65790 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_EnterVehicle::pClassPointer = NULL;

// Class WillowGame.Behavior_FinishLifting
// 0x0004 (0x0050 - 0x004C)
class UBehavior_FinishLifting : public UBehaviorBase
{
public:
	unsigned long                                      bDropImmediately : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65870 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_FinishLifting::pClassPointer = NULL;

// Class WillowGame.Behavior_FireBeam
// 0x0080 (0x00CC - 0x004C)
class UBehavior_FireBeam : public UBehaviorBase
{
public:
	struct FName                                       SourceSocket;                                     		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     SourceOffset;                                     		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bLockTarget : 1;                                  		// 0x0060 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FName                                       TargetSocket;                                     		// 0x0064 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     TargetOffset;                                     		// 0x006C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        TargetContext;                                    		// 0x0078 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumBeams;                                         		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DamagePerSecondFormula;                           		// 0x008C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MomentumPerSecondFormula;                         		// 0x009C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                RadiusToDoDamageAroundImpact;                     		// 0x00AC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFiringModeDefinition*                       FiringModeDefinition;                             		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      DamageSource;                                     		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65881 ];

		return pClassPointer;
	};

	void FillData ( class UObject* ContextObject, struct FBeamLocationData* Data );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_FireBeam::pClassPointer = NULL;

// Class WillowGame.Behavior_FireCustomSkillEvent
// 0x000C (0x0058 - 0x004C)
class UBehavior_FireCustomSkillEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                        		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            Skill;                                            		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65914 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_FireCustomSkillEvent::pClassPointer = NULL;

// Class WillowGame.Behavior_FireShot
// 0x00BC (0x0108 - 0x004C)
class UBehavior_FireShot : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        WeaponOwnerContext;                               		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumProjectiles;                                   		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRelativeDirectionData                      SpawnDirection;                                   		// 0x0060 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SpawnSocket;                                      		// 0x0080 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     SpawnDirectionVector;                             		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UFiringModeDefinition*                       FiringModeDefinition;                             		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             FireLocationSocketNames;                          		// 0x0098 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      FireSocketSelection;                              		// 0x00A4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TimeBetweenShots;                                 		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                DamagePerSecondFormula;                           		// 0x00AC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MomentumPerSecondFormula;                         		// 0x00BC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                RadiusToDoDamageAroundImpact;                     		// 0x00CC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      DamageSource;                                     		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     BeamLocationOffset;                               		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTreatDirectionAsDestination : 1;                 		// 0x00F4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             FireLocationSocketsRemaining;                     		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumShotsFired;                                    		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65929 ];

		return pClassPointer;
	};

	void FireNextShot ( struct FBehaviorKernelInfo KernelInfo, class UIFireShotBehavior* FireInterface, class UIWorldBody* WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_FireShot::pClassPointer = NULL;

// Class WillowGame.Behavior_ForceDownState
// 0x0000 (0x004C - 0x004C)
class UBehavior_ForceDownState : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65971 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ForceDownState::pClassPointer = NULL;

// Class WillowGame.Behavior_ForceInjured
// 0x0000 (0x004C - 0x004C)
class UBehavior_ForceInjured : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65980 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ForceInjured::pClassPointer = NULL;

// Class WillowGame.Behavior_GetClosestPlayer
// 0x0004 (0x0050 - 0x004C)
class UBehavior_GetClosestPlayer : public UBehaviorBase
{
public:
	unsigned long                                      bFriendlyToContext : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnemyToContext : 1;                              		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65990 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class UObject* Player, float Distance, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GetClosestPlayer::pClassPointer = NULL;

// Class WillowGame.Behavior_GetItemPrice
// 0x0008 (0x0054 - 0x004C)
class UBehavior_GetItemPrice : public UBehaviorBase
{
public:
	class UObject*                                     Item;                                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Markup;                                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66007 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( float Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GetItemPrice::pClassPointer = NULL;

// Class WillowGame.Behavior_GetPlayerStat
// 0x0008 (0x0054 - 0x004C)
class UBehavior_GetPlayerStat : public UBehaviorBase
{
public:
	struct FName                                       StatId;                                           		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66021 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( int Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GetPlayerStat::pClassPointer = NULL;

// Class WillowGame.Behavior_GetVelocity
// 0x0004 (0x0050 - 0x004C)
class UBehavior_GetVelocity : public UBehaviorBase
{
public:
	unsigned long                                      bLocalSpace : 1;                                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66035 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( struct FVector Velocity, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GetVelocity::pClassPointer = NULL;

// Class WillowGame.Behavior_GFxMoviePlay
// 0x001C (0x0068 - 0x004C)
class UBehavior_GFxMoviePlay : public UBehaviorBase
{
public:
	class UGFxMovieDefinition*                         MovieDefinition;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBehaviorContextData                        OtherContext;                                     		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       Tag;                                              		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66050 ];

		return pClassPointer;
	};

	class AWillowPlayerController* ResolveController ( class UObject* Obj );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GFxMoviePlay::pClassPointer = NULL;

// Class WillowGame.Behavior_GFxMovieSetState
// 0x0008 (0x0054 - 0x004C)
class UBehavior_GFxMovieSetState : public UBehaviorBase
{
public:
	struct FName                                       StateToChange;                                    		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66085 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GFxMovieSetState::pClassPointer = NULL;

// Class WillowGame.Behavior_GFxMovieStop
// 0x0008 (0x0054 - 0x004C)
class UBehavior_GFxMovieStop : public UBehaviorBase
{
public:
	struct FName                                       Tag;                                              		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66096 ];

		return pClassPointer;
	};

	class AWillowPlayerController* ResolveController ( class UObject* Obj );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GFxMovieStop::pClassPointer = NULL;

// Class WillowGame.Behavior_GiveInjuredPlayerSecondWind
// 0x0004 (0x0050 - 0x004C)
class UBehavior_GiveInjuredPlayerSecondWind : public UBehaviorBase
{
public:
	unsigned long                                      bDontCountAsKill : 1;                             		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66121 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_GiveInjuredPlayerSecondWind::pClassPointer = NULL;

// Class WillowGame.Behavior_HasMissions
// 0x0000 (0x004C - 0x004C)
class UBehavior_HasMissions : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66132 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_HasMissions::pClassPointer = NULL;

// Class WillowGame.Behavior_HeadLookHold
// 0x0009 (0x0055 - 0x004C)
class UBehavior_HeadLookHold : public UBehaviorBase
{
public:
	struct FName                                       Reason;                                           		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Action;                                           		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66145 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_HeadLookHold::pClassPointer = NULL;

// Class WillowGame.Behavior_IncrementOverpowerLevel
// 0x0004 (0x0050 - 0x004C)
class UBehavior_IncrementOverpowerLevel : public UBehaviorBase
{
public:
	int                                                NumLevelsToAward;                                 		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66158 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_IncrementOverpowerLevel::pClassPointer = NULL;

// Class WillowGame.Behavior_IncrementPlayerStat
// 0x0010 (0x005C - 0x004C)
class UBehavior_IncrementPlayerStat : public UBehaviorBase
{
public:
	struct FName                                       StatId;                                           		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                IncAmount;                                        		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateToServer : 1;                           		// 0x0058 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66168 ];

		return pClassPointer;
	};

	class AWillowPlayerController* ResolveController ( class UObject* Obj );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_IncrementPlayerStat::pClassPointer = NULL;

// Class WillowGame.Behavior_IsCensoredMode
// 0x0000 (0x004C - 0x004C)
class UBehavior_IsCensoredMode : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66220 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_IsCensoredMode::pClassPointer = NULL;

// Class WillowGame.Behavior_IsObjectPlayer
// 0x0004 (0x0050 - 0x004C)
class UBehavior_IsObjectPlayer : public UBehaviorBase
{
public:
	class UObject*                                     PlayerCandidate;                                  		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66229 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_IsObjectPlayer::pClassPointer = NULL;

// Class WillowGame.Behavior_IsObjectVehicle
// 0x0004 (0x0050 - 0x004C)
class UBehavior_IsObjectVehicle : public UBehaviorBase
{
public:
	class UObject*                                     VehicleCandidate;                                 		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66240 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_IsObjectVehicle::pClassPointer = NULL;

// Class WillowGame.Behavior_LeaderCommand
// 0x0006 (0x0052 - 0x004C)
class UBehavior_LeaderCommand : public UBehaviorBase
{
public:
	unsigned long                                      bOverride : 1;                                    		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      Type;                                             		// 0x0050 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Action;                                           		// 0x0051 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66251 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_LeaderCommand::pClassPointer = NULL;

// Class WillowGame.Behavior_LeapAtTarget
// 0x0000 (0x004C - 0x004C)
class UBehavior_LeapAtTarget : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66267 ];

		return pClassPointer;
	};

};

UClass* UBehavior_LeapAtTarget::pClassPointer = NULL;

// Class WillowGame.Behavior_LocalCustomEvent
// 0x0008 (0x0054 - 0x004C)
class UBehavior_LocalCustomEvent : public UBehaviorBase
{
public:
	struct FName                                       CustomEventName;                                  		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66269 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_LocalCustomEvent::pClassPointer = NULL;

// Class WillowGame.Behavior_MakeVector
// 0x000C (0x0058 - 0x004C)
class UBehavior_MakeVector : public UBehaviorBase
{
public:
	float                                              X;                                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Y;                                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Z;                                                		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66281 ];

		return pClassPointer;
	};

	void eventPublishBehaviorOutput ( struct FVector Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_MakeVector::pClassPointer = NULL;

// Class WillowGame.Behavior_MissionCustomEvent
// 0x000C (0x0058 - 0x004C)
class UBehavior_MissionCustomEvent : public UBehaviorBase
{
public:
	class UMissionDefinition*                          RelatedMission;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66324 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_MissionCustomEvent::pClassPointer = NULL;

// Class WillowGame.Behavior_NetworkRoleSwitch
// 0x0000 (0x004C - 0x004C)
class UBehavior_NetworkRoleSwitch : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66343 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_NetworkRoleSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_NotifyThoughtLockStatus
// 0x0008 (0x0054 - 0x004C)
class UBehavior_NotifyThoughtLockStatus : public UBehaviorBase
{
public:
	unsigned long                                      bClearThoughtlock : 1;                            		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class UObject*                                     InstigatingPlayer;                                		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66353 ];

		return pClassPointer;
	};

	void eventApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_NotifyThoughtLockStatus::pClassPointer = NULL;

// Class WillowGame.Behavior_ObjectClassSwitch
// 0x0008 (0x0054 - 0x004C)
class UBehavior_ObjectClassSwitch : public UBehaviorBase
{
public:
	struct FName                                       ObjectClassName;                                  		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66365 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ObjectClassSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_OpinionSwitch
// 0x0010 (0x005C - 0x004C)
class UBehavior_OpinionSwitch : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        Other;                                            		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66375 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_OpinionSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_OverrideWeaponCrosshair
// 0x000C (0x0058 - 0x004C)
class UBehavior_OverrideWeaponCrosshair : public UBehaviorBase
{
public:
	struct FString                                     CrosshairFrame;                                   		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66388 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_OverrideWeaponCrosshair::pClassPointer = NULL;

// Class WillowGame.Behavior_PackAttack
// 0x0000 (0x004C - 0x004C)
class UBehavior_PackAttack : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66399 ];

		return pClassPointer;
	};

};

UClass* UBehavior_PackAttack::pClassPointer = NULL;

// Class WillowGame.Behavior_PawnLeap
// 0x003C (0x0088 - 0x004C)
class UBehavior_PawnLeap : public UBehaviorBase
{
public:
	float                                              LeapSpeed;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeapAngle;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     OffsetLocation;                                   		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOffsetBasedOnRotation : 1;                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseTrace : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              TraceCheckRandomYaw;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceCheckPitch;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceCheckMaxDistance;                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TraceStartOffset;                                 		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetObject;                                     		// 0x007C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              RandomYawOnTarget;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWillowAnimDefinition*                       LeapAnimDef;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66401 ];

		return pClassPointer;
	};

	struct FVector FindLandingLocation ( class AWillowAIPawn* AIPawn );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PawnLeap::pClassPointer = NULL;

// Class WillowGame.Behavior_PhaseLockHold
// 0x0009 (0x0055 - 0x004C)
class UBehavior_PhaseLockHold : public UBehaviorBase
{
public:
	struct FName                                       Reason;                                           		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Action;                                           		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66435 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PhaseLockHold::pClassPointer = NULL;

// Class WillowGame.Behavior_PhysXLevel
// 0x0000 (0x004C - 0x004C)
class UBehavior_PhysXLevel : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66448 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PhysXLevel::pClassPointer = NULL;

// Class WillowGame.Behavior_PlayAIMissionContextDialog
// 0x0010 (0x005C - 0x004C)
class UBehavior_PlayAIMissionContextDialog : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        PlayerWhoUsedMe;                                  		// 0x004C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66457 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PlayAIMissionContextDialog::pClassPointer = NULL;

// Class WillowGame.Behavior_PlayAnimation
// 0x0008 (0x0054 - 0x004C)
class UBehavior_PlayAnimation : public UBehaviorBase
{
public:
	struct FName                                       AnimName;                                         		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66467 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PlayAnimation::pClassPointer = NULL;

// Class WillowGame.Behavior_PlayHardFlinch
// 0x0010 (0x005C - 0x004C)
class UBehavior_PlayHardFlinch : public UBehaviorBase
{
public:
	struct FVector                                     HitLocation;                                      		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 InstigatedBy;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66478 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PlayHardFlinch::pClassPointer = NULL;

// Class WillowGame.Behavior_PlayMultipleExplosionsSound
// 0x0020 (0x006C - 0x004C)
class UBehavior_PlayMultipleExplosionsSound : public UBehaviorBase
{
public:
	class UExplosionDefinition*                        Definition;                                       		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicate : 1;                                   		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        OverrideContext;                                  		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       OverrideName;                                     		// 0x0064 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66493 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PlayMultipleExplosionsSound::pClassPointer = NULL;

// Class WillowGame.Behavior_PostAkEventGetRTPC
// 0x000C (0x0068 - 0x005C)
class UBehavior_PostAkEventGetRTPC : public UBehavior_PostAkEvent
{
public:
	class UAkRtpc*                                     RTPC;                                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsRegistered : 1;                                		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              LastValue;                                        		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66506 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( float Result, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PostAkEventGetRTPC::pClassPointer = NULL;

// Class WillowGame.Behavior_PostProcessChain
// 0x0020 (0x006C - 0x004C)
class UBehavior_PostProcessChain : public UBehaviorBase
{
public:
	TArray< struct FMaterialEffectModifier >           MaterialEffectModifiers;                          		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      Action;                                           		// 0x0058 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPostProcessChain*                           Chain;                                            		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDOFEffectModifierData                      DOFEffectModifier;                                		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66522 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PostProcessChain::pClassPointer = NULL;

// Class WillowGame.Behavior_PostProcessChain_LostShield
// 0x0014 (0x0080 - 0x006C)
class UBehavior_PostProcessChain_LostShield : public UBehavior_PostProcessChain
{
public:
	struct FName                                       HealthParamName;                                  		// 0x006C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MaterialEffectName;                               		// 0x0074 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UpdateRate;                                       		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66539 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PostProcessChain_LostShield::pClassPointer = NULL;

// Class WillowGame.Behavior_PostProcessOverlay
// 0x010C (0x0158 - 0x004C)
class UBehavior_PostProcessOverlay : public UBehaviorBase
{
public:
	struct FPostProcessOverlay                         OverlayParameters;                                		// 0x004C (0x010C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66552 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PostProcessOverlay::pClassPointer = NULL;

// Class WillowGame.Behavior_PursueNodeType
// 0x0008 (0x0054 - 0x004C)
class UBehavior_PursueNodeType : public UBehaviorBase
{
public:
	struct FName                                       NodeType;                                         		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66563 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PursueNodeType::pClassPointer = NULL;

// Class WillowGame.IPursuitBehavior
// 0x0000 (0x003C - 0x003C)
class UIPursuitBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66567 ];

		return pClassPointer;
	};

	void Behavior_SetPreferredNodeType ( struct FName NodeType );
};

UClass* UIPursuitBehavior::pClassPointer = NULL;

// Class WillowGame.Behavior_QueryDayNightCycle
// 0x0000 (0x004C - 0x004C)
class UBehavior_QueryDayNightCycle : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66575 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_QueryDayNightCycle::pClassPointer = NULL;

// Class WillowGame.Behavior_QueuePersonalEcho
// 0x0008 (0x0054 - 0x004C)
class UBehavior_QueuePersonalEcho : public UBehaviorBase
{
public:
	class UWillowDialogEventTag*                       PersonalEchoTag;                                  		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UGearboxDialogGroup*                         DialogGroup;                                      		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66589 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_QueuePersonalEcho::pClassPointer = NULL;

// Class WillowGame.Behavior_RadarIcon
// 0x0008 (0x0054 - 0x004C)
class UBehavior_RadarIcon : public UBehaviorBase
{
public:
	unsigned char                                      IconType;                                         		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Action;                                           		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverrideDuration;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66600 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RadarIcon::pClassPointer = NULL;

// Class WillowGame.Behavior_ReCalculateResourcePoolValues
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ReCalculateResourcePoolValues : public UBehaviorBase
{
public:
	class UResourceDefinition*                         Resource;                                         		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66643 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ReCalculateResourcePoolValues::pClassPointer = NULL;

// Class WillowGame.Behavior_RefillResourcePool
// 0x0038 (0x0084 - 0x004C)
class UBehavior_RefillResourcePool : public UBehaviorBase
{
public:
	class UResourceDefinition*                         Resource;                                         		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                Percentage;                                       		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MaxPercentage;                                    		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCreatePoolIfNecessary : 1;                       		// 0x0070 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        PercentageContext;                                		// 0x0074 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66655 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RefillResourcePool::pClassPointer = NULL;

// Class WillowGame.Behavior_RefillWeapon
// 0x0000 (0x004C - 0x004C)
class UBehavior_RefillWeapon : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66671 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RefillWeapon::pClassPointer = NULL;

// Class WillowGame.Behavior_RegisterFastTravelDefinition
// 0x0008 (0x0054 - 0x004C)
class UBehavior_RegisterFastTravelDefinition : public UBehaviorBase
{
public:
	class UFastTravelStationDefinition*                StationToRegister;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetAsLastVisited : 1;                            		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66680 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RegisterFastTravelDefinition::pClassPointer = NULL;

// Class WillowGame.Behavior_RegisterTargetable
// 0x0004 (0x0050 - 0x004C)
class UBehavior_RegisterTargetable : public UBehaviorBase
{
public:
	unsigned long                                      bUnregister : 1;                                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66691 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RegisterTargetable::pClassPointer = NULL;

// Class WillowGame.Behavior_ReloadComplete
// 0x0000 (0x004C - 0x004C)
class UBehavior_ReloadComplete : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66702 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ReloadComplete::pClassPointer = NULL;

// Class WillowGame.Behavior_RemoveInstanceData
// 0x000C (0x0058 - 0x004C)
class UBehavior_RemoveInstanceData : public UBehaviorBase
{
public:
	TArray< struct FRemoveObject >                     InstanceData;                                     		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66723 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RemoveInstanceData::pClassPointer = NULL;

// Class WillowGame.Behavior_RemoveInventoryFromStorage
// 0x008A (0x00D6 - 0x004C)
class UBehavior_RemoveInventoryFromStorage : public UBehaviorBase
{
public:
	struct FItemDefinitionData                         ItemDef;                                          		// 0x004C (0x0044) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FWeaponDefinitionData                       WeaponDef;                                        		// 0x0090 (0x0044) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      InvType;                                          		// 0x00D4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Source;                                           		// 0x00D5 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66738 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RemoveInventoryFromStorage::pClassPointer = NULL;

// Class WillowGame.Behavior_ResetActionSkillCooldown
// 0x0000 (0x004C - 0x004C)
class UBehavior_ResetActionSkillCooldown : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66752 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ResetActionSkillCooldown::pClassPointer = NULL;

// Class WillowGame.Behavior_ResetHitRegionHealth
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ResetHitRegionHealth : public UBehaviorBase
{
public:
	class UBodyHitRegionDefinition*                    HitRegion;                                        		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66761 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ResetHitRegionHealth::pClassPointer = NULL;

// Class WillowGame.Behavior_ReviveInjuredPlayer
// 0x0010 (0x005C - 0x004C)
class UBehavior_ReviveInjuredPlayer : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ReviverContext;                                   		// 0x004C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66772 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ReviveInjuredPlayer::pClassPointer = NULL;

// Class WillowGame.Behavior_RotatePawn
// 0x0028 (0x0074 - 0x004C)
class UBehavior_RotatePawn : public UBehaviorBase
{
public:
	struct FRelativeDirectionData                      RotateDirection;                                  		// 0x004C (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bYawOnly : 1;                                     		// 0x006C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              Time;                                             		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66784 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RotatePawn::pClassPointer = NULL;

// Class WillowGame.Behavior_RuleEvent
// 0x0000 (0x004C - 0x004C)
class UBehavior_RuleEvent : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66799 ];

		return pClassPointer;
	};

};

UClass* UBehavior_RuleEvent::pClassPointer = NULL;

// Class WillowGame.Behavior_RunBehaviorAlias
// 0x0034 (0x0080 - 0x004C)
class UBehavior_RunBehaviorAlias : public UBehaviorBase
{
public:
	class UBehaviorAliasDefinition*                    BehaviorAlias;                                    		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        AliasSelfContext;                                 		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        AliasMyInstigatorContext;                         		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        AliasOtherEventParticipantContext;                		// 0x0070 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66801 ];

		return pClassPointer;
	};

};

UClass* UBehavior_RunBehaviorAlias::pClassPointer = NULL;

// Class WillowGame.BehaviorAliasDefinition
// 0x000C (0x0048 - 0x003C)
class UBehaviorAliasDefinition : public UGBXDefinition
{
public:
	TArray< class UBehaviorBase* >                     FallbackBehaviors;                                		// 0x003C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66806 ];

		return pClassPointer;
	};

};

UClass* UBehaviorAliasDefinition::pClassPointer = NULL;

// Class WillowGame.Behavior_SelectPhaselockTarget
// 0x0010 (0x005C - 0x004C)
class UBehavior_SelectPhaselockTarget : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        LifterSkillContext;                               		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66824 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SelectPhaselockTarget::pClassPointer = NULL;

// Class WillowGame.Behavior_SendMessageToPlayers
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SendMessageToPlayers : public UBehaviorBase
{
public:
	unsigned long                                      bShouldSendToInstigator : 1;                      		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UClass*                                      SendMsgClass;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66835 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SendMessageToPlayers::pClassPointer = NULL;

// Class WillowGame.Behavior_SetAIFlag
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetAIFlag : public UBehaviorBase
{
public:
	class UFlagDefinition*                             FlagDef;                                          		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      FlagValue : 1;                                    		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66847 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetAIFlag::pClassPointer = NULL;

// Class WillowGame.Behavior_SetAkRTPCValue
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetAkRTPCValue : public UBehaviorBase
{
public:
	class UAkRtpc*                                     RTPC;                                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Value;                                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66858 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetAkRTPCValue::pClassPointer = NULL;

// Class WillowGame.Behavior_SetAlternateVertexWeight
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetAlternateVertexWeight : public UBehaviorBase
{
public:
	struct FName                                       BoneName;                                         		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66869 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetAlternateVertexWeight::pClassPointer = NULL;

// Class WillowGame.Behavior_SetAnemoneInfectionState
// 0x000C (0x0058 - 0x004C)
class UBehavior_SetAnemoneInfectionState : public UBehaviorBase
{
public:
	unsigned long                                      bIsInfected : 1;                                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsLargeZone : 1;                                 		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AHeightFog*                                  HeightFog;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnemoneInfectionDefinition*                 InfectionDefinition;                              		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66880 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetAnemoneInfectionState::pClassPointer = NULL;

// Class WillowGame.Behavior_SetAnimSwitchNode
// 0x0010 (0x005C - 0x004C)
class UBehavior_SetAnimSwitchNode : public UBehaviorBase
{
public:
	struct FName                                       AnimNodeName;                                     		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       Switch;                                           		// 0x0054 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66894 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetAnimSwitchNode::pClassPointer = NULL;

// Class WillowGame.Behavior_SetAnimTree
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetAnimTree : public UBehaviorBase
{
public:
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66908 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetAnimTree::pClassPointer = NULL;

// Class WillowGame.Behavior_SetBeingHealed
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetBeingHealed : public UBehaviorBase
{
public:
	unsigned long                                      bBeingHealed : 1;                                 		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66919 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetBeingHealed::pClassPointer = NULL;

// Class WillowGame.Behavior_SetChallengeCompleted
// 0x000C (0x0058 - 0x004C)
class UBehavior_SetChallengeCompleted : public UBehaviorBase
{
public:
	class UObject*                                     UnlockForPlayer;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UChallengeDefinition*                        ChallengeDef;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForAllPlayers : 1;                               		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66930 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetChallengeCompleted::pClassPointer = NULL;

// Class WillowGame.Behavior_SetCleanupParameters
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetCleanupParameters : public UBehaviorBase
{
public:
	float                                              MaxLifetime;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66943 ];

		return pClassPointer;
	};

	void eventApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetCleanupParameters::pClassPointer = NULL;

// Class WillowGame.Behavior_SetCompassIcon
// 0x0001 (0x004D - 0x004C)
class UBehavior_SetCompassIcon : public UBehaviorBase
{
public:
	unsigned char                                      CompassIcon;                                      		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66954 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetCompassIcon::pClassPointer = NULL;

// Class WillowGame.Behavior_SetDeathDefinition
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetDeathDefinition : public UBehaviorBase
{
public:
	class UBodyClassDeathDefinition*                   NewDeathDefinition;                               		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66964 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetDeathDefinition::pClassPointer = NULL;

// Class WillowGame.Behavior_SetDemigodMode
// 0x0001 (0x004D - 0x004C)
class UBehavior_SetDemigodMode : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                           		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66975 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetDemigodMode::pClassPointer = NULL;

// Class WillowGame.Behavior_SetDiscardRootMotion
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetDiscardRootMotion : public UBehaviorBase
{
public:
	unsigned long                                      bDiscardRootMotion : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66988 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetDiscardRootMotion::pClassPointer = NULL;

// Class WillowGame.Behavior_SetDualWieldBlendState
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetDualWieldBlendState : public UBehaviorBase
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyToFirstPerson : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyToThirdPerson : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66999 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetDualWieldBlendState::pClassPointer = NULL;

// Class WillowGame.Behavior_SetElevatorButtonGlowing
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetElevatorButtonGlowing : public UBehaviorBase
{
public:
	unsigned long                                      bEnableGlow : 1;                                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67012 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetElevatorButtonGlowing::pClassPointer = NULL;

// Class WillowGame.Behavior_SetExtraImpactEffect
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetExtraImpactEffect : public UBehaviorBase
{
public:
	unsigned char                                      BulletFromClip;                                   		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UWillowImpactDefinition*                     ImpactDefinition;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67023 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetExtraImpactEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_SetExtraMuzzleEffect
// 0x000C (0x0058 - 0x004C)
class UBehavior_SetExtraMuzzleEffect : public UBehaviorBase
{
public:
	unsigned char                                      BulletFromClip;                                   		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FExtraMuzzleEffect                          Effect;                                           		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67035 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetExtraMuzzleEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_SetGodMode
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetGodMode : public UBehaviorBase
{
public:
	unsigned long                                      bNonCheatGodMode : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67046 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetGodMode::pClassPointer = NULL;

// Class WillowGame.Behavior_SetHardAttach
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetHardAttach : public UBehaviorBase
{
public:
	unsigned long                                      bHardAttach : 1;                                  		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67057 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetHardAttach::pClassPointer = NULL;

// Class WillowGame.Behavior_SetInfoBarVisibility
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetInfoBarVisibility : public UBehaviorBase
{
public:
	unsigned long                                      bVisible : 1;                                     		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67068 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetInfoBarVisibility::pClassPointer = NULL;

// Class WillowGame.Behavior_SetJackVoiceModulatorState
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetJackVoiceModulatorState : public UBehaviorBase
{
public:
	unsigned long                                      bEnable : 1;                                      		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67079 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetJackVoiceModulatorState::pClassPointer = NULL;

// Class WillowGame.Behavior_SetLookAtSpeed
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetLookAtSpeed : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverrideSpeed;                                    		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67089 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetLookAtSpeed::pClassPointer = NULL;

// Class WillowGame.Behavior_SetMaterialScalarFade
// 0x0038 (0x0084 - 0x004C)
class UBehavior_SetMaterialScalarFade : public UBehaviorBase
{
public:
	struct FName                                       ScalarName;                                       		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                StartValue;                                       		// 0x0054 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                EndValue;                                         		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                FadeTime;                                         		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67102 ];

		return pClassPointer;
	};

	void StartFade ( class UIMaterialFadeBehavior* ContextInterface, float CalcStartValue, float CalcEndValue, float CalcFadeTime );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetMaterialScalarFade::pClassPointer = NULL;

// Class WillowGame.Behavior_SetMaterialScalarFadeForGoreDeath
// 0x0004 (0x0088 - 0x0084)
class UBehavior_SetMaterialScalarFadeForGoreDeath : public UBehavior_SetMaterialScalarFade
{
public:
	unsigned long                                      bDestroyActorAfterGoreEffect : 1;                 		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67121 ];

		return pClassPointer;
	};

	void StartFade ( class UIMaterialFadeBehavior* ContextInterface, float CalcStartValue, float CalcEndValue, float CalcFadeTime );
};

UClass* UBehavior_SetMaterialScalarFadeForGoreDeath::pClassPointer = NULL;

// Class WillowGame.Behavior_SetMorphNodeWeight
// 0x0010 (0x005C - 0x004C)
class UBehavior_SetMorphNodeWeight : public UBehaviorBase
{
public:
	struct FName                                       MorphNodeName;                                    		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeightTarget;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeightBlendTime;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67129 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetMorphNodeWeight::pClassPointer = NULL;

// Class WillowGame.Behavior_SetNumBankSlots
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetNumBankSlots : public UBehaviorBase
{
public:
	int                                                NewBankSlotCount;                                 		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67142 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetNumBankSlots::pClassPointer = NULL;

// Class WillowGame.Behavior_SetPawnThrottleData
// 0x001C (0x0068 - 0x004C)
class UBehavior_SetPawnThrottleData : public UBehaviorBase
{
public:
	float                                              FullThrottleDistance;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FullThrottleTime;                                 		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinThrottleDistance;                              		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxThrottleDistance;                              		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinThrottleTime;                                  		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxThrottleTime;                                  		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipWhileIdle : 1;                               		// 0x0064 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67154 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetPawnThrottleData::pClassPointer = NULL;

// Class WillowGame.Behavior_SetRuleSet
// 0x0000 (0x004C - 0x004C)
class UBehavior_SetRuleSet : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67177 ];

		return pClassPointer;
	};

};

UClass* UBehavior_SetRuleSet::pClassPointer = NULL;

// Class WillowGame.Behavior_SetRuleSetByName
// 0x0000 (0x004C - 0x004C)
class UBehavior_SetRuleSetByName : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67179 ];

		return pClassPointer;
	};

};

UClass* UBehavior_SetRuleSetByName::pClassPointer = NULL;

// Class WillowGame.Behavior_SetShieldColor
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetShieldColor : public UBehaviorBase
{
public:
	unsigned long                                      bResetShieldToDefaultColor : 1;                   		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FColor                                      NewShieldColor;                                   		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67181 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetShieldColor::pClassPointer = NULL;

// Class WillowGame.Behavior_SetSkelControlLookAtActor
// 0x0024 (0x0070 - 0x004C)
class UBehavior_SetSkelControlLookAtActor : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        TargetContext;                                    		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Offset;                                           		// 0x0064 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67208 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetSkelControlLookAtActor::pClassPointer = NULL;

// Class WillowGame.Behavior_SetSkelControlSingleBoneData
// 0x0020 (0x006C - 0x004C)
class UBehavior_SetSkelControlSingleBoneData : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     BoneTranslation;                                  		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    BoneRotation;                                     		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67221 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetSkelControlSingleBoneData::pClassPointer = NULL;

// Class WillowGame.Behavior_SetSkelControlTurretConstrainedValues
// 0x0030 (0x007C - 0x004C)
class UBehavior_SetSkelControlTurretConstrainedValues : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bConstrainPitch : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bConstrainYaw : 1;                                		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConstrainRoll : 1;                               		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInvertPitch : 1;                                 		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvertYaw : 1;                                   		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bInvertRoll : 1;                                  		// 0x0054 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	struct FTurretConstraintData                       MaxAngle;                                         		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FTurretConstraintData                       MinAngle;                                         		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecondYaw;                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecondPitch;                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecondRoll;                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67260 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetSkelControlTurretConstrainedValues::pClassPointer = NULL;

// Class WillowGame.Behavior_SetSkillDefinitionForInjuredStrings
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetSkillDefinitionForInjuredStrings : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillDef;                                         		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67282 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetSkillDefinitionForInjuredStrings::pClassPointer = NULL;

// Class WillowGame.Behavior_SetStance
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetStance : public UBehaviorBase
{
public:
	unsigned char                                      SetType;                                          		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UStanceTypeDefinition*                       StanceType;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67293 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetStance::pClassPointer = NULL;

// Class WillowGame.Behavior_SetTimeOfDay
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetTimeOfDay : public UBehaviorBase
{
public:
	float                                              TimeOfDay;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67306 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetTimeOfDay::pClassPointer = NULL;

// Class WillowGame.Behavior_SetUsabilityByMissionDirectives
// 0x0001 (0x004D - 0x004C)
class UBehavior_SetUsabilityByMissionDirectives : public UBehaviorBase
{
public:
	unsigned char                                      ChangeUsability;                                  		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67316 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetUsabilityByMissionDirectives::pClassPointer = NULL;

// Class WillowGame.Behavior_SetUsabilityCost
// 0x0008 (0x0054 - 0x004C)
class UBehavior_SetUsabilityCost : public UBehaviorBase
{
public:
	unsigned char                                      ChangeCost;                                       		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CostCurrencyType;                                 		// 0x004D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UsabilityType;                                    		// 0x004E (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                CostAmount;                                       		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67326 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetUsabilityCost::pClassPointer = NULL;

// Class WillowGame.Behavior_SetUsableIcon
// 0x0005 (0x0051 - 0x004C)
class UBehavior_SetUsableIcon : public UBehaviorBase
{
public:
	class UInteractionIconDefinition*                  Icon;                                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsabilityType;                                    		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67341 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetUsableIcon::pClassPointer = NULL;

// Class WillowGame.Behavior_SetVehicleSimObject
// 0x0004 (0x0050 - 0x004C)
class UBehavior_SetVehicleSimObject : public UBehaviorBase
{
public:
	class USVehicleSimBase*                            SimObjTemplate;                                   		// 0x004C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67354 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetVehicleSimObject::pClassPointer = NULL;

// Class WillowGame.Behavior_ShowGenericReviveMessage
// 0x0014 (0x0060 - 0x004C)
class UBehavior_ShowGenericReviveMessage : public UBehaviorBase
{
public:
	class UGenericReviveMessageDefinition*             ReviveMessageDef;                                 		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        OtherPlayer;                                      		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67364 ];

		return pClassPointer;
	};

	class AWillowPlayerController* ResolveController ( class UObject* Obj );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ShowGenericReviveMessage::pClassPointer = NULL;

// Class WillowGame.Behavior_ShowMissionInterface
// 0x0000 (0x004C - 0x004C)
class UBehavior_ShowMissionInterface : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67378 ];

		return pClassPointer;
	};

	class AWillowPlayerController* ResolveController ( class UObject* Obj );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ShowMissionInterface::pClassPointer = NULL;

// Class WillowGame.Behavior_ShowPullThePinNotification
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ShowPullThePinNotification : public UBehaviorBase
{
public:
	class USwfMovie*                                   ExternalClip;                                     		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67390 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	class AWillowPlayerController* ResolveController ( class UObject* Obj );
};

UClass* UBehavior_ShowPullThePinNotification::pClassPointer = NULL;

// Class WillowGame.Behavior_ShowSelfAsTarget
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ShowSelfAsTarget : public UBehaviorBase
{
public:
	unsigned long                                      ControllersOnly : 1;                              		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67403 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ShowSelfAsTarget::pClassPointer = NULL;

// Class WillowGame.Behavior_SimpleAnimPlay
// 0x000C (0x0058 - 0x004C)
class UBehavior_SimpleAnimPlay : public UBehaviorBase
{
public:
	class UWillowAnimTree*                             Tree;                                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName;                                         		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67414 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SimpleAnimPlay::pClassPointer = NULL;

// Class WillowGame.Behavior_SimpleAnimStop
// 0x000C (0x0058 - 0x004C)
class UBehavior_SimpleAnimStop : public UBehaviorBase
{
public:
	class UWillowAnimTree*                             Tree;                                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName;                                         		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67428 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SimpleAnimStop::pClassPointer = NULL;

// Class WillowGame.Behavior_SkillCustomEvent
// 0x000C (0x0058 - 0x004C)
class UBehavior_SkillCustomEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                        		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            SkillDef;                                         		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67440 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SkillCustomEvent::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnActor
// 0x0041 (0x008D - 0x004C)
class UBehavior_SpawnActor : public UBehaviorBase
{
public:
	unsigned long                                      bSaveReference : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDeleteByOwner : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAttachToContext : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0058 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      ActorTemplate;                                    		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AttachmentPointName;                              		// 0x006C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x0074 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    RelativeRotation;                                 		// 0x0080 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SpawnDirection;                                   		// 0x008C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67453 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnActor::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnDecal
// 0x0030 (0x007C - 0x004C)
class UBehavior_SpawnDecal : public UBehaviorBase
{
public:
	class UDecalMaterial*                              Material;                                         		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BoneName;                                         		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AlignToAxis;                                      		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Size;                                             		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    SpawnRotation;                                    		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     SpawnLocation;                                    		// 0x006C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Thickness;                                        		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67482 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnDecal::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnFromVehicleSpawnStation
// 0x0000 (0x004C - 0x004C)
class UBehavior_SpawnFromVehicleSpawnStation : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67570 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnFromVehicleSpawnStation::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnItems
// 0x006C (0x00B8 - 0x004C)
class UBehavior_SpawnItems : public UBehaviorBase
{
public:
	struct FVector                                     ItemDropOffset;                                   		// 0x004C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ItemDropVelocity;                                 		// 0x0058 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ItemScatterOffset;                                		// 0x0064 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ExpLevel;                                         		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InstanceDataName;                                 		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisablePickups : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCircularScatter : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTorque : 1;                                      		// 0x007C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bSavePickup : 1;                                  		// 0x007C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	TArray< struct FItemPoolInfo >                     ItemPoolList;                                     		// 0x0080 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UItemPoolListDefinition* >           ItemPoolIncludedLists;                            		// 0x008C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             AttachmentPointNames;                             		// 0x0098 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     Torque;                                           		// 0x00A4 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ItemSpawnSocket;                                  		// 0x00B0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67579 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnItems::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnLoot
// 0x001C (0x0068 - 0x004C)
class UBehavior_SpawnLoot : public UBehaviorBase
{
public:
	TArray< class UItemPoolDefinition* >               ItemPools;                                        		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIncludeLootFromLootableContext : 1;              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTorque : 1;                                      		// 0x0058 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	struct FVector                                     Torque;                                           		// 0x005C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67626 ];

		return pClassPointer;
	};

	bool GetOrientationFromContextObject ( class UObject* ContextObject, struct FRotator* Orientation );
	bool GetLocationFromContextObject ( class UObject* ContextObject, struct FVector* Location );
	void PlaceSpawnedItems ( TArray< struct FSpawnedDroppedLootData > SpawnedLoot, class UObject* ContextObject );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnLoot::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnLootAroundPoint
// 0x002D (0x0095 - 0x0068)
class UBehavior_SpawnLootAroundPoint : public UBehavior_SpawnLoot
{
public:
	struct FAttachmentLocationData                     CustomLocation;                                   		// 0x0068 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CircularScatterRadius;                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpawnVelocity;                                    		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnVelocityRelativeTo;                          		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67660 ];

		return pClassPointer;
	};

	bool ScatterItem ( struct FVector CenterPoint, struct FRotator CustomLocationOrientation, struct FRotator ContextActorOrientation, struct FSpawnedDroppedLootData* Loot );
	void PlaceSpawnedItems ( TArray< struct FSpawnedDroppedLootData > SpawnedLoot, class UObject* ContextObject );
};

UClass* UBehavior_SpawnLootAroundPoint::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnLootAtPoints
// 0x0024 (0x008C - 0x0068)
class UBehavior_SpawnLootAtPoints : public UBehavior_SpawnLoot
{
public:
	TArray< struct FAttachmentLocationData >           SpawnPoints;                                      		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bAttachToSpawnPoints : 1;                         		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisablePickups : 1;                              		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     SpawnVelocity;                                    		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnVelocityRelativeTo;                          		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                NextSpawnPointIndex;                              		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67684 ];

		return pClassPointer;
	};

	int GetNextSpawnPointIndex ( );
	bool DropItemFromSpawnPoint ( class UObject* ContextObject, struct FSpawnedDroppedLootData* Loot );
	bool AttachItemToSpawnPoint ( struct FSpawnedDroppedLootData* Loot );
	void PlaceSpawnedItems ( TArray< struct FSpawnedDroppedLootData > SpawnedLoot, class UObject* ContextObject );
};

UClass* UBehavior_SpawnLootAtPoints::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnParticleSystemAtWorldLocation
// 0x003C (0x0088 - 0x004C)
class UBehavior_SpawnParticleSystemAtWorldLocation : public UBehaviorBase
{
public:
	unsigned long                                      bSaveParticleReference : 1;                       		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseClientPrediction : 1;                         		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDeleteByOwner : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateEmitter : 1;                            		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHideEffectFromOwner : 1;                         		// 0x004C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             ParticleEffect;                                   		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Location;                                         		// 0x006C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Direction;                                        		// 0x0078 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DrawScale;                                        		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67752 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class AEmitter* SpawnedEmitter, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	class UClass* GetEmitterClass ( );
};

UClass* UBehavior_SpawnParticleSystemAtWorldLocation::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnPerch
// 0x0018 (0x0064 - 0x004C)
class UBehavior_SpawnPerch : public UBehaviorBase
{
public:
	struct FName                                       AttachPoint;                                      		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPerchDefinition*                            PerchDef;                                         		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PerchLifetime;                                    		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UseRadius;                                        		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UseHeight;                                        		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67780 ];

		return pClassPointer;
	};

	void PublishBehaviorOutput ( class AActor* SpawnedPerch, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnPerch::pClassPointer = NULL;

// Class WillowGame.Perch_Dynamic
// 0x0000 (0x0254 - 0x0254)
class APerch_Dynamic : public APerch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67795 ];

		return pClassPointer;
	};

};

UClass* APerch_Dynamic::pClassPointer = NULL;

// Class WillowGame.WillowLocalOnlyProjectile
// 0x0000 (0x04A0 - 0x04A0)
class AWillowLocalOnlyProjectile : public AWillowProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67856 ];

		return pClassPointer;
	};

};

UClass* AWillowLocalOnlyProjectile::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnProjectileFromImpact
// 0x004C (0x0098 - 0x004C)
class UBehavior_SpawnProjectileFromImpact : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        OwnerContext;                                     		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetOwnerFromOwnerContext : 1;                    		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSaveProjectileReference : 1;                     		// 0x005C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetLikenessFromContext : 1;                      		// 0x005C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x0070 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UProjectileDefinition*                       ProjectileDefinition;                             		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct UBehavior_SpawnProjectileFromImpact_FProjectileBehaviorSequenceStateData > SetProjectileSequenceState;                       		// 0x007C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FBehaviorContextData                        GearLikenessContext;                              		// 0x0088 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67917 ];

		return pClassPointer;
	};

	void AttachProjectileToBase ( class AWillowProjectile* SpawnedProjectile, class UIWorldBody* WorldBodyInterface, struct FImpactInfo* ImpactData );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnProjectileFromImpact::pClassPointer = NULL;

// Class WillowGame.Behavior_SpawnTemporalField
// 0x003C (0x0088 - 0x004C)
class UBehavior_SpawnTemporalField : public UBehaviorBase
{
public:
	class ATemporalField*                              TemporalField;                                    		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LifeSpan;                                         		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        LocationContext;                                  		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AttachmentPointName;                              		// 0x0064 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAttachToContext : 1;                             		// 0x006C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x0070 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    RelativeRotation;                                 		// 0x007C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67953 ];

		return pClassPointer;
	};

	struct FVector GetAttachmentLocation ( class UIWorldBody* WorldBodyInterface );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SpawnTemporalField::pClassPointer = NULL;

// Class WillowGame.Behavior_StartDeathRagdoll
// 0x0004 (0x0050 - 0x004C)
class UBehavior_StartDeathRagdoll : public UBehaviorBase
{
public:
	unsigned long                                      bAnimationDriven : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableContactNotification : 1;                   		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67977 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_StartDeathRagdoll::pClassPointer = NULL;

// Class WillowGame.Behavior_StatusEffectSwitch
// 0x0001 (0x004D - 0x004C)
class UBehavior_StatusEffectSwitch : public UBehaviorBase
{
public:
	unsigned char                                      StatusEffectType;                                 		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67995 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_StatusEffectSwitch::pClassPointer = NULL;

// Class WillowGame.Behavior_StopMeleeAttack
// 0x0000 (0x004C - 0x004C)
class UBehavior_StopMeleeAttack : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68011 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_StopMeleeAttack::pClassPointer = NULL;

// Class WillowGame.Behavior_ToggleNPCAlly
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ToggleNPCAlly : public UBehaviorBase
{
public:
	unsigned long                                      bEnable : 1;                                      		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68036 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ToggleNPCAlly::pClassPointer = NULL;

// Class WillowGame.Behavior_ToggleObstacle
// 0x0001 (0x004D - 0x004C)
class UBehavior_ToggleObstacle : public UBehaviorBase
{
public:
	unsigned char                                      Option;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68046 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ToggleObstacle::pClassPointer = NULL;

// Class WillowGame.Behavior_ToggleTelescopeOverlay
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ToggleTelescopeOverlay : public UBehaviorBase
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68062 ];

		return pClassPointer;
	};

	class AWillowPlayerController* ResolveController ( class UObject* Obj );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ToggleTelescopeOverlay::pClassPointer = NULL;

// Class WillowGame.Behavior_Transform
// 0x0001 (0x004D - 0x004C)
class UBehavior_Transform : public UBehaviorBase
{
public:
	unsigned char                                      Transform;                                        		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68075 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Transform::pClassPointer = NULL;

// Class WillowGame.Behavior_UnlockAvatarAward
// 0x0001 (0x004D - 0x004C)
class UBehavior_UnlockAvatarAward : public UBehaviorBase
{
public:
	unsigned char                                      AvatarAward;                                      		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68087 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UnlockAvatarAward::pClassPointer = NULL;

// Class WillowGame.Behavior_UnlockAvatarAwardForAllPlayers
// 0x0001 (0x004D - 0x004C)
class UBehavior_UnlockAvatarAwardForAllPlayers : public UBehaviorBase
{
public:
	unsigned char                                      AvatarAward;                                      		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68098 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UnlockAvatarAwardForAllPlayers::pClassPointer = NULL;

// Class WillowGame.Behavior_UnlockCustomization
// 0x0008 (0x0054 - 0x004C)
class UBehavior_UnlockCustomization : public UBehaviorBase
{
public:
	class UCustomizationDefinition*                    DefinitionToUnlock;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockBehavior : 1;                                		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68108 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UnlockCustomization::pClassPointer = NULL;

// Class WillowGame.Behavior_UnlockCustomizationFromRewardPool
// 0x0004 (0x0050 - 0x004C)
class UBehavior_UnlockCustomizationFromRewardPool : public UBehaviorBase
{
public:
	class UKeyedItemPoolDefinition*                    RewardItemPool;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68120 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UnlockCustomizationFromRewardPool::pClassPointer = NULL;

// Class WillowGame.Behavior_UpgradeSkill
// 0x0024 (0x0070 - 0x004C)
class UBehavior_UpgradeSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToUpgrade;                                   		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                NumberOfLevelsToRaise;                            		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MaximumLevelToRaiseSkill;                         		// 0x0060 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68156 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UpgradeSkill::pClassPointer = NULL;

// Class WillowGame.Behavior_UseObject
// 0x0008 (0x0054 - 0x004C)
class UBehavior_UseObject : public UBehaviorBase
{
public:
	unsigned char                                      UseType;                                          		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UObject*                                     User;                                             		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68169 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_UseObject::pClassPointer = NULL;

// Class WillowGame.Behavior_VoGScreenParticle
// 0x0008 (0x00C8 - 0x00C0)
class UBehavior_VoGScreenParticle : public UBehavior_ScreenParticle
{
public:
	struct FName                                       TextureMovieParamName;                            		// 0x00C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68213 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_VoGScreenParticle::pClassPointer = NULL;

// Class WillowGame.Behavior_WeaponBoneControl
// 0x0009 (0x0055 - 0x004C)
class UBehavior_WeaponBoneControl : public UBehaviorBase
{
public:
	struct FName                                       BoneControlName;                                  		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeaponEventType;                                  		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68224 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_WeaponBoneControl::pClassPointer = NULL;

// Class WillowGame.Behavior_WeaponGlowEffect
// 0x0008 (0x0054 - 0x004C)
class UBehavior_WeaponGlowEffect : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWeaponGlowEffectDefinition*                 Effect;                                           		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68236 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_WeaponGlowEffect::pClassPointer = NULL;

// Class WillowGame.Behavior_WeaponsRestriction
// 0x0004 (0x0050 - 0x004C)
class UBehavior_WeaponsRestriction : public UBehaviorBase
{
public:
	unsigned long                                      bRestrictionOn : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowOnPlayers : 1;                              		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLilacHACKOverride : 1;                           		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68248 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_WeaponsRestriction::pClassPointer = NULL;

// Class WillowGame.Behavior_WeaponThrow
// 0x0000 (0x004C - 0x004C)
class UBehavior_WeaponThrow : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68260 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_WeaponThrow::pClassPointer = NULL;

// Class WillowGame.Behavior_WeaponVisibleAmmoState
// 0x0001 (0x004D - 0x004C)
class UBehavior_WeaponVisibleAmmoState : public UBehaviorBase
{
public:
	unsigned char                                      State;                                            		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68270 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_WeaponVisibleAmmoState::pClassPointer = NULL;

// Class WillowGame.SpecialMove_WeaponAction
// 0x0004 (0x00CC - 0x00C8)
class USpecialMove_WeaponAction : public UWillowAnimDefinition
{
public:
	unsigned long                                      bBlocksWeaponActions : 1;                         		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68641 ];

		return pClassPointer;
	};

	float eventClientStarted ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
};

UClass* USpecialMove_WeaponAction::pClassPointer = NULL;

// Class WillowGame.SpecialMove_FirstAndThirdPersonAnimation
// 0x0004 (0x00D0 - 0x00CC)
class USpecialMove_FirstAndThirdPersonAnimation : public USpecialMove_WeaponAction
{
public:
	class USpecialMove_FirstPerson*                    FirstPersonSM;                                    		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68640 ];

		return pClassPointer;
	};

	float eventClientStarted ( class USpecialMoveInterface* SMI, struct FSpecialMoveData* SMData );
};

UClass* USpecialMove_FirstAndThirdPersonAnimation::pClassPointer = NULL;

// Class WillowGame.BuzzaxeWeaponTypeDefinition
// 0x0000 (0x0680 - 0x0680)
class UBuzzaxeWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68975 ];

		return pClassPointer;
	};

};

UClass* UBuzzaxeWeaponTypeDefinition::pClassPointer = NULL;

// Class WillowGame.ChallengesPanelDefinition
// 0x0000 (0x003C - 0x003C)
class UChallengesPanelDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69116 ];

		return pClassPointer;
	};

};

UClass* UChallengesPanelDefinition::pClassPointer = NULL;

// Class WillowGame.CharacterCustomizationInfoCardGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterCustomizationInfoCardGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69256 ];

		return pClassPointer;
	};

	void SetAutoSizeTextOnFields ( );
	void TryFocusList ( );
	void PopulateScrollingList ( TArray< struct FString > ListItems, int EquippedItemIndex );
	void SetRespecInfo ( struct FString Description, struct FString BranchDescription1, struct FString BranchDescription2, struct FString BranchDescription3, int CurrentCredits );
	void SetNameInfo ( struct FString NameInfo );
	void Hide ( );
	void DisplaySkinCard ( );
	void DisplayHeadCard ( );
	void DisplayRespecCard ( );
	void DisplayNameCard ( );
};

UClass* UCharacterCustomizationInfoCardGFxObject::pClassPointer = NULL;

// Class WillowGame.CharacterCustomizationMenuGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterCustomizationMenuGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69277 ];

		return pClassPointer;
	};

	struct FString GetEntryLabel ( int Index );
	void SetSelectedEntry ( int Index );
	int GetSelectedEntry ( );
	void FocusPreviousEntry ( );
	void FocusNextEntry ( );
	void FocusBestEntry ( );
	void ConfigureMenuEntry ( int Index, unsigned long bDisabled, struct FString Label );
	void InitMenuEntry ( int Index, unsigned long bVisible, unsigned long bDisabled, unsigned long bIsInputEntry, int MaxInputLength, struct FString Caption, struct FString Label, struct FString IconFrame );
};

UClass* UCharacterCustomizationMenuGFxObject::pClassPointer = NULL;

// Class WillowGame.CharacterSelectCameraActor
// 0x0000 (0x0288 - 0x0288)
class ACharacterSelectCameraActor : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69302 ];

		return pClassPointer;
	};

};

UClass* ACharacterSelectCameraActor::pClassPointer = NULL;

// Class WillowGame.CharacterSelectionCustomizationListGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterSelectionCustomizationListGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69304 ];

		return pClassPointer;
	};

	void ScrollDown ( );
	void ScrollUp ( );
	void PopulateScrollingList ( TArray< struct FString > ListItems, int EquippedItemIndex );
	int GetSelectedIndex ( );
};

UClass* UCharacterSelectionCustomizationListGFxObject::pClassPointer = NULL;

// Class WillowGame.CharacterSelectionGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterSelectionGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69314 ];

		return pClassPointer;
	};

	void FadeIn ( float FadeTimeInSeconds );
	void BeginClose ( float FadeTimeInSeconds );
	void ConfigureForPause ( unsigned long bPaused );
	void SetTooltips ( struct FString Tooltips );
	int GetCharacterGridIndexInDirection ( int PlayerIndex, int CharacterGridDirection );
	void SetMessageInfo ( struct FString MessageInfo );
	void SetTimerInfo ( struct FString TimerInfo, int TimeInSeconds );
	void SetSelectionIndicator ( int PlayerIndex, unsigned long bFocused, int CharacterIndex );
	void SetPartySelection ( int PartyMemberIndex, struct FString Gamertag, unsigned long bHasConfirmedCharacter, struct FString ClassIconMovieName, int CharacterLevel );
	void ClearPartySelections ( );
	void SetState ( int PlayerIndex, int NewState );
	void SetCharacterInfo ( int PlayerIndex, struct FString CharName, struct FString CharClass, struct FString ActionAbilityDesc, struct FString PreferredWeaponDesc );
	void CommitSelectableCharacters ( );
	void AddSelectableCharacter ( struct FString IconMoviePath );
};

UClass* UCharacterSelectionGFxObject::pClassPointer = NULL;

// Class WillowGame.WillowGFxLobbyLoadCharacter
// 0x013C (0x03A0 - 0x0264)
class UWillowGFxLobbyLoadCharacter : public UWillowGFxMovie
{
public:
	class ULoadCharacterLobbyGFxObject*                LoadCharacterLobby;                               		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLoadCharacterData >                DisplayedCharacterDataList;                       		// 0x0268 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bWaitingForPS3LoadGame : 1;                       		// 0x0274 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWaitingForPS3SaveList : 1;                       		// 0x0274 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bRestrictClose : 1;                               		// 0x0274 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UWillowGFxMenuHelperSaveGame*                SaveGameHelper;                                   		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UPlayerNameIdentifierDefinition* >   DefaultNewCharacterList;                          		// 0x027C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FLoadInfo                                   MostRecentLoadInfo;                               		// 0x0288 (0x00C8) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWillowGFxDialogBox*                         LoadingCharacterDlg;                              		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      Platform;                                         		// 0x0354 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerSaveGame*                             CachedSaveGame;                                   		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AvailableSlots;                                   		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TopSlotDataIndex;                                 		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedDataIndex;                                		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastActionTime;                                   		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastDeletedPlayedTime;                            		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastDeletedLevel;                                 		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       LastDeletedGuid;                                  		// 0x0374 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastClickedDataIndex;                             		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnLoadGame__Delegate;                           		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseNoLoad__Delegate;                        		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69386 ];

		return pClassPointer;
	};

	void OnTick ( );
	void SetTickInterval ( );
	bool CanShowStorageSelector ( );
	void StorageDeviceChanged ( unsigned char ControllerId, unsigned long bIsValid );
	void HideLoadingSavedGameDialog ( );
	void ShowLoadingSavedGameDialog ( );
	void NotifyLoadGameStarted ( );
	void PS3_CheckForSaveList ( );
	void PS3_CheckForLoadGame ( );
	void PS3_BeginLoadGame ( );
	void FinishConditionalLoadGame ( unsigned char LoadGameResult );
	void ConditionalLoadGame ( struct FLoadInfo LI, int PlayerIndex );
	struct FString StripSavePath ( struct FString Path );
	void FinishLoadGame ( struct FLoadInfo LI );
	void GetSaveList ( );
	void DeviceSelectionDone ( unsigned long bWasSuccessful );
	void SetupCharacterMenu ( unsigned long bIsFirstJoin );
	void SetTipText ( unsigned long bCanDelete, unsigned long bIsUnownedClass );
	bool OnPurchaseCanceled ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void MarketplaceDownloadComplete ( );
	bool OnPurchaseRequest ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void LaunchBoostedSave ( );
	bool NotAllClientsCanAccessDlc_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnLoadBoostedSave ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void OnSlotClicked ( int SlotIndex );
	void FocusOn ( class UGFxObject* FocusTarget );
	void OnDeleteEnded ( unsigned long bWasDeleted );
	void OnDeleteStarted ( );
	void TryDeleteSelectedCharacter ( );
	void ScrollDown ( );
	void ScrollUp ( );
	void RefreshCharacterList ( );
	void SetListSelection ( int InSelectedDataIndex );
	void SavesUpdated ( int PlayerIndex );
	struct FString ResolvePlaythrough ( int PlayThrough );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void BeginClose ( );
	void eventOnClose ( );
	void extLoadCharacterLobbyReady ( struct FString TargetPath, int NumEntries );
	bool eventStart ( unsigned long StartPaused );
	void OnCloseNoLoad ( );
	void OnLoadGame ( struct FLoadInfo LI, int PlayerIndex );
};

UClass* UWillowGFxLobbyLoadCharacter::pClassPointer = NULL;

// Class WillowGame.ConfirmCharacterLobbyGFxMovie
// 0x0018 (0x027C - 0x0264)
class UConfirmCharacterLobbyGFxMovie : public UWillowGFxMovie
{
public:
	class UGFxObject*                                  ConfirmCharacterLobbyObj;                         		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerReplicationInfo*                WPRI[ 0x2 ];                                      		// 0x0268 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnConfirmCharacters__Delegate;                  		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69887 ];

		return pClassPointer;
	};

	void SetHeader ( struct FString Header, struct FString Subheader );
	void SetCharacterInfo ( int PlayerIndex, int Quadrant, struct FString Gamertag, int CharLevel, struct FString CharName, struct FString CharClass, struct FString CharPlaythrough, struct FString CharCurrentMission, struct FString CharPlotMission, struct FString CharSaveDate, struct FString CharPlayedTime );
	void Hide ( );
	void Show ( int PlayerCount, unsigned long bIsConsole );
	void PopulatePlayerData ( );
	void CharacterSelectClosed ( );
	void CharacterLoadComplete ( struct FLoadInfo LI, int PlayerIndex );
	void OpenCharacterSelect ( int ControllerId );
	void ConfirmCharacterSelectForPlayer ( class AWillowPlayerReplicationInfo* PlayerPRI );
	void ConfigureForPlayers ( class AWillowPlayerReplicationInfo* FirstPlayer, class AWillowPlayerReplicationInfo* SecondPlayer );
	struct FString ResolvePlaythrough ( int PlayThrough );
	void OnChangeCharacterButtonClick ( class UGFxObject* EventObj );
	void OnCancelButtonClick ( class UGFxObject* EventObj );
	void HandleConfirm ( );
	void OnConfirmButtonClick ( class UGFxObject* EventObj );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void BeginClose ( );
	void eventOnClose ( );
	void extConfirmCharacterLobbyReady ( struct FString TargetPath );
	bool eventStart ( unsigned long StartPaused );
	void OnConfirmCharacters ( );
};

UClass* UConfirmCharacterLobbyGFxMovie::pClassPointer = NULL;

// Class WillowGame.CreditsDataProviderGFxObject
// 0x0005 (0x007D - 0x0078)
class UCreditsDataProviderGFxObject : public UGFxObject
{
public:
	class UCreditsGFxDefinition*                       CreditsDef;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned char                                      bShouldAvoidAccentedLetters;                      		// 0x007C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69995 ];

		return pClassPointer;
	};

	int extGetLengthOfData ( );
	struct FString ReplaceCertainAccentedLetters ( struct FString Text );
	class UGFxObject* extGetClipDataAt ( int Index );
	void Init ( class UCreditsGFxDefinition* CreditsDefinition );
};

UClass* UCreditsDataProviderGFxObject::pClassPointer = NULL;

// Class WillowGame.CreditsLineDefinition
// 0x000C (0x0048 - 0x003C)
class UCreditsLineDefinition : public UGBXDefinition
{
public:
	struct FString                                     LinkageName;                                      		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70007 ];

		return pClassPointer;
	};

};

UClass* UCreditsLineDefinition::pClassPointer = NULL;

// Class WillowGame.CreditsGFxObject
// 0x0008 (0x0080 - 0x0078)
class UCreditsGFxObject : public UGFxObject
{
public:
	class UCreditsGFxDefinition*                       CreditsDef;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              CachedDelta;                                      		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70034 ];

		return pClassPointer;
	};

	void UpdateDelta ( float NewDelta );
	void StartCreditScroll ( );
	void Init ( class UCreditsGFxDefinition* CreditsDefinition );
};

UClass* UCreditsGFxObject::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Player
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Player : public UCustomizationUsage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70174 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Player::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Vehicle
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Vehicle : public UCustomizationUsage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70179 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Vehicle::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Assassin
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Assassin : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70400 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Assassin::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_BanditTech
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_BanditTech : public UCustomizationUsage_Vehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70403 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_BanditTech::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerA
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerA : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70405 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerA::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerB
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerB : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70407 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerB::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerC
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerC : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70409 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerC::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerD
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerD : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70411 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerD::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerE
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerE : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70413 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerE::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerF
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerF : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70415 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerF::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerG
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerG : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70417 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerG::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerH
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerH : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70419 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerH::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerI
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerI : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70421 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerI::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerJ
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerJ : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70423 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerJ::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerK
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerK : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70425 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerK::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerL
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerL : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70427 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerL::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerM
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerM : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70429 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerM::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerN
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerN : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70431 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerN::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerO
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerO : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70433 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerO::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_ExtraPlayerP
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerP : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70435 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_ExtraPlayerP::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_FanBoat
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_FanBoat : public UCustomizationUsage_Vehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70437 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_FanBoat::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Hovercraft
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Hovercraft : public UCustomizationUsage_Vehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70439 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Hovercraft::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Mercenary
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Mercenary : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70441 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Mercenary::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Runner
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Runner : public UCustomizationUsage_Vehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70443 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Runner::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Siren
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Siren : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70445 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Siren::pClassPointer = NULL;

// Class WillowGame.CustomizationUsage_Soldier
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Soldier : public UCustomizationUsage_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70447 ];

		return pClassPointer;
	};

};

UClass* UCustomizationUsage_Soldier::pClassPointer = NULL;

// Class WillowGame.DeathtrapActionSkill
// 0x0030 (0x0264 - 0x0234)
class ADeathtrapActionSkill : public AActionSkill
{
public:
	class AWillowAIPawn*                               DeathTrap;                                        		// 0x0234 (0x0004) [0x0000000000000000]              
	class USkillDefinition*                            ShareShieldsSkill;                                		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AWillowPawn*                                 MedicBeamTarget;                                  		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MedicBeamState;                                   		// 0x0240 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MedicBeamSourceSocket;                            		// 0x0244 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MedicBeamTargetSocket;                            		// 0x024C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MedicBeamMaxDistance;                             		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            MedicBeamSkill;                                   		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            MedicBeamTargetSkill;                             		// 0x025C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UFiringModeDefinition*                       MedicBeamFiringMode;                              		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70524 ];

		return pClassPointer;
	};

	void DeactivateMedicBeam ( );
	void BlockMedicBeam ( );
	void ActivateMedicBeam ( );
	void TryToActivateMedicBeam ( class AWillowPawn* TheTargetPawn );
	bool IsValidCurrentMedicBeamTarget ( class AWillowPawn* TheTargetPawn );
	bool IsValidMedicBeamTarget ( class AWillowPawn* TheTargetPawn );
	void TryToShareShields ( class AWillowPawn* TheWillowPawn, class AController* TheController );
	void DestroyOwnedInstanceData ( );
	bool RemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	class AWillowPawn* GetAutoAimPawn ( );
	void NotifyActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn );
	void StartActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn );
	void OnActionSkillEnded ( );
	void OnActionSkillStarted ( class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn );
	void eventOnActionSkillTick ( float DeltaTime );
};

UClass* ADeathtrapActionSkill::pClassPointer = NULL;

// Class WillowGame.DebugArrowComponent
// 0x0000 (0x021C - 0x021C)
class UDebugArrowComponent : public UArrowComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70594 ];

		return pClassPointer;
	};

};

UClass* UDebugArrowComponent::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AISetItemTossTarget
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_AISetItemTossTarget : public USequenceAction
{
public:
	TArray< class AActor* >                            TossTargets;                                      		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71353 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AISetItemTossTarget::pClassPointer = NULL;

// Class WillowGame.DesignerAttributeContextResolver
// 0x0018 (0x0054 - 0x003C)
class UDesignerAttributeContextResolver : public UAttributeContextResolver
{
public:
	struct FName                                       ValueName;                                        		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseValue;                                        		// 0x0044 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71534 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UDesignerAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.DesignerAttributeContextResolverByName
// 0x0018 (0x0054 - 0x003C)
class UDesignerAttributeContextResolverByName : public UAttributeContextResolver
{
public:
	struct FName                                       ValueName;                                        		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseValue;                                        		// 0x0044 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71545 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UDesignerAttributeContextResolverByName::pClassPointer = NULL;

// Class WillowGame.DynamicBehaviorVolume
// 0x0000 (0x0280 - 0x0280)
class ADynamicBehaviorVolume : public ABehaviorVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71822 ];

		return pClassPointer;
	};

};

UClass* ADynamicBehaviorVolume::pClassPointer = NULL;

// Class WillowGame.EchoVersionGFxMovie
// 0x0000 (0x0264 - 0x0264)
class UEchoVersionGFxMovie : public UWillowGFxMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71825 ];

		return pClassPointer;
	};

	bool eventStart ( unsigned long StartPaused );
};

UClass* UEchoVersionGFxMovie::pClassPointer = NULL;

// Class WillowGame.EndOfGameGFxMovie
// 0x000C (0x0270 - 0x0264)
class UEndOfGameGFxMovie : public UWillowGFxMovie
{
public:
	struct FString                                     ConsoleEvent;                                     		// 0x0264 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71838 ];

		return pClassPointer;
	};

	void extCancel ( );
	void extConfirmRestart ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UEndOfGameGFxMovie::pClassPointer = NULL;

// Class WillowGame.FastTravelSignGFxMovie
// 0x0000 (0x0254 - 0x0254)
class UFastTravelSignGFxMovie : public UGFxMovieInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72292 ];

		return pClassPointer;
	};

	bool eventStart ( unsigned long StartPaused );
};

UClass* UFastTravelSignGFxMovie::pClassPointer = NULL;

// Class WillowGame.FastTravelStationGFxObject
// 0x0000 (0x0078 - 0x0078)
class UFastTravelStationGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73239 ];

		return pClassPointer;
	};

	int GetSortModeCorrectLocationIndex ( int Index );
	void OnListPanelItemChange ( class UGFxObject* Obj );
	class UGFxObject* GetGFxObject ( struct FString Path );
	void SetCurrentWaypoint ( int WaypointIndex );
	void SetSortMode ( int SortMode, struct FString Header );
	void SendLocationData ( TArray< struct FString > LocationDisplayNames, TArray< struct FString > LocationStationNames, int InitialSelectionIndex, int CurrentWaypointIndex );
	void ScrollLocationListDown ( );
	void ScrollLocationListUp ( );
	void RegisterMapLocationBlob ( class UGFxObject* MapBlobClip );
	void CacheLocationMissionData ( int LocationIndex, TArray< struct FString > MissionNames, TArray< int > MissionTypes );
	void AddDLCMapLocations ( struct FString DLCMapLocationsMovie );
};

UClass* UFastTravelStationGFxObject::pClassPointer = NULL;

// Class WillowGame.FastTravelStationLocationMissionsGFxObject
// 0x0000 (0x0078 - 0x0078)
class UFastTravelStationLocationMissionsGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73253 ];

		return pClassPointer;
	};

	void SetMissionData ( class UGFxObject* Data );
};

UClass* UFastTravelStationLocationMissionsGFxObject::pClassPointer = NULL;

// Class WillowGame.FastTravelStationMapLocationsGFxObject
// 0x0000 (0x0078 - 0x0078)
class UFastTravelStationMapLocationsGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73254 ];

		return pClassPointer;
	};

	void SetSelectedMapLocation ( struct FString _mapLocationName );
};

UClass* UFastTravelStationMapLocationsGFxObject::pClassPointer = NULL;

// Class WillowGame.FixedMarker
// 0x0010 (0x01A4 - 0x0194)
class AFixedMarker : public ATrigger
{
public:
	unsigned long                                      DisplayOnCompass : 1;                             		// 0x0194 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	class UTexture2D*                                  MarkerTexture;                                    		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MarkerColor;                                      		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MarkerScale;                                      		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73501 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* AFixedMarker::pClassPointer = NULL;

// Class WillowGame.WillowAutoTestManager
// 0x000C (0x0260 - 0x0254)
class AWillowAutoTestManager : public AAutoTestManager
{
public:
	class AWillowPlayerController*                     WillowSentinelPC;                                 		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsMenuActive : 1;                                		// 0x0258 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsWillowSentinelPCWalking : 1;                   		// 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                TotalLevelLoads;                                  		// 0x025C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73729 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void CloseAutomatedMapTestTimer ( );
	void AutomatedTravelToNextMap ( );
	struct FString GetNextAutomatedTestingMap ( );
	void MenuTimerWorker ( );
	void TestBackMenu ( unsigned char backMenuType, float displayTimeInSeconds );
	void TestDucking ( );
	void TestJumping ( );
	void TestNextWeapon ( );
	void TestStopFiring ( );
	void TestStartFiring ( );
	void TestStopWalking ( );
	void TestStartWalking ( );
	void DisableTrainingMessages ( );
	void ExecuteConsoleCommand ( struct FString Command );
	void DoAutomatedSmokeTest ( );
	void DoUIAutoMemTest ( );
	void eventPostBeginPlay ( );
};

UClass* AWillowAutoTestManager::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_PlayerLeft
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_PlayerLeft : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73763 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_PlayerLeft::pClassPointer = NULL;

// Class WillowGame.SeqEvent_SeamlessTravelComplete
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_SeamlessTravelComplete : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73765 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_SeamlessTravelComplete::pClassPointer = NULL;

// Class WillowGame.IPlayerObserver
// 0x0000 (0x003C - 0x003C)
class UIPlayerObserver : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73849 ];

		return pClassPointer;
	};

	void PlayerLeftGame ( class APlayerController* PC );
	void PlayerEnteredGame ( class APlayerController* PC );
};

UClass* UIPlayerObserver::pClassPointer = NULL;

// Class WillowGame.WillowGameMessage
// 0x0033 (0x007C - 0x0049)
class UWillowGameMessage : public ULocalMessage
{
public:
	struct FString                                     PlayerEnteredGame;                                		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerLeftGame;                                   		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreaturesGrowStronger;                            		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreaturesWeaken;                                  		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73860 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UWillowGameMessage::pClassPointer = NULL;

// Class WillowGame.LocalMapChangeMessage
// 0x0000 (0x004C - 0x004C)
class ULocalMapChangeMessage : public UWillowLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73890 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* ULocalMapChangeMessage::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_StartNewGameCinematics
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_StartNewGameCinematics : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74013 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_StartNewGameCinematics::pClassPointer = NULL;

// Class WillowGame.WillowAccessControl
// 0x0000 (0x0298 - 0x0298)
class AWillowAccessControl : public AAccessControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74123 ];

		return pClassPointer;
	};

	bool ForceKickPlayer ( class APlayerController* C, struct FString KickReason );
};

UClass* AWillowAccessControl::pClassPointer = NULL;

// Class WillowGame.SplitscreenHelper
// 0x0024 (0x0060 - 0x003C)
class USplitscreenHelper : public UObject
{
public:
	class UWillowPauseTicker*                          PS3UserSelectTicker;                              		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PS3SplitScreenControllerId;                       		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     PrimaryPC;                                        		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __HandleSplitscreenJoinSuccess__Delegate;         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleSplitscreenJoinFail__Delegate;            		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74317 ];

		return pClassPointer;
	};

	void CheckPS3UserSelectResult ( );
	void SparkAuthenticate ( int ControllerId, class AWillowPlayerController* SplitPC );
	void OnSplitscreenJoinComplete ( int ControllerId, unsigned long bWasSuccessful );
	void AttemptSplitscreenJoin ( int ControllerId );
	class AWillowPlayerController* GetPrimaryPC ( );
	void PrepareSplitscreenJoin ( int ControllerId );
	bool AttemptSplitscreenLeave ( int ControllerId );
	void HandleSplitscreenJoinFail ( struct FString Reason );
	void HandleSplitscreenJoinSuccess ( class AWillowPlayerController* SplitPC );
};

UClass* USplitscreenHelper::pClassPointer = NULL;

// Class WillowGame.NetworkOptionsGFxMovie
// 0x0014 (0x0278 - 0x0264)
class UNetworkOptionsGFxMovie : public UWillowGFxMovie
{
public:
	class UNetworkOptionsGFxObject*                    NetworkOptionsObject;                             		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxMovie*                             OwningMovie;                                      		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnLoad__Delegate;                               		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74321 ];

		return pClassPointer;
	};

	struct FString ResolveNetworkTypeString ( unsigned char NetworkType, unsigned char InviteType );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void extClosed ( );
	void extOnLoad ( struct FString Path );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	void OnLoad ( class UNetworkOptionsGFxObject* NetworkOptionsObj );
};

UClass* UNetworkOptionsGFxMovie::pClassPointer = NULL;

// Class WillowGame.MarketplaceGFxMovie
// 0x01FC (0x058C - 0x0390)
class UMarketplaceGFxMovie : public UWillowGFxMovie3D
{
public:
	TArray< struct FMarketPlaceFilter >                BasicFilters;                                     		// 0x0390 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  MarketPlacePanelObject;                           		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMarketplaceGFxMovieDefinition*              MarketplaceDef;                                   		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     FilterAll;                                        		// 0x03A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FilterCompatibility;                              		// 0x03B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FilterSeasonPass;                                 		// 0x03BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FilterAddOn;                                      		// 0x03C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FilterMisc;                                       		// 0x03D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TipPurchase;                                      		// 0x03E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TipCancel;                                        		// 0x03EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TipRedeemCode;                                    		// 0x03F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TipSort;                                          		// 0x0404 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TipDownload;                                      		// 0x0410 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TipDetails;                                       		// 0x041C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TipPSNStore;                                      		// 0x0428 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CostFormatPS3;                                    		// 0x0434 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CostFormatPS3Free;                                		// 0x0440 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CostFormat360;                                    		// 0x044C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CostFormat360Free;                                		// 0x0458 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Purchased;                                        		// 0x0464 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StatusPurchased;                                  		// 0x0470 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StatusDownloaded;                                 		// 0x047C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StatusInstalled;                                  		// 0x0488 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StatusNew;                                        		// 0x0494 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessageEnumerating;                               		// 0x04A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultHeader;                                    		// 0x04AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultFeature;                                   		// 0x04B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultFeatureDescription;                        		// 0x04C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Prop_offeringId;                                  		// 0x04D0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isPurchased;                                 		// 0x04DC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isSeasonPass;                                		// 0x04E8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isNewOffer;                                  		// 0x04F4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isDownloaded;                                		// 0x0500 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isInstalled;                                 		// 0x050C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isFree;                                      		// 0x0518 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isCompatibility;                             		// 0x0524 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isAddOn;                                     		// 0x0530 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_isMisc;                                      		// 0x053C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_contentTitleText;                            		// 0x0548 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_messageText;                                 		// 0x0554 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_costText;                                    		// 0x0560 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_statusText;                                  		// 0x056C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Prop_descriptionText;                             		// 0x0578 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bDelegateFired : 1;                               		// 0x0584 (0x0004) [0x0000000000000000] [0x00000001] 
	class UWillowGFxDialogBox*                         WarningDlg;                                       		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74324 ];

		return pClassPointer;
	};

	class UGFxObject* GetSelectedObject ( );
	class UGFxObject* FinalizeContentData ( );
	void SetContentData ( TArray< class UGFxObject* > dataArray );
	void AddContentData ( class UGFxObject* Data );
	class UGFxObject* SetFilterFromStringAndSortNew ( struct FString Tag, struct FString Caption, struct FString filterString );
	class UGFxObject* SetFilterFromString ( struct FString Tag, struct FString Caption, struct FString filterString );
	void ClearFilters ( );
	void CycleFilter ( );
	void ApplyFilter ( struct FString Tag );
	void ScrollDescription ( unsigned long bScrollUp );
	void ShowMessage ( struct FString Message );
	void ShowMarketplaceElements ( unsigned long bShow );
	void SetStoreHeader ( struct FString Header, unsigned long bIsPS3, struct FString feature, struct FString featureDescription );
	void SetTooltips ( struct FString tip1, struct FString tip2 );
	class UGFxObject* CreateContentItem ( struct FString OfferingId, unsigned long IsPurchased, unsigned long IsDownloaded, unsigned long IsInstalled, unsigned long IsSeasonPass, unsigned long IsNewOffer, unsigned long IsFree, unsigned long IsCompatibility, unsigned long IsAddOn, unsigned long IsMisc, struct FString ContentTitleText, struct FString PriceText, struct FString DescriptionText );
	class UGFxObject* CreateMarketplaceItem ( struct FMarketplaceContent* Content );
	struct FString GetOfferingStatusMessage ( unsigned long IsPurchased, unsigned long IsDownloaded, unsigned long IsInstalled );
	struct FString FormatCost ( int PlatformCost );
	void extOnOfferingChanged ( class UGFxObject* Data );
	void SetShoppingTooltips ( unsigned long bCanPurchase, unsigned long bDownloaded, unsigned long bInstalled, unsigned long bFree, unsigned long bShopDisabled );
	bool OnFailureDialogClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void ShowDeferredFailureMessage ( );
	void PostContentLoaded ( unsigned long bSuccess );
	void OnHiddenDownloadableContentListRead ( unsigned long bWasSuccessful );
	bool IsOfferOwned ( int OfferId, TArray< struct FMarketplaceContent >* ContentList );
	void OnDownloadableContentListRead ( unsigned long bWasSuccessful );
	void GetHiddenDLCList ( TArray< int > HiddenOfferIds );
	void RefreshDLC ( );
	void extOnMarketPlacePanelLoad ( class UGFxObject* Panel );
	void extPopupMessage ( unsigned long bVisible );
	bool OnClickShowMarketplace ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool OnClickShowMarketplaceOffer ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool ShopInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UMarketplaceGFxMovie::pClassPointer = NULL;

// Class WillowGame.MatchmakingLobbyGFxMovie
// 0x00B8 (0x0448 - 0x0390)
class UMatchmakingLobbyGFxMovie : public UWillowGFxMovie3D
{
public:
	class UMatchmakingLobbyCharacterInfoGFxObject*     CharacterInfoGFxObj;                              		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMatchmakingLobbyResultsGFxObject*           ResultsGFxObj;                                    		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  TooltipsGFxObj;                                   		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FMatchmakingResultEntry                     ResultEntries[ 0x4 ];                             		// 0x039C (0x0090) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      CurrentMatchmakingState;                          		// 0x042C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnCancel__Delegate;                             		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHostGameAccept__Delegate;                     		// 0x043C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74326 ];

		return pClassPointer;
	};

	void extMatchmakingLobbyOnLoad ( struct FString CharacterInfoTargetPath, struct FString ResultsTargetPath, struct FString TooltipsTargetPath );
	struct FString ResolvePlaythrough ( int PlayThrough );
	void UpdateTooltips ( );
	void UpdateResults ( );
	void SetMatchmakingState ( unsigned char MatchmakingState );
	struct FString GetResultMessage ( unsigned char MatchmakingState );
	struct FString GetMatchTypeIconFrameName ( unsigned char MatchmakingState );
	void InitResultEntries ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void BeginClose ( );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	void OnHostGameAccept ( );
	void OnCancel ( );
};

UClass* UMatchmakingLobbyGFxMovie::pClassPointer = NULL;

// Class WillowGame.FrontEndPlayerListGFxObject
// 0x0114 (0x018C - 0x0078)
class UFrontEndPlayerListGFxObject : public UGFxObject
{
public:
	class UIPlayerListOwner*                           OwningMovie;                                      		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x007C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FUniqueNetId >                      PlayerListIds;                                    		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SelectedPlayerIndex;                              		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SplitJoinRowIndex;                                		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                CachedPlayerToKick;                               		// 0x0094 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     WPCOwner;                                         		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FString                                     MyPartyHeaderBase;                                		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendPartyHeader;                                		// 0x00BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoMissionFallbackText;                            		// 0x00C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerConnectingString;                           		// 0x00D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SplitJoinMessage;                                 		// 0x00E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteFriendMessage;                              		// 0x00EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingMessage;                                   		// 0x00F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OfflineMessage;                                   		// 0x0104 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      PlayerDetailsIdMap;                               		// 0x0110 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPlayerDetailsGFxMovie*                      PlayerDetailsMovie;                               		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                PlayerDetailsUniqueId;                            		// 0x0120 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     JoinGameCaption;                                  		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteGameCaption;                                		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ViewGamercardCaption;                             		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MuteCaption;                                      		// 0x015C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UnmuteCaption;                                    		// 0x0168 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickCaption;                                      		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BackCaption;                                      		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74328 ];

		return pClassPointer;
	};

	void HidePlayerDetailsMovie ( );
	int GetPrimaryPlayerControllerId ( );
	struct FString GetPlayerName ( struct FUniqueNetId UniqueId, unsigned long bFormatForHTML );
	int GetPlayerListIndex ( struct FUniqueNetId PlayerID );
	void UpdateMuteStatus ( struct FUniqueNetId UniqueId );
	void KickPlayer ( struct FUniqueNetId PlayerToKick );
	void InviteToGame ( int ControllerId, struct FUniqueNetId PlayerToInvite );
	void JoinGame ( int ControllerId, struct FUniqueNetId PlayerToJoin );
	bool OnConfirmKickPlayer_Clicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void HandlePlayerDetailsButtonClick ( int Index );
	class AWillowPlayerReplicationInfo* GetPRI ( struct FUniqueNetId UniqueId );
	void PopulatePlayerDetailsDialog ( struct FUniqueNetId UniqueId );
	void AddPlayerDetailsButton ( int Id, struct FString Caption, unsigned long bDisabled );
	void OnPlayerDetailsLoaded ( class UPlayerDetailsGFxObject* InPlayerDetailsDialog );
	void ShowPlayerSelectedDialog ( int EntryIndex );
	struct FString GetSessionKey ( struct FOnlineFriend Friend );
	bool ContainsUniqueId ( TArray< struct FUniqueNetId > IdList, struct FUniqueNetId SearchId );
	bool IsInCurrentGame ( struct FUniqueNetId UniqueId );
	bool IsLocalPlayer ( class APlayerReplicationInfo* PRI );
	bool IsPlayerMuted ( struct FUniqueNetId UniqueId );
	bool IsRemotePlayerTalking ( struct FUniqueNetId UniqueId );
	bool IsLocalPlayerTalking ( int ControllerId );
	bool IsLocalVoiceEnabled ( int ControllerId );
	bool IsInPartyChat ( struct FUniqueNetId UniqueId );
	bool IsPartyLeader ( class AWillowPlayerReplicationInfo* WPRI );
	int GetCurrentPlaythrough ( );
	struct FString GetCurrentMissionName ( );
	struct FString GetMatchQualityText ( struct FString MatchIconFrameName );
	struct FString GetFriendPartyQualityType ( struct FOnlineFriend Friend );
	struct FString GetFriendPartySlotInfo ( struct FOnlineFriend Friend );
	struct FString GetFriendPartyHeader ( struct FOnlineFriend Friend );
	void GetLocalPartyPlayerCount ( int* PlayerCount, int* MaxPlayerCount );
	struct FString GetCharacterIconSwfMoviePath ( class AWillowPlayerReplicationInfo* WPRI );
	void DebugAddDummyPlayers ( int CurrentRowIndex, int Count );
	bool IsPlayerConnecting ( class AWillowPlayerReplicationInfo* WPRI );
	void OnPlayerListButtonClick ( int EntryIndex, int RowTypeId );
	void RefreshPlayerList ( TArray< struct FOnlineFriend > FriendsList );
	void Hide ( );
	void Show ( );
	void ScrollUp ( );
	void ScrollToTop ( );
	void ScrollDown ( );
	void SetVoiceStatusTalking ( int RowIndex, unsigned long bTalking );
	void SetVoiceStatusMuted ( int RowIndex, unsigned long bMuted );
	void SetVoiceStatusEnabled ( int RowIndex, unsigned long bEnabled );
	void SetConnectionQuality ( struct FString ConnectionQuality );
	void ResetFocus ( unsigned long bBottomUp );
	void ClearRow ( int RowIndex, unsigned long bCollapse );
	void ConfigureSelectedIndex ( int RowIndex, unsigned long bFocus );
	void ConfigureMessagePromptRow ( int RowIndex, int RowTypeId, struct FString Text );
	void ConfigurePlayerInfoRow ( int RowIndex, int RowTypeId, struct FString Gamertag, int Level, struct FString ClassIconMovieName, unsigned long bPartyLeader, unsigned long bVoiceEnabled, unsigned long bVoiceMuted, unsigned long bVoiceTalking, unsigned long bInPartyChat, unsigned long bControllerDisplay, int Quadrant, unsigned long bHubPlayer );
	void ConfigureHeaderInfoRow ( int RowIndex, int RowTypeId, struct FString PartyType, struct FString IconFrameName, struct FString MissionName, struct FString SlotInfo );
	void ClearAllEntries ( );
	void EndConfigureRows ( int SelectedIndex );
	void BeginConfigureRows ( unsigned long bClearAllEntries, int NumStickyRows );
	void OnPlayerTalkingStateChange ( struct FUniqueNetId PlayerID, unsigned long bIsTalking );
	void ShutDown ( );
	void Init ( class UIPlayerListOwner* InOwningMovie );
};

UClass* UFrontEndPlayerListGFxObject::pClassPointer = NULL;

// Class WillowGame.WillowGFxClikWidget
// 0x0000 (0x0084 - 0x0084)
class UWillowGFxClikWidget : public UGFxClikWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74331 ];

		return pClassPointer;
	};

	void OnEvent ( struct FName EventTag );
	void OnClikEvent ( struct FEventData Data );
	void AddClikEvent ( struct FString EventType );
};

UClass* UWillowGFxClikWidget::pClassPointer = NULL;

// Class WillowGame.WillowScrollingList
// 0x0044 (0x00C8 - 0x0084)
class UWillowScrollingList : public UWillowGFxClikWidget
{
public:
	TArray< struct FDataProviderInfo >                 DataProviderStack;                                		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      IndexToEventId;                                   		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWillowGFxMovie*                             MyOwnerMovie;                                     		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSuppressMovementSound : 1;                       		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDontFocusFirstAvailableListItem : 1;             		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FString                                     BackCaption;                                      		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnListChanged__Delegate;                        		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSelectedIndexChanged__Delegate;               		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74330 ];

		return pClassPointer;
	};

	void PlaySound_VerticalMovement ( );
	void OnSpinnerValueChange ( int EntryIndex, int NewChoiceIndex, struct FString NewChoiceValue );
	void OnSliderValueChange ( int EntryIndex, int NewValue );
	void OnClikEvent ( struct FEventData Data );
	int GetSelectedIndex ( );
	void SetSelectedIndex ( int Index );
	void SetFocused ( int FocusIndex );
	int IsSpinnerListItemInternal ( );
	bool IsSpinnerListItem ( );
	int IsSliderListItemInternal ( );
	bool IsSliderListItem ( );
	void FocusFirstAvailableListItem ( );
	void ClearListItems ( );
	void CommitListItems ( );
	void AddSliderListItemInternal ( struct FString Caption, unsigned long bDisabled, float StartingValue, float MinValue, float MaxValue, float Increment );
	void AddSliderListItem ( int EventID, struct FString Caption, unsigned long bDisabled, float StartingValue, float MinValue, float MaxValue, float Increment );
	void AddSpinnerListItemInternal ( struct FString Caption, unsigned long bDisabled, int StartingChoiceIndex, TArray< struct FString > Choices );
	void AddSpinnerListItem ( int EventID, struct FString Caption, unsigned long bDisabled, int StartingChoiceIndex, TArray< struct FString > Choices );
	void AddListItemInternal ( struct FString Item, unsigned long bDisabled, unsigned long bNew );
	void AddListItem ( int EventID, struct FString Caption, unsigned long bDisabled, unsigned long bNew );
	bool HandlePopList ( );
	void Refresh ( );
	void PushDataProvider ( class UIWillowScrollingListDataProvider* DataProvider );
	class UIWillowScrollingListDataProvider* GetCurrentDataProvider ( );
	void Cleanup ( );
	void Init ( class UWillowGFxMovie* OwnerMovie, class UIWillowScrollingListDataProvider* DefaultDataProvider );
	void OnSelectedIndexChanged ( int NewSelectedIndex );
	void OnListChanged ( );
};

UClass* UWillowScrollingList::pClassPointer = NULL;

// Class WillowGame.FrontendMenuGFxObject
// 0x0000 (0x0078 - 0x0078)
class UFrontendMenuGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74333 ];

		return pClassPointer;
	};

	void FadeLobbyDeco ( );
	void SetDecoVisible ( unsigned long bLobbyDecoVisible, unsigned long bPauseDecoVisible );
	void ApplyPriorityVisibilityEffect ( unsigned long bRemoveEffect );
	void ApplyPriorityBlurEffect ( unsigned long bRemoveEffect );
};

UClass* UFrontendMenuGFxObject::pClassPointer = NULL;

// Class WillowGame.IWillowScrollingListDataProvider
// 0x0000 (0x003C - 0x003C)
class UIWillowScrollingListDataProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74358 ];

		return pClassPointer;
	};

	void Cleanup ( class UWillowScrollingList* TheList );
	class UIWillowScrollingListDataProvider* GetSubmenuForEvent ( int EventID, class UWillowScrollingList* TheList );
	void Populate ( class UWillowScrollingList* TheList );
	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	bool HandleSliderChange ( int EventID, int NewSliderValue, class UWillowScrollingList* TheList );
	bool HandleSelectionRollover ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSelectionChange ( int EventID, class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
	void OnPop ( class UWillowScrollingList* TheList );
	void OnPush ( class UWillowScrollingList* TheList );
	struct FString GetMenuTooltip ( );
	struct FString GetMenuDisplayName ( );
};

UClass* UIWillowScrollingListDataProvider::pClassPointer = NULL;

// Class WillowGame.IPlayerListOwner
// 0x0000 (0x003C - 0x003C)
class UIPlayerListOwner : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74508 ];

		return pClassPointer;
	};

	void eventPlayUISound ( struct FName UIEvent );
	class UWillowGFxMovie3DDefinition* GetPlayerDetailsMovieDef ( );
	bool GetFriend ( struct FUniqueNetId UniqueId, struct FOnlineFriend* out_Friend );
	void AppendTooltipString ( struct FString StringToAppend, unsigned long bDisabled, struct FString* TooltipString );
	int CheckControllerStatus ( int ControllerId, unsigned char MinStatus );
	bool IsPlayerOwner ( int ControllerId );
	bool CanKick ( struct FUniqueNetId UniqueId );
	bool CanViewGamercard ( int ControllerId, struct FUniqueNetId UniqueId );
	bool CanUnmute ( struct FUniqueNetId UniqueId );
	bool CanMute ( struct FUniqueNetId UniqueId );
	bool CanInvite ( struct FUniqueNetId UniqueId );
	bool CanJoin ( struct FUniqueNetId UniqueId );
	class AWillowPlayerController* GetWPCOwner ( );
};

UClass* UIPlayerListOwner::pClassPointer = NULL;

// Class WillowGame.NetworkOptionsGFxObject
// 0x0004 (0x007C - 0x0078)
class UNetworkOptionsGFxObject : public UGFxObject
{
public:
	unsigned long                                      bVisible : 1;                                     		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74683 ];

		return pClassPointer;
	};

	void SetClickHandler ( class UObject* Context, struct FName FunctionName );
	void NavigateDown ( );
	void NavigateUp ( );
	void FocusFirstButton ( );
	void ConfigureButton ( int ButtonIndex, struct FString ButtonText, struct FString ButtonTooltipText, unsigned long bDisabled );
	void SetCurrentNetworkType ( struct FString NetworkType );
	void Hide ( );
	void Show ( );
};

UClass* UNetworkOptionsGFxObject::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderBase
// 0x0018 (0x0054 - 0x003C)
class UWillowScrollingListDataProviderBase : public UObject
{
public:
	struct FString                                     MenuDisplayName;                                  		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MenuTooltip;                                      		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74770 ];

		return pClassPointer;
	};

	void Cleanup ( class UWillowScrollingList* TheList );
	class UIWillowScrollingListDataProvider* GetSubmenuForEvent ( int EventID, class UWillowScrollingList* TheList );
	void Populate ( class UWillowScrollingList* TheList );
	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	bool HandleSliderChange ( int EventID, int NewSliderValue, class UWillowScrollingList* TheList );
	bool HandleSelectionRollover ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSelectionChange ( int EventID, class UWillowScrollingList* TheList );
	bool HandleInputKey ( struct FName ukey, unsigned char uevent );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
	void OnPop ( class UWillowScrollingList* TheList );
	void OnPush ( class UWillowScrollingList* TheList );
	struct FString GetMenuTooltip ( );
	struct FString GetMenuDisplayName ( );
};

UClass* UWillowScrollingListDataProviderBase::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderMatchmaking
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderMatchmaking : public UWillowScrollingListDataProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74769 ];

		return pClassPointer;
	};

	void Populate ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderMatchmaking::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSearch_DataStore
// 0x0000 (0x00B4 - 0x00B4)
class UWillowOnlineGameSearch_DataStore : public UUIDataStore_OnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74792 ];

		return pClassPointer;
	};

	struct FName GetCurrentSearchName ( );
};

UClass* UWillowOnlineGameSearch_DataStore::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSearch
// 0x0008 (0x0100 - 0x00F8)
class UWillowOnlineGameSearch : public UOnlineGameSearch
{
public:
	int                                                LevelVariance;                                    		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                MaxPing;                                          		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74793 ];

		return pClassPointer;
	};

};

UClass* UWillowOnlineGameSearch::pClassPointer = NULL;

// Class WillowGame.TestMapsListDefinition
// 0x000C (0x0048 - 0x003C)
class UTestMapsListDefinition : public UGBXDefinition
{
public:
	TArray< struct FTestMapsListDatum >                ListItems;                                        		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74900 ];

		return pClassPointer;
	};

};

UClass* UTestMapsListDefinition::pClassPointer = NULL;

// Class WillowGame.PlayerDetailsGFxMovie
// 0x0018 (0x027C - 0x0264)
class UPlayerDetailsGFxMovie : public UWillowGFxMovie
{
public:
	class UPlayerDetailsGFxObject*                     PlayerDetailsObject;                              		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIPlayerListOwner*                           OwningMovie;                                      		// 0x0268 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x026C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnLoad__Delegate;                               		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74925 ];

		return pClassPointer;
	};

	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void extClosed ( );
	void extOnLoad ( struct FString Path );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	void OnLoad ( class UPlayerDetailsGFxObject* PlayerDetailsObj );
};

UClass* UPlayerDetailsGFxMovie::pClassPointer = NULL;

// Class WillowGame.PlayerDetailsGFxObject
// 0x0004 (0x007C - 0x0078)
class UPlayerDetailsGFxObject : public UGFxObject
{
public:
	unsigned long                                      bHidden : 1;                                      		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75124 ];

		return pClassPointer;
	};

	void SetClickHandler ( class UObject* Context, struct FName FunctionName );
	void NavigateDown ( );
	void NavigateUp ( );
	void FocusFirstButton ( );
	void ConfigureButton ( int ButtonIndex, struct FString ButtonText, unsigned long bDisabled );
	void SetClassIconPath ( struct FString ClassIconPath );
	void SetMatchIconAndText ( struct FString MatchIconFramName, struct FString MatchText );
	void SetMissionText ( struct FString MissionText );
	void SetPlaythroughText ( struct FString PlaythroughText );
	void SetClassText ( struct FString ClassText );
	void SetGamertag ( struct FString NickName );
	void Hide ( );
	void Show ( );
};

UClass* UPlayerDetailsGFxObject::pClassPointer = NULL;

// Class WillowGame.GammaScreenGFxDefinition
// 0x0054 (0x0144 - 0x00F0)
class UGammaScreenGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	struct FScreenParticleInitParams                   Parameters;                                       		// 0x00F0 (0x0054) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75204 ];

		return pClassPointer;
	};

};

UClass* UGammaScreenGFxDefinition::pClassPointer = NULL;

// Class WillowGame.GammaScreenGFxMovie
// 0x0000 (0x0390 - 0x0390)
class UGammaScreenGFxMovie : public UWillowGFxMovie3D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75207 ];

		return pClassPointer;
	};

};

UClass* UGammaScreenGFxMovie::pClassPointer = NULL;

// Class WillowGame.GearboxAccountGFxObject
// 0x0000 (0x0078 - 0x0078)
class UGearboxAccountGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75231 ];

		return pClassPointer;
	};

	void SetShiftUrlCaption ( struct FString ShiftUrlCaption );
	int SelectIsEnabled ( );
	void ClearKeyCode ( );
	void TrySetKeyCode ( struct FString KeyCode );
	void ConfigureForViewOffers ( );
	void ConfigureForRedeemCode ( );
	int IsDisplayingOffers ( );
	void SetOfferData ( TArray< class UGFxObject* > OfferData );
	void ScrollMessageDown ( );
	void ScrollMessageUp ( );
	int HasReadTermsOfService ( );
	void SetTermsOfService ( struct FString TermsOfService );
	int HasReadPrivacyPolicy ( );
	void SetPrivacyPolicy ( struct FString PrivacyPolicy );
	void SetTooltips ( struct FString Tooltips );
	void SetSignInStatus ( struct FString SignInStatus );
	void SetPlayerName ( struct FString PlayerName );
	void SetFocusedConsoleCodeSegment ( struct FString CodeSegment );
	void SetConfirmPassword ( struct FString Password );
	void SetPassword ( struct FString Password );
	void SetEmail ( struct FString Email );
	struct FString GetConfirmPassword ( );
	struct FString GetPassword ( );
	struct FString GetKeyCode ( );
	struct FString GetEmail ( );
	int GetAgeYear ( );
	int GetAgeDay ( );
	int GetAgeMonth ( );
	void SetCurrentDate ( int Month, int Day, int Year );
	bool OffersBoxIsChecked ( );
	void RefreshWelcomeScreen ( );
	void DisplayScreen ( struct FString Screen );
};

UClass* UGearboxAccountGFxObject::pClassPointer = NULL;

// Class WillowGame.GFxMovieMissionStatus
// 0x0004 (0x0268 - 0x0264)
class UGFxMovieMissionStatus : public UWillowGFxMovie
{
public:
	unsigned long                                      bHasEligibleMissions : 1;                         		// 0x0264 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bHasCompleteMissions : 1;                         		// 0x0264 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75512 ];

		return pClassPointer;
	};

	void eventOnClose ( );
	void CheckMissionState ( );
	void OnTick ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UGFxMovieMissionStatus::pClassPointer = NULL;

// Class WillowGame.GFxTextListContent
// 0x000C (0x0048 - 0x003C)
class UGFxTextListContent : public UObject
{
public:
	TArray< struct FFlashTextEntry >                   TextListContent;                                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75528 ];

		return pClassPointer;
	};

	class UObject* GetObjectForIndex ( int Index );
	void GetTextAndLabelForIndex ( int Index, struct FString* Text, struct FString* Icon );
	void AddEntry ( struct FFlashTextEntry* NewEntry );
	int GetLength ( );
	void Empty ( );
};

UClass* UGFxTextListContent::pClassPointer = NULL;

// Class WillowGame.GraveyardGFxObject
// 0x0000 (0x0078 - 0x0078)
class UGraveyardGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75566 ];

		return pClassPointer;
	};

	void Hide ( );
	void Show ( );
	void SetTombstoneInfo ( struct FString TimePlayed, struct FString PlayerLevel, struct FString MissionsComplete, struct FString ChallengesComplete, struct FString FavoriteManufacturer, struct FString FavoriteWeaponType, struct FString KilledBy );
};

UClass* UGraveyardGFxObject::pClassPointer = NULL;

// Class WillowGame.HealthBarGFxObject
// 0x0004 (0x007C - 0x0078)
class UHealthBarGFxObject : public UGFxObject
{
public:
	int                                                CachedCurrentHealth;                              		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75751 ];

		return pClassPointer;
	};

	void __SetHealth ( int CurrentHealth, int MaxHealth );
	void SetHealth ( int CurrentHealth, int MaxHealth );
};

UClass* UHealthBarGFxObject::pClassPointer = NULL;

// Class WillowGame.WillowLevelTimerDefinition
// 0x001C (0x0058 - 0x003C)
class UWillowLevelTimerDefinition : public UGBXDefinition
{
public:
	struct FString                                     TimerHeader;                                      		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                XPosition;                                        		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                YPosition;                                        		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UFont*                                       TimerFont;                                        		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      TimerColor;                                       		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75888 ];

		return pClassPointer;
	};

};

UClass* UWillowLevelTimerDefinition::pClassPointer = NULL;

// Class WillowGame.HUDScaleGuideGFxMovie
// 0x0014 (0x03A4 - 0x0390)
class UHUDScaleGuideGFxMovie : public UWillowGFxMovie3D
{
public:
	unsigned long                                      CachedWidescreen : 1;                             		// 0x0390 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UGFxObject*                                  Arrow_Up;                                         		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  Arrow_Down;                                       		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  Arrow_Left;                                       		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  Arrow_Right;                                      		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75903 ];

		return pClassPointer;
	};

	void UpdateFrameForAspectRatio ( unsigned long bWidescreen );
	void SetScaleForClip ( class UGFxObject* Clip );
	void eventOnTick ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UHUDScaleGuideGFxMovie::pClassPointer = NULL;

// Class WillowGame.IAIBehavior
// 0x0000 (0x003C - 0x003C)
class UIAIBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76251 ];

		return pClassPointer;
	};

};

UClass* UIAIBehavior::pClassPointer = NULL;

// Class WillowGame.IGFxMenuScreenTickable
// 0x0000 (0x003C - 0x003C)
class UIGFxMenuScreenTickable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76383 ];

		return pClassPointer;
	};

	void OnTick ( );
};

UClass* UIGFxMenuScreenTickable::pClassPointer = NULL;

// Class WillowGame.IHijackBehavior
// 0x0000 (0x003C - 0x003C)
class UIHijackBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76389 ];

		return pClassPointer;
	};

};

UClass* UIHijackBehavior::pClassPointer = NULL;

// Class WillowGame.InputBindingsClipGFxObject
// 0x0004 (0x007C - 0x0078)
class UInputBindingsClipGFxObject : public UGFxObject
{
public:
	unsigned long                                      bIsShown : 1;                                     		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76669 ];

		return pClassPointer;
	};

	void SetCustomizeTip ( struct FString Label );
	class UGFxObject* AddKeyData ( struct FString _tag, struct FString _caption, struct FString _value );
	void EmptyKeyData ( );
	void InvalidateKeyData ( );
	void SetKeybindMode ( );
	void SetControllerMode ( struct FString Label );
	void _SetVisible ( unsigned long bVisible );
	void Hide ( );
	void Show ( );
};

UClass* UInputBindingsClipGFxObject::pClassPointer = NULL;

// Class WillowGame.InstanceDataContextResolver
// 0x0008 (0x0044 - 0x003C)
class UInstanceDataContextResolver : public UAttributeContextResolver
{
public:
	struct FName                                       InstanceDataName;                                 		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76761 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UInstanceDataContextResolver::pClassPointer = NULL;

// Class WillowGame.InventoryAttributeDefinition
// 0x0000 (0x005C - 0x005C)
class UInventoryAttributeDefinition : public UAttributeDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76881 ];

		return pClassPointer;
	};

};

UClass* UInventoryAttributeDefinition::pClassPointer = NULL;

// Class WillowGame.InventoryDefinitionAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UInventoryDefinitionAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76884 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UInventoryDefinitionAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.VendingMachineExGFxDefinition
// 0x0074 (0x01CC - 0x0158)
class UVendingMachineExGFxDefinition : public UWillowInventoryGFxDefinition
{
public:
	unsigned long                                      bCustomStoragePanelTint : 1;                      		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldAllowCompare : 1;                          		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableSelling : 1;                              		// 0x0158 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShouldPollShopItems : 1;                         		// 0x0158 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShouldAllowSorting : 1;                          		// 0x0158 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bShouldShowStorageCountPanel : 1;                 		// 0x0158 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShouldShowAmmoPanel : 1;                         		// 0x0158 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FColor                                      CustomStoragePanelTint;                           		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USwfMovie*                                   CustomStoragePanelHeaderIcon;                     		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CellWidth;                                        		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CellHeight;                                       		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureWidth;                                     		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureHeight;                                    		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TextureNamePlayer0;                               		// 0x0174 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     TextureNamePlayer1;                               		// 0x0180 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USwfMovie*                                   CustomIOTDMovie;                                  		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CustomHeaderStyle;                                		// 0x0190 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     CustomIOTDVisitLabel;                             		// 0x019C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      bUseAdvancedCustomStoragePanelTint;               		// 0x01A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FASColorTransform                           AdvancedCustomTint;                               		// 0x01AC (0x0020) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77309 ];

		return pClassPointer;
	};

};

UClass* UVendingMachineExGFxDefinition::pClassPointer = NULL;

// Class WillowGame.IUISubMenuNavigation
// 0x0000 (0x003C - 0x003C)
class UIUISubMenuNavigation : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77491 ];

		return pClassPointer;
	};

	void ActivateLastSubMenu ( );
	void ActivateFirstSubMenu ( );
};

UClass* UIUISubMenuNavigation::pClassPointer = NULL;

// Class WillowGame.LANServerBrowserGFxObject
// 0x0000 (0x0078 - 0x0078)
class ULANServerBrowserGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77591 ];

		return pClassPointer;
	};

	void SetSortDirectionButtonLabel ( struct FString Label );
	void SetSortTypeButtonLabel ( struct FString Label );
	int GetSelectedServerIndex ( );
	void SetSelectedServerIndex ( int SelectedIndex );
	void SetSearchingForGames ( unsigned long bSearching );
	void SetGameCountString ( struct FString GameCountString );
	void EndConfigureServerList ( );
	void BeginConfigureServerList ( );
	void AddServerListEntry ( struct FString ServerName, int CurrentPlayers, int MaxPlayers, struct FString CharInfo, struct FString MissionInfo, struct FString ConnectionStength, struct FString Ping );
};

UClass* ULANServerBrowserGFxObject::pClassPointer = NULL;

// Class WillowGame.LatentRewardGFxMovie
// 0x0004 (0x0394 - 0x0390)
class ULatentRewardGFxMovie : public UWillowGFxMovie3D
{
public:
	class UMissionRewardGFxObject*                     RewardObject;                                     		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77851 ];

		return pClassPointer;
	};

	void OnClosedOnDeath ( );
	bool HandleInputAxis ( int ControllerId, struct FName ukey, float Delta, float DeltaTime );
	bool HandleRewardInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void extOnRolloverChoice ( int RewardChoice );
	void extOnFocusedChoice ( int RewardChoice );
	void extRewardPanelClosed ( );
	void AcceptReward ( int RewardChoice );
	void extOnClickedChoice ( int RewardChoice );
	void DisplayRewardsPanel ( struct FPendingMissionRewardData MissionReward );
	void extTryDisplayRewardPanel ( );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* ULatentRewardGFxMovie::pClassPointer = NULL;

// Class WillowGame.MissionRewardGFxObject
// 0x0190 (0x0208 - 0x0078)
class UMissionRewardGFxObject : public UGFxObject
{
public:
	struct FPendingMissionRewardData                   RewardData;                                       		// 0x0078 (0x0118) [0x0000000000000000]              
	class UWillowGFxMovie3D*                           OwningMovie;                                      		// 0x0190 (0x0004) [0x0000000000000000]              
	struct FCellContentData                            CardContents;                                     		// 0x0194 (0x0010) [0x0000000000080000]              ( CPF_Component )
	struct FCellContentData                            CellContents[ 0x2 ];                              		// 0x01A4 (0x0020) [0x0000000000080000]              ( CPF_Component )
	class UGearboxRenderTextureManager*                RTM;                                              		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UItemCardGFxObject*                          ItemCard;                                         		// 0x01C8 (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            RewardPreviewInv[ 0x2 ];                          		// 0x01CC (0x0008) [0x0000000000000000]              
	struct FString                                     Header_Experience;                                		// 0x01D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Header_Money;                                     		// 0x01E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Header_Gear;                                      		// 0x01EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Header_Or;                                        		// 0x01F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                RewardChoiceFocused;                              		// 0x0204 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77853 ];

		return pClassPointer;
	};

	void DestroyPreviewInventory ( );
	void Interrupted ( );
	void SetTooltips ( );
	void InspectItem ( class AWillowInventory* Thing );
	class AWillowInventory* GetSelectedThing ( );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void __SetCellMarks ( int Mark1, int Mark2 );
	void __SetCellInfo ( int Mine1, int Mine2 );
	void SetCellInfo ( );
	void RemoveEventListeners ( );
	void OnClickedChoice ( int RewardChoice );
	void OnRolloverChoice ( int RewardChoice );
	void OnFocusedChoice ( int RewardChoice );
	void AcceptReward ( int RewardChoice );
	void ConfigureForPlayer ( float ControllerId );
	void SetNumItemChoices ( int NumItems );
	class AWillowInventory* SpawnInventoryForRewardUI ( int RewardIndex );
	void SetUpRewardsPageItems ( );
	int GetNumItems ( );
	void SetPlotCritical ( struct FString frame, struct FString Text );
	void SetUpRewardsPage ( unsigned long bGrantAltReward );
	void FreeCellData ( );
	void InitCellData ( );
	void SetNoReward ( class UMissionDefinition* Mission, unsigned char OldStatus );
	void SetPendingMissionRewardData ( struct FPendingMissionRewardData MissionReward );
	void Init ( class UWillowGFxMovie3D* InParent );
};

UClass* UMissionRewardGFxObject::pClassPointer = NULL;

// Class WillowGame.LevelStreamingVolumeDynamic
// 0x0000 (0x01D4 - 0x01D4)
class ALevelStreamingVolumeDynamic : public ALevelStreamingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77935 ];

		return pClassPointer;
	};

};

UClass* ALevelStreamingVolumeDynamic::pClassPointer = NULL;

// Class WillowGame.LevelTransitionGFxMovie
// 0x0000 (0x0264 - 0x0264)
class ULevelTransitionGFxMovie : public UWillowGFxMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77938 ];

		return pClassPointer;
	};

};

UClass* ULevelTransitionGFxMovie::pClassPointer = NULL;

// Class WillowGame.LevelTransitionSignGFxMovie
// 0x0000 (0x0254 - 0x0254)
class ULevelTransitionSignGFxMovie : public UGFxMovieInteractiveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77940 ];

		return pClassPointer;
	};

	bool eventStart ( unsigned long StartPaused );
};

UClass* ULevelTransitionSignGFxMovie::pClassPointer = NULL;

// Class WillowGame.LiftActionSkill
// 0x01AC (0x03E0 - 0x0234)
class ALiftActionSkill : public AActionSkill
{
public:
	unsigned char                                      CurrentState;                                     		// 0x0234 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AWillowPawn*                                 LiftedPawn;                                       		// 0x0238 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              StateStartTime;                                   		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StateDuration;                                    		// 0x0240 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              SkillStartTime;                                   		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SkillDuration;                                    		// 0x0248 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bFizzled : 1;                                     		// 0x024C (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCharmed : 1;                                     		// 0x024C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bReplicatedCharmed : 1;                           		// 0x024C (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	float                                              ReleaseBufferTime;                                		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLiftBodyPair >                     LiftBodyMap;                                      		// 0x0254 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UPhaseLockDefinition*                        DefaultPhaseLockDef;                              		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UExpressionEvaluator*                        CanLiftTargetIf;                                  		// 0x0264 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              LiftDuration;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                LockDurationFormula;                              		// 0x026C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FAttributeInitializationData                LockDurationScaleFormula;                         		// 0x027C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockFadeOutTime;                                  		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftSnapTimePct;                                  		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftSnapHeightPct;                                		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftBobFrequency;                                 		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftBobAmplitude;                                 		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStartTime;                                    		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPawn*                                 DroppedPawn;                                      		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LiftStartLocation;                                		// 0x02A8 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     PrevBobLocation;                                  		// 0x02B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LiftEndLocation;                                  		// 0x02C0 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UAttributeDefinition*                        IsPhaselockedAttribute;                           		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeEffectData >              PhaselockedAttributeEffects;                      		// 0x02D0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           SavedPhaselockAttributeModifiers;                 		// 0x02DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkillDefinition*                            ResurrectSkill;                                   		// 0x02E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            RuinSkill;                                        		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            CharmSkill;                                       		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            SubsequenceSkill;                                 		// 0x02F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USkillDefinition*                            HeliosSkill;                                      		// 0x02F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     FirstPersonTranslation;                           		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FirstPersonScale;                                 		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FirstPersonParticleSystem;                        		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FirstPersonParticleSystem_Fizzled;                		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FirstPersonAttachmentName;                        		// 0x0314 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ThirdPersonTranslation;                           		// 0x031C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThirdPersonScale;                                 		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ThirdPersonParticleSystem;                        		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ThirdPersonParticleSystem_Fizzled;                		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ThirdPersonAttachmentName;                        		// 0x0334 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BubbleFXTranslation;                              		// 0x033C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              BubbleFXScale;                                    		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BubbleFXParticleSystem_FadeIn;                    		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BubbleFXParticleSystem;                           		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BubbleFXParticleSystem_FadeOut;                   		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BubbleFXAttachmentName;                           		// 0x0358 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BubbleFXIntroTime;                                		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BubbleFXOutroOverlapTime;                         		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollapseDuration;                                 		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCollapseValue;                                 		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PhaselockLifeTimeParamName;                       		// 0x0370 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SphereCollapseParamName;                          		// 0x0378 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MissTraceDistance;                                		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UWillowImpactDefinition*                     MissImpactDefinition;                             		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpecialMoveDefinition*                      PhaselockSMD_Hit;                                 		// 0x0388 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USpecialMoveDefinition*                      PhaselockSMD_Miss;                                		// 0x038C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UParticleSystem*                             HeliosFX;                                         		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollapseStartTime;                                		// 0x0394 (0x0004) [0x0000000000000000]              
	class AWillowEmitter*                              BubbleFXEmitter_FadeIn;                           		// 0x0398 (0x0004) [0x0000000000000000]              
	class AWillowEmitter*                              BubbleFXEmitter_Loop;                             		// 0x039C (0x0004) [0x0000000000000000]              
	class AWillowEmitter*                              BubbleFXEmitter_FadeOut;                          		// 0x03A0 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    FirstPersonPSC;                                   		// 0x03A4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AWillowPawn*                                 ClientLiftedPawnForFX;                            		// 0x03A8 (0x0004) [0x0000000000000000]              
	class UPointLightComponent*                        PhaselockLight;                                   		// 0x03AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LightBrightness;                                  		// 0x03B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RuinHoldTime;                                     		// 0x03B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RuinDamageScalar;                                 		// 0x03B8 (0x0004) [0x0000000000000000]              
	struct FVector                                     PawnLocWhenRuinStarted;                           		// 0x03BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UProjectileDefinition*                       SubsequenceProjectileDefinition;                  		// 0x03C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                SubsequenceProjectileChance;                      		// 0x03CC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AWillowProjectile*                           SubsequenceProjectile;                            		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77966 ];

		return pClassPointer;
	};

	float eventGetDeferredActionSkillTime ( );
	void eventEnableActionSkillHUD ( class UWillowHUDGFxMovie* HUDMovie );
	void OnCharmTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnRuinImpact ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnLiftFailed ( class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnHealedTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnKilledTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnReleasedTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnTargetIsAboutToBecomeUnlocked ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnTargetBecomesLocked ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnTargetBlocked ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnBeginLiftingTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void OnSelectedTarget ( class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle );
	void UpdateEffects ( );
	void FinishFX ( );
	void TransitionToBubbleFXOutro ( );
	void TransitionToBubbleFXLoop ( );
	void SpawnBubbleFX ( );
	void FirstPersonEffectFinished ( class UParticleSystemComponent* PSC );
	void eventRunCustomEvent ( struct FName EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData );
	void UpdatePhaselockLight ( );
	class UPhaseLockDefinition* GetPhaseLockDefinition ( class AWillowPawn* Target );
	class USpecialMoveDefinition* GetPlayerAnimation ( class AWillowPawn* NewTarget );
	void UpdateLiftedPawnMeshOffset ( float DeltaTime );
	void UpdateLiftedPawn ( float DeltaTime );
	struct FVector GetBobLocation ( float DeltaTime );
	struct FVector GetLiftLocation ( float LiftTime );
	void CheckLandTarget ( unsigned long bForceLand );
	bool PawnIsFlying ( class APawn* TestPawn );
	void DropTarget ( );
	void BeginLifting ( class AWillowPawn* BeginLiftTarget, float HeightFromGround );
	struct FVector GetLiftCheckLocation ( );
	void LiftTarget ( class AWillowPawn* BeginLiftTarget );
	void Fizzled ( );
	void PlayMissImpact ( );
	void FizzleOut ( );
	void TargetBlocked ( class AWillowPawn* NewPawn );
	void ResurrectTarget ( class AWillowPawn* NewTarget );
	bool CanResurrectTarget ( class AWillowPawn* NewTarget );
	void ApplyRuin ( );
	void Ruin ( );
	bool CanRuin ( );
	void SpawnSubsequenceProjectile ( );
	bool CanDoSubsequence ( );
	bool CanCharmTarget ( );
	void SpawnHelios ( );
	bool ShouldSpawnHelios ( );
	void InterruptPhaseLock ( );
	bool IsLiftedPawnIncapacitated ( );
	void ReleaseTarget ( );
	void StartOutro ( );
	void FinishLifting ( unsigned long bDropImmediately );
	void LockTarget ( );
	void PhaseLockTarget ( class AWillowPawn* NewTarget );
	void SelectTarget ( class AWillowPawn* NewTarget );
	bool CanPhaseLockTarget ( class AWillowPawn* NewTarget );
	bool IsPhaselocked ( class AWillowPawn* NewTarget );
	void EndSkill ( );
	void eventOnActionSkillTick ( float DeltaTime );
	void eventDestroyed ( );
	void StartActionSkillActiveAbility ( class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* AutoAimTarget );
	void OnActionSkillEnded ( );
	void OnActionSkillStarted ( class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn );
	void UpdateTargetPawn ( class AWillowPawn** TheTargetPawn );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ALiftActionSkill::pClassPointer = NULL;

// Class WillowGame.LoadCharacterLobbyGFxObject
// 0x0000 (0x0078 - 0x0078)
class ULoadCharacterLobbyGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78244 ];

		return pClassPointer;
	};

	void SetQuadrant ( int Quadrant );
	void SetTooltips ( struct FString Tooltips );
	void SetSlotData ( int SlotIndex, struct FString CharName, struct FString CharClass, struct FString CharLevel, unsigned long bIsCurrentCharacter );
	void SetScrollArrows ( unsigned long bMoreUp, unsigned long bMoreDown );
	void SetCharacterInfo ( int CharLevel, struct FString CharName, struct FString CharClass, struct FString CharPlaythrough, struct FString CharCurrentMission, struct FString CharPlotMission, struct FString CharSaveDate, struct FString CharPlayedTime );
	void SelectSlotIndex ( int SlotIndex );
	void HideCharacterInfo ( );
	void ClearSlots ( );
};

UClass* ULoadCharacterLobbyGFxObject::pClassPointer = NULL;

// Class WillowGame.MarketplaceGFxMovieDefinition
// 0x000C (0x00FC - 0x00F0)
class UMarketplaceGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	struct FString                                     DefaultFilterTag;                                 		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78485 ];

		return pClassPointer;
	};

};

UClass* UMarketplaceGFxMovieDefinition::pClassPointer = NULL;

// Class WillowGame.MatchmakingLobbyCharacterInfoGFxObject
// 0x0000 (0x0078 - 0x0078)
class UMatchmakingLobbyCharacterInfoGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78626 ];

		return pClassPointer;
	};

	void SetInfo ( struct FString CharName, struct FString CharLevel, struct FString CharClass, struct FString CharCurrentMission, struct FString CharPlotMission, struct FString CharPlaythrough );
};

UClass* UMatchmakingLobbyCharacterInfoGFxObject::pClassPointer = NULL;

// Class WillowGame.MatchmakingLobbyResultsGFxObject
// 0x0000 (0x0078 - 0x0078)
class UMatchmakingLobbyResultsGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78646 ];

		return pClassPointer;
	};

	void UpdateResult ( int ResultIndex, struct FString MatchTypeIconFrameName, struct FString StatusIconFrameName, struct FString ResultMessage );
};

UClass* UMatchmakingLobbyResultsGFxObject::pClassPointer = NULL;

// Class WillowGame.MechromancerInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UMechromancerInputContextSelector : public UDefaultInputContextSelector
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78689 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* UMechromancerInputContextSelector::pClassPointer = NULL;

// Class WillowGame.MercenaryInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UMercenaryInputContextSelector : public UDefaultInputContextSelector
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78754 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* UMercenaryInputContextSelector::pClassPointer = NULL;

// Class WillowGame.OpenedChestMessage
// 0x000C (0x0058 - 0x004C)
class UOpenedChestMessage : public UWillowLocalMessage
{
public:
	struct FString                                     OpenedChest;                                      		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79657 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UOpenedChestMessage::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderOptionsBase
// 0x0020 (0x0074 - 0x0054)
class UWillowScrollingListDataProviderOptionsBase : public UWillowScrollingListDataProviderBase
{
public:
	class UOptionsGFxMovie*                            MyOptionsMovie;                                   		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSystemOption >                     RestartSettingInitialValues;                      		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bSkipResolutionUpdate : 1;                        		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FDescriptionEntry >                 Descriptions;                                     		// 0x0068 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79669 ];

		return pClassPointer;
	};

	void Cleanup ( class UWillowScrollingList* TheList );
	void OnPop ( class UWillowScrollingList* TheList );
	void UpdateRealtimeSetting ( int EventID, class AWillowPlayerController* WPCOwner );
	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	bool HandleSliderChange ( int EventID, int NewSliderValue, class UWillowScrollingList* TheList );
	bool HandleSelectionRollover ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSelectionChange ( int EventID, class UWillowScrollingList* TheList );
	void UpdateDescriptionText ( int EventID, class UWillowScrollingList* TheList );
	void Populate ( class UWillowScrollingList* TheList );
	struct FString GetDescription ( int EventID );
	void ClearDescriptions ( class UWillowScrollingList* TheList );
	void AddDescription ( int EventID, struct FString Description );
	void AddSystemSettingListItem ( class UWillowScrollingList* TheList, struct FName SettingName, struct FString Caption, struct FString Description, unsigned long bRequiresRestart, int CurrentSettingIndexOverride, unsigned long bDisabled );
	void AddProfileSettingListItem ( class UWillowScrollingList* TheList, int ProfileSettingId, struct FString Caption, struct FString Description, unsigned long bDisabled );
	bool FindProfileData ( class AWillowPlayerController* WPCOwner, int SettingId, struct FSettingsPropertyPropertyMetaData* PropertyMetaData );
};

UClass* UWillowScrollingListDataProviderOptionsBase::pClassPointer = NULL;

// Class WillowGame.OptionsGFxObject
// 0x0000 (0x0078 - 0x0078)
class UOptionsGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79675 ];

		return pClassPointer;
	};

	void SetDescription ( struct FString Description );
	void SetTooltips ( struct FString Tooltips );
	void SetPlayerName ( struct FString PlayerName );
	void SetHeader ( struct FString Header );
	void SetAspectRatio ( struct FString AspectRatioFrame );
};

UClass* UOptionsGFxObject::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderTopLevelOptions
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderTopLevelOptions : public UWillowScrollingListDataProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79871 ];

		return pClassPointer;
	};

	class UIWillowScrollingListDataProvider* GetSubmenuForEvent ( int EventID, class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
	bool IsPCGamepadConnected ( );
	bool CanShowStorageSelector ( unsigned char Platform, int ControllerId );
	void Populate ( class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderTopLevelOptions::pClassPointer = NULL;

// Class WillowGame.PauseGFxMovie
// 0x0040 (0x0534 - 0x04F4)
class UPauseGFxMovie : public UFrontendGFxMovie
{
public:
	class UWillowGFxDialogBox*                         PauseDlg;                                         		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowGFxDialogBox*                         SavingDlg;                                        		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPauseTicker*                          SaveDurationTicker;                               		// 0x04FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SaveStartTime;                                    		// 0x0500 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AWillowPlayerController* >           PlayersToSave;                                    		// 0x0504 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MinSaveDuration;                                  		// 0x0510 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             EnteredButtons;                                   		// 0x0514 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ResumeString;                                     		// 0x0520 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class AWillowPlayerReplicationInfo*                SplitPlayerPRI;                                   		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AWillowPlayerController*                     SaveOwner;                                        		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79931 ];

		return pClassPointer;
	};

	void extFrontEndMenuOnLoad ( struct FString TargetPath );
	bool LanNetworkOptionsAvailable ( );
	bool OnlineNetworkOptionsAvailable ( );
	void OnConfirmCharacters ( );
	void PromptConfirmCharacters ( );
	void ValidatePlayers ( );
	void HandleSplitscreenLeaveAttempt ( int ControllerId );
	void PromptQuit ( );
	void ApplySaveText ( class UWillowGFxDialogBox* Dlg, int PlayerIndex, class AWillowPlayerController* WPC, unsigned long bCanSave );
	void CreateSavePromptDialog ( class AWillowPlayerController* InPlayer );
	bool PromptQuit_Ok ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	void CompleteQuitToMenu ( unsigned long bIsSplitPlayer );
	void AllPlayersSaved ( );
	void SaveNextPlayer ( float SaveDuration );
	void SavePlayer ( class AWillowPlayerController* PlayerToSave );
	void QuitToMenu ( unsigned long bSaveProfile );
	void StorageDeviceChanged ( unsigned long bIsValid, class UWillowGFxDialogBox* Dlg );
	void GetPlayer1CancelButtonString ( struct FString* Text );
	bool CanShowCharacterSelect ( int ControllerId );
	void HandlePopListFail ( );
	bool IsAllowedToUnpause ( int ControllerId );
	void TryToUnpause ( int ControllerId );
	bool SharedHandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	void PreviewInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool ShouldDoInitialDeviceSelection ( );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UPauseGFxMovie::pClassPointer = NULL;

// Class WillowGame.PCContextMenuObject
// 0x007C (0x0244 - 0x01C8)
class UPCContextMenuObject : public UGFxMoviePlayer
{
public:
	class UGFxObject*                                  MenuListObject;                                   		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     Str_Buy;                                          		// 0x01CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Str_BuyBack;                                      		// 0x01D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Str_Sell;                                         		// 0x01E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Str_SellTrash;                                    		// 0x01F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Str_Compare;                                      		// 0x01FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Str_Inspect;                                      		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Str_SelectCompare;                                		// 0x0214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Str_Drop;                                         		// 0x0220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMenuClosed__Delegate;                         		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMenuItemClicked__Delegate;                    		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80086 ];

		return pClassPointer;
	};

	void AddToMenuItemList ( struct FString Caption, struct FString Action, TArray< struct FPCContextMenuItem >* Items );
	void extOnMenuItemClicked ( struct FString Action );
	void extOnMenuAbort ( );
	void extOnMenuClosed ( );
	void ShowFor ( class UGFxMoviePlayer* Player );
	void Show ( float X, float Y );
	void AddMenuItems ( TArray< struct FPCContextMenuItem > Items );
	void AddMenuItem ( struct FString Caption, struct FString Action );
	void FocusOn ( class UGFxObject* Thing );
	void OnClose ( );
	void Init ( class ULocalPlayer* LocPlay );
	void OnMenuItemClicked ( struct FString Action );
	void OnMenuClosed ( );
};

UClass* UPCContextMenuObject::pClassPointer = NULL;

// Class WillowGame.PlaceableDynamicSMActor
// 0x0000 (0x01C4 - 0x01C4)
class APlaceableDynamicSMActor : public ADynamicSMActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80351 ];

		return pClassPointer;
	};

};

UClass* APlaceableDynamicSMActor::pClassPointer = NULL;

// Class WillowGame.PlayerBehaviorBase
// 0x0000 (0x004C - 0x004C)
class UPlayerBehaviorBase : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80364 ];

		return pClassPointer;
	};

};

UClass* UPlayerBehaviorBase::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_CameraAnim
// 0x0004 (0x0050 - 0x004C)
class UPlayerBehavior_CameraAnim : public UPlayerBehaviorBase
{
public:
	class UCameraAnim*                                 Anim;                                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80366 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_CameraAnim::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_DropItems
// 0x0028 (0x00CC - 0x00A4)
class UPlayerBehavior_DropItems : public UBehavior_DropItems
{
public:
	struct FName                                       ConfigurationName;                                		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FBehaviorContextData                        TargetContext;                                    		// 0x00AC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        LocationContext;                                  		// 0x00BC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80377 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_DropItems::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_ForceFeedback
// 0x0008 (0x0054 - 0x004C)
class UPlayerBehavior_ForceFeedback : public UPlayerBehaviorBase
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x004C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      ForWeaponFiring : 1;                              		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80395 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_ForceFeedback::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_Melee
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_Melee : public UPlayerBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80407 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_Melee::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_PlayEchoCall
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_PlayEchoCall : public UPlayerBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80417 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_PlayEchoCall::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_RegisterFastTravelStation
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_RegisterFastTravelStation : public UPlayerBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80426 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_RegisterFastTravelStation::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_Reload
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_Reload : public UPlayerBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80436 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_Reload::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_SetCurrentProjectile
// 0x0004 (0x0050 - 0x004C)
class UPlayerBehavior_SetCurrentProjectile : public UPlayerBehaviorBase
{
public:
	class UProjectileDefinition*                       CurrentProjectile;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80446 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_SetCurrentProjectile::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_SpawnCurrentProjectile
// 0x0020 (0x006C - 0x004C)
class UPlayerBehavior_SpawnCurrentProjectile : public UPlayerBehaviorBase
{
public:
	class UProjectileDefinition*                       ProjectileToSpawn;                                		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bConsumeResource : 1;                             		// 0x0050 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSpawnFromLeftHand : 1;                           		// 0x0050 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNoVelocity : 1;                                  		// 0x0050 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetProjectileToGrenadeMod : 1;                   		// 0x0050 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSaveProjectileReference : 1;                     		// 0x0050 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        InstanceDataContext;                              		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SavedReferenceName;                               		// 0x0064 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80457 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_SpawnCurrentProjectile::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_SpawnTeleporter
// 0x0004 (0x0050 - 0x004C)
class UPlayerBehavior_SpawnTeleporter : public UPlayerBehaviorBase
{
public:
	class UPersonalTeleporterDefinition*               PersonalTeleporterDefinition;                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80477 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_SpawnTeleporter::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_ThrowGrenade
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_ThrowGrenade : public UPlayerBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80488 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_ThrowGrenade::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_ToggleMeleeWeapon
// 0x0004 (0x0050 - 0x004C)
class UPlayerBehavior_ToggleMeleeWeapon : public UPlayerBehaviorBase
{
public:
	unsigned long                                      bAttach : 1;                                      		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bApplyToFirstPerson : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bApplyToThirdPerson : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80498 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_ToggleMeleeWeapon::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_ToggleRevive
// 0x0004 (0x0050 - 0x004C)
class UPlayerBehavior_ToggleRevive : public UPlayerBehaviorBase
{
public:
	unsigned long                                      bStart : 1;                                       		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80511 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_ToggleRevive::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_UnlockAchievement
// 0x0001 (0x004D - 0x004C)
class UPlayerBehavior_UnlockAchievement : public UPlayerBehaviorBase
{
public:
	unsigned char                                      Achievement;                                      		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80522 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_UnlockAchievement::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_UnlockAchievementForAllPlayers
// 0x0008 (0x0054 - 0x004C)
class UPlayerBehavior_UnlockAchievementForAllPlayers : public UPlayerBehaviorBase
{
public:
	unsigned char                                      Achievement;                                      		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinimumPlayersRequired;                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80533 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_UnlockAchievementForAllPlayers::pClassPointer = NULL;

// Class WillowGame.PlayerBehavior_ViewShake
// 0x0044 (0x0090 - 0x004C)
class UPlayerBehavior_ViewShake : public UPlayerBehaviorBase
{
public:
	struct FGearboxViewShakeInfo                       ShakeInfo;                                        		// 0x004C (0x0044) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80545 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UPlayerBehavior_ViewShake::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AIProvoke
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_AIProvoke : public USequenceAction
{
public:
	class AActor*                                      Provoker;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81610 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AIProvoke::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AIScriptedHold
// 0x0005 (0x00A9 - 0x00A4)
class UWillowSeqAct_AIScriptedHold : public USequenceAction
{
public:
	unsigned long                                      bAttackTarget : 1;                                		// 0x00A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      Option;                                           		// 0x00A8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81616 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AIScriptedHold::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AIScriptedFollow
// 0x0014 (0x00B8 - 0x00A4)
class UWillowSeqAct_AIScriptedFollow : public USequenceAction
{
public:
	class AActor*                                      ToFollow;                                         		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanShoot : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFormation : 1;                                		// 0x00A8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned char                                      Action;                                           		// 0x00AC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Stance;                                           		// 0x00AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              CatchupDistance;                                  		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HoldStillDistance;                                		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81619 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AIScriptedFollow::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AIScriptedDeath
// 0x0014 (0x00B8 - 0x00A4)
class UWillowSeqAct_AIScriptedDeath : public USequenceAction
{
public:
	class UDamageTypeDefinition*                       DamageType;                                       		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DeathType;                                        		// 0x00A8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimDefinition*                       Anim;                                             		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowAnimDefinition*                       EditInlineAnim;                                   		// 0x00B0 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class AActor*                                      Killer;                                           		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81624 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AIScriptedDeath::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AICombatVolume
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_AICombatVolume : public USequenceAction
{
public:
	class AVolume*                                     CombatVolume;                                     		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Option;                                           		// 0x00A8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;         		// 0x00AC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81631 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AICombatVolume::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_Attach
// 0x0024 (0x0070 - 0x004C)
class UProjectileBehavior_Attach : public UProjectileBehaviorBase
{
public:
	class UAkEvent*                                    AttachAkEvent;                                    		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      HitActor;                                         		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HitNormal;                                        		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     HitLocation;                                      		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BoneIndex;                                        		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81660 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_Attach::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_Detonate
// 0x0001 (0x004D - 0x004C)
class UProjectileBehavior_Detonate : public UProjectileBehaviorBase
{
public:
	unsigned char                                      TargetAllegiance;                                 		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81695 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_Detonate::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_FindHomingTarget
// 0x0010 (0x005C - 0x004C)
class UProjectileBehavior_FindHomingTarget : public UProjectileBehaviorBase
{
public:
	unsigned char                                      TargetType;                                       		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TargetSearchFOVAngle;                             		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TargetSearchRange;                                		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bNotInstigator : 1;                               		// 0x0058 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreFOVZTest : 1;                              		// 0x0058 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBestForwardTarget : 1;                           		// 0x0058 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRetryIfTargetNotFound : 1;                       		// 0x0058 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUniqueTarget : 1;                                		// 0x0058 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81708 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_FindHomingTarget::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_LevelOff
// 0x0008 (0x0054 - 0x004C)
class UProjectileBehavior_LevelOff : public UProjectileBehaviorBase
{
public:
	float                                              DesiredWorldZToLevelOff;                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnSpeed;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81726 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_LevelOff::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_SetDamageTypeDefinition
// 0x0004 (0x0050 - 0x004C)
class UProjectileBehavior_SetDamageTypeDefinition : public UProjectileBehaviorBase
{
public:
	class UWillowDamageTypeDefinition*                 DamageTypeDefinition;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81738 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_SetDamageTypeDefinition::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_SetExplosionDefinition
// 0x0004 (0x0050 - 0x004C)
class UProjectileBehavior_SetExplosionDefinition : public UProjectileBehaviorBase
{
public:
	class UExplosionDefinition*                        ExplosionDefinition;                              		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81749 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_SetExplosionDefinition::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_SetHomingTarget
// 0x0004 (0x0050 - 0x004C)
class UProjectileBehavior_SetHomingTarget : public UProjectileBehaviorBase
{
public:
	class AActor*                                      AssignedTarget;                                   		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81760 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_SetHomingTarget::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_SetProximity
// 0x0008 (0x0054 - 0x004C)
class UProjectileBehavior_SetProximity : public UProjectileBehaviorBase
{
public:
	float                                              ProximityRadius;                                  		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ProximityHeight;                                  		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81771 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_SetProximity::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_SetSpeed
// 0x0008 (0x0054 - 0x004C)
class UProjectileBehavior_SetSpeed : public UProjectileBehaviorBase
{
public:
	float                                              NewSpeed;                                         		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SpeedMultiplier;                                  		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81783 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_SetSpeed::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_SetStickyGrenade
// 0x0000 (0x004C - 0x004C)
class UProjectileBehavior_SetStickyGrenade : public UProjectileBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81795 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_SetStickyGrenade::pClassPointer = NULL;

// Class WillowGame.ProjectileBehavior_TagPayloadType
// 0x0001 (0x004D - 0x004C)
class UProjectileBehavior_TagPayloadType : public UProjectileBehaviorBase
{
public:
	unsigned char                                      PayloadType;                                      		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81805 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UProjectileBehavior_TagPayloadType::pClassPointer = NULL;

// Class WillowGame.ProximityActor
// 0x000C (0x0194 - 0x0188)
class AProximityActor : public AActor
{
public:
	float                                              ProximityRadius;                                  		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              ProximityHeight;                                  		// 0x018C (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          ProximityCylinder;                                		// 0x0190 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82050 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void SetProximitySize ( float NewProximityRadius, float NewProximityHeight );
};

UClass* AProximityActor::pClassPointer = NULL;

// Class WillowGame.PS3InvitesPopupGFxObject
// 0x0000 (0x0078 - 0x0078)
class UPS3InvitesPopupGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82064 ];

		return pClassPointer;
	};

	void Hide ( );
	void Show ( );
	void Refresh ( );
	void SelectionDown ( );
	void SelectionUp ( );
	void SetSelectedInviteIndex ( int Index );
	int GetSelectedInviteIndex ( );
	void ClearInvites ( );
	void AddInvite ( struct FString InviterName, struct FString Message );
};

UClass* UPS3InvitesPopupGFxObject::pClassPointer = NULL;

// Class WillowGame.PsychoInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UPsychoInputContextSelector : public UDefaultInputContextSelector
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82079 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* UPsychoInputContextSelector::pClassPointer = NULL;

// Class WillowGame.QuestAcceptGFxDefinition
// 0x0080 (0x0170 - 0x00F0)
class UQuestAcceptGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	class UGFxTextListDefinition*                      MissionTextDefinition;                            		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumEntriesOnMissionList;                          		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMissionStatusPresentation                  Pres_Available;                                   		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_Active;                                      		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_ReadyToTurnIn;                               		// 0x0118 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_NotStarted;                                  		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_Complete;                                    		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_Ineligible;                                  		// 0x0148 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FMissionStatusPresentation                  Pres_Failed;                                      		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUsePPOverride : 1;                               		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PostProcessInterpolationTime;                     		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82086 ];

		return pClassPointer;
	};

};

UClass* UQuestAcceptGFxDefinition::pClassPointer = NULL;

// Class WillowGame.RagdollRemovalPopulationAspect
// 0x0008 (0x0044 - 0x003C)
class URagdollRemovalPopulationAspect : public UPopulationAspect
{
public:
	float                                              SecondsBeforeConsideringRagdollRemoval;           		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondsBeforeVisibleRagdollRemoval;               		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82251 ];

		return pClassPointer;
	};

	void eventOnSpawnActor ( class AActor* SpawnedActor );
};

UClass* URagdollRemovalPopulationAspect::pClassPointer = NULL;

// Class WillowGame.ReferenceSet
// 0x000C (0x0048 - 0x003C)
class UReferenceSet : public UObject
{
public:
	TArray< struct FObjectReference >                  References;                                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82361 ];

		return pClassPointer;
	};

};

UClass* UReferenceSet::pClassPointer = NULL;

// Class WillowGame.ResourcePoolAttributeDefinition
// 0x0004 (0x0060 - 0x005C)
class UResourcePoolAttributeDefinition : public UAttributeDefinition
{
public:
	class UResourceDefinition*                         Resource;                                         		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82367 ];

		return pClassPointer;
	};

};

UClass* UResourcePoolAttributeDefinition::pClassPointer = NULL;

// Class WillowGame.SeqAct_GetInstanceData
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_GetInstanceData : public USequenceAction
{
public:
	struct FName                                       InstanceDataName;                                 		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     InObject;                                         		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UObject*                                     OutObject;                                        		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82463 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetInstanceData::pClassPointer = NULL;

// Class WillowGame.SeqEvent_SpawnedMissionPickup
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_SpawnedMissionPickup : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82517 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_SpawnedMissionPickup::pClassPointer = NULL;

// Class WillowGame.ShieldBarGFxObject
// 0x0004 (0x007C - 0x0078)
class UShieldBarGFxObject : public UGFxObject
{
public:
	int                                                CachedCurrentShield;                              		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82577 ];

		return pClassPointer;
	};

	void __SetHealth ( int CurrentShield, int MaxShield );
	void SetShield ( int CurrentShield, int MaxShield );
};

UClass* UShieldBarGFxObject::pClassPointer = NULL;

// Class WillowGame.SimpleVolume
// 0x0000 (0x01BC - 0x01BC)
class ASimpleVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82623 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
};

UClass* ASimpleVolume::pClassPointer = NULL;

// Class WillowGame.SirenInputContextSelector
// 0x0000 (0x003C - 0x003C)
class USirenInputContextSelector : public UDefaultInputContextSelector
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82629 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* USirenInputContextSelector::pClassPointer = NULL;

// Class WillowGame.SkillPointsFeedbackMessage
// 0x000C (0x0058 - 0x004C)
class USkillPointsFeedbackMessage : public UWillowLocalMessage
{
public:
	struct FString                                     HasSkillPoints;                                   		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82786 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USkillPointsFeedbackMessage::pClassPointer = NULL;

// Class WillowGame.SoldierInputContextSelector
// 0x0000 (0x003C - 0x003C)
class USoldierInputContextSelector : public UDefaultInputContextSelector
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83129 ];

		return pClassPointer;
	};

	struct FName SelectContext ( );
};

UClass* USoldierInputContextSelector::pClassPointer = NULL;

// Class WillowGame.SpecialMove_FirstPersonOffHand
// 0x0000 (0x00C0 - 0x00C0)
class USpecialMove_FirstPersonOffHand : public USpecialMove_FirstPerson
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83251 ];

		return pClassPointer;
	};

	void StopWeaponRecoilAnim ( class USpecialMoveInterface* SMI );
};

UClass* USpecialMove_FirstPersonOffHand::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_JumpAnimStart
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_JumpAnimStart : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83284 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_JumpAnimStart::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_JumpAnimIdle
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_JumpAnimIdle : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83307 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_JumpAnimIdle::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_JumpAnimStop
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_JumpAnimStop : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83312 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_JumpAnimStop::pClassPointer = NULL;

// Class WillowGame.SpecialMove_WeaponActionOffHand
// 0x0000 (0x00CC - 0x00CC)
class USpecialMove_WeaponActionOffHand : public USpecialMove_WeaponAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83348 ];

		return pClassPointer;
	};

};

UClass* USpecialMove_WeaponActionOffHand::pClassPointer = NULL;

// Class WillowGame.StashGFxMovie
// 0x002C (0x04D0 - 0x04A4)
class UStashGFxMovie : public UTwoPanelInterfaceGFxMovie
{
public:
	struct FString                                     StashTitle;                                       		// 0x04A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StashAddTip;                                      		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UWillowInventoryStorage*                     StashStorage;                                     		// 0x04BC (0x0004) [0x0000000000000000]              
	struct FSortFilterConfiguration                    StorageSortConfiguration;                         		// 0x04C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83386 ];

		return pClassPointer;
	};

	void SetItemLocation ( class AWillowInventory* Thing );
	void OnInventoryPanelSetActive ( class UBaseInventoryPanelGFxObject* PanelObject, unsigned long bActive );
	void GetSortConfigDataForPanel ( class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData );
	class UIWillowStorable* GetStorageReferenceForTransferring ( );
	class UIWillowStorable* GetStorageReferenceForSwapping ( );
	void GetPlayerPanelItems ( TArray< class AWillowInventory* >* Things );
	void GetStoragePanelItems ( TArray< class AWillowInventory* >* Things, int* UnloadableCount );
	struct FString GetAddTip ( );
	struct FString GetTitle ( );
	void OnLeftPanelInit ( class UInventoryListPanelGFxObject* LeftPanel );
	void extInitMainPanel ( struct FString MainPanelTargetPath );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UStashGFxMovie::pClassPointer = NULL;

// Class WillowGame.TradingOffersPanelGFxObject
// 0x001C (0x00C8 - 0x00AC)
class UTradingOffersPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	unsigned long                                      bBrowsingCells : 1;                               		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUsingMoneyWidget : 1;                            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSelectedTradeAction : 1;                         		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSelectedDuelAction : 1;                          		// 0x00AC (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                SelectedCellSuffix;                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                NonCellButtonFocused;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	class AWillowInventory*                            OfferingThing;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __MoveFunction__Delegate;                         		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84798 ];

		return pClassPointer;
	};

	void CleanUpAfterCancelledDrag ( );
	void PrepareForFinishDrag ( int CellSuffix );
	bool CanFinishDragOnCell ( int CellSuffix );
	void OnStartDrag ( class UGFxObject* StartingCell, class UGFxObject* OutDragData );
	void __SetCellMarks ( int Mark1, int Mark2, int Mark3, int Mark4, int Mark5, int Mark6, int Mark7, int Mark8 );
	void __SetCellInfo ( int Mine1, int Mine2, int Mine3, int Mine4, int Other1, int Other2, int Other3, int Other4 );
	void extOnTrashFavChanged ( int Index, int Mark, unsigned long bEnabled );
	int GetMarkFromInventory ( class AWillowInventory* WInv );
	void SetCellInfo ( );
	int GetCellSuffixBasedOnThing ( class AWillowInventory* InOfferingThing );
	void CancelOffer ( );
	void StopOffer ( );
	void StartOffer ( class AWillowInventory* InOfferingThing );
	bool CanUseCLIKButtons ( );
	bool CanStartOffer ( );
	bool OfferingMove ( unsigned char Dir );
	void __SetSelectedButton ( int ButtonIndex, unsigned long bIsForPC );
	void SetSelectedButton ( );
	bool ButtonsMove ( unsigned char Dir );
	bool CellMove ( unsigned char Dir );
	class UGFxObject* GetCurrentSelectedButton ( );
	class UGFxObject* GetCurrentSelectedCell ( );
	void extOnCellSelected ( int InSelectedCellSuffix );
	class AWillowInventory* GetThingByIndex ( int Index );
	class AWillowInventory* GetSelectedThing ( );
	void __SetSelectedCell ( int SelectedCell );
	void SetSelectedCell ( );
	bool PanelOnInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool BlockInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool DeferInput ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool Init ( class UBaseTopLevelPanelGFxObject* InParentPanel, struct FName InPanelName );
	bool MoveFunction ( unsigned char Dir );
};

UClass* UTradingOffersPanelGFxObject::pClassPointer = NULL;

// Class WillowGame.TurretWeaponTypeDefinition
// 0x0000 (0x0680 - 0x0680)
class UTurretWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85028 ];

		return pClassPointer;
	};

};

UClass* UTurretWeaponTypeDefinition::pClassPointer = NULL;

// Class WillowGame.UBMGameOverGFxMovie
// 0x0008 (0x026C - 0x0264)
class UUBMGameOverGFxMovie : public UWillowGFxMovie
{
public:
	unsigned long                                      bCanContinue : 1;                                 		// 0x0264 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class UUBMGameOverGFxObject*                       GameOverClip;                                     		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85168 ];

		return pClassPointer;
	};

	void extEnableGameOverScreenInput ( );
	void extGameOverClipReady ( struct FString TargetPath );
	void PopulatePlayerInfo ( );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UUBMGameOverGFxMovie::pClassPointer = NULL;

// Class WillowGame.UBMGameOverGFxObject
// 0x0000 (0x0078 - 0x0078)
class UUBMGameOverGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85170 ];

		return pClassPointer;
	};

	void SetPlayerInfo ( struct FString Gamertag, struct FString TimePlayed, struct FString PlayerLevel, struct FString MissionsComplete, struct FString ChallengesComplete, struct FString FavoriteManufacturer, struct FString FavoriteWeaponType, struct FString KilledBy );
};

UClass* UUBMGameOverGFxObject::pClassPointer = NULL;

// Class WillowGame.VehicleChoiceInfoCardGFxObject
// 0x0000 (0x0078 - 0x0078)
class UVehicleChoiceInfoCardGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85248 ];

		return pClassPointer;
	};

	void TryScrollDown ( );
	void TryScrollUp ( );
	void TryScrollRight ( );
	void TryScrollLeft ( );
	void ConfigureSelectedSkinTypeIndex ( int SelectedIndex );
	void ConfigureSelectedVehicleTypeIndex ( int SelectedIndex );
	void ConfigureVehicleTypeCell ( int CellIndex, unsigned long bEquipped, unsigned long bNew );
	void ConfigureDisplayText ( struct FString DisplayText );
	void ShowSkinChoices ( );
	void ShowVehicleChoices ( );
	void Hide ( );
	void PopulateSkinList ( TArray< struct FString > ListItems, int EquippedItemIndex );
	void EndAddVehicleCells ( );
	void AddVehicleTypeCell ( struct FString IconMoviePath );
	void BeginAddVehicleCells ( );
};

UClass* UVehicleChoiceInfoCardGFxObject::pClassPointer = NULL;

// Class WillowGame.VehicleFamilySelectorGFxObject
// 0x0000 (0x0078 - 0x0078)
class UVehicleFamilySelectorGFxObject : public UGFxObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85564 ];

		return pClassPointer;
	};

	void TryScrollDown ( );
	void TryScrollUp ( );
	void SetSelectedVehicleFamilyIndex ( int SelectedIndex );
	void EndAddCells ( );
	void AddCell ( struct FString Caption, struct FString IconMoviePath );
	void BeginAddCells ( );
};

UClass* UVehicleFamilySelectorGFxObject::pClassPointer = NULL;

// Class WillowGame.VehicleWeaponTypeDefinition
// 0x0008 (0x0688 - 0x0680)
class UVehicleWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:
	struct FName                                       WeaponMeshInstanceDataName;                       		// 0x0680 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85928 ];

		return pClassPointer;
	};

};

UClass* UVehicleWeaponTypeDefinition::pClassPointer = NULL;

// Class WillowGame.VendingMachineFeedbackGFxObject
// 0x0030 (0x00A8 - 0x0078)
class UVendingMachineFeedbackGFxObject : public UGFxObject
{
public:
	struct FString                                     PurchasedLabel;                                   		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SoldLabel;                                        		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InsufficientFundsLabel;                           		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FullLabel;                                        		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85972 ];

		return pClassPointer;
	};

	void Trigger ( struct FString FrameLabel, struct FString LabelText );
	void TriggerCannotCarryOrUse ( );
	void TriggerCannotAfford ( );
	void TriggerSold ( );
	void TriggerPurchased ( );
};

UClass* UVendingMachineFeedbackGFxObject::pClassPointer = NULL;

// Class WillowGame.WeaponShotDebug
// 0x000C (0x0194 - 0x0188)
class AWeaponShotDebug : public AActor
{
public:
	class UArrowComponent*                             AimArrow;                                         		// 0x0188 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UArrowComponent*                             ShotArrow;                                        		// 0x018C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UArrowComponent*                             SpreadShotArrow;                                  		// 0x0190 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86403 ];

		return pClassPointer;
	};

	void FinalizeComponentInitialization ( unsigned long bHideAimArrow, unsigned long bHideShotArrow, unsigned long bHideSpreadArrow );
};

UClass* AWeaponShotDebug::pClassPointer = NULL;

// Class WillowGame.WillowAIEncounterComponent
// 0x0000 (0x01C4 - 0x01C4)
class UWillowAIEncounterComponent : public UWillowAIDenComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86501 ];

		return pClassPointer;
	};

};

UClass* UWillowAIEncounterComponent::pClassPointer = NULL;

// Class WillowGame.WillowAnimNode_Audio
// 0x000B (0x00D0 - 0x00C5)
class UWillowAnimNode_Audio : public UAnimNodeBlendBase
{
public:
	class UAkEvent*                                    StartAkEvent;                                     		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkEvent*                                    StopAkEvent;                                      		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86529 ];

		return pClassPointer;
	};

	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	bool IsValid ( );
};

UClass* UWillowAnimNode_Audio::pClassPointer = NULL;

// Class WillowGame.WillowPickupMessage
// 0x0000 (0x004C - 0x004C)
class UWillowPickupMessage : public UWillowLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87118 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UWillowPickupMessage::pClassPointer = NULL;

// Class WillowGame.WillowConsole
// 0x0000 (0x01D0 - 0x01D0)
class UWillowConsole : public UConsole
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88814 ];

		return pClassPointer;
	};

};

UClass* UWillowConsole::pClassPointer = NULL;

// Class WillowGame.WillowDamageType_Bullet
// 0x0000 (0x0080 - 0x0080)
class UWillowDamageType_Bullet : public UWillowDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89099 ];

		return pClassPointer;
	};

};

UClass* UWillowDamageType_Bullet::pClassPointer = NULL;

// Class WillowGame.WillowDmgSource_MeleeWithBlade
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_MeleeWithBlade : public UWillowDmgSource_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89271 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgSource_MeleeWithBlade::pClassPointer = NULL;

// Class WillowGame.WillowDmgType_VehicleCollision
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgType_VehicleCollision : public UWillowDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89273 ];

		return pClassPointer;
	};

};

UClass* UWillowDmgType_VehicleCollision::pClassPointer = NULL;

// Class WillowGame.WillowEmit_BodyFlame
// 0x0000 (0x0218 - 0x0218)
class AWillowEmit_BodyFlame : public AWillowEmit_HitEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89581 ];

		return pClassPointer;
	};

};

UClass* AWillowEmit_BodyFlame::pClassPointer = NULL;

// Class WillowGame.WillowEmitterPool
// 0x0000 (0x01F0 - 0x01F0)
class AWillowEmitterPool : public AEmitterPool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89584 ];

		return pClassPointer;
	};

};

UClass* AWillowEmitterPool::pClassPointer = NULL;

// Class WillowGame.WillowPendingLevelPlayerController
// 0x0000 (0x1988 - 0x1988)
class AWillowPendingLevelPlayerController : public AWillowPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89781 ];

		return pClassPointer;
	};

	void HandleSignInChange ( );
	unsigned char eventGetLoginStatus ( );
	void ClearPlayerStandIn ( class APlayerReplicationInfo* PRI );
	class APlayerStandIn* GetPlayerStandIn ( class APlayerReplicationInfo* PRI );
	void GenericPlayerInitialization ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* AWillowPendingLevelPlayerController::pClassPointer = NULL;

// Class WillowGame.WillowGFxBuddyPlane
// 0x0000 (0x0264 - 0x0264)
class UWillowGFxBuddyPlane : public UWillowGFxMovie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89799 ];

		return pClassPointer;
	};

};

UClass* UWillowGFxBuddyPlane::pClassPointer = NULL;

// Class WillowGame.WillowGFxEditDialog
// 0x001C (0x0280 - 0x0264)
class UWillowGFxEditDialog : public UWillowGFxMovie
{
public:
	class UWillowGFxLobbyTools*                        Tools;                                            		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMenuItemCallback >                 MenuItemCallbacks;                                		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMenuItemClicked__Delegate;                    		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90185 ];

		return pClassPointer;
	};

	struct FString GetDefaultEditBoxValue ( );
	void DisplayOkBox ( struct FString CaptionFile, struct FString CaptionSection, struct FString InitialEditValue, struct FScriptDelegate OnClicked, unsigned long bAutoFocusEditBox );
	void extMenuItemClicked ( int PlayerID, struct FString STag );
	struct FString GetEditBoxValueForTag ( struct FName Tag );
	void SetDialogueText ( struct FString MarkedUpDialogueText );
	void SetCaptionText ( struct FString MarkedUpCaptionText );
	void ApplyLayout ( );
	void AddMenuItem ( struct FString Label, struct FName Tag, struct FScriptDelegate OnClicked );
	void AddEditItem ( struct FString Label, struct FName Tag, struct FString InitialText, struct FScriptDelegate OnClicked );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	int GetLocalPlayerID ( int PlayerIndex );
	void eventOnClose ( );
	bool eventStart ( unsigned long StartPaused );
	void OnMenuItemClicked ( class UWillowGFxEditDialog* EditDialog );
};

UClass* UWillowGFxEditDialog::pClassPointer = NULL;

// Class WillowGame.WillowGFxLobbyTools
// 0x0014 (0x0050 - 0x003C)
class UWillowGFxLobbyTools : public UObject
{
public:
	class UWillowGFxMovie*                             Movie;                                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     InputMenuTag;                                     		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                InputPlayerID;                                    		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90192 ];

		return pClassPointer;
	};

	void FinishInput ( unsigned long bSuccessful );
	void BeginInputText ( int PlayerID, struct FString MenuTag, int MaxChars, struct FString CurrentValue, struct FString Title, struct FString Description );
	void AS_SetArgU ( int Idx, TArray< struct FASValue >* args );
	void AS_SetArgB ( int Idx, unsigned long B, TArray< struct FASValue >* args );
	void AS_SetArgS ( int Idx, struct FString S, struct FString Undefined, TArray< struct FASValue >* args );
	void AS_SetArgI ( int Idx, int N, int Undefined, TArray< struct FASValue >* args );
	void AS_SetArgF ( int Idx, float N, float Undefined, TArray< struct FASValue >* args );
	void InvokeNoArgs ( struct FString Method );
	void menuSetValue ( int PlayerID, struct FString MenuTag, struct FString Value );
	struct FString menuGetValue ( int PlayerID, struct FString MenuTag );
	void menuAddEditItem ( struct FString menuCaption, struct FString MenuTag, struct FString Options, struct FString Commands );
	void menuAddSlider ( struct FString menuCaption, struct FString MenuTag, struct FString Options, struct FString Commands );
	void menuUpdateSpinner ( int PlayerID, struct FString MenuTag, struct FString Choices );
	void menuAddSpinner ( struct FString menuCaption, struct FString MenuTag, struct FString Choices, struct FString Commands );
	void menuAddCharacterItem ( int menuDepth, int MenuID, int CharLevel, struct FString CharClass, struct FString CharName, struct FString Command, struct FString altCommand );
	void menuAddItem ( int menuDepth, struct FString menuCaption, struct FString MenuTag, struct FString Command, struct FString altCommand );
	void menuEnd ( );
	void menuStart ( int PlayerID, struct FString MenuTag );
	bool inNeedsInput ( int PlayerID );
	void inSelect ( int PlayerID, struct FString Context );
	void inBack ( int PlayerID );
	void inPrev ( int PlayerID );
	void inNext ( int PlayerID );
	void inMinus ( int PlayerID );
	void inPlus ( int PlayerID );
	void inCloseAllMenus ( int PlayerID );
	void inFocus ( int PlayerID, unsigned long bFocus );
	void Init ( class UWillowGFxMovie* inMovie );
};

UClass* UWillowGFxLobbyTools::pClassPointer = NULL;

// Class WillowGame.WillowGFxTrainingDialogBox
// 0x0005 (0x02F9 - 0x02F4)
class UWillowGFxTrainingDialogBox : public UWillowGFxDialogBox
{
public:
	float                                              DelayUntilShowOk;                                 		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      StatusMenuTab;                                    		// 0x02F8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90792 ];

		return pClassPointer;
	};

	void OnClose ( );
	void OnTick ( );
	void DisplayDelayedOkBoxForTraining ( struct FString Text, struct FString Caption, float OkDelay );
	void Accepted ( int ControllerId );
	void Cancelled ( int ControllerId );
	bool HandleInputKey ( int ControllerId, struct FName ukey, unsigned char uevent );
	bool eventStart ( unsigned long StartPaused );
};

UClass* UWillowGFxTrainingDialogBox::pClassPointer = NULL;

// Class WillowGame.WillowGFxTrainingDialogBox_NoPause
// 0x0003 (0x02FC - 0x02F9)
class UWillowGFxTrainingDialogBox_NoPause : public UWillowGFxTrainingDialogBox
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90815 ];

		return pClassPointer;
	};

};

UClass* UWillowGFxTrainingDialogBox_NoPause::pClassPointer = NULL;

// Class WillowGame.WillowInteractiveObjectAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UWillowInteractiveObjectAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91698 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UWillowInteractiveObjectAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.WillowInventoryManagerAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UWillowInventoryManagerAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92073 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UWillowInventoryManagerAttributeContextResolver::pClassPointer = NULL;

// Class WillowGame.WillowLANGameSearch
// 0x0000 (0x0100 - 0x0100)
class UWillowLANGameSearch : public UWillowOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92293 ];

		return pClassPointer;
	};

};

UClass* UWillowLANGameSearch::pClassPointer = NULL;

// Class WillowGame.WillowLockWarningMessage
// 0x0038 (0x0084 - 0x004C)
class UWillowLockWarningMessage : public UWillowLocalMessage
{
public:
	struct FString                                     MissileLockOnString;                              		// 0x004C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AvrilLockOnString;                                		// 0x0058 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RadarLockString;                                  		// 0x0064 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SPMAAcquiredString;                               		// 0x0070 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FColor                                      RedColor;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	struct FColor                                      YellowColor;                                      		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93064 ];

		return pClassPointer;
	};

	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	unsigned char AnnouncementLevel ( unsigned char MessageIndex );
};

UClass* UWillowLockWarningMessage::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_AILookAt
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_AILookAt : public USequenceAction
{
public:
	class AActor*                                      LookAt;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93228 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_AILookAt::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSearchSpecific
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchSpecific : public UWillowOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93542 ];

		return pClassPointer;
	};

};

UClass* UWillowOnlineGameSearchSpecific::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSearchNarrow
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchNarrow : public UWillowOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93543 ];

		return pClassPointer;
	};

};

UClass* UWillowOnlineGameSearchNarrow::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSearchBroad
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchBroad : public UWillowOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93544 ];

		return pClassPointer;
	};

};

UClass* UWillowOnlineGameSearchBroad::pClassPointer = NULL;

// Class WillowGame.WillowOnlineGameSearchCustom
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchCustom : public UWillowOnlineGameSearch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93545 ];

		return pClassPointer;
	};

};

UClass* UWillowOnlineGameSearchCustom::pClassPointer = NULL;

// Class WillowGame.WillowTeleporterExitPoint
// 0x0004 (0x018C - 0x0188)
class AWillowTeleporterExitPoint : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0188 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93829 ];

		return pClassPointer;
	};

};

UClass* AWillowTeleporterExitPoint::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_DuelChallengeIssued
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_DuelChallengeIssued : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94605 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_DuelChallengeIssued::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_DuelChallengeAccepted
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_DuelChallengeAccepted : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94608 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_DuelChallengeAccepted::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_PlayArmAnimation
// 0x0001 (0x00A5 - 0x00A4)
class UWillowSeqAct_PlayArmAnimation : public USequenceAction
{
public:
	unsigned char                                      AnimationType;                                    		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 94768 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_PlayArmAnimation::pClassPointer = NULL;

// Class WillowGame.WillowPopulationEncounter
// 0x0000 (0x01CC - 0x01CC)
class AWillowPopulationEncounter : public APopulationEncounter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95132 ];

		return pClassPointer;
	};

	void OnAIAbortMoveToActor ( class USeqAct_AIAbortMoveToActor* inAction );
	void OnAICombatVolume ( class UWillowSeqAct_AICombatVolume* inAction );
	void OnAIScripted ( class UWillowSeqAct_AIScripted* inAction );
	void OnAIScriptedAnim ( class UWillowSeqAct_AIScriptedAnim* inAction );
	void OnAIScriptedDeath ( class UWillowSeqAct_AIScriptedDeath* inAction );
	void OnAIScriptedFollow ( class UWillowSeqAct_AIScriptedFollow* inAction );
	void OnAIScriptedHold ( class UWillowSeqAct_AIScriptedHold* inAction );
	void OnAISetItemTossTarget ( class UWillowSeqAct_AISetItemTossTarget* inAction );
	void OnAIProvoke ( class UWillowSeqAct_AIProvoke* inAction );
};

UClass* AWillowPopulationEncounter::pClassPointer = NULL;

// Class WillowGame.WillowReplicatedInventoryManager
// 0x0000 (0x0238 - 0x0238)
class AWillowReplicatedInventoryManager : public AWillowInventoryManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95410 ];

		return pClassPointer;
	};

};

UClass* AWillowReplicatedInventoryManager::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderApplyRequiredOption
// 0x0028 (0x009C - 0x0074)
class UWillowScrollingListDataProviderApplyRequiredOption : public UWillowScrollingListDataProviderOptionsBase
{
public:
	int                                                CurrentSettingValue;                              		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSpinnerValue;                              		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SettingName;                                      		// 0x007C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LocalizedSettingCaptionString;                    		// 0x0084 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LocalizedSettingDescriptionString;                		// 0x0090 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95803 ];

		return pClassPointer;
	};

	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	void Populate ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderApplyRequiredOption::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderAudioOptions
// 0x0000 (0x0074 - 0x0074)
class UWillowScrollingListDataProviderAudioOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95824 ];

		return pClassPointer;
	};

	void UpdateRealtimeSetting ( int EventID, class AWillowPlayerController* WPCOwner );
	void StopAllVolumeSounds ( class UWillowScrollingList* TheList );
	void CheckStopVolumeSound ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	bool HandleSliderChange ( int EventID, int NewSliderValue, class UWillowScrollingList* TheList );
	bool HandleSelectionChange ( int EventID, class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
	void OnPop ( class UWillowScrollingList* TheList );
	void Cleanup ( class UWillowScrollingList* TheList );
	void Populate ( class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderAudioOptions::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderExtras
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderExtras : public UWillowScrollingListDataProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95859 ];

		return pClassPointer;
	};

	void Populate ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderExtras::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderFrontEnd
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderFrontEnd : public UWillowScrollingListDataProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96022 ];

		return pClassPointer;
	};

	class UIWillowScrollingListDataProvider* GetSubmenuForEvent ( int EventID, class UWillowScrollingList* TheList );
	void Populate ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderFrontEnd::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderGameOptions
// 0x0000 (0x0074 - 0x0074)
class UWillowScrollingListDataProviderGameOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96047 ];

		return pClassPointer;
	};

	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	void AddSettingSteeringMethod ( class UWillowScrollingList* TheList, struct FString Caption, struct FString Description, unsigned long bDisabled );
	void Populate ( class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderGameOptions::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderGamepadOptions
// 0x00CC (0x0140 - 0x0074)
class UWillowScrollingListDataProviderGamepadOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:
	TArray< struct FName >                             KeyCaptionList;                                   		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlatformFrames[ 0x3 ];                            		// 0x0080 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             ControllerPresetTags;                             		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           ControllerPresetNames;                            		// 0x00B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UInputBindingsClipGFxObject*                 ControllerMappingClip;                            		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGFxObject* >                        KeyTextFieldList;                                 		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxObject*                                  PresetNameField;                                  		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOptionsGFxMovie*                            MyOptionsGFxMovie;                                		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CustomPresetIndex;                                		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentSelectedPresetIndex;                       		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWillowPlayerInput*                          WPI;                                              		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsUsingCustomBindings : 1;                       		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsInCustomizeMode : 1;                           		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsInWarnExitMode : 1;                            		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsWaitingForFirstButton : 1;                     		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsWaitingForSecondButton : 1;                    		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	class UWillowScrollingList*                        MyWillowScrollingList;                            		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      Platform;                                         		// 0x00E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                NonCustomizedPresetIndex;                         		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       FirstButtonName;                                  		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SecondButtonName;                                 		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                RemappedButtonIndexes[ 0x10 ];                    		// 0x0100 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96064 ];

		return pClassPointer;
	};

	void UpdatePresetCaptions ( struct FName PresetTag, struct FString PresetName, unsigned long bIsCustomPresetIndex, int HightlightCaptionIndex );
	void InitControllerMapping ( class UWillowScrollingList* TheList );
	void HideControllerMapping ( );
	int GetIndexForButton ( struct FName ButtonName );
	void StartCustomizeMode ( );
	bool HandleExitWarnDlgInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	void DisplayExitWarnDialog ( );
	bool HandleClobberDlgInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	bool HandleInputKey ( struct FName ukey, unsigned char uevent );
	struct FString EncodeButton ( struct FString InButtonName );
	struct FString CreateControllerRebindingString ( );
	void OnPop ( class UWillowScrollingList* TheList );
	void Cleanup ( class UWillowScrollingList* TheList );
	bool HandleSelectionRollover ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSelectionChange ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	void AddControllerPresets ( class UWillowScrollingList* TheList );
	bool HandleCustomizeModeDlgInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	void Populate ( class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderGamepadOptions::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderKeyboardMouseOptions
// 0x0020 (0x0094 - 0x0074)
class UWillowScrollingListDataProviderKeyboardMouseOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:
	class AWillowPlayerController*                     WPCOwner;                                         		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInputBindingsClipGFxObject*                 ControllerMappingClip;                            		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInputDeviceCollectionDefinition*            DeviceCollection;                                 		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FKeyBindInfo >                      KeyBinds;                                         		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentKeyBindSelection;                          		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNeedsToSaveKeyBinds : 1;                         		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96168 ];

		return pClassPointer;
	};

	void ShowControllerMapping ( unsigned long bVisible );
	void OnPop ( class UWillowScrollingList* TheList );
	void Cleanup ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSelectionRollover ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSelectionChange ( int EventID, class UWillowScrollingList* TheList );
	bool OnResetKeyBindsButtonClicked ( class UWillowGFxDialogBox* Dlg, int ControllerId );
	bool HandleKeySwapDialog ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	void BindCurrentSelection ( struct FName Key );
	bool HandleBindInputKey ( class UWillowGFxDialogBox* Dlg, int ControllerId, struct FName ukey, unsigned char uevent );
	void DoBind ( );
	bool AllowBindKey ( struct FName Key );
	bool IsGamepadKey ( struct FName Key );
	struct FString GetLocalizedKeyName ( struct FName InputKeyName );
	int FindBinding ( struct FName Tag );
	int AddKeyBindEntry ( struct FName Tag, struct FName ActionName, struct FString Caption );
	int AddAxisButtonBinding ( struct FInputDeviceAxisData* Axis );
	struct FString GetAxisButtonCaption ( struct FInputDeviceAxisData* Axis );
	int AddButtonBinding ( struct FInputDeviceButtonData* Button );
	struct FString GetButtonCaption ( struct FInputDeviceButtonData Button );
	struct FName GetActionNameForButton ( struct FInputDeviceButtonData Button );
	void extOnPopulateKeys ( );
	void extOnKeySelectionChange ( struct FString Tag );
	void extOnKeyClicked ( struct FString Tag );
	void InitKeyBinding ( class UWillowScrollingList* TheList );
	void InitDeviceCollection ( );
	void Populate ( class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderKeyboardMouseOptions::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderLobby
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderLobby : public UWillowScrollingListDataProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96271 ];

		return pClassPointer;
	};

	void Populate ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderLobby::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderMapList
// 0x0010 (0x0064 - 0x0054)
class UWillowScrollingListDataProviderMapList : public UWillowScrollingListDataProviderBase
{
public:
	class UTestMapsListDefinition*                     MapListDef;                                       		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     MenuDisplayNameOverride;                          		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96283 ];

		return pClassPointer;
	};

	void Populate ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
	struct FString GetMenuDisplayName ( );
};

UClass* UWillowScrollingListDataProviderMapList::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderPause
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderPause : public UWillowScrollingListDataProviderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96304 ];

		return pClassPointer;
	};

	void Populate ( class UWillowScrollingList* TheList );
	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderPause::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderResolutionOptions
// 0x0000 (0x009C - 0x009C)
class UWillowScrollingListDataProviderResolutionOptions : public UWillowScrollingListDataProviderApplyRequiredOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96319 ];

		return pClassPointer;
	};

	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderResolutionOptions::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderVideoOptions
// 0x0008 (0x007C - 0x0074)
class UWillowScrollingListDataProviderVideoOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:
	class UHUDScaleGuideGFxMovie*                      ScaleGuide;                                       		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NewColorBlindMode;                                		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96349 ];

		return pClassPointer;
	};

	class UIWillowScrollingListDataProvider* GetSubmenuForEvent ( int EventID, class UWillowScrollingList* TheList );
	void HideGuide ( class UWillowScrollingList* TheList );
	void ShowGuide ( class UWillowScrollingList* TheList );
	void UpdateRealtimeSetting ( int EventID, class AWillowPlayerController* WPCOwner );
	void Cleanup ( class UWillowScrollingList* TheList );
	void OnPop ( class UWillowScrollingList* TheList );
	bool HandleSelectionRollover ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSelectionChange ( int EventID, class UWillowScrollingList* TheList );
	bool HandleSpinnerChange ( int EventID, int NewChoiceIndex, struct FString NewChoiceValue, class UWillowScrollingList* TheList );
	void AddSettingColorBlind ( class UWillowScrollingList* InTheList, struct FString Caption, struct FString Description, unsigned long bDisabled );
	void Populate ( class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderVideoOptions::pClassPointer = NULL;

// Class WillowGame.WillowScrollingListDataProviderWindowModeOptions
// 0x0000 (0x009C - 0x009C)
class UWillowScrollingListDataProviderWindowModeOptions : public UWillowScrollingListDataProviderApplyRequiredOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96395 ];

		return pClassPointer;
	};

	bool HandleClick ( int EventID, class UWillowScrollingList* TheList );
};

UClass* UWillowScrollingListDataProviderWindowModeOptions::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_BossBar
// 0x0008 (0x00AC - 0x00A4)
class UWillowSeqAct_BossBar : public USequenceAction
{
public:
	unsigned long                                      bEnable : 1;                                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AWillowAIPawn*                               BossActor;                                        		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96419 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_BossBar::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_CleanUpPlayerVehicles
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_CleanUpPlayerVehicles : public USequenceAction
{
public:
	unsigned long                                      CleanUpOccupiedVehiclesAsWell : 1;                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      PlayDeRezEffects : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96424 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_CleanUpPlayerVehicles::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ClientFlagGet
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_ClientFlagGet : public USequenceAction
{
public:
	struct FName                                       ClientFlagName;                                   		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bValue : 1;                                       		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96429 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ClientFlagGet::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ClientFlagSet
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_ClientFlagSet : public USequenceAction
{
public:
	struct FName                                       ClientFlagName;                                   		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableFlag : 1;                                  		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96434 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ClientFlagSet::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_CloseColiseumOverlay
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_CloseColiseumOverlay : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96439 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_CloseColiseumOverlay::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumAllDead
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumAllDead : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96442 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ColiseumAllDead::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumAwardCertificate
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumAwardCertificate : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96446 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ColiseumAwardCertificate::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumNotify
// 0x0001 (0x00A5 - 0x00A4)
class UWillowSeqAct_ColiseumNotify : public USequenceAction
{
public:
	unsigned char                                      NotifyType;                                       		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96449 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ColiseumNotify::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumRoundAnnounce
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumRoundAnnounce : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96453 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ColiseumRoundAnnounce::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumRuleAnnounce
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumRuleAnnounce : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96456 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ColiseumRuleAnnounce::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumStartTimer
// 0x0001 (0x00A5 - 0x00A4)
class UWillowSeqAct_ColiseumStartTimer : public USequenceAction
{
public:
	unsigned char                                      CountdownLength;                                  		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96459 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ColiseumStartTimer::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ColiseumVictory
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumVictory : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96463 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_ColiseumVictory::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_ExitVehicle
// 0x0010 (0x00B4 - 0x00A4)
class UWillowSeqAct_ExitVehicle : public USequenceAction
{
public:
	TArray< int >                                      SeatsToForceExitOn;                               		// 0x00A4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      UseDismountAnimationIfAvailable : 1;              		// 0x00B0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96480 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_ExitVehicle::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_KillPawnBasedOnAllegiance
// 0x0014 (0x00B8 - 0x00A4)
class UWillowSeqAct_KillPawnBasedOnAllegiance : public USequenceAction
{
public:
	class UPawnAllegiance*                             AllegianceToBaseKillsOn;                          		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AllegianceKillRelationship;                       		// 0x00A8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      DamageSource;                                     		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UWillowDamageTypeDefinition*                 DamageType;                                       		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowInventoryToDrop : 1;                        		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96496 ];

		return pClassPointer;
	};

	class AController* GetKillInstigatorFromVariableLink ( );
	class UPawnAllegiance* GetAllegianceFromVariableLink ( );
	void KillBasedOnThisAllegiance ( class UPawnAllegiance* AllegianceToUse );
	void eventActivated ( );
};

UClass* UWillowSeqAct_KillPawnBasedOnAllegiance::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_MarkPlaythroughCompleted
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_MarkPlaythroughCompleted : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96520 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqAct_MarkPlaythroughCompleted::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_NotifyDesignerAttribute
// 0x000C (0x00B0 - 0x00A4)
class UWillowSeqAct_NotifyDesignerAttribute : public USequenceAction
{
public:
	struct FName                                       AttributeName;                                    		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAttributeDefinition*                        OptionalAttributeDefinition;                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96532 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_NotifyDesignerAttribute::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_OpenColiseumOverlay
// 0x0004 (0x00A8 - 0x00A4)
class UWillowSeqAct_OpenColiseumOverlay : public USequenceAction
{
public:
	class UWillowGFxColiseumOverlayDefinition*         OverlayDefinition;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96537 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_OpenColiseumOverlay::pClassPointer = NULL;

// Class WillowGame.WillowSeqAct_UpdateColiseumRuleOverlay
// 0x0005 (0x00A9 - 0x00A4)
class UWillowSeqAct_UpdateColiseumRuleOverlay : public USequenceAction
{
public:
	class UColiseumRuleDefinition*                     RuleInfo;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UpdateMode;                                       		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96567 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* UWillowSeqAct_UpdateColiseumRuleOverlay::pClassPointer = NULL;

// Class WillowGame.WillowSeqEvent_CounterAtTarget
// 0x0001 (0x00C5 - 0x00C4)
class UWillowSeqEvent_CounterAtTarget : public USequenceEvent
{
public:
	unsigned char                                      Event;                                            		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96579 ];

		return pClassPointer;
	};

};

UClass* UWillowSeqEvent_CounterAtTarget::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_LeftLowerEyelidLook
// 0x0000 (0x0100 - 0x0100)
class UWillowSkelControl_LeftLowerEyelidLook : public UWillowSkelControl_LowerEyelidLook
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96753 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_LeftLowerEyelidLook::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_LeftUpperEyelidLook
// 0x0000 (0x0114 - 0x0114)
class UWillowSkelControl_LeftUpperEyelidLook : public UWillowSkelControl_UpperEyelidLook
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96758 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_LeftUpperEyelidLook::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_RightLowerEyelidLook
// 0x0000 (0x0100 - 0x0100)
class UWillowSkelControl_RightLowerEyelidLook : public UWillowSkelControl_LowerEyelidLook
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96765 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_RightLowerEyelidLook::pClassPointer = NULL;

// Class WillowGame.WillowSkelControl_RightUpperEyelidLook
// 0x0000 (0x0114 - 0x0114)
class UWillowSkelControl_RightUpperEyelidLook : public UWillowSkelControl_UpperEyelidLook
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96767 ];

		return pClassPointer;
	};

};

UClass* UWillowSkelControl_RightUpperEyelidLook::pClassPointer = NULL;

// Class WillowGame.WillowTeleporter
// 0x0000 (0x026C - 0x026C)
class AWillowTeleporter : public ATeleporter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96917 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* AWillowTeleporter::pClassPointer = NULL;

// Class WillowGame.WillowTI_CalcCombat
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcCombat : public UTI_Calc
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96924 ];

		return pClassPointer;
	};

};

UClass* UWillowTI_CalcCombat::pClassPointer = NULL;

// Class WillowGame.WillowVehicle_Turret
// 0x0000 (0x0D14 - 0x0D14)
class AWillowVehicle_Turret : public AWillowVehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99306 ];

		return pClassPointer;
	};

};

UClass* AWillowVehicle_Turret::pClassPointer = NULL;

// Class WillowGame.WillowVersusDuelBehavior
// 0x0000 (0x004C - 0x004C)
class UWillowVersusDuelBehavior : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99753 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UWillowVersusDuelBehavior::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif