/*
#############################################################################################
# Borderlands2 (1.0.228.55487) SDK
# Generated with KK UE3 SDK Generator v1.7.3.0 Fix by:KK QQ:2217936322
# ========================================================================================= #
# File: Engine_classes.h
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_REP_RBLOCATION_ERROR_TOLERANCE_SQ                  16.0f
#define CONST_MINFLOORZ                                          0.7
#define CONST_ACTORMAXSTEPHEIGHT                                 35.0
#define CONST_RBSTATE_LINVELSCALE                                10.0
#define CONST_RBSTATE_ANGVELSCALE                                1000.0
#define CONST_RB_None                                            0x00
#define CONST_RB_NeedsUpdate                                     0x01
#define CONST_RB_Sleeping                                        0x02
#define CONST_TRACEFLAG_IgnoreBlockingMesh                       1048576
#define CONST_TRACEFLAG_BlockingMesh                             524288
#define CONST_TRACEFLAG_Water                                    262144
#define CONST_TRACEFLAG_Listener                                 131072
#define CONST_TRACEFLAG_Projectiles                              65536
#define CONST_TRACEFLAG_FieldVolumes                             32768
#define CONST_TRACEFLAG_IgnoreNonBlockingTriggers                16384
#define CONST_TRACEFLAG_LightProjectile                          8192
#define CONST_TRACEFLAG_Blocking                                 8
#define CONST_TRACEFLAG_SkipMovers                               4
#define CONST_TRACEFLAG_PhysicsVolumes                           2
#define CONST_TRACEFLAG_Bullet                                   1
#define CONST_LATENT_MOVETOWARD                                  503
#define CONST_MAX_ACTIVE_CAMERA_ANIMS                            8
#define CONST_MAXCLIENTUPDATEINTERVAL                            0.25
#define CONST_CLIENTADJUSTUPDATECOST                             180.0
#define CONST_MAXVEHICLEPOSITIONERRORSQUARED                     900.0
#define CONST_MAXNEARZEROVELOCITYSQUARED                         9.0
#define CONST_MAXPOSITIONERRORSQUARED                            3.0
#define CONST_BLOCKEDPATHCOST                                    10000000
#define CONST_INFINITE_PATH_COST                                 10000000
#define CONST_MAX_FLASHLOCATIONS                                 10
#define CONST_LINK_ID_RESERVED_FOR_DEFAULT_BEHAVIOR_OUTPUT       -1
#define CONST_DEFAULT_SIZE_X                                     1024
#define CONST_DEFAULT_SIZE_Y                                     768
#define CONST_MAX_SUPPORTED_GAMEPADS                             4
#define CONST_MaxHistory                                         16
#define CONST_COVERLINK_DangerDist                               1536.f
#define CONST_COVERLINK_EdgeExposureDot                          0.85f
#define CONST_COVERLINK_EdgeCheckDot                             0.25f
#define CONST_COVERLINK_ExposureDot                              0.4f
#define CONST_MAX_SKILL_EVENT_TRIGGERS                           8
#define CONST_NULLCHARACTER                                      127
#define CONST_HeaderFlags_NoEventStrings                         1
#define CONST_GAMEEVENT_MATCH_STARTED                            0
#define CONST_GAMEEVENT_MATCH_ENDED                              1
#define CONST_GAMEEVENT_ROUND_STARTED                            2
#define CONST_GAMEEVENT_ROUND_ENDED                              3
#define CONST_GAMEEVENT_GAME_CLASS                               6
#define CONST_GAMEEVENT_GAME_OPTION_URL                          7
#define CONST_GAMEEVENT_GAME_MAPNAME                             8
#define CONST_GAMEEVENT_MEMORYUSAGE_POLL                         35
#define CONST_GAMEEVENT_FRAMERATE_POLL                           36
#define CONST_GAMEEVENT_NETWORKUSAGEIN_POLL                      37
#define CONST_GAMEEVENT_NETWORKUSAGEOUT_POLL                     38
#define CONST_GAMEEVENT_PING_POLL                                39
#define CONST_GAMEEVENT_RENDERTHREAD_POLL                        40
#define CONST_GAMEEVENT_GAMETHREAD_POLL                          41
#define CONST_GAMEEVENT_GPUFRAMETIME_POLL                        42
#define CONST_GAMEEVENT_FRAMETIME_POLL                           43
#define CONST_GAMEEVENT_TEAM_CREATED                             50
#define CONST_GAMEEVENT_TEAM_GAME_SCORE                          51
#define CONST_GAMEEVENT_TEAM_MATCH_WON                           4
#define CONST_GAMEEVENT_TEAM_ROUND_WON                           5
#define CONST_GAMEEVENT_TEAM_ROUND_STALEMATE                     52
#define CONST_GAMEEVENT_PLAYER_LOGIN                             100
#define CONST_GAMEEVENT_PLAYER_LOGOUT                            101
#define CONST_GAMEEVENT_PLAYER_SPAWN                             102
#define CONST_GAMEEVENT_PLAYER_MATCH_WON                         103
#define CONST_GAMEEVENT_PLAYER_KILL                              104
#define CONST_GAMEEVENT_PLAYER_LOCATION_POLL                     105
#define CONST_GAMEEVENT_PLAYER_TEAMCHANGE                        106
#define CONST_GAMEEVENT_PLAYER_KILL_STREAK                       107
#define CONST_GAMEEVENT_PLAYER_DEATH                             108
#define CONST_GAMEEVENT_PLAYER_ROUND_WON                         109
#define CONST_GAMEEVENT_PLAYER_ROUND_STALEMATE                   110
#define CONST_GAMEEVENT_WEAPON_DAMAGE                            150
#define CONST_GAMEEVENT_WEAPON_DAMAGE_MELEE                      151
#define CONST_GAMEEVENT_WEAPON_FIRED                             152
#define CONST_GAMEEVENT_PLAYER_KILL_NORMAL                       200
#define CONST_GAMEEVENT_GENERIC_PARAM_LIST_START                 300
#define CONST_GAMEEVENT_GENERIC_PARAM_LIST_END                   400
#define CONST_GAMEEVENT_GAME_SPECIFIC                            1000
#define CONST_GAMEEVENT_MAX_EVENTID                              0x0000FFFF
#define CONST_SCENEFILTER_None                                   0x00000000
#define CONST_SCENEFILTER_IncludeTransient                       0x00000001
#define CONST_SCENEFILTER_InputProcessorOnly                     0x00000002
#define CONST_SCENEFILTER_PausersOnly                            0x00000004
#define CONST_SCENEFILTER_PrimitiveUsersOnly                     0x00000008
#define CONST_SCENEFILTER_UsesPostProcessing                     0x00000010
#define CONST_SCENEFILTER_ReceivesFocus                          0x00000020
#define CONST_SCENEFILTER_Any                                    0xFFFFFFFF
#define CONST_MAX_INSTANCES_PER_CLASS                            5
#define CONST_NUM_EDGES                                          3
#define CONST_WORDSIZE                                           2
#define CONST_NUM_EDGE_BYTES                                     6
#define CONST_DESIRED_NAVMESH_LOOKUP_NODE_SIZE                   1024.0f
#define CONST_MAX_POLY_OBSTACLES                                 6
#define CONST_MAX_POLY_OBSTACLE_BYTES                            12
#define CONST_MAX_POLY_POINT_CHECKS                              10
#define CONST_NUM_PATHFINDING_PARAMS                             9
#define CONST_LINECHECK_GRANULARITY                              768.f
#define CONST_MAX_AIGROUP_NUMBER                                 10
#define CONST_NumBreadCrumbs                                     10
#define CONST_MAX_RESOURCE_POOLS                                 16
#define CONST_UnknownCellDataFieldName                           'NAME_None'
#define CONST_MAX_INVENTORY_ATTRIBUTE_SLOTS                      19
#define CONST_MAX_UI_STATS                                       7
#define CONST_CRC_BITS                                           16
#define CONST_CRC_BYTE_OFFSET                                    5
#define CONST_UNIQUE_INVENTORY_ID_BYTE_OFFSET                    1
#define CONST_ENCODED_WEAPON_TYPE                                1
#define CONST_ENCODED_ITEM_TYPE                                  0
#define CONST_STORED_AMMO_BITS                                   13
#define CONST_UNIQUE_INVENTORY_ID_BITS                           32
#define CONST_GAME_STAGE_BITS                                    7
#define CONST_GRADE_BITS                                         7
#define CONST_REVISION_BITS                                      7
#define CONST_INVENTORY_SERIAL_NUMBER_SIZE                       40
#define CONST_InventoryNetUpdateLow                              1
#define CONST_InventoryNetUpdateHigh                             100
#define CONST_USE_FAILURE_DLC                                    2
#define CONST_USE_FAILURE_CONSTRAINTS                            1
#define CONST_USE_FAILURE_LEVEL                                  0
#define CONST_MAX_ADDITIONAL_GESTALT_MODE_MESHES                 2

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum Engine.StaticMesh.EDynamicShadowCastRelevance
/*enum EDynamicShadowCastRelevance
{
	<uninitialized>                                    = 0,
	Always                                             = 1,
	Far                                                = 2,
	Near                                               = 3,
	Never                                              = 4,
	EDynamicShadowCastRelevance_MAX                    = 5
};*/

// Enum Engine.Actor.EActorMetricsType
/*enum EActorMetricsType
{
	METRICS_VERTS                                      = 0,
	METRICS_TRIS                                       = 1,
	METRICS_SECTIONS                                   = 2,
	METRICS_MAX                                        = 3
};*/

// Enum Engine.Actor.EMoveDir
/*enum EMoveDir
{
	MD_Stationary                                      = 0,
	MD_Forward                                         = 1,
	MD_Backward                                        = 2,
	MD_Left                                            = 3,
	MD_Right                                           = 4,
	MD_Up                                              = 5,
	MD_Down                                            = 6,
	MD_MAX                                             = 7
};*/

// Enum Engine.Actor.EPhysics
/*enum EPhysics
{
	PHYS_None                                          = 0,
	PHYS_Walking                                       = 1,
	PHYS_Falling                                       = 2,
	PHYS_Swimming                                      = 3,
	PHYS_Flying                                        = 4,
	PHYS_Rotating                                      = 5,
	PHYS_Projectile                                    = 6,
	PHYS_Interpolating                                 = 7,
	PHYS_Spider                                        = 8,
	PHYS_Ladder                                        = 9,
	PHYS_RigidBody                                     = 10,
	PHYS_SoftBody                                      = 11,
	PHYS_NavMeshWalking                                = 12,
	PHYS_Unused                                        = 13,
	PHYS_Custom                                        = 14,
	PHYS_MAX                                           = 15
};*/

// Enum Engine.Actor.ECollisionType
/*enum ECollisionType
{
	COLLIDE_CustomDefault                              = 0,
	COLLIDE_NoCollision                                = 1,
	COLLIDE_BlockAll                                   = 2,
	COLLIDE_BlockWeapons                               = 3,
	COLLIDE_TouchAll                                   = 4,
	COLLIDE_TouchWeapons                               = 5,
	COLLIDE_BlockAllButWeapons                         = 6,
	COLLIDE_TouchAllButWeapons                         = 7,
	COLLIDE_BlockWeaponsKickable                       = 8,
	COLLIDE_BlockAllButVehicles                        = 9,
	COLLIDE_MAX                                        = 10
};*/

// Enum Engine.Actor.ETravelType
/*enum ETravelType
{
	TRAVEL_Absolute                                    = 0,
	TRAVEL_Partial                                     = 1,
	TRAVEL_Relative                                    = 2,
	TRAVEL_MAX                                         = 3
};*/

// Enum Engine.Actor.EDoubleClickDir
/*enum EDoubleClickDir
{
	DCLICK_None                                        = 0,
	DCLICK_Left                                        = 1,
	DCLICK_Right                                       = 2,
	DCLICK_Forward                                     = 3,
	DCLICK_Back                                        = 4,
	DCLICK_Active                                      = 5,
	DCLICK_Done                                        = 6,
	DCLICK_MAX                                         = 7
};*/

// Enum Engine.Actor.ENetRole
/*enum ENetRole
{
	ROLE_None                                          = 0,
	ROLE_SimulatedProxy                                = 1,
	ROLE_AutonomousProxy                               = 2,
	ROLE_Authority                                     = 3,
	ROLE_MAX                                           = 4
};*/

// Enum Engine.Settings.EOnlineDataAdvertisementType
/*enum EOnlineDataAdvertisementType
{
	ODAT_DontAdvertise                                 = 0,
	ODAT_OnlineService                                 = 1,
	ODAT_QoS                                           = 2,
	ODAT_OnlineServiceAndQoS                           = 3,
	ODAT_MAX                                           = 4
};*/

// Enum Engine.Settings.ESettingsDataType
/*enum ESettingsDataType
{
	SDT_Empty                                          = 0,
	SDT_Int32                                          = 1,
	SDT_Int64                                          = 2,
	SDT_Double                                         = 3,
	SDT_String                                         = 4,
	SDT_Float                                          = 5,
	SDT_Blob                                           = 6,
	SDT_DateTime                                       = 7,
	SDT_Byte                                           = 8,
	SDT_MAX                                            = 9
};*/

// Enum Engine.Settings.EPropertyValueMappingType
/*enum EPropertyValueMappingType
{
	PVMT_RawValue                                      = 0,
	PVMT_PredefinedValues                              = 1,
	PVMT_Ranged                                        = 2,
	PVMT_IdMapped                                      = 3,
	PVMT_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EShowKeyboardType
/*enum EShowKeyboardType
{
	SKT_Standard                                       = 0,
	SKT_Password                                       = 1,
	SKT_Email                                          = 2,
	SKT_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.EOnlineNewsType
/*enum EOnlineNewsType
{
	ONT_Unknown                                        = 0,
	ONT_GameNews                                       = 1,
	ONT_ContentAnnouncements                           = 2,
	ONT_Misc                                           = 3,
	ONT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ENATType
/*enum ENATType
{
	NAT_Unknown                                        = 0,
	NAT_Open                                           = 1,
	NAT_Moderate                                       = 2,
	NAT_Strict                                         = 3,
	NAT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineServerConnectionStatus
/*enum EOnlineServerConnectionStatus
{
	OSCS_NotConnected                                  = 0,
	OSCS_Connected                                     = 1,
	OSCS_ConnectionDropped                             = 2,
	OSCS_NoNetworkConnection                           = 3,
	OSCS_ServiceUnavailable                            = 4,
	OSCS_UpdateRequired                                = 5,
	OSCS_ServersTooBusy                                = 6,
	OSCS_DuplicateLoginDetected                        = 7,
	OSCS_InvalidUser                                   = 8,
	OSCS_MAX                                           = 9
};*/

// Enum Engine.OnlineSubsystem.EOnlineEnumerationReadState
/*enum EOnlineEnumerationReadState
{
	OERS_NotStarted                                    = 0,
	OERS_InProgress                                    = 1,
	OERS_Done                                          = 2,
	OERS_Failed                                        = 3,
	OERS_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineGameState
/*enum EOnlineGameState
{
	OGS_NoSession                                      = 0,
	OGS_Pending                                        = 1,
	OGS_Starting                                       = 2,
	OGS_InProgress                                     = 3,
	OGS_Ending                                         = 4,
	OGS_Ended                                          = 5,
	OGS_MAX                                            = 6
};*/

// Enum Engine.OnlineSubsystem.EOnlineAccountCreateStatus
/*enum EOnlineAccountCreateStatus
{
	OACS_CreateSuccessful                              = 0,
	OACS_UnknownError                                  = 1,
	OACS_InvalidUserName                               = 2,
	OACS_InvalidPassword                               = 3,
	OACS_InvalidUniqueUserName                         = 4,
	OACS_UniqueUserNameInUse                           = 5,
	OACS_ServiceUnavailable                            = 6,
	OACS_MAX                                           = 7
};*/

// Enum Engine.OnlineSubsystem.ELanBeaconState
/*enum ELanBeaconState
{
	LANB_NotUsingLanBeacon                             = 0,
	LANB_Hosting                                       = 1,
	LANB_Searching                                     = 2,
	LANB_MAX                                           = 3
};*/

// Enum Engine.OnlineSubsystem.EOnlineContentType
/*enum EOnlineContentType
{
	OCT_Downloaded                                     = 0,
	OCT_SaveGame                                       = 1,
	OCT_MAX                                            = 2
};*/

// Enum Engine.OnlineSubsystem.ENamedOnlineContentType
/*enum ENamedOnlineContentType
{
	NOCT_Content                                       = 0,
	NOCT_SeasonPass                                    = 1,
	NOCT_PreorderBonus                                 = 2,
	NOCT_CompatibilityPack                             = 3,
	NOCT_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EVoiceVolumeType
/*enum EVoiceVolumeType
{
	VVT_Capture                                        = 0,
	VVT_Playback                                       = 1,
	VVT_CaptureAndPlayback                             = 2,
	VVT_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.EOnlineFriendState
/*enum EOnlineFriendState
{
	OFS_Offline                                        = 0,
	OFS_Online                                         = 1,
	OFS_Away                                           = 2,
	OFS_Busy                                           = 3,
	OFS_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ENetworkNotificationPosition
/*enum ENetworkNotificationPosition
{
	NNP_TopLeft                                        = 0,
	NNP_TopCenter                                      = 1,
	NNP_TopRight                                       = 2,
	NNP_CenterLeft                                     = 3,
	NNP_Center                                         = 4,
	NNP_CenterRight                                    = 5,
	NNP_BottomLeft                                     = 6,
	NNP_BottomCenter                                   = 7,
	NNP_BottomRight                                    = 8,
	NNP_MAX                                            = 9
};*/

// Enum Engine.OnlineSubsystem.EFeaturePrivilegeLevel
/*enum EFeaturePrivilegeLevel
{
	FPL_Disabled                                       = 0,
	FPL_EnabledFriendsOnly                             = 1,
	FPL_Enabled                                        = 2,
	FPL_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.EUserAgeGroup
/*enum EUserAgeGroup
{
	UAG_Unknown                                        = 0,
	UAG_Child                                          = 1,
	UAG_Teen                                           = 2,
	UAG_Adult                                          = 3,
	UAG_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ELoginStatus
/*enum ELoginStatus
{
	LS_NotLoggedIn                                     = 0,
	LS_UsingLocalProfile                               = 1,
	LS_LoggedIn                                        = 2,
	LS_MAX                                             = 3
};*/

// Enum Engine.OnlineAuthInterfaceBaseImpl.EAuthStatus
/*enum EAuthStatus
{
	AUS_NotStarted                                     = 0,
	AUS_Pending                                        = 1,
	AUS_Authenticated                                  = 2,
	AUS_Failed                                         = 3,
	AUS_MAX                                            = 4
};*/

// Enum Engine.Scene.EDetailMode
/*enum EDetailMode
{
	DM_Low                                             = 0,
	DM_Medium                                          = 1,
	DM_High                                            = 2,
	DM_MAX                                             = 3
};*/

// Enum Engine.Scene.ESceneDepthPriorityGroup
/*enum ESceneDepthPriorityGroup
{
	SDPG_UnrealEdBackground                            = 0,
	SDPG_World                                         = 1,
	SDPG_Foreground                                    = 2,
	SDPG_UnrealEdForeground                            = 3,
	SDPG_PostProcess                                   = 4,
	SDPG_WorldPreAlphaPostProcess                      = 5,
	SDPG_AfterPostProcess                              = 6,
	SDPG_MAX                                           = 7
};*/

// Enum Engine.PrimitiveComponent.GJKResult
/*enum GJKResult
{
	GJK_Intersect                                      = 0,
	GJK_NoIntersection                                 = 1,
	GJK_Fail                                           = 2,
	GJK_MAX                                            = 3
};*/

// Enum Engine.PrimitiveComponent.ERadialImpulseFalloff
/*enum ERadialImpulseFalloff
{
	RIF_Constant                                       = 0,
	RIF_Linear                                         = 1,
	RIF_MAX                                            = 2
};*/

// Enum Engine.PrimitiveComponent.ERBCollisionChannel
/*enum ERBCollisionChannel
{
	RBCC_Default                                       = 0,
	RBCC_Nothing                                       = 1,
	RBCC_Pawn                                          = 2,
	RBCC_Vehicle                                       = 3,
	RBCC_Water                                         = 4,
	RBCC_GameplayPhysics                               = 5,
	RBCC_EffectPhysics                                 = 6,
	RBCC_Untitled1                                     = 7,
	RBCC_Untitled2                                     = 8,
	RBCC_TossedItems                                   = 9,
	RBCC_TossedItemsPlayerVehicle                      = 10,
	RBCC_Cloth                                         = 11,
	RBCC_FluidDrain                                    = 12,
	RBCC_SoftBody                                      = 13,
	RBCC_FracturedMeshPart                             = 14,
	RBCC_BlockingVolume                                = 15,
	RBCC_DeadPawn                                      = 16,
	RBCC_Clothing                                      = 17,
	RBCC_ClothingCollision                             = 18,
	RBCC_TossedItemsEnemyVehicle                       = 19,
	RBCC_PlayerVehicle                                 = 20,
	RBCC_EnemyVehicle                                  = 21,
	RBCC_PlayerVehicleEnemyVehicle                     = 22,
	RBCC_TossedItemsPlayerVehicleEnemyVehicle          = 23,
	RBCC_WillowPickup                                  = 24,
	RBCC_MAX                                           = 25
};*/

// Enum Engine.PrimitiveComponent.EOverrideStaticShadow
/*enum EOverrideStaticShadow
{
	OSS_NoOverride                                     = 0,
	OSS_CastButDontReceiveStatic                       = 1,
	OSS_CastAndReceiveStatic                           = 2,
	OSS_MAX                                            = 3
};*/

// Enum Engine.PrimitiveComponent.EDynamicShadowCastRelevance
/*enum EDynamicShadowCastRelevance
{
	SHADOWCAST_Uninitialized                           = 0,
	SHADOWCAST_Always                                  = 1,
	ShadowCast_Far                                     = 2,
	ShadowCast_Near                                    = 3,
	SHADOWCAST_Never                                   = 4,
	EDynamicShadowCastRelevance_MAX                    = 5
};*/

// Enum Engine.IInstanceData.EReplicationType
/*enum EReplicationType
{
	IDR_Server                                         = 0,
	IDR_Client                                         = 1,
	IDR_Local                                          = 2,
	IDR_MAX                                            = 3
};*/

// Enum Engine.IInstanceData.EInstanceDataType
/*enum EInstanceDataType
{
	IDT_Bool                                           = 0,
	IDT_Int                                            = 1,
	IDT_Float                                          = 2,
	IDT_Vector                                         = 3,
	IDT_Object                                         = 4,
	IDT_ActorComponent                                 = 5,
	IDT_Actor                                          = 6,
	IDT_ActorTemplate                                  = 7,
	IDT_String                                         = 8,
	IDT_Switch                                         = 9,
	IDT_PickupTemplate                                 = 10,
	IDT_CustomHead                                     = 11,
	IDT_CustomSkin                                     = 12,
	IDT_MAX                                            = 13
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchComparisonType
/*enum EOnlineGameSearchComparisonType
{
	OGSCT_Equals                                       = 0,
	OGSCT_NotEquals                                    = 1,
	OGSCT_GreaterThan                                  = 2,
	OGSCT_GreaterThanEquals                            = 3,
	OGSCT_LessThan                                     = 4,
	OGSCT_LessThanEquals                               = 5,
	OGSCT_MAX                                          = 6
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchEntryType
/*enum EOnlineGameSearchEntryType
{
	OGSET_Property                                     = 0,
	OGSET_LocalizedSetting                             = 1,
	OGSET_ObjectProperty                               = 2,
	OGSET_MAX                                          = 3
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchSortType
/*enum EOnlineGameSearchSortType
{
	OGSSO_Ascending                                    = 0,
	OGSSO_Descending                                   = 1,
	OGSSO_MAX                                          = 2
};*/

// Enum Engine.Camera.EViewTargetBlendFunction
/*enum EViewTargetBlendFunction
{
	VTBlend_Linear                                     = 0,
	VTBlend_Cubic                                      = 1,
	VTBlend_EaseIn                                     = 2,
	VTBlend_EaseOut                                    = 3,
	VTBlend_EaseInOut                                  = 4,
	VTBlend_MAX                                        = 5
};*/

// Enum Engine.DOFEffect.EFocusType
/*enum EFocusType
{
	FOCUS_Distance                                     = 0,
	FOCUS_Position                                     = 1,
	FOCUS_MAX                                          = 2
};*/

// Enum Engine.Camera.ECameraAnimPlaySpace
/*enum ECameraAnimPlaySpace
{
	CAPS_CameraLocal                                   = 0,
	CAPS_World                                         = 1,
	CAPS_UserDefined                                   = 2,
	CAPS_MAX                                           = 3
};*/

// Enum Engine.SeqAct_ControlMovieTexture.EMovieControlType
/*enum EMovieControlType
{
	MCT_Play                                           = 0,
	MCT_Stop                                           = 1,
	MCT_Pause                                          = 2,
	MCT_MAX                                            = 3
};*/

// Enum Engine.PlayerController.EProgressMessageType
/*enum EProgressMessageType
{
	PMT_Clear                                          = 0,
	PMT_Information                                    = 1,
	PMT_AdminMessage                                   = 2,
	PMT_DownloadProgress                               = 3,
	PMT_ConnectionFailure                              = 4,
	PMT_PeerConnectionFailure                          = 5,
	PMT_PeerHostMigrationFailure                       = 6,
	PMT_SocketFailure                                  = 7,
	PMT_MAX                                            = 8
};*/

// Enum Engine.SkeletalMeshComponent.EPhysBodyOp
/*enum EPhysBodyOp
{
	PBO_None                                           = 0,
	PBO_Term                                           = 1,
	PBO_Disable                                        = 2,
	PBO_MAX                                            = 3
};*/

// Enum Engine.SkeletalMeshComponent.EBoneVisibilityStatus
/*enum EBoneVisibilityStatus
{
	BVS_HiddenByParent                                 = 0,
	BVS_Visible                                        = 1,
	BVS_ExplicitlyHidden                               = 2,
	BVS_MAX                                            = 3
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXRegOp
/*enum EFaceFXRegOp
{
	FXRO_Add                                           = 0,
	FXRO_Multiply                                      = 1,
	FXRO_Replace                                       = 2,
	FXRO_MAX                                           = 3
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXBlendMode
/*enum EFaceFXBlendMode
{
	FXBM_Overwrite                                     = 0,
	FXBM_Additive                                      = 1,
	FXBM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.EInstanceWeightUsage
/*enum EInstanceWeightUsage
{
	IWU_PartialSwap                                    = 0,
	IWU_FullSwap                                       = 1,
	IWU_MAX                                            = 2
};*/

// Enum Engine.SkeletalMeshComponent.EAnimRotationOnly
/*enum EAnimRotationOnly
{
	EARO_AnimSet                                       = 0,
	EARO_ForceEnabled                                  = 1,
	EARO_ForceDisabled                                 = 2,
	EARO_MAX                                           = 3
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionRotationMode
/*enum ERootMotionRotationMode
{
	RMRM_Ignore                                        = 0,
	RMRM_RotateActor                                   = 1,
	RMRM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionMode
/*enum ERootMotionMode
{
	RMM_Translate                                      = 0,
	RMM_Velocity                                       = 1,
	RMM_Ignore                                         = 2,
	RMM_Accel                                          = 3,
	RMM_Relative                                       = 4,
	RMM_TranslateWithGravity                           = 5,
	RMM_MAX                                            = 6
};*/

// Enum Engine.SkeletalMeshComponent.EMaxDistanceScaleMode
/*enum EMaxDistanceScaleMode
{
	MDSM_Multiply                                      = 0,
	MDSM_Substract                                     = 1,
	MDSM_MAX                                           = 2
};*/

// Enum Engine.LocalMessage.ELocalMessageType
/*enum ELocalMessageType
{
	LMT_Training                                       = 0,
	LMT_ContextHint                                    = 1,
	LMT_XP                                             = 2,
	LMT_Player                                         = 3,
	LMT_System                                         = 4,
	LMT_ReceivedLoot                                   = 5,
	LMT_OpenedChest                                    = 6,
	LMT_Chat                                           = 7,
	LMT_MAX                                            = 8
};*/

// Enum Engine.PlayerController.EInputMatchAction
/*enum EInputMatchAction
{
	IMA_GreaterThan                                    = 0,
	IMA_LessThan                                       = 1,
	IMA_MAX                                            = 2
};*/

// Enum Engine.PlayerController.EInputTypes
/*enum EInputTypes
{
	IT_XAxis                                           = 0,
	IT_YAxis                                           = 1,
	IT_MAX                                             = 2
};*/

// Enum Engine.NavigationPoint.ENodeSearchType
/*enum ENodeSearchType
{
	NODE_Ambush                                        = 0,
	NODE_PointOfInterest                               = 1,
	NODE_MAX                                           = 2
};*/

// Enum Engine.Pylon.ENavMeshEdgeType
/*enum ENavMeshEdgeType
{
	NAVEDGE_Normal                                     = 0,
	NAVEDGE_Mantle                                     = 1,
	NAVEDGE_Coverslip                                  = 2,
	NAVEDGE_SwatTurn                                   = 3,
	NAVEDGE_DropDown                                   = 4,
	NAVEDGE_PathObject                                 = 5,
	NAVEDGE_BackRefDummy                               = 6,
	NAVEDGE_Jump                                       = 7,
	NAVEDGE_MAX                                        = 8
};*/

// Enum Engine.AkDialogueEvent.EDynamicDialogueArgument
/*enum EDynamicDialogueArgument
{
	DYNAMICDIALOGUEARGUMENT_None                       = 0,
	DYNAMICDIALOGUEARGUMENT_SpeakerName                = 1,
	DYNAMICDIALOGUEARGUMENT_Stance                     = 2,
	DYNAMICDIALOGUEARGUMENT_TargetName                 = 3,
	DYNAMICDIALOGUEARGUMENT_MAX                        = 4
};*/

// Enum Engine.AmbientOcclusionEffect.EAmbientOcclusionQuality
/*enum EAmbientOcclusionQuality
{
	AO_High                                            = 0,
	AO_Medium                                          = 1,
	AO_Low                                             = 2,
	AO_MAX                                             = 3
};*/

// Enum Engine.Brush.ECsgOper
/*enum ECsgOper
{
	CSG_Active                                         = 0,
	CSG_Add                                            = 1,
	CSG_Subtract                                       = 2,
	CSG_Intersect                                      = 3,
	CSG_Deintersect                                    = 4,
	CSG_MAX                                            = 5
};*/

// Enum Engine.ReverbVolume.ReverbPreset
/*enum ReverbPreset
{
	REVERB_Default                                     = 0,
	REVERB_Bathroom                                    = 1,
	REVERB_StoneRoom                                   = 2,
	REVERB_Auditorium                                  = 3,
	REVERB_ConcertHall                                 = 4,
	REVERB_Cave                                        = 5,
	REVERB_Hallway                                     = 6,
	REVERB_StoneCorridor                               = 7,
	REVERB_Alley                                       = 8,
	REVERB_Forest                                      = 9,
	REVERB_City                                        = 10,
	REVERB_Mountains                                   = 11,
	REVERB_Quarry                                      = 12,
	REVERB_Plain                                       = 13,
	REVERB_ParkingLot                                  = 14,
	REVERB_SewerPipe                                   = 15,
	REVERB_Underwater                                  = 16,
	REVERB_SmallRoom                                   = 17,
	REVERB_MediumRoom                                  = 18,
	REVERB_LargeRoom                                   = 19,
	REVERB_MediumHall                                  = 20,
	REVERB_LargeHall                                   = 21,
	REVERB_Plate                                       = 22,
	REVERB_MAX                                         = 23
};*/

// Enum Engine.AnimationCompressionAlgorithm.ValidRotationCompressionFormats
/*enum ValidRotationCompressionFormats
{
	PolarEncoded32                                     = 0,
	PolarEncoded48                                     = 1,
	ValidRotationCompressionFormats_MAX                = 2
};*/

// Enum Engine.AnimationCompressionAlgorithm.ValidTranslationCompressionFormats
/*enum ValidTranslationCompressionFormats
{
	IntervalFixed32NoW                                 = 0,
	ValidTranslationCompressionFormats_MAX             = 1
};*/

// Enum Engine.AnimSequence.AnimationCompressionFormat
/*enum AnimationCompressionFormat
{
	ACF_None                                           = 0,
	ACF_Float96NoW                                     = 1,
	ACF_Fixed48NoW                                     = 2,
	ACF_IntervalFixed32NoW                             = 3,
	ACF_Fixed32NoW                                     = 4,
	ACF_Float32NoW                                     = 5,
	ACF_Delta40NoW                                     = 6,
	ACF_Delta48NoW                                     = 7,
	ACF_Identity                                       = 8,
	ACF_PolarEncoded32                                 = 9,
	ACF_PolarEncoded48                                 = 10,
	ACF_MAX                                            = 11
};*/

// Enum Engine.AnimSequence.AnimationKeyFormat
/*enum AnimationKeyFormat
{
	AKF_ConstantKeyLerp                                = 0,
	AKF_VariableKeyLerp                                = 1,
	AKF_PerTrackCompression                            = 2,
	AKF_MAX                                            = 3
};*/

// Enum Engine.AnimNode.ESliderType
/*enum ESliderType
{
	ST_1D                                              = 0,
	ST_2D                                              = 1,
	ST_MAX                                             = 2
};*/

// Enum Engine.AnimNode_MultiBlendPerBone.EWeightCheck
/*enum EWeightCheck
{
	EWC_AnimNodeSlotNotPlaying                         = 0,
	EWC_MAX                                            = 1
};*/

// Enum Engine.AnimNode_MultiBlendPerBone.EBlendType
/*enum EBlendType
{
	EBT_ParentBoneSpace                                = 0,
	EBT_MeshSpace                                      = 1,
	EBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeAimOffset.EAnimAimDir
/*enum EAnimAimDir
{
	ANIMAIM_LEFTUP                                     = 0,
	ANIMAIM_CENTERUP                                   = 1,
	ANIMAIM_RIGHTUP                                    = 2,
	ANIMAIM_LEFTCENTER                                 = 3,
	ANIMAIM_CENTERCENTER                               = 4,
	ANIMAIM_RIGHTCENTER                                = 5,
	ANIMAIM_LEFTDOWN                                   = 6,
	ANIMAIM_CENTERDOWN                                 = 7,
	ANIMAIM_RIGHTDOWN                                  = 8,
	ANIMAIM_MAX                                        = 9
};*/

// Enum Engine.AnimNodeAimOffset.EAimID
/*enum EAimID
{
	EAID_LeftUp                                        = 0,
	EAID_LeftDown                                      = 1,
	EAID_RightUp                                       = 2,
	EAID_RightDown                                     = 3,
	EAID_ZeroUp                                        = 4,
	EAID_ZeroDown                                      = 5,
	EAID_ZeroLeft                                      = 6,
	EAID_ZeroRight                                     = 7,
	EAID_CellLU                                        = 8,
	EAID_CellCU                                        = 9,
	EAID_CellRU                                        = 10,
	EAID_CellLC                                        = 11,
	EAID_CellCC                                        = 12,
	EAID_CellRC                                        = 13,
	EAID_CellLD                                        = 14,
	EAID_CellCD                                        = 15,
	EAID_CellRD                                        = 16,
	EAID_MAX                                           = 17
};*/

// Enum Engine.AnimNodeBlendByBase.EBaseBlendType
/*enum EBaseBlendType
{
	BBT_ByActorTag                                     = 0,
	BBT_ByActorClass                                   = 1,
	BBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeSequence.ERootRotationOption
/*enum ERootRotationOption
{
	RRO_Default                                        = 0,
	RRO_Discard                                        = 1,
	RRO_Extract                                        = 2,
	RRO_MAX                                            = 3
};*/

// Enum Engine.AnimNodeSequence.ERootBoneAxis
/*enum ERootBoneAxis
{
	RBA_Default                                        = 0,
	RBA_Discard                                        = 1,
	RBA_Translate                                      = 2,
	RBA_MAX                                            = 3
};*/

// Enum Engine.ITargetable.EChangeStatus
/*enum EChangeStatus
{
	CHANGE_Toggle                                      = 0,
	CHANGE_Enable                                      = 1,
	CHANGE_Disable                                     = 2,
	CHANGE_MAX                                         = 3
};*/

// Enum Engine.ITargetable.EInfoBarType
/*enum EInfoBarType
{
	EIBT_Shield                                        = 0,
	EIBT_Health                                        = 1,
	EIBT_Vehicle                                       = 2,
	EIBT_Minibar                                       = 3,
	EIBT_MAX                                           = 4
};*/

// Enum Engine.PawnAllegiance.EOpinion
/*enum EOpinion
{
	OPINION_Enemy                                      = 0,
	OPINION_Neutral                                    = 1,
	OPINION_Friendly                                   = 2,
	OPINION_MAX                                        = 3
};*/

// Enum Engine.ITargetable.EAutoAimProfile
/*enum EAutoAimProfile
{
	AAP_Heavy                                          = 0,
	AAP_Medium                                         = 1,
	AAP_Light                                          = 2,
	AAP_None                                           = 3,
	AAP_MAX                                            = 4
};*/

// Enum Engine.EngineTypes.EPathFindingError
/*enum EPathFindingError
{
	PATHERROR_STARTPOLYNOTFOUND                        = 0,
	PATHERROR_GOALPOLYNOTFOUND                         = 1,
	PATHERROR_ANCHORPYLONNOTFOUND                      = 2,
	PATHERROR_NOPATHFOUND                              = 3,
	PATHERROR_COMPUTEVALIDFINALDEST_FAIL               = 4,
	PATHERROR_GETNEXTMOVELOCATION_FAIL                 = 5,
	PATHERROR_MAX                                      = 6
};*/

// Enum Engine.EngineTypes.EBlendMode
/*enum EBlendMode
{
	BLEND_Opaque                                       = 0,
	BLEND_Masked                                       = 1,
	BLEND_Translucent                                  = 2,
	BLEND_Additive                                     = 3,
	BLEND_Modulate                                     = 4,
	BLEND_SoftMasked                                   = 5,
	BLEND_AlphaComposite                               = 6,
	BLEND_DitheredTranslucent                          = 7,
	BLEND_MAX                                          = 8
};*/

// Enum Engine.EngineTypes.EMaterialLightingModel
/*enum EMaterialLightingModel
{
	MLM_Phong                                          = 0,
	MLM_NonDirectional                                 = 1,
	MLM_Unlit                                          = 2,
	MLM_SHPRT                                          = 3,
	MLM_Custom                                         = 4,
	MLM_Anisotropic                                    = 5,
	MLM_MAX                                            = 6
};*/

// Enum Engine.EngineTypes.EMaterialTessellationMode
/*enum EMaterialTessellationMode
{
	MTM_NoTessellation                                 = 0,
	MTM_FlatTessellation                               = 1,
	MTM_PNTriangles                                    = 2,
	MTM_MAX                                            = 3
};*/

// Enum Engine.EngineTypes.EMobileTextureTransformTarget
/*enum EMobileTextureTransformTarget
{
	MTTT_BaseTexture                                   = 0,
	MTTT_DetailTexture                                 = 1,
	MTTT_MAX                                           = 2
};*/

// Enum Engine.EngineTypes.EMobileValueSource
/*enum EMobileValueSource
{
	MVS_Constant                                       = 0,
	MVS_VertexColorRed                                 = 1,
	MVS_VertexColorGreen                               = 2,
	MVS_VertexColorBlue                                = 3,
	MVS_VertexColorAlpha                               = 4,
	MVS_BaseTextureRed                                 = 5,
	MVS_BaseTextureGreen                               = 6,
	MVS_BaseTextureBlue                                = 7,
	MVS_BaseTextureAlpha                               = 8,
	MVS_MaskTextureRed                                 = 9,
	MVS_MaskTextureGreen                               = 10,
	MVS_MaskTextureBlue                                = 11,
	MVS_MaskTextureAlpha                               = 12,
	MVS_NormalTextureAlpha                             = 13,
	MVS_MAX                                            = 14
};*/

// Enum Engine.EngineTypes.EMobileTextureBlendFactorSource
/*enum EMobileTextureBlendFactorSource
{
	MTBFS_VertexColor                                  = 0,
	MTBFS_MaskTexture                                  = 1,
	MTBFS_MAX                                          = 2
};*/

// Enum Engine.EngineTypes.EMobileTexCoordsSource
/*enum EMobileTexCoordsSource
{
	MTCS_TexCoords0                                    = 0,
	MTCS_TexCoords1                                    = 1,
	MTCS_TexCoords2                                    = 2,
	MTCS_TexCoords3                                    = 3,
	MTCS_MAX                                           = 4
};*/

// Enum Engine.EngineTypes.EMobileEmissiveColorSource
/*enum EMobileEmissiveColorSource
{
	MECS_EmissiveTexture                               = 0,
	MECS_BaseTexture                                   = 1,
	MECS_Constant                                      = 2,
	MECS_MAX                                           = 3
};*/

// Enum Engine.EngineTypes.EMobileEnvironmentBlendMode
/*enum EMobileEnvironmentBlendMode
{
	MEBM_Add                                           = 0,
	MEBM_Lerp                                          = 1,
	MEBM_MAX                                           = 2
};*/

// Enum Engine.EngineTypes.EMobileSpecularMask
/*enum EMobileSpecularMask
{
	MSM_Constant                                       = 0,
	MSM_Luminance                                      = 1,
	MSM_DiffuseRed                                     = 2,
	MSM_DiffuseGreen                                   = 3,
	MSM_DiffuseBlue                                    = 4,
	MSM_DiffuseAlpha                                   = 5,
	MSM_MaskTextureRGB                                 = 6,
	MSM_MAX                                            = 7
};*/

// Enum Engine.EngineTypes.EMobileAmbientOcclusionSource
/*enum EMobileAmbientOcclusionSource
{
	MAOS_Disabled                                      = 0,
	MAOS_VertexColorRed                                = 1,
	MAOS_VertexColorGreen                              = 2,
	MAOS_VertexColorBlue                               = 3,
	MAOS_VertexColorAlpha                              = 4,
	MAOS_MAX                                           = 5
};*/

// Enum Engine.EngineTypes.ELightingBuildQuality
/*enum ELightingBuildQuality
{
	Quality_Preview                                    = 0,
	Quality_Medium                                     = 1,
	Quality_High                                       = 2,
	Quality_Production                                 = 3,
	Quality_NoGlobalIllumination                       = 4,
	Quality_MAX                                        = 5
};*/

// Enum Engine.Pawn.EPathSearchType
/*enum EPathSearchType
{
	PST_Default                                        = 0,
	PST_Breadth                                        = 1,
	PST_NewBestPathTo                                  = 2,
	PST_Constraint                                     = 3,
	PST_MAX                                            = 4
};*/

// Enum Engine.DynamicLightEnvironmentComponent.EDynamicLightEnvironmentBoundsMethod
/*enum EDynamicLightEnvironmentBoundsMethod
{
	DLEB_OwnerComponents                               = 0,
	DLEB_ManualOverride                                = 1,
	DLEB_ActiveComponents                              = 2,
	DLEB_MAX                                           = 3
};*/

// Enum Engine.ApexDestructibleDamageParameters.EDamageParameterOverrideMode
/*enum EDamageParameterOverrideMode
{
	DPOM_Absolute                                      = 0,
	DPOM_Multiplier                                    = 1,
	DPOM_MAX                                           = 2
};*/

// Enum Engine.AttributeDefinitionBase.EAttributeDataType
/*enum EAttributeDataType
{
	ADT_Float                                          = 0,
	ADT_Int                                            = 1,
	ADT_Bool                                           = 2,
	ADT_MAX                                            = 3
};*/

// Enum Engine.AttributeDefinition.EAttributeTranslationStyle
/*enum EAttributeTranslationStyle
{
	ATTRSTYLE_JustNumber                               = 0,
	ATTRSTYLE_ModifierText                             = 1,
	ATTRSTYLE_Debug                                    = 2,
	ATTRSTYLE_LeaveBlank                               = 3,
	ATTRSTYLE_MAX                                      = 4
};*/

// Enum Engine.AttributeExpression.EExpressionEvaluationMode
/*enum EExpressionEvaluationMode
{
	EXPRMODE_And                                       = 0,
	EXPRMODE_Or                                        = 1,
	EXPRMODE_MAX                                       = 2
};*/

// Enum Engine.AttributeExpression.EOperandUsage
/*enum EOperandUsage
{
	OPERAND_PreferAttribute                            = 0,
	OPERAND_Multiply                                   = 1,
	OPERAND_MAX                                        = 2
};*/

// Enum Engine.AttributeExpression.EComparisonOperator
/*enum EComparisonOperator
{
	OPERATOR_EqualTo                                   = 0,
	OPERATOR_NotEqualTo                                = 1,
	OPERATOR_LessThan                                  = 2,
	OPERATOR_LessThanOrEqual                           = 3,
	OPERATOR_GreaterThan                               = 4,
	OPERATOR_GreaterThanOrEqual                        = 5,
	OPERATOR_MAX                                       = 6
};*/

// Enum Engine.AttributeInitializationDefinition.EBaseValueMode
/*enum EBaseValueMode
{
	BASEVALUE_InitializationDefSetsBaseValue           = 0,
	BASEVALUE_InitializationDefAddsToBaseValue         = 1,
	BASEVALUE_InitializationDefScalesBaseValue         = 2,
	BASEVALUE_InitializationDefOffsetByBaseValue       = 3,
	BASEVALUE_MAX                                      = 4
};*/

// Enum Engine.AttributeInitializationDefinition.EAttributeInitializationRounding
/*enum EAttributeInitializationRounding
{
	ATTRROUNDING_Float                                 = 0,
	ATTRROUNDING_IntRound                              = 1,
	ATTRROUNDING_IntFloor                              = 2,
	ATTRROUNDING_IntCeil                               = 3,
	ATTRROUNDING_MAX                                   = 4
};*/

// Enum Engine.AudioDevice.ESoundClassName
/*enum ESoundClassName
{
	Master                                             = 0,
	ESoundClassName_MAX                                = 1
};*/

// Enum Engine.AudioDevice.EDebugState
/*enum EDebugState
{
	DEBUGSTATE_None                                    = 0,
	DEBUGSTATE_IsolateDryAudio                         = 1,
	DEBUGSTATE_IsolateReverb                           = 2,
	DEBUGSTATE_TestLPF                                 = 3,
	DEBUGSTATE_TestStereoBleed                         = 4,
	DEBUGSTATE_TestLFEBleed                            = 5,
	DEBUGSTATE_DisableLPF                              = 6,
	DEBUGSTATE_DisableRadio                            = 7,
	DEBUGSTATE_MAX                                     = 8
};*/

// Enum Engine.AudioDevice.ETTSSpeaker
/*enum ETTSSpeaker
{
	TTSSPEAKER_Paul                                    = 0,
	TTSSPEAKER_Harry                                   = 1,
	TTSSPEAKER_Frank                                   = 2,
	TTSSPEAKER_Dennis                                  = 3,
	TTSSPEAKER_Kit                                     = 4,
	TTSSPEAKER_Betty                                   = 5,
	TTSSPEAKER_Ursula                                  = 6,
	TTSSPEAKER_Rita                                    = 7,
	TTSSPEAKER_Wendy                                   = 8,
	TTSSPEAKER_MAX                                     = 9
};*/

// Enum Engine.BehaviorBase.EBehaviorContext
/*enum EBehaviorContext
{
	BCONTEXT_Self                                      = 0,
	BCONTEXT_MyInstigator                              = 1,
	BCONTEXT_OtherEventParticipant                     = 2,
	BCONTEXT_EventData                                 = 3,
	BCONTEXT_UseContextObject                          = 4,
	BCONTEXT_MAX                                       = 5
};*/

// Enum Engine.ICounterBehavior.EBehaviorCounterID
/*enum EBehaviorCounterID
{
	BCOUNTER                                           = 0,
	BCOUNTER01                                         = 1,
	BCOUNTER_MAX                                       = 2
};*/

// Enum Engine.ICounterBehavior.EBehaviorCounterEvent
/*enum EBehaviorCounterEvent
{
	COUNTEREVENT_Counter1AtTarget                      = 0,
	COUNTEREVENT_Counter2AtTarget                      = 1,
	COUNTEREVENT_MAX                                   = 2
};*/

// Enum Engine.Behavior_CustomAnimation.EBehaviorCustomAnimationReaction
/*enum EBehaviorCustomAnimationReaction
{
	AR_Play                                            = 0,
	AR_Stop                                            = 1,
	AR_MAX                                             = 2
};*/

// Enum Engine.Behavior_FollowAllegiance.EFollowAllegiance
/*enum EFollowAllegiance
{
	FollowAllegiance_Follow                            = 0,
	FollowAllegiance_Release                           = 1,
	FollowAllegiance_MAX                               = 2
};*/

// Enum Engine.IKilledBehavior.EScriptedKillType
/*enum EScriptedKillType
{
	KILL_Normal                                        = 0,
	KILL_GibOnly                                       = 1,
	KILL_TechOnly                                      = 2,
	KILL_PreferTech                                    = 3,
	KILL_SpecialDeath1                                 = 4,
	KILL_SpecialDeath2                                 = 5,
	KILL_SpecialDeath3                                 = 6,
	KILL_MAX                                           = 7
};*/

// Enum Engine.Behavior_SetPhysics.EBodyAction
/*enum EBodyAction
{
	BA_UnfixAllBodies                                  = 0,
	BA_FixAllBodies                                    = 1,
	BA_NoChange                                        = 2,
	BA_MAX                                             = 3
};*/

// Enum Engine.Behavior_SetPhysics.ESimulationAction
/*enum ESimulationAction
{
	SA_StartSimulation                                 = 0,
	SA_StopSimulation                                  = 1,
	SA_MAX                                             = 2
};*/

// Enum Engine.StaticMeshComponent.ELightmapModificationFunction
/*enum ELightmapModificationFunction
{
	MLMF_Modulate                                      = 0,
	MLMF_ModulateAlpha                                 = 1,
	MLMF_MAX                                           = 2
};*/

// Enum Engine.CameraShake.EInitialOscillatorOffset
/*enum EInitialOscillatorOffset
{
	EOO_OffsetRandom                                   = 0,
	EOO_OffsetZero                                     = 1,
	EOO_MAX                                            = 2
};*/

// Enum Engine.Texture.TextureCompressionSettings
/*enum TextureCompressionSettings
{
	TC_Default                                         = 0,
	TC_Normalmap                                       = 1,
	TC_Displacementmap                                 = 2,
	TC_NormalmapAlpha                                  = 3,
	TC_Grayscale                                       = 4,
	TC_HighDynamicRange                                = 5,
	TC_OneBitAlpha                                     = 6,
	TC_NormalmapUncompressed                           = 7,
	TC_NormalmapBC5                                    = 8,
	TC_OneBitMonochrome                                = 9,
	TC_SimpleLightmapModification                      = 10,
	TC_VectorDisplacementmap                           = 11,
	TC_MAX                                             = 12
};*/

// Enum Engine.Texture.EPixelFormat
/*enum EPixelFormat
{
	PF_Unknown                                         = 0,
	PF_A32B32G32R32F                                   = 1,
	PF_A8R8G8B8                                        = 2,
	PF_G8                                              = 3,
	PF_G16                                             = 4,
	PF_DXT1                                            = 5,
	PF_DXT3                                            = 6,
	PF_DXT5                                            = 7,
	PF_UYVY                                            = 8,
	PF_FloatRGB                                        = 9,
	PF_FloatRGBA                                       = 10,
	PF_DepthStencil                                    = 11,
	PF_ShadowDepth                                     = 12,
	PF_FilteredShadowDepth                             = 13,
	PF_R32F                                            = 14,
	PF_G16R16                                          = 15,
	PF_G16R16F                                         = 16,
	PF_G16R16F_FILTER                                  = 17,
	PF_G32R32F                                         = 18,
	PF_A2B10G10R10                                     = 19,
	PF_A16B16G16R16                                    = 20,
	PF_D24                                             = 21,
	PF_R16F                                            = 22,
	PF_R16F_FILTER                                     = 23,
	PF_BC5                                             = 24,
	PF_V8U8                                            = 25,
	PF_A1                                              = 26,
	PF_FloatR11G11B10                                  = 27,
	PF_MAX                                             = 28
};*/

// Enum Engine.Texture.TextureFilter
/*enum TextureFilter
{
	TF_Nearest                                         = 0,
	TF_Linear                                          = 1,
	TF_MAX                                             = 2
};*/

// Enum Engine.Texture.TextureAddress
/*enum TextureAddress
{
	TA_Wrap                                            = 0,
	TA_Clamp                                           = 1,
	TA_Mirror                                          = 2,
	TA_MAX                                             = 3
};*/

// Enum Engine.Texture.TextureGroup
/*enum TextureGroup
{
	TEXTUREGROUP_World                                 = 0,
	TEXTUREGROUP_WorldNormalMap                        = 1,
	TEXTUREGROUP_WorldSpecular                         = 2,
	TEXTUREGROUP_Character                             = 3,
	TEXTUREGROUP_CharacterNormalMap                    = 4,
	TEXTUREGROUP_CharacterSpecular                     = 5,
	TEXTUREGROUP_Weapon                                = 6,
	TEXTUREGROUP_WeaponNormalMap                       = 7,
	TEXTUREGROUP_WeaponSpecular                        = 8,
	TEXTUREGROUP_Vehicle                               = 9,
	TEXTUREGROUP_VehicleNormalMap                      = 10,
	TEXTUREGROUP_VehicleSpecular                       = 11,
	TEXTUREGROUP_Cinematic                             = 12,
	TEXTUREGROUP_Effects                               = 13,
	TEXTUREGROUP_EffectsNotFiltered                    = 14,
	TEXTUREGROUP_Skybox                                = 15,
	TEXTUREGROUP_UI                                    = 16,
	TEXTUREGROUP_Lightmap                              = 17,
	TEXTUREGROUP_RenderTarget                          = 18,
	TEXTUREGROUP_MobileFlattened                       = 19,
	TEXTUREGROUP_ProcBuilding_Face                     = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                 = 21,
	TEXTUREGROUP_Shadowmap                             = 22,
	TEXTUREGROUP_ColorLookupTable                      = 23,
	TEXTUREGROUP_Terrain_Heightmap                     = 24,
	TEXTUREGROUP_Terrain_Weightmap                     = 25,
	TEXTUREGROUP_ImageBasedReflection                  = 26,
	TEXTUREGROUP_Bokeh                                 = 27,
	TEXTUREGROUP_MAX                                   = 28
};*/

// Enum Engine.Texture.TextureMipGenSettings
/*enum TextureMipGenSettings
{
	TMGS_FromTextureGroup                              = 0,
	TMGS_SimpleAverage                                 = 1,
	TMGS_Sharpen0                                      = 2,
	TMGS_Sharpen1                                      = 3,
	TMGS_Sharpen2                                      = 4,
	TMGS_Sharpen3                                      = 5,
	TMGS_Sharpen4                                      = 6,
	TMGS_Sharpen5                                      = 7,
	TMGS_Sharpen6                                      = 8,
	TMGS_Sharpen7                                      = 9,
	TMGS_Sharpen8                                      = 10,
	TMGS_Sharpen9                                      = 11,
	TMGS_Sharpen10                                     = 12,
	TMGS_NoMipmaps                                     = 13,
	TMGS_LeaveExistingMips                             = 14,
	TMGS_Blur1                                         = 15,
	TMGS_Blur2                                         = 16,
	TMGS_Blur3                                         = 17,
	TMGS_Blur4                                         = 18,
	TMGS_Blur5                                         = 19,
	TMGS_MAX                                           = 20
};*/

// Enum Engine.Texture.ETextureMipCount
/*enum ETextureMipCount
{
	TMC_ResidentMips                                   = 0,
	TMC_AllMips                                        = 1,
	TMC_AllMipsBiased                                  = 2,
	TMC_MAX                                            = 3
};*/

// Enum Engine.UIRoot.EInputPlatformType
/*enum EInputPlatformType
{
	IPT_PC                                             = 0,
	IPT                                                = 1,
	IPT_PS3                                            = 2,
	IPT_MAX                                            = 3
};*/

// Enum Engine.UIRoot.EUIDataProviderFieldType
/*enum EUIDataProviderFieldType
{
	DATATYPE_Property                                  = 0,
	DATATYPE_Provider                                  = 1,
	DATATYPE_RangeProperty                             = 2,
	DATATYPE_NetIdProperty                             = 3,
	DATATYPE_Collection                                = 4,
	DATATYPE_ProviderCollection                        = 5,
	DATATYPE_MAX                                       = 6
};*/

// Enum Engine.CoverGroup.ECoverGroupFillAction
/*enum ECoverGroupFillAction
{
	CGFA_Overwrite                                     = 0,
	CGFA_Add                                           = 1,
	CGFA_Remove                                        = 2,
	CGFA_Clear                                         = 3,
	CGFA_Cylinder                                      = 4,
	CGFA_MAX                                           = 5
};*/

// Enum Engine.CoverLink.ECoverLocationDescription
/*enum ECoverLocationDescription
{
	CoverDesc_None                                     = 0,
	CoverDesc_InWindow                                 = 1,
	CoverDesc_InDoorway                                = 2,
	CoverDesc_BehindCar                                = 3,
	CoverDesc_BehindTruck                              = 4,
	CoverDesc_OnTruck                                  = 5,
	CoverDesc_BehindBarrier                            = 6,
	CoverDesc_BehindColumn                             = 7,
	CoverDesc_BehindCrate                              = 8,
	CoverDesc_BehindWall                               = 9,
	CoverDesc_BehindStatue                             = 10,
	CoverDesc_BehindSandbags                           = 11,
	CoverDesc_MAX                                      = 12
};*/

// Enum Engine.CoverLink.ECoverType
/*enum ECoverType
{
	CT_None                                            = 0,
	CT_Standing                                        = 1,
	CT_MidLevel                                        = 2,
	CT_MAX                                             = 3
};*/

// Enum Engine.CoverLink.ECoverAction
/*enum ECoverAction
{
	CA_Default                                         = 0,
	CA_BlindLeft                                       = 1,
	CA_BlindRight                                      = 2,
	CA_LeanLeft                                        = 3,
	CA_LeanRight                                       = 4,
	CA_StepLeft                                        = 5,
	CA_StepRight                                       = 6,
	CA_PopUp                                           = 7,
	CA_BlindUp                                         = 8,
	CA_PeekLeft                                        = 9,
	CA_PeekRight                                       = 10,
	CA_PeekUp                                          = 11,
	CA_MAX                                             = 12
};*/

// Enum Engine.CoverLink.ECoverDirection
/*enum ECoverDirection
{
	CD_Default                                         = 0,
	CD_Left                                            = 1,
	CD_Right                                           = 2,
	CD_Up                                              = 3,
	CD_MAX                                             = 4
};*/

// Enum Engine.CoverLink.EFireLinkID
/*enum EFireLinkID
{
	FLI_FireLink                                       = 0,
	FLI_RejectedFireLink                               = 1,
	FLI_MAX                                            = 2
};*/

// Enum Engine.DamagePipeline.EReflectionType
/*enum EReflectionType
{
	REFLT_None                                         = 0,
	REFLT_Instigator                                   = 1,
	REFLT_Self                                         = 2,
	REFLT_MAX                                          = 3
};*/

// Enum Engine.DamagePipeline.EDamageSkillEventType
/*enum EDamageSkillEventType
{
	DSET_DamageTaken                                   = 0,
	DSET_DamageDealt                                   = 1,
	DSET_MAX                                           = 2
};*/

// Enum Engine.DecalComponent.EFilterMode
/*enum EFilterMode
{
	FM_None                                            = 0,
	FM_Ignore                                          = 1,
	FM_Affect                                          = 2,
	FM_MAX                                             = 3
};*/

// Enum Engine.DecalComponent.EDecalTransform
/*enum EDecalTransform
{
	DecalTransform_OwnerAbsolute                       = 0,
	DecalTransform_OwnerRelative                       = 1,
	DecalTransform_SpawnRelative                       = 2,
	DecalTransform_MAX                                 = 3
};*/

// Enum Engine.MaterialInterface.EMaterialUsage
/*enum EMaterialUsage
{
	MATUSAGE_SkeletalMesh                              = 0,
	MATUSAGE_FracturedMeshes                           = 1,
	MATUSAGE_ParticleSprites                           = 2,
	MATUSAGE_BeamTrails                                = 3,
	MATUSAGE_ParticleSubUV                             = 4,
	MATUSAGE_Foliage                                   = 5,
	MATUSAGE_SpeedTree                                 = 6,
	MATUSAGE_StaticLighting                            = 7,
	MATUSAGE_GammaCorrection                           = 8,
	MATUSAGE_LensFlare                                 = 9,
	MATUSAGE_InstancedMeshParticles                    = 10,
	MATUSAGE_FluidSurface                              = 11,
	MATUSAGE_Decals                                    = 12,
	MATUSAGE_MaterialEffect                            = 13,
	MATUSAGE_MorphTargets                              = 14,
	MATUSAGE_FogVolumes                                = 15,
	MATUSAGE_RadialBlur                                = 16,
	MATUSAGE_InstancedMeshes                           = 17,
	MATUSAGE_SplineMesh                                = 18,
	MATUSAGE_ScreenDoorFade                            = 19,
	MATUSAGE_APEXMesh                                  = 20,
	MATUSAGE_Terrain                                   = 21,
	MATUSAGE_Landscape                                 = 22,
	MATUSAGE_SPHFluid                                  = 23,
	MATUSAGE_MAX                                       = 24
};*/

// Enum Engine.MaterialInterface.ECustomSkinType
/*enum ECustomSkinType
{
	CUSTSKIN_None                                      = 0,
	CUSTSKIN_Body                                      = 1,
	CUSTSKIN_Head                                      = 2,
	CUSTSKIN_MAX                                       = 3
};*/

// Enum Engine.Material.EParticleDownsampling
/*enum EParticleDownsampling
{
	PDS_Full                                           = 0,
	PDS_Half                                           = 1,
	PDS_Quarter                                        = 2,
	PDS_MAX                                            = 3
};*/

// Enum Engine.LightComponent.EShadowFilterQuality
/*enum EShadowFilterQuality
{
	SFQ_Low                                            = 0,
	SFQ_Medium                                         = 1,
	SFQ_High                                           = 2,
	SFQ_MAX                                            = 3
};*/

// Enum Engine.LightComponent.EShadowProjectionTechnique
/*enum EShadowProjectionTechnique
{
	ShadowProjTech_Default                             = 0,
	ShadowProjTech_PCF                                 = 1,
	ShadowProjTech_VSM                                 = 2,
	ShadowProjTech_BPCF_Low                            = 3,
	ShadowProjTech_BPCF_Medium                         = 4,
	ShadowProjTech_BPCF_High                           = 5,
	ShadowProjTech_MAX                                 = 6
};*/

// Enum Engine.LightComponent.ELightShadowMode
/*enum ELightShadowMode
{
	LightShadow_Normal                                 = 0,
	LightShadow_Modulate                               = 1,
	LightShadow_ModulateBetter                         = 2,
	LightShadow_MAX                                    = 3
};*/

// Enum Engine.LightComponent.ELightAffectsClassification
/*enum ELightAffectsClassification
{
	LAC_USER_SELECTED                                  = 0,
	LAC_DYNAMIC_AFFECTING                              = 1,
	LAC_STATIC_AFFECTING                               = 2,
	LAC_DYNAMIC_AND_STATIC_AFFECTING                   = 3,
	LAC_MAX                                            = 4
};*/

// Enum Engine.DistributionFloatParameterBase.DistributionParamMode
/*enum DistributionParamMode
{
	DPM_Normal                                         = 0,
	DPM_Abs                                            = 1,
	DPM_Direct                                         = 2,
	DPM_MAX                                            = 3
};*/

// Enum Engine.DOFAndBloomEffect.EDOFQuality
/*enum EDOFQuality
{
	DOFQuality_Low                                     = 0,
	DOFQuality_Medium                                  = 1,
	DOFQuality_High                                    = 2,
	DOFQuality_MAX                                     = 3
};*/

// Enum Engine.DOFAndBloomEffect.EDOFType
/*enum EDOFType
{
	DOFType_SimpleDOF                                  = 0,
	DOFType_ReferenceDOF                               = 1,
	DOFType_BokehDOF                                   = 2,
	DOFType_MAX                                        = 3
};*/

// Enum Engine.DoorMarker.EDoorType
/*enum EDoorType
{
	DOOR_Shoot                                         = 0,
	DOOR_Touch                                         = 1,
	DOOR_MAX                                           = 2
};*/

// Enum Engine.DownloadableContentEnumerator.EDlcEnumerationState
/*enum EDlcEnumerationState
{
	DLC_ENUM_None                                      = 0,
	DLC_ENUM_EnumeratingFiles                          = 1,
	DLC_ENUM_EnumerationComplete                       = 2,
	DLC_ENUM_MAX                                       = 3
};*/

// Enum Engine.DownloadableContentOfferEnumerator.EDlcOfferEnumerationState
/*enum EDlcOfferEnumerationState
{
	DLC_OFFER_ENUM_None                                = 0,
	DLC_OFFER_ENUM_EnumeratingOffers                   = 1,
	DLC_OFFER_ENUM_EnumerationComplete                 = 2,
	DLC_OFFER_ENUM_MAX                                 = 3
};*/

// Enum Engine.DownloadableContentManager.EInstallDLCResult
/*enum EInstallDLCResult
{
	INSTALLDLC_RES_Success                             = 0,
	INSTALLDLC_RES_InvalidNameInfo                     = 1,
	INSTALLDLC_RES_InvalidEngineVersion                = 2,
	INSTALLDLC_RES_CookedGuidMismatch                  = 3,
	INSTALLDLC_RES_CorruptContent                      = 4,
	INSTALLDLC_RES_UnknownFailure                      = 5,
	INSTALLDLC_RES_CannotInstallCompatibility          = 6,
	INSTALLDLC_RES_CompabitilityContentNotInstalled    = 7,
	INSTALLDLC_RES_UnlicensedNamedContent              = 8,
	INSTALLDLC_RES_MAX                                 = 9
};*/

// Enum Engine.DownloadableContentManager.EInstalledContentType
/*enum EInstalledContentType
{
	INSTALLED_CONTENT_TYPE_UnNamed                     = 0,
	INSTALLED_CONTENT_TYPE_Named                       = 1,
	INSTALLED_CONTENT_TYPE_Compatibility               = 2,
	INSTALLED_CONTENT_TYPE_SeasonPass                  = 3,
	INSTALLED_CONTENT_TYPE_PreorderBonus               = 4,
	INSTALLED_CONTENT_TYPE_CompatibilityPackContainer  = 5,
	INSTALLED_CONTENT_TYPE_MAX                         = 6
};*/

// Enum Engine.ParticleSystemComponent.EParticleSysParamType
/*enum EParticleSysParamType
{
	PSPT_None                                          = 0,
	PSPT_Scalar                                        = 1,
	PSPT_ScalarRand                                    = 2,
	PSPT_Vector                                        = 3,
	PSPT_VectorRand                                    = 4,
	PSPT_Color                                         = 5,
	PSPT_Actor                                         = 6,
	PSPT_Material                                      = 7,
	PSPT_MAX                                           = 8
};*/

// Enum Engine.ParticleSystemComponent.ParticleReplayState
/*enum ParticleReplayState
{
	PRS_Disabled                                       = 0,
	PRS_Capturing                                      = 1,
	PRS_Replaying                                      = 2,
	PRS_MAX                                            = 3
};*/

// Enum Engine.ParticleSystemComponent.EParticleEventType
/*enum EParticleEventType
{
	EPET_Any                                           = 0,
	EPET_Spawn                                         = 1,
	EPET_Death                                         = 2,
	EPET_Collision                                     = 3,
	EPET_Kismet                                        = 4,
	EPET_Trace                                         = 5,
	EPET_MAX                                           = 6
};*/

// Enum Engine.ParticleSystem.ParticleSystemLODMethod
/*enum ParticleSystemLODMethod
{
	PARTICLESYSTEMLODMETHOD_Automatic                  = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                  = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic          = 2,
	PARTICLESYSTEMLODMETHOD_MAX                        = 3
};*/

// Enum Engine.Engine.ETransitionType
/*enum ETransitionType
{
	TT_None                                            = 0,
	TT_Paused                                          = 1,
	TT_Loading                                         = 2,
	TT_Saving                                          = 3,
	TT_Connecting                                      = 4,
	TT_Precaching                                      = 5,
	TT_MAX                                             = 6
};*/

// Enum Engine.FileWriter.FWFileType
/*enum FWFileType
{
	FWFT_Log                                           = 0,
	FWFT_Stats                                         = 1,
	FWFT_HTML                                          = 2,
	FWFT_User                                          = 3,
	FWFT_Debug                                         = 4,
	FWFT_MAX                                           = 5
};*/

// Enum Engine.FluidInfluenceComponent.EInfluenceType
/*enum EInfluenceType
{
	Fluid_Flow                                         = 0,
	Fluid_Raindrops                                    = 1,
	Fluid_Wave                                         = 2,
	Fluid_Sphere                                       = 3,
	Fluid_MAX                                          = 4
};*/

// Enum Engine.FontImportOptions.EFontImportCharacterSet
/*enum EFontImportCharacterSet
{
	FontICS_Default                                    = 0,
	FontICS_Ansi                                       = 1,
	FontICS_Symbol                                     = 2,
	FontICS_MAX                                        = 3
};*/

// Enum Engine.ForceFeedbackWaveform.EWaveformFunction
/*enum EWaveformFunction
{
	WF_Constant                                        = 0,
	WF_LinearIncreasing                                = 1,
	WF_LinearDecreasing                                = 2,
	WF_Sin0to90                                        = 3,
	WF_Sin90to180                                      = 4,
	WF_Sin0to180                                       = 5,
	WF_Noise                                           = 6,
	WF_MAX                                             = 7
};*/

// Enum Engine.GameEngine.EFullyLoadPackageType
/*enum EFullyLoadPackageType
{
	FULLYLOAD_Map                                      = 0,
	FULLYLOAD_Game_PreLoadClass                        = 1,
	FULLYLOAD_Game_PostLoadClass                       = 2,
	FULLYLOAD_Always                                   = 3,
	FULLYLOAD_Mutator                                  = 4,
	FULLYLOAD_MAX                                      = 5
};*/

// Enum Engine.GameInfo.EStandbyType
/*enum EStandbyType
{
	STDBY_Rx                                           = 0,
	STDBY_Tx                                           = 1,
	STDBY_BadPing                                      = 2,
	STDBY_MAX                                          = 3
};*/

// Enum Engine.GameplayEvents.EGameStatGroups
/*enum EGameStatGroups
{
	GSG_EngineStats                                    = 0,
	GSG_Game                                           = 1,
	GSG_Team                                           = 2,
	GSG_Player                                         = 3,
	GSG_Weapon                                         = 4,
	GSG_Damage                                         = 5,
	GSG_Projectile                                     = 6,
	GSG_Pawn                                           = 7,
	GSG_GameSpecific                                   = 8,
	GSG_Aggregate                                      = 9,
	GSG_MAX                                            = 10
};*/

// Enum Engine.MusicTrackDataStructures.EMusicState
/*enum EMusicState
{
	MUSIC_PlayingAmbientMusic                          = 0,
	MUSIC_PlayingCustomAmbientMusic                    = 1,
	MUSIC_PlayingCombatMusicFull                       = 2,
	MUSIC_PlayingCombatMusicMid                        = 3,
	MUSIC_PlayingBossMusic                             = 4,
	MUSIC_PlayingCustomCombatMusic                     = 5,
	MUSIC_MAX                                          = 6
};*/

// Enum Engine.WorldInfo.EHostMigrationProgress
/*enum EHostMigrationProgress
{
	HostMigration_None                                 = 0,
	HostMigration_FindingNewHost                       = 1,
	HostMigration_MigratingAsHost                      = 2,
	HostMigration_MigratingAsClient                    = 3,
	HostMigration_ClientTravel                         = 4,
	HostMigration_HostReadyToTravel                    = 5,
	HostMigration_Failed                               = 6,
	HostMigration_MAX                                  = 7
};*/

// Enum Engine.WorldInfo.EConsoleType
/*enum EConsoleType
{
	CONSOLE_Any                                        = 0,
	CONSOLE_Xbox360                                    = 1,
	CONSOLE_PS3                                        = 2,
	CONSOLE_Mobile                                     = 3,
	CONSOLE_IPhone                                     = 4,
	CONSOLE_Android                                    = 5,
	CONSOLE_MAX                                        = 6
};*/

// Enum Engine.WorldInfo.EVisibilityAggressiveness
/*enum EVisibilityAggressiveness
{
	VIS_LeastAggressive                                = 0,
	VIS_ModeratelyAggressive                           = 1,
	VIS_MostAggressive                                 = 2,
	VIS_Max                                            = 3
};*/

// Enum Engine.WorldInfo.ENetMode
/*enum ENetMode
{
	NM_Standalone                                      = 0,
	NM_DedicatedServer                                 = 1,
	NM_ListenServer                                    = 2,
	NM_Client                                          = 3,
	NM_MAX                                             = 4
};*/

// Enum Engine.GameViewportClient.ESplitScreenType
/*enum ESplitScreenType
{
	eSST_NONE                                          = 0,
	eSST_2P_HORIZONTAL                                 = 1,
	eSST_2P_VERTICAL                                   = 2,
	eSST_3P_FAVOR_TOP                                  = 3,
	eSST_3P_FAVOR_BOTTOM                               = 4,
	eSST_4P                                            = 5,
	eSST_MAX                                           = 6
};*/

// Enum Engine.GameViewportClient.ESafeZoneType
/*enum ESafeZoneType
{
	eSZ_TOP                                            = 0,
	eSZ_BOTTOM                                         = 1,
	eSZ_LEFT                                           = 2,
	eSZ_RIGHT                                          = 3,
	eSZ_MAX                                            = 4
};*/

// Enum Engine.GameViewportClient.EShowPathsOutput
/*enum EShowPathsOutput
{
	eShowPaths_Off                                     = 0,
	eAllReachSpecs                                     = 1,
	eSpecialMovementsOnly                              = 2,
	eNoSpecialMovements                                = 3,
	EShowPathsOutput_MAX                               = 4
};*/

// Enum Engine.ResourcePool.EResourcePoolState
/*enum EResourcePoolState
{
	RPS_Depleted                                       = 0,
	RPS_Filled                                         = 1,
	RPS_Regenerating                                   = 2,
	RPS_MAX                                            = 3
};*/

// Enum Engine.IGBXNavMeshObstacle.EObstacleCollisionType
/*enum EObstacleCollisionType
{
	EOCT_ModifyNavMesh                                 = 0,
	EOCT_BuildThrough                                  = 1,
	EOCT_BuildAround                                   = 2,
	EOCT_MAX                                           = 3
};*/

// Enum Engine.IGBXNavMeshSpecialMove.GBXNavMeshSpecialMoveType
/*enum GBXNavMeshSpecialMoveType
{
	GBXNAVSPECIALMOVE_None                             = 0,
	GBXNAVSPECIALMOVE_WaitForPathObject                = 1,
	GBXNAVSPECIALMOVE_ForceMoveToDestination           = 2,
	GBXNAVSPECIALMOVE_MAX                              = 3
};*/

// Enum Engine.InstanceDataHelper.EBodyCompositionApplicationMode
/*enum EBodyCompositionApplicationMode
{
	EBCAM_Game                                         = 0,
	EBCAM_BackMenu                                     = 1,
	EBCAM_BackMenuInspection                           = 2,
	EBCAM_EditorPreview                                = 3,
	EBCAM_Frontend                                     = 4,
	EBCAM_Foreground                                   = 5,
	EBCAM_MAX                                          = 6
};*/

// Enum Engine.Interface_NavMeshPathObstacle.EEdgeHandlingStatus
/*enum EEdgeHandlingStatus
{
	EHS_AddedBothDirs                                  = 0,
	EHS_Added0to1                                      = 1,
	EHS_Added1to0                                      = 2,
	EHS_AddedNone                                      = 3,
	EHS_MAX                                            = 4
};*/

// Enum Engine.InterpGroupAI.InterpGroupAlignmentTypes
/*enum InterpGroupAlignmentTypes
{
	IGAT_None                                          = 0,
	IGAT_Teleport                                      = 1,
	IGAT_Lerp                                          = 2,
	IGAT_MAX                                           = 3
};*/

// Enum Engine.InterpTrack.ETrackPlayDirection
/*enum ETrackPlayDirection
{
	ETPD_PlayBoth                                      = 0,
	ETPD_PlayOnlyForward                               = 1,
	ETPD_PlayOnlyReverse                               = 2,
	ETPD_MAX                                           = 3
};*/

// Enum Engine.InterpTrack.ETrackActiveCondition
/*enum ETrackActiveCondition
{
	ETAC_Always                                        = 0,
	ETAC_GoreEnabled                                   = 1,
	ETAC_GoreDisabled                                  = 2,
	ETAC_MAX                                           = 3
};*/

// Enum Engine.InterpTrackHeadTracking.EHeadTrackingAction
/*enum EHeadTrackingAction
{
	EHTA_DisableHeadTracking                           = 0,
	EHTA_EnableHeadTracking                            = 1,
	EHTA_MAX                                           = 2
};*/

// Enum Engine.InterpTrackToggle.ETrackToggleAction
/*enum ETrackToggleAction
{
	ETTA_Off                                           = 0,
	ETTA_On                                            = 1,
	ETTA_Toggle                                        = 2,
	ETTA_Trigger                                       = 3,
	ETTA_MAX                                           = 4
};*/

// Enum Engine.InterpTrackVisibility.EVisibilityTrackCondition
/*enum EVisibilityTrackCondition
{
	EVTC_Always                                        = 0,
	EVTC_GoreEnabled                                   = 1,
	EVTC_GoreDisabled                                  = 2,
	EVTC_MAX                                           = 3
};*/

// Enum Engine.InterpTrackVisibility.EVisibilityTrackAction
/*enum EVisibilityTrackAction
{
	EVTA_Hide                                          = 0,
	EVTA_Show                                          = 1,
	EVTA_Toggle                                        = 2,
	EVTA_MAX                                           = 3
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveRotMode
/*enum EInterpTrackMoveRotMode
{
	IMR_Keyframed                                      = 0,
	IMR_LookAtGroup                                    = 1,
	IMR_Ignore                                         = 2,
	IMR_MAX                                            = 3
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveFrame
/*enum EInterpTrackMoveFrame
{
	IMF_World                                          = 0,
	IMF_RelativeToInitial                              = 1,
	IMF_MAX                                            = 2
};*/

// Enum Engine.InterpTrackMoveAxis.EInterpMoveAxis
/*enum EInterpMoveAxis
{
	AXIS_TranslationX                                  = 0,
	AXIS_TranslationY                                  = 1,
	AXIS_TranslationZ                                  = 2,
	AXIS_RotationX                                     = 3,
	AXIS_RotationY                                     = 4,
	AXIS_RotationZ                                     = 5,
	AXIS_MAX                                           = 6
};*/

// Enum Engine.LevelGridVolume.LevelGridCellShape
/*enum LevelGridCellShape
{
	LGCS_Box                                           = 0,
	LGCS_Hex                                           = 1,
	LGCS_MAX                                           = 2
};*/

// Enum Engine.LevelLandmark.ELandmarkType
/*enum ELandmarkType
{
	LANDMARK_Custom                                    = 0,
	LANDMARK_Transition                                = 1,
	LANDMARK_MAX                                       = 2
};*/

// Enum Engine.LevelStreamingVolume.ECurrentVisibility
/*enum ECurrentVisibility
{
	ECV_NotUpdated                                     = 0,
	ECV_Encompasses                                    = 1,
	ECV_NotEncompasses                                 = 2,
	ECV_Disabled                                       = 3,
	ECV_MAX                                            = 4
};*/

// Enum Engine.LevelStreamingVolume.EStreamingVolumeUsage
/*enum EStreamingVolumeUsage
{
	SVB_Loading                                        = 0,
	SVB_LoadingAndVisibility                           = 1,
	SVB_VisibilityBlockingOnLoad                       = 2,
	SVB_BlockingOnLoad                                 = 3,
	SVB_LoadingNotVisible                              = 4,
	SVB_MAX                                            = 5
};*/

// Enum Engine.LightShaftComponent.ELightShaftType
/*enum ELightShaftType
{
	LightShaft_Directional                             = 0,
	LightShaft_Spot                                    = 1,
	LightShaft_Point                                   = 2,
	LightShaft_MAX                                     = 3
};*/

// Enum Engine.LineData.ELineEditMode
/*enum ELineEditMode
{
	LEM_Cover                                          = 0,
	LEM_SI                                             = 1,
	LEM_MAX                                            = 2
};*/

// Enum Engine.LineSegment.ELineSegmentType
/*enum ELineSegmentType
{
	LSTY_Cover                                         = 0,
	LSTY_CoverLink                                     = 1,
	LSTY_SIZone                                        = 2,
	LSTY_SIRetreat                                     = 3,
	LSTY_SICombatZone                                  = 4,
	LSTY_SIStealth                                     = 5,
	LSTY_MAX                                           = 6
};*/

// Enum Engine.LineSegment.ELineSegmentMaterial
/*enum ELineSegmentMaterial
{
	LSM_Default                                        = 0,
	LSM_Vulnerable                                     = 1,
	LSM_Vantage                                        = 2,
	LSM_MAX                                            = 3
};*/

// Enum Engine.MaterialExpressionAntialiasedTextureMask.ETextureColorChannel
/*enum ETextureColorChannel
{
	TCC_Red                                            = 0,
	TCC_Green                                          = 1,
	TCC_Blue                                           = 2,
	TCC_Alpha                                          = 3,
	TCC_MAX                                            = 4
};*/

// Enum Engine.MaterialExpressionCustom.ECustomMaterialOutputType
/*enum ECustomMaterialOutputType
{
	CMOT_Float1                                        = 0,
	CMOT_Float2                                        = 1,
	CMOT_Float3                                        = 2,
	CMOT_Float4                                        = 3,
	CMOT_MAX                                           = 4
};*/

// Enum Engine.MaterialExpressionDepthOfFieldFunction.EDepthOfFieldFunctionValue
/*enum EDepthOfFieldFunctionValue
{
	TDOF_NearAndFarMask                                = 0,
	TDOF_NearMask                                      = 1,
	TDOF_FarMask                                       = 2,
	TDOF_MAX                                           = 3
};*/

// Enum Engine.MaterialExpressionGradient.EGradientStyle
/*enum EGradientStyle
{
	GRADIENT_Linear                                    = 0,
	GRADIENT_Radial                                    = 1,
	GRADIENT_Reflected                                 = 2,
	GRADIENT_MAX                                       = 3
};*/

// Enum Engine.MaterialExpressionSceneTexture.ESceneTextureType
/*enum ESceneTextureType
{
	SceneTex_Lighting                                  = 0,
	SceneTex_MAX                                       = 1
};*/

// Enum Engine.MaterialExpressionTerrainLayerCoords.ETerrainCoordMappingType
/*enum ETerrainCoordMappingType
{
	TCMT_Auto                                          = 0,
	TCMT_XY                                            = 1,
	TCMT_XZ                                            = 2,
	TCMT_YZ                                            = 3,
	TCMT_MAX                                           = 4
};*/

// Enum Engine.MaterialExpressionTerrainTextureCoordinate.ETerrainMaterialProjectionType
/*enum ETerrainMaterialProjectionType
{
	TMPT_XY                                            = 0,
	TMPT_XZ                                            = 1,
	TMPT_YZ                                            = 2,
	TMPT_MAX                                           = 3
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransform
/*enum EMaterialVectorCoordTransform
{
	TRANSFORM_World                                    = 0,
	TRANSFORM_View                                     = 1,
	TRANSFORM_Local                                    = 2,
	TRANSFORM_Tangent                                  = 3,
	TRANSFORM_MAX                                      = 4
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransformSource
/*enum EMaterialVectorCoordTransformSource
{
	TRANSFORMSOURCE_World                              = 0,
	TRANSFORMSOURCE_Local                              = 1,
	TRANSFORMSOURCE_Tangent                            = 2,
	TRANSFORMSOURCE_MAX                                = 3
};*/

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransform
/*enum EMaterialPositionTransform
{
	TRANSFORMPOS_World                                 = 0,
	TRANSFORMPOS_MAX                                   = 1
};*/

// Enum Engine.MaterialExpressionVectorIf.EVectorIfComparator
/*enum EVectorIfComparator
{
	VIC_Greater                                        = 0,
	VIC_GreaterEqual                                   = 1,
	VIC_Equal                                          = 2,
	VIC_NotEqual                                       = 3,
	VIC_MAX                                            = 4
};*/

// Enum Engine.NxForceFieldGeneric.FFG_ForceFieldCoordinates
/*enum FFG_ForceFieldCoordinates
{
	FFG_CARTESIAN                                      = 0,
	FFG_SPHERICAL                                      = 1,
	FFG_CYLINDRICAL                                    = 2,
	FFG_TOROIDAL                                       = 3,
	FFG_MAX                                            = 4
};*/

// Enum Engine.NxGenericForceFieldBrush.FFB_ForceFieldCoordinates
/*enum FFB_ForceFieldCoordinates
{
	FFB_CARTESIAN                                      = 0,
	FFB_SPHERICAL                                      = 1,
	FFB_CYLINDRICAL                                    = 2,
	FFB_TOROIDAL                                       = 3,
	FFB_MAX                                            = 4
};*/

// Enum Engine.OnlinePlayerStorage.EOnlineProfilePropertyOwner
/*enum EOnlineProfilePropertyOwner
{
	OPPO_None                                          = 0,
	OPPO_OnlineService                                 = 1,
	OPPO_Game                                          = 2,
	OPPO_MAX                                           = 3
};*/

// Enum Engine.OnlinePlayerStorage.EOnlinePlayerStorageAsyncState
/*enum EOnlinePlayerStorageAsyncState
{
	OPAS_NotStarted                                    = 0,
	OPAS_Read                                          = 1,
	OPAS_Write                                         = 2,
	OPAS_Finished                                      = 3,
	OPAS_MAX                                           = 4
};*/

// Enum Engine.UIDataProvider.EProviderAccessType
/*enum EProviderAccessType
{
	ACCESS_ReadOnly                                    = 0,
	ACCESS_PerField                                    = 1,
	ACCESS_WriteAll                                    = 2,
	ACCESS_MAX                                         = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileSettingID
/*enum EProfileSettingID
{
	PSI_Unknown                                        = 0,
	PSI_ControllerVibration                            = 1,
	PSI_YInversion                                     = 2,
	PSI_GamerCred                                      = 3,
	PSI_GamerRep                                       = 4,
	PSI_VoiceMuted                                     = 5,
	PSI_VoiceThruSpeakers                              = 6,
	PSI_VoiceVolume                                    = 7,
	PSI_GamerPictureKey                                = 8,
	PSI_GamerMotto                                     = 9,
	PSI_GamerTitlesPlayed                              = 10,
	PSI_GamerAchievementsEarned                        = 11,
	PSI_GameDifficulty                                 = 12,
	PSI_ControllerSensitivity                          = 13,
	PSI_PreferredColor1                                = 14,
	PSI_PreferredColor2                                = 15,
	PSI_AutoAim                                        = 16,
	PSI_AutoCenter                                     = 17,
	PSI_MovementControl                                = 18,
	PSI_RaceTransmission                               = 19,
	PSI_RaceCameraLocation                             = 20,
	PSI_RaceBrakeControl                               = 21,
	PSI_RaceAcceleratorControl                         = 22,
	PSI_GameCredEarned                                 = 23,
	PSI_GameAchievementsEarned                         = 24,
	PSI_EndLiveIds                                     = 25,
	PSI_ProfileVersionNum                              = 26,
	PSI_ProfileSaveCount                               = 27,
	PSI_MAX                                            = 28
};*/

// Enum Engine.OnlineProfileSettings.EProfileDifficultyOptions
/*enum EProfileDifficultyOptions
{
	PDO_Normal                                         = 0,
	PDO_Easy                                           = 1,
	PDO_Hard                                           = 2,
	PDO_MAX                                            = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerSensitivityOptions
/*enum EProfileControllerSensitivityOptions
{
	PCSO_Medium                                        = 0,
	PCSO_Low                                           = 1,
	PCSO_High                                          = 2,
	PCSO_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfilePreferredColorOptions
/*enum EProfilePreferredColorOptions
{
	PPCO_None                                          = 0,
	PPCO_Black                                         = 1,
	PPCO_White                                         = 2,
	PPCO_Yellow                                        = 3,
	PPCO_Orange                                        = 4,
	PPCO_Pink                                          = 5,
	PPCO_Red                                           = 6,
	PPCO_Purple                                        = 7,
	PPCO_Blue                                          = 8,
	PPCO_Green                                         = 9,
	PPCO_Brown                                         = 10,
	PPCO_Silver                                        = 11,
	PPCO_MAX                                           = 12
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoAimOptions
/*enum EProfileAutoAimOptions
{
	PAAO_Off                                           = 0,
	PAAO_On                                            = 1,
	PAAO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoCenterOptions
/*enum EProfileAutoCenterOptions
{
	PACO_Off                                           = 0,
	PACO_On                                            = 1,
	PACO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileMovementControlOptions
/*enum EProfileMovementControlOptions
{
	PMCO_L_Thumbstick                                  = 0,
	PMCO_R_Thumbstick                                  = 1,
	PMCO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceTransmissionOptions
/*enum EProfileRaceTransmissionOptions
{
	PRTO_Auto                                          = 0,
	PRTO_Manual                                        = 1,
	PRTO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceCameraLocationOptions
/*enum EProfileRaceCameraLocationOptions
{
	PRCLO_Behind                                       = 0,
	PRCLO_Front                                        = 1,
	PRCLO_Inside                                       = 2,
	PRCLO_MAX                                          = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceBrakeControlOptions
/*enum EProfileRaceBrakeControlOptions
{
	PRBCO_Trigger                                      = 0,
	PRBCO_Button                                       = 1,
	PRBCO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceAcceleratorControlOptions
/*enum EProfileRaceAcceleratorControlOptions
{
	PRACO_Trigger                                      = 0,
	PRACO_Button                                       = 1,
	PRACO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileYInversionOptions
/*enum EProfileYInversionOptions
{
	PYIO_Off                                           = 0,
	PYIO_On                                            = 1,
	PYIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileXInversionOptions
/*enum EProfileXInversionOptions
{
	PXIO_Off                                           = 0,
	PXIO_On                                            = 1,
	PXIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileOmniDirEvadeOptions
/*enum EProfileOmniDirEvadeOptions
{
	PODI_Off                                           = 0,
	PODI_On                                            = 1,
	PODI_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerVibrationToggleOptions
/*enum EProfileControllerVibrationToggleOptions
{
	PCVTO_Off                                          = 0,
	PCVTO_IgnoreThis                                   = 1,
	PCVTO_IgnoreThis2                                  = 2,
	PCVTO_On                                           = 3,
	PCVTO_MAX                                          = 4
};*/

// Enum Engine.OnlineProfileSettings.EProfileVoiceThruSpeakersOptions
/*enum EProfileVoiceThruSpeakersOptions
{
	PVTSO_Off                                          = 0,
	PVTSO_On                                           = 1,
	PVTSO_Both                                         = 2,
	PVTSO_MAX                                          = 3
};*/

// Enum Engine.ParticleEmitter.EEmitterRenderMode
/*enum EEmitterRenderMode
{
	ERM_Normal                                         = 0,
	ERM_Point                                          = 1,
	ERM_Cross                                          = 2,
	ERM_None                                           = 3,
	ERM_MAX                                            = 4
};*/

// Enum Engine.ParticleEmitter.EParticleSubUVInterpMethod
/*enum EParticleSubUVInterpMethod
{
	PSUVIM_None                                        = 0,
	PSUVIM_Linear                                      = 1,
	PSUVIM_Linear_Blend                                = 2,
	PSUVIM_Random                                      = 3,
	PSUVIM_Random_Blend                                = 4,
	PSUVIM_MAX                                         = 5
};*/

// Enum Engine.ParticleEmitter.EParticleBurstMethod
/*enum EParticleBurstMethod
{
	EPBM_Instant                                       = 0,
	EPBM_Interpolated                                  = 1,
	EPBM_MAX                                           = 2
};*/

// Enum Engine.ParticleModule.EModuleType
/*enum EModuleType
{
	EPMT_General                                       = 0,
	EPMT_TypeData                                      = 1,
	EPMT_Beam                                          = 2,
	EPMT_Trail                                         = 3,
	EPMT_Spawn                                         = 4,
	EPMT_Required                                      = 5,
	EPMT_Event                                         = 6,
	EPMT_MAX                                           = 7
};*/

// Enum Engine.ParticleModule.EParticleSourceSelectionMethod
/*enum EParticleSourceSelectionMethod
{
	EPSSM_Random                                       = 0,
	EPSSM_Sequential                                   = 1,
	EPSSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleAttractorParticle.EAttractorParticleSelectionMethod
/*enum EAttractorParticleSelectionMethod
{
	EAPSM_Random                                       = 0,
	EAPSM_Sequential                                   = 1,
	EAPSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetMethod
/*enum Beam2SourceTargetMethod
{
	PEB2STM_Default                                    = 0,
	PEB2STM_UserSet                                    = 1,
	PEB2STM_Emitter                                    = 2,
	PEB2STM_Particle                                   = 3,
	PEB2STM_Actor                                      = 4,
	PEB2STM_MAX                                        = 5
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetTangentMethod
/*enum Beam2SourceTargetTangentMethod
{
	PEB2STTM_Direct                                    = 0,
	PEB2STTM_UserSet                                   = 1,
	PEB2STTM_Distribution                              = 2,
	PEB2STTM_Emitter                                   = 3,
	PEB2STTM_MAX                                       = 4
};*/

// Enum Engine.ParticleModuleBeamModifier.BeamModifierType
/*enum BeamModifierType
{
	PEB2MT_Source                                      = 0,
	PEB2MT_Target                                      = 1,
	PEB2MT_MAX                                         = 2
};*/

// Enum Engine.ParticleModuleCameraOffset.EParticleCameraOffsetUpdateMethod
/*enum EParticleCameraOffsetUpdateMethod
{
	EPCOUM_DirectSet                                   = 0,
	EPCOUM_Additive                                    = 1,
	EPCOUM_Scalar                                      = 2,
	EPCOUM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleCollisionBase.EParticleCollisionComplete
/*enum EParticleCollisionComplete
{
	EPCC_Kill                                          = 0,
	EPCC_Freeze                                        = 1,
	EPCC_HaltCollisions                                = 2,
	EPCC_FreezeTranslation                             = 3,
	EPCC_FreezeRotation                                = 4,
	EPCC_FreezeMovement                                = 5,
	EPCC_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleLocationBoneSocket.ELocationBoneSocketSource
/*enum ELocationBoneSocketSource
{
	BONESOCKETSOURCE_Bones                             = 0,
	BONESOCKETSOURCE_Sockets                           = 1,
	BONESOCKETSOURCE_MAX                               = 2
};*/

// Enum Engine.ParticleModuleLocationBoneSocket.ELocationBoneSocketSelectionMethod
/*enum ELocationBoneSocketSelectionMethod
{
	BONESOCKETSEL_Sequential                           = 0,
	BONESOCKETSEL_Random                               = 1,
	BONESOCKETSEL_RandomExhaustive                     = 2,
	BONESOCKETSEL_MAX                                  = 3
};*/

// Enum Engine.ParticleModuleLocationEmitter.ELocationEmitterSelectionMethod
/*enum ELocationEmitterSelectionMethod
{
	ELESM_Random                                       = 0,
	ELESM_Sequential                                   = 1,
	ELESM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleLocationPrimitiveCylinder.CylinderHeightAxis
/*enum CylinderHeightAxis
{
	PMLPC_HEIGHTAXIS_X                                 = 0,
	PMLPC_HEIGHTAXIS_Y                                 = 1,
	PMLPC_HEIGHTAXIS_Z                                 = 2,
	PMLPC_HEIGHTAXIS_MAX                               = 3
};*/

// Enum Engine.ParticleModuleLocationSkelVertSurface.ELocationSkelVertSurfaceSource
/*enum ELocationSkelVertSurfaceSource
{
	VERTSURFACESOURCE_Vert                             = 0,
	VERTSURFACESOURCE_Surface                          = 1,
	VERTSURFACESOURCE_MAX                              = 2
};*/

// Enum Engine.ParticleModuleOrbit.EOrbitChainMode
/*enum EOrbitChainMode
{
	EOChainMode_Add                                    = 0,
	EOChainMode_Scale                                  = 1,
	EOChainMode_Link                                   = 2,
	EOChainMode_MAX                                    = 3
};*/

// Enum Engine.ParticleModuleOrientationAxisLock.EParticleAxisLock
/*enum EParticleAxisLock
{
	EPAL_NONE                                          = 0,
	EPAL_X                                             = 1,
	EPAL_Y                                             = 2,
	EPAL_Z                                             = 3,
	EPAL_NEGATIVE_X                                    = 4,
	EPAL_NEGATIVE_Y                                    = 5,
	EPAL_NEGATIVE_Z                                    = 6,
	EPAL_ROTATE_X                                      = 7,
	EPAL_ROTATE_Y                                      = 8,
	EPAL_ROTATE_Z                                      = 9,
	EPAL_MAX                                           = 10
};*/

// Enum Engine.ParticleModuleParameterDynamic.EEmitterDynamicParameterValue
/*enum EEmitterDynamicParameterValue
{
	EDPV_UserSet                                       = 0,
	EDPV_VelocityX                                     = 1,
	EDPV_VelocityY                                     = 2,
	EDPV_VelocityZ                                     = 3,
	EDPV_VelocityMag                                   = 4,
	EDPV_MAX                                           = 5
};*/

// Enum Engine.ParticleSpriteEmitter.EParticleScreenAlignment
/*enum EParticleScreenAlignment
{
	PSA_Square                                         = 0,
	PSA_Rectangle                                      = 1,
	PSA_Velocity                                       = 2,
	PSA_TypeSpecific                                   = 3,
	PSA_MAX                                            = 4
};*/

// Enum Engine.ParticleModuleRequired.EEmitterNormalsMode
/*enum EEmitterNormalsMode
{
	ENM_CameraFacing                                   = 0,
	ENM_Spherical                                      = 1,
	ENM_Cylindrical                                    = 2,
	ENM_MAX                                            = 3
};*/

// Enum Engine.ParticleModuleRequired.EParticleSortMode
/*enum EParticleSortMode
{
	PSORTMODE_None                                     = 0,
	PSORTMODE_ViewProjDepth                            = 1,
	PSORTMODE_DistanceToView                           = 2,
	PSORTMODE_Age_OldestFirst                          = 3,
	PSORTMODE_Age_NewestFirst                          = 4,
	PSORTMODE_MAX                                      = 5
};*/

// Enum Engine.ParticleModuleTrailSource.ETrail2SourceMethod
/*enum ETrail2SourceMethod
{
	PET2SRCM_Default                                   = 0,
	PET2SRCM_Particle                                  = 1,
	PET2SRCM_Actor                                     = 2,
	PET2SRCM_MAX                                       = 3
};*/

// Enum Engine.ParticleModuleTrailSpawn.ETrail2SpawnMethod
/*enum ETrail2SpawnMethod
{
	PET2SM_Emitter                                     = 0,
	PET2SM_Velocity                                    = 1,
	PET2SM_Distance                                    = 2,
	PET2SM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTrailTaper.ETrailTaperMethod
/*enum ETrailTaperMethod
{
	PETTM_None                                         = 0,
	PETTM_Full                                         = 1,
	PETTM_Partial                                      = 2,
	PETTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamMethod
/*enum EBeamMethod
{
	PEBM_Distance                                      = 0,
	PEBM_EndPoints                                     = 1,
	PEBM_EndPoints_Interpolated                        = 2,
	PEBM_UserSet_EndPoints                             = 3,
	PEBM_UserSet_EndPoints_Interpolated                = 4,
	PEBM_MAX                                           = 5
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamEndPointMethod
/*enum EBeamEndPointMethod
{
	PEBEPM_Calculated                                  = 0,
	PEBEPM_Distribution                                = 1,
	PEBEPM_Distribution_Constant                       = 2,
	PEBEPM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeam2Method
/*enum EBeam2Method
{
	PEB2M_Distance                                     = 0,
	PEB2M_Target                                       = 1,
	PEB2M_Branch                                       = 2,
	PEB2M_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeamTaperMethod
/*enum EBeamTaperMethod
{
	PEBTM_None                                         = 0,
	PEBTM_Full                                         = 1,
	PEBTM_Partial                                      = 2,
	PEBTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingOptions
/*enum EMeshCameraFacingOptions
{
	XAxisFacing_NoUp                                   = 0,
	XAxisFacing_ZUp                                    = 1,
	XAxisFacing_NegativeZUp                            = 2,
	XAxisFacing_YUp                                    = 3,
	XAxisFacing_NegativeYUp                            = 4,
	LockedAxis_ZAxisFacing                             = 5,
	LockedAxis_NegativeZAxisFacing                     = 6,
	LockedAxis_YAxisFacing                             = 7,
	LockedAxis_NegativeYAxisFacing                     = 8,
	VelocityAligned_ZAxisFacing                        = 9,
	VelocityAligned_NegativeZAxisFacing                = 10,
	VelocityAligned_YAxisFacing                        = 11,
	VelocityAligned_NegativeYAxisFacing                = 12,
	EMeshCameraFacingOptions_MAX                       = 13
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingUpAxis
/*enum EMeshCameraFacingUpAxis
{
	CameraFacing_NoneUP                                = 0,
	CameraFacing_ZUp                                   = 1,
	CameraFacing_NegativeZUp                           = 2,
	CameraFacing_YUp                                   = 3,
	CameraFacing_NegativeYUp                           = 4,
	CameraFacing_MAX                                   = 5
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshScreenAlignment
/*enum EMeshScreenAlignment
{
	PSMA_MeshFaceCameraWithRoll                        = 0,
	PSMA_MeshFaceCameraWithSpin                        = 1,
	PSMA_MeshFaceCameraWithLockedAxis                  = 2,
	PSMA_MAX                                           = 3
};*/

// Enum Engine.ParticleModuleTypeDataMeshPhysX.EPhysXMeshRotationMethod
/*enum EPhysXMeshRotationMethod
{
	PMRM_Disabled                                      = 0,
	PMRM_Spherical                                     = 1,
	PMRM_Box                                           = 2,
	PMRM_LongBox                                       = 3,
	PMRM_FlatBox                                       = 4,
	PMRM_Velocity                                      = 5,
	PMRM_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleTypeDataRibbon.ETrailsRenderAxisOption
/*enum ETrailsRenderAxisOption
{
	Trails_CameraUp                                    = 0,
	Trails_SourceUp                                    = 1,
	Trails_WorldUp                                     = 2,
	Trails_MAX                                         = 3
};*/

// Enum Engine.ParticleSystem.EParticleSystemOcclusionBoundsMethod
/*enum EParticleSystemOcclusionBoundsMethod
{
	EPSOBM_None                                        = 0,
	EPSOBM_ParticleBounds                              = 1,
	EPSOBM_CustomBounds                                = 2,
	EPSOBM_MAX                                         = 3
};*/

// Enum Engine.ParticleSystem.EParticleSystemUpdateMode
/*enum EParticleSystemUpdateMode
{
	EPSUM_RealTime                                     = 0,
	EPSUM_FixedTime                                    = 1,
	EPSUM_MAX                                          = 2
};*/

// Enum Engine.PersistentGameDataManager.EPersistentOperation
/*enum EPersistentOperation
{
	PO_Saving                                          = 0,
	PO_Restoring                                       = 1,
	PO_MAX                                             = 2
};*/

// Enum Engine.PhysicalMaterial.EPhysEffectType
/*enum EPhysEffectType
{
	EPMET_Impact                                       = 0,
	EPMET_Slide                                        = 1,
	EPMET_MAX                                          = 2
};*/

// Enum Engine.PhysXParticleSystem.ESimulationMethod
/*enum ESimulationMethod
{
	ESM_SPH                                            = 0,
	ESM_NO_PARTICLE_INTERACTION                        = 1,
	ESM_MIXED_MODE                                     = 2,
	ESM_MAX                                            = 3
};*/

// Enum Engine.PhysXParticleSystem.EPacketSizeMultiplier
/*enum EPacketSizeMultiplier
{
	EPSM                                               = 0,
	EPSM01                                             = 1,
	EPSM02                                             = 2,
	EPSM03                                             = 3,
	EPSM04                                             = 4,
	EPSM05                                             = 5,
	EPSM_MAX                                           = 6
};*/

// Enum Engine.SceneCaptureComponent.ESceneCaptureViewMode
/*enum ESceneCaptureViewMode
{
	SceneCapView_Lit                                   = 0,
	SceneCapView_Unlit                                 = 1,
	SceneCapView_LitNoShadows                          = 2,
	SceneCapView_Wire                                  = 3,
	SceneCapView_MAX                                   = 4
};*/

// Enum Engine.RB_BodySetup.ESleepFamily
/*enum ESleepFamily
{
	SF_Normal                                          = 0,
	SF_Sensitive                                       = 1,
	SF_MAX                                             = 2
};*/

// Enum Engine.RB_ConstraintInstance.EConstraintDriveChange
/*enum EConstraintDriveChange
{
	CONST_DRIVE_Unchanged                              = 0,
	CONST_DRIVE_Enabled                                = 1,
	CONST_DRIVE_Disabled                               = 2,
	CONST_DRIVE_MAX                                    = 3
};*/

// Enum Engine.RB_RadialForceActor.ERadialForceType
/*enum ERadialForceType
{
	RFT_Force                                          = 0,
	RFT_Impulse                                        = 1,
	RFT_MAX                                            = 2
};*/

// Enum Engine.ResourcePoolDefinition.ENetRelevantFor
/*enum ENetRelevantFor
{
	NETRELEVANT_Everyone                               = 0,
	NETRELEVANT_Owner                                  = 1,
	NETRELEVANT_Server                                 = 2,
	NETRELEVANT_MAX                                    = 3
};*/

// Enum Engine.Route.ERouteDirection
/*enum ERouteDirection
{
	ERD_Forward                                        = 0,
	ERD_Reverse                                        = 1,
	ERD_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteFillAction
/*enum ERouteFillAction
{
	RFA_Overwrite                                      = 0,
	RFA_Add                                            = 1,
	RFA_Remove                                         = 2,
	RFA_Clear                                          = 3,
	RFA_MAX                                            = 4
};*/

// Enum Engine.Route.ERouteType
/*enum ERouteType
{
	ERT_Linear                                         = 0,
	ERT_Loop                                           = 1,
	ERT_Circle                                         = 2,
	ERT_MAX                                            = 3
};*/

// Enum Engine.SeqAct_ActorFactory.EPointSelection
/*enum EPointSelection
{
	PS_Normal                                          = 0,
	PS_Random                                          = 1,
	PS_Reverse                                         = 2,
	PS_MAX                                             = 3
};*/

// Enum Engine.SeqAct_GetDistance.DistanceMethod
/*enum DistanceMethod
{
	DISTANCE_Average                                   = 0,
	DISTANCE_Furthest                                  = 1,
	DISTANCE_Nearest                                   = 2,
	DISTANCE_MAX                                       = 3
};*/

// Enum Engine.SeqAct_SetMesh.EMeshType
/*enum EMeshType
{
	MeshType_StaticMesh                                = 0,
	MeshType_SkeletalMesh                              = 1,
	MeshType_MAX                                       = 2
};*/

// Enum Engine.SeqEvent_ParticleEvent.EParticleEventOutputType
/*enum EParticleEventOutputType
{
	ePARTICLEOUT_Spawn                                 = 0,
	ePARTICLEOUT_Death                                 = 1,
	ePARTICLEOUT_Collision                             = 2,
	ePARTICLEOUT_Kismet                                = 3,
	ePARTICLEOUT_Trace                                 = 4,
	ePARTICLEOUT_MAX                                   = 5
};*/

// Enum Engine.SkelControlBase.EBoneControlSpace
/*enum EBoneControlSpace
{
	BCS_WorldSpace                                     = 0,
	BCS_ActorSpace                                     = 1,
	BCS_ComponentSpace                                 = 2,
	BCS_ParentBoneSpace                                = 3,
	BCS_BoneSpace                                      = 4,
	BCS_OtherBoneSpace                                 = 5,
	BCS_BaseMeshSpace                                  = 6,
	BCS_SocketSpace                                    = 7,
	BCS_MAX                                            = 8
};*/

// Enum Engine.SkelControlSpline.ESplineControlRotMode
/*enum ESplineControlRotMode
{
	SCR_NoChange                                       = 0,
	SCR_AlongSpline                                    = 1,
	SCR_Interpolate                                    = 2,
	SCR_MAX                                            = 3
};*/

// Enum Engine.SkeletalMesh.SoftBodyBoneType
/*enum SoftBodyBoneType
{
	SOFTBODYBONE_Fixed                                 = 0,
	SOFTBODYBONE_BreakableAttachment                   = 1,
	SOFTBODYBONE_TwoWayAttachment                      = 2,
	SOFTBODYBONE_MAX                                   = 3
};*/

// Enum Engine.SkeletalMesh.ClothBoneType
/*enum ClothBoneType
{
	CLOTHBONE_Fixed                                    = 0,
	CLOTHBONE_BreakableAttachment                      = 1,
	CLOTHBONE_TearLine                                 = 2,
	CLOTHBONE_MAX                                      = 3
};*/

// Enum Engine.SkeletalMesh.TriangleSortOption
/*enum TriangleSortOption
{
	TRISORT_None                                       = 0,
	TRISORT_CenterRadialDistance                       = 1,
	TRISORT_Random                                     = 2,
	TRISORT_MergeContiguous                            = 3,
	TRISORT_Custom                                     = 4,
	TRISORT_CustomLeftRight                            = 5,
	TRISORT_MAX                                        = 6
};*/

// Enum Engine.SkeletalMesh.BoneBreakOption
/*enum BoneBreakOption
{
	BONEBREAK_SoftPreferred                            = 0,
	BONEBREAK_AutoDetect                               = 1,
	BONEBREAK_RigidPreferred                           = 2,
	BONEBREAK_MAX                                      = 3
};*/

// Enum Engine.SkeletalMesh.TriangleSortAxis
/*enum TriangleSortAxis
{
	TSA_X_Axis                                         = 0,
	TSA_Y_Axis                                         = 1,
	TSA_Z_Axis                                         = 2,
	TSA_MAX                                            = 3
};*/

// Enum Engine.SkeletalMesh.ClothMovementScaleGen
/*enum ClothMovementScaleGen
{
	ECMDM_DistToFixedVert                              = 0,
	ECMDM_VertexBoneWeight                             = 1,
	ECMDM_Empty                                        = 2,
	ECMDM_MAX                                          = 3
};*/

// Enum Engine.SoundNodeWave.EDecompressionType
/*enum EDecompressionType
{
	DTYPE_Setup                                        = 0,
	DTYPE_Invalid                                      = 1,
	DTYPE_Preview                                      = 2,
	DTYPE_Native                                       = 3,
	DTYPE_RealTime                                     = 4,
	DTYPE_Procedural                                   = 5,
	DTYPE_Xenon                                        = 6,
	DTYPE_MAX                                          = 7
};*/

// Enum Engine.SVehicleWheel.EWheelSide
/*enum EWheelSide
{
	SIDE_None                                          = 0,
	SIDE_Left                                          = 1,
	SIDE_Right                                         = 2,
	SIDE_MAX                                           = 3
};*/

// Enum Engine.TargetableList.ETargetableListSearchType
/*enum ETargetableListSearchType
{
	TL_Enemy                                           = 0,
	TL_Friendly                                        = 1,
	TL_Neutral                                         = 2,
	TL_All                                             = 3,
	TL_MAX                                             = 4
};*/

// Enum Engine.TerrainMaterial.ETerrainMappingType
/*enum ETerrainMappingType
{
	TMT_Auto                                           = 0,
	TMT_XY                                             = 1,
	TMT_XZ                                             = 2,
	TMT_YZ                                             = 3,
	TMT_MAX                                            = 4
};*/

// Enum Engine.TextureFlipBook.TextureFlipBookMethod
/*enum TextureFlipBookMethod
{
	TFBM_UL_ROW                                        = 0,
	TFBM_UL_COL                                        = 1,
	TFBM_UR_ROW                                        = 2,
	TFBM_UR_COL                                        = 3,
	TFBM_LL_ROW                                        = 4,
	TFBM_LL_COL                                        = 5,
	TFBM_LR_ROW                                        = 6,
	TFBM_LR_COL                                        = 7,
	TFBM_RANDOM                                        = 8,
	TFBM_MAX                                           = 9
};*/

// Enum Engine.TextureMovie.EMovieStreamSource
/*enum EMovieStreamSource
{
	MovieStream_File                                   = 0,
	MovieStream_Memory                                 = 1,
	MovieStream_MAX                                    = 2
};*/

// Enum Engine.UberPostProcessEffect.ETonemapperType
/*enum ETonemapperType
{
	Tonemapper_Off                                     = 0,
	Tonemapper_Filmic                                  = 1,
	Tonemapper_Customizable                            = 2,
	Tonemapper_MAX                                     = 3
};*/

// Enum Engine.UIDataProvider_MenuItem.EMenuOptionType
/*enum EMenuOptionType
{
	MENUOT_ComboReadOnly                               = 0,
	MENUOT_ComboNumeric                                = 1,
	MENUOT_CheckBox                                    = 2,
	MENUOT_Slider                                      = 3,
	MENUOT_Spinner                                     = 4,
	MENUOT_EditBox                                     = 5,
	MENUOT_CollectionCheckBox                          = 6,
	MENUOT_CollapsingList                              = 7,
	MENUOT_MAX                                         = 8
};*/

// Enum Engine.UIDataStore_OnlineStats.EStatsFetchType
/*enum EStatsFetchType
{
	SFT_Player                                         = 0,
	SFT_CenteredOnPlayer                               = 1,
	SFT_Friends                                        = 2,
	SFT_TopRankings                                    = 3,
	SFT_MAX                                            = 4
};*/

// Enum Engine.WillowInventory.PlayerMark
/*enum PlayerMark
{
	PM_Trash                                           = 0,
	PM_Standard                                        = 1,
	PM_Favorite                                        = 2,
	PM_MAX                                             = 3
};*/

// Enum Engine.WillowInventoryDefinition.EStatCombinationMethod
/*enum EStatCombinationMethod
{
	SCM_Multiply                                       = 0,
	SCM_Divide                                         = 1,
	SCM_Add                                            = 2,
	SCM_Subtract                                       = 3,
	SCM_DontCombine                                    = 4,
	SCM_MAX                                            = 5
};*/

// Enum Engine.WillowInventoryDefinition.EAttributeSlotEffectMode
/*enum EAttributeSlotEffectMode
{
	ATTRSLOTEFFECTMODE_Default                         = 0,
	ATTRSLOTEFFECTMODE_Timed                           = 1,
	ATTRSLOTEFFECTMODE_Custom                          = 2,
	ATTRSLOTEFFECTMODE_MAX                             = 3
};*/

// Enum Engine.WillowInventoryDefinition.ECurrencyType
/*enum ECurrencyType
{
	CURRENCY_Credits                                   = 0,
	CURRENCY_Eridium                                   = 1,
	CURRENCY_SeraphCrystals                            = 2,
	CURRENCY_Reserved_A                                = 3,
	CURRENCY_Reserved_B                                = 4,
	CURRENCY_Reserved_C                                = 5,
	CURRENCY_Reserved_D                                = 6,
	CURRENCY_Reserved_E                                = 7,
	CURRENCY_Reserved_F                                = 8,
	CURRENCY_Reserved_G                                = 9,
	CURRENCY_Reserved_H                                = 10,
	CURRENCY_Reserved_I                                = 11,
	CURRENCY_Reserved_J                                = 12,
	CURRENCY_MAX                                       = 13
};*/

// Enum Engine.WillowInventoryDefinition.EPlayerDroppability
/*enum EPlayerDroppability
{
	EPD_Droppable                                      = 0,
	EPD_Sellable                                       = 1,
	EPD_CannotDropOrSell                               = 2,
	EPD_MAX                                            = 3
};*/

// Enum Engine.WillowInventory.SerialNumberState
/*enum SerialNumberState
{
	SNS_Empty                                          = 0,
	SNS_Writing                                        = 1,
	SNS_Full                                           = 2,
	SNS_Reading                                        = 3,
	SNS_Encrypted                                      = 4,
	SNS_MAX                                            = 5
};*/

// Enum Engine.WillowInventory.EncryptedSerial
/*enum EncryptedSerial
{
	ES_Encrypted                                       = 0,
	ES_MAX                                             = 1
};*/

// Enum Engine.Weapon.EWeaponFireType
/*enum EWeaponFireType
{
	EWFT_InstantHit                                    = 0,
	EWFT_Projectile                                    = 1,
	EWFT_Beam                                          = 2,
	EWFT_Custom                                        = 3,
	EWFT_None                                          = 4,
	EWFT_MAX                                           = 5
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class Engine.IWorldBody
// 0x0000 (0x003C - 0x003C)
class UIWorldBody : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 143 ];

		return pClassPointer;
	};

	bool WorldBodyAttachComponent ( class UActorComponent* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachActor ( class AActor* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachTo ( class UIWorldBody* OtherWorldBody, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	struct FName GetWorldBodyAttachmentBoneForComponent ( class UActorComponent* AttachedComponent );
	bool GetWorldBodyAttachmentLocationAndRotation ( struct FName AttachmentPointName, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentRotation ( struct FName AttachmentPointName, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentLocation ( struct FName AttachmentPointName, struct FVector* OutLocation );
	class UIWorldBody* GetWorldBodyAttachmentBase ( );
	struct FVector GetWorldBodyVelocity ( );
	struct FRotator GetWorldBodyRotation ( );
	struct FVector GetWorldBodyLocation ( );
};

UClass* UIWorldBody::pClassPointer = NULL;

// Class Engine.Actor
// 0x014C (0x0188 - 0x003C)
class AActor : public UObject
{
public:
	struct FPointer                                    VfTable_IIWorldBody;                              		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IISpawnActor;                             		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIDamageCauser;                           		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UActorComponent* >                   Components;                                       		// 0x0048 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UActorComponent* >                   AllComponents;                                    		// 0x0054 (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     Location;                                         		// 0x0060 (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FRotator                                    Rotation;                                         		// 0x006C (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	float                                              DrawScale;                                        		// 0x0078 (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FVector                                     DrawScale3D;                                      		// 0x007C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PrePivot;                                         		// 0x0088 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRenderCommandFence                         DetachFence;                                      		// 0x0094 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CustomTimeDilation;                               		// 0x0098 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Physics;                                          		// 0x009C (0x0001) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned char                                      RemoteRole;                                       		// 0x009D (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Role;                                             		// 0x009E (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CollisionType;                                    		// 0x009F (0x0001) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned char                                      ReplicatedCollisionType;                          		// 0x00A0 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x00A1 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      Owner;                                            		// 0x00A4 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class AActor*                                      Base;                                             		// 0x00A8 (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	TArray< struct FTimerData >                        Timers;                                           		// 0x00AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bUseOrthonormalizedLighting : 1;                  		// 0x00B8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bStatic : 1;                                      		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bHidden : 1;                                      		// 0x00B8 (0x0004) [0x0000000000000023] [0x00000004] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bNoDelete : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDeleteMe : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bTicked : 1;                                      		// 0x00B8 (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bTickIsDisabled : 1;                              		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bWorldGeometry : 1;                               		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                        		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bOrientOnSlope : 1;                               		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bPushedByEncroachers : 1;                         		// 0x00B8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                  		// 0x00B8 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bIsMoving : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bAlwaysEncroachCheck : 1;                         		// 0x00B8 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCanStepUpOn : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bNetTemporary : 1;                                		// 0x00B8 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bOnlyRelevantToOwner : 1;                         		// 0x00B8 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      bNetDirty : 1;                                    		// 0x00B8 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bAlwaysRelevant : 1;                              		// 0x00B8 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bReplicateInstigator : 1;                         		// 0x00B8 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bReplicateMovement : 1;                           		// 0x00B8 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bSkipRotationReplication : 1;                     		// 0x00B8 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bForceRotationReplication : 1;                    		// 0x00B8 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bSkipActorPropertyReplication : 1;                		// 0x00B8 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bUpdateSimulatedPosition : 1;                     		// 0x00B8 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bTearOff : 1;                                     		// 0x00B8 (0x0004) [0x0000000000000020] [0x08000000] ( CPF_Net )
	unsigned long                                      bOnlyDirtyReplication : 1;                        		// 0x00B8 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bSkipHiddenReplication : 1;                       		// 0x00B8 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bAllowFluidSurfaceInteraction : 1;                		// 0x00B8 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bDemoRecording : 1;                               		// 0x00B8 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bDemoOwner : 1;                                   		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForceDemoRelevant : 1;                           		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNetInitialRotation : 1;                          		// 0x00BC (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateRigidBodyLocation : 1;                  		// 0x00BC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bKillDuringLevelTransition : 1;                   		// 0x00BC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bExchangedRoles : 1;                              		// 0x00BC (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bConsiderAllStaticMeshComponentsForStreaming : 1; 		// 0x00BC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPostRenderIfNotVisible : 1;                      		// 0x00BC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNetUpdate : 1;                              		// 0x00BC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bPendingNetUpdate : 1;                            		// 0x00BC (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00BC (0x0004) [0x0000000000000023] [0x00000400] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreBaseRotation : 1;                          		// 0x00BC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkipAttachedMoves : 1;                           		// 0x00BC (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bHurtEntry : 1;                                   		// 0x00BC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bGameRelevant : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bMovable : 1;                                     		// 0x00BC (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bDestroyInPainVolume : 1;                         		// 0x00BC (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCanBeDamaged : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bShouldBaseAtStartup : 1;                         		// 0x00BC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bPendingDelete : 1;                               		// 0x00BC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bCanTeleport : 1;                                 		// 0x00BC (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAlwaysTick : 1;                                  		// 0x00BC (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bBlocksNavigation : 1;                            		// 0x00BC (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bCanTarget : 1;                                   		// 0x00BC (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bCanTargetCheat : 1;                              		// 0x00BC (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x00BC (0x0004) [0x0000000000002003] [0x02000000] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bCollideWhenPlacing : 1;                          		// 0x00BC (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bCollideActors : 1;                               		// 0x00BC (0x0004) [0x0000000000000022] [0x08000000] ( CPF_Const | CPF_Net )
	unsigned long                                      bCollideWorld : 1;                                		// 0x00BC (0x0004) [0x0000000000000020] [0x10000000] ( CPF_Net )
	unsigned long                                      bCollideComplex : 1;                              		// 0x00BC (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bBlockActors : 1;                                 		// 0x00BC (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	unsigned long                                      bProjTarget : 1;                                  		// 0x00BC (0x0004) [0x0000000000000020] [0x80000000] ( CPF_Net )
	unsigned long                                      bBlocksTeleport : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bProjectileMoveSingleBlocking : 1;                		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTraceListeners : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsBlockingMesh : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsWillowInteractiveObject : 1;                   		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIgnoreRadiusDamageCheck : 1;                     		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCollideAsEncroacher : 1;                         		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bPhysRigidBodyOutOfWorldCheck : 1;                		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bComponentOutsideWorld : 1;                       		// 0x00C0 (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceOctreeSNFilter : 1;                         		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bRigidBodyWasAwake : 1;                           		// 0x00C0 (0x0004) [0x0000000000002002] [0x00000800] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCallRigidBodyWakeEvents : 1;                     		// 0x00C0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bBounce : 1;                                      		// 0x00C0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bJustTeleported : 1;                              		// 0x00C0 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bNetInitial : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bNetOwner : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000022] [0x00010000] ( CPF_Const | CPF_Net )
	unsigned long                                      bHiddenEd : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bEditable : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      bHiddenEdLayer : 1;                               		// 0x00C0 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bHiddenEdTemporary : 1;                           		// 0x00C0 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bHiddenEdLevel : 1;                               		// 0x00C0 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bEdShouldSnap : 1;                                		// 0x00C0 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bTempEditor : 1;                                  		// 0x00C0 (0x0004) [0x0000000000002002] [0x00800000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPathColliding : 1;                               		// 0x00C0 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bPathTemp : 1;                                    		// 0x00C0 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bScriptInitialized : 1;                           		// 0x00C0 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bLockLocation : 1;                                		// 0x00C0 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bForceAllowKismetModification : 1;                		// 0x00C0 (0x0004) [0x0000000000000002] [0x10000000] ( CPF_Const )
	unsigned long                                      bTraceIgnoreRigidBodyForPawns : 1;                		// 0x00C0 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bAutoMovePlayerOnInterpActor : 1;                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bMoveActorDoZeroExtentTrace : 1;                  		// 0x00C0 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bDebugEffectIsRelevant : 1;                       		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoadIfPhysXLevel0 : 1;                           		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLoadIfPhysXLevel1 : 1;                           		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLoadIfPhysXLevel2 : 1;                           		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                NetTag;                                           		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NetUpdateTime;                                    		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetUpdateFrequency;                               		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              NetPriority;                                      		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              LastNetUpdateTime;                                		// 0x00D8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APawn*                                       Instigator;                                       		// 0x00DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWorldInfo*                                  WorldInfo;                                        		// 0x00E0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LifeSpan;                                         		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              CreationTime;                                     		// 0x00E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastRenderTime;                                   		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            Touching;                                         		// 0x00F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LatentFloat;                                      		// 0x00FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APhysicsVolume*                              PhysicsVolume;                                    		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Velocity;                                         		// 0x0104 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     Acceleration;                                     		// 0x0110 (0x000C) [0x0000000000000000]              
	struct FVector                                     AngularVelocity;                                  		// 0x011C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      BaseSkelComponent;                                		// 0x0128 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BaseBoneName;                                     		// 0x012C (0x0008) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	TArray< class AActor* >                            Attached;                                         		// 0x0134 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     RelativeLocation;                                 		// 0x0140 (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	struct FRotator                                    RelativeRotation;                                 		// 0x014C (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class UPrimitiveComponent*                         CollisionComponent;                               		// 0x0158 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                OverlapTag;                                       		// 0x015C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FRotator                                    RotationRate;                                     		// 0x0160 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USequenceEvent* >                    GeneratedEvents;                                  		// 0x016C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USeqAct_Latent* >                    LatentActions;                                    		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MostRecentDamageTaken;                            		// 0x0184 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 145 ];

		return pClassPointer;
	};

	bool IsWaterVolume ( );
	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	float GetInstigatorSelfDamageScale ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* Context );
	float GetStatusEffectChanceModifier ( class UObject* Context );
	float GetStatusEffectBaseDamage ( class UObject* Context );
	void WaitingForAttachmentBase ( );
	void Behavior_ChangeVisibility ( unsigned long bVisible );
	void Behavior_ToggleVisibility ( );
	void Behavior_ChangeCollisionSize ( float NewRadius, float NewHeight );
	void Behavior_ChangeCollision ( unsigned char NewCollisionType );
	struct FVector GetDamageVector ( );
	class UMeshComponent* GetRigidBodyMesh ( );
	void ClientConsoleCommand ( struct FString Command );
	void Behavior_ClientConsoleCommand ( struct FString Command );
	void Behavior_ConsoleCommand ( struct FString Command );
	void Behavior_StopSound ( class USoundCue* Sound, unsigned long bNoRepToOwner, float FadeOutTime );
	void Behavior_PlaySoundForListener ( class USoundCue* Sound, class AActor* Source, class APlayerController* Listener );
	void Behavior_PlaySound ( class USoundCue* Sound, unsigned long bReplicateSound );
	struct FAkPlayingInfo Behavior_PostAkEvent ( class UAkEvent* Event, unsigned long bReplicateEvent );
	void Behavior_Destroy ( );
	void ClearResourcePoolReference ( struct FResourcePoolReference* PoolReference );
	float GetResourcePoolCurrentValueOrDefault ( float DefaultValue, struct FResourcePoolReference* PoolReference );
	bool IsResourcePoolValid ( struct FResourcePoolReference* PoolReference );
	bool GetCanTargetCheat ( );
	bool GetCanTarget ( );
	void SetCanTargetCheat ( unsigned long bCanTargetIn );
	bool CanTarget ( );
	void SetCanTarget ( unsigned long bCanTargetIn );
	bool WorldBodyAttachComponent ( class UActorComponent* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachActor ( class AActor* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachTo ( class UIWorldBody* OtherWorldBody, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	class UIWorldBody* GetWorldBodyAttachmentBase ( );
	struct FName GetWorldBodyAttachmentBoneForComponent ( class UActorComponent* AttachedComponent );
	bool GetWorldBodyAttachmentLocationAndRotation ( struct FName AttachmentPointName, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentRotation ( struct FName AttachmentPointName, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentLocation ( struct FName AttachmentPointName, struct FVector* OutLocation );
	struct FVector GetWorldBodyVelocity ( );
	struct FRotator GetWorldBodyRotation ( );
	struct FVector GetWorldBodyLocation ( );
	class AActor* GetSpawnOwner ( );
	int GetActorMetrics ( unsigned char MetricsType );
	bool ShouldBeHiddenBySHOW_NavigationNodes ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	void eventReplicationEnded ( );
	void SetDebugBeaconState ( unsigned long bEnabled, struct FColor BeaconColor );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	bool eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	bool IsInPersistentLevel ( unsigned long bIncludeLevelStreamingPersistent );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventTraceTouch ( class AActor* Other, class UComponent* ComponentHit, struct FVector TouchLocation, struct FVector TouchNormal, struct FVector End, struct FVector Start, struct FVector Extent, int TraceFlags, float TouchTime );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionProcessed ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	struct FVector eventGetSpotOthersShouldLookAt ( );
	void GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp, class USkelControlBase* SkelCtrl );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void LastMatineeAnimFinished ( );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void eventModifyHealth ( unsigned long bHeal, float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	void eventDebugMessagePlayer ( struct FString msg );
	bool ImpactEffectIsRelevant ( class APawn* EffectInstigator, struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance, unsigned long bSkipLOSCheck, class AActor* HitActor );
	bool ActorEffectIsRelevant ( class APawn* EffectInstigator, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance, class AActor* HitActor );
	class UImpactDefinition* GetTraceImpact ( );
	class UImpactDefinition* GetUntouchImpact ( );
	class UImpactDefinition* GetTouchImpact ( );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void SwitchDisplayDebugPage ( struct FName ActiveDebugCategory, unsigned long Forward );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	struct FString ReplaceHTMLMarkup ( struct FString* S );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	void CheckForOwnedInstanceData ( );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	bool eventHealDamage ( float Amount, class AController* Healer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, unsigned long bIsShieldRestore );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void ActorTakeDamageInner ( float DamageAmount, class AController* EventInstigator, class UClass* DamageType, class UDamagePipeline* Pipeline, struct FVector* HitLocation );
	class UImpactDefinition* GetPipelineImpactDefinition ( class UDamagePipeline* Pipeline );
	class UDamageTypeDefinition* GetPipelineDamageType ( class UDamagePipeline* Pipeline );
	void ReleaseDamagePipeline ( class UDamagePipeline* Pipeline );
	class UDamagePipeline* GetDamagePipeline ( class UDamageTypeDefinition* InDamageTypeDef, class UImpactDefinition* InImpactDef, unsigned long inCanHitFriendly, class UObject* InHitObject );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, unsigned long bSkipTraceTest, TArray< class AActor* >* ActorsHurt );
	bool CanWorldGeometryBecomeDynamic ( );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	void VisibleDamageableActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, unsigned long bSkipTraceTest, class AActor* IgnoreActor, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, unsigned long bSkipTraceTest, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	struct FVector GetDestination ( class AController* C );
	bool CalculateMinSpeedTrajectory ( struct FVector End, struct FVector Start, float MaxTossSpeed, float MinTossSpeed, struct FVector CollisionSize, float TerminalVelocity, float GravityZ, unsigned long bOnlyTraceUp, struct FVector* out_Velocity );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( unsigned long bForceLOSCheck );
	void MakeNoiseAt ( struct FVector NoiseLocation, float Loudness, struct FName NoiseType );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void PostAkTriggerObject ( class UAkTrigger* Trigger );
	void SetAkSwitchObject ( class UAkSwitch* Switch );
	void SetRTPCObjectValue ( class UAkRtpc* InRtpc, float TargetValue );
	struct FAkPlayingInfo PostAkEvent ( class UAkEvent* InAkEvent, unsigned long bStopWhenOwnerDestroyed, unsigned long bNotifyEventComplete );
	void PlaySoundBase ( class UAkBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant, class UAkSwitch* InSwitch );
	void OnAkEventCompleted ( class UAkComponent* SourceComponent, class UAkEvent* SourceEvent, int EventInstanceId );
	struct FAkPlayingInfo PlayAkEvent ( class UAkEvent* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, unsigned long bNoRepToRelevant );
	void StopSound ( class USoundCue* InSoundCue, unsigned long bNoRepToOwner, float FadeOutTime );
	void PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* SpawnForMap ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail );
	bool IsBlockedBy ( class AActor* Other );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, unsigned long bTraceBulletListeners, class AActor* BulletListenerSource, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	bool eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines, float Lifetime );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, float Lifetime );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, float Lifetime );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines, float Lifetime );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, float Lifetime );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, float Lifetime );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, float Lifetime );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedEvent ( struct FName VarName );
	struct FVector GetAggregateBaseVelocity ( class AActor* TestBase );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void SearchForBaseBelow ( float HeightBelow, class AActor** NewBase, struct FVector* HitNormal );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetShadowParentOnAllAttachedComponents ( class UPrimitiveComponent* MyPrimComp, class ULightEnvironmentComponent* MyLightEnv );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation );
	bool Move ( struct FVector Delta );
	void SetCollisionAndCollisionType ( unsigned char NewCollisionType );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

UClass* AActor::pClassPointer = NULL;

// Class Engine.Info
// 0x0000 (0x0188 - 0x0188)
class AInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 147 ];

		return pClassPointer;
	};

};

UClass* AInfo::pClassPointer = NULL;

// Class Engine.ZoneInfo
// 0x0010 (0x0198 - 0x0188)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                            		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftKill;                                         		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      KillZDamageType;                                  		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftKillZ : 1;                                   		// 0x0194 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 149 ];

		return pClassPointer;
	};

};

UClass* AZoneInfo::pClassPointer = NULL;

// Class Engine.WorldInfo
// 0x04F8 (0x0690 - 0x0198)
class AWorldInfo : public AZoneInfo
{
public:
	struct FPostProcessSettings                        DefaultPostProcessSettings;                       		// 0x0198 (0x00E8) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           WorldPostProcessChain;                            		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPersistPostProcessToNextLevel : 1;               		// 0x0284 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bFogEnabled : 1;                                  		// 0x0284 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBumpOffsetEnabled : 1;                           		// 0x0284 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseGammaCorrection : 1;                          		// 0x0284 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                		// 0x0284 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMapHasMultipleDominantLightsAffectingOnePrimitive : 1;		// 0x0284 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bMapHasPathingErrors : 1;                         		// 0x0284 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                		// 0x0284 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0284 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPlayersOnly : 1;                                 		// 0x0284 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPlayersOnlyPending : 1;                          		// 0x0284 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bSuspendAI : 1;                                   		// 0x0284 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bStatusMenuOnly : 1;                              		// 0x0284 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bDropDetail : 1;                                  		// 0x0284 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bAggressiveLOD : 1;                               		// 0x0284 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bDontTickMind : 1;                                		// 0x0284 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bStartup : 1;                                     		// 0x0284 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bPathsRebuilt : 1;                                		// 0x0284 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHasPathNodes : 1;                                		// 0x0284 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bIsMenuLevel : 1;                                 		// 0x0284 (0x0004) [0x0000000000002002] [0x00080000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDebugPauseExecution : 1;                         		// 0x0284 (0x0004) [0x0000000000002002] [0x00100000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDebugStepExecution : 1;                          		// 0x0284 (0x0004) [0x0000000000002002] [0x00200000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseConsoleInput : 1;                             		// 0x0284 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                 		// 0x0284 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bNoPathWarnings : 1;                              		// 0x0284 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bHighPriorityLoading : 1;                         		// 0x0284 (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      bHighPriorityLoadingLocal : 1;                    		// 0x0284 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                		// 0x0284 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bPhysicsIgnoreDeltaTime : 1;                      		// 0x0284 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bEnableChanceOfPhysicsChunkOverride : 1;          		// 0x0284 (0x0004) [0x0000000000004001] [0x20000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitExplosionChunkSize : 1;                     		// 0x0284 (0x0004) [0x0000000000004001] [0x40000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitDamageChunkSize : 1;                        		// 0x0284 (0x0004) [0x0000000000004001] [0x80000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bPrecomputeVisibility : 1;                        		// 0x0288 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlaceCellsOnSurfaces : 1;                        		// 0x0288 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowTemporalAA : 1;                             		// 0x0288 (0x0004) [0x0000000000044001] [0x00000004] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseGlobalIllumination : 1;                       		// 0x0288 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceNoPrecomputedLighting : 1;                  		// 0x0288 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowHostMigration : 1;                          		// 0x0288 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bAssertOnGBXCheck : 1;                            		// 0x0288 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bSupportsTimeOfDay : 1;                           		// 0x0288 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	float                                              SquintModeKernelSize;                             		// 0x028C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ShadowmapStreamingFactorMultiplier;               		// 0x0290 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                 		// 0x0294 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	struct FReverbSettings                             DefaultReverbSettings;                            		// 0x0298 (0x001C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                       		// 0x02B4 (0x0024) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FogStart;                                         		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FogEnd;                                           		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FogColor;                                         		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BumpEnd;                                          		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AReverbVolume*                               HighestPriorityReverbVolume;                      		// 0x02E8 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	TArray< class AMassiveLODOverrideVolume* >         MassiveLODOverrideVolumes;                        		// 0x02EC (0x000C) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class AWorldSoundManager*                          WorldSoundManager;                                		// 0x02F8 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	TArray< class APortalVolume* >                     PortalVolumes;                                    		// 0x02FC (0x000C) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class AEnvironmentVolume* >                EnvironmentVolumes;                               		// 0x0308 (0x000C) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x0314 (0x000C) [0x0000000004420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct FDouble                                     LastTimeUnbuiltLightingWasEncountered;            		// 0x0320 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeDilation;                                     		// 0x0328 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DemoPlayTimeDilation;                             		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              TimeSeconds;                                      		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealTimeSeconds;                                  		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AudioTimeSeconds;                                 		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DeltaSeconds;                                     		// 0x033C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PauseDelay;                                       		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealTimeToUnPause;                                		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      Pauser;                                           		// 0x0348 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UTexture2D*                                  DefaultTexture;                                   		// 0x034C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  WireframeTexture;                                 		// 0x0350 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  WhiteSquareTexture;                               		// 0x0354 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  LargeVertex;                                      		// 0x0358 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  BSPVertex;                                        		// 0x035C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DeferredExecs;                                    		// 0x0360 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AGameReplicationInfo*                        GRI;                                              		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NetMode;                                          		// 0x0370 (0x0001) [0x0000000000000000]              
	unsigned char                                      NextTravelType;                                   		// 0x0371 (0x0001) [0x0000000000000000]              
	unsigned char                                      VisibilityAggressiveness;                         		// 0x0372 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LevelLightingQuality;                             		// 0x0373 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ComputerName;                                     		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EngineVersion;                                    		// 0x0380 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MinNetVersion;                                    		// 0x038C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AGameInfo*                                   Game;                                             		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              StallZ;                                           		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldGravityZ;                                    		// 0x03A0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DefaultGravityZ;                                  		// 0x03A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              GlobalGravityZ;                                   		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPhysicsGravityScaling;                          		// 0x03AC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class ANavigationPoint*                            NavigationPointList;                              		// 0x03B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AController*                                 ControllerList;                                   		// 0x03B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       PawnList;                                         		// 0x03B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACoverLink*                                  CoverList;                                        		// 0x03BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APylon*                                      PylonList;                                        		// 0x03C0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AGBXNavMesh*                                 NavMeshList;                                      		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveRepSize;                                      		// 0x03C8 (0x0004) [0x0000000000000000]              
	TArray< struct FNetViewer >                        ReplicationViewers;                               		// 0x03CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     NextURL;                                          		// 0x03D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              NextSwitchCountdown;                              		// 0x03E4 (0x0004) [0x0000000000000000]              
	int                                                PackedLightAndShadowMapTextureSize;               		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DefaultColorScale;                                		// 0x03EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DefaultGameType;                                  		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            GameTypesSupportedOnThisMap;                      		// 0x03FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           ClientDestroyedActorContent;                      		// 0x0408 (0x000C) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FName >                             PreparingLevelNames;                              		// 0x0414 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class ULevel*                                      CommittedPersistentLevel;                         		// 0x0420 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UObjectReferencer*                           PersistentMapForcedObjects;                       		// 0x0424 (0x0004) [0x0000000000000000]              
	struct FString                                     Title;                                            		// 0x0428 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Author;                                           		// 0x0434 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMapInfo*                                    MyMapInfo;                                        		// 0x0440 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     EmitterPoolClassPath;                             		// 0x0444 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AEmitterPool*                                MyEmitterPool;                                    		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DecalManagerClassPath;                            		// 0x0454 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class ADecalManager*                               MyDecalManager;                                   		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ParticleEventManagerClassPath;                    		// 0x0464 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AParticleEventManager*                       MyParticleEventManager;                           		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ParentLoader;                                     		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxPhysicsDeltaTime;                              		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPhysicsSubsteps;                               		// 0x0484 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FPhysXSceneProperties                       PhysicsProperties;                                		// 0x0488 (0x003C) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< struct FCompartmentRunList >               CompartmentRunFrames;                             		// 0x04C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DefaultSkinWidth;                                 		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ApexLODResourceBudget;                            		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FApexModuleDestructibleSettings             DestructibleSettings;                             		// 0x04D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                  		// 0x04E8 (0x0004) [0x0000000000000000]              
	struct FPhysXVerticalProperties                    VerticalProperties;                               		// 0x04EC (0x0018) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              ChanceOfPhysicsChunkOverride;                     		// 0x0504 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxExplosionChunkSize;                            		// 0x0508 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxDamageChunkSize;                               		// 0x050C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FractureExplosionVelScale;                        		// 0x0510 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MaxNumFacturedChunksToSpawnInAFrame;              		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumFacturedChunksSpawnedThisFrame;                		// 0x0518 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FracturedMeshWeaponDamage;                        		// 0x051C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VisibilityCellSize;                               		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterLitIndirectBrightness;                   		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterLitIndirectContrastFactor;               		// 0x0528 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterShadowedIndirectBrightness;              		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterShadowedIndirectContrastFactor;          		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterLightingContrastFactor;                  		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMap_Mirror                                 ScreenMessages;                                   		// 0x0538 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FScreenMessageString >              PriorityScreenMessages;                           		// 0x0574 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                		// 0x0580 (0x003C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x05BC (0x003C) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathConstraintCache
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x05F8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathGoalEvaluatorCache
	struct FHostMigrationState                         PeerHostMigration;                                		// 0x0634 (0x001C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              HostMigrationTimeout;                             		// 0x0650 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FNavigationArea >                   NavigationAreas;                                  		// 0x0654 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class AHoldingAreaDestination*                     HoldingCell;                                      		// 0x0660 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATeleporterDestination*                      PersonalTeleporterDestination;                    		// 0x0664 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PersonalReturnTeleporterLocation;                 		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CommonsLevelName;                                 		// 0x066C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TeleporterPlacedEventName;                        		// 0x0674 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CombatMusic;                                      		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GBXCheckDisplayDuration;                          		// 0x0680 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class UTextureMovie* >                     TextureMovies;                                    		// 0x0684 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 151 ];

		return pClassPointer;
	};

	class ULevel* GetStreamingPersistentMap ( );
	class AWorldInfo* GetStreamingPersistentWorldInfo ( );
	struct FName GetStreamingPersistentMapName ( );
	struct FColor GetAreaColor ( struct FName AreaName );
	void ClearObjectPools ( );
	void ToggleHostMigration ( unsigned long bEnabled );
	void eventNotifyHostMigrationStateChanged ( unsigned char NewState, unsigned char OldState );
	bool BeginHostMigration ( );
	bool eventCanBeginHostMigration ( );
	class AEnvironmentVolume* FindEnvironmentVolume ( struct FVector TestLocation );
	class AWorldInfo* GetWorldInfo ( );
	struct FWorldFractureSettings GetWorldFractureSettings ( );
	void DoMemoryTracking ( );
	bool GetDemoRewindPoints ( TArray< int >* OutRewindPoints );
	void GetDemoFrameInfo ( int* CurrentFrame, int* TotalFrames );
	bool IsPlayingDemo ( );
	bool IsRecordingDemo ( );
	unsigned char GetDetailMode ( );
	struct FString GetMapName ( unsigned long bIncludePrefix );
	void SetMapInfo ( class UMapInfo* NewMapInfo );
	class UMapInfo* GetMapInfo ( );
	void SetSeamlessTravelMidpointPause ( unsigned long bNowPaused );
	bool IsInSeamlessTravel ( );
	void SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid );
	void CommitMapChange ( );
	void CancelPendingMapChange ( );
	bool IsMapChangeReady ( );
	bool IsPreparingMapChange ( );
	void PrepareMapChange ( TArray< struct FName >* LevelNames );
	void NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents );
	void AllClientConnections ( class UPlayer** ClientConnection, int* ClientIP, int* ClientPort );
	void AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P );
	void AllControllers ( class UClass* BaseClass, class AController** C );
	void NavigationPointCheck ( struct FVector Point, struct FVector Extent, TArray< class ANavigationPoint* >* Navs, TArray< class UReachSpec* >* Specs );
	void RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N );
	void AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N );
	void NotifyNavMeshRemoved ( class AGBXNavMesh* NavMeshRemoved );
	void NotifyNavMeshAdded ( class AGBXNavMesh* NavMeshAdded );
	bool RemoveNavMeshFromList ( class AGBXNavMesh* NavMeshToRemove );
	bool AddNavMeshToList ( class AGBXNavMesh* NavMeshToAdd );
	void Reset ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P );
	void eventServerTravel ( struct FString URL, unsigned long bAbsolute, unsigned long bShouldSkipGameNotify );
	class UClass* GetGameClass ( );
	struct FString GetAddressURL ( );
	void VerifyNavList ( );
	void ForceGarbageCollection ( unsigned long bFullPurge );
	bool IsPlayInMobilePreview ( );
	bool IsPlayInPreview ( );
	bool IsPlayInEditor ( );
	bool IsConsoleBuild ( unsigned char ConsoleType );
	bool IsDemoBuild ( );
	struct FString GetLocalURL ( );
	void SetLevelRBGravity ( struct FVector NewGrav );
	TArray< class USequence* > GetAllRootSequences ( );
	class USequence* GetGameSequence ( );
	float GetGravityZ ( );
	bool IsMenuLevel ( struct FString MapName );
	void AddOnScreenDebugMessage ( int Key, float TimeToDisplay, struct FColor DisplayColor, struct FString DebugMessage );
	class UNavMeshPathGoalEvaluator* GetNavMeshPathGoalEvaluatorFromCache ( class UClass* GoalEvalClass, class UNavigationHandle* Requestor );
	class UNavMeshPathConstraint* GetNavMeshPathConstraintFromCache ( class UClass* ConstraintClass, class UNavigationHandle* Requestor );
	void ReleaseCachedConstraintsAndEvaluators ( );
};

UClass* AWorldInfo::pClassPointer = NULL;

// Class Engine.DownloadableContentEnumerator
// 0x005C (0x0098 - 0x003C)
class UDownloadableContentEnumerator : public UObject
{
public:
	TArray< struct FOnlineContent >                    DLCBundles;                                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedOnlineContent >               NamedDLCBundles;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedOnlineContent >               NamedDLCCompatibilityBundles;                     		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNeedsRefresh : 1;                                		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CurrentEnumerationState;                          		// 0x0064 (0x0001) [0x0000000000000000]              
	struct FString                                     DLCRootDir;                                       		// 0x0068 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   FindDLCDelegates;                                 		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCompatibilityOnlineContent >       OldCompatibilityBundles;                          		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFindDLCComplete__Delegate;                    		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 153 ];

		return pClassPointer;
	};

	void SetNeedsRefresh ( unsigned long InNeedsRefresh );
	bool IsBusy ( );
	void TriggerFindDLCDelegates ( );
	void InstallAllDLC ( );
	void DeleteDLC ( struct FString DLCName );
	void ClearFindDLCDelegate ( struct FScriptDelegate InDelegate );
	void AddFindDLCDelegate ( struct FScriptDelegate InDelegate );
	void OnFindDLCComplete ( );
	void FindDLC ( );
};

UClass* UDownloadableContentEnumerator::pClassPointer = NULL;

// Class Engine.DownloadableContentManager
// 0x011C (0x0158 - 0x003C)
class UDownloadableContentManager : public UObject
{
public:
	TArray< struct FPointer >                          DLCConfigCacheChanges;                            		// 0x003C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FMarketplaceOffer >                 DlcOffers;                                        		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FInstalledContentInfo >             InstalledContent;                                 		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRejectedContentInfo >              RejectedContent;                                  		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       CookInstanceGuid;                                 		// 0x006C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           NonPackageFilePathMapExtensions;                  		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FMap_Mirror                                 NonPackageFilePathMap;                            		// 0x0088 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 AudioPackageFilePathmap;                          		// 0x00C4 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UClass* >                            ClassesToReload;                                  		// 0x0100 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UObject* >                           ObjectsToReload;                                  		// 0x010C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bCanInstallCompatibilityContent : 1;              		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanEnumerateMarketplaceContent : 1;              		// 0x0118 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCouldInstallCompatibilityContent : 1;            		// 0x0118 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCouldEnumerateMarketplaceContent : 1;            		// 0x0118 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRefreshRequestWhileBusy : 1;                     		// 0x0118 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDlcEnumOutstanding : 1;                          		// 0x0118 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDlcOfferEnumOutstanding : 1;                     		// 0x0118 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDlcOfferEnumInstallPending : 1;                  		// 0x0118 (0x0004) [0x0000000000000000] [0x00000080] 
	TArray< int >                                      LicensedSeasonPassIds;                            		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FDouble                                     LastRefreshStartTime;                             		// 0x0128 (0x0008) [0x0000000000000000]              
	struct FDouble                                     LastRefreshFinishTime;                            		// 0x0130 (0x0008) [0x0000000000000000]              
	int                                                RefreshCount;                                     		// 0x0138 (0x0004) [0x0000000000000000]              
	class UGameEngine*                                 GameEngine;                                       		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FScriptDelegate >                   RefreshCompleteDelegates;                         		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRefreshComplete__Delegate;                    		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 155 ];

		return pClassPointer;
	};

	bool IsSeasonPassLicensed ( int SeasonPassId );
	struct FMarketplaceOfferDownloadState GetMarketplaceOfferInstalledState ( struct FMarketplaceOffer* InOffer );
	struct FMarketplaceOfferDownloadState GetMarketplaceContentInstalledState ( struct FMarketplaceContent* InContent );
	void StaticSetUsesAsynchronousInstallation ( unsigned long bUsesAsyncInstallation );
	bool StaticUsesAsynchronousInstallation ( );
	bool NeedsRefresh ( unsigned long InCanInstallCompatibilityContent, unsigned long InCanEnumerateMarketplaceContent );
	bool IsInStartMenu ( );
	bool IsBusy ( );
	bool CouldEnumerateMarketplaceContent ( );
	bool CanEnumerateMarketplaceContent ( );
	bool CouldInstallCompatibilityContent ( );
	bool CanInstallCompatibilityContent ( );
	void TriggerRefreshCompleteDelegates ( );
	void ClearRefreshCompleteDelegate ( struct FScriptDelegate InDelegate );
	void AddRefreshCompleteDelegate ( struct FScriptDelegate InDelegate );
	void OnRefreshComplete ( );
	void AddPackagesToFullyLoad ( struct FString Filename );
	void TriggerRefreshComplete ( );
	struct FDouble GetAppSeconds ( );
	void RefreshOffersComplete ( );
	void RefreshDLCComplete ( );
	bool eventRefreshDLC ( unsigned long InCanInstallCompatibilityContent, unsigned long InCanEnumerateMarketplaceContent );
	bool HasBeenRefreshed ( );
	void TryContentChangeEventRefresh ( struct FString Reason );
	void OnContentChange ( );
	void OnStorageDeviceChange ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void NativeInit ( );
	void eventInit ( );
	bool HasEnumeratedMarketplaceContent ( );
	bool HasUnseenUninstallableEngineVersionContent ( unsigned long bMarkSeen );
	bool HasUnseenInstalledContent ( unsigned long bMarkSeen );
	bool HasUnseenUninstallableLicensedContent ( unsigned long bMarkSeen );
	bool HasUninstallableCompatibilityContent ( );
	bool HasUnseenUninstallableCompatibilityContent ( unsigned long bMarkSeen );
	void GetCorruptContentNames ( TArray< struct FString >* ContentNames );
	bool HasUnseenCorruptContent ( unsigned long bMarkSeen );
	void InstallNonPackageFiles ( struct FOnlineContent* DLCBundle );
	void InstallPackages ( struct FOnlineContent* DLCBundle );
	void UpdateObjectLists ( );
	void MarkPerObjectConfigPendingKill ( struct FString Section );
	void AddSectionToObjectList ( struct FString Section );
	bool GetDLCAudioPackageBasePath ( struct FName AudioPackageFile, struct FString* Path );
	bool GetDLCNonPackageFilePath ( struct FName NonPackageFileName, struct FString* Path );
	void ClearDLC ( );
	void InstallDLCs ( TArray< struct FOnlineContent >* DLCBundles, TArray< struct FNamedOnlineContent >* NamedDLCCompatibilityBundles, TArray< struct FNamedOnlineContent >* NamedDLCBundles, TArray< struct FCompatibilityOnlineContent >* OldCompatibilityBundles );
	unsigned char InstallCompatibilityDLC ( struct FNamedOnlineContent* NamedDLCBundle );
	unsigned char InstallNamedDLC ( struct FNamedOnlineContent* NamedDLCBundle );
	unsigned char InstallDLC ( struct FOnlineContent* DLCBundle );
};

UClass* UDownloadableContentManager::pClassPointer = NULL;

// Class Engine.DownloadableContentOfferEnumerator
// 0x002C (0x0068 - 0x003C)
class UDownloadableContentOfferEnumerator : public UObject
{
public:
	unsigned long                                      bHasBeenEnumerated : 1;                           		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CurrentEnumerationState;                          		// 0x0040 (0x0001) [0x0000000000000000]              
	TArray< struct FMarketplaceOffer >                 MarketplaceOffers;                                		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   FindDlcOfferDelegates;                            		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFindDlcOfferComplete__Delegate;               		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 157 ];

		return pClassPointer;
	};

	bool IsBusy ( );
	void TriggerFindDlcOfferDelegates ( );
	void ClearFindDlcOfferDelegate ( struct FScriptDelegate InDelegate );
	void AddFindDlcOfferDelegate ( struct FScriptDelegate InDelegate );
	void OnFindDlcOfferComplete ( );
	void FindContentOffers ( );
};

UClass* UDownloadableContentOfferEnumerator::pClassPointer = NULL;

// Class Engine.Engine
// 0x0600 (0x0640 - 0x0040)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                         		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     TinyFontName;                                     		// 0x0044 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       SmallFont;                                        		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FString                                     SmallFontName;                                    		// 0x0054 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       MediumFont;                                       		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FString                                     MediumFontName;                                   		// 0x0064 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       LargeFont;                                        		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     LargeFontName;                                    		// 0x0074 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       NonShipMediumFont;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	class UFont*                                       NonShipLargeFont;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	class UFont*                                       SubtitleFont;                                     		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FString                                     SubtitleFontName;                                 		// 0x008C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       GlyphFont;                                        		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FString                                     GlyphFontName;                                    		// 0x009C (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< class UFont* >                             AdditionalFonts;                                  		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           AdditionalFontNames;                              		// 0x00B4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      ConsoleClass;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FString                                     ConsoleClassName;                                 		// 0x00C4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      GameViewportClientClass;                          		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FString                                     GameViewportClientClassName;                      		// 0x00D4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      DataStoreClientClass;                             		// 0x00E0 (0x0004) [0x0000000000000000]              
	struct FString                                     DataStoreClientClassName;                         		// 0x00E4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      LocalPlayerClass;                                 		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FString                                     LocalPlayerClassName;                             		// 0x00F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultMaterial;                                  		// 0x0100 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultMaterialName;                              		// 0x0104 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultDecalMaterial;                             		// 0x0110 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultDecalMaterialName;                         		// 0x0114 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture*                                    DefaultTexture;                                   		// 0x0120 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultTextureName;                               		// 0x0124 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   WireframeMaterial;                                		// 0x0130 (0x0004) [0x0000000000000000]              
	struct FString                                     WireframeMaterialName;                            		// 0x0134 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   EmissiveTexturedMaterial;                         		// 0x0140 (0x0004) [0x0000000000000000]              
	struct FString                                     EmissiveTexturedMaterialName;                     		// 0x0144 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   GeomMaterial;                                     		// 0x0150 (0x0004) [0x0000000000000000]              
	struct FString                                     GeomMaterialName;                                 		// 0x0154 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultFogVolumeMaterial;                         		// 0x0160 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultFogVolumeMaterialName;                     		// 0x0164 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TickMaterial;                                     		// 0x0170 (0x0004) [0x0000000000000000]              
	struct FString                                     TickMaterialName;                                 		// 0x0174 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   CrossMaterial;                                    		// 0x0180 (0x0004) [0x0000000000000000]              
	struct FString                                     CrossMaterialName;                                		// 0x0184 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LevelColorationLitMaterial;                       		// 0x0190 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColorationLitMaterialName;                   		// 0x0194 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LevelColorationUnlitMaterial;                     		// 0x01A0 (0x0004) [0x0000000000000000]              
	struct FString                                     LevelColorationUnlitMaterialName;                 		// 0x01A4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LightingTexelDensityMaterial;                     		// 0x01B0 (0x0004) [0x0000000000000000]              
	struct FString                                     LightingTexelDensityName;                         		// 0x01B4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                 		// 0x01C0 (0x0004) [0x0000000000000000]              
	struct FString                                     ShadedLevelColorationLitMaterialName;             		// 0x01C4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;               		// 0x01D0 (0x0004) [0x0000000000000000]              
	struct FString                                     ShadedLevelColorationUnlitMaterialName;           		// 0x01D4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   RemoveSurfaceMaterial;                            		// 0x01E0 (0x0004) [0x0000000000000000]              
	struct FString                                     RemoveSurfaceMaterialName;                        		// 0x01E4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorMaterial;                              		// 0x01F0 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorMaterialName;                          		// 0x01F4 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;            		// 0x0200 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;        		// 0x0204 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;         		// 0x0210 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;     		// 0x0214 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;              		// 0x0220 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;          		// 0x0224 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;            		// 0x0230 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;        		// 0x0234 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;             		// 0x0240 (0x0004) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;         		// 0x0244 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   HeatmapMaterial;                                  		// 0x0250 (0x0004) [0x0000000000000000]              
	struct FString                                     HeatmapMaterialName;                              		// 0x0254 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   BoneWeightMaterial;                               		// 0x0260 (0x0004) [0x0000000000000000]              
	struct FString                                     BoneWeightMaterialName;                           		// 0x0264 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TangentColorMaterial;                             		// 0x0270 (0x0004) [0x0000000000000000]              
	struct FString                                     TangentColorMaterialName;                         		// 0x0274 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFacebookIntegration*                        FacebookIntegration;                              		// 0x0280 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     FacebookIntegrationClassName;                     		// 0x0284 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bCombineSimilarMappings : 1;                      		// 0x0290 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderLightMapDensityGrayscale : 1;              		// 0x0290 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseSound : 1;                                    		// 0x0290 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUseAudioStreaming : 1;                           		// 0x0290 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                 		// 0x0290 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesEnabled : 1;                            		// 0x0290 (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesForcedOff : 1;                          		// 0x0290 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSmoothFrameRate : 1;                             		// 0x0290 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bSmoothFrameRateRuntimeToggle : 1;                		// 0x0290 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;        		// 0x0290 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bShouldGenerateSimpleLightmaps : 1;               		// 0x0290 (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bForceStaticTerrain : 1;                          		// 0x0290 (0x0004) [0x0000000000004001] [0x00000800] ( CPF_Edit | CPF_Config )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x0290 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      bUsePostProcessEffects : 1;                       		// 0x0290 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bOnScreenKismetWarnings : 1;                      		// 0x0290 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bEnableKismetLogging : 1;                         		// 0x0290 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bAllowMatureLanguage : 1;                         		// 0x0290 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      bRenderTerrainCollisionAsOverlay : 1;             		// 0x0290 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bPauseOnLossOfFocus : 1;                          		// 0x0290 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bCheckParticleRenderSize : 1;                     		// 0x0290 (0x0004) [0x0000000000044000] [0x00080000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableColorClear : 1;                            		// 0x0290 (0x0004) [0x0000000000044002] [0x00100000] ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAreConstraintsDirty : 1;                         		// 0x0290 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bHasPendingGlobalReattach : 1;                    		// 0x0290 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bEnableOnScreenDebugMessages : 1;                 		// 0x0290 (0x0004) [0x0000000000044000] [0x00800000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableOnScreenDebugMessagesDisplay : 1;          		// 0x0290 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bSuppressMapWarnings : 1;                         		// 0x0290 (0x0004) [0x0000000000044000] [0x02000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCookSeparateSharedMPGameContent : 1;             		// 0x0290 (0x0004) [0x0000000000044000] [0x04000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisableAILogging : 1;                            		// 0x0290 (0x0004) [0x0000000000044000] [0x08000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseNormalMapsForSimpleLightMaps : 1;             		// 0x0290 (0x0004) [0x0000000000044000] [0x10000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bStartWithMatineeCapture : 1;                     		// 0x0290 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bCompressMatineeCapture : 1;                      		// 0x0290 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bMuteAudioWhenNotInFocus : 1;                     		// 0x0290 (0x0004) [0x0000000000004000] [0x80000000] ( CPF_Config )
	unsigned long                                      bIsPauseGFxMovieOpen : 1;                         		// 0x0294 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNoBuildLightingMessage : 1;                      		// 0x0294 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bCinematicAutoSkip : 1;                           		// 0x0294 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxRMSDForCombiningMappings;                      		// 0x0298 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightingOnlyBrightness;                           		// 0x029C (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FColor >                            LightComplexityColors;                            		// 0x02AC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      ShaderComplexityColors;                           		// 0x02B8 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              MaxPixelShaderAdditiveComplexityCount;            		// 0x02C4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTextureDensity;                                		// 0x02C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealTextureDensity;                              		// 0x02CC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTextureDensity;                                		// 0x02D0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinLightMapDensity;                               		// 0x02D4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealLightMapDensity;                             		// 0x02D8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxLightMapDensity;                               		// 0x02DC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              RenderLightMapDensityGrayscaleScale;              		// 0x02E0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              RenderLightMapDensityColorScale;                  		// 0x02E4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightMapDensityVertexMappedColor;                 		// 0x02E8 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightMapDensitySelectedColor;                     		// 0x02F8 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinVertexDensity;                                 		// 0x0308 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealVertexDensity;                               		// 0x030C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxVertexDensity;                                 		// 0x0310 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FStatColorMapping >                 StatColorMappings;                                		// 0x0314 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   EditorBrushMaterial;                              		// 0x0320 (0x0004) [0x0000000000000000]              
	struct FString                                     EditorBrushMaterialName;                          		// 0x0324 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x0330 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPhysMaterialName;                          		// 0x0334 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UApexDestructibleDamageParameters*           ApexDamageParams;                                 		// 0x0340 (0x0004) [0x0000000000000000]              
	struct FString                                     ApexDamageParamsName;                             		// 0x0344 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TerrainErrorMaterial;                             		// 0x0350 (0x0004) [0x0000000000000000]              
	struct FString                                     TerrainErrorMaterialName;                         		// 0x0354 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                TerrainMaterialMaxTextureCount;                   		// 0x0360 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UClass*                                      OnlineSubsystemClass;                             		// 0x0364 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultOnlineSubsystemName;                       		// 0x0368 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UPostProcessChain*                           DefaultPostProcess;                               		// 0x0374 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPostProcessName;                           		// 0x0378 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                 		// 0x0384 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;             		// 0x0388 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;               		// 0x0394 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailParticleSystemPostProcessName;           		// 0x0398 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                     		// 0x03A4 (0x0004) [0x0000000000000000]              
	struct FString                                     ThumbnailMaterialPostProcessName;                 		// 0x03A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           DefaultUIScenePostProcess;                        		// 0x03B4 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultUIScenePostProcessName;                    		// 0x03B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultUICaretMaterial;                           		// 0x03C4 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultUICaretMaterialName;                       		// 0x03C8 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                 		// 0x03D4 (0x0004) [0x0000000000000000]              
	struct FString                                     SceneCaptureReflectActorMaterialName;             		// 0x03D8 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                    		// 0x03E4 (0x0004) [0x0000000000000000]              
	struct FString                                     SceneCaptureCubeActorMaterialName;                		// 0x03E8 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  ScreenDoorNoiseTexture;                           		// 0x03F4 (0x0004) [0x0000000000000000]              
	struct FString                                     ScreenDoorNoiseTextureName;                       		// 0x03F8 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  ImageGrainNoiseTexture;                           		// 0x0404 (0x0004) [0x0000000000000000]              
	struct FString                                     ImageGrainNoiseTextureName;                       		// 0x0408 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomAngleTexture;                               		// 0x0414 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomAngleTextureName;                           		// 0x0418 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomNormalTexture;                              		// 0x0424 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomNormalTextureName;                          		// 0x0428 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomMirrorDiscTexture;                          		// 0x0434 (0x0004) [0x0000000000000000]              
	struct FString                                     RandomMirrorDiscTextureName;                      		// 0x0438 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture*                                    WeightMapPlaceholderTexture;                      		// 0x0444 (0x0004) [0x0000000000000000]              
	struct FString                                     WeightMapPlaceholderTextureName;                  		// 0x0448 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  LightMapDensityTexture;                           		// 0x0454 (0x0004) [0x0000000000000000]              
	struct FString                                     LightMapDensityTextureName;                       		// 0x0458 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  LightMapDensityNormal;                            		// 0x0464 (0x0004) [0x0000000000000000]              
	struct FString                                     LightMapDensityNormalName;                        		// 0x0468 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class USoundNodeWave*                              DefaultSound;                                     		// 0x0474 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultSoundName;                                 		// 0x0478 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              TimeBetweenPurgingPendingKillObjects;             		// 0x0484 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UClient*                                     Client;                                           		// 0x0488 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class ULocalPlayer* >                      GamePlayers;                                      		// 0x048C (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UGameViewportClient*                         GameViewport;                                     		// 0x0498 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FString >                           DeferredCommands;                                 		// 0x049C (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                TickCycles;                                       		// 0x04A8 (0x0004) [0x0000000000000000]              
	int                                                GameCycles;                                       		// 0x04AC (0x0004) [0x0000000000000000]              
	int                                                ClientCycles;                                     		// 0x04B0 (0x0004) [0x0000000000000000]              
	float                                              MaxSmoothedFrameRate;                             		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinSmoothedFrameRate;                             		// 0x04B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;               		// 0x04BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FPointer                                    RemoteControlExec;                                		// 0x04C0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    MobileMaterialEmulator;                           		// 0x04C4 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FColor                                      C_WorldBox;                                       		// 0x04C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushWire;                                      		// 0x04CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_AddWire;                                        		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SubtractWire;                                   		// 0x04D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SemiSolidWire;                                  		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_NonSolidWire;                                   		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_WireBackground;                                 		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_ScaleBoxHi;                                     		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_VolumeCollision;                                		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BSPCollision;                                   		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_OrthoBackground;                                		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_Volume;                                         		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushShape;                                     		// 0x04F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceFactor;                          		// 0x04FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ScoutClassName;                                   		// 0x0500 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      TransitionType;                                   		// 0x050C (0x0001) [0x0000000000000000]              
	struct FString                                     TransitionDescription;                            		// 0x0510 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TransitionGameType;                               		// 0x051C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MeshLODRange;                                     		// 0x0528 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraRotationThreshold;                          		// 0x052C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraTranslationThreshold;                       		// 0x0530 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PrimitiveProbablyVisibleTime;                     		// 0x0534 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentUnoccludedRequeries;                       		// 0x0538 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxOcclusionPixelsFraction;                       		// 0x053C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PhysXLevel;                                       		// 0x0540 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MaxFluidNumVerts;                                 		// 0x0544 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSimulationTimeLimit;                         		// 0x0548 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResize;                                		// 0x054C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResizeWarn;                            		// 0x0550 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleVertexMemory;                          		// 0x0554 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleSpriteCount;                           		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxParticleSubUVCount;                            		// 0x055C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BeginUPTryCount;                                  		// 0x0560 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FDropNoteInfo >                     PendingDroppedNotes;                              		// 0x0564 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DynamicCoverMeshComponentName;                    		// 0x0570 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              NetClientTicksPerSecond;                          		// 0x057C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTrackedOcclusionIncrement;                     		// 0x0580 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TrackedOcclusionStepSize;                         		// 0x0584 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                DefaultSelectedMaterialColor;                     		// 0x0588 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                DefaultHoveredMaterialColor;                      		// 0x0598 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                SelectedMaterialColor;                            		// 0x05A8 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                UnselectedMaterialColor;                          		// 0x05B8 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumberOfOnScreenDebugMessages;                    		// 0x05C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FName >                             IgnoreSimulatedFuncWarnings;                      		// 0x05CC (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                ScreenSaverInhibitorSemaphore;                    		// 0x05D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    ScreenSaverInhibitor;                             		// 0x05DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitchWatcherThreadSemaphore;                      		// 0x05E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTranslationContext*                         GlobalTranslationContext;                         		// 0x05E4 (0x0004) [0x0000000000000000]              
	struct FDouble                                     LoadingMovieStartTime;                            		// 0x05E8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     MatineeCaptureName;                               		// 0x05F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     MatineePackageCaptureName;                        		// 0x05FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     VisibleLevelsForMatineeCapture;                   		// 0x0608 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MatineeCaptureFPS;                                		// 0x0614 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatineeCaptureType;                               		// 0x0618 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      BlockingMeshColor;                                		// 0x061C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              BlockingMeshOpacity;                              		// 0x0620 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              CinematicAutoSkipDelay;                           		// 0x0624 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FString >                           CinematicAutoSkipMaps;                            		// 0x0628 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              SFXVolume;                                        		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VoiceOverVolume;                                  		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BinkMovieVolumeScaleFactor;                       		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 159 ];

		return pClassPointer;
	};

	int GetPhysXLevel ( );
	class UFacebookIntegration* GetFacebookIntegration ( );
	bool BasicLoadObject ( class UObject* Obj, struct FString PathName, unsigned long bIsSaveGame, int Version );
	bool BasicSaveObject ( class UObject* Obj, struct FString PathName, unsigned long bIsSaveGame, int Version );
	void AddTextureStreamingSlaveLoc ( struct FVector InLoc, float BoostFactor, unsigned long bOverrideLocation, float OverrideDuration );
	bool BrowseToURL ( struct FString BrowseURL, struct FString* Error );
	class UPostProcessChain* GetWorldPostProcessChain ( );
	class UEngine* GetEngine ( );
	void AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth );
	void AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered );
	void RemoveAllOverlays ( );
	void StopMovie ( unsigned long bDelayStopUntilGameHasRendered );
	bool PlayLoadMapMovie ( );
	struct FString GetLastMovieName ( );
	class UAkAudioDevice* GetAkAudioDevice ( );
	class UAudioDevice* GetAudioDevice ( );
	bool IsStereoscopic3D ( );
	bool IsSplitScreen ( );
	class UFont* GetAdditionalFont ( int AdditionalFontIndex );
	class UFont* GetSubtitleFont ( );
	class UFont* GetLargeFont ( );
	class UFont* GetMediumFont ( );
	class UFont* GetSmallFont ( );
	class UFont* GetTinyFont ( );
	struct FString GetBuildDate ( );
	class AWorldInfo* GetCurrentWorldInfo ( );
	bool IsGame ( );
	bool IsEditor ( );
};

UClass* UEngine::pClassPointer = NULL;

// Class Engine.GameEngine
// 0x016C (0x07AC - 0x0640)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                    		// 0x0640 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCleanupForPendingLevel : 1;                      		// 0x0644 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWorldWasLoadedThisTick : 1;                      		// 0x0644 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCheckForMovieCapture : 1;                        		// 0x0644 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTriggerPostLoadMap : 1;                          		// 0x0644 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bStartedLoadMapMovie : 1;                         		// 0x0644 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldCommitPendingMapChange : 1;                		// 0x0644 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;           		// 0x0644 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	struct FString                                     PendingLevelPlayerControllerClassName;            		// 0x0648 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FURL                                        LastURL;                                          		// 0x0654 (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FURL                                        LastRemoteURL;                                    		// 0x0698 (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ServerActors;                                     		// 0x06DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TravelURL;                                        		// 0x06E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      TravelType;                                       		// 0x06F4 (0x0001) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x06F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDownloadableContentEnumerator*              DLCEnumerator;                                    		// 0x06FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     DownloadableContentEnumeratorClassName;           		// 0x0700 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DevDownloadableContentEnumeratorClassName;        		// 0x070C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UDownloadableContentManager*                 DLCManager;                                       		// 0x0718 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     DownloadableContentOfferEnumeratorClassName;      		// 0x071C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UDownloadableContentOfferEnumerator*         DLCOfferEnumerator;                               		// 0x0728 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     DownloadableContentManagerClassName;              		// 0x072C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UInGameAdManager*                            AdManager;                                        		// 0x0738 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     InGameAdManagerClassName;                         		// 0x073C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             LevelsToLoadForPendingMapChange;                  		// 0x0748 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class ULevel* >                            LoadedLevelsForPendingMapChange;                  		// 0x0754 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     PendingMapChangeFailureDescription;               		// 0x0760 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              MaxDeltaTime;                                     		// 0x076C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FLevelStreamingStatus >             PendingLevelStreamingStatusUpdates;               		// 0x0770 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObjectReferencer* >                 ObjectReferencers;                                		// 0x077C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FFullyLoadedPackagesInfo >          PackagesToFullyLoad;                              		// 0x0788 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedNetDriver >                   NamedNetDrivers;                                  		// 0x0794 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAnimTag >                          AnimTags;                                         		// 0x07A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 161 ];

		return pClassPointer;
	};

	class UInGameAdManager* GetAdManager ( );
	class UDownloadableContentOfferEnumerator* GetDLCOfferEnumerator ( );
	class UDownloadableContentManager* GetDLCManager ( );
	class UDownloadableContentEnumerator* GetDLCEnumerator ( );
	class UOnlineSubsystem* GetOnlineSubsystem ( );
	void DestroyNamedNetDriver ( struct FName NetDriverName );
	bool CreateNamedNetDriver ( struct FName NetDriverName );
};

UClass* UGameEngine::pClassPointer = NULL;

// Class Engine.InGameAdManager
// 0x0034 (0x0070 - 0x003C)
class UInGameAdManager : public UObject
{
public:
	unsigned long                                      bShouldPauseWhileAdOpen : 1;                      		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FScriptDelegate >                   ClickedBannerDelegates;                           		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   ClosedAdDelegates;                                		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUserClickedBanner__Delegate;                  		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUserClosedAdvertisement__Delegate;            		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 163 ];

		return pClassPointer;
	};

	void ClearClosedAdDelegate ( struct FScriptDelegate InDelegate );
	void AddClosedAdDelegate ( struct FScriptDelegate InDelegate );
	void OnUserClosedAdvertisement ( );
	void ClearClickedBannerDelegate ( struct FScriptDelegate InDelegate );
	void AddClickedBannerDelegate ( struct FScriptDelegate InDelegate );
	void OnUserClickedBanner ( );
	void SetPauseWhileAdOpen ( unsigned long bShouldPause );
	void ForceCloseAd ( );
	void HideBanner ( );
	void ShowBanner ( unsigned long bShowBottomOfScreen );
	void eventInit ( );
};

UClass* UInGameAdManager::pClassPointer = NULL;

// Class Engine.EngineBaseTypes
// 0x0000 (0x003C - 0x003C)
class UEngineBaseTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 165 ];

		return pClassPointer;
	};

};

UClass* UEngineBaseTypes::pClassPointer = NULL;

// Class Engine.Brush
// 0x0024 (0x01AC - 0x0188)
class ABrush : public AActor
{
public:
	unsigned char                                      CsgOper;                                          		// 0x0188 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BrushColor;                                       		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PolyFlags;                                        		// 0x0190 (0x0004) [0x0000000000000000]              
	unsigned long                                      bColored : 1;                                     		// 0x0194 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSolidWhenSelected : 1;                           		// 0x0194 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPlaceableFromClassBrowser : 1;                   		// 0x0194 (0x0004) [0x0000000000000000] [0x00000004] 
	class UModel*                                      Brush;                                            		// 0x0198 (0x0004) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UBrushComponent*                             BrushComponent;                                   		// 0x019C (0x0004) [0x00000000040A000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	TArray< struct FGeomSelection >                    SavedSelections;                                  		// 0x01A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 167 ];

		return pClassPointer;
	};

};

UClass* ABrush::pClassPointer = NULL;

// Class Engine.BrushShape
// 0x0000 (0x01AC - 0x01AC)
class ABrushShape : public ABrush
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 169 ];

		return pClassPointer;
	};

};

UClass* ABrushShape::pClassPointer = NULL;

// Class Engine.Volume
// 0x0010 (0x01BC - 0x01AC)
class AVolume : public ABrush
{
public:
	TArray< class AActor* >                            AssociatedActors;                                 		// 0x01AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bForcePawnWalk : 1;                               		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessAllActors : 1;                            		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPawnsOnly : 1;                                   		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 171 ];

		return pClassPointer;
	};

	void eventProcessActorSetVolume ( class AActor* Other );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void AssociateActor ( class AActor* ActorToAssociate );
	bool EncompassesPoint ( struct FVector Loc );
	bool Encompasses ( class AActor* Other );
};

UClass* AVolume::pClassPointer = NULL;

// Class Engine.BlockingVolume
// 0x0004 (0x01C0 - 0x01BC)
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bBlockCamera : 1;                                 		// 0x01BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockProjectiles : 1;                            		// 0x01BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 173 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ABlockingVolume::pClassPointer = NULL;

// Class Engine.DynamicBlockingVolume
// 0x0004 (0x01C4 - 0x01C0)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 175 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record );
	void eventPostBeginPlay ( );
};

UClass* ADynamicBlockingVolume::pClassPointer = NULL;

// Class Engine.CullDistanceVolume
// 0x0010 (0x01CC - 0x01BC)
class ACullDistanceVolume : public AVolume
{
public:
	TArray< struct FCullDistanceSizePair >             CullDistances;                                    		// 0x01BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 177 ];

		return pClassPointer;
	};

};

UClass* ACullDistanceVolume::pClassPointer = NULL;

// Class Engine.LevelGridVolume
// 0x0088 (0x0244 - 0x01BC)
class ALevelGridVolume : public AVolume
{
public:
	struct FString                                     LevelGridVolumeName;                              		// 0x01BC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      CellShape;                                        		// 0x01C8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Subdivisions[ 0x3 ];                              		// 0x01CC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LoadingDistance;                                  		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              KeepLoadedRange;                                  		// 0x01DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FKConvexElem                                CellConvexElem;                                   		// 0x01E0 (0x0064) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 179 ];

		return pClassPointer;
	};

};

UClass* ALevelGridVolume::pClassPointer = NULL;

// Class Engine.LevelStreamingVolume
// 0x0018 (0x01D4 - 0x01BC)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x01BC (0x000C) [0x0000000001420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bEditorPreVisOnly : 1;                            		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisabled : 1;                                    		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTestDistanceToVolume : 1;                        		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      StreamingUsage;                                   		// 0x01CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Usage;                                            		// 0x01CD (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      CurrentVisibility;                                		// 0x01CE (0x0001) [0x0000000000000000]              
	float                                              TestVolumeDistance;                               		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 181 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ALevelStreamingVolume::pClassPointer = NULL;

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x01BC - 0x01BC)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 183 ];

		return pClassPointer;
	};

};

UClass* ALightmassCharacterIndirectDetailVolume::pClassPointer = NULL;

// Class Engine.LightmassImportanceVolume
// 0x0000 (0x01BC - 0x01BC)
class ALightmassImportanceVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 185 ];

		return pClassPointer;
	};

};

UClass* ALightmassImportanceVolume::pClassPointer = NULL;

// Class Engine.MassiveLODOverrideVolume
// 0x0000 (0x01BC - 0x01BC)
class AMassiveLODOverrideVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 187 ];

		return pClassPointer;
	};

};

UClass* AMassiveLODOverrideVolume::pClassPointer = NULL;

// Class Engine.NavMeshBoundsVolume
// 0x0000 (0x01BC - 0x01BC)
class ANavMeshBoundsVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 189 ];

		return pClassPointer;
	};

};

UClass* ANavMeshBoundsVolume::pClassPointer = NULL;

// Class Engine.PathBlockingVolume
// 0x0000 (0x01BC - 0x01BC)
class APathBlockingVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 191 ];

		return pClassPointer;
	};

};

UClass* APathBlockingVolume::pClassPointer = NULL;

// Class Engine.PhysicsVolume
// 0x0048 (0x0204 - 0x01BC)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                     		// 0x01BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityAffectsWalking : 1;                      		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPainCausing : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAIShouldIgnorePain : 1;                          		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEntryPain : 1;                                   		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      BACKUP_bPainCausing : 1;                          		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDestructive : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNoInventory : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bMoveProjectiles : 1;                             		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bBounceVelocity : 1;                              		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNeutralZone : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bCrowdAgentsPlayDeathAnim : 1;                    		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPhysicsOnContact : 1;                            		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bWaterVolume : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              GroundFriction;                                   		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TerminalVelocity;                                 		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePerSec;                                     		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageType;                                       		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidFriction;                                    		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PainInterval;                                     		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RigidBodyDamping;                                 		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDampingForce;                                  		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInfo*                                       PainTimer;                                        		// 0x01F8 (0x0004) [0x0000000000000000]              
	class AController*                                 DamageInstigator;                                 		// 0x01FC (0x0004) [0x0000000000000000]              
	class APhysicsVolume*                              NextPhysicsVolume;                                		// 0x0200 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 193 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action );
	void NotifyPawnBecameViewTarget ( class APawn* P, class APlayerController* PC );
	void ModifyPlayer ( class APawn* PlayerPawn );
	void CausePainTo ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void TimerPop ( class AVolumeTimer* T );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
	void eventActorLeavingVolume ( class AActor* Other );
	void eventActorEnteredVolume ( class AActor* Other );
	void eventPhysicsChangedFor ( class AActor* Other );
	void Reset ( );
	void eventPostBeginPlay ( );
	struct FVector GetZoneVelocityForActor ( class AActor* TheActor );
	float GetGravityZ ( );
};

UClass* APhysicsVolume::pClassPointer = NULL;

// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0204 - 0x0204)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 195 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
};

UClass* ADefaultPhysicsVolume::pClassPointer = NULL;

// Class Engine.GravityVolume
// 0x0004 (0x0208 - 0x0204)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                         		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 197 ];

		return pClassPointer;
	};

};

UClass* AGravityVolume::pClassPointer = NULL;

// Class Engine.LadderVolume
// 0x0034 (0x0238 - 0x0204)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                          		// 0x0204 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LookDir;                                          		// 0x0210 (0x000C) [0x0000000000000000]              
	struct FVector                                     ClimbDir;                                         		// 0x021C (0x000C) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x0228 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bNoPhysicalLadder : 1;                            		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoPath : 1;                                    		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowLadderStrafing : 1;                         		// 0x022C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class APawn*                                       PendingClimber;                                   		// 0x0230 (0x0004) [0x0000000000000000]              
	class UArrowComponent*                             WallDirArrow;                                     		// 0x0234 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 199 ];

		return pClassPointer;
	};

	void eventPhysicsChangedFor ( class AActor* Other );
	void eventPawnLeavingVolume ( class APawn* P );
	void eventPawnEnteredVolume ( class APawn* P );
	bool InUse ( class APawn* Ignored );
	void eventPostBeginPlay ( );
};

UClass* ALadderVolume::pClassPointer = NULL;

// Class Engine.PortalVolume
// 0x000C (0x01C8 - 0x01BC)
class APortalVolume : public AVolume
{
public:
	TArray< class APortalTeleporter* >                 Portals;                                          		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 201 ];

		return pClassPointer;
	};

};

UClass* APortalVolume::pClassPointer = NULL;

// Class Engine.PostProcessVolume
// 0x00F4 (0x02B0 - 0x01BC)
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        Settings;                                         		// 0x01C0 (0x00E8) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APostProcessVolume*                          NextLowerPriorityVolume;                          		// 0x02A8 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x02AC (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 203 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* APostProcessVolume::pClassPointer = NULL;

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0018 (0x01D4 - 0x01BC)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray< class AActor* >                            OverrideVisibleActors;                            		// 0x01BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            OverrideInvisibleActors;                          		// 0x01C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 205 ];

		return pClassPointer;
	};

};

UClass* APrecomputedVisibilityOverrideVolume::pClassPointer = NULL;

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x01BC - 0x01BC)
class APrecomputedVisibilityVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 207 ];

		return pClassPointer;
	};

};

UClass* APrecomputedVisibilityVolume::pClassPointer = NULL;

// Class Engine.ReverbVolume
// 0x004C (0x0208 - 0x01BC)
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x01C0 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	struct FReverbSettings                             Settings;                                         		// 0x01C4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FInteriorSettings                           AmbientZoneSettings;                              		// 0x01E0 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	class AReverbVolume*                               NextLowerPriorityVolume;                          		// 0x0204 (0x0004) [0x0000000001002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 209 ];

		return pClassPointer;
	};

};

UClass* AReverbVolume::pClassPointer = NULL;

// Class Engine.ShadowRelevanceVolume
// 0x0010 (0x01CC - 0x01BC)
class AShadowRelevanceVolume : public AVolume
{
public:
	TArray< struct FShadowRelevanceSizePair >          ShadowRelevanceList;                              		// 0x01BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 211 ];

		return pClassPointer;
	};

};

UClass* AShadowRelevanceVolume::pClassPointer = NULL;

// Class Engine.TriggerVolume
// 0x0000 (0x01BC - 0x01BC)
class ATriggerVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 213 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

UClass* ATriggerVolume::pClassPointer = NULL;

// Class Engine.DynamicSMActor
// 0x003C (0x01C4 - 0x0188)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x018C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 ReplicatedMesh;                                   		// 0x0190 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMaterialInterface*                          ReplicatedMaterial0;                              		// 0x0194 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInterface*                          ReplicatedMaterial1;                              		// 0x0198 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bForceStaticDecals : 1;                           		// 0x019C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bPawnCanBaseOn : 1;                               		// 0x019C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSafeBaseIfAsleep : 1;                            		// 0x019C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FVector                                     ReplicatedMeshTranslation;                        		// 0x01A0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    ReplicatedMeshRotation;                           		// 0x01AC (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedMeshScale3D;                            		// 0x01B8 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 215 ];

		return pClassPointer;
	};

	void SetLightEnvironmentToNotBeDynamic ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	bool CanBasePawn ( class APawn* P );
	void SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnSetMesh ( class USeqAct_SetMesh* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ADynamicSMActor::pClassPointer = NULL;

// Class Engine.InterpActor
// 0x0030 (0x01F4 - 0x01C4)
class AInterpActor : public ADynamicSMActor
{
public:
	unsigned long                                      bShouldSaveForCheckpoint : 1;                     		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMonitorMover : 1;                                		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMonitorZVelocity : 1;                            		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;             		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bStopOnEncroach : 1;                              		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCrushPawnsWhenEncroaching : 1;                   		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCrushPawnsWhenGoingDown : 1;                     		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bCrushPawnsWhenGoingUp : 1;                       		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bCrushVehiclesWhenGoingDown : 1;                  		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bCrushVehiclesWhenGoingUp : 1;                    		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;         		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bTreatAsStaticForGBXNavMeshBuilding : 1;          		// 0x01C4 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIsLift : 1;                                      		// 0x01C4 (0x0004) [0x0000000000000000] [0x00002000] 
	class ANavigationPoint*                            MyMarker;                                         		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              MaxZVelocity;                                     		// 0x01CC (0x0004) [0x0000000000000000]              
	float                                              StayOpenTime;                                     		// 0x01D0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   OpenSound;                                        		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpeningAmbientSound;                              		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpenedSound;                                      		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CloseSound;                                       		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosingAmbientSound;                              		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosedSound;                                      		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              BeforeStoppingVelocityZ;                          		// 0x01F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 217 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void ShutDown ( );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PlayMovingSound ( unsigned long bClosing );
	void FinishedOpen ( );
	void Restart ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventRanInto ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	bool ChildEncroachingOn ( class AInterpActor* Child, class AActor* Other );
	bool StopOnEncroach ( );
	void eventPostBeginPlay ( );
};

UClass* AInterpActor::pClassPointer = NULL;

// Class Engine.EmitterPool
// 0x0068 (0x01F0 - 0x0188)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                      		// 0x0188 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          PoolComponents;                                   		// 0x018C (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          ActiveComponents;                                 		// 0x0198 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystemComponent*                    PhysXSurrogateComponent;                          		// 0x01A4 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PhysXSurrogateComponentHalfDownsampling;          		// 0x01A8 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PhysXSurrogateComponentQuarterDownsampling;       		// 0x01AC (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PhysXSurrogateComponentSPHFluid;                  		// 0x01B0 (0x0004) [0x0000000004082009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                MaxActiveEffects;                                 		// 0x01B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLogPoolOverflow : 1;                             		// 0x01B8 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bLogPoolOverflowList : 1;                         		// 0x01B8 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FEmitterBaseInfo >                  RelativePSCs;                                     		// 0x01BC (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	float                                              SMC_MIC_ReductionTime;                            		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              SMC_MIC_CurrentReductionTime;                     		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IdealStaticMeshComponents;                        		// 0x01D0 (0x0004) [0x0000000000000000]              
	int                                                IdealMaterialInstanceConstants;                   		// 0x01D4 (0x0004) [0x0000000000000000]              
	TArray< class UStaticMeshComponent* >              FreeSMComponents;                                 		// 0x01D8 (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         FreeMatInstConsts;                                		// 0x01E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 219 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
	class UParticleSystemComponent* SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate, unsigned long bSkipAutoActivate, unsigned long bCanBeReclaimed );
	class UParticleSystemComponent* SpawnEmitterMeshAttachment ( class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, struct FName AttachPointName, unsigned long bAttachToSocket, struct FVector RelativeLoc, struct FRotator RelativeRot, unsigned long bCanBeReclaimed );
	class UParticleSystemComponent* SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, unsigned long bInheritScaleFromBase, unsigned long bCanBeReclaimed );
	class UParticleSystemComponent* GetPooledComponent ( class UParticleSystem* EmitterTemplate, unsigned long bAutoActivate, unsigned long bCanBeReclaimed );
	class UMaterialInstanceConstant* GetFreeMatInstConsts ( unsigned long bCreateNewObject );
	void FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC );
	class UStaticMeshComponent* GetFreeStaticMeshComponent ( unsigned long bCreateNewObject );
	void FreeStaticMeshComponents ( class UParticleSystemComponent* PSC );
	void ReturnToPool ( class UParticleSystemComponent* PSC );
	void ClearAllPoolComponents ( );
	void ClearPoolComponents ( unsigned long bClearActive );
	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
};

UClass* AEmitterPool::pClassPointer = NULL;

// Class Engine.GBXNavMesh
// 0x0150 (0x02D8 - 0x0188)
class AGBXNavMesh : public AActor
{
public:
	int                                                BuildVersion;                                     		// 0x0188 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FGuid                                       BuildGUID;                                        		// 0x018C (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                MeshID;                                           		// 0x019C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FGBXConnectedNavMesh >              ConnectedMeshes;                                  		// 0x01A0 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FGBXNavMeshVertex >                 Vertices;                                         		// 0x01AC (0x000C) [0x0000000000021001]              ( CPF_Edit | CPF_Native | CPF_EditConst )
	TArray< struct FGBXNavMeshPoly >                   Polys;                                            		// 0x01B8 (0x000C) [0x0000000000021001]              ( CPF_Edit | CPF_Native | CPF_EditConst )
	TArray< struct FGBXNavMeshPolyData >               PolyData;                                         		// 0x01C4 (0x000C) [0x0000000000021001]              ( CPF_Edit | CPF_Native | CPF_EditConst )
	TArray< struct FGBXNavMeshPathSize >               PathSizes;                                        		// 0x01D0 (0x000C) [0x0000000000021001]              ( CPF_Edit | CPF_Native | CPF_EditConst )
	TArray< struct FGBXNavMeshObstacleData >           Obstacles;                                        		// 0x01DC (0x000C) [0x0000000000021001]              ( CPF_Edit | CPF_Native | CPF_EditConst )
	TArray< class UGBXCrossLevelReferenceContainer* >  SpecialMovers;                                    		// 0x01E8 (0x000C) [0x0000000000021001]              ( CPF_Edit | CPF_Native | CPF_EditConst )
	class AActor*                                      MeshBase;                                         		// 0x01F4 (0x0004) [0x0000000000021001]              ( CPF_Edit | CPF_Native | CPF_EditConst )
	struct FGBXNavMeshPolyLookup                       PolyLookup;                                       		// 0x01F8 (0x0038) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMatrix                                     CachedLocalToWorld;                               		// 0x0230 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FMatrix                                     CachedWorldToLocal;                               		// 0x0270 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CachedBaseLocation;                               		// 0x02B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CachedBaseRotation;                               		// 0x02BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AGBXNavMesh*                                 NextNavMesh;                                      		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    BuildData;                                        		// 0x02CC (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bShowPolyDebugText : 1;                           		// 0x02D0 (0x0004) [0x0000000000006001] [0x00000001] ( CPF_Edit | CPF_Transient | CPF_Config )
	class UGBXNavMeshRenderingComponent*               RenderComponent;                                  		// 0x02D4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 221 ];

		return pClassPointer;
	};

	bool PolyContainsPoint ( int PolyIdx, struct FVector Point, unsigned long bDoHeightCheck, float Tolerance, unsigned long bWorldSpace, struct FVector* NearestPointOnPoly );
	void OnPotentiallyConnectedMeshRemoved ( class AGBXNavMesh* NavMesh );
	void OnPotentiallyConnectedMeshAdded ( class AGBXNavMesh* NavMesh );
	void FixupOldVersions ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* AGBXNavMesh::pClassPointer = NULL;

// Class Engine.HUD
// 0x009C (0x0224 - 0x0188)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                       		// 0x0188 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      GreenColor;                                       		// 0x018C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      RedColor;                                         		// 0x0190 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APlayerController*                           PlayerOwner;                                      		// 0x0194 (0x0004) [0x0000000000000000]              
	class AActor*                                      AnimDebugThis;                                    		// 0x0198 (0x0004) [0x0000000000000000]              
	struct FName                                       AnimDebugStartingPoint;                           		// 0x019C (0x0008) [0x0000000000000000]              
	unsigned long                                      bLostFocusPaused : 1;                             		// 0x01A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowHUD : 1;                                     		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowScores : 1;                                  		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowDebugInfo : 1;                               		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowAnimDebug : 1;                               		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowBadConnectionAlert : 1;                      		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMessageBeep : 1;                                 		// 0x01A4 (0x0004) [0x0000000000044000] [0x00000040] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowOverlays : 1;                                		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000080] 
	float                                              HudCanvasScale;                                   		// 0x01A8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class AActor* >                            PostRenderedActors;                               		// 0x01AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FConsoleMessage >                   ConsoleMessages;                                  		// 0x01B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      ConsoleColor;                                     		// 0x01C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConsoleMessageCount;                              		// 0x01C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ConsoleFontSize;                                  		// 0x01CC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MessageFontOffset;                                		// 0x01D0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxHUDAreaMessageCount;                           		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              ConsoleMessagePosX;                               		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConsoleMessagePosY;                               		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCanvas*                                     Canvas;                                           		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              LastHUDRenderTime;                                		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RenderDelta;                                      		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeX;                                            		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeY;                                            		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterX;                                          		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterY;                                          		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioX;                                           		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioY;                                           		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DebugDisplay;                                     		// 0x0204 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FName                                       ActiveDebugDisplay;                               		// 0x0210 (0x0008) [0x0000000000000000]              
	TArray< struct FKismetDrawTextInfo >               KismetTextInfo;                                   		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 223 ];

		return pClassPointer;
	};

	bool eventGetShowZones ( );
	bool eventGetShowCoverNum ( );
	bool eventGetShowCoverVis ( );
	bool eventGetShowCoverRegions ( );
	void eventOnLostFocusPause ( unsigned long bEnable );
	void PlayerOwnerDied ( );
	void AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime );
	void eventDisplayConsoleMessages ( );
	void Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime );
	void eventDisplayBadConnectionAlert ( );
	void DrawbShowHUDIsFalseHUD ( );
	void DrawHUD ( );
	void eventShowDebugInfo ( );
	void eventPostRender ( );
	void PreCalcValues ( );
	void SetShowScores ( unsigned long bNewValue );
	void ShowScores ( );
	void ShowHUD ( );
	void ToggleHUD ( );
	void AddPostRenderedActor ( class AActor* A );
	void RemovePostRenderedActor ( class AActor* A );
	void eventPostBeginPlay ( );
	void Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor );
	void Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor );
};

UClass* AHUD::pClassPointer = NULL;

// Class Engine.IDestructibleObject
// 0x0000 (0x0188 - 0x0188)
class AIDestructibleObject : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 225 ];

		return pClassPointer;
	};

};

UClass* AIDestructibleObject::pClassPointer = NULL;

// Class Engine.AutoTestManager
// 0x00CC (0x0254 - 0x0188)
class AAutoTestManager : public AInfo
{
public:
	unsigned long                                      bAutomatedPerfTesting : 1;                        		// 0x0188 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoContinueToNextRound : 1;                     		// 0x0188 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                		// 0x0188 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bExitOnCyclesComplete : 1;                        		// 0x0188 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheckingForFragmentation : 1;                    		// 0x0188 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCheckingForMemLeaks : 1;                         		// 0x0188 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDoingASentinelRun : 1;                           		// 0x0188 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bSentinelStreamingLevelStillLoading : 1;          		// 0x0188 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bCanCollectStatsWhilePaused : 1;                  		// 0x0188 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bFinishedTraversal : 1;                           		// 0x0188 (0x0004) [0x0000000000000000] [0x00000200] 
	int                                                AutomatedPerfRemainingTime;                       		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                AutomatedTestingMapIndex;                         		// 0x0190 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           AutomatedMapTestingList;                          		// 0x0194 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FString >                           AutomatedMapDLC1TestingList;                      		// 0x01A0 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                NumAutomatedMapTestingCycles;                     		// 0x01AC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                NumberOfMatchesPlayed;                            		// 0x01B0 (0x0004) [0x0000000000000000]              
	int                                                NumMapListCyclesDone;                             		// 0x01B4 (0x0004) [0x0000000000000000]              
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;     		// 0x01B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AutomatedMapTestingTransitionMap;                 		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTaskDescription;                          		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTaskParameter;                            		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTagDesc;                                  		// 0x01E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APlayerController*                           SentinelPC;                                       		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           SentinelTravelArray;                              		// 0x01F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SentinelNavigationIdx;                            		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SentinelIdx;                                      		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumRotationsIncrement;                            		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TravelPointsIncrement;                            		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumMinutesPerMap;                                 		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           CommandsToRunAtEachTravelTheWorldNode;            		// 0x0218 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CommandStringToExec;                              		// 0x0224 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     SelectedCharacterClass;                           		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       StationDefName;                                   		// 0x023C (0x0008) [0x0000000000000000]              
	struct FString                                     AutomatedTestingTravelType;                       		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumOfDLCsToIncludeInRun;                          		// 0x0250 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 227 ];

		return pClassPointer;
	};

	bool CheckForSentinelRun ( );
	void StartMatch ( );
	void StopTraversal ( );
	struct FString GetNextAutomatedTestingMap ( );
	void IncrementNumberOfMatchesPlayed ( );
	void IncrementAutomatedTestingMapIndex ( );
	void CloseAutomatedMapTestTimer ( );
	void StartAutomatedMapTestTimerWorker ( );
	void eventStartAutomatedMapTestTimer ( );
	void eventStartMenuTimer ( );
	void DoSentinel_TakeManualMemSnapshot ( );
	void DoMemoryTracking ( );
	void DoTimeBasedSentinelStatGathering ( );
	void DoSentinel_ViewDependentMemoryAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation );
	void DoSentinel_PerfAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation );
	void DoSentinel_MemoryAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation );
	void GetTravelLocations ( struct FName LevelName, class APlayerController* PC, TArray< struct FVector >* TravelPoints );
	void HandlePerLoadedMapAudioStats ( );
	void DoSentinelActionPerLoadedMap ( );
	void DoAutomatedSmokeTest ( );
	void DoUIAutoMemTest ( );
	void DoTravelTheWorld ( );
	void EndSentinelRun ( unsigned char RunResult );
	void AddSentinelPerTimePeriodStats ( struct FVector InLocation, struct FRotator InRotation );
	void BeginSentinelRun ( struct FString TaskDescription, struct FString TaskParameter, struct FString TagDesc, struct FString MapFrom, struct FString MapTo );
	void PopulateFullAutomatedTestingMapList ( );
	void InitializeOptions ( struct FString Options );
	void eventTimer ( );
	void eventPostBeginPlay ( );
};

UClass* AAutoTestManager::pClassPointer = NULL;

// Class Engine.CoverGroup
// 0x0014 (0x019C - 0x0188)
class ACoverGroup : public AInfo
{
public:
	TArray< struct FActorReference >                   CoverLinkRefs;                                    		// 0x0188 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AutoSelectRadius;                                 		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectHeight;                                 		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 229 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void ToggleGroup ( );
	void DisableGroup ( );
	void EnableGroup ( );
};

UClass* ACoverGroup::pClassPointer = NULL;

// Class Engine.FileWriter
// 0x0018 (0x01A0 - 0x0188)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                       		// 0x0188 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     Filename;                                         		// 0x018C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      FileType;                                         		// 0x0198 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFlushEachWrite : 1;                              		// 0x019C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantsAsyncWrites : 1;                            		// 0x019C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 231 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void Logf ( struct FString logString );
	void CloseFile ( );
	bool OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp );
};

UClass* AFileWriter::pClassPointer = NULL;

// Class Engine.FileLog
// 0x0000 (0x01A0 - 0x01A0)
class AFileLog : public AFileWriter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 233 ];

		return pClassPointer;
	};

	void CloseLog ( );
	void OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique );
};

UClass* AFileLog::pClassPointer = NULL;

// Class Engine.GameInfo
// 0x01A8 (0x0330 - 0x0188)
class AGameInfo : public AInfo
{
public:
	unsigned long                                      bRestartLevel : 1;                                		// 0x0188 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPauseable : 1;                                   		// 0x0188 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTeamGame : 1;                                    		// 0x0188 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGameEnded : 1;                                   		// 0x0188 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOverTime : 1;                                    		// 0x0188 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayedStart : 1;                                		// 0x0188 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWaitingToStartMatch : 1;                         		// 0x0188 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bChangeLevels : 1;                                		// 0x0188 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAlreadyChanged : 1;                              		// 0x0188 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAdminCanPause : 1;                               		// 0x0188 (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bGameRestarted : 1;                               		// 0x0188 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bLevelChange : 1;                                 		// 0x0188 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bKickLiveIdlers : 1;                              		// 0x0188 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShutdownAIWhenIrrelevant : 1;                    		// 0x0188 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bUsingArbitration : 1;                            		// 0x0188 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                 		// 0x0188 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bNeedsEndGameHandshake : 1;                       		// 0x0188 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                  		// 0x0188 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                    		// 0x0188 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bFixedPlayerStart : 1;                            		// 0x0188 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bUseSeamlessTravel : 1;                           		// 0x0188 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bHasNetworkError : 1;                             		// 0x0188 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bRequiresPushToTalk : 1;                          		// 0x0188 (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bIsStandbyCheckingEnabled : 1;                    		// 0x0188 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      bIsStandbyCheckingOn : 1;                         		// 0x0188 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bHasStandbyCheatTriggered : 1;                    		// 0x0188 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bNewOnlineSessionOnTravel : 1;                    		// 0x0188 (0x0004) [0x0000000000000000] [0x04000000] 
	struct FString                                     CauseEventCommand;                                		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugLocString;                                     		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugRotString;                                     		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerController* >                 PendingArbitrationPCs;                            		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerController* >                 ArbitrationPCs;                                   		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ArbitrationHandshakeTimeout;                      		// 0x01C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameDifficulty;                                   		// 0x01CC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                GoreLevel;                                        		// 0x01D0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameSpeed;                                        		// 0x01D4 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultPawnClass;                                 		// 0x01D8 (0x0004) [0x0000000000000000]              
	class UClass*                                      HUDType;                                          		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                MaxSpectators;                                    		// 0x01E0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxSpectatorsAllowed;                             		// 0x01E4 (0x0004) [0x0000000000000000]              
	int                                                NumSpectators;                                    		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayers;                                       		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                MaxPlayersAllowed;                                		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                NumPlayers;                                       		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                EffectiveNumPlayers;                              		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                NumBots;                                          		// 0x01FC (0x0004) [0x0000000000000000]              
	int                                                NumTravellingPlayers;                             		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                CurrentID;                                        		// 0x0204 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPlayerName;                                		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameName;                                         		// 0x0214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                GoalScore;                                        		// 0x0220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxLives;                                         		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TimeLimit;                                        		// 0x0228 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      DeathMessageClass;                                		// 0x022C (0x0004) [0x0000000000000000]              
	class UClass*                                      GameMessageClass;                                 		// 0x0230 (0x0004) [0x0000000000000000]              
	class AMutator*                                    BaseMutator;                                      		// 0x0234 (0x0004) [0x0000000000000000]              
	class UClass*                                      AccessControlClass;                               		// 0x0238 (0x0004) [0x0000000000000000]              
	class AAccessControl*                              AccessControl;                                    		// 0x023C (0x0004) [0x0000000000000000]              
	class UClass*                                      BroadcastHandlerClass;                            		// 0x0240 (0x0004) [0x0000000000000000]              
	class ABroadcastHandler*                           BroadcastHandler;                                 		// 0x0244 (0x0004) [0x0000000000000000]              
	class UClass*                                      AutoTestManagerClass;                             		// 0x0248 (0x0004) [0x0000000000000000]              
	class AAutoTestManager*                            MyAutoTestManager;                                		// 0x024C (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerControllerClass;                            		// 0x0250 (0x0004) [0x0000000000000000]              
	class UClass*                                      PlayerReplicationInfoClass;                       		// 0x0254 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameReplicationInfoClass;                         		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              MaxIdleTime;                                      		// 0x0260 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTimeMargin;                                    		// 0x0264 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TimeMarginSlack;                                  		// 0x0268 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTimeMargin;                                    		// 0x026C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   Pausers;                                          		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0288 (0x0004) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x028C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0290 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UClass*                                      OnlineStatsWriteClass;                            		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                LeaderboardId;                                    		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                ArbitratedLeaderboardId;                          		// 0x029C (0x0004) [0x0000000000000000]              
	class ACoverReplicator*                            CoverReplicatorBase;                              		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UClass*                                      OnlineGameSettingsClass;                          		// 0x02A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UClass* >                            DebugBeaconActorClasses;                          		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ServerOptions;                                    		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AdjustedNetSpeed;                                 		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              LastNetSpeedUpdateTime;                           		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                TotalNetBandwidth;                                		// 0x02C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MinDynamicBandwidth;                              		// 0x02CC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxDynamicBandwidth;                              		// 0x02D0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              StandbyRxCheatTime;                               		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StandbyTxCheatTime;                               		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BadPingThreshold;                                 		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentMissingForRxStandby;                       		// 0x02E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentMissingForTxStandby;                       		// 0x02E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentForBadPing;                                		// 0x02E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              JoinInProgressStandbyWaitTime;                    		// 0x02EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FGameClassShortName >               GameInfoClassAliases;                             		// 0x02F0 (0x000C) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultGameType;                                  		// 0x02FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGameTypePrefix >                   DefaultMapPrefixes;                               		// 0x0308 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGameTypePrefix >                   CustomMapPrefixes;                                		// 0x0314 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                AnimTreePoolSize;                                 		// 0x0320 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x0324 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 235 ];

		return pClassPointer;
	};

	bool OverrideCanUnpauseInternalUI ( );
	void Beacon ( class UClass* BeaconActorClass, unsigned char Red, unsigned char Green, unsigned char Blue );
	void CheckForDebugBeacon ( class AActor* BeaconTestActor );
	struct FColor GetDebugBeacon ( class UClass* BeaconActorClass );
	void SaveDebugBeacon ( class UClass* BeaconActorClass, unsigned char Red, unsigned char Green, unsigned char Blue );
	void eventOnEngineHasLoaded ( );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void eventStandbyCheatDetected ( unsigned char StandbyType );
	void EnableStandbyCheatDetection ( unsigned long bIsEnabled );
	void BeginBVT ( struct FString TagDesc );
	bool CheckForSentinelRun ( );
	bool ShouldAutoContinueToNextRound ( );
	bool IsDoingASentinelRun ( );
	bool IsCheckingForMemLeaks ( );
	bool IsCheckingForFragmentation ( );
	bool IsAutomatedPerfTesting ( );
	void SetBandwidthLimit ( float AsyncIOBandwidthLimit );
	void DoTravelTheWorld ( );
	void DoGameSpecificPerformanceSettings ( class AWorldInfo* TheWorldInfo );
	void TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void TellClientsPartyHostIsLeaving ( struct FUniqueNetId PartyHostPlayerId );
	void TellClientsToReturnToPartyHost ( );
	void OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServer ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	void ClearAutoLoginDelegates ( );
	bool ProcessServerLogin ( );
	void eventMatineeCancelled ( );
	void RecalculateSkillRating ( );
	void UpdateGameplayMuteList ( class APlayerController* PC );
	void NotifyArbitratedMatchEnd ( );
	bool MatchIsInProgress ( );
	void ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServerForArbitration ( );
	void StartArbitratedMatch ( );
	void StartArbitrationRegistration ( );
	void ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful );
	void UpdateGameSettingsCounts ( );
	void SetSeamlessTravelViewTarget ( class APlayerController* PC );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void UpdateGameSettings ( );
	void eventPostSeamlessTravel ( );
	void SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI );
	bool FindInactivePRI ( class APlayerController* PC );
	void AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void eventPostCommitMapChange ( );
	void eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName );
	bool AllowPausing ( class APlayerController* PC );
	bool AllowCheats ( class APlayerController* P );
	bool AllowMutator ( struct FString MutatorClassName );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void ModifyScoreKill ( class AController* Killer, class AController* Other );
	void ScoreKill ( class AController* Killer, class AController* Other );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	void AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class AActor* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	void EndLogging ( struct FString Reason );
	void GameEventsPoll ( );
	void EndOnlineGame ( );
	void PerformEndGameHandling ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void WriteOnlinePlayerScores ( );
	void WriteOnlineStats ( );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void RestartGame ( );
	bool GetTravelType ( );
	struct FString GetNextMap ( );
	void SendPlayer ( class APlayerController* aPlayer, struct FString URL );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	bool ShouldPawnDropWeaponOnDeath ( class APawn* P );
	bool PickupQuery ( class APawn* Other, class UIPickupable* Pickup );
	bool ShouldRespawn ( class APickupFactory* Other );
	bool CheckRelevance ( class AActor* Other );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, float* Damage, struct FVector* Momentum );
	bool eventShouldOverrideDamageTypeForHealing ( class UDamageTypeDefinition* DamageTypeDef );
	class UDamageTypeDefinition* eventGetHealingDamageTypeDefinition ( );
	bool ConvertDamageToHealing ( float Damage, class APawn* DamagedPawn, class AController* DamageInstigator, struct FVector HitLocation, class UClass* DamageSource, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	bool IsFriendlyFire ( class APawn* injured, class UITargetable* InstigatingTargetable );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void KickBan ( struct FString S );
	void Kick ( struct FString S );
	void BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition );
	bool PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector HitLocation );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, class UDamagePipeline* Pipeline );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventAddDefaultInventory ( class APawn* P );
	void eventAcceptInventory ( class APawn* PlayerPawn );
	void UnregisterPlayer ( class APlayerController* PC );
	void Logout ( class AController* Exiting );
	void eventPreExit ( );
	int CalculatedNetSpeed ( );
	void UpdateNetSpeeds ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void DisableFakePauseFor ( class APlayerController* PC );
	void UpdateBestNextHosts ( );
	int BestNextHostSort ( class APlayerController* A, class APlayerController* B );
	bool ClientsShouldSeeLobby ( );
	void GenericPlayerInitialization ( class AController* C );
	void ReplicateStreamingStatus ( class APlayerController* PC );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class AActor* StartSpot );
	void InitiatePlayerPawnDataLoad ( class AController* NewPlayer );
	void RestartPlayer ( class AController* NewPlayer );
	void StartBots ( );
	void StartHumans ( );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartOnlineGame ( );
	void StartMatch ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	int GetNextPlayerID ( );
	bool AtCapacity ( unsigned long bSpectator );
	void RejectLogin ( class UPlayer* InPlayer, struct FString Error );
	void ResumeLogin ( class UPlayer* InPlayer );
	class UPlayer* PauseLogin ( );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage );
	bool RequiresPassword ( );
	class APlayerController* ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL );
	void ProcessServerTravel ( struct FString URL, unsigned long bAbsolute );
	void RemoveMutator ( class AMutator* MutatorToRemove );
	void AddMutator ( struct FString mutname, unsigned long bUserAdded );
	void eventNotifyPendingConnectionLost ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	struct FString eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal );
	int GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue );
	bool HasOption ( struct FString Options, struct FString InKey );
	struct FString ParseOption ( struct FString Options, struct FString InKey );
	void GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value );
	bool GrabOption ( struct FString* Options, struct FString* Result );
	void SetGameSpeed ( float T );
	void DebugPause ( );
	void ForceClearUnpauseDelegates ( class AActor* PauseActor );
	void eventClearPause ( );
	bool SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	int GetNumPlayers ( );
	struct FString GetNetworkNumber ( );
	void InitGameReplicationInfo ( );
	void eventForceKickPlayer ( class APlayerController* PC, struct FString KickReason );
	void eventKickIdler ( class APlayerController* PC );
	void eventGameEnding ( );
	void NotifyNavigationChanged ( class ANavigationPoint* N );
	void eventTimer ( );
	void ResetLevel ( );
	bool ShouldReset ( class AActor* ActorToReset );
	void Reset ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* GetCoverReplicator ( );
	void eventPreBeginPlay ( );
	bool GetMapCommonPackageName ( struct FString* InFilename, struct FString* OutCommonPackageName );
	bool GetSupportedGameTypes ( unsigned long bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType );
};

UClass* AGameInfo::pClassPointer = NULL;

// Class Engine.Mutator
// 0x0014 (0x019C - 0x0188)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                      		// 0x0188 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           GroupNames;                                       		// 0x018C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUserAdded : 1;                                   		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 237 ];

		return pClassPointer;
	};

	void NetDamage ( float OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UIDamageCauser* DamageCauser, float* Damage, struct FVector* Momentum );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	bool PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector HitLocation );
	bool OverridePickupQuery ( class APawn* Other, class UIPickupable* Pickup, unsigned char* bAllowPickup );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool HandleRestartGame ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void NotifyLogin ( class AController* NewPlayer );
	void NotifyLogout ( class AController* Exiting );
	bool CheckReplacement ( class AActor* Other );
	bool CheckRelevance ( class AActor* Other );
	bool IsRelevant ( class AActor* Other );
	bool AlwaysKeep ( class AActor* Other );
	void AddMutator ( class AMutator* M );
	void ModifyPlayer ( class APawn* Other );
	void ModifyLogin ( struct FString* Portal, struct FString* Options );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventDestroyed ( );
	bool MutatorIsAllowed ( );
	void eventPreBeginPlay ( );
};

UClass* AMutator::pClassPointer = NULL;

// Class Engine.PotentialClimbWatcher
// 0x0000 (0x0188 - 0x0188)
class APotentialClimbWatcher : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 239 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* APotentialClimbWatcher::pClassPointer = NULL;

// Class Engine.Route
// 0x001C (0x01A4 - 0x0188)
class ARoute : public AInfo
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;            		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      RouteType;                                        		// 0x018C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FActorReference >                   RouteList;                                        		// 0x0190 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FudgeFactor;                                      		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RouteIndexOffset;                                 		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 241 ];

		return pClassPointer;
	};

	int MoveOntoRoutePath ( class APawn* P, unsigned char RouteDirection, float DistFudgeFactor );
	int ResolveRouteIndex ( int Idx, unsigned char RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse );
};

UClass* ARoute::pClassPointer = NULL;

// Class Engine.WindPointSource
// 0x0004 (0x018C - 0x0188)
class AWindPointSource : public AInfo
{
public:
	class UWindPointSourceComponent*                   Component;                                        		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 243 ];

		return pClassPointer;
	};

};

UClass* AWindPointSource::pClassPointer = NULL;

// Class Engine.Keypoint
// 0x0004 (0x018C - 0x0188)
class AKeypoint : public AActor
{
public:
	class USpriteComponent*                            SpriteComp;                                       		// 0x0188 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 245 ];

		return pClassPointer;
	};

};

UClass* AKeypoint::pClassPointer = NULL;

// Class Engine.TargetPoint
// 0x0004 (0x0190 - 0x018C)
class ATargetPoint : public AKeypoint
{
public:
	int                                                SpawnRefCount;                                    		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 247 ];

		return pClassPointer;
	};

};

UClass* ATargetPoint::pClassPointer = NULL;

// Class Engine.LevelLandmark
// 0x0018 (0x01A0 - 0x0188)
class ALevelLandmark : public AActor
{
public:
	struct FString                                     LandmarkName;                                     		// 0x0188 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      LandmarkType;                                     		// 0x0194 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AssociatedStationDefinitionName;                  		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 249 ];

		return pClassPointer;
	};

};

UClass* ALevelLandmark::pClassPointer = NULL;

// Class Engine.PersistentTransitionLandmark
// 0x0024 (0x01C4 - 0x01A0)
class APersistentTransitionLandmark : public ALevelLandmark
{
public:
	struct FString                                     FromMapName;                                      		// 0x01A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ToMapName;                                        		// 0x01AC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             RequiredSublevelNames;                            		// 0x01B8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 251 ];

		return pClassPointer;
	};

};

UClass* APersistentTransitionLandmark::pClassPointer = NULL;

// Class Engine.MaterialInstanceActor
// 0x0004 (0x018C - 0x0188)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 253 ];

		return pClassPointer;
	};

};

UClass* AMaterialInstanceActor::pClassPointer = NULL;

// Class Engine.MatineeActor
// 0x00B4 (0x023C - 0x0188)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                     		// 0x0188 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x018C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bReversePlayback : 1;                             		// 0x018C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPaused : 1;                                      		// 0x018C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      AllAIGroupsInitialized : 1;                       		// 0x018C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x0190 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              Position;                                         		// 0x0194 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       AIGroupNames[ 0xA ];                              		// 0x0198 (0x0050) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       AIGroupPawns[ 0xA ];                              		// 0x01E8 (0x0028) [0x0000000000000020]              ( CPF_Net )
	int                                                AIGroupInitStage[ 0xA ];                          		// 0x0210 (0x0028) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClientSidePositionErrorTolerance;                 		// 0x0238 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 255 ];

		return pClassPointer;
	};

	void CheckPriorityRefresh ( );
	void eventUpdate ( );
	void AddAIGroupActor ( class UInterpGroupInstAI* AIGroupInst );
};

UClass* AMatineeActor::pClassPointer = NULL;

// Class Engine.NavigationPoint
// 0x00BC (0x0244 - 0x0188)
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                    		// 0x0188 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTransientEndPoint : 1;                           		// 0x0188 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideEditorPaths : 1;                             		// 0x0188 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCanReach : 1;                                    		// 0x0188 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlocked : 1;                                     		// 0x0188 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOneWayPath : 1;                                  		// 0x0188 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNeverUseStrafing : 1;                            		// 0x0188 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAlwaysUseStrafing : 1;                           		// 0x0188 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNoStrafing : 1;                             		// 0x0188 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bAutoBuilt : 1;                                   		// 0x0188 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bSpecialMove : 1;                                 		// 0x0188 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNoAutoConnect : 1;                               		// 0x0188 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bNotBased : 1;                                    		// 0x0188 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bPathsChanged : 1;                                		// 0x0188 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bDestinationOnly : 1;                             		// 0x0188 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bSourceOnly : 1;                                  		// 0x0188 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bSpecialForced : 1;                               		// 0x0188 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bMustBeReachable : 1;                             		// 0x0188 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bBlockable : 1;                                   		// 0x0188 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bFlyingPreferred : 1;                             		// 0x0188 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bMayCausePain : 1;                                		// 0x0188 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x0188 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bVehicleDestination : 1;                          		// 0x0188 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bMakeSourceOnly : 1;                              		// 0x0188 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bMustTouchToReach : 1;                            		// 0x0188 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCanWalkOnToReach : 1;                            		// 0x0188 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bBuildLongPaths : 1;                              		// 0x0188 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bBlockedForVehicles : 1;                          		// 0x0188 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bPreferredVehiclePath : 1;                        		// 0x0188 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bHasCrossLevelPaths : 1;                          		// 0x0188 (0x0004) [0x0000000000000002] [0x20000000] ( CPF_Const )
	unsigned long                                      bShouldSaveForCheckpoint : 1;                     		// 0x0188 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bRequireTraceTest : 1;                            		// 0x0188 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsValidStoppingPoint : 1;                        		// 0x018C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReservationRequiredToStopHere : 1;               		// 0x018C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisplayAreaReach : 1;                            		// 0x018C (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	struct FNavigationOctreeObject                     NavOctreeObject;                                  		// 0x0190 (0x0034) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UClass*                                      PathRenderingComponentClass;                      		// 0x01C4 (0x0004) [0x0000000000000000]              
	TArray< class UReachSpec* >                        PathList;                                         		// 0x01C8 (0x000C) [0x0000000004620003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	int                                                visitedWeight;                                    		// 0x01D4 (0x0004) [0x0000000000000000]              
	int                                                bestPathWeight;                                   		// 0x01D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextNavigationPoint;                              		// 0x01DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextOrdered;                                      		// 0x01E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            prevOrdered;                                      		// 0x01E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            previousPath;                                     		// 0x01E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Cost;                                             		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                ExtraCost;                                        		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TransientCost;                                    		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDetourWeight;                                 		// 0x01F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x01FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FCylinder                                   MaxPathSize;                                      		// 0x0200 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FGuid                                       NavGuid;                                          		// 0x0208 (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                NetworkID;                                        		// 0x0218 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class APawn*                                       AnchoredPawn;                                     		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAnchoredPawnTime;                             		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NodeSearchFlags;                                  		// 0x0224 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class AHybridNavigationArea*                       AreaActor;                                        		// 0x0228 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AreaName;                                         		// 0x022C (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                AreaReach;                                        		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                AreaVerticalReach;                                		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NoStoppingRadius;                                 		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BusyPathCostMultiplier;                           		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 257 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestAreaNavPointTo_Script ( struct FVector TestLocation );
	bool IsInTheSameAreaAs ( class ANavigationPoint* OtherNavPoint, unsigned long bAllowNodesWithNoAreaToMatch );
	bool IsInThisAreaName ( struct FName OtherAreaName, unsigned long bAllowNodesWithNoAreaToMatch );
	bool IsInThisArea ( class AHybridNavigationArea* Area );
	struct FColor GetAreaColor ( );
	struct FName GetAreaName ( );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	bool IsUsableAnchorFor ( class APawn* P );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

UClass* ANavigationPoint::pClassPointer = NULL;

// Class Engine.CoverLink
// 0x0099 (0x02DD - 0x0244)
class ACoverLink : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshSpecialMove;                  		// 0x0244 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      GLOBAL_bUseSlotMarkers : 1;                       		// 0x0248 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisabled : 1;                                    		// 0x0248 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bClaimAllSlots : 1;                               		// 0x0248 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoSort : 1;                                    		// 0x0248 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAutoAdjust : 1;                                  		// 0x0248 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCircular : 1;                                    		// 0x0248 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bLooped : 1;                                      		// 0x0248 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0248 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDynamicCover : 1;                                		// 0x0248 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFractureOnTouch : 1;                             		// 0x0248 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x0248 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDebug_FireLinks : 1;                             		// 0x0248 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDebug_ExposedLinks : 1;                          		// 0x0248 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bDebug_CoverGen : 1;                              		// 0x0248 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bDoAutoSlotDensityFixup : 1;                      		// 0x0248 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	float                                              LeanTraceDist;                                    		// 0x024C (0x0004) [0x0000000000000000]              
	TArray< struct FCoverSlot >                        Slots;                                            		// 0x0250 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FDynamicLinkInfo >                  DynamicLinkInfos;                                 		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APawn* >                             Claims;                                           		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              InvalidateDistance;                               		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFireLinkDist;                                  		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CircularOrigin;                                   		// 0x027C (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              CircularRadius;                                   		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AlignDist;                                        		// 0x028C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AutoCoverSlotInterval;                            		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StandHeight;                                      		// 0x0294 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MidHeight;                                        		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     StandingLeanOffset;                               		// 0x029C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     CrouchLeanOffset;                                 		// 0x02A8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     PopupOffset;                                      		// 0x02B4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SlipDist;                                         		// 0x02C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TurnDist;                                         		// 0x02C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DangerScale;                                      		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CoverSlotMarkerClassName;                         		// 0x02CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class ACoverLink*                                  NextCoverLink;                                    		// 0x02D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      LocationDescription;                              		// 0x02DC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 259 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	unsigned char GetLocationDescription ( int SlotIdx );
	struct FString eventGetDebugString ( int SlotIdx );
	int AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate, class AScout* Scout );
	bool GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverInfo* out_Info );
	void eventShutDown ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsEnabled ( );
	bool AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans );
	void OnModifyCover ( class USeqAct_ModifyCover* Action );
	void eventSetSlotPlayerOnly ( int SlotIdx, unsigned long bInPlayerOnly );
	void NotifySlotOwnerCoverDisabled ( int SlotIdx, unsigned long bAIOnly );
	void eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable );
	void eventSetDisabled ( unsigned long bNewDisabled );
	void GetSlotActions ( int SlotIdx, TArray< unsigned char >* Actions );
	bool HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks );
	bool GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, TArray< int >* out_Items );
	bool AllowLeftTransition ( int SlotIdx );
	bool AllowRightTransition ( int SlotIdx );
	int GetSlotIdxToRight ( int SlotIdx, int Cnt );
	int GetSlotIdxToLeft ( int SlotIdx, int Cnt );
	bool IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx );
	bool IsStationarySlot ( int SlotIdx );
	bool IsValidClaimBetween ( class APawn* ChkClaim, int StartSlotIdx, int EndSlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	bool IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	bool eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool eventClaim ( class APawn* NewClaim, int SlotIdx );
	void eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid );
	bool IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale );
	struct FVector GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action );
	struct FRotator GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset );
	struct FVector GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset );
	void UnPackFireLinkInteractionInfo ( unsigned char PackedByte, unsigned char* SrcType, unsigned char* SrcAction, unsigned char* DestType, unsigned char* DestAction );
	unsigned char PackFireLinkInteractionInfo ( unsigned char SrcType, unsigned char SrcAction, unsigned char DestType, unsigned char DestAction );
	bool GetFireLinkTargetCoverInfo ( int SlotIdx, int FireLinkIdx, unsigned char ArrayID, struct FCoverInfo* out_Info );
};

UClass* ACoverLink::pClassPointer = NULL;

// Class Engine.DoorMarker
// 0x0010 (0x0254 - 0x0244)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                           		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DoorType;                                         		// 0x0248 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      DoorTrigger;                                      		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x0250 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x0250 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x0250 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoorOpen : 1;                                    		// 0x0250 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x0250 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 261 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void MoverClosed ( );
	void MoverOpened ( );
	void eventPostBeginPlay ( );
};

UClass* ADoorMarker::pClassPointer = NULL;

// Class Engine.DynamicAnchor
// 0x0004 (0x0248 - 0x0244)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                      		// 0x0244 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 263 ];

		return pClassPointer;
	};

};

UClass* ADynamicAnchor::pClassPointer = NULL;

// Class Engine.Ladder
// 0x0008 (0x024C - 0x0244)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                         		// 0x0244 (0x0004) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x0248 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 265 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
};

UClass* ALadder::pClassPointer = NULL;

// Class Engine.AutoLadder
// 0x0000 (0x024C - 0x024C)
class AAutoLadder : public ALadder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 267 ];

		return pClassPointer;
	};

};

UClass* AAutoLadder::pClassPointer = NULL;

// Class Engine.LiftCenter
// 0x0020 (0x0264 - 0x0244)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                           		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              MaxDist2D;                                        		// 0x0248 (0x0004) [0x0000000000000000]              
	struct FVector                                     LiftOffset;                                       		// 0x024C (0x000C) [0x0000000000000000]              
	unsigned long                                      bJumpLift : 1;                                    		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CollisionHeight;                                  		// 0x025C (0x0004) [0x0000000000000000]              
	class ATrigger*                                    LiftTrigger;                                      		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 269 ];

		return pClassPointer;
	};

	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostBeginPlay ( );
};

UClass* ALiftCenter::pClassPointer = NULL;

// Class Engine.LiftExit
// 0x0008 (0x024C - 0x0244)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                     		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExitOnly : 1;                                    		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 271 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	void WaitForLift ( class APawn* Other );
	bool CanBeReachedFromLiftBy ( class APawn* Other );
};

UClass* ALiftExit::pClassPointer = NULL;

// Class Engine.PathNode
// 0x0000 (0x0244 - 0x0244)
class APathNode : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 273 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
};

UClass* APathNode::pClassPointer = NULL;

// Class Engine.VolumePathNode
// 0x0008 (0x024C - 0x0244)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartingHeight;                                   		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 275 ];

		return pClassPointer;
	};

};

UClass* AVolumePathNode::pClassPointer = NULL;

// Class Engine.PickupFactory
// 0x001C (0x0260 - 0x0244)
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                         		// 0x0244 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPickupHidden : 1;                                		// 0x0244 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPredictRespawns : 1;                             		// 0x0244 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsSuperItem : 1;                                 		// 0x0244 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRespawnPaused : 1;                               		// 0x0244 (0x0004) [0x0000000000000000] [0x00000010] 
	class UClass*                                      InventoryType;                                    		// 0x0248 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RespawnEffectTime;                                		// 0x024C (0x0004) [0x0000000000000000]              
	float                                              MaxDesireability;                                 		// 0x0250 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PickupMesh;                                       		// 0x0254 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APickupFactory*                              ReplacementFactory;                               		// 0x0258 (0x0004) [0x0000000000000000]              
	class APickupFactory*                              OriginalFactory;                                  		// 0x025C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 277 ];

		return pClassPointer;
	};

	bool DelayRespawn ( );
	void eventDestroyed ( );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	void RespawnEffect ( );
	float GetRespawnTime ( );
	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	bool ReadyToPickup ( float MaxWait );
	void SpawnCopyFor ( class APawn* Recipient );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	void StartSleeping ( );
	void SetRespawn ( );
	bool CheckForErrors ( );
	void Reset ( );
	void SetPickupMesh ( );
	void ShutDown ( );
	void eventSetInitialState ( );
	void InitializePickup ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* APickupFactory::pClassPointer = NULL;

// Class Engine.PlayerStart
// 0x0010 (0x0254 - 0x0244)
class APlayerStart : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPrimaryStart : 1;                                		// 0x0244 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBestStart : 1;                                   		// 0x0244 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                TeamIndex;                                        		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Score;                                            		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                SelectionIndex;                                   		// 0x0250 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 279 ];

		return pClassPointer;
	};

	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* APlayerStart::pClassPointer = NULL;

// Class Engine.PortalMarker
// 0x0004 (0x0248 - 0x0244)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                         		// 0x0244 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 281 ];

		return pClassPointer;
	};

	bool CanTeleport ( class AActor* A );
};

UClass* APortalMarker::pClassPointer = NULL;

// Class Engine.Pylon
// 0x00B0 (0x02F4 - 0x0244)
class APylon : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;            		// 0x0244 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    NavMeshPtr;                                       		// 0x0248 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ObstacleMesh;                                     		// 0x024C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DynamicObstacleMesh;                              		// 0x0250 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    WorkingSetPtr;                                    		// 0x0254 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PathObjectsThatAffectThisPylon;                   		// 0x0258 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           NextPassSeedList;                                 		// 0x025C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FOctreeElementId                            OctreeId;                                         		// 0x0268 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    OctreeIWasAddedTo;                                		// 0x0270 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class APylon*                                      NextPylon;                                        		// 0x0274 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class AVolume* >                           ExpansionVolumes;                                 		// 0x0278 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ExpansionRadius;                                  		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxExpansionRadius;                               		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FNavMeshPathSize >                  PathSizes;                                        		// 0x028C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UDrawPylonRadiusComponent*                   PylonRadiusPreview;                               		// 0x0298 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bImportedMesh : 1;                                		// 0x029C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExpansionSphereOverride : 1;                  		// 0x029C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedsCostCheck : 1;                              		// 0x029C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDrawEdgePolys : 1;                               		// 0x029C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDrawPolyBounds : 1;                              		// 0x029C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRenderInShowPaths : 1;                           		// 0x029C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDrawWalkableSurface : 1;                         		// 0x029C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDrawObstacleSurface : 1;                         		// 0x029C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUseGBXValues : 1;                                		// 0x029C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseGBXExpansion : 1;                             		// 0x029C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bExpansionDoSimplification : 1;                   		// 0x029C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bExpansionDoThreeToTwoMerge : 1;                  		// 0x029C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bExpansionDoPolyMerge : 1;                        		// 0x029C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bExpansionDoPolyConcaveMerge : 1;                 		// 0x029C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bExpansionDoSquareMerge : 1;                      		// 0x029C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bExpansionDoSaveFixup : 1;                        		// 0x029C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bExpansionCullPolys : 1;                          		// 0x029C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bExpansionBuildObstacleMesh : 1;                  		// 0x029C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bExpansionCreateEdgeConnections : 1;              		// 0x029C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bExpansionDoSubdivisionMerging : 1;               		// 0x029C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bExpansionDoObstacleMeshSimplification : 1;       		// 0x029C (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bExpansionDoEdgeSmoothing : 1;                    		// 0x029C (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bExpansionDoRawGridOnly : 1;                      		// 0x029C (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bExpansionDoConcaveSlabsOnly : 1;                 		// 0x029C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bExpansionDoEdgeSimplificationEvenInConcaveSlabMode : 1;		// 0x029C (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bExpansionDrawDropDownPolys : 1;                  		// 0x029C (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bExpansionDrawPolyParents : 1;                    		// 0x029C (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bExpansionDisableSubdivisionHeightSnapping : 1;   		// 0x029C (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bExpansionDisableVertMaxHeightSlopeMax : 1;       		// 0x029C (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bBuildThisPylon : 1;                              		// 0x029C (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x029C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bForceObstacleMeshCollision : 1;                  		// 0x029C (0x0004) [0x0000000000000000] [0x80000000] 
	struct FVector                                     ExpansionSphereCenter;                            		// 0x02A0 (0x000C) [0x0000000000000000]              
	class UNavMeshRenderingComponent*                  RenderingComp;                                    		// 0x02AC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            BrokenSprite;                                     		// 0x02B0 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class APylon* >                            ImposterPylons;                                   		// 0x02B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            OnBuild_DisableCollisionForThese;                 		// 0x02C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            OnBuild_EnableCollisionForThese;                  		// 0x02CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaxPolyHeight_Optional;                           		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DebugEdgeCount;                                   		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IconScale;                                        		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GBX_PolySize;                                     		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeCheckHeight;                                  		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PolyMergeThreshold;                               		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APylon*                                      OuterPylon;                                       		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 283 ];

		return pClassPointer;
	};

	bool CanReachPylon ( class APylon* DestPylon, class AController* C );
	void OnToggle ( class USeqAct_Toggle* Action );
	bool eventIsEnabled ( );
	void eventSetEnabled ( unsigned long bEnabled );
	void PostBeginPlay ( );
	void OnPylonStatusChange ( );
};

UClass* APylon::pClassPointer = NULL;

// Class Engine.AISwitchablePylon
// 0x0004 (0x02F8 - 0x02F4)
class AAISwitchablePylon : public APylon
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 285 ];

		return pClassPointer;
	};

	bool eventIsEnabled ( );
	void eventSetEnabled ( unsigned long bEnabled );
	void PostBeginPlay ( );
};

UClass* AAISwitchablePylon::pClassPointer = NULL;

// Class Engine.DynamicPylon
// 0x0004 (0x02F8 - 0x02F4)
class ADynamicPylon : public APylon
{
public:
	unsigned long                                      bMoving : 1;                                      		// 0x02F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 287 ];

		return pClassPointer;
	};

	void eventStoppedMoving ( );
	void eventStartedMoving ( );
	void FlushDynamicEdges ( );
	void RebuildDynamicEdges ( );
	void PostBeginPlay ( );
};

UClass* ADynamicPylon::pClassPointer = NULL;

// Class Engine.Teleporter
// 0x0028 (0x026C - 0x0244)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                              		// 0x0244 (0x000C) [0x0000000000400021]              ( CPF_Edit | CPF_Net | CPF_NeedCtorLink )
	struct FName                                       ProductRequired;                                  		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bChangesVelocity : 1;                             		// 0x0258 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bChangesYaw : 1;                                  		// 0x0258 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesX : 1;                                   		// 0x0258 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesY : 1;                                   		// 0x0258 (0x0004) [0x0000000000000021] [0x00000008] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesZ : 1;                                   		// 0x0258 (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      bEnabled : 1;                                     		// 0x0258 (0x0004) [0x0000000000000021] [0x00000020] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x0258 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FVector                                     TargetVelocity;                                   		// 0x025C (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LastFired;                                        		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 289 ];

		return pClassPointer;
	};

	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	void eventPostBeginPlay ( );
	bool CanTeleport ( class AActor* A );
};

UClass* ATeleporter::pClassPointer = NULL;

// Class Engine.Note
// 0x0000 (0x0188 - 0x0188)
class ANote : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 291 ];

		return pClassPointer;
	};

};

UClass* ANote::pClassPointer = NULL;

// Class Engine.Projectile
// 0x006C (0x01F4 - 0x0188)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                            		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSwitchToZeroCollision : 1;                       		// 0x0190 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBlockedByInstigator : 1;                         		// 0x0190 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0190 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x0190 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIgnoreFoliageTouch : 1;                          		// 0x0190 (0x0004) [0x0000000000000000] [0x00000010] 
	class AActor*                                      ZeroCollider;                                     		// 0x0194 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         ZeroColliderComponent;                            		// 0x0198 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Damage;                                           		// 0x019C (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              DamageBaseValue;                                  		// 0x01A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                DamageModifierStack;                              		// 0x01A4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              DamageRadius;                                     		// 0x01B0 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              DamageRadiusBaseValue;                            		// 0x01B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                DamageRadiusModifierStack;                        		// 0x01B8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              MomentumTransfer;                                 		// 0x01C4 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              MomentumTransferBaseValue;                        		// 0x01C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MomentumTransferModifierStack;                    		// 0x01CC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      MyDamageType;                                     		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SpawnSound;                                       		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 InstigatorController;                             		// 0x01E4 (0x0004) [0x0000000000000000]              
	class AActor*                                      ImpactedActor;                                    		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              NetCullDistanceSquared;                           		// 0x01EC (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x01F0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 293 ];

		return pClassPointer;
	};

	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	float GetRange ( );
	float StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy );
	float GetTimeToLocation ( struct FVector TargetLoc );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void RandSpin ( float spinRate );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventEncroachedBy ( class AActor* Other );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ProcessTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, unsigned long bSkipTraceTest, TArray< class AActor* >* ActorsHurt );
	bool ProjectileHurtRadius ( struct FVector HurtOrigin, struct FVector HitNormal );
	void Reset ( );
	bool CanSplash ( );
	unsigned char GetTeamNum ( );
	void Init ( struct FVector Direction );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	bool eventEncroachingOn ( class AActor* Other );
};

UClass* AProjectile::pClassPointer = NULL;

// Class Engine.RigidBodyBase
// 0x0000 (0x0188 - 0x0188)
class ARigidBodyBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 295 ];

		return pClassPointer;
	};

};

UClass* ARigidBodyBase::pClassPointer = NULL;

// Class Engine.SceneCaptureActor
// 0x0004 (0x018C - 0x0188)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                     		// 0x0188 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 297 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ASceneCaptureActor::pClassPointer = NULL;

// Class Engine.SceneCapture2DActor
// 0x0004 (0x0190 - 0x018C)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x018C (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 299 ];

		return pClassPointer;
	};

};

UClass* ASceneCapture2DActor::pClassPointer = NULL;

// Class Engine.SceneCaptureCubeMapActor
// 0x0008 (0x0194 - 0x018C)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x018C (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                 		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 301 ];

		return pClassPointer;
	};

};

UClass* ASceneCaptureCubeMapActor::pClassPointer = NULL;

// Class Engine.SceneCaptureReflectActor
// 0x0008 (0x0194 - 0x018C)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x018C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                              		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 303 ];

		return pClassPointer;
	};

};

UClass* ASceneCaptureReflectActor::pClassPointer = NULL;

// Class Engine.SceneCapturePortalActor
// 0x0000 (0x0194 - 0x0194)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 305 ];

		return pClassPointer;
	};

};

UClass* ASceneCapturePortalActor::pClassPointer = NULL;

// Class Engine.PortalTeleporter
// 0x0014 (0x01A8 - 0x0194)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                     		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionX;                               		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionY;                               		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APortalMarker*                               MyMarker;                                         		// 0x01A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMovablePortal : 1;                               		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                      		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 307 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	class UTextureRenderTarget2D* CreatePortalTexture ( );
	struct FVector TransformHitLocation ( struct FVector HitLocation );
	struct FVector TransformVectorDir ( struct FVector V );
	bool TransformActor ( class AActor* A );
};

UClass* APortalTeleporter::pClassPointer = NULL;

// Class Engine.StaticMeshActorBase
// 0x0000 (0x0188 - 0x0188)
class AStaticMeshActorBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 309 ];

		return pClassPointer;
	};

};

UClass* AStaticMeshActorBase::pClassPointer = NULL;

// Class Engine.BlockingMeshCollectionActor
// 0x0010 (0x0198 - 0x0188)
class ABlockingMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray< class UBlockingMeshComponent* >            BlockingMeshComponents;                           		// 0x0188 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxBlockingMeshComponents;                        		// 0x0194 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 311 ];

		return pClassPointer;
	};

};

UClass* ABlockingMeshCollectionActor::pClassPointer = NULL;

// Class Engine.StaticMeshActor
// 0x0008 (0x0190 - 0x0188)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDisableAutoBaseOnProcBuilding : 1;               		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 313 ];

		return pClassPointer;
	};

};

UClass* AStaticMeshActor::pClassPointer = NULL;

// Class Engine.StaticMeshCollectionActor
// 0x0010 (0x0198 - 0x0188)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray< class UStaticMeshComponent* >              StaticMeshComponents;                             		// 0x0188 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxStaticMeshComponents;                          		// 0x0194 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 315 ];

		return pClassPointer;
	};

};

UClass* AStaticMeshCollectionActor::pClassPointer = NULL;

// Class Engine.StaticMeshActorBasedOnExtremeContent
// 0x001C (0x01A4 - 0x0188)
class AStaticMeshActorBasedOnExtremeContent : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	TArray< struct FSMMaterialSetterDatum >            ExtremeContent;                                   		// 0x018C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSMMaterialSetterDatum >            NonExtremeContent;                                		// 0x0198 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 317 ];

		return pClassPointer;
	};

	void SetMaterialBasedOnExtremeContent ( );
	void eventPostBeginPlay ( );
};

UClass* AStaticMeshActorBasedOnExtremeContent::pClassPointer = NULL;

// Class Engine.TeleporterDestination
// 0x0014 (0x019C - 0x0188)
class ATeleporterDestination : public AActor
{
public:
	TArray< class AActor* >                            ExitPoints;                                       		// 0x0188 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                ExitPointsCounter;                                		// 0x0194 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsEnabled : 1;                                    		// 0x0198 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Resurrect : 1;                                    		// 0x0198 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 319 ];

		return pClassPointer;
	};

	class AActor* GetNextExitPoint ( class AActor* TeleportActor );
	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ATeleporterDestination::pClassPointer = NULL;

// Class Engine.Trigger
// 0x000C (0x0194 - 0x0188)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bRecentlyTriggered : 1;                           		// 0x018C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              AITriggerDelay;                                   		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 321 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	bool StopsProjectile ( class AProjectile* P );
	void UnTrigger ( );
	void NotifyTriggered ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPostBeginPlay ( );
	void TriggerDetachSprites ( );
};

UClass* ATrigger::pClassPointer = NULL;

// Class Engine.Trigger_PawnsOnly
// 0x0000 (0x0194 - 0x0194)
class ATrigger_PawnsOnly : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 323 ];

		return pClassPointer;
	};

};

UClass* ATrigger_PawnsOnly::pClassPointer = NULL;

// Class Engine.ActorComponent
// 0x0011 (0x0059 - 0x0048)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    VfTable_IIWorldBody;                              		// 0x0048 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    Scene;                                            		// 0x004C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class AActor*                                      Owner;                                            		// 0x0050 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAttached : 1;                                    		// 0x0054 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bSkipChildComponentUpdate : 1;                    		// 0x0054 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTickInEditor : 1;                                		// 0x0054 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bTickInGame : 1;                                  		// 0x0054 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bTickInStatusMenu : 1;                            		// 0x0054 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bNeedsReattach : 1;                               		// 0x0054 (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNeedsUpdateTransform : 1;                        		// 0x0054 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x0058 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 325 ];

		return pClassPointer;
	};

	void Behavior_Destroy ( );
	bool WorldBodyAttachComponent ( class UActorComponent* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachActor ( class AActor* Attachment, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	bool WorldBodyAttachTo ( class UIWorldBody* OtherWorldBody, struct FVector AttachmentRelativeLocation, struct FRotator AttachmentRelativeRotation, struct FName AttachmentPointName );
	class UIWorldBody* GetWorldBodyAttachmentBase ( );
	struct FName GetWorldBodyAttachmentBoneForComponent ( class UActorComponent* AttachedComponent );
	bool GetWorldBodyAttachmentLocationAndRotation ( struct FName AttachmentPointName, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentRotation ( struct FName AttachmentPointName, struct FRotator* OutRotation );
	bool GetWorldBodyAttachmentLocation ( struct FName AttachmentPointName, struct FVector* OutLocation );
	struct FVector GetWorldBodyVelocity ( );
	struct FRotator GetWorldBodyRotation ( );
	struct FVector GetWorldBodyLocation ( );
	bool IsPlayerOwnedBy ( class AActor* PotentialPlayerOwner );
	void SetPlayerOwner ( class AActor* NewPlayerOwner );
	void DetachFromAny ( );
	void ForceUpdate ( unsigned long bTransformOnly );
	void SetComponentRBFixed ( unsigned long bFixed );
	void SetTickGroup ( unsigned char NewTickGroup );
};

UClass* UActorComponent::pClassPointer = NULL;

// Class Engine.AkComponent
// 0x0193 (0x01EC - 0x0059)
class UAkComponent : public UActorComponent
{
public:
	struct FName                                       SocketName;                                       		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseCustomTransform : 1;                          		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCustomTransformChanged : 1;                      		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShouldAllSourcesActAsOneSound : 1;               		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceRecalcEnvironmentAndOcclusion : 1;          		// 0x0064 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bReturnToPoolWhenFinishedPlaying : 1;             		// 0x0064 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNeverReturnToPoolAutomatically : 1;              		// 0x0064 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCanBeOccluded : 1;                               		// 0x0064 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bPersistAcrossWorldChanges : 1;                   		// 0x0064 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsReattaching : 1;                               		// 0x0064 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRegistered : 1;                                  		// 0x0064 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	TArray< struct FVector >                           CustomLocations;                                  		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRotator >                          CustomRotations;                                  		// 0x0074 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LastEnvironmentalAndOcclusionUpdateTime;          		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              LastSubtitleUpdateTime;                           		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FPointer                                    HeadPlayingInfoPtr;                               		// 0x0088 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    TailPlayingInfoPtr;                               		// 0x008C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPendingFaceFXInfo                          PendingFaceFX;                                    		// 0x0090 (0x001C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPendingSubtitleInfo                        PendingSubtitle;                                  		// 0x00AC (0x001C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPointer >                          SubtitlesPendingKill;                             		// 0x00C8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentObstructionLevels[ 0x8 ];                  		// 0x00D4 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetObstructionLevels[ 0x8 ];                   		// 0x00F4 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentOcclusionLevels[ 0x8 ];                    		// 0x0114 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetOcclusionLevels[ 0x8 ];                     		// 0x0134 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	class UISpecialOcclusionProvider*                  SpecialOcclusionProvider;                         		// 0x0154 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0158 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FMap_Mirror                                 KnownRTPCs;                                       		// 0x015C (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 KnownSwitches;                                    		// 0x0198 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FScriptDelegate                             __OnAkEventCompleted__Delegate;                   		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateComponentPosition__Delegate;              		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 327 ];

		return pClassPointer;
	};

	float GetMaxAttenuationRadius ( );
	bool IsPlayingId ( int InPlayingId );
	bool IsPlayingEvent ( class UAkEvent* AkEvent );
	void UpdateComponentPosition ( TArray< struct FVector >* ListenerPositions, TArray< struct FRotator >* ListenerOrientations );
	void OnAkEventCompleted ( class UAkComponent* Source, class UAkEvent* Event, int EventInstanceId );
};

UClass* UAkComponent::pClassPointer = NULL;

// Class Engine.AudioComponent
// 0x01C3 (0x021C - 0x0059)
class UAudioComponent : public UActorComponent
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  CueFirstNode;                                     		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FAudioComponentParam >              InstanceParameters;                               		// 0x0064 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bUseOwnerLocation : 1;                            		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoPlay : 1;                                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAutoDestroy : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                      		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasOccluded : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0070 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWasPlaying : 1;                                  		// 0x0070 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bAllowSpatialization : 1;                         		// 0x0070 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFinished : 1;                                    		// 0x0070 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bApplyRadioFilter : 1;                            		// 0x0070 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bRadioFilterSelected : 1;                         		// 0x0070 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bPreviewComponent : 1;                            		// 0x0070 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bIgnoreForFlushing : 1;                           		// 0x0070 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	float                                              StereoBleed;                                      		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LFEBleed;                                         		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEQFilterApplied : 1;                             		// 0x007C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x007C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsUISound : 1;                                   		// 0x007C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsMusic : 1;                                     		// 0x007C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bReverb : 1;                                      		// 0x007C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bCenterChannelOnly : 1;                           		// 0x007C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsDialog : 1;                                    		// 0x007C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsAmbience : 1;                                  		// 0x007C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	TArray< struct FPointer >                          WaveInstances;                                    		// 0x0080 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            SoundNodeData;                                    		// 0x008C (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0098 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                            		// 0x00D4 (0x003C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Listener;                                         		// 0x0110 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	float                                              PlaybackTime;                                     		// 0x0114 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	class APortalVolume*                               PortalVolume;                                     		// 0x0118 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FVector                                     Location;                                         		// 0x011C (0x000C) [0x0000000000201000]              ( CPF_Native )
	struct FVector                                     ComponentLocation;                                		// 0x0128 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	class AActor*                                      LastOwner;                                        		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              SubtitlePriority;                                 		// 0x0138 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              FadeInStartTime;                                  		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              FadeInStopTime;                                   		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              FadeInTargetVolume;                               		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              FadeOutStartTime;                                 		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              FadeOutStopTime;                                  		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              FadeOutTargetVolume;                              		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStartTime;                            		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStopTime;                             		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeTargetVolume;                         		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              CurrAdjustVolumeTargetVolume;                     		// 0x0160 (0x0004) [0x0000000000000000]              
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                  		// 0x0164 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     CurrentLocation;                                  		// 0x0168 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolume;                                    		// 0x0174 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitch;                                     		// 0x0178 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGain;                         		// 0x017C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSpatialization;                         		// 0x0180 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentNotifyOnLoop;                              		// 0x0184 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolumeMultiplier;                          		// 0x0188 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitchMultiplier;                           		// 0x018C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGainMultiplier;               		// 0x0190 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceCenterChannelVolume;                  		// 0x0194 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentRadioFilterVolume;                         		// 0x0198 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentRadioFilterVolumeThreshold;                		// 0x019C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     LastUpdateTime;                                   		// 0x01A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              SourceInteriorVolume;                             		// 0x01A8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              SourceInteriorLPF;                                		// 0x01AC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentInteriorVolume;                            		// 0x01B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentInteriorLPF;                               		// 0x01B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     LastLocation;                                     		// 0x01B8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FInteriorSettings                           LastInteriorSettings;                             		// 0x01C4 (0x0024) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                LastReverbVolumeIndex;                            		// 0x01E8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              VolumeMultiplier;                                 		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighFrequencyGainMultiplier;                      		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionCheckInterval;                           		// 0x01F8 (0x0004) [0x0000000000000000]              
	float                                              LastOcclusionCheckTime;                           		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                               		// 0x0200 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                      		// 0x0204 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueueSubtitles__Delegate;                     		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 329 ];

		return pClassPointer;
	};

	void eventOcclusionChanged ( unsigned long bNowOccluded );
	void OnQueueSubtitles ( TArray< struct FSubtitleCue > Subtitles, float CueDuration );
	void OnAudioFinished ( class UAudioComponent* AC );
	void ResetToDefaults ( );
	void SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave );
	void SetFloatParameter ( struct FName InName, float InFloat );
	void AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel );
	void FadeOut ( float FadeOutDuration, float FadeVolumeLevel );
	void FadeIn ( float FadeInDuration, float FadeVolumeLevel );
	bool IsFadingOut ( );
	bool IsFadingIn ( );
	bool IsPlaying ( );
	void Stop ( );
	void Play ( );
};

UClass* UAudioComponent::pClassPointer = NULL;

// Class Engine.HeightFogComponent
// 0x001F (0x0078 - 0x0059)
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              Height;                                           		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Density;                                          		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightBrightness;                                  		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ExtinctionDistance;                               		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartDistance;                                    		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 331 ];

		return pClassPointer;
	};

	void UpdateDensity ( float NewDensity );
	void SetEnabled ( unsigned long bSetEnabled );
};

UClass* UHeightFogComponent::pClassPointer = NULL;

// Class Engine.PrimitiveComponent
// 0x01B7 (0x0210 - 0x0059)
class UPrimitiveComponent : public UActorComponent
{
public:
	int                                                Tag;                                              		// 0x005C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FBoxSphereBounds                            Bounds;                                           		// 0x0060 (0x001C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    SceneInfo;                                        		// 0x007C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                DetachFence;                                      		// 0x0080 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              _LocalToWorldDeterminant;                         		// 0x0084 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0088 (0x0008) MISSED OFFSET
	struct FMatrix                                     _LocalToWorld;                                    		// 0x0090 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     _WorldToLocal;                                    		// 0x00D0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     _LocalToWorldScale;                               		// 0x0110 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                MotionBlurInfoIndex;                              		// 0x011C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          DecalList;                                        		// 0x0120 (0x000C) [0x0000000001001002]              ( CPF_Const | CPF_Native )
	TArray< class UDecalComponent* >                   DecalsToReattach;                                 		// 0x012C (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                               		// 0x0138 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ULightComponent*                             OverrideLightComponent;                           		// 0x013C (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0140 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  PreviousLightEnvironment;                         		// 0x0144 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              MinDrawDistance;                                  		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDrawDistance;                                  		// 0x014C (0x0004) [0x0000000000800003]              ( CPF_Edit | CPF_Const | CPF_NoExport )
	float                                              CachedMaxDrawDistance;                            		// 0x0150 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              MotionBlurInstanceScale;                          		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DepthPriorityGroup;                               		// 0x0158 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DetailMode;                                       		// 0x0159 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x015A (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DynamicShadowCastRelevance;                       		// 0x015B (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBDominanceGroup;                                 		// 0x015C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviewEnvironmentShadowing;                      		// 0x015D (0x0001) [0x0000000000000000]              
	unsigned char                                      ScriptRigidBodyCollisionThresholdCompiled;        		// 0x015E (0x0001) [0x0000000000000000]              
	unsigned char                                      TranslucencySortPriority;                         		// 0x015F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowCullDistanceVolume : 1;                     		// 0x0160 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowShadowRelevanceVolume : 1;                  		// 0x0160 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x0160 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0160 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x0160 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0160 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyPlayerOwnerSee : 1;                          		// 0x0160 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlayerOwnerNoSee : 1;                            		// 0x0160 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreOwnerHidden : 1;                           		// 0x0160 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseAsOccluder : 1;                               		// 0x0160 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bAllowApproximateOcclusion : 1;                   		// 0x0160 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bFirstFrameOcclusion : 1;                         		// 0x0160 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIgnoreNearPlaneIntersection : 1;                 		// 0x0160 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bSelectable : 1;                                  		// 0x0160 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bForceMipStreaming : 1;                           		// 0x0160 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsStaticDecals : 1;                         		// 0x0160 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicDecals : 1;                        		// 0x0160 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowDecalAutomaticReAttach : 1;                 		// 0x0160 (0x0004) [0x0000000000003000] [0x00020000] ( CPF_Native | CPF_Transient )
	unsigned long                                      bAcceptsFoliage : 1;                              		// 0x0160 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInWorldForeground : 1;                           		// 0x0160 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      CastShadow : 1;                                   		// 0x0160 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0160 (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0160 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bCastStaticShadow : 1;                            		// 0x0160 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bCastOccludedShadow : 1;                          		// 0x0160 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bSelfShadowOnly : 1;                              		// 0x0160 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bCastHiddenShadow : 1;                            		// 0x0160 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bCastShadowAsTwoSided : 1;                        		// 0x0160 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0160 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0160 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsSkyLight : 1;                             		// 0x0160 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOnePassLightingOnTranslucency : 1;            		// 0x0160 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsePrecomputedShadows : 1;                       		// 0x0164 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInstancedStaticRB : 1;                           		// 0x0164 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      CollideActors : 1;                                		// 0x0164 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysCheckCollision : 1;                         		// 0x0164 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x0164 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x0164 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x0164 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      CanBlockCamera : 1;                               		// 0x0164 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0164 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockFootPlacement : 1;                          		// 0x0164 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      BulletListener : 1;                               		// 0x0164 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableAllRigidBody : 1;                         		// 0x0164 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipRBGeomCreation : 1;                          		// 0x0164 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x0164 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidDrain : 1;                                  		// 0x0164 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidTwoWay : 1;                                 		// 0x0164 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreRadialImpulse : 1;                         		// 0x0164 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bIgnoreRadialForce : 1;                           		// 0x0164 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bIgnoreForceField : 1;                            		// 0x0164 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x0164 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysLoadOnClient : 1;                           		// 0x0164 (0x0004) [0x0000000000000002] [0x00100000] ( CPF_Const )
	unsigned long                                      AlwaysLoadOnServer : 1;                           		// 0x0164 (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bPrimitiveRequiresOcclusionQuery : 1;             		// 0x0164 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                		// 0x0164 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x0164 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteRotation : 1;                             		// 0x0164 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteScale : 1;                                		// 0x0164 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOrthonormalizedLighting : 1;                  		// 0x0164 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bBoundToGFxMovie : 1;                             		// 0x0164 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bWasSNFiltered : 1;                               		// 0x0164 (0x0004) [0x0000000000003002] [0x20000000] ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      OctreeNodes;                                      		// 0x0168 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                VisibilityId;                                     		// 0x0174 (0x0004) [0x0000000000200000]              
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0178 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                            		// 0x017C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x0180 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x0184 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0188 (0x0008) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x0190 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     CachedParentToWorldScale;                         		// 0x01D0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Translation;                                      		// 0x01DC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x01E8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Scale;                                            		// 0x01F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale3D;                                          		// 0x01F8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoundsScale;                                      		// 0x0204 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastSubmitTime;                                   		// 0x0208 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 333 ];

		return pClassPointer;
	};

	void Behavior_ChangeCollisionSize ( float NewRadius, float NewHeight );
	void Behavior_ChangeCollision ( unsigned char NewCollisionType );
	void TickInstanceDataAttachment ( );
	void Behavior_ChangeScale ( float InScale );
	void Behavior_ChangeVisibility ( unsigned long bVisible );
	void Behavior_ToggleVisibility ( );
	unsigned char ClosestPointOnComponentToComponent ( class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB );
	unsigned char ClosestPointOnComponentToPoint ( struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB );
	struct FRotator GetRotation ( );
	struct FVector GetPosition ( );
	void SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale );
	void SetScale3D ( struct FVector NewScale3D );
	void SetScale ( float NewScale );
	void SetRotation ( struct FRotator NewRotation );
	void SetTranslation ( struct FVector NewTranslation );
	void SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision );
	void SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent );
	void SetInWorldForeground ( unsigned long NewInWorldForegroundState );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels );
	void SetCullDistance ( float NewCullDistance );
	void SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment );
	void SetShadowParent ( class UPrimitiveComponent* NewShadowParent );
	void SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden );
	void SetPlayerOwnerNoSee ( unsigned long bNewPlayerOwnerNoSee );
	void SetOnlyPlayerOwnerSee ( unsigned long bNewOnlyPlayerOwnerSee );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetOwnerNoSee ( unsigned long bNewOwnerNoSee );
	void SetHidden ( unsigned long NewHidden );
	bool ShouldComponentAddToScene ( );
	void SetRBDominanceGroup ( unsigned char InDomGroup );
	class URB_BodyInstance* GetRootBodyInstance ( );
	class UPhysicalMaterial* GetPhysicalMaterial ( unsigned long bSearchArrays );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void InitRBPhys ( );
	void SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision );
	void SetRBChannel ( unsigned char Channel );
	void SetRBCollisionChannels ( struct FRBCollisionChannelContainer Channels );
	void SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	bool RigidBodyIsAwake ( struct FName BoneName );
	void PutRigidBodyToSleep ( struct FName BoneName );
	void WakeRigidBody ( struct FName BoneName );
	void SetRBRotation ( struct FRotator NewRot, struct FName BoneName );
	void SetRBPosition ( struct FVector NewPos, struct FName BoneName );
	void RetardRBLinearVelocity ( struct FVector RetardDir, float VelScale );
	void SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent );
	void SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent );
	void AddTorque ( struct FVector Torque, struct FName BoneName );
	void AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff );
	void AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName );
	void AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange );
	void AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange );
};

UClass* UPrimitiveComponent::pClassPointer = NULL;

// Class Engine.ArrowComponent
// 0x000C (0x021C - 0x0210)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                       		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArrowSize;                                        		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTreatAsASprite : 1;                              		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsDebugBeacon : 1;                               		// 0x0218 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 335 ];

		return pClassPointer;
	};

};

UClass* UArrowComponent::pClassPointer = NULL;

// Class Engine.BrushComponent
// 0x0054 (0x0264 - 0x0210)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                            		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FKAggregateGeom                             BrushAggGeom;                                     		// 0x0214 (0x0038) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    BrushPhysDesc;                                    		// 0x024C (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                              		// 0x0250 (0x000C) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                CachedPhysBrushDataVersion;                       		// 0x025C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bBlockComplexCollisionTrace : 1;                  		// 0x0260 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 337 ];

		return pClassPointer;
	};

};

UClass* UBrushComponent::pClassPointer = NULL;

// Class Engine.CameraConeComponent
// 0x0000 (0x0210 - 0x0210)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 339 ];

		return pClassPointer;
	};

};

UClass* UCameraConeComponent::pClassPointer = NULL;

// Class Engine.CylinderComponent
// 0x000C (0x021C - 0x0210)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                  		// 0x0210 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              CollisionRadius;                                  		// 0x0214 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	unsigned long                                      bDrawBoundingBox : 1;                             		// 0x0218 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bDrawNonColliding : 1;                            		// 0x0218 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAlwaysRenderIfSelected : 1;                      		// 0x0218 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 341 ];

		return pClassPointer;
	};

	void SetCylinderSize ( float NewRadius, float NewHeight );
};

UClass* UCylinderComponent::pClassPointer = NULL;

// Class Engine.SphereComponent
// 0x0000 (0x021C - 0x021C)
class USphereComponent : public UCylinderComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 343 ];

		return pClassPointer;
	};

	void SetSphereSize ( float NewRadius );
};

UClass* USphereComponent::pClassPointer = NULL;

// Class Engine.DrawBoxComponent
// 0x0018 (0x0228 - 0x0210)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                         		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   BoxMaterial;                                      		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxExtent;                                        		// 0x0218 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireBox : 1;                                 		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitBox : 1;                                  		// 0x0224 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x0224 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 345 ];

		return pClassPointer;
	};

};

UClass* UDrawBoxComponent::pClassPointer = NULL;

// Class Engine.DrawCapsuleComponent
// 0x0014 (0x0224 - 0x0210)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                     		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CapsuleMaterial;                                  		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleHeight;                                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCapsule : 1;                             		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCapsule : 1;                              		// 0x0220 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x0220 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 347 ];

		return pClassPointer;
	};

};

UClass* UDrawCapsuleComponent::pClassPointer = NULL;

// Class Engine.DrawConeComponent
// 0x0010 (0x0220 - 0x0210)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                        		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeAngle;                                        		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConeSides;                                        		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 349 ];

		return pClassPointer;
	};

};

UClass* UDrawConeComponent::pClassPointer = NULL;

// Class Engine.DrawCylinderComponent
// 0x0020 (0x0230 - 0x0210)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CylinderMaterial;                                 		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderRadius;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderTopRadius;                                		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeight;                                   		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeightOffset;                             		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CylinderSides;                                    		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCylinder : 1;                            		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCylinder : 1;                             		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x022C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 351 ];

		return pClassPointer;
	};

};

UClass* UDrawCylinderComponent::pClassPointer = NULL;

// Class Engine.DrawFrustumComponent
// 0x0018 (0x0228 - 0x0210)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                     		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAngle;                                     		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAspectRatio;                               		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumStartDist;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumEndDist;                                   		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    Texture;                                          		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 353 ];

		return pClassPointer;
	};

};

UClass* UDrawFrustumComponent::pClassPointer = NULL;

// Class Engine.DrawQuadComponent
// 0x000C (0x021C - 0x0210)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                          		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Width;                                            		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 355 ];

		return pClassPointer;
	};

};

UClass* UDrawQuadComponent::pClassPointer = NULL;

// Class Engine.DrawSphereComponent
// 0x0014 (0x0224 - 0x0210)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                      		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   SphereMaterial;                                   		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereRadius;                                     		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SphereSides;                                      		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireSphere : 1;                              		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitSphere : 1;                               		// 0x0220 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x0220 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 357 ];

		return pClassPointer;
	};

};

UClass* UDrawSphereComponent::pClassPointer = NULL;

// Class Engine.DrawPylonRadiusComponent
// 0x0000 (0x0224 - 0x0224)
class UDrawPylonRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 359 ];

		return pClassPointer;
	};

};

UClass* UDrawPylonRadiusComponent::pClassPointer = NULL;

// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x0224 - 0x0224)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 361 ];

		return pClassPointer;
	};

};

UClass* UDrawSoundRadiusComponent::pClassPointer = NULL;

// Class Engine.GBXNavMeshRenderingComponent
// 0x0014 (0x0224 - 0x0210)
class UGBXNavMeshRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bDrawPolys : 1;                                   		// 0x0210 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bDrawSplitPlanes : 1;                             		// 0x0210 (0x0004) [0x0000000000006001] [0x00000002] ( CPF_Edit | CPF_Transient | CPF_Config )
	unsigned long                                      bDrawEdgeConnections : 1;                         		// 0x0210 (0x0004) [0x0000000000006001] [0x00000004] ( CPF_Edit | CPF_Transient | CPF_Config )
	unsigned long                                      bDrawSimplificationConnections : 1;               		// 0x0210 (0x0004) [0x0000000000006001] [0x00000008] ( CPF_Edit | CPF_Transient | CPF_Config )
	unsigned long                                      bDrawSimplifiedShapes : 1;                        		// 0x0210 (0x0004) [0x0000000000006001] [0x00000010] ( CPF_Edit | CPF_Transient | CPF_Config )
	unsigned long                                      bDrawFailedSimplificationShapes : 1;              		// 0x0210 (0x0004) [0x0000000000006001] [0x00000020] ( CPF_Edit | CPF_Transient | CPF_Config )
	unsigned long                                      bDrawFailedTriangulationShapes : 1;               		// 0x0210 (0x0004) [0x0000000000006001] [0x00000040] ( CPF_Edit | CPF_Transient | CPF_Config )
	unsigned long                                      bDrawBlockedEdges : 1;                            		// 0x0210 (0x0004) [0x0000000000006001] [0x00000080] ( CPF_Edit | CPF_Transient | CPF_Config )
	TArray< int >                                      MeshSpacingHullsToDraw;                           		// 0x0214 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    NavMeshRenderingData;                             		// 0x0220 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 363 ];

		return pClassPointer;
	};

};

UClass* UGBXNavMeshRenderingComponent::pClassPointer = NULL;

// Class Engine.LevelGridVolumeRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class ULevelGridVolumeRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 365 ];

		return pClassPointer;
	};

};

UClass* ULevelGridVolumeRenderingComponent::pClassPointer = NULL;

// Class Engine.LineBatchComponent
// 0x0024 (0x0234 - 0x0210)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                   		// 0x0210 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    FPrimitiveDrawInterfaceView;                      		// 0x0214 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FPointer >                          BatchedLines;                                     		// 0x0218 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          BatchedPoints;                                    		// 0x0224 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              DefaultLifeTime;                                  		// 0x0230 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 367 ];

		return pClassPointer;
	};

};

UClass* ULineBatchComponent::pClassPointer = NULL;

// Class Engine.ModelComponent
// 0x0024 (0x0234 - 0x0210)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                            		// 0x0210 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ZoneIndex;                                        		// 0x0214 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ComponentIndex;                                   		// 0x0218 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	TArray< struct FPointer >                          Nodes;                                            		// 0x021C (0x000C) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	TArray< struct FPointer >                          Elements;                                         		// 0x0228 (0x000C) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 369 ];

		return pClassPointer;
	};

};

UClass* UModelComponent::pClassPointer = NULL;

// Class Engine.SocketComponent
// 0x0008 (0x0218 - 0x0210)
class USocketComponent : public UPrimitiveComponent
{
public:
	struct FName                                       SocketName;                                       		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 371 ];

		return pClassPointer;
	};

};

UClass* USocketComponent::pClassPointer = NULL;

// Class Engine.HomingTargetComponent
// 0x0000 (0x0218 - 0x0218)
class UHomingTargetComponent : public USocketComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 373 ];

		return pClassPointer;
	};

};

UClass* UHomingTargetComponent::pClassPointer = NULL;

// Class Engine.SpriteComponent
// 0x001C (0x022C - 0x0210)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                           		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsScreenSizeScaled : 1;                          		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScreenSize;                                       		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              U;                                                		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UL;                                               		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              V;                                                		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VL;                                               		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 375 ];

		return pClassPointer;
	};

	void SetSpriteAndUV ( class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL );
	void SetUV ( int NewU, int NewUL, int NewV, int NewVL );
	void SetSprite ( class UTexture2D* NewSprite );
};

UClass* USpriteComponent::pClassPointer = NULL;

// Class Engine.SpriteRTTComponent
// 0x0004 (0x0230 - 0x022C)
class USpriteRTTComponent : public USpriteComponent
{
public:
	class UTextureRenderTarget2D*                      SpriteRTT;                                        		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 377 ];

		return pClassPointer;
	};

};

UClass* USpriteRTTComponent::pClassPointer = NULL;

// Class Engine.RadialBlurComponent
// 0x0067 (0x00C0 - 0x0059)
class URadialBlurComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DepthPriorityGroup;                               		// 0x0060 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlurScale;                                        		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlurFalloffExponent;                              		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlurOpacity;                                      		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxCullDistance;                                  		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DistanceFalloffExponent;                          		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bRenderAsVelocity : 1;                            		// 0x0078 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x0078 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x007C (0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                     		// 0x0080 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 379 ];

		return pClassPointer;
	};

	void OnUpdatePropertyBlurOpacity ( );
	void OnUpdatePropertyBlurFalloffExponent ( );
	void OnUpdatePropertyBlurScale ( );
	void SetEnabled ( unsigned long bInEnabled );
	void SetBlurOpacity ( float InBlurOpacity );
	void SetBlurFalloffExponent ( float InBlurFalloffExponent );
	void SetBlurScale ( float InBlurScale );
	void SetMaterial ( class UMaterialInterface* InMaterial );
};

UClass* URadialBlurComponent::pClassPointer = NULL;

// Class Engine.SceneCaptureComponent
// 0x003B (0x0094 - 0x0059)
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableFog : 1;                                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseMainScenePostProcessSettings : 1;             		// 0x005C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfTextureUsersOccluded : 1;            		// 0x005C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSkipRenderingDepthPrepass : 1;                   		// 0x005C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FColor                                      ClearColor;                                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ViewMode;                                         		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                SceneLOD;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPostProcessChain*                           PostProcess;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxUpdateDist;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxViewDistanceOverride;                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStreamingUpdateDist;                           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CaptureInfo;                                      		// 0x0080 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ViewState;                                        		// 0x0084 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          PostProcessProxies;                               		// 0x0088 (0x000C) [0x0000000001203002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 381 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bEnable );
	void SetFrameRate ( float NewFrameRate );
};

UClass* USceneCaptureComponent::pClassPointer = NULL;

// Class Engine.SceneCapture2DComponent
// 0x009C (0x0130 - 0x0094)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FieldOfView;                                      		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NearPlane;                                        		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FarPlane;                                         		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateMatrices : 1;                              		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00A8 (0x0008) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                       		// 0x00B0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     ProjMatrix;                                       		// 0x00F0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 383 ];

		return pClassPointer;
	};

	void SetView ( struct FVector NewLocation, struct FRotator NewRotation );
	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane );
};

UClass* USceneCapture2DComponent::pClassPointer = NULL;

// Class Engine.SceneCapture2DHitMaskComponent
// 0x0024 (0x00B8 - 0x0094)
class USceneCapture2DHitMaskComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0094 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                 		// 0x0098 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                MaterialIndex;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                ForceLOD;                                         		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                HitMaskCullDistance;                              		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              FadingStartTimeSinceHit;                          		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              FadingPercentage;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              FadingDurationTime;                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              FadingIntervalTime;                               		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 385 ];

		return pClassPointer;
	};

	void SetFadingStartTimeSinceHit ( float InFadingStartTimeSinceHit );
	void SetCaptureParameters ( struct FVector InMaskPosition, float InMaskRadius, struct FVector InStartupPosition, unsigned long bOnlyWhenFacing );
	void SetCaptureTargetTexture ( class UTextureRenderTarget2D* InTextureTarget );
};

UClass* USceneCapture2DHitMaskComponent::pClassPointer = NULL;

// Class Engine.SceneCaptureCubeMapComponent
// 0x0018 (0x00AC - 0x0094)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearPlane;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldLocation;                                    		// 0x00A0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 387 ];

		return pClassPointer;
	};

};

UClass* USceneCaptureCubeMapComponent::pClassPointer = NULL;

// Class Engine.SceneCapturePortalComponent
// 0x000C (0x00A0 - 0x0094)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleFOV;                                         		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      ViewDestination;                                  		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 389 ];

		return pClassPointer;
	};

	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest );
};

UClass* USceneCapturePortalComponent::pClassPointer = NULL;

// Class Engine.SceneCaptureReflectComponent
// 0x0008 (0x009C - 0x0094)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleFOV;                                         		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 391 ];

		return pClassPointer;
	};

};

UClass* USceneCaptureReflectComponent::pClassPointer = NULL;

// Class Engine.WindDirectionalSourceComponent
// 0x0017 (0x0070 - 0x0059)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneProxy;                                       		// 0x005C (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              Strength;                                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Phase;                                            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Frequency;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 393 ];

		return pClassPointer;
	};

};

UClass* UWindDirectionalSourceComponent::pClassPointer = NULL;

// Class Engine.WindPointSourceComponent
// 0x0008 (0x0078 - 0x0070)
class UWindPointSourceComponent : public UWindDirectionalSourceComponent
{
public:
	class UDrawSphereComponent*                        PreviewRadiusComponent;                           		// 0x0070 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Radius;                                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 395 ];

		return pClassPointer;
	};

};

UClass* UWindPointSourceComponent::pClassPointer = NULL;

// Class Engine.ActorFactory
// 0x0040 (0x007C - 0x003C)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                               		// 0x003C (0x0004) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MenuPriority;                                     		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AlternateMenuPriority;                            		// 0x0050 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	class UClass*                                      NewActorClass;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlaceable : 1;                                   		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowInEditorQuickMenu : 1;                       		// 0x0058 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseCustomPropertyEditor : 1;                     		// 0x0058 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     SpecificGameName;                                 		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CustomPropertyEditorDelegateClassName;            		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UActorFactoryCustomPropertyEditorDelegate*   CustomPropertyEditorDelegateInstance;             		// 0x0074 (0x0004) [0x0000000000000000]              
	class UClass*                                      CustomPropertyEditorDelegateTargetClass;          		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 397 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor );
};

UClass* UActorFactory::pClassPointer = NULL;

// Class Engine.ActorFactoryActor
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryActor : public UActorFactory
{
public:
	class UClass*                                      ActorClass;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 399 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryActor::pClassPointer = NULL;

// Class Engine.ActorFactoryAI
// 0x0028 (0x00A4 - 0x007C)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnClass;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PawnName;                                         		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            InventoryList;                                    		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TeamIndex;                                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 401 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryAI::pClassPointer = NULL;

// Class Engine.ActorFactoryApexDestructible
// 0x0010 (0x008C - 0x007C)
class UActorFactoryApexDestructible : public UActorFactory
{
public:
	unsigned long                                      bStartAwake : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UApexDestructibleAsset*                      DestructibleAsset;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 403 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryApexDestructible::pClassPointer = NULL;

// Class Engine.ActorFactoryArchetype
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 405 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryArchetype::pClassPointer = NULL;

// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x007C - 0x007C)
class UActorFactoryCoverLink : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 407 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCoverLink::pClassPointer = NULL;

// Class Engine.ActorFactoryDominantDirectionalLight
// 0x0000 (0x007C - 0x007C)
class UActorFactoryDominantDirectionalLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 409 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryDominantDirectionalLight::pClassPointer = NULL;

// Class Engine.ActorFactoryDominantDirectionalLightMovable
// 0x0000 (0x007C - 0x007C)
class UActorFactoryDominantDirectionalLightMovable : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 411 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryDominantDirectionalLightMovable::pClassPointer = NULL;

// Class Engine.ActorFactoryDynamicSM
// 0x0015 (0x0091 - 0x007C)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x008C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x008C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      CollisionType;                                    		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 413 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryDynamicSM::pClassPointer = NULL;

// Class Engine.ActorFactoryMover
// 0x0003 (0x0094 - 0x0091)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 415 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryMover::pClassPointer = NULL;

// Class Engine.ActorFactoryRigidBody
// 0x0027 (0x00B8 - 0x0091)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned long                                      bStartAwake : 1;                                  		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                   		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UDistributionVector*                         AdditionalVelocity;                               		// 0x00A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         InitialAngularVelocity;                           		// 0x00A8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      RBChannel;                                        		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightTorqueFactor;                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 417 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryRigidBody::pClassPointer = NULL;

// Class Engine.ActorFactoryEmitter
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 419 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryEmitter::pClassPointer = NULL;

// Class Engine.ActorFactoryLensFlare
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 421 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryLensFlare::pClassPointer = NULL;

// Class Engine.ActorFactoryLight
// 0x0000 (0x007C - 0x007C)
class UActorFactoryLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 423 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryLight::pClassPointer = NULL;

// Class Engine.ActorFactoryPathNode
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPathNode : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 425 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPathNode::pClassPointer = NULL;

// Class Engine.ActorFactoryPhysicsAsset
// 0x0024 (0x00A0 - 0x007C)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAwake : 1;                                  		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x0084 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x0084 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0084 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 427 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPhysicsAsset::pClassPointer = NULL;

// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 429 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart::pClassPointer = NULL;

// Class Engine.ActorFactoryPylon
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPylon : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 431 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPylon::pClassPointer = NULL;

// Class Engine.ActorFactorySkeletalMesh
// 0x0010 (0x008C - 0x007C)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSet;                                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSequenceName;                                 		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 433 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySkeletalMesh::pClassPointer = NULL;

// Class Engine.ActorFactoryStaticMesh
// 0x0010 (0x008C - 0x007C)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 435 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryStaticMesh::pClassPointer = NULL;

// Class Engine.ActorFactoryTrigger
// 0x0000 (0x007C - 0x007C)
class UActorFactoryTrigger : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 437 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryTrigger::pClassPointer = NULL;

// Class Engine.ActorFactoryVehicle
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 439 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryVehicle::pClassPointer = NULL;

// Class Engine.ActorFactoryCustomPropertyEditorDelegate
// 0x0000 (0x003C - 0x003C)
class UActorFactoryCustomPropertyEditorDelegate : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 441 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryCustomPropertyEditorDelegate::pClassPointer = NULL;

// Class Engine.AkAudioDevice
// 0x00F8 (0x0138 - 0x0040)
class UAkAudioDevice : public USubsystem
{
public:
	unsigned char                                      UnknownData00[ 0xF8 ];                            		// 0x0040 (0x00F8) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 443 ];

		return pClassPointer;
	};

};

UClass* UAkAudioDevice::pClassPointer = NULL;

// Class Engine.AkBaseSoundObject
// 0x0000 (0x003C - 0x003C)
class UAkBaseSoundObject : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 445 ];

		return pClassPointer;
	};

};

UClass* UAkBaseSoundObject::pClassPointer = NULL;

// Class Engine.SoundCue
// 0x009C (0x00D8 - 0x003C)
class USoundCue : public UAkBaseSoundObject
{
public:
	struct FName                                       SoundClass;                                       		// 0x003C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      SoundClassName;                                   		// 0x0044 (0x0001) [0x0000000000000000]              
	class USoundNode*                                  FirstNode;                                        		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x004C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	float                                              MaxAudibleDistance;                               		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VolumeMultiplier;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FString                                     DesignerComment;                                  		// 0x0098 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxConcurrentPlayCount;                           		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentPlayCount;                                 		// 0x00C4 (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )
	struct FName                                       SoundGroup;                                       		// 0x00C8 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                Priority;                                         		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpatializationPercent;                            		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 447 ];

		return pClassPointer;
	};

	float GetCueDuration ( );
	bool IsSoundLooping ( );
};

UClass* USoundCue::pClassPointer = NULL;

// Class Engine.AkObject
// 0x0004 (0x0040 - 0x003C)
class UAkObject : public UObject
{
public:
	int                                                ShortId;                                          		// 0x003C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 449 ];

		return pClassPointer;
	};

};

UClass* UAkObject::pClassPointer = NULL;

// Class Engine.AkBank
// 0x0008 (0x0048 - 0x0040)
class UAkBank : public UAkObject
{
public:
	unsigned long                                      AutoLoad : 1;                                     		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      GenerateDefinition : 1;                           		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                NumAsyncLoaders;                                  		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 451 ];

		return pClassPointer;
	};

};

UClass* UAkBank::pClassPointer = NULL;

// Class Engine.AkDialogueEvent
// 0x0014 (0x0054 - 0x0040)
class UAkDialogueEvent : public UAkObject
{
public:
	class UAkBank*                                     RequiredBank;                                     		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDialogueArgument >                 Arguments;                                        		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFaceFXAnimSet*                              FaceFXAnimSet;                                    		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 453 ];

		return pClassPointer;
	};

};

UClass* UAkDialogueEvent::pClassPointer = NULL;

// Class Engine.AkEffect
// 0x0010 (0x0050 - 0x0040)
class UAkEffect : public UAkObject
{
public:
	struct FString                                     EffectName;                                       		// 0x0040 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bCanBeEnvironmental : 1;                          		// 0x004C (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 455 ];

		return pClassPointer;
	};

};

UClass* UAkEffect::pClassPointer = NULL;

// Class Engine.AkEvent
// 0x0014 (0x0054 - 0x0040)
class UAkEvent : public UAkObject
{
public:
	class UAkBank*                                     RequiredBank;                                     		// 0x0040 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UFaceFXAnimSet*                              FaceFXAnimSet;                                    		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnvironmentalEffectUpdateFrequency;               		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCanBeOccluded : 1;                               		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceImmediateEnvOccRecalc : 1;                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bVoice : 1;                                       		// 0x004C (0x0004) [0x0000000000020003] [0x00000004] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bInCookedMap : 1;                                 		// 0x004C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInOnDemandPackage : 1;                           		// 0x004C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsSimpleEvent : 1;                               		// 0x004C (0x0004) [0x0000000000020003] [0x00000020] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bReliable : 1;                                    		// 0x004C (0x0004) [0x0000000000020003] [0x00000040] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bWantDistanceRTPC : 1;                            		// 0x004C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWantSpeedRTPC : 1;                               		// 0x004C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bWantApproachSpeedRTPC : 1;                       		// 0x004C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	float                                              MaxAttenuationRadius;                             		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 457 ];

		return pClassPointer;
	};

};

UClass* UAkEvent::pClassPointer = NULL;

// Class Engine.AkRtpc
// 0x0008 (0x0048 - 0x0040)
class UAkRtpc : public UAkObject
{
public:
	float                                              MinRange;                                         		// 0x0040 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              MaxRange;                                         		// 0x0044 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 459 ];

		return pClassPointer;
	};

};

UClass* UAkRtpc::pClassPointer = NULL;

// Class Engine.AkState
// 0x0008 (0x0048 - 0x0040)
class UAkState : public UAkObject
{
public:
	class UAkStateGroup*                               StateGroup;                                       		// 0x0040 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bIsGroupNone : 1;                                 		// 0x0044 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 461 ];

		return pClassPointer;
	};

};

UClass* UAkState::pClassPointer = NULL;

// Class Engine.AkStateGroup
// 0x0000 (0x0040 - 0x0040)
class UAkStateGroup : public UAkObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 463 ];

		return pClassPointer;
	};

};

UClass* UAkStateGroup::pClassPointer = NULL;

// Class Engine.AkSwitch
// 0x0004 (0x0044 - 0x0040)
class UAkSwitch : public UAkObject
{
public:
	class UAkSwitchGroup*                              SwitchGroup;                                      		// 0x0040 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 465 ];

		return pClassPointer;
	};

};

UClass* UAkSwitch::pClassPointer = NULL;

// Class Engine.AkSwitchGroup
// 0x0000 (0x0040 - 0x0040)
class UAkSwitchGroup : public UAkObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 467 ];

		return pClassPointer;
	};

};

UClass* UAkSwitchGroup::pClassPointer = NULL;

// Class Engine.AkTrigger
// 0x0000 (0x0040 - 0x0040)
class UAkTrigger : public UAkObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 469 ];

		return pClassPointer;
	};

};

UClass* UAkTrigger::pClassPointer = NULL;

// Class Engine.BookMark
// 0x0024 (0x0060 - 0x003C)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                         		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           HiddenLevels;                                     		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 471 ];

		return pClassPointer;
	};

};

UClass* UBookMark::pClassPointer = NULL;

// Class Engine.BookMark2D
// 0x000C (0x0048 - 0x003C)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                           		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FIntPoint                                   Location;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 473 ];

		return pClassPointer;
	};

};

UClass* UBookMark2D::pClassPointer = NULL;

// Class Engine.KismetBookMark
// 0x000C (0x0054 - 0x0048)
class UKismetBookMark : public UBookMark2D
{
public:
	struct FString                                     BookMarkSequencePathName;                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 475 ];

		return pClassPointer;
	};

};

UClass* UKismetBookMark::pClassPointer = NULL;

// Class Engine.Canvas
// 0x005C (0x0098 - 0x003C)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                             		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              OrgX;                                             		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              OrgY;                                             		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              ClipX;                                            		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              ClipY;                                            		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              CurX;                                             		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurY;                                             		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurZ;                                             		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurYL;                                            		// 0x005C (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCenter : 1;                                      		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoSmooth : 1;                                    		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                SizeX;                                            		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    Canvas;                                           		// 0x0070 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SceneView;                                        		// 0x0074 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0078 (0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                    		// 0x0080 (0x0010) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FColor                                      BGColor;                                          		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 477 ];

		return pClassPointer;
	};

	void DrawDebugGraph ( struct FString Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, struct FVector2D RangeX, struct FVector2D RangeY );
	void DrawTextWithBG ( struct FString Text, unsigned long CR );
	void DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL );
	void DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL );
	void Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor );
	void SetBGColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );
	void SetDrawColorStruct ( struct FColor C );
	void SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );
	void DrawBox ( float Width, float Height );
	void DrawRect ( float RectX, float RectY, class UTexture* Tex );
	void DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale );
	void DrawScaledIcon ( struct FCanvasIcon Icon, float X, float Y, struct FVector Scale );
	struct FCanvasIcon MakeIcon ( class UTexture* Texture, float U, float V, float UL, float VL );
	void DrawTextureBlended ( class UTexture* Tex, float Scale, unsigned char Blend );
	void DrawTexture ( class UTexture* Tex, float Scale );
	void SetClip ( float X, float Y );
	void SetOrigin ( float X, float Y );
	void SetPos ( float PosX, float PosY, float PosZ );
	class UFont* GetDefaultCanvasFont ( );
	void eventReset ( unsigned long bKeepOrigin );
	void PopTransform ( );
	void PushTranslationMatrix ( struct FVector TranslationVector );
	void DeProject ( struct FVector2D ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection );
	struct FVector Project ( struct FVector Location );
	void DrawTextClipped ( struct FString Text, unsigned long bCheckHotKey, float XScale, float YScale );
	void DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo );
	void TextSize ( struct FString String, float* XL, float* YL );
	void StrLen ( struct FString String, float* XL, float* YL );
	struct FFontRenderInfo CreateFontRenderInfo ( unsigned long bClipText, unsigned long bEnableShadow, struct FLinearColor GlowColor, struct FVector2D GlowOuterRadius, struct FVector2D GlowInnerRadius );
	void DrawTris ( class UTexture* Tex, TArray< struct FCanvasUVTri > Triangles );
	void DrawTileStretched ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor );
	void DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void DrawRotatedTile ( class UTexture* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, unsigned long bClipTile );
	void PreOptimizeDrawTiles ( int Num, class UTexture* Tex, unsigned char Blend );
	void DrawTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long ClipTile, unsigned char Blend );
};

UClass* UCanvas::pClassPointer = NULL;

// Class Engine.Channel
// 0x002C (0x0068 - 0x003C)
class UChannel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x2C ];                            		// 0x003C (0x002C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 479 ];

		return pClassPointer;
	};

};

UClass* UChannel::pClassPointer = NULL;

// Class Engine.ActorChannel
// 0x005C (0x00C4 - 0x0068)
class UActorChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x5C ];                            		// 0x0068 (0x005C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 481 ];

		return pClassPointer;
	};

};

UClass* UActorChannel::pClassPointer = NULL;

// Class Engine.ControlChannel
// 0x0010 (0x0078 - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x0068 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 483 ];

		return pClassPointer;
	};

};

UClass* UControlChannel::pClassPointer = NULL;

// Class Engine.FileChannel
// 0x0210 (0x0278 - 0x0068)
class UFileChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x210 ];                           		// 0x0068 (0x0210) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 485 ];

		return pClassPointer;
	};

};

UClass* UFileChannel::pClassPointer = NULL;

// Class Engine.VoiceChannel
// 0x000C (0x0074 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0068 (0x000C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 487 ];

		return pClassPointer;
	};

};

UClass* UVoiceChannel::pClassPointer = NULL;

// Class Engine.Controller
// 0x04E4 (0x066C - 0x0188)
class AController : public AActor
{
public:
	struct FPointer                                    VfTable_IIResourcePoolProvider;                   		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IInterface_NavigationHandle;              		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class APawn*                                       Pawn;                                             		// 0x0190 (0x0004) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0194 (0x0004) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	int                                                PlayerNum;                                        		// 0x0198 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 NextController;                                   		// 0x019C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsPlayer : 1;                                    		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsHumanPlayer : 1;                               		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowControllerInfo : 1;                          		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGodMode : 1;                                     		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNonCheatGodMode : 1;                             		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDontTargetMode : 1;                              		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSoaking : 1;                                     		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bSlowerZAcquire : 1;                              		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bNotifyPostLanded : 1;                            		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bNotifyApex : 1;                                  		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bOverrideSearchStart : 1;                         		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bAdvancedTactics : 1;                             		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanDoSpecial : 1;                                		// 0x01A0 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bAdjusting : 1;                                   		// 0x01A0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bPreparingMove : 1;                               		// 0x01A0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForceStrafe : 1;                                 		// 0x01A0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPauseNavigationUpdate : 1;                       		// 0x01A0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bLOSflag : 1;                                     		// 0x01A0 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bSkipExtraLOSChecks : 1;                          		// 0x01A0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bNotifyFallingHitWall : 1;                        		// 0x01A0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bEarlyOutOfSighTestsForSameType : 1;              		// 0x01A0 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x01A0 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bSeeFriendly : 1;                                 		// 0x01A0 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bUsingPathLanes : 1;                              		// 0x01A0 (0x0004) [0x0000000000000000] [0x00800000] 
	struct FRotator                                    PrevRotation;                                     		// 0x01A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bFire;                                            		// 0x01B0 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bAltFire;                                         		// 0x01B1 (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              MinHitWall;                                       		// 0x01B4 (0x0004) [0x0000000000000000]              
	class UClass*                                      NavigationHandleClass;                            		// 0x01B8 (0x0004) [0x0000000000000000]              
	class UNavigationHandle*                           NavigationHandle;                                 		// 0x01BC (0x0004) [0x0000000004000000]              ( CPF_EditInline )
	struct FVector                                     OverrideSearchStart;                              		// 0x01C0 (0x000C) [0x0000000000000000]              
	float                                              MoveTimer;                                        		// 0x01CC (0x0004) [0x0000000000000000]              
	class AActor*                                      MoveTarget;                                       		// 0x01D0 (0x0004) [0x0000000000000000]              
	struct FBasedPosition                              DestinationPosition;                              		// 0x01D4 (0x0034) [0x0000000000000000]              
	struct FBasedPosition                              FocalPosition;                                    		// 0x0208 (0x0034) [0x0000000000000000]              
	class AActor*                                      Focus;                                            		// 0x023C (0x0004) [0x0000000000000000]              
	class AActor*                                      GoalList[ 0x4 ];                                  		// 0x0240 (0x0010) [0x0000000000000000]              
	struct FBasedPosition                              AdjustPosition;                                   		// 0x0250 (0x0034) [0x0000000000000000]              
	class AActor*                                      StartSpot;                                        		// 0x0284 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  RouteCache;                                       		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UReachSpec*                                  CurrentPath;                                      		// 0x0294 (0x0004) [0x0000000000000000]              
	class UReachSpec*                                  NextRoutePath;                                    		// 0x0298 (0x0004) [0x0000000000000000]              
	struct FVector                                     CurrentPathDir;                                   		// 0x029C (0x000C) [0x0000000000000000]              
	class AActor*                                      RouteGoal;                                        		// 0x02A8 (0x0004) [0x0000000000000000]              
	float                                              RouteDist;                                        		// 0x02AC (0x0004) [0x0000000000000000]              
	float                                              LastRouteFind;                                    		// 0x02B0 (0x0004) [0x0000000000000000]              
	class AInterpActor*                                PendingMover;                                     		// 0x02B4 (0x0004) [0x0000000000000000]              
	class AActor*                                      FailedMoveTarget;                                 		// 0x02B8 (0x0004) [0x0000000000000000]              
	int                                                MoveFailureCount;                                 		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              GroundPitchTime;                                  		// 0x02C0 (0x0004) [0x0000000000000000]              
	struct FVector                                     ViewX;                                            		// 0x02C4 (0x000C) [0x0000000000000000]              
	struct FVector                                     ViewY;                                            		// 0x02D0 (0x000C) [0x0000000000000000]              
	struct FVector                                     ViewZ;                                            		// 0x02DC (0x000C) [0x0000000000000000]              
	class APawn*                                       ShotTarget;                                       		// 0x02E8 (0x0004) [0x0000000000000000]              
	class AActor*                                      LastFailedReach;                                  		// 0x02EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FailedReachTime;                                  		// 0x02F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     FailedReachLocation;                              		// 0x02F4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SightCounter;                                     		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              SightCounterInterval;                             		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              InUseNodeCostMultiplier;                          		// 0x0308 (0x0004) [0x0000000000000000]              
	int                                                HighJumpNodeCostModifier;                         		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              MaxMoveTowardPawnTargetTime;                      		// 0x0310 (0x0004) [0x0000000000000000]              
	class APawn*                                       Enemy;                                            		// 0x0314 (0x0004) [0x0000000000000000]              
	TArray< struct FVisiblePortalInfo >                VisiblePortals;                                   		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LaneOffset;                                       		// 0x0324 (0x0004) [0x0000000000000000]              
	struct FRotator                                    OldBasedRotation;                                 		// 0x0328 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     NavMeshPath_SearchExtent_Modifier;                		// 0x0334 (0x000C) [0x0000000000000000]              
	class AResourcePoolManager*                        ResourcePoolManager;                              		// 0x0340 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FResourcePoolReference                      AccuracyPool;                                     		// 0x0344 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FResourcePoolReference                      OffHandAccuracyPool;                              		// 0x0350 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UCharacterClassDefinition*                   CharacterClass;                                   		// 0x035C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              InstigatedBulletDamageModifier;                   		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedBulletDamageModifierBaseValue;          		// 0x0364 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedBulletDamageModifierModifierStack;      		// 0x0368 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedMeleeDamageModifier;                    		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedMeleeDamageModifierBaseValue;           		// 0x0378 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedMeleeDamageModifierModifierStack;       		// 0x037C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedGrenadeDamageModifier;                  		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedGrenadeDamageModifierBaseValue;         		// 0x038C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedGrenadeDamageModifierModifierStack;     		// 0x0390 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedRocketDamageModifier;                   		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedRocketDamageModifierBaseValue;          		// 0x03A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedRocketDamageModifierModifierStack;      		// 0x03A4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedStatusEffectDamageModifier;             		// 0x03B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedStatusEffectDamageModifierBaseValue;    		// 0x03B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedStatusEffectDamageModifierModifierStack;		// 0x03B8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedSkillDamageModifier;                    		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedSkillDamageModifierBaseValue;           		// 0x03C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedSkillDamageModifierModifierStack;       		// 0x03CC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedStatusEffectStatusChanceModifier;       		// 0x03D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedStatusEffectStatusChanceModifierBaseValue;		// 0x03DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedStatusEffectStatusChanceModifierModifierStack;		// 0x03E0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedIncendiaryStatusChanceModifier;         		// 0x03EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedIncendiaryStatusChanceModifierBaseValue;		// 0x03F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedIncendiaryStatusChanceModifierModifierStack;		// 0x03F4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedShockStatusChanceModifier;              		// 0x0400 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedShockStatusChanceModifierBaseValue;     		// 0x0404 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedShockStatusChanceModifierModifierStack; 		// 0x0408 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedCorrosiveStatusChanceModifier;          		// 0x0414 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedCorrosiveStatusChanceModifierBaseValue; 		// 0x0418 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedCorrosiveStatusChanceModifierModifierStack;		// 0x041C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedAmpStatusChanceModifier;                		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedAmpStatusChanceModifierBaseValue;       		// 0x042C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedAmpStatusChanceModifierModifierStack;   		// 0x0430 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedStatusEffectStatusDamageModifier;       		// 0x043C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedStatusEffectStatusDamageModifierBaseValue;		// 0x0440 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedStatusEffectStatusDamageModifierModifierStack;		// 0x0444 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedIncendiaryStatusDamageModifier;         		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedIncendiaryStatusDamageModifierBaseValue;		// 0x0454 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedIncendiaryStatusDamageModifierModifierStack;		// 0x0458 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedShockStatusDamageModifier;              		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedShockStatusDamageModifierBaseValue;     		// 0x0468 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedShockStatusDamageModifierModifierStack; 		// 0x046C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedCorrosiveStatusDamageModifier;          		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedCorrosiveStatusDamageModifierBaseValue; 		// 0x047C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedCorrosiveStatusDamageModifierModifierStack;		// 0x0480 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedAmpStatusDamageModifier;                		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedAmpStatusDamageModifierBaseValue;       		// 0x0490 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedAmpStatusDamageModifierModifierStack;   		// 0x0494 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedBulletDamageModifier;                     		// 0x04A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedBulletDamageModifierBaseValue;            		// 0x04A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedBulletDamageModifierModifierStack;        		// 0x04A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedAmplifyDamageModifier;                    		// 0x04B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedAmplifyDamageModifierBaseValue;           		// 0x04B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedAmplifyDamageModifierModifierStack;       		// 0x04BC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedMeleeDamageModifier;                      		// 0x04C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedMeleeDamageModifierBaseValue;             		// 0x04CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedMeleeDamageModifierModifierStack;         		// 0x04D0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedGrenadeDamageModifier;                    		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedGrenadeDamageModifierBaseValue;           		// 0x04E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedGrenadeDamageModifierModifierStack;       		// 0x04E4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedRocketDamageModifier;                     		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedRocketDamageModifierBaseValue;            		// 0x04F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedRocketDamageModifierModifierStack;        		// 0x04F8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedStatusEffectDamageModifier;               		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedStatusEffectDamageModifierBaseValue;      		// 0x0508 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedStatusEffectDamageModifierModifierStack;  		// 0x050C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ReceivedSkillDamageModifier;                      		// 0x0518 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReceivedSkillDamageModifierBaseValue;             		// 0x051C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedSkillDamageModifierModifierStack;         		// 0x0520 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedIncindiaryDamageModifier;               		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedIncindiaryDamageModifierBaseValue;      		// 0x0530 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedIncindiaryDamageModifierModifierStack;  		// 0x0534 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedShockDamageModifier;                    		// 0x0540 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedShockDamageModifierBaseValue;           		// 0x0544 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedShockDamageModifierModifierStack;       		// 0x0548 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedExplosiveDamageModifier;                		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedExplosiveDamageModifierBaseValue;       		// 0x0558 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedExplosiveDamageModifierModifierStack;   		// 0x055C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedCorrosiveDamageModifier;                		// 0x0568 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedCorrosiveDamageModifierBaseValue;       		// 0x056C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedCorrosiveDamageModifierModifierStack;   		// 0x0570 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedImpactDamageModifier;                   		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedImpactDamageModifierBaseValue;          		// 0x0580 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedImpactDamageModifierModifierStack;      		// 0x0584 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstigatedAmpDamageModifier;                      		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InstigatedAmpDamageModifierBaseValue;             		// 0x0594 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedAmpDamageModifierModifierStack;         		// 0x0598 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                InstigatedBulletDamageAmmoTheftAmount;            		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstigatedBulletDamageAmmoTheftAmountBaseValue;   		// 0x05A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedBulletDamageAmmoTheftAmountModifierStack;		// 0x05AC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                InstigatedMeleeDamageAmmoTheftAmount;             		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstigatedMeleeDamageAmmoTheftAmountBaseValue;    		// 0x05BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedMeleeDamageAmmoTheftAmountModifierStack;		// 0x05C0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                InstigatedGrenadeDamageAmmoTheftAmount;           		// 0x05CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstigatedGrenadeDamageAmmoTheftAmountBaseValue;  		// 0x05D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedGrenadeDamageAmmoTheftAmountModifierStack;		// 0x05D4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                InstigatedRocketDamageAmmoTheftAmount;            		// 0x05E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstigatedRocketDamageAmmoTheftAmountBaseValue;   		// 0x05E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedRocketDamageAmmoTheftAmountModifierStack;		// 0x05E8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                InstigatedStatusEffectDamageAmmoTheftAmount;      		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstigatedStatusEffectDamageAmmoTheftAmountBaseValue;		// 0x05F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstigatedStatusEffectDamageAmmoTheftAmountModifierStack;		// 0x05FC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ReceivedBulletDamageAmmoTheftAmount;              		// 0x0608 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReceivedBulletDamageAmmoTheftAmountBaseValue;     		// 0x060C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedBulletDamageAmmoTheftAmountModifierStack; 		// 0x0610 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ReceivedMeleeDamageAmmoTheftAmount;               		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReceivedMeleeDamageAmmoTheftAmountBaseValue;      		// 0x0620 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedMeleeDamageAmmoTheftAmountModifierStack;  		// 0x0624 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ReceivedGrenadeDamageAmmoTheftAmount;             		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReceivedGrenadeDamageAmmoTheftAmountBaseValue;    		// 0x0634 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedGrenadeDamageAmmoTheftAmountModifierStack;		// 0x0638 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ReceivedRocketDamageAmmoTheftAmount;              		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReceivedRocketDamageAmmoTheftAmountBaseValue;     		// 0x0648 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedRocketDamageAmmoTheftAmountModifierStack; 		// 0x064C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ReceivedStatusEffectDamageAmmoTheftAmount;        		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReceivedStatusEffectDamageAmmoTheftAmountBaseValue;		// 0x065C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ReceivedStatusEffectDamageAmmoTheftAmountModifierStack;		// 0x0660 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 489 ];

		return pClassPointer;
	};

	bool IsUsingVehicleEx ( unsigned long IncludeAttachedRiders, class AVehicle** TheVehicleOrWeaponPawn );
	bool IsUsingVehicle ( unsigned long IncludeAttachedRiders );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
	class APawn* GetInstanceDataPawn ( );
	bool ShouldSwitchToBestWeapon ( );
	class APawn* GetWorldPawn ( );
	void AddAccuracyImpulse ( float Delta, unsigned long bOffHand );
	bool eventGeneratePathToLocation ( struct FVector Goal, float WithinDistance, unsigned long bAllowPartialPath );
	bool eventGeneratePathToActor ( class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void DisplayDebugResourcePoolManager ( class AResourcePoolManager* PoolManager, struct FString ManagerDescription, class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayDebugResourcePools ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void RecalculateAttributeInitializedState ( );
	struct FResourcePoolReference GetResourcePoolForResourceDefinition ( class UResourceDefinition* Resource, unsigned long bCreatePoolIfOneDoesntExist );
	void ApplyCharacterClassStartingValues ( class UCharacterClassDefinition* inCharacterClass );
	void ApplyCharacterClassDefaults ( class APawn* P, class UCharacterClassDefinition* inCharacterClass );
	class UCharacterClassDefinition* eventGetClassDefinition ( );
	float GetDestinationOffset ( );
	void InitNavigationHandle ( );
	void ReadyForLift ( );
	void SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType );
	void eventCurrentLevelUnloaded ( );
	bool eventIsInCombat ( unsigned long bForceCheck );
	bool eventIsSpectating ( );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void NotifyAddInventory ( class AInventory* NewItem );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	void eventNotifyCoverAdjusted ( );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	bool GetNonCheatGodMode ( );
	void SetNonCheatGodMode ( unsigned long NewMode );
	bool GetGodMode ( );
	void SetGodMode ( unsigned long NewMode );
	bool InGodMode ( );
	void OnToggleGodMode ( class USeqAct_ToggleGodMode* inAction );
	void OnTeleport ( class USeqAct_Teleport* Action );
	bool IsDead ( );
	struct FString GetHumanReadableName ( );
	void StopLatentExecution ( );
	bool InLatentExecution ( int LatentActionNumber );
	void eventReachedPreciseDestination ( );
	void eventNotifyMissedJump ( );
	void eventNotifyJumpApex ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume );
	void eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	bool LandingShake ( );
	bool IsAimingAt ( class AActor* ATarget, float Epsilon );
	void GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void GetPlayerViewPoint ( unsigned long bMustBeCurrent, struct FVector* out_Location, struct FRotator* out_Rotation );
	bool eventHandlePathObstruction ( class AActor* BlockedBy );
	void UnderLift ( class ALiftCenter* Lift );
	bool eventMoverFinished ( );
	void WaitForMover ( class AInterpActor* M );
	bool eventAllowDetourTo ( class ANavigationPoint* N );
	void eventMayFall ( unsigned long bFloor, struct FVector FloorNormal );
	void EndClimbLadder ( );
	void eventLongFall ( );
	void WaitForLanding ( float waitDuration );
	bool PickWallAdjust ( struct FVector HitNormal );
	void eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	bool ActorReachable ( class AActor* anActor );
	bool PointReachable ( struct FVector aPoint );
	class AActor* FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class ANavigationPoint* FindRandomDest ( );
	class AActor* FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial );
	void FinishRotation ( );
	void eventSetupSpecialPathAbilities ( );
	void MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk );
	void MoveToDirectNonPathPos ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk, unsigned long bDontSetFocalPoint );
	void MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk, unsigned long bDontSetFocalPoint );
	void eventEnemyNotVisible ( );
	void eventSeeMonster ( class APawn* Seen );
	void eventSeePlayer ( class APawn* Seen );
	void eventHearNoise ( class AActor* NoiseMaker, struct FVector NoiseLocation, float Loudness, struct FName NoiseType );
	class APawn* PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist );
	bool CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation );
	bool CanSee ( class APawn* Other );
	bool LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon, unsigned long bOffHandWeapon );
	void ClientSwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void SwitchToBestWeapon ( unsigned long bForceNewWeapon );
	bool CanHoldWeapon ( class APawn* Holder, class AWeapon* TestWeapon, unsigned long bHoldInOffHand );
	void ReceiveProjectileWarning ( class AProjectile* Proj );
	void ReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir );
	void InstantWarnTarget ( class AActor* InTarget, class AWeapon* FiredWeapon, struct FVector FireDir );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void UnTouchedPickupable ( class UIPickupable* Pickup );
	void TouchedPickupable ( class UIPickupable* Pickup );
	void HandlePickup ( class AInventory* Inv );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void eventStopFiring ( );
	bool FireWeaponAt ( class AActor* inActor );
	float eventRatePickup ( class AActor* PickupHolder, class UClass* inPickup );
	void WarnProjExplode ( class AProjectile* Proj );
	void NotifyProjLanded ( class AProjectile* Proj );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void SetCharacter ( struct FString inCharacter );
	void ServerGivePawn ( );
	void ServerRestartPlayer ( );
	unsigned char GetTeamNum ( );
	void InitPlayerReplicationInfo ( );
	void NotifyRecentDamage ( float DamageAmount, class AActor* DamagedActor, class UDamageTypeDefinition* DamageTypeDefinition, struct FVector DamageLoc, unsigned char DamageEventFlags );
	void NotifyTakeHit ( class AController* InstigatedBy, class APawn* HitPawn, struct FVector HitLocation, float Damage, class UClass* DamageType, struct FVector Momentum, class UDamagePipeline* Pipeline );
	void EnemyJustTeleported ( );
	bool BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint );
	void SpawningProcessComplete ( );
	void Restart ( unsigned long bVehicleTransition );
	void CleanupPRI ( );
	void eventDestroyed ( );
	void eventNotifyPostLanded ( );
	bool GamePlayEndedState ( );
	void PawnDied ( class APawn* inPawn );
	void eventUnPossess ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void OnPossess ( class USeqAct_Possess* inAction );
	void eventReplicatedEvent ( struct FName VarName );
	void ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void Reset ( );
	void eventPostBeginPlay ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventNotifyPathChanged ( );
	struct FVector GetAdjustLocation ( );
	void SetAdjustLocation ( struct FVector NewLoc, unsigned long bAdjust, unsigned long bOffsetFromBase );
	struct FVector GetDestinationPosition ( );
	void SetDestinationPosition ( struct FVector Dest, unsigned long bOffsetFromBase );
	struct FVector GetFocalPoint ( );
	void SetFocalPoint ( struct FVector FP, unsigned long bOffsetFromBase );
	bool IsLocalController ( );
	bool IsLocalPlayerController ( );
};

UClass* AController::pClassPointer = NULL;

// Class Engine.PlayerController
// 0x0284 (0x08F0 - 0x066C)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                           		// 0x066C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ACamera*                                     PlayerCamera;                                     		// 0x0670 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      CameraClass;                                      		// 0x0674 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFrozen : 1;                                      		// 0x0678 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x0678 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x0678 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUpdatePosition : 1;                              		// 0x0678 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUpdating : 1;                                    		// 0x0678 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNeverSwitchOnPickup : 1;                         		// 0x0678 (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheatFlying : 1;                                 		// 0x0678 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCameraPositionLocked : 1;                        		// 0x0678 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShortConnectTimeOut : 1;                         		// 0x0678 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPendingDestroy : 1;                              		// 0x0678 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bWasSpeedHack : 1;                                		// 0x0678 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bWasSaturated : 1;                                		// 0x0678 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bAimingHelp : 1;                                  		// 0x0678 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCameraCut : 1;                                   		// 0x0678 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bClientSimulatingViewTarget : 1;                  		// 0x0678 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bForegroundFOV : 1;                               		// 0x0678 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasVoiceHandshakeCompleted : 1;                  		// 0x0678 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCinematicMode : 1;                               		// 0x0678 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCinematicSplitScreen : 1;                        		// 0x0678 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bKismetEnabledCinematicMode : 1;                  		// 0x0678 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bInteractiveMode : 1;                             		// 0x0678 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bCinemaDisableInputMove : 1;                      		// 0x0678 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bCinemaDisableInputLook : 1;                      		// 0x0678 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bCinemaDisableInputButton : 1;                    		// 0x0678 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bCinematicModeHidePlayer : 1;                     		// 0x0678 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bIgnoreNetworkMessages : 1;                       		// 0x0678 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bReplicateAllPawns : 1;                           		// 0x0678 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bIsUsingStreamingVolumes : 1;                     		// 0x0678 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x0678 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bIsControllerConnected : 1;                       		// 0x0678 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bCheckSoundOcclusion : 1;                         		// 0x0678 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bDebugCameraAnims : 1;                            		// 0x0678 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bFreeCamera : 1;                                  		// 0x067C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBlockCameraAnimsFromOverridingPostProcess : 1;   		// 0x067C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLogHearSoundOverflow : 1;                        		// 0x067C (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                		// 0x067C (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDebugClientAdjustPosition : 1;                   		// 0x067C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIsInHolding : 1;                                 		// 0x067C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bOverrideOnlineProfileName : 1;                   		// 0x067C (0x0004) [0x0000000000044000] [0x00000040] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableAnalogMovement : 1;                        		// 0x067C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bStatusMenuOpen : 1;                              		// 0x067C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bUsingVendingMachine : 1;                         		// 0x067C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUsingVehicleSpawnStation : 1;                    		// 0x067C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bUsingFastTravelStation : 1;                      		// 0x067C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bWantsCensoredContent : 1;                        		// 0x067C (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              MaxResponseTime;                                  		// 0x0680 (0x0004) [0x0000000000000000]              
	float                                              WaitDelay;                                        		// 0x0684 (0x0004) [0x0000000000000000]              
	class APawn*                                       AcknowledgedPawn;                                 		// 0x0688 (0x0004) [0x0000000000000000]              
	unsigned char                                      DoubleClickDir;                                   		// 0x068C (0x0001) [0x0000000000000000]              
	unsigned char                                      LastAckedAnalogPct;                               		// 0x068D (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreMoveInput;                                 		// 0x068E (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreLookInput;                                 		// 0x068F (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreButtonInput;                               		// 0x0690 (0x0001) [0x0000000000000000]              
	unsigned char                                      bRun;                                             		// 0x0691 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bDuck;                                            		// 0x0692 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      NetPlayerIndex;                                   		// 0x0693 (0x0001) [0x0000000000200002]              ( CPF_Const )
	class AActor*                                      ViewTarget;                                       		// 0x0694 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APlayerReplicationInfo*                      RealViewTarget;                                   		// 0x0698 (0x0004) [0x0000000000000000]              
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                          		// 0x069C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVAngle;                                         		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              DesiredFOV;                                       		// 0x06A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredFOVBaseValue;                              		// 0x06A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                DesiredFOVModifierStack;                          		// 0x06AC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              DefaultFOV;                                       		// 0x06B8 (0x0004) [0x0000000000000000]              
	float                                              LODDistanceFactor;                                		// 0x06BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ForegroundFOV;                                    		// 0x06C0 (0x0004) [0x0000000000000000]              
	struct FRotator                                    TargetViewRotation;                               		// 0x06C4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              TargetEyeHeight;                                  		// 0x06D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    BlendedTargetViewRotation;                        		// 0x06D4 (0x000C) [0x0000000000000000]              
	class AHUD*                                        myHUD;                                            		// 0x06E0 (0x0004) [0x0000000000000000]              
	class UClass*                                      SavedMoveClass;                                   		// 0x06E4 (0x0004) [0x0000000000000000]              
	class USavedMove*                                  SavedMoves;                                       		// 0x06E8 (0x0004) [0x0000000000000000]              
	class USavedMove*                                  FreeMoves;                                        		// 0x06EC (0x0004) [0x0000000000000000]              
	class USavedMove*                                  PendingMove;                                      		// 0x06F0 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastAckedAccel;                                   		// 0x06F4 (0x000C) [0x0000000000000000]              
	float                                              CurrentTimeStamp;                                 		// 0x0700 (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x0704 (0x0004) [0x0000000000000000]              
	float                                              ServerTimeStamp;                                  		// 0x0708 (0x0004) [0x0000000000000000]              
	float                                              TimeMargin;                                       		// 0x070C (0x0004) [0x0000000000000000]              
	float                                              ClientUpdateTime;                                 		// 0x0710 (0x0004) [0x0000000000000000]              
	float                                              MaxTimeMargin;                                    		// 0x0714 (0x0004) [0x0000000000000000]              
	float                                              LastActiveTime;                                   		// 0x0718 (0x0004) [0x0000000000000000]              
	int                                                ClientCap;                                        		// 0x071C (0x0004) [0x0000000000000000]              
	float                                              DynamicPingThreshold;                             		// 0x0720 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              LastPingUpdate;                                   		// 0x0724 (0x0004) [0x0000000000000000]              
	float                                              LastSpeedHackLog;                                 		// 0x0728 (0x0004) [0x0000000000000000]              
	struct FClientAdjustment                           PendingAdjustment;                                		// 0x072C (0x0034) [0x0000000000000000]              
	int                                                GroundPitch;                                      		// 0x0760 (0x0004) [0x0000000000000000]              
	class UCheatManager*                               CheatManager;                                     		// 0x0764 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      CheatClass;                                       		// 0x0768 (0x0004) [0x0000000000000000]              
	class UPlayerInput*                                PlayerInput;                                      		// 0x076C (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      InputClass;                                       		// 0x0770 (0x0004) [0x0000000000000000]              
	struct FVector                                     FailedPathStart;                                  		// 0x0774 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0780 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     ForceFeedbackManagerClassName;                    		// 0x0784 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UForceFeedbackManager*                       ForceFeedbackManager;                             		// 0x0790 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      CurrentWaveform;                                  		// 0x0794 (0x0004) [0x0000000000000000]              
	TArray< class UInteraction* >                      Interactions;                                     		// 0x0798 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      VoiceMuteList;                                    		// 0x07A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      GameplayVoiceMuteList;                            		// 0x07B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      VoicePacketFilter;                                		// 0x07BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FConnectedPeerInfo >                ConnectedPeers;                                   		// 0x07C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      BestNextHostPeers;                                		// 0x07D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineGameSearch*                           MigratedSearchToJoin;                             		// 0x07E0 (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x07E4 (0x0004) [0x0000000000000000]              
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x07E8 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x07EC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                 		// 0x07F0 (0x0004) [0x0000000000000000]              
	class UUIDataStore_StringAliasMap*                 StringAliasMap;                                   		// 0x07F4 (0x0004) [0x0000000000000000]              
	float                                              InteractDistance;                                 		// 0x07F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       DelayedJoinSessionName;                           		// 0x07FC (0x0008) [0x0000000000000000]              
	struct FString                                     LastPresenceStatusUpdateString;                   		// 0x0804 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastLocationStatusUpdateString;                   		// 0x0810 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInputMatchRequest >                InputRequests;                                    		// 0x081C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastBroadcastTime;                                		// 0x0828 (0x0004) [0x0000000000000000]              
	struct FString                                     LastBroadcastString[ 0x4 ];                       		// 0x082C (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             PendingMapChangeLevelNames;                       		// 0x085C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACoverReplicator*                            MyCoverReplicator;                                		// 0x0868 (0x0004) [0x0000000000000000]              
	TArray< struct FDebugTextInfo >                    DebugTextList;                                    		// 0x086C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SpectatorCameraSpeed;                             		// 0x0878 (0x0004) [0x0000000000000000]              
	class UNetConnection*                              PendingSwapConnection;                            		// 0x087C (0x0004) [0x0000000000200002]              ( CPF_Const )
	float                                              MinRespawnDelay;                                  		// 0x0880 (0x0004) [0x0000000000000000]              
	int                                                MaxConcurrentHearSounds;                          		// 0x0884 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class UAudioComponent* >                   HearSoundActiveComponents;                        		// 0x0888 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAudioComponent* >                   HearSoundPoolComponents;                          		// 0x0894 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              LastSpectatorStateSynchTime;                      		// 0x08A0 (0x0004) [0x0000000000000000]              
	struct FVector                                     HoldingDest;                                      		// 0x08A4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    HoldingRotation;                                  		// 0x08B0 (0x000C) [0x0000000000000000]              
	class AActor*                                      HoldingDestActor;                                 		// 0x08BC (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             LoadingMovieLoadedLevelNames;                     		// 0x08C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMissingPeersUnregistered__Delegate;           		// 0x08CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x08D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __InputMatchDelegate__Delegate;                   		// 0x08E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 491 ];

		return pClassPointer;
	};

	void eventUpdateScaleformHUDVisibility ( );
	void eventNotifyUIRefresh ( );
	void eventPreTransitionCleanup ( );
	bool PS3SplitScreenUsingSameUser ( );
	struct FString GetPS3SplitScreenUserName ( );
	int GetPS3SplitScreenUserNumber ( );
	int GetPS3SplitScreenPlayerChosenResult ( );
	void PS3UserSelect ( );
	void ServerDestroy ( );
	bool CanDrop ( class AWillowInventory* Inv );
	unsigned char GetDLCPackageMask ( );
	void ClearAllPoolComponents ( );
	void OnGameInviteAcceptedP3 ( struct FOnlineGameSearchResult* InviteResult );
	void OnGameInviteAcceptedP2 ( struct FOnlineGameSearchResult* InviteResult );
	void OnGameInviteAcceptedP1 ( struct FOnlineGameSearchResult* InviteResult );
	void OnGameInviteAcceptedP0 ( struct FOnlineGameSearchResult* InviteResult );
	void OnGameInviteAcceptedP ( int P, struct FOnlineGameSearchResult* InviteResult );
	void PreOnGameInviteAccepted ( );
	bool AllDestinationLevelsAreVisible ( struct FVector DestLoc );
	bool eventReleaseHolding ( );
	void SetGlobalVolumeMultiplier ( float F );
	void NativeSetGlobalVolumeMultiplier ( float F );
	bool eventNotifyDisconnect ( struct FString Command );
	void ReceivedGameClass ( class UClass* GameClass );
	void LogOutBugItAIGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString );
	void LogOutBugItGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString );
	void DisableDebugAI ( );
	void ToggleAnimThreading ( );
	void eventOnEngineInitialTick ( );
	void BugItStringCreator ( struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString );
	void BugItAI ( struct FString ScreenShotDescription );
	void LogLoc ( );
	void BugIt ( struct FString ScreenShotDescription );
	bool HasPeerConnection ( struct FUniqueNetId* PeerNetId );
	void OnSetSoundMode ( class USeqAct_SetSoundMode* Action );
	void eventClientSpawnCameraLensEffect ( class UClass* LensEffectEmitterClass );
	void DebugCameraAnims ( );
	void eventClientStopCameraAnim ( class UCameraAnim* AnimToStop );
	void eventClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace );
	void ClientStopCameraShake ( class UCameraShake* Shake );
	void ClientPlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned long bTryForceFeedback, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void DoForceFeedbackForScreenShake ( class UCameraShake* ShakeData, float ShakeScale );
	void TestMovieStop ( );
	void TestMovie ( struct FString MovieName );
	void NativeTestMovieStop ( );
	void NativeTestMovie ( struct FString MovieName );
	void InputMatchDelegate ( );
	void Sentinel_PostAcquireTravelTheWorldPoints ( );
	void Sentinel_PreAcquireTravelTheWorldPoints ( );
	void Sentinel_SetupForGamebasedTravelTheWorld ( );
	void OnFlyThroughHasEnded ( class USeqAct_FlyThroughHasEnded* inAction );
	bool eventGetAchievementProgression ( int AchievementId, float* CurrentValue, float* MaxValue );
	struct FString GetPartyGameTypeName ( );
	struct FString GetPartyMapName ( );
	bool IsPartyLeader ( );
	void eventClientAddTextureStreamingLoc ( struct FVector InLoc, float Duration, unsigned long bOverrideLocation );
	void eventClientPrestreamTextures ( class AActor* ForcedActor, float ForceDuration, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventClientSetForceMipLevelsToBeResident ( class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups );
	void ClientControlMovieTexture ( class UTextureMovie* MovieTexture, unsigned char Mode );
	int GetSplitscreenPlayerCount ( );
	class APlayerReplicationInfo* GetSplitscreenPlayerByIndex ( int PlayerIndex );
	bool IsSplitscreenPlayer ( int* out_SplitscreenPlayerIndex );
	bool IsPrimaryPlayer ( );
	void ServerNotifyPartyHostLeaving ( struct FUniqueNetId PartyHostPlayerId );
	void ClientNotifyPartyHostLeaving ( struct FUniqueNetId PartyHostPlayerId );
	void ClientReturnToParty ( struct FUniqueNetId RequestingPlayerId );
	void OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void PreJoinUpdateGameSettings ( struct FName SessionName, class UOnlineGameSettings* GameSettings );
	void ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void PathClear ( );
	void PathChild ( int Cnt );
	void PathStep ( int Cnt );
	bool ShouldCheckRemoteControlCheckbox ( unsigned char CheckBoxName, class AHUD* HUD );
	void NotifyGameUnPaused ( );
	void NotifyGamePaused ( );
	void eventSoakPause ( class APawn* P );
	void IncrementNumberOfMatchesPlayed ( );
	bool CanViewUserCreatedContent ( );
	void ClientEndOnlineGame ( );
	void ClientStartOnlineGame ( );
	void ServerRegisterClientStatGuid ( struct FString StatGuid );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	void ClientRegisterHostStatGuid ( struct FString StatGuid );
	void eventRemoveAllDebugStrings ( );
	void eventRemoveDebugText ( class AActor* SrcActor );
	void eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck, unsigned long bAbsoluteLocation, unsigned long bKeepAttachedToActor, class UFont* InFont );
	void eventDrawDebugTextList ( class UCanvas* Canvas, float RenderDelta );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClientStartNetworkedVoice ( );
	void ClientStopNetworkedVoice ( );
	void ClientSetHostUniqueId ( struct FUniqueNetId InHostId );
	void ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass, unsigned long bIsIncomplete );
	void ClientWriteOnlinePlayerScores ( int LeaderboardId );
	void ClientArbitratedMatchEnded ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void NotifyInviteFailed ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	struct FString ModifyClientURL ( struct FString URL );
	void OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClearInviteDelegates ( );
	bool CanAllPlayersPlayOnline ( );
	bool InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	void ServerRegisteredForArbitration ( unsigned long bWasSuccessful );
	void OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientRegisterForArbitration ( );
	void eventClientWasKicked ( );
	bool IsShowingSubtitles ( );
	void SetShowSubtitles ( unsigned long bValue );
	void eventNotifyDirectorControl ( unsigned long bNowControlling, class USeqAct_Interp* CurrentMatinee );
	void eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventServerMutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayMutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientMutePlayer ( struct FUniqueNetId PlayerNetId );
	void ClientVoiceHandshakeComplete ( );
	class APlayerController* GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId );
	void ClientSetOnlineStatus ( );
	void SeamlessTravelFrom ( class APlayerController* OldPC );
	void SeamlessTravelTo ( class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	bool IsPlayerMuted ( struct FUniqueNetId* Sender );
	class UUIInteraction* GetUIController ( );
	void SaveActorConfig ( struct FName actorName );
	void SaveClassConfig ( struct FString ClassName );
	void ClientWaitForLevelsVisible ( class USeqAct_WaitForLevelsVisible* inAction );
	void eventClientSetBlockOnAsyncLoading ( );
	void eventClientFlushLevelStreaming ( );
	void eventClientCancelPendingMapChange ( );
	void eventClientCommitMapChange ( );
	void DelayedPrepareMapChange ( );
	void eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast );
	void eventClientFindPlayMovie ( struct FName LevelName );
	void eventServerCheckForHoldingRelease ( unsigned long bTimerExpired );
	void eventServerUpdateLevelVisibility ( struct FName PackageName, unsigned long bIsVisible );
	void ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventClientForceGarbageCollection ( );
	void OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction );
	void ResetPlayerMovementInput ( );
	bool eventIsButtonInputIgnored ( );
	void IgnoreButtonInput ( unsigned long bNewButtonInput );
	bool IsLookInputIgnored ( );
	void IgnoreLookInput ( unsigned long bNewLookInput );
	bool IsMoveInputIgnored ( );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons, unsigned long bAffectsHUD, unsigned long bInAllowCinematicSplitScreen, unsigned long bPauseDialog, unsigned long bKismetSetCinematicMode );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons, unsigned long bAffectsGodMode, unsigned long bAffectsNoTarget, unsigned long bInAllowCinematicSplitScreen, unsigned long bPauseDialog, unsigned long bKismetSetCinematicMode );
	void OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action );
	bool IsForceFeedbackAllowed ( );
	void eventClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void DoForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator, float Scale );
	void ClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator, float Scale, unsigned long ForWeaponFiring );
	bool IsShotForceFeedbackAllowedByPlayerProfile ( );
	void eventPlayRumble ( class UAnimNotify_Rumble* TheAnimNotify );
	void OnForceFeedback ( class USeqAct_ForceFeedback* Action );
	void NotifyTakeHit ( class AController* InstigatedBy, class APawn* HitPawn, struct FVector HitLocation, float Damage, class UClass* DamageType, struct FVector Momentum, class UDamagePipeline* Pipeline );
	void ShowGameState ( );
	void ShowPlayerState ( );
	void ServerRemoteEvent ( struct FName EventName );
	void RE ( struct FName EventName );
	void RemoteEvent ( struct FName EventName );
	void ListCE ( );
	void ListConsoleEvents ( );
	void CE ( struct FName EventName );
	void CauseEvent ( struct FName EventName );
	void ServerCauseEvent ( struct FName EventName );
	void OnToggleHUD ( class USeqAct_ToggleHUD* inAction );
	void OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction );
	void ClientClearKismetText ( struct FVector2D MessageOffset );
	void ClientDrawKismetText ( struct FKismetDrawTextInfo DrawTextInfo, float DisplayTime );
	void OnDrawText ( class USeqAct_DrawText* inAction );
	void ClientIgnoreLookInput ( unsigned long bIgnore );
	void ClientIgnoreMoveInput ( unsigned long bIgnore );
	void OnToggleInput ( class USeqAct_ToggleInput* inAction );
	void DrawHUD ( class AHUD* H );
	bool CanRestartPlayer ( );
	void ServerViewSelf ( struct FViewTargetTransitionParams TransitionParams );
	void ViewAPlayer ( int Dir );
	class APlayerReplicationInfo* GetNextViewablePlayer ( int Dir );
	void ServerViewPrevPlayer ( );
	void ServerViewNextPlayer ( );
	void ServerSetSpectatorLocation ( struct FVector NewLoc );
	bool IsSpectating ( );
	void AdjustPlayerWalkingMoveAccel ( struct FVector* newAccel );
	void CheckJumpOrDuck ( );
	struct FRotator eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void UpdateRotation ( float DeltaTime );
	void ViewShake ( float DeltaTime );
	void GetPlayerViewPoint ( unsigned long bMustBeCurrent, struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSpawnPlayerCamera ( );
	void ServerVerifyViewTarget ( );
	class AActor* GetViewTarget ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void SetViewTargetWithBlend ( class AActor* NewViewTarget, float BlendTime, unsigned char BlendFunc, float BlendExp, unsigned long bLockOutgoing );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	float eventGetFOVAngleForeground ( );
	bool IsLocalController ( );
	bool IsLocalPlayerController ( );
	float eventGetFOVAngle ( );
	void AdjustFOV ( float DeltaTime );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	float AimHelpDot ( unsigned long bInstantHit );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action );
	bool AimingHelp ( unsigned long bInstantHit );
	void PlayerMove ( float DeltaTime );
	void eventPlayerTick ( float DeltaTime );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon, unsigned long bOffHandWeapon );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void ClientRestart ( class APawn* NewPawn );
	void EnterStartState ( );
	void ForceSingleNetUpdateFor ( class AActor* Target );
	bool HasClientLoadedCurrentWorld ( );
	void eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest );
	void eventServerNotifyLoadedWorld ( struct FName WorldPackageName );
	void Restart ( unsigned long bVehicleTransition );
	void eventClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	void SwitchLevel ( struct FString URL );
	void ServerChangeTeam ( int N );
	void ChangeTeam ( struct FString TeamName );
	void SwitchTeam ( );
	void ServerChangeName ( struct FString S );
	void SetName ( struct FString S );
	void ServerSuicide ( );
	void Suicide ( );
	bool TriggerInteracted ( );
	bool FindVehicleToDrive ( );
	bool PerformedUseAction ( );
	void ServerUse ( );
	void Use ( );
	void GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void NextWeapon ( );
	void PrevWeapon ( );
	void ServerThrowWeapon ( );
	void ThrowWeapon ( );
	void UTrace ( );
	void ServerUTrace ( );
	void eventConditionalPause ( unsigned long bDesiredPauseState );
	void ServerPause ( );
	void Pause ( );
	bool IsPaused ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	void ClientPauseRumble ( unsigned long bShouldPauseRumble );
	void PauseRumbleForAllPlayers ( unsigned long bShouldPauseRumble );
	void LocalTravel ( struct FString URL );
	void RestartLevel ( );
	void ServerSpeech ( struct FName Type, int Index, struct FString Callsign );
	void Speech ( struct FName Type, int Index, struct FString Callsign );
	void ServerRestartGame ( );
	void HandleWalking ( );
	void ServerUpdateCamera ( struct FVector CamLoc, int CamPitchAndYaw );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void ReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot, unsigned char AnalogPct );
	int CompressAccel ( int C );
	class USavedMove* GetFreeMove ( );
	void ClientUpdatePosition ( );
	void ClearAckedMoves ( );
	void ServerUpdatePing ( int NewPing );
	void UpdateStateFromAdjustment ( struct FName NewState );
	void LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );
	bool SkipPositionUpdateForRM ( );
	void UpdatePing ( float TimeStamp );
	void ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase );
	void ClientAckGoodMove ( float TimeStamp );
	void ClientCapBandwidth ( int Cap );
	void ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void eventMoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot, unsigned char AnalogPct );
	void ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot, unsigned char AnalogPct );
	float UncompressAnalogMovePct ( unsigned char InAnalogPct );
	unsigned char CompressAnalogMovePct ( float InAnalogPct );
	void ProcessDrive ( float InForward, float InStrafe, float InUp, unsigned long InJump );
	void ServerDrive ( float InForward, float InStrafe, float aUp, unsigned long InJump, int View );
	void eventSendClientAdjustment ( );
	void ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char AnalogPct );
	void PCServerMoveInner ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View, unsigned char AnalogPct );
	void OldServerMove ( float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags, unsigned char OldAnalogPct );
	void DualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, int view0, unsigned char AnalogPct0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View, unsigned char AnalogPct );
	void ForceDeathUpdate ( );
	bool UsingFirstPersonCamera ( );
	void eventClientSetCameraFade ( unsigned long bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime );
	void eventResetCameraMode ( );
	void SetCameraMode ( struct FName NewCamMode );
	void ClientSetCameraMode ( struct FName NewCamMode );
	void ServerCamera ( struct FName NewMode );
	void Camera ( struct FName NewMode );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void ServerTeamSay ( struct FString msg );
	void TeamSay ( struct FString msg );
	void ClientAdminMessage ( struct FString msg );
	void ServerSay ( struct FString msg );
	void Say ( struct FString msg );
	bool AllowTextMessage ( struct FString msg );
	void ServerMutate ( struct FString MutateString );
	void Mutate ( struct FString MutateString );
	void FOV ( float F );
	void ResetFOV ( );
	void SetFOV ( float NewFOV );
	void FixFOV ( );
	void eventDestroyed ( );
	void CleanupPawn ( );
	void eventClearOnlineDelegates ( );
	void OnPartyMembersInfoChanged ( struct FString PlayerName, struct FUniqueNetId PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4 );
	void OnPartyMemberListChanged ( unsigned long bJoinedOrLeft, struct FString PlayerName, struct FUniqueNetId PlayerID );
	void RegisterOnlineDelegates ( );
	void PlayBeepSound ( );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	void SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI );
	void TeamTalk ( );
	void Talk ( );
	class USoundCue* CreateTTSSoundCue ( struct FString StrToSpeak, class APlayerReplicationInfo* PRI );
	bool AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI );
	bool CanCommunicate ( );
	void eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime );
	void eventClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime );
	void eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization );
	bool IsClosestLocalPlayerToActor ( class AActor* TheActor );
	struct FAkPlayingInfo eventWwiseClientHearSoundReliable ( class UAkEvent* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded, class UAkSwitch* InSwitch );
	struct FAkPlayingInfo eventWwiseClientHearSound ( class UAkEvent* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded, class UAkSwitch* InSwitch );
	struct FAkPlayingInfo eventClientPlayAkEvent ( class UAkEvent* Event );
	void eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	class UAudioComponent* GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation );
	void HearSoundFinished ( class UAudioComponent* AC );
	void eventClientPlaySound ( class USoundCue* ASound );
	void eventClearHUDMessage ( unsigned char MsgType );
	void eventDisplayHUDMessage ( unsigned char MsgType, struct FString MessageString, float Duration, struct FColor DrawColor, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class UObject* OptionalObject );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void CleanupPRI ( );
	void HandlePickup ( class AInventory* Inv );
	void SetLobbyShown ( unsigned long bShown );
	bool WasLobbyShown ( );
	void ClientNotifyPostInitialize ( );
	void ClientSetHUD ( class UClass* newHUDType, unsigned long bShowLobby );
	void PawnDied ( class APawn* P );
	void eventUnPossess ( );
	void ServerAcknowledgePossession ( class APawn* P );
	void AcknowledgePossession ( class APawn* P );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void GivePawn ( class APawn* NewPawn );
	void AskForPawn ( );
	void ClientGotoState ( struct FName NewState, struct FName NewLabel );
	bool IsMouseAvailable ( );
	bool IsKeyboardAvailable ( );
	void SetUseTiltForwardAndBack ( unsigned long bActive );
	void SetOnlyUseControllerTiltInput ( unsigned long bActive );
	void SetControllerTiltActive ( unsigned long bActive );
	void SetControllerTiltDesiredIfAvailable ( unsigned long bActive );
	bool IsControllerTiltActive ( );
	void SetRumbleScale ( float ScaleBy );
	void ReloadProfileSettings ( );
	void UnregisterStandardPlayerDataStores ( );
	void UnregisterPlayerDataStores ( );
	void RegisterStandardPlayerDataStores ( );
	void RegisterCustomPlayerDataStores ( );
	void RegisterPlayerDataStores ( );
	void ClientInitializeDataStores ( );
	void eventInitInputSystem ( );
	class UOnlineSubsystem* GetOnlineSubsystem ( );
	void PostControllerIdChange ( );
	void PreControllerIdChange ( );
	void CleanOutSavedMoves ( );
	void ClientReset ( );
	void Reset ( );
	void SpawnDefaultHUD ( );
	void EnableCheats ( );
	void AddCheats ( unsigned long bForce );
	void eventKickWarning ( );
	void ServerGivePawn ( );
	void ServerShortTimeout ( );
	void ResetTimeMargin ( );
	void OnJoinMigratedGame ( struct FName SessionName, unsigned long bWasSuccessful );
	void PeerDesignatedAsClient ( struct FName SessionName );
	void OnUnregisterPlayerCompleteForJoinMigrate ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	void eventPeerReceivedMigratedSession ( struct FUniqueNetId FromPeerNetId, struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void TellPeerToTravelToSession ( struct FUniqueNetId ToPeerNetId, struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo, int PlatformSpecificInfoSize );
	void TellPeerToTravel ( struct FUniqueNetId ToPeerNetId );
	void PeerTravelAsHost ( float TravelCountdownTimer, struct FString URL );
	struct FString GetNewPeerHostURL ( );
	void PeerDesignatedAsHost ( struct FName SessionName );
	class UClass* GetCurrentSearchClass ( );
	void OnHostMigratedOnlineGame ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnUnregisterPlayerCompleteForHostMigrate ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool RemoveMissingPeersFromSession ( struct FName SessionName, struct FScriptDelegate UnregisterDelegate );
	void OnMissingPeersUnregistered ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	void GetRegisteredPlayersInSession ( struct FName SessionName, TArray< struct FUniqueNetId >* OutRegisteredPlayers );
	void NotifyHostMigrationStarted ( );
	bool eventMigrateNewHost ( );
	bool IsBestHostPeer ( struct FUniqueNetId PeerNetId );
	void eventNotifyPeerDisconnectHost ( struct FUniqueNetId PeerNetId );
	void ClientUpdateBestNextHosts ( struct FUniqueNetId* SortedNextHosts, unsigned char NumEntries );
	void ServerRemovePeer ( struct FUniqueNetId PeerNetId );
	void ServerAddPeer ( struct FUniqueNetId PeerNetId, unsigned char NatType );
	void eventRemovePeer ( struct FUniqueNetId PeerNetId );
	void eventAddPeer ( struct FUniqueNetId PeerNetId, unsigned char NatType );
	int FindConnectedPeerIndex ( struct FUniqueNetId PeerNetId );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* SpawnCoverReplicator ( );
	bool CanUnpauseControllerConnected ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	bool CanUnpauseExternalUI ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void ForceClearUnpauseDelegates ( );
	void DisableActorHeadTracking ( class AActor* TargetActor );
	void EnableActorHeadTracking ( class AActor* TargetActor, struct FName* TrackControllerName, class UClass** ActorClassesToLookAt, unsigned long bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, struct FName* TargetBoneNames );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void CleanUpAudioComponents ( );
	int FindStairRotation ( float DeltaTime );
	void eventServerProcessConvolve ( struct FString C, int H );
	void eventClientConvolve ( struct FString C, int H );
	void SetAudioGroupVolume ( struct FName GroupName, float Volume );
	void SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge );
	struct FString PasteFromClipboard ( );
	void CopyToClipboard ( struct FString Text );
	struct FString GetDefaultURL ( struct FString Option );
	void UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default );
	void eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	struct FString GetServerNetworkAddress ( );
	struct FString GetPlayerNetworkAddress ( );
	void SetNetSpeed ( int NewSpeed );
};

UClass* APlayerController::pClassPointer = NULL;

// Class Engine.CheatManager
// 0x0020 (0x005C - 0x003C)
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                         		// 0x003C (0x0004) [0x0000000000000000]              
	class UClass*                                      DebugCameraControllerClass;                       		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     ViewingFrom;                                      		// 0x0044 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OwnCamera;                                        		// 0x0050 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 493 ];

		return pClassPointer;
	};

	void ToggleAssertOnGBXCheck ( );
	void SetGBXCheckDisplayDuration ( int NewDuration );
	void SetNumberOfDebugMessages ( int NumberOfMessages );
	void EnableDebugMessages ( );
	void DisableDebugMessages ( );
	void BehaviorDebug ( );
	void DumpCoverStats ( );
	void ToggleAILogging ( );
	void VerifyNavMeshCoverRefs ( );
	void PrintNavMeshObstacles ( );
	void PrintAllPathObjectEdges ( );
	void NavMeshVerification ( float interval );
	void DrawUnsupportingEdges ( struct FString PawnClassName );
	void VerifyNavMeshObjects ( );
	void LogParticleActivateSystemCalls ( unsigned long bShouldLog );
	void LogPlaySoundCalls ( unsigned long bShouldLog );
	void InitCheatManager ( );
};

UClass* UCheatManager::pClassPointer = NULL;

// Class Engine.Client
// 0x0014 (0x0050 - 0x003C)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x003C (0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                              		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisplayGamma;                                     		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialButtonRepeatDelay;                         		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ButtonRepeatDelay;                                		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 495 ];

		return pClassPointer;
	};

};

UClass* UClient::pClassPointer = NULL;

// Class Engine.ClipPadEntry
// 0x0018 (0x0054 - 0x003C)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                            		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Text;                                             		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 501 ];

		return pClassPointer;
	};

};

UClass* UClipPadEntry::pClassPointer = NULL;

// Class Engine.CodecMovie
// 0x0004 (0x0040 - 0x003C)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                 		// 0x003C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 503 ];

		return pClassPointer;
	};

};

UClass* UCodecMovie::pClassPointer = NULL;

// Class Engine.CodecMovieBink
// 0x0024 (0x0064 - 0x0040)
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      UnknownData00[ 0x24 ];                            		// 0x0040 (0x0024) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 505 ];

		return pClassPointer;
	};

};

UClass* UCodecMovieBink::pClassPointer = NULL;

// Class Engine.CodecMovieFallback
// 0x0004 (0x0044 - 0x0040)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                      		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 507 ];

		return pClassPointer;
	};

};

UClass* UCodecMovieFallback::pClassPointer = NULL;

// Class Engine.CurveEdPresetCurve
// 0x0018 (0x0054 - 0x003C)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                        		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FPresetGeneratedPoint >             Points;                                           		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 509 ];

		return pClassPointer;
	};

};

UClass* UCurveEdPresetCurve::pClassPointer = NULL;

// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x003C - 0x003C)
class UCustomPropertyItemHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 511 ];

		return pClassPointer;
	};

};

UClass* UCustomPropertyItemHandler::pClassPointer = NULL;

// Class Engine.DamageAdjuster
// 0x0000 (0x003C - 0x003C)
class UDamageAdjuster : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 513 ];

		return pClassPointer;
	};

	bool AdjustDamage ( float* Damage, struct FVector* Momentum, struct FTraceHitInfo* HitInfo, struct FDamageInfo* DmgInfo );
};

UClass* UDamageAdjuster::pClassPointer = NULL;

// Class Engine.DamagePipeline
// 0x0094 (0x00D0 - 0x003C)
class UDamagePipeline : public UObject
{
public:
	unsigned long                                      bInUse : 1;                                       		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanHitFriendly : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOvercharged : 1;                                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	class UDamageTypeDefinition*                       DamageTypeDef;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x0044 (0x0004) [0x0000000000000000]              
	class UObject*                                     DirectHitObject;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                PenetrationCount;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	struct FDamageEventSummary                         DamageSummary;                                    		// 0x0050 (0x0078) [0x0000000000000000]              
	float                                              BarrelSourceTime;                                 		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              PlantSourceTime;                                  		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 515 ];

		return pClassPointer;
	};

	bool GetWouldBeHealedSomehowByFriendlyFire ( class APawn* CheckTarget, class AController* CheckSource, class UClass* InDamageSource );
	void SetPlantSourceTime ( float inPlantSourceTime );
	void SetBarrelSourceTime ( float inBarrelSourceTime );
	float GetPlantSourceTime ( );
	float GetBarrelSourceTime ( );
	void SetPenetrationCount ( int Count );
	int GetPenetrationCount ( );
	bool GetOvercharged ( );
	void SetOvercharged ( unsigned long bNewOvercharged );
	bool GetCanInflictFriendlyFire ( );
	void SetImpactDef ( class UImpactDefinition* InImpactDef );
	class UImpactDefinition* GetImpactDefinition ( );
	void SetDamageTypeDef ( class UDamageTypeDefinition* InDamageTypeDef );
	class UDamageTypeDefinition* GetDamageTypeDef ( );
	void Initialize ( class UDamageTypeDefinition* InDamageTypeDef, class UImpactDefinition* InImpactDefinition, unsigned long inCanHitFriendly, class UObject* InHitObject );
	void ResetToDefaults ( );
	bool ConvertDamageToHealing ( float IncomingDamage, class APawn* DamagedPawn, class AController* DamageInstigator, class UClass* DamageSource, struct FTraceHitInfo InHitInfo );
	struct FDamageEventSummary AdjustDamage ( float IncomingDamage, float DamageSeverityPercent, class AActor* DamagedActor, class AController* DamageInstigator, struct FVector HitLocation, class UClass* DamageSource, struct FVector HitMomentum, struct FTraceHitInfo HitInfo );
};

UClass* UDamagePipeline::pClassPointer = NULL;

// Class Engine.DamageType
// 0x0028 (0x0064 - 0x003C)
class UDamageType : public UObject
{
public:
	unsigned long                                      bArmorStops : 1;                                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCausedByWorld : 1;                               		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bExtraMomentumZ : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCausesFracture : 1;                              		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRadialDamageVelChange : 1;                       		// 0x003C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              KDamageImpulse;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathVel;                                        		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathUpKick;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialDamageImpulse;                              		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleDamageScaling;                             		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              VehicleMomentumScaling;                           		// 0x0054 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                 		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              FracturedMeshDamage;                              		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 517 ];

		return pClassPointer;
	};

	float VehicleDamageScalingFor ( class AVehicle* V );
};

UClass* UDamageType::pClassPointer = NULL;

// Class Engine.KillZDamageType
// 0x0000 (0x0064 - 0x0064)
class UKillZDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 519 ];

		return pClassPointer;
	};

};

UClass* UKillZDamageType::pClassPointer = NULL;

// Class Engine.DistributionFloatConstant
// 0x0004 (0x0054 - 0x0050)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 521 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatConstant::pClassPointer = NULL;

// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x006D - 0x0054)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinInput;                                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInput;                                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOutput;                                        		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOutput;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamMode;                                        		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 523 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatParameterBase::pClassPointer = NULL;

// Class Engine.DistributionFloatConstantCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 525 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatConstantCurve::pClassPointer = NULL;

// Class Engine.DistributionFloatUniform
// 0x0008 (0x0058 - 0x0050)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                              		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 527 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatUniform::pClassPointer = NULL;

// Class Engine.DistributionFloatUniformCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 529 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatUniformCurve::pClassPointer = NULL;

// Class Engine.DistributionVectorConstant
// 0x0011 (0x0061 - 0x0050)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                         		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 531 ];

		return pClassPointer;
	};

};

UClass* UDistributionVectorConstant::pClassPointer = NULL;

// Class Engine.DistributionVectorParameterBase
// 0x003E (0x009F - 0x0061)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinInput;                                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxInput;                                         		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinOutput;                                        		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxOutput;                                        		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamModes[ 0x3 ];                                		// 0x009C (0x0003) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 533 ];

		return pClassPointer;
	};

};

UClass* UDistributionVectorParameterBase::pClassPointer = NULL;

// Class Engine.DistributionVectorConstantCurve
// 0x0015 (0x0065 - 0x0050)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 535 ];

		return pClassPointer;
	};

};

UClass* UDistributionVectorConstantCurve::pClassPointer = NULL;

// Class Engine.DistributionVectorUniform
// 0x0020 (0x0070 - 0x0050)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                              		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Min;                                              		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      LockedAxes;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x006D (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 537 ];

		return pClassPointer;
	};

};

UClass* UDistributionVectorUniform::pClassPointer = NULL;

// Class Engine.DistributionVectorUniformCurve
// 0x0019 (0x0069 - 0x0050)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                    		// 0x0050 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes1 : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockAxes2 : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      LockedAxes[ 0x2 ];                                		// 0x0064 (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x0066 (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 539 ];

		return pClassPointer;
	};

};

UClass* UDistributionVectorUniformCurve::pClassPointer = NULL;

// Class Engine.Download
// 0x0A34 (0x0A70 - 0x003C)
class UDownload : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xA34 ];                           		// 0x003C (0x0A34) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 541 ];

		return pClassPointer;
	};

};

UClass* UDownload::pClassPointer = NULL;

// Class Engine.ChannelDownload
// 0x0004 (0x0A74 - 0x0A70)
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0A70 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 543 ];

		return pClassPointer;
	};

};

UClass* UChannelDownload::pClassPointer = NULL;

// Class Engine.EdCoordSystem
// 0x0050 (0x008C - 0x003C)
class UEdCoordSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x003C (0x0004) MISSED OFFSET
	struct FMatrix                                     M;                                                		// 0x0040 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Desc;                                             		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 545 ];

		return pClassPointer;
	};

};

UClass* UEdCoordSystem::pClassPointer = NULL;

// Class Engine.EditorLinkSelectionInterface
// 0x0000 (0x003C - 0x003C)
class UEditorLinkSelectionInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 547 ];

		return pClassPointer;
	};

};

UClass* UEditorLinkSelectionInterface::pClassPointer = NULL;

// Class Engine.EngineTypes
// 0x0000 (0x003C - 0x003C)
class UEngineTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 549 ];

		return pClassPointer;
	};

};

UClass* UEngineTypes::pClassPointer = NULL;

// Class Engine.FacebookIntegration
// 0x0078 (0x00B4 - 0x003C)
class UFacebookIntegration : public UObject
{
public:
	struct FString                                     AppID;                                            		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UserName;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UserId;                                           		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AccessToken;                                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   AuthorizationDelegates;                           		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   FacebookRequestCompleteDelegates;                 		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   WebRequestCompleteDelegates;                      		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthorizationComplete__Delegate;              		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFacebookRequestComplete__Delegate;            		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWebRequestComplete__Delegate;                 		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 551 ];

		return pClassPointer;
	};

	void ClearWebRequestCompleteDelegate ( struct FScriptDelegate InDelegate );
	void AddWebRequestCompleteDelegate ( struct FScriptDelegate InDelegate );
	void OnWebRequestComplete ( struct FString Response );
	void ClearFacebookRequestCompleteDelegate ( struct FScriptDelegate InDelegate );
	void AddFacebookRequestCompleteDelegate ( struct FScriptDelegate InDelegate );
	void OnFacebookRequestComplete ( struct FString JsonString );
	void ClearAuthorizationCompleteDelegate ( struct FScriptDelegate InDelegate );
	void AddAuthorizationCompleteDelegate ( struct FScriptDelegate InDelegate );
	void OnAuthorizationComplete ( unsigned long bSucceeded );
	void eventDisconnect ( );
	void eventFacebookRequest ( struct FString GraphRequest );
	void eventWebRequest ( struct FString URL, struct FString POSTPayload );
	bool eventIsAuthorized ( );
	bool eventAuthorize ( );
	bool eventInit ( );
};

UClass* UFacebookIntegration::pClassPointer = NULL;

// Class Engine.FaceFXAnimSet
// 0x0024 (0x0060 - 0x003C)
class UFaceFXAnimSet : public UObject
{
public:
	unsigned long                                      bStreamWithAudio : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    InternalFaceFXAnimSet;                            		// 0x0040 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXAnimSetBytes;                            		// 0x0044 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXMiniSessionBytes;                        		// 0x0050 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                NumLoadErrors;                                    		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 553 ];

		return pClassPointer;
	};

};

UClass* UFaceFXAnimSet::pClassPointer = NULL;

// Class Engine.FaceFXAsset
// 0x0038 (0x0074 - 0x003C)
class UFaceFXAsset : public UObject
{
public:
	struct FPointer                                    FaceFXActor;                                      		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXActorBytes;                              		// 0x0040 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXSessionBytes;                            		// 0x004C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UFaceFXAnimSet* >                    MountedFaceFXAnimSets;                            		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumLoadErrors;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< struct FGroupAnimationAndSoundIdentifier > SoundNodeWaveToGroupAndAnimNameArray;             		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 555 ];

		return pClassPointer;
	};

	bool PlayFaceFxAnimFromSoundNodeOnActor ( struct FString SoundToPlay, class USoundCue* SoundCueToPlay, class UIFaceFXActor** TargetActor );
	void UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
	void MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
};

UClass* UFaceFXAsset::pClassPointer = NULL;

// Class Engine.Font
// 0x0114 (0x0150 - 0x003C)
class UFont : public UObject
{
public:
	TArray< struct FFontCharacter >                    Characters;                                       		// 0x003C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UTexture2D* >                        Textures;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0054 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Font.CharRemap
	int                                                IsRemapped;                                       		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              EmScale;                                          		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Ascent;                                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Descent;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Leading;                                          		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Kerning;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFontImportOptionsData                      ImportOptions;                                    		// 0x00A8 (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumCharacters;                                    		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      MaxCharHeight;                                    		// 0x0140 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ScalingFactor;                                    		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 557 ];

		return pClassPointer;
	};

	void GetStringHeightAndWidth ( struct FString* InString, int* Height, int* Width );
	float GetMaxCharHeight ( );
	float GetAuthoredViewportHeight ( float ViewportHeight );
	float GetScalingFactor ( float HeightTest );
	int GetResolutionPageIndex ( float HeightTest );
};

UClass* UFont::pClassPointer = NULL;

// Class Engine.MultiFont
// 0x000C (0x015C - 0x0150)
class UMultiFont : public UFont
{
public:
	TArray< float >                                    ResolutionTestTable;                              		// 0x0150 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 559 ];

		return pClassPointer;
	};

	int GetResolutionTestTableIndex ( float HeightTest );
};

UClass* UMultiFont::pClassPointer = NULL;

// Class Engine.FontImportOptions
// 0x0094 (0x00D0 - 0x003C)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                             		// 0x003C (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 561 ];

		return pClassPointer;
	};

};

UClass* UFontImportOptions::pClassPointer = NULL;

// Class Engine.ForceFeedbackManager
// 0x001C (0x0058 - 0x003C)
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsPaused : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                CurrentSample;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              ElapsedTime;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              ScaleAllWaveformsBy;                              		// 0x004C (0x0004) [0x0000000000000000]              
	class AActor*                                      WaveformInstigator;                               		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                CurrentWaveformRef;                               		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 563 ];

		return pClassPointer;
	};

	void PauseWaveform ( unsigned long bPause );
	void StopForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm );
	void eventSetWaveform ( class UForceFeedbackWaveform* WaveForm );
	void PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator );
};

UClass* UForceFeedbackManager::pClassPointer = NULL;

// Class Engine.ForceFeedbackWaveform
// 0x0020 (0x005C - 0x003C)
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FWaveformSample >                   Samples;                                          		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Scale;                                            		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WaveformFalloffStartDistance;                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxWaveformDistance;                              		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WaveformRef;                                      		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 565 ];

		return pClassPointer;
	};

	void CopyDataTo ( class UForceFeedbackWaveform** dst );
};

UClass* UForceFeedbackWaveform::pClassPointer = NULL;

// Class Engine.GameplayEvents
// 0x0128 (0x0164 - 0x003C)
class UGameplayEvents : public UObject
{
public:
	struct FPointer                                    Archive;                                          		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     StatsFileName;                                    		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FGameplayEventsHeader                       Header;                                           		// 0x004C (0x002C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGameSessionInformation                     CurrentSessionInfo;                               		// 0x0078 (0x0080) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerInformation >                PlayerList;                                       		// 0x00F8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTeamInformation >                  TeamList;                                         		// 0x0104 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGameplayEventMetaData >            SupportedEvents;                                  		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponClassEventData >             WeaponClassArray;                                 		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDamageClassEventData >             DamageClassArray;                                 		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FProjectileClassEventData >         ProjectileClassArray;                             		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPawnClassEventData >               PawnClassArray;                                   		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ActorArray;                                       		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           SoundCueArray;                                    		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 567 ];

		return pClassPointer;
	};

	struct FString eventGetFilename ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
};

UClass* UGameplayEvents::pClassPointer = NULL;

// Class Engine.GameplayEventsReader
// 0x000C (0x0170 - 0x0164)
class UGameplayEventsReader : public UGameplayEvents
{
public:
	TArray< class UGameplayEventsHandler* >            RegisteredHandlers;                               		// 0x0164 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 569 ];

		return pClassPointer;
	};

	float GetSessionDuration ( );
	float GetSessionEnd ( );
	float GetSessionStart ( );
	struct FString GetSessionTimestamp ( );
	int GetPlatform ( );
	int GetTitleID ( );
	struct FString GetSessionID ( );
	void ProcessStreamEnd ( );
	void ProcessStream ( );
	void ProcessStreamStart ( );
	void eventUnregisterHandler ( class UGameplayEventsHandler* ExistingHandler );
	void eventRegisterHandler ( class UGameplayEventsHandler* NewHandler );
	bool SerializeHeader ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
};

UClass* UGameplayEventsReader::pClassPointer = NULL;

// Class Engine.GameplayEventsWriter
// 0x0004 (0x0168 - 0x0164)
class UGameplayEventsWriter : public UGameplayEvents
{
public:
	class AGameInfo*                                   Game;                                             		// 0x0164 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 571 ];

		return pClassPointer;
	};

	int RecordCoverLinkFireLinks ( class ACoverLink* Link, class AController* Player );
	void RecordAIPathFail ( class AController* AI, struct FString Reason, struct FVector Dest );
	class UGenericParamListStatEntry* GetGenericParamListEntry ( );
	void LogSystemPollEvents ( );
	void LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value );
	void LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount );
	void LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value );
	void LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target );
	void LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead );
	void LogAllPlayerPositionsEvent ( int EventID );
	void LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen );
	void LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID );
	void LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString );
	void LogPlayerFloatEvent ( int EventID, class AController* Player, float Value );
	void LogPlayerIntEvent ( int EventID, class AController* Player, int Value );
	void LogTeamStringEvent ( int EventID, class ATeamInfo* Team, struct FString Value );
	void LogTeamFloatEvent ( int EventID, class ATeamInfo* Team, float Value );
	void LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value );
	void LogGamePositionEvent ( int EventID, float Value, struct FVector* Position );
	void LogGameFloatEvent ( int EventID, float Value );
	void LogGameStringEvent ( int EventID, struct FString Value );
	void LogGameIntEvent ( int EventID, int Value );
	int eventGetPlaylistId ( );
	int eventGetGameTypeId ( );
	void Poll ( );
	bool SerializeFooter ( );
	bool SerializeHeader ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
	bool IsSessionInProgress ( );
	void EndLogging ( );
	void ResetLogging ( float HeartbeatDelta );
	void StartLogging ( float HeartbeatDelta );
	int ResolvePlayerIndex ( class AController* Player );
};

UClass* UGameplayEventsWriter::pClassPointer = NULL;

// Class Engine.GameplayEventsHandler
// 0x001C (0x0058 - 0x003C)
class UGameplayEventsHandler : public UObject
{
public:
	TArray< int >                                      EventIDFilter;                                    		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGameStatGroup >                    GroupFilter;                                      		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGameplayEventsReader*                       Reader;                                           		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 573 ];

		return pClassPointer;
	};

	void RemoveFilter ( int EventID );
	void AddFilter ( int EventID );
	void eventResolveGroupFilters ( );
	void eventPostProcessStream ( );
	void eventPreProcessStream ( );
	void SetReader ( class UGameplayEventsReader* NewReader );
};

UClass* UGameplayEventsHandler::pClassPointer = NULL;

// Class Engine.GameViewportClient
// 0x00E0 (0x011C - 0x003C)
class UGameViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FExec;                                    		// 0x0040 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    Viewport;                                         		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ViewportFrame;                                    		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UInteraction* >                      GlobalInteractions;                               		// 0x004C (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UClass*                                      UIControllerClass;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	class UUIInteraction*                              UIController;                                     		// 0x005C (0x0004) [0x0000000000000000]              
	class UConsole*                                    ViewportConsole;                                  		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FPointer                                    pShowFlags;                                       		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LoadingMessage;                                   		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SavingMessage;                                    		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectingMessage;                                		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PausedMessage;                                    		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PrecachingMessage;                                		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShowTitleSafeZone : 1;                           		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayingUIMouseCursor : 1;                     		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUIMouseCaptureOverride : 1;                      		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bOverrideDiffuseAndSpecular : 1;                  		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsPlayInEditorViewport : 1;                      		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bShowSystemMouseCursor : 1;                       		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDebugNoGFxUI : 1;                                		// 0x00A4 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bUseHardwareCursorWhenWindowed : 1;               		// 0x00A4 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	struct FTitleSafeZoneArea                          TitleSafeZone;                                    		// 0x00A8 (0x0010) [0x0000000000000000]              
	TArray< struct FSplitscreenData >                  SplitscreenInfo;                                  		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      DesiredSplitscreenType;                           		// 0x00C4 (0x0001) [0x0000000000000000]              
	unsigned char                                      ActiveSplitscreenType;                            		// 0x00C5 (0x0001) [0x0000000000000000]              
	unsigned char                                      Default2PSplitType;                               		// 0x00C6 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Default3PSplitType;                               		// 0x00C7 (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ProgressMessage[ 0x2 ];                           		// 0x00C8 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ProgressTimeOut;                                  		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              ProgressFadeTime;                                 		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< struct FDebugDisplayProperty >             DebugProperties;                                  		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    ScaleformInteraction;                             		// 0x00F4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FScriptDelegate                             __HandleInputKey__Delegate;                       		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                      		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleInputChar__Delegate;                      		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 575 ];

		return pClassPointer;
	};

	void DebugSetUISystemEnabled ( unsigned long bOldUISystemActive, unsigned long bGFxUISystemActive );
	void BecomePrimaryPlayer ( int PlayerIndex );
	void OnPrimaryPlayerSwitch ( class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer );
	void FixupOwnerReferences ( TArray< int > IDMappings );
	class ULocalPlayer* GetPlayerOwner ( int PlayerIndex );
	void ClearProgressMessages ( );
	void SetProgressTime ( float T );
	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	void eventSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	int RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer );
	int AddLocalPlayer ( class ULocalPlayer* NewPlayer );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void DisplayProgressMessage ( class UCanvas* Canvas );
	void eventPostRender ( class UCanvas* Canvas );
	void DrawTitleSafeArea ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	bool CalculateDeadZoneForAllSides ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone );
	void CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical );
	void GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height );
	bool HasRightSafeZone ( int LocalPlayerIndex );
	bool HasLeftSafeZone ( int LocalPlayerIndex );
	bool HasBottomSafeZone ( int LocalPlayerIndex );
	bool HasTopSafeZone ( int LocalPlayerIndex );
	int ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer );
	void eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos );
	void eventLayoutPlayers ( );
	void UpdateActiveSplitscreenType ( );
	unsigned char GetSplitscreenConfiguration ( );
	void eventSetSplitscreenConfiguration ( unsigned char SplitType );
	void eventGameSessionEnded ( );
	int eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex );
	bool CreateInitialPlayer ( struct FString* OutError );
	bool eventInit ( struct FString* OutError );
	class ULocalPlayer* eventFindPlayerByControllerId ( int ControllerId );
	bool eventRemovePlayer ( class ULocalPlayer* ExPlayer );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	void NotifySplitscreenLayoutChanged ( );
	void SetCustomInteractionObject ( class UInteraction* InInteraction );
	class UClass* GetCustomInteractionClass ( int InIndex );
	int GetNumCustomInteractions ( );
	bool ShouldForceFullscreenViewport ( );
	bool IsFullScreenViewport ( );
	void GetViewportSize ( struct FVector2D* out_ViewportSize );
	struct FString ConsoleCommand ( struct FString Command );
	bool HandleInputChar ( int ControllerId, struct FString Unicode );
	bool HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

UClass* UGameViewportClient::pClassPointer = NULL;

// Class Engine.GBXCrossLevelReferenceContainer
// 0x0004 (0x0040 - 0x003C)
class UGBXCrossLevelReferenceContainer : public UObject
{
public:
	class UObject*                                     CrossLevelObjectRef;                              		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 577 ];

		return pClassPointer;
	};

};

UClass* UGBXCrossLevelReferenceContainer::pClassPointer = NULL;

// Class Engine.GBXDefinition
// 0x0000 (0x003C - 0x003C)
class UGBXDefinition : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 579 ];

		return pClassPointer;
	};

	void InitializeDefinitionActor ( class AActor* DefinitionActor );
	class UClass* GetDefinitionActorClass ( );
	struct FString StaticGetFullNameForDefinition ( class UGBXDefinition* Definition );
	struct FString GetFullDefinitionName ( );
	class UGBXDefinition* GetDefinition ( class UClass* DefinitionClass, struct FString DefinitionName );
};

UClass* UGBXDefinition::pClassPointer = NULL;

// Class Engine.BaseHitRegionDefinition
// 0x0000 (0x003C - 0x003C)
class UBaseHitRegionDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 581 ];

		return pClassPointer;
	};

};

UClass* UBaseHitRegionDefinition::pClassPointer = NULL;

// Class Engine.DamageTypeDefinition
// 0x0000 (0x003C - 0x003C)
class UDamageTypeDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 583 ];

		return pClassPointer;
	};

	float CalcRadiusDamageScale ( float Dist, float DamageRadius, struct FVector HurtOrigin );
	float GetMinDamagePercent ( );
	float GetMinDamageRadius ( );
	float GetMaxDamageRadius ( );
	float GetRigidBodyMomentumScale ( );
	float GetUpwardMomentumScale ( );
	bool ApplyUpwardMomentum ( );
	void RecordRecentDamage ( float Damage, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, unsigned long bWasShieldDamage, struct FRecentDamageTracker* RecentDamage );
	bool IsHealingDamageType ( );
	float GetPawnDamageTypeModifier ( class APawn* PawnTakingDamage );
	float GetSurfaceDamageTypeModifier ( unsigned char DamageSurfaceType, class AController* DamageInstigator );
	float GetSurfaceMomentumTypeModifier ( unsigned char DamageSurfaceType, class AController* DamageInstigator );
};

UClass* UDamageTypeDefinition::pClassPointer = NULL;

// Class Engine.EngineInteractionIconDefinition
// 0x0000 (0x003C - 0x003C)
class UEngineInteractionIconDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 585 ];

		return pClassPointer;
	};

};

UClass* UEngineInteractionIconDefinition::pClassPointer = NULL;

// Class Engine.PawnAllegiance
// 0x0028 (0x0064 - 0x003C)
class UPawnAllegiance : public UGBXDefinition
{
public:
	unsigned char                                      DefaultOpinion;                                   		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SelfOpinion;                                      		// 0x003D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ForcedOtherOpinion;                               		// 0x003E (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FOpinionData >                      MyOpinions;                                       		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FOpinionData >                      OtherOpinions;                                    		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bForceAllOtherOpinions : 1;                       		// 0x0058 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FName                                       AllegianceKilledStat;                             		// 0x005C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 587 ];

		return pClassPointer;
	};

	bool IsAllegianceChild ( class UITargetable* Parent, class UITargetable* TestChild );
	void SetParent ( class UITargetable* Parent, class UITargetable* Child );
	void RemoveChildren ( class UITargetable* Parent );
	void RemoveParent ( class UITargetable* Child );
	bool ConsidersObjectNeutral ( class UObject* TestActor );
	bool ConsidersObjectFriendly ( class UObject* TestActor );
	bool ConsidersObjectEnemy ( class UObject* TestActor );
	bool ConsidersNeutral ( class UPawnAllegiance* TestAllegiance );
	bool ConsidersFriendly ( class UPawnAllegiance* TestAllegiance );
	bool ConsidersEnemy ( class UPawnAllegiance* TestAllegiance );
	unsigned char GetObjectOpinion ( class UObject* Other );
	unsigned char GetOpinion ( class UPawnAllegiance* Other );
};

UClass* UPawnAllegiance::pClassPointer = NULL;

// Class Engine.PawnInteractionDefinition
// 0x0034 (0x0070 - 0x003C)
class UPawnInteractionDefinition : public UGBXDefinition
{
public:
	unsigned long                                      bSupportsUseEvents : 1;                           		// 0x003C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupportsUseEventsWhenDead : 1;                   		// 0x003C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAimToInteract : 1;                               		// 0x003C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseInteractDistance : 1;                         		// 0x003C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupportsTouchEvents : 1;                         		// 0x003C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupportsTouchEventsWhenDead : 1;                 		// 0x003C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTouchAIPawns : 1;                                		// 0x003C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTouchPlayerPawns : 1;                            		// 0x003C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTouchVehicles : 1;                               		// 0x003C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTouchProjectiles : 1;                            		// 0x003C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	float                                              InteractDistance;                                 		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TouchRadius;                                      		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TouchHeight;                                      		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnTouch;                                          		// 0x004C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnUnTouch;                                        		// 0x0058 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnUse;                                            		// 0x0064 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 589 ];

		return pClassPointer;
	};

};

UClass* UPawnInteractionDefinition::pClassPointer = NULL;

// Class Engine.GBXNavMeshPathModifier
// 0x0000 (0x003C - 0x003C)
class UGBXNavMeshPathModifier : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 591 ];

		return pClassPointer;
	};

};

UClass* UGBXNavMeshPathModifier::pClassPointer = NULL;

// Class Engine.GBXNavMeshPathModifier_Simplify
// 0x0004 (0x0040 - 0x003C)
class UGBXNavMeshPathModifier_Simplify : public UGBXNavMeshPathModifier
{
public:
	float                                              CornerCutInterval;                                		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 593 ];

		return pClassPointer;
	};

};

UClass* UGBXNavMeshPathModifier_Simplify::pClassPointer = NULL;

// Class Engine.GBXNavMeshPathModifier_SmoothTurns
// 0x0010 (0x004C - 0x003C)
class UGBXNavMeshPathModifier_SmoothTurns : public UGBXNavMeshPathModifier
{
public:
	float                                              TooSharpThreshold;                                		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAdjustThreshold;                               		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CornerLengthModifier;                             		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestInterval;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 595 ];

		return pClassPointer;
	};

};

UClass* UGBXNavMeshPathModifier_SmoothTurns::pClassPointer = NULL;

// Class Engine.GearboxEngineGlobals
// 0x0048 (0x0084 - 0x003C)
class UGearboxEngineGlobals : public UObject
{
public:
	class UTargetableList*                             TheTargetableList;                                		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2D*                                  AnimDebugTrack;                                   		// 0x0040 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  AnimDebugCarat;                                   		// 0x0044 (0x0004) [0x0000000000000000]              
	class UGearboxEngineGlobals*                       SingletonInstance;                                		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPersistentGameDataManager*                  ThePersistentDataManager;                         		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPlayerOwnedComponent >             PlayerOwnedComponents;                            		// 0x0050 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     DynamicShadowDirection;                           		// 0x005C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              WholeSceneDynamicShadowRadius;                    		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAkCallBackGetRTPC >                AkCallBackGetRTPCs;                               		// 0x006C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDlgFinished__Delegate;                        		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 597 ];

		return pClassPointer;
	};

	float GetRTPCCallBackValue ( class UObject* Owner, class UAkRtpc* RTPC );
	void RemoveRTPCCallback ( class UObject* Owner );
	void AddRTPCCallBack ( class UObject* Owner, class UAkRtpc* RTPC, class UAkComponent* InComponent );
	class UDominantDirectionalLightComponent* GetTimeOfDayDominantDirectionalLightComponent ( );
	struct FString ResolveCustomMarkupString ( struct FString StringToResolve );
	void ReleaseDamagePipelineObject ( class UDamagePipeline* Pipeline );
	class UDamagePipeline* GetDamagePipelineObject ( );
	bool IsPlayerOwnedComponentOwnedBy ( class UActorComponent* Component, class AActor* PotentialPlayerOwner );
	class AActor* GetComponentPlayerOwner ( class UActorComponent* Component );
	void RemovePlayerOwnedComponentsByOwner ( class AActor* PlayerOwner );
	void RemovePlayerOwnedComponentsByComponent ( class UActorComponent* Component );
	void RemovePlayerOwnedComponent ( class UActorComponent* Component, class AActor* PlayerOwner );
	void AddPlayerOwnedComponent ( class UActorComponent* Component, class AActor* PlayerOwner );
	void SetLoadingMovieMustPlayToEnd ( );
	bool ShouldPlayLoadingMovieToEnd ( );
	bool FreeTexture2D ( class UTexture2D* Texture );
	class UTexture2D* GetTexture2D ( );
	bool OnDlgFinished ( class UIDialogBox* Dlg, int ControllerId );
	class UIDialogBox* eventShowDialog ( class APlayerController* PC );
	void RegDynamicTextureStreaming ( class AActor* A, unsigned long bRegister );
	class UTargetableList* GetTargetableList ( );
	class UGearboxEngineGlobals* GetGearboxEngineGlobals ( );
	void NotifyActorDied ( class AActor* TheActor, unsigned long bKeepBody );
};

UClass* UGearboxEngineGlobals::pClassPointer = NULL;

// Class Engine.GenericParamListStatEntry
// 0x0008 (0x0044 - 0x003C)
class UGenericParamListStatEntry : public UObject
{
public:
	struct FPointer                                    StatEvent;                                        		// 0x003C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UGameplayEventsWriter*                       Writer;                                           		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 599 ];

		return pClassPointer;
	};

	void CommitToDisk ( );
	bool GetString ( struct FName ParamName, struct FString* out_string );
	bool GetVector ( struct FName ParamName, struct FVector* out_vector );
	bool GetInt ( struct FName ParamName, int* out_int );
	bool GetFloat ( struct FName ParamName, float* out_Float );
	void AddString ( struct FName ParamName, struct FString Value );
	void AddVector ( struct FName ParamName, struct FVector Value );
	void AddInt ( struct FName ParamName, int Value );
	void AddFloat ( struct FName ParamName, float Value );
};

UClass* UGenericParamListStatEntry::pClassPointer = NULL;

// Class Engine.GuidCache
// 0x0048 (0x0084 - 0x003C)
class UGuidCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x003C (0x0048) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 601 ];

		return pClassPointer;
	};

};

UClass* UGuidCache::pClassPointer = NULL;

// Class Engine.IAnimBehavior
// 0x0000 (0x003C - 0x003C)
class UIAnimBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 603 ];

		return pClassPointer;
	};

	void SetAnimTreeTemplate ( class UAnimTree* NewTemplate );
	void Behavior_ChangeBoneVisibility ( struct FName InBoneName, unsigned long bVisible );
	void Behavior_ToggleBoneVisibility ( struct FName InBoneName );
	void Behavior_InstanceVertexWeight ( struct FName InBoneName );
	void SetForceDiscardRootMotion ( unsigned long bDiscardRootMotion );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
	void PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying, float StartTime, unsigned long bPlayBackwards );
	void Behavior_SetMorphNodeWeight ( struct FName NodeName, float NewWeight, float WeightBlendTime );
	bool GetAnimTreeNodes ( struct FName NodeName, class UClass* NodeClass, TArray< class UAnimNode* >* AnimNodeList );
	void Behavior_SetSkelControlStrength ( struct FName SkelControlName, unsigned long bActive );
};

UClass* UIAnimBehavior::pClassPointer = NULL;

// Class Engine.IAttributeSlotEffectProvider
// 0x0000 (0x003C - 0x003C)
class UIAttributeSlotEffectProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 605 ];

		return pClassPointer;
	};

	float GetAttributeSlotModifierValue ( struct FName SlotName );
	int GetAttributeSlotGrade ( struct FName SlotName );
};

UClass* UIAttributeSlotEffectProvider::pClassPointer = NULL;

// Class Engine.IBalancedActor
// 0x0000 (0x003C - 0x003C)
class UIBalancedActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 607 ];

		return pClassPointer;
	};

	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
};

UClass* UIBalancedActor::pClassPointer = NULL;

// Class Engine.IBodyCompositionInstance
// 0x0000 (0x003C - 0x003C)
class UIBodyCompositionInstance : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 609 ];

		return pClassPointer;
	};

	void ClearBodyCompositionInstance ( );
	void ApplyPreviewBodyComposition ( );
	class UIBodyInfoProvider* GetBodyInfoProvider ( );
	void ChangeInstanceDataSwitch ( struct FName SwitchName, unsigned char NewValue );
	void PostInitBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode );
	void PreRemoveBodyComposition ( struct FName Identifier, class UObject* Value, int BodyCompositionIndex );
};

UClass* UIBodyCompositionInstance::pClassPointer = NULL;

// Class Engine.IBodyInfoProvider
// 0x0000 (0x003C - 0x003C)
class UIBodyInfoProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 611 ];

		return pClassPointer;
	};

};

UClass* UIBodyInfoProvider::pClassPointer = NULL;

// Class Engine.IDamageCauser
// 0x0000 (0x003C - 0x003C)
class UIDamageCauser : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 613 ];

		return pClassPointer;
	};

	class AController* GetControllerResponsibleForDamage ( );
	class AActor* GetInstigator ( );
	float GetInstigatorSelfDamageScale ( );
	float GetFireIntervalChanceModifier ( );
	float GetStatusEffectBaseChanceModifier ( class UObject* Context );
	float GetStatusEffectChanceModifier ( class UObject* Context );
	float GetStatusEffectBaseDamage ( class UObject* Context );
};

UClass* UIDamageCauser::pClassPointer = NULL;

// Class Engine.IDialogBox
// 0x0000 (0x003C - 0x003C)
class UIDialogBox : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 615 ];

		return pClassPointer;
	};

	void eventDisplayYesNoBox ( struct FString File, struct FString Section, struct FScriptDelegate OnFinished, struct FString CaptionPrefix );
	void eventDisplayOkBox ( struct FString File, struct FString Section, struct FScriptDelegate OnFinished );
	void eventApplyContentChanges ( );
	void eventSetTimeout ( float TimeoutSeconds, struct FName ButtonTag );
	void eventSetCancelButton ( struct FName ButtonTag );
	void eventSetDefaultButton ( struct FName ButtonTag );
	bool eventSetButtonTip ( struct FName ButtonTag, struct FString TipText );
	bool eventSetOnFinished ( struct FName ButtonTag, struct FScriptDelegate OnFinished );
	bool eventAppendButton ( struct FName ButtonTag, struct FString Caption, struct FScriptDelegate OnFinished, struct FString TipText );
	void eventClearButtons ( );
	void eventSetBody ( struct FString Text, struct FString Repl );
	void eventSetTitle ( struct FString Text, struct FString Repl );
	void eventCloseDialog ( );
	bool eventAutoAppendButton ( struct FName ButtonTag, struct FScriptDelegate OnFinished );
	void eventAutoLocEnable ( struct FString File, struct FString Section, unsigned long bLocTitle, unsigned long bLocBody );
	struct FName eventGetDialogResult ( );
};

UClass* UIDialogBox::pClassPointer = NULL;

// Class Engine.IFaceFXActor
// 0x0000 (0x003C - 0x003C)
class UIFaceFXActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 617 ];

		return pClassPointer;
	};

	class UFaceFXAsset* eventGetFaceFXAsset ( );
	void eventSetAudioCueOpenedByFaceFX ( unsigned long Opened );
	bool PlayFaceAnimation ( struct FString FaceFXGroupName, struct FString FaceFXAnimName, class USoundCue* SoundCueToPlay );
};

UClass* UIFaceFXActor::pClassPointer = NULL;

// Class Engine.IGBXNavMeshBuildEvents
// 0x0000 (0x003C - 0x003C)
class UIGBXNavMeshBuildEvents : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 619 ];

		return pClassPointer;
	};

};

UClass* UIGBXNavMeshBuildEvents::pClassPointer = NULL;

// Class Engine.IGBXNavMeshSeed
// 0x0000 (0x003C - 0x003C)
class UIGBXNavMeshSeed : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 621 ];

		return pClassPointer;
	};

};

UClass* UIGBXNavMeshSeed::pClassPointer = NULL;

// Class Engine.IGBXNavMeshSpecialMove
// 0x0000 (0x003C - 0x003C)
class UIGBXNavMeshSpecialMove : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 623 ];

		return pClassPointer;
	};

};

UClass* UIGBXNavMeshSpecialMove::pClassPointer = NULL;

// Class Engine.IKilledBehavior
// 0x0000 (0x003C - 0x003C)
class UIKilledBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 625 ];

		return pClassPointer;
	};

	void Behavior_Killed ( class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType );
};

UClass* UIKilledBehavior::pClassPointer = NULL;

// Class Engine.IniLocPatcher
// 0x0020 (0x005C - 0x003C)
class UIniLocPatcher : public UObject
{
public:
	TArray< struct FIniLocFileEntry >                  Files;                                            		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UOnlineTitleFileInterface*                   TitleFileInterface;                               		// 0x0048 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 627 ];

		return pClassPointer;
	};

	struct FString UpdateLocFileName ( struct FString Filename );
	void ClearCachedFiles ( );
	void ClearReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddFileToDownload ( unsigned char LocalUserNum, struct FString Filename );
	void ProcessIniLocFile ( struct FString Filename, unsigned long bIsUnicode, TArray< unsigned char >* FileData );
	void OnReadFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void DownloadFiles ( unsigned char LocalUserNum );
	void Init ( );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
};

UClass* UIniLocPatcher::pClassPointer = NULL;

// Class Engine.Interface_NavigationHandle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavigationHandle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 629 ];

		return pClassPointer;
	};

	void eventNotifyPathChanged ( );
};

UClass* UInterface_NavigationHandle::pClassPointer = NULL;

// Class Engine.Interface_Speaker
// 0x0000 (0x003C - 0x003C)
class UInterface_Speaker : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 631 ];

		return pClassPointer;
	};

	void eventSpeak ( class USoundCue* Cue );
};

UClass* UInterface_Speaker::pClassPointer = NULL;

// Class Engine.InterpCurveEdSetup
// 0x0010 (0x004C - 0x003C)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray< struct FCurveEdTab >                       Tabs;                                             		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveTab;                                        		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 633 ];

		return pClassPointer;
	};

};

UClass* UInterpCurveEdSetup::pClassPointer = NULL;

// Class Engine.InterpTrack
// 0x002C (0x0068 - 0x003C)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    CurveEdVTable;                                    		// 0x0040 (0x0004) [0x0000000000801000]              ( CPF_Native | CPF_NoExport )
	TArray< class UInterpTrack* >                      SubTracks;                                        		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      TrackInstClass;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned char                                      ActiveCondition;                                  		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TrackPlayDirection;                               		// 0x0055 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TrackTitle;                                       		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bOnePerGroup : 1;                                 		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirGroupOnly : 1;                                		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisableTrack : 1;                                		// 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsAnimControlTrack : 1;                          		// 0x0064 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSubTrackOnly : 1;                                		// 0x0064 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bVisible : 1;                                     		// 0x0064 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsSelected : 1;                                  		// 0x0064 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsRecording : 1;                                 		// 0x0064 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bIsCollapsed : 1;                                 		// 0x0064 (0x0004) [0x0000000000000000] [0x00000100] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 635 ];

		return pClassPointer;
	};

};

UClass* UInterpTrack::pClassPointer = NULL;

// Class Engine.IResourcePoolProvider
// 0x0000 (0x003C - 0x003C)
class UIResourcePoolProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 637 ];

		return pClassPointer;
	};

	struct FResourcePoolReference GetResourcePoolForResourceDefinition ( class UResourceDefinition* Resource, unsigned long bCreatePoolIfOneDoesntExist );
};

UClass* UIResourcePoolProvider::pClassPointer = NULL;

// Class Engine.ISpawnActor
// 0x0000 (0x003C - 0x003C)
class UISpawnActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 639 ];

		return pClassPointer;
	};

	class AActor* GetSpawnOwner ( );
	class AActor* SpawnForMap ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail );
};

UClass* UISpawnActor::pClassPointer = NULL;

// Class Engine.ISpecialOcclusionProvider
// 0x0000 (0x003C - 0x003C)
class UISpecialOcclusionProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 641 ];

		return pClassPointer;
	};

	float GetOcclusionAmount ( );
};

UClass* UISpecialOcclusionProvider::pClassPointer = NULL;

// Class Engine.ITargetable
// 0x0000 (0x003C - 0x003C)
class UITargetable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 643 ];

		return pClassPointer;
	};

	void SetPatsy ( class UITargetable* NewPatsy );
	class UITargetable* GetPatsy ( );
	bool IsBeingHealed ( );
	void SetBeingHealed ( unsigned long bNewBeingHealed );
	bool IsBoss ( );
	void Behavior_RegisterTargetable ( unsigned long bUnregister );
	bool IsTargetableProxy ( );
	unsigned char GetAutoAimProfile ( );
	float GetMagnetismRange ( );
	struct FVector GetMagnetismOrigin ( );
	bool IsAutoAimTarget ( );
	float GetTargetingModifier ( );
	bool HasHomingTargetComponents ( );
	bool IsValidHomingTarget ( );
	bool GetTargetableIsHidden ( );
	bool CanSnapZoom ( );
	struct FVector GetSnapLocation ( );
	struct FVector GetTargetableLocation ( );
	void Behavior_SetCanTarget ( unsigned char ChangeStatus );
	bool IsTargetable ( unsigned long bIgnoreCloakAbility );
	int ShowSelfAsTarget ( unsigned long bControllersOnly );
	unsigned char GetOpinion ( class UObject* Other );
	void SetAllegiance ( class UPawnAllegiance* NewAllegiance );
	class UPawnAllegiance* GetDefaultAllegiance ( );
	class UPawnAllegiance* GetObjectAllegiance ( );
	bool IsSameAllegiance ( class UObject* anObject );
	bool IsNeutral ( class UObject* anObject );
	bool IsFriendly ( class UObject* anObject );
	bool IsEnemy ( class UObject* anObject );
	void SetInfoBarVisibility ( unsigned long bVisible );
	bool HideTargetInfoOnHud ( class APawn* HUDOwner );
	bool IsChampion ( );
	void eventGetTargetName ( struct FString* TargetName );
	bool DoesTargetableTakeDamage ( );
	bool DisplayParentInfo ( );
	void GetAllBarInfo ( TArray< struct FInfoBarData >* BarData );
	void GetExpInfo ( int* ExpLevelValue );
	class AActor* GetTargetableActor ( );
};

UClass* UITargetable::pClassPointer = NULL;

// Class Engine.JsonObject
// 0x0090 (0x00CC - 0x003C)
class UJsonObject : public UObject
{
public:
	struct FMap_Mirror                                 ValueMap;                                         		// 0x003C (0x003C) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 ObjectMap;                                        		// 0x0078 (0x003C) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FString >                           ValueArray;                                       		// 0x00B4 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UJsonObject* >                       ObjectArray;                                      		// 0x00C0 (0x000C) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 645 ];

		return pClassPointer;
	};

	class UJsonObject* DecodeJson ( struct FString Str );
	struct FString EncodeJson ( class UJsonObject* Root );
	void SetBoolValue ( struct FString Key, unsigned long Value );
	void SetFloatValue ( struct FString Key, float Value );
	void SetIntValue ( struct FString Key, int Value );
	void SetStringValue ( struct FString Key, struct FString Value );
	void SetObject ( struct FString Key, class UJsonObject* Object );
	bool GetBoolValue ( struct FString Key );
	float GetFloatValue ( struct FString Key );
	int GetIntValue ( struct FString Key );
	struct FString GetStringValue ( struct FString Key );
	class UJsonObject* GetObject ( struct FString Key );
};

UClass* UJsonObject::pClassPointer = NULL;

// Class Engine.KMeshProps
// 0x0044 (0x0080 - 0x003C)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                         		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FKAggregateGeom                             AggGeom;                                          		// 0x0048 (0x0038) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 647 ];

		return pClassPointer;
	};

};

UClass* UKMeshProps::pClassPointer = NULL;

// Class Engine.LevelBase
// 0x0054 (0x0090 - 0x003C)
class ULevelBase : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x54 ];                            		// 0x003C (0x0054) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 649 ];

		return pClassPointer;
	};

};

UClass* ULevelBase::pClassPointer = NULL;

// Class Engine.Level
// 0x02E8 (0x0378 - 0x0090)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0xD8 ];                            		// 0x0090 (0x00D8) MISSED OFFSET
	float                                              LightmapTotalSize;                                		// 0x0168 (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	float                                              ShadowmapTotalSize;                               		// 0x016C (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	unsigned char                                      UnknownData01[ 0x208 ];                           		// 0x0170 (0x0208) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 651 ];

		return pClassPointer;
	};

};

UClass* ULevel::pClassPointer = NULL;

// Class Engine.PendingLevel
// 0x0034 (0x00C4 - 0x0090)
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0x34 ];                            		// 0x0090 (0x0034) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 655 ];

		return pClassPointer;
	};

};

UClass* UPendingLevel::pClassPointer = NULL;

// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x00C4 - 0x00C4)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 657 ];

		return pClassPointer;
	};

};

UClass* UDemoPlayPendingLevel::pClassPointer = NULL;

// Class Engine.NetPendingLevel
// 0x0000 (0x00C4 - 0x00C4)
class UNetPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 659 ];

		return pClassPointer;
	};

};

UClass* UNetPendingLevel::pClassPointer = NULL;

// Class Engine.LevelStreaming
// 0x005C (0x0098 - 0x003C)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                      		// 0x003C (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class ULevel*                                      LoadedLevel;                                      		// 0x0044 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Offset;                                           		// 0x0048 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     OldOffset;                                        		// 0x0054 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsVisible : 1;                                   		// 0x0060 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasLoadRequestPending : 1;                       		// 0x0060 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasUnloadRequestPending : 1;                     		// 0x0060 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisibleInEditor : 1;                     		// 0x0060 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisibleInEditorOnLoad : 1;               		// 0x0060 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBoundingBoxVisible : 1;                          		// 0x0060 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bLocked : 1;                                      		// 0x0060 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsFullyStatic : 1;                               		// 0x0060 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x0060 (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x0060 (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x0060 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDrawOnLevelStatusMap : 1;                        		// 0x0060 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                		// 0x0060 (0x0004) [0x0000000000002002] [0x00001000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipVisibleFlagTestForMissionLevelLoad : 1;      		// 0x0060 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	struct FColor                                      DrawColor;                                        		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class ALevelStreamingVolume* >             EditorStreamingVolumes;                           		// 0x0068 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	float                                              MinTimeBetweenVolumeUnloadRequests;               		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastVolumeUnloadRequestTime;                      		// 0x0078 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FString >                           Keywords;                                         		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ALevelGridVolume*                            EditorGridVolume;                                 		// 0x0088 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                GridPosition[ 0x3 ];                              		// 0x008C (0x000C) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 661 ];

		return pClassPointer;
	};

};

UClass* ULevelStreaming::pClassPointer = NULL;

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0004 (0x009C - 0x0098)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	unsigned long                                      bIsProceduralBuildingLODLevel : 1;                		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 663 ];

		return pClassPointer;
	};

};

UClass* ULevelStreamingAlwaysLoaded::pClassPointer = NULL;

// Class Engine.LevelStreamingDistance
// 0x0010 (0x00A8 - 0x0098)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                           		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 665 ];

		return pClassPointer;
	};

};

UClass* ULevelStreamingDistance::pClassPointer = NULL;

// Class Engine.LevelStreamingKismet
// 0x0000 (0x0098 - 0x0098)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 667 ];

		return pClassPointer;
	};

};

UClass* ULevelStreamingKismet::pClassPointer = NULL;

// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0098 - 0x0098)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 669 ];

		return pClassPointer;
	};

};

UClass* ULevelStreamingPersistent::pClassPointer = NULL;

// Class Engine.LightmappedSurfaceCollection
// 0x0010 (0x004C - 0x003C)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                      		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      Surfaces;                                         		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 671 ];

		return pClassPointer;
	};

};

UClass* ULightmappedSurfaceCollection::pClassPointer = NULL;

// Class Engine.LightmassPrimitiveSettingsObject
// 0x001C (0x0058 - 0x003C)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x003C (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 673 ];

		return pClassPointer;
	};

};

UClass* ULightmassPrimitiveSettingsObject::pClassPointer = NULL;

// Class Engine.Line
// 0x004C (0x0088 - 0x003C)
class ULine : public UObject
{
public:
	class ULineData*                                   Parent;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	TArray< class ULineSegment* >                      LineSegments;                                     		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UVertex* >                           Verts;                                            		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterial*                                   RegionMaterial;                                   		// 0x0058 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   SIZoneMaterial;                                   		// 0x005C (0x0004) [0x0000000000000000]              
	class UMaterial*                                   SIRetreatMaterial;                                		// 0x0060 (0x0004) [0x0000000000000000]              
	class UMaterial*                                   SIStealthMaterial;                                		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMakeRegion : 1;                                  		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsCircular : 1;                                  		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsMoving : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                CombatZoneID;                                     		// 0x006C (0x0004) [0x0000000000000000]              
	struct FString                                     CombatZoneName;                                   		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           RegionData;                                       		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 675 ];

		return pClassPointer;
	};

};

UClass* ULine::pClassPointer = NULL;

// Class Engine.LineData
// 0x0054 (0x0090 - 0x003C)
class ULineData : public UObject
{
public:
	struct FVector                                     RubberBand[ 0x2 ];                                		// 0x003C (0x0018) [0x0000000000000000]              
	unsigned long                                      bShowRubberBand : 1;                              		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTerrainTrace : 1;                                		// 0x0054 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowOnlySelectedZone : 1;                        		// 0x0054 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAutoGenRedundantData : 1;                        		// 0x0054 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsSelectedMap : 1;                               		// 0x0054 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                ParentID;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                SegmentID;                                        		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                CurrentCombatZoneID;                              		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentCombatZoneName;                            		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              VertexScale;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              VertexScaleFactor;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              LineSegmentScale;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              LineSegmentScaleFactor;                           		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned char                                      EditorMode;                                       		// 0x0080 (0x0001) [0x0000000000000000]              
	TArray< class ULine* >                             Lines;                                            		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 677 ];

		return pClassPointer;
	};

};

UClass* ULineData::pClassPointer = NULL;

// Class Engine.LineSegment
// 0x0060 (0x009C - 0x003C)
class ULineSegment : public UObject
{
public:
	class ULine*                                       ParentLine;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	class UVertex*                                     Verts[ 0x2 ];                                     		// 0x0040 (0x0008) [0x0000000000000000]              
	struct FVector                                     Direction;                                        		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FVector                                     NormalLine[ 0x2 ];                                		// 0x0054 (0x0018) [0x0000000000000000]              
	unsigned long                                      RightNormal : 1;                                  		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsSelected : 1;                                  		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDelete : 1;                                      		// 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              Size;                                             		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned char                                      SegmentType;                                      		// 0x0074 (0x0001) [0x0000000000000000]              
	unsigned char                                      SegmentMaterial;                                  		// 0x0075 (0x0001) [0x0000000000000000]              
	int                                                SegmentID;                                        		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FColor                                      LineColor;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	struct FColor                                      NormalColor;                                      		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FColor                                      SelectedColor;                                    		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FColor                                      VulnerableColor;                                  		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FColor                                      VantageColor;                                     		// 0x008C (0x0004) [0x0000000000000000]              
	struct FColor                                      SIColor;                                          		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FColor                                      RetreatColor;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	struct FColor                                      StealthColor;                                     		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 679 ];

		return pClassPointer;
	};

};

UClass* ULineSegment::pClassPointer = NULL;

// Class Engine.MapInfo
// 0x0000 (0x003C - 0x003C)
class UMapInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 681 ];

		return pClassPointer;
	};

};

UClass* UMapInfo::pClassPointer = NULL;

// Class Engine.Surface
// 0x0000 (0x003C - 0x003C)
class USurface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 683 ];

		return pClassPointer;
	};

	float GetSurfaceHeight ( );
	float GetSurfaceWidth ( );
};

UClass* USurface::pClassPointer = NULL;

// Class Engine.MaterialInterface
// 0x000D (0x0049 - 0x003C)
class UMaterialInterface : public USurface
{
public:
	struct FRenderCommandFence_Mirror                  ParentRefFence;                                   		// 0x003C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CustomSkinType;                                   		// 0x0048 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 685 ];

		return pClassPointer;
	};

	void SetForceMipLevelsToBeResident ( unsigned long OverrideForceMiplevelsToBeResident, unsigned long bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups );
	void Behavior_SetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Value );
	void Behavior_SetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* Value );
	void Behavior_SetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** Value );
	void Behavior_SetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* Value );
	bool Behavior_GetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* OutValue );
	bool Behavior_GetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* OutValue );
	bool Behavior_GetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** OutValue );
	bool Behavior_GetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* OutValue );
	bool GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue );
	bool GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue );
	bool GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue );
	bool GetScalarParameterValue ( struct FName ParameterName, float* OutValue );
	bool GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage );
	bool GetParameterDesc ( struct FName ParameterName, struct FString* OutDesc );
	class UPhysicalMaterial* GetPhysicalMaterial ( );
	class UMaterial* GetMaterial ( );
};

UClass* UMaterialInterface::pClassPointer = NULL;

// Class Engine.Material
// 0x032F (0x0378 - 0x0049)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PhysicalMaterial;                                 		// 0x0050 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  PhysMaterialMask;                                 		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PhysMaterialMaskUVChannel;                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                            		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColorMaterialInput                         DiffuseColor;                                     		// 0x0064 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        DiffusePower;                                     		// 0x0088 (0x0024) [0x0000000000000000]              
	struct FColorMaterialInput                         SpecularColor;                                    		// 0x00AC (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        SpecularPower;                                    		// 0x00D0 (0x0024) [0x0000000000000000]              
	struct FVectorMaterialInput                        Normal;                                           		// 0x00F4 (0x002C) [0x0000000000000000]              
	struct FColorMaterialInput                         EmissiveColor;                                    		// 0x0120 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        Opacity;                                          		// 0x0144 (0x0024) [0x0000000000000000]              
	struct FScalarMaterialInput                        OpacityMask;                                      		// 0x0168 (0x0024) [0x0000000000000000]              
	float                                              OpacityMaskClipValue;                             		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedsShadowDepthBias : 1;                        		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      TwoSided : 1;                                     		// 0x0190 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      TwoSidedSeparatePass : 1;                         		// 0x0190 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDisableDepthTest : 1;                            		// 0x0190 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDisableEdgeDetection : 1;                        		// 0x0190 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSceneTextureRenderBehindTranslucency : 1;        		// 0x0190 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowFog : 1;                                    		// 0x0190 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bTranslucencyReceiveDominantShadowsFromStatic : 1;		// 0x0190 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bTranslucencyInheritDominantShadowsFromOpaque : 1;		// 0x0190 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowTranslucencyDoF : 1;                        		// 0x0190 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseOneLayerDistortion : 1;                       		// 0x0190 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bUseLitTranslucencyDepthPass : 1;                 		// 0x0190 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseLitTranslucencyPostRenderDepthPass : 1;       		// 0x0190 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bCastLitTranslucencyShadowAsMasked : 1;           		// 0x0190 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bUsedAsLightFunction : 1;                         		// 0x0190 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFogVolumes : 1;                          		// 0x0190 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                 		// 0x0190 (0x0004) [0x0000000000200002] [0x00010000] ( CPF_Const )
	unsigned long                                      bUsedWithSkeletalMesh : 1;                        		// 0x0190 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithTerrain : 1;                             		// 0x0190 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLandscape : 1;                           		// 0x0190 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFracturedMeshes : 1;                     		// 0x0190 (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSystem : 1;                      		// 0x0190 (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bUsedWithParticleSprites : 1;                     		// 0x0190 (0x0004) [0x0000000000000003] [0x00400000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithBeamTrails : 1;                          		// 0x0190 (0x0004) [0x0000000000000003] [0x00800000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSubUV : 1;                       		// 0x0190 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFoliage : 1;                             		// 0x0190 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSpeedTree : 1;                           		// 0x0190 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithStaticLighting : 1;                      		// 0x0190 (0x0004) [0x0000000000000003] [0x08000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLensFlare : 1;                           		// 0x0190 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithGammaCorrection : 1;                     		// 0x0190 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;              		// 0x0190 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFluidSurfaces : 1;                       		// 0x0190 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithDecals : 1;                              		// 0x0194 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMaterialEffect : 1;                      		// 0x0194 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMorphTargets : 1;                        		// 0x0194 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithRadialBlur : 1;                          		// 0x0194 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshes : 1;                     		// 0x0194 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSplineMeshes : 1;                        		// 0x0194 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithAPEXMeshes : 1;                          		// 0x0194 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSPHFluid : 1;                            		// 0x0194 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithScreenDoorFade : 1;                      		// 0x0194 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithWires : 1;                               		// 0x0194 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      Wireframe : 1;                                    		// 0x0194 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPerPixelCameraVector : 1;                        		// 0x0194 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bAllowLightmapSpecular : 1;                       		// 0x0194 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bNoDraw : 1;                                      		// 0x0194 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bFullResTransConsole : 1;                         		// 0x0194 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bIsFallbackMaterial : 1;                          		// 0x0194 (0x0004) [0x0000000020000000] [0x00008000] ( CPF_Deprecated )
	unsigned long                                      bUsesDistortion : 1;                              		// 0x0194 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsMasked : 1;                                    		// 0x0194 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bIsPreviewMaterial : 1;                           		// 0x0194 (0x0004) [0x0000000000202000] [0x00040000] ( CPF_Transient )
	struct FVector2MaterialInput                       Distortion;                                       		// 0x0198 (0x0028) [0x0000000000000000]              
	unsigned char                                      BlendMode;                                        		// 0x01C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightingModel;                                    		// 0x01C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleDownsampling;                             		// 0x01C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      D3D11TessellationMode;                            		// 0x01C3 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColorMaterialInput                         CustomLighting;                                   		// 0x01C4 (0x0024) [0x0000000000000000]              
	struct FColorMaterialInput                         CustomSkylightDiffuse;                            		// 0x01E8 (0x0024) [0x0000000000000000]              
	struct FVectorMaterialInput                        AnisotropicDirection;                             		// 0x020C (0x002C) [0x0000000000000000]              
	struct FScalarMaterialInput                        TwoSidedLightingMask;                             		// 0x0238 (0x0024) [0x0000000000000000]              
	struct FColorMaterialInput                         TwoSidedLightingColor;                            		// 0x025C (0x0024) [0x0000000000000000]              
	struct FVectorMaterialInput                        WorldPositionOffset;                              		// 0x0280 (0x002C) [0x0000000000000000]              
	struct FVectorMaterialInput                        WorldDisplacement;                                		// 0x02AC (0x002C) [0x0000000000000000]              
	struct FVector2MaterialInput                       TessellationFactors;                              		// 0x02D8 (0x0028) [0x0000000000000000]              
	struct FPointer                                    MaterialResources[ 0x2 ];                         		// 0x0300 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DefaultMaterialInstances[ 0x3 ];                  		// 0x0308 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	int                                                EditorX;                                          		// 0x0314 (0x0004) [0x0000000000000000]              
	int                                                EditorY;                                          		// 0x0318 (0x0004) [0x0000000000000000]              
	int                                                EditorPitch;                                      		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                EditorYaw;                                        		// 0x0320 (0x0004) [0x0000000000000000]              
	TArray< class UMaterialExpression* >               Expressions;                                      		// 0x0324 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0330 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Material.EditorParameters
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x036C (0x000C) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 687 ];

		return pClassPointer;
	};

};

UClass* UMaterial::pClassPointer = NULL;

// Class Engine.MaterialExpression
// 0x0008 (0x0044 - 0x003C)
class UMaterialExpression : public UObject
{
public:
	unsigned long                                      bRealtimePreview : 1;                             		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedToUpdatePreview : 1;                         		// 0x003C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsParameterExpression : 1;                       		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowOutputNameOnPin : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHidePreviewWindow : 1;                           		// 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUsedByStaticParameterSet : 1;                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	class UMaterialExpressionCompound*                 Compound;                                         		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 689 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpression::pClassPointer = NULL;

// Class Engine.Model
// 0x09D0 (0x0A0C - 0x003C)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x9D0 ];                           		// 0x003C (0x09D0) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 691 ];

		return pClassPointer;
	};

};

UClass* UModel::pClassPointer = NULL;

// Class Engine.MusicTrackDataStructures
// 0x0000 (0x003C - 0x003C)
class UMusicTrackDataStructures : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 693 ];

		return pClassPointer;
	};

};

UClass* UMusicTrackDataStructures::pClassPointer = NULL;

// Class Engine.NavigationMeshBase
// 0x0264 (0x02A0 - 0x003C)
class UNavigationMeshBase : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x264 ];                           		// 0x003C (0x0264) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 695 ];

		return pClassPointer;
	};

};

UClass* UNavigationMeshBase::pClassPointer = NULL;

// Class Engine.NetDriver
// 0x018C (0x01CC - 0x0040)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[ 0x20 ];                            		// 0x0040 (0x0020) MISSED OFFSET
	float                                              ConnectionTimeout;                                		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialConnectTimeout;                            		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeepAliveTime;                                    		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RelevantTimeout;                                  		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpawnPrioritySeconds;                             		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ServerTravelPause;                                		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxClientRate;                                    		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxInternetClientRate;                            		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetServerMaxTickRate;                             		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bClampListenServerTickRate : 1;                   		// 0x0084 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowDownloads : 1;                               		// 0x0088 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowPeerConnections : 1;                         		// 0x008C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowPeerVoice : 1;                               		// 0x0090 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x18 ];                            		// 0x0094 (0x0018) MISSED OFFSET
	int                                                MaxDownloadSize;                                  		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           DownloadManagers;                                 		// 0x00B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0xC0 ];                            		// 0x00BC (0x00C0) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                           		// 0x017C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x44 ];                            		// 0x0188 (0x0044) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 697 ];

		return pClassPointer;
	};

};

UClass* UNetDriver::pClassPointer = NULL;

// Class Engine.DemoRecDriver
// 0x00C4 (0x0290 - 0x01CC)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[ 0x28 ];                            		// 0x01CC (0x0028) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                               		// 0x01F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x7C ];                            		// 0x0200 (0x007C) MISSED OFFSET
	int                                                MaxRewindPoints;                                  		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0280 (0x0004) MISSED OFFSET
	float                                              RewindPointInterval;                              		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumRecentRewindPoints;                            		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x028C (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 716 ];

		return pClassPointer;
	};

};

UClass* UDemoRecDriver::pClassPointer = NULL;

// Class Engine.ObjectReferencer
// 0x000C (0x0048 - 0x003C)
class UObjectReferencer : public UObject
{
public:
	TArray< class UObject* >                           ReferencedObjects;                                		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 722 ];

		return pClassPointer;
	};

};

UClass* UObjectReferencer::pClassPointer = NULL;

// Class Engine.OnlineSubsystem
// 0x00A4 (0x00E0 - 0x003C)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UOnlineAccountInterface*                     AccountInterface;                                 		// 0x0040 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0044 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x0048 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx;                                		// 0x0050 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0054 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSystemInterface*                      SystemInterface;                                  		// 0x0058 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x005C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0064 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineContentInterface*                     ContentInterface;                                 		// 0x0068 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x006C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x007C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineNewsInterface*                        NewsInterface;                                    		// 0x0080 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x0084 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePartyChatInterface*                   PartyChatInterface;                               		// 0x0088 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x008C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineTitleFileInterface*                   TitleFileInterface;                               		// 0x0090 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData10[ 0x4 ];                             		// 0x0094 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineAuthInterface*                        AuthInterface;                                    		// 0x0098 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData11[ 0x4 ];                             		// 0x009C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FNamedInterface >                   NamedInterfaces;                                  		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedInterfaceDef >                NamedInterfaceDefs;                               		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FNamedSession >                     Sessions;                                         		// 0x00B8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bUseBuildIdOverride : 1;                          		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                BuildIdOverride;                                  		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     IniLocPatcherClassName;                           		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UIniLocPatcher*                              Patcher;                                          		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AsyncMinCompletionTime;                           		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 724 ];

		return pClassPointer;
	};

	struct FString GetCountryString ( );
	void DbgCmdParseTMSFile ( );
	void ProcessCompressedConfig ( TArray< unsigned char >* FileData );
	int FindUniqueId ( TArray< struct FUniqueNetId >* UniqueNetIdList, struct FUniqueNetId* SearchId );
	void ClearCachedProfile ( unsigned char LocalUserNum );
	void SetDebugSpewLevel ( int DebugSpewLevel );
	void DumpVoiceRegistration ( );
	void DumpSessionState ( );
	void DumpGameSettings ( class UOnlineGameSettings* GameSettings );
	int GetNumSupportedLogins ( );
	int GetBuildUniqueId ( );
	struct FUniqueNetId eventGetPlayerUniqueNetIdFromIndex ( int UserIndex );
	bool StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId );
	struct FString UniqueNetIdToString ( struct FUniqueNetId* IdToConvert );
	class UObject* eventGetNamedInterface ( struct FName InterfaceName );
	void eventSetNamedInterface ( struct FName InterfaceName, class UObject* NewInterface );
	bool eventSetAuthInterface ( class UObject* InAuthInterface );
	bool eventSetTitleFileInterface ( class UObject* NewInterface );
	bool eventSetPartyChatInterface ( class UObject* NewInterface );
	bool eventSetNewsInterface ( class UObject* NewInterface );
	bool eventSetStatsInterface ( class UObject* NewInterface );
	bool eventSetVoiceInterface ( class UObject* NewInterface );
	bool eventSetContentInterface ( class UObject* NewInterface );
	bool eventSetGameInterface ( class UObject* NewInterface );
	bool eventSetSystemInterface ( class UObject* NewInterface );
	bool eventSetPlayerInterfaceEx ( class UObject* NewInterface );
	bool eventSetPlayerInterface ( class UObject* NewInterface );
	bool eventSetAccountInterface ( class UObject* NewInterface );
	void eventExit ( );
	bool eventPostInit ( );
	bool eventInit ( );
};

UClass* UOnlineSubsystem::pClassPointer = NULL;

// Class Engine.OnlineAuthInterfaceBaseImpl
// 0x00D0 (0x010C - 0x003C)
class UOnlineAuthInterfaceBaseImpl : public UObject
{
public:
	unsigned long                                      bAuthReady : 1;                                   		// 0x003C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	TArray< struct FAuthSession >                      ClientAuthSessions;                               		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAuthSession >                      ServerAuthSessions;                               		// 0x004C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAuthSession >                      PeerAuthSessions;                                 		// 0x0058 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLocalAuthSession >                 LocalClientAuthSessions;                          		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLocalAuthSession >                 LocalServerAuthSessions;                          		// 0x0070 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FLocalAuthSession >                 LocalPeerAuthSessions;                            		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthReady__Delegate;                          		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthRequestClient__Delegate;                  		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthRequestServer__Delegate;                  		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthBlobReceivedClient__Delegate;             		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthBlobReceivedServer__Delegate;             		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthCompleteClient__Delegate;                 		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthCompleteServer__Delegate;                 		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthKillClient__Delegate;                     		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthRetryServer__Delegate;                    		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClientConnectionClose__Delegate;              		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnServerConnectionClose__Delegate;              		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 726 ];

		return pClassPointer;
	};

	bool GetServerAddr ( int* OutServerIP, int* OutServerPort );
	bool GetServerUniqueId ( struct FUniqueNetId* OutServerUID );
	int FindLocalServerAuthSession ( class UPlayer* ClientConnection );
	int FindServerAuthSession ( class UPlayer* ServerConnection );
	int FindLocalClientAuthSession ( class UPlayer* ServerConnection );
	int FindClientAuthSession ( class UPlayer* ClientConnection );
	void EndRemoteServerAuthSession ( struct FUniqueNetId ServerUID, int ServerIP );
	void EndLocalServerAuthSession ( struct FUniqueNetId ClientUID, int ClientIP );
	bool VerifyServerAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int AuthBlobUID );
	bool CreateServerAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int* OutAuthBlobUID );
	void EndRemoteClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP );
	void EndLocalClientAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort );
	bool VerifyClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int AuthBlobUID );
	bool CreateClientAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure, int* OutAuthBlobUID );
	bool SendAuthRetryServer ( );
	bool SendAuthKillClient ( class UPlayer* ClientConnection );
	bool SendAuthBlobServer ( class UPlayer* ClientConnection, int AuthBlobUID );
	bool SendAuthBlobClient ( int AuthBlobUID );
	bool SendAuthRequestServer ( struct FUniqueNetId ServerUID );
	bool SendAuthRequestClient ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID );
	void ClearServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate );
	void AddServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate );
	void OnServerConnectionClose ( class UPlayer* ServerConnection );
	void ClearClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate );
	void AddClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate );
	void OnClientConnectionClose ( class UPlayer* ClientConnection );
	void ClearAuthRetryServerDelegate ( struct FScriptDelegate AuthRetryServerDelegate );
	void AddAuthRetryServerDelegate ( struct FScriptDelegate AuthRetryServerDelegate );
	void OnAuthRetryServer ( class UPlayer* ClientConnection );
	void ClearAuthKillClientDelegate ( struct FScriptDelegate AuthKillClientDelegate );
	void AddAuthKillClientDelegate ( struct FScriptDelegate AuthKillClientDelegate );
	void OnAuthKillClient ( class UPlayer* ServerConnection );
	void ClearAuthCompleteServerDelegate ( struct FScriptDelegate AuthCompleteServerDelegate );
	void AddAuthCompleteServerDelegate ( struct FScriptDelegate AuthCompleteServerDelegate );
	void OnAuthCompleteServer ( unsigned long bSuccess, struct FUniqueNetId ServerUID, class UPlayer* ServerConnection, struct FString ExtraInfo );
	void ClearAuthCompleteClientDelegate ( struct FScriptDelegate AuthCompleteClientDelegate );
	void AddAuthCompleteClientDelegate ( struct FScriptDelegate AuthCompleteClientDelegate );
	void OnAuthCompleteClient ( unsigned long bSuccess, struct FUniqueNetId ClientUID, class UPlayer* ClientConnection, struct FString ExtraInfo );
	void ClearAuthBlobReceivedServerDelegate ( struct FScriptDelegate AuthBlobReceivedServerDelegate );
	void AddAuthBlobReceivedServerDelegate ( struct FScriptDelegate AuthBlobReceivedServerDelegate );
	void OnAuthBlobReceivedServer ( struct FUniqueNetId ServerUID, int ServerIP, int AuthBlobUID );
	void ClearAuthBlobReceivedClientDelegate ( struct FScriptDelegate AuthBlobReceivedClientDelegate );
	void AddAuthBlobReceivedClientDelegate ( struct FScriptDelegate AuthBlobReceivedClientDelegate );
	void OnAuthBlobReceivedClient ( struct FUniqueNetId ClientUID, int ClientIP, int AuthBlobUID );
	void ClearAuthRequestServerDelegate ( struct FScriptDelegate AuthRequestServerDelegate );
	void AddAuthRequestServerDelegate ( struct FScriptDelegate AuthRequestServerDelegate );
	void OnAuthRequestServer ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID, int ClientIP, int ClientPort );
	void ClearAuthRequestClientDelegate ( struct FScriptDelegate AuthRequestClientDelegate );
	void AddAuthRequestClientDelegate ( struct FScriptDelegate AuthRequestClientDelegate );
	void OnAuthRequestClient ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure );
	void ClearAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate );
	void AddAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate );
	void OnAuthReady ( );
	bool IsReady ( );
};

UClass* UOnlineAuthInterfaceBaseImpl::pClassPointer = NULL;

// Class Engine.OnlineMatchmakingStats
// 0x0000 (0x003C - 0x003C)
class UOnlineMatchmakingStats : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 728 ];

		return pClassPointer;
	};

	void StopTimer ( struct FMMStats_Timer* Timer );
	void StartTimer ( struct FMMStats_Timer* Timer );
};

UClass* UOnlineMatchmakingStats::pClassPointer = NULL;

// Class Engine.OnlinePlayerStorage
// 0x002C (0x0068 - 0x003C)
class UOnlinePlayerStorage : public UObject
{
public:
	int                                                VersionNumber;                                    		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                VersionSettingsId;                                		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SaveCountSettingId;                               		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FOnlineProfileSetting >             ProfileSettings;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsPropertyPropertyMetaData > ProfileMappings;                                  		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      AsyncState;                                       		// 0x0060 (0x0001) [0x0000000000000002]              ( CPF_Const )
	int                                                DeviceID;                                         		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 730 ];

		return pClassPointer;
	};

	void SetDefaultVersionNumber ( );
	int GetVersionNumber ( );
	void AppendVersionToSettings ( );
	void eventSetToDefaults ( );
	void AddSettingFloat ( int SettingId );
	void AddSettingInt ( int SettingId );
	bool GetRangedProfileSettingValue ( int ProfileId, float* OutValue );
	bool SetRangedProfileSettingValue ( int ProfileId, float NewValue );
	bool GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetProfileSettingMappingIds ( int ProfileId, TArray< int >* Ids );
	bool GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType );
	bool GetProfileSettingValueBlob ( int ProfileSettingId, TArray< unsigned char >* Value );
	bool SetProfileSettingValueBlob ( int ProfileSettingId, TArray< unsigned char > Value );
	bool SetProfileSettingValueFloat ( int ProfileSettingId, float Value );
	bool SetProfileSettingValueInt ( int ProfileSettingId, int Value );
	bool SetProfileSettingValueId ( int ProfileSettingId, int Value );
	bool SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue );
	bool SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue );
	bool GetProfileSettingValueFloat ( int ProfileSettingId, float* Value );
	bool GetProfileSettingValueInt ( int ProfileSettingId, int* Value );
	bool GetProfileSettingValueFromListIndex ( int ProfileSettingId, int ListIndex, int* Value );
	bool GetProfileSettingValueId ( int ProfileSettingId, int* ValueId, int* ListIndex );
	bool GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value );
	bool GetProfileSettingValues ( int ProfileSettingId, TArray< struct FName >* Values );
	struct FName GetProfileSettingValueName ( int ProfileSettingId );
	bool GetProfileSettingValue ( int ProfileSettingId, int ValueMapID, struct FString* Value );
	bool IsProfileSettingIdMapped ( int ProfileSettingId );
	int FindDefaultProfileMappingIndexByName ( struct FName ProfileSettingName );
	int FindProfileMappingIndexByName ( struct FName ProfileSettingName );
	int FindProfileMappingIndex ( int ProfileSettingId );
	int FindProfileSettingIndex ( int ProfileSettingId );
	struct FString GetProfileSettingColumnHeader ( int ProfileSettingId );
	struct FName GetProfileSettingName ( int ProfileSettingId );
	bool GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId );
};

UClass* UOnlinePlayerStorage::pClassPointer = NULL;

// Class Engine.OnlineProfileSettings
// 0x0030 (0x0098 - 0x0068)
class UOnlineProfileSettings : public UOnlinePlayerStorage
{
public:
	TArray< int >                                      ProfileSettingIds;                                		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineProfileSetting >             DefaultSettings;                                  		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineProfileSetting >             DefaultConsoleSettings;                           		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIdToStringMapping >                OwnerMappings;                                    		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 732 ];

		return pClassPointer;
	};

	int FindDefaultConsoleSettingIndex ( int Index );
	void eventModifyAvailableProfileSettings ( );
	void AppendVersionToReadIds ( );
	void eventSetToDefaults ( );
	bool GetProfileSettingDefaultFloat ( int ProfileSettingId, float* DefaultFloat );
	bool GetProfileSettingDefaultInt ( int ProfileSettingId, int* DefaultInt );
	bool GetProfileSettingDefaultId ( int ProfileSettingId, int* DefaultId, int* ListIndex );
};

UClass* UOnlineProfileSettings::pClassPointer = NULL;

// Class Engine.OnlineStats
// 0x000C (0x0048 - 0x003C)
class UOnlineStats : public UObject
{
public:
	TArray< struct FStringIdToStringMapping >          ViewIdMappings;                                   		// 0x003C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 734 ];

		return pClassPointer;
	};

	struct FName GetViewName ( int ViewId );
	bool GetViewId ( struct FName ViewName, int* ViewId );
};

UClass* UOnlineStats::pClassPointer = NULL;

// Class Engine.OnlineStatsRead
// 0x0040 (0x0088 - 0x0048)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                           		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                SortColumnId;                                     		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ColumnIds;                                        		// 0x0050 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                TotalRowsInView;                                  		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FOnlineStatsRow >                   Rows;                                             		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FColumnMetaData >                   ColumnMappings;                                   		// 0x006C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ViewName;                                         		// 0x0078 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                TitleId;                                          		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 736 ];

		return pClassPointer;
	};

	int GetRankForPlayer ( struct FUniqueNetId PlayerID );
	void AddPlayer ( struct FString PlayerName, struct FUniqueNetId PlayerID );
	bool IsStatZero ( struct FUniqueNetId PlayerID, int StatColumnNo );
	bool GetStatValueForPlayerAsString ( struct FUniqueNetId PlayerID, int StatColumnNo, struct FString* StatValue );
	bool SetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float StatValue );
	bool GetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float* StatValue );
	bool SetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int StatValue );
	bool GetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int* StatValue );
	void eventOnReadComplete ( );
};

UClass* UOnlineStatsRead::pClassPointer = NULL;

// Class Engine.OnlineStatsWrite
// 0x0040 (0x0088 - 0x0048)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray< struct FStringIdToStringMapping >          StatMappings;                                     		// 0x0048 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x0054 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ViewIds;                                          		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ArbitratedViewIds;                                		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RatingId;                                         		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                 		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 738 ];

		return pClassPointer;
	};

	void DecrementIntStat ( int StatId, int DecBy );
	void DecrementFloatStat ( int StatId, float DecBy );
	void IncrementIntStat ( int StatId, int IncBy );
	void IncrementFloatStat ( int StatId, float IncBy );
	void SetIntStat ( int StatId, int Value );
	void SetFloatStat ( int StatId, float Value );
	struct FName GetStatName ( int StatId );
	bool GetStatId ( struct FName StatName, int* StatId );
	void OnStatsWriteComplete ( );
};

UClass* UOnlineStatsWrite::pClassPointer = NULL;

// Class Engine.PackageMapLevel
// 0x0004 (0x00C4 - 0x00C0)
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C0 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 740 ];

		return pClassPointer;
	};

};

UClass* UPackageMapLevel::pClassPointer = NULL;

// Class Engine.PackageMapSeekFree
// 0x0000 (0x00C4 - 0x00C4)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 742 ];

		return pClassPointer;
	};

};

UClass* UPackageMapSeekFree::pClassPointer = NULL;

// Class Engine.PatchScriptCommandlet
// 0x0004 (0x0080 - 0x007C)
class UPatchScriptCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x007C (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 744 ];

		return pClassPointer;
	};

};

UClass* UPatchScriptCommandlet::pClassPointer = NULL;

// Class Engine.Player
// 0x0024 (0x0060 - 0x003C)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class APlayerController*                           Actor;                                            		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentNetSpeed;                                  		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConfiguredInternetSpeed;                          		// 0x0048 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ConfiguredLanSpeed;                               		// 0x004C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              PP_DesaturationMultiplier;                        		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_HighlightsMultiplier;                          		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_MidTonesMultiplier;                            		// 0x0058 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_ShadowsMultiplier;                             		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 746 ];

		return pClassPointer;
	};

	void SwitchController ( class APlayerController* PC );
};

UClass* UPlayer::pClassPointer = NULL;

// Class Engine.LocalPlayer
// 0x02D8 (0x0338 - 0x0060)
class ULocalPlayer : public UPlayer
{
public:
	struct FPointer                                    VfTable_FObserverInterface;                       		// 0x0060 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                ControllerId;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	class UGameViewportClient*                         ViewportClient;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   Origin;                                           		// 0x006C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Size;                                             		// 0x0074 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           PlayerPostProcess;                                		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UPostProcessChain* >                 PlayerPostProcessChains;                          		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    ViewState;                                        		// 0x008C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                           		// 0x0090 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     LastViewLocation;                                 		// 0x0098 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                    		// 0x00A4 (0x00F4) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FCurrentPostProcessVolumeInfo               LevelPPInfo;                                      		// 0x0198 (0x00F4) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPostProcessSettingsOverride >      ActivePPOverrides;                                		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FWorldLightingOverride >            WorldLightingOverrides;                           		// 0x0298 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      AspectRatioAxisConstraint;                        		// 0x02A4 (0x0001) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LastMap;                                          		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bWantToResetToMapDefaultPP : 1;                   		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSentSplitJoin : 1;                               		// 0x02B4 (0x0004) [0x0000000000022002] [0x00000002] ( CPF_Const | CPF_Transient | CPF_EditConst )
	unsigned long                                      bPendingServerAuth : 1;                           		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bLobbyWasShown : 1;                               		// 0x02B4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class UTranslationContext*                         TagContext;                                       		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UOnlineAuthInterfaceBaseImpl*                CachedAuthInt;                                    		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              ServerAuthTimestamp;                              		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                ServerAuthTimeout;                                		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                ServerAuthRetryCount;                             		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                MaxServerAuthRetryCount;                          		// 0x02CC (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                ServerAuthUID;                                    		// 0x02D0 (0x0018) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x02E8 (0x0008) MISSED OFFSET
	struct FMatrix                                     ViewProjectionMatrix;                             		// 0x02F0 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	float                                              ViewProjMatTimestamp;                             		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRenderingPerformanceOverrides              PlayerRenderingOverrides;                         		// 0x0334 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 748 ];

		return pClassPointer;
	};

	void Cleanup ( unsigned long bExit );
	void eventExit ( );
	void eventNotifyServerConnectionClose ( );
	void eventViewportClosed ( );
	void StaticOnServerConnectionClose ( class UPlayer* ServerConnection );
	void OnServerConnectionClose ( class UPlayer* ServerConnection );
	void ServerAuthFailure ( );
	void eventServerAuthTimedOut ( );
	void OnAuthCompleteServer ( unsigned long bSuccess, struct FUniqueNetId ServerUID, class UPlayer* ServerConnection, struct FString ExtraInfo );
	void OnAuthBlobReceivedServer ( struct FUniqueNetId ServerUID, int ServerIP, int AuthBlobUID );
	void OnAuthKillClient ( class UPlayer* ServerConnection );
	void OnAuthRequestClient ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure );
	void eventNotifyServerConnectionOpen ( );
	struct FString eventGetNickname ( );
	struct FUniqueNetId eventGetUniqueNetId ( );
	void DeProject ( struct FVector2D RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection );
	struct FPlane Project ( struct FVector WorldLocation );
	void UpdateLightingOverrides ( struct FPointer pSceneView, float DeltaTime );
	void RemoveWorldLightingOverride ( struct FPointer pMovie );
	void OverrideWorldLighting ( struct FPointer pMovie, struct FRotator DirectionOffset, float FadeInTime, float FadeOutTime );
	void TouchPlayerPostProcessChain ( );
	class UPostProcessChain* GetPostProcessChain ( int InIndex );
	bool RemoveAllPostProcessingChains ( );
	bool RemovePostProcessingChain ( int InIndex );
	bool InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone );
	class UTranslationContext* GetTranslationContext ( );
	void SetControllerId ( int NewControllerId );
	void ClearPostProcessSettingsOverride ( float BlendOutTime );
	void OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float BlendInTime );
	bool GetActorVisibility ( class AActor* TestActor );
	void SendSplitJoin ( );
	bool SpawnPlayActor ( struct FString URL, struct FString* OutError );
};

UClass* ULocalPlayer::pClassPointer = NULL;

// Class Engine.NetConnection
// 0x4FF8 (0x5058 - 0x0060)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[ 0x4FA4 ];                          		// 0x0060 (0x4FA4) MISSED OFFSET
	TArray< class UChildConnection* >                  Children;                                         		// 0x5004 (0x000C) [0x0000000000602000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x5010 (0x0048) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 750 ];

		return pClassPointer;
	};

};

UClass* UNetConnection::pClassPointer = NULL;

// Class Engine.ChildConnection
// 0x0004 (0x505C - 0x5058)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                           		// 0x5058 (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 754 ];

		return pClassPointer;
	};

};

UClass* UChildConnection::pClassPointer = NULL;

// Class Engine.DemoRecConnection
// 0x0000 (0x5058 - 0x5058)
class UDemoRecConnection : public UNetConnection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 757 ];

		return pClassPointer;
	};

};

UClass* UDemoRecConnection::pClassPointer = NULL;

// Class Engine.Polys
// 0x0010 (0x004C - 0x003C)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x003C (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 759 ];

		return pClassPointer;
	};

};

UClass* UPolys::pClassPointer = NULL;

// Class Engine.PostProcessChain
// 0x000C (0x0048 - 0x003C)
class UPostProcessChain : public UObject
{
public:
	TArray< class UPostProcessEffect* >                Effects;                                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 761 ];

		return pClassPointer;
	};

	class UPostProcessEffect* FindPostProcessEffect ( struct FName EffectName );
};

UClass* UPostProcessChain::pClassPointer = NULL;

// Class Engine.PostProcessEffect
// 0x0025 (0x0061 - 0x003C)
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowInGame : 1;                                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseWorldSettings : 1;                            		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAffectsLightingOnly : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	struct FName                                       EffectName;                                       		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NodePosY;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                InDrawY;                                          		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned char                                      SceneDPG;                                         		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 763 ];

		return pClassPointer;
	};

};

UClass* UPostProcessEffect::pClassPointer = NULL;

// Class Engine.AccumulateAlphaEffect
// 0x0003 (0x0064 - 0x0061)
class UAccumulateAlphaEffect : public UPostProcessEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 765 ];

		return pClassPointer;
	};

};

UClass* UAccumulateAlphaEffect::pClassPointer = NULL;

// Class Engine.AmbientOcclusionEffect
// 0x005F (0x00C0 - 0x0061)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	struct FLinearColor                                OcclusionColor;                                   		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionPower;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionScale;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionBias;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOcclusion;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SSAO2 : 1;                                        		// 0x0084 (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned long                                      bAngleBasedSSAO : 1;                              		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              OcclusionRadius;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionAttenuation;                             		// 0x008C (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      OcclusionQuality;                                 		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMinDistance;                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMaxDistance;                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceThreshold;                            		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceScale;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloOcclusion;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceThreshold;                            		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceScale;                                		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterDistanceScale;                              		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FilterSize;                                       		// 0x00B4 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              HistoryConvergenceTime;                           		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryWeightConvergenceTime;                     		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 767 ];

		return pClassPointer;
	};

};

UClass* UAmbientOcclusionEffect::pClassPointer = NULL;

// Class Engine.BlurEffect
// 0x0007 (0x0068 - 0x0061)
class UBlurEffect : public UPostProcessEffect
{
public:
	int                                                BlurKernelSize;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 769 ];

		return pClassPointer;
	};

};

UClass* UBlurEffect::pClassPointer = NULL;

// Class Engine.DOFEffect
// 0x005F (0x00C0 - 0x0061)
class UDOFEffect : public UPostProcessEffect
{
public:
	float                                              FalloffExponent;                                  		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBlurAmount;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FocusType;                                        		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TunnelVisionScale;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TunnelVisionYOffset;                              		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverrideDOFSettings : 1;                         		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              FalloffExponentOverride;                          		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              BlurKernelSizeOverride;                           		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              MaxNearBlurAmountOverride;                        		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              MaxFarBlurAmountOverride;                         		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              MinBlurAmountOverride;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              FocusInnerRadiusOverride;                         		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              FocusDistanceOverride;                            		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              TunnelVisionScaleOverride;                        		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              TunnelVisionYOffsetOverride;                      		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 771 ];

		return pClassPointer;
	};

};

UClass* UDOFEffect::pClassPointer = NULL;

// Class Engine.DOFAndBloomEffect
// 0x0024 (0x00E4 - 0x00C0)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomThreshold;                                   		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloomTint;                                        		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScreenBlendThreshold;                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneMultiplier;                                  		// 0x00D0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              BlurBloomKernelSize;                              		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableReferenceDOF : 1;                          		// 0x00D8 (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned char                                      DepthOfFieldType;                                 		// 0x00DC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DepthOfFieldQuality;                              		// 0x00DD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  BokehTexture;                                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 773 ];

		return pClassPointer;
	};

};

UClass* UDOFAndBloomEffect::pClassPointer = NULL;

// Class Engine.DOFBloomMotionBlurEffect
// 0x0014 (0x00F8 - 0x00E4)
class UDOFBloomMotionBlurEffect : public UDOFAndBloomEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 775 ];

		return pClassPointer;
	};

};

UClass* UDOFBloomMotionBlurEffect::pClassPointer = NULL;

// Class Engine.UberPostProcessEffect
// 0x00A0 (0x0198 - 0x00F8)
class UUberPostProcessEffect : public UDOFBloomMotionBlurEffect
{
public:
	struct FVector                                     SceneShadows;                                     		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneHighLights;                                  		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneMidTones;                                    		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneDesaturation;                                		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneColorize;                                    		// 0x0120 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      VignetteEnabled : 1;                              		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableImageGrain : 1;                            		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bScaleEffectsWithViewSize : 1;                    		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableHDRTonemapper : 1;                         		// 0x012C (0x0004) [0x0000000020000000] [0x00000008] ( CPF_Deprecated )
	struct FLinearColor                                VignetteColor;                                    		// 0x0130 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              VignetteBrightness;                               		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    VignetteTexture;                                  		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TonemapperType;                                   		// 0x0148 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TonemapperRange;                                  		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TonemapperToeFactor;                              		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TonemapperScale;                                  		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurSoftEdgeKernelSize;                     		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneImageGrainScale;                             		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomWeightSmall;                                 		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomWeightMedium;                                		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomWeightLarge;                                 		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomSizeScaleSmall;                              		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomSizeScaleMedium;                             		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomSizeScaleLarge;                              		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLUTBlender                                 PreviousLUTBlender;                               		// 0x0178 (0x001C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              SceneHDRTonemapperScale;                          		// 0x0194 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 777 ];

		return pClassPointer;
	};

};

UClass* UUberPostProcessEffect::pClassPointer = NULL;

// Class Engine.DwTriovizImplEffect
// 0x0003 (0x0064 - 0x0061)
class UDwTriovizImplEffect : public UPostProcessEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 779 ];

		return pClassPointer;
	};

};

UClass* UDwTriovizImplEffect::pClassPointer = NULL;

// Class Engine.FXAAEffect
// 0x0003 (0x0064 - 0x0061)
class UFXAAEffect : public UPostProcessEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 781 ];

		return pClassPointer;
	};

};

UClass* UFXAAEffect::pClassPointer = NULL;

// Class Engine.MaterialEffect
// 0x0007 (0x0068 - 0x0061)
class UMaterialEffect : public UPostProcessEffect
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 783 ];

		return pClassPointer;
	};

};

UClass* UMaterialEffect::pClassPointer = NULL;

// Class Engine.MotionBlurEffect
// 0x0017 (0x0078 - 0x0061)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 785 ];

		return pClassPointer;
	};

};

UClass* UMotionBlurEffect::pClassPointer = NULL;

// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x0040 - 0x003C)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                		// 0x003C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x003C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x003C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x003C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x003C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x003C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      CastShadow : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 787 ];

		return pClassPointer;
	};

};

UClass* UPrimitiveComponentFactory::pClassPointer = NULL;

// Class Engine.MeshComponentFactory
// 0x000C (0x004C - 0x0040)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 789 ];

		return pClassPointer;
	};

};

UClass* UMeshComponentFactory::pClassPointer = NULL;

// Class Engine.StaticMeshComponentFactory
// 0x0004 (0x0050 - 0x004C)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 791 ];

		return pClassPointer;
	};

};

UClass* UStaticMeshComponentFactory::pClassPointer = NULL;

// Class Engine.ReachSpec
// 0x0048 (0x0084 - 0x003C)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                  		// 0x003C (0x0004) [0x0000000000023002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_EditConst )
	struct FVector                                     Direction;                                        		// 0x0040 (0x000C) [0x0000000000000000]              
	class AActor*                                      BlockedBy;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                MaxLandingVelocity;                               		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                Distance;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            Start;                                            		// 0x0058 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FActorReference                             End;                                              		// 0x005C (0x0014) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                CollisionRadius;                                  		// 0x0070 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                CollisionHeight;                                  		// 0x0074 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                reachFlags;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      bPruned;                                          		// 0x007C (0x0001) [0x0000000000000000]              
	unsigned char                                      PathColorIndex;                                   		// 0x007D (0x0001) [0x0000000000000000]              
	unsigned long                                      bAddToNavigationOctree : 1;                       		// 0x0080 (0x0004) [0x0000000000020002] [0x00000001] ( CPF_Const | CPF_EditConst )
	unsigned long                                      bCanCutCorners : 1;                               		// 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x0080 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSkipPrune : 1;                                   		// 0x0080 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisabled : 1;                                    		// 0x0080 (0x0004) [0x0000000000020001] [0x00000010] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bRequiresSpecialMovement : 1;                     		// 0x0080 (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 793 ];

		return pClassPointer;
	};

	bool IsBlockedFor ( class APawn* P );
	struct FVector GetDirection ( );
	class ANavigationPoint* GetEnd ( );
	int CostFor ( class APawn* P );
};

UClass* UReachSpec::pClassPointer = NULL;

// Class Engine.AdvancedReachSpec
// 0x0000 (0x0084 - 0x0084)
class UAdvancedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 795 ];

		return pClassPointer;
	};

};

UClass* UAdvancedReachSpec::pClassPointer = NULL;

// Class Engine.CeilingReachSpec
// 0x0000 (0x0084 - 0x0084)
class UCeilingReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 797 ];

		return pClassPointer;
	};

};

UClass* UCeilingReachSpec::pClassPointer = NULL;

// Class Engine.ForcedReachSpec
// 0x0000 (0x0084 - 0x0084)
class UForcedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 799 ];

		return pClassPointer;
	};

};

UClass* UForcedReachSpec::pClassPointer = NULL;

// Class Engine.CoverSlipReachSpec
// 0x0001 (0x0085 - 0x0084)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x0084 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 801 ];

		return pClassPointer;
	};

};

UClass* UCoverSlipReachSpec::pClassPointer = NULL;

// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x0084 - 0x0084)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 803 ];

		return pClassPointer;
	};

};

UClass* UFloorToCeilingReachSpec::pClassPointer = NULL;

// Class Engine.MantleReachSpec
// 0x0004 (0x0088 - 0x0084)
class UMantleReachSpec : public UForcedReachSpec
{
public:
	unsigned long                                      bClimbUp : 1;                                     		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 805 ];

		return pClassPointer;
	};

};

UClass* UMantleReachSpec::pClassPointer = NULL;

// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x0085 - 0x0084)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x0084 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 807 ];

		return pClassPointer;
	};

};

UClass* USlotToSlotReachSpec::pClassPointer = NULL;

// Class Engine.SwatTurnReachSpec
// 0x0001 (0x0085 - 0x0084)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x0084 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 809 ];

		return pClassPointer;
	};

};

UClass* USwatTurnReachSpec::pClassPointer = NULL;

// Class Engine.WallTransReachSpec
// 0x0000 (0x0084 - 0x0084)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 811 ];

		return pClassPointer;
	};

};

UClass* UWallTransReachSpec::pClassPointer = NULL;

// Class Engine.LadderReachSpec
// 0x0000 (0x0084 - 0x0084)
class ULadderReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 813 ];

		return pClassPointer;
	};

};

UClass* ULadderReachSpec::pClassPointer = NULL;

// Class Engine.ProscribedReachSpec
// 0x0000 (0x0084 - 0x0084)
class UProscribedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 815 ];

		return pClassPointer;
	};

};

UClass* UProscribedReachSpec::pClassPointer = NULL;

// Class Engine.TeleportReachSpec
// 0x0000 (0x0084 - 0x0084)
class UTeleportReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 817 ];

		return pClassPointer;
	};

};

UClass* UTeleportReachSpec::pClassPointer = NULL;

// Class Engine.SavedMove
// 0x00AC (0x00E8 - 0x003C)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                         		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              TimeStamp;                                        		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              Delta;                                            		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRun : 1;                                         		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuck : 1;                                        		// 0x0048 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x0048 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x0048 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x0048 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x0048 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x0048 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bRootMotionFromInterpCurve : 1;                   		// 0x0048 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned char                                      DoubleClickMove;                                  		// 0x004C (0x0001) [0x0000000000000000]              
	unsigned char                                      SavedPhysics;                                     		// 0x004D (0x0001) [0x0000000000000000]              
	unsigned char                                      AnalogPct;                                        		// 0x004E (0x0001) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x004F (0x0001) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x0050 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartRelativeLocation;                            		// 0x005C (0x000C) [0x0000000000000000]              
	struct FVector                                     StartVelocity;                                    		// 0x0068 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartFloor;                                       		// 0x0074 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedLocation;                                    		// 0x0080 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedVelocity;                                    		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedRelativeLocation;                            		// 0x0098 (0x000C) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x00A4 (0x000C) [0x0000000000000000]              
	struct FVector                                     Acceleration;                                     		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x00BC (0x000C) [0x0000000000000000]              
	class AActor*                                      StartBase;                                        		// 0x00C8 (0x0004) [0x0000000000000000]              
	class AActor*                                      EndBase;                                          		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              CustomTimeDilation;                               		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              AccelDotThreshold;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              RootMotionInterpCurrentTime;                      		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FVector                                     RootMotionInterpCurveLastValue;                   		// 0x00DC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 819 ];

		return pClassPointer;
	};

	struct FString GetDebugString ( );
	unsigned char SetFlags ( unsigned char Flags, class APlayerController* PC );
	unsigned char CompressedFlags ( );
	void ResetMoveFor ( class APawn* P );
	void PrepMoveFor ( class APawn* P );
	void SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick, unsigned char InAnalogPct );
	bool CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta );
	void SetInitialPosition ( class APawn* P );
	struct FVector GetStartLocation ( );
	bool IsImportantMove ( struct FVector CompareAccel, unsigned char CompareAnalogPct );
	void PostUpdate ( class APlayerController* P );
	void Clear ( );
};

UClass* USavedMove::pClassPointer = NULL;

// Class Engine.SaveGameSummary
// 0x0014 (0x0050 - 0x003C)
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                        		// 0x003C (0x0008) [0x0000000000000000]              
	struct FString                                     Description;                                      		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 821 ];

		return pClassPointer;
	};

};

UClass* USaveGameSummary::pClassPointer = NULL;

// Class Engine.Selection
// 0x0024 (0x0060 - 0x003C)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x24 ];                            		// 0x003C (0x0024) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 823 ];

		return pClassPointer;
	};

};

UClass* USelection::pClassPointer = NULL;

// Class Engine.ServerCommandlet
// 0x0000 (0x007C - 0x007C)
class UServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 825 ];

		return pClassPointer;
	};

};

UClass* UServerCommandlet::pClassPointer = NULL;

// Class Engine.Settings
// 0x0030 (0x006C - 0x003C)
class USettings : public UObject
{
public:
	TArray< struct FLocalizedStringSetting >           LocalizedSettings;                                		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLocalizedStringSettingMetaData >   LocalizedSettingsMappings;                        		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsPropertyPropertyMetaData > PropertyMappings;                                 		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 827 ];

		return pClassPointer;
	};

	void UpdateFromURL ( class AGameInfo* Game, struct FString* URL );
	void BuildURL ( struct FString* URL );
	void AppendContextsToURL ( struct FString* URL );
	void AppendPropertiesToURL ( struct FString* URL );
	void AppendDataBindingsToURL ( struct FString* URL );
	void GetQoSAdvertisedStringSettings ( TArray< struct FLocalizedStringSetting >* QoSSettings );
	void GetQoSAdvertisedProperties ( TArray< struct FSettingsProperty >* QoSProps );
	bool GetRangedPropertyValue ( int PropertyId, float* OutValue );
	bool SetRangedPropertyValue ( int PropertyId, float NewValue );
	bool GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetPropertyMappingType ( int PropertyId, unsigned char* OutType );
	bool HasStringSetting ( int SettingId );
	bool HasProperty ( int PropertyId );
	void UpdateProperties ( unsigned long bShouldAddIfMissing, TArray< struct FSettingsProperty >* Props );
	void UpdateStringSettings ( unsigned long bShouldAddIfMissing, TArray< struct FLocalizedStringSetting >* Settings );
	unsigned char GetPropertyType ( int PropertyId );
	bool GetPropertyValueId ( int PropertyId, int* ValueId );
	bool SetPropertyValueId ( int PropertyId, int ValueId );
	bool GetByteProperty ( int PropertyId, unsigned char* Value );
	void SetByteProperty ( int PropertyId, unsigned char Value );
	bool GetStringProperty ( int PropertyId, struct FString* Value );
	void SetStringProperty ( int PropertyId, struct FString Value );
	bool GetIntProperty ( int PropertyId, int* Value );
	void SetIntProperty ( int PropertyId, int Value );
	bool GetFloatProperty ( int PropertyId, float* Value );
	void SetFloatProperty ( int PropertyId, float Value );
	bool SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue );
	struct FString GetPropertyAsStringByName ( struct FName PropertyName );
	struct FString GetPropertyAsString ( int PropertyId );
	struct FString GetPropertyColumnHeader ( int PropertyId );
	struct FName GetPropertyName ( int PropertyId );
	bool GetPropertyId ( struct FName PropertyName, int* PropertyId );
	bool SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue );
	struct FName GetStringSettingValueNameByName ( struct FName StringSettingName );
	struct FName GetStringSettingValueName ( int StringSettingId, int ValueIndex );
	bool IsWildcardStringSetting ( int StringSettingId );
	struct FString GetStringSettingColumnHeader ( int StringSettingId );
	struct FName GetStringSettingName ( int StringSettingId );
	bool GetStringSettingId ( struct FName StringSettingName, int* StringSettingId );
	bool GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex );
	void SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd );
	bool GetStringSettingValueNames ( int StringSettingId, TArray< struct FIdToStringMapping >* Values );
	bool IncrementStringSettingValue ( int StringSettingId, int Direction, unsigned long bShouldWrap );
	bool GetStringSettingValue ( int StringSettingId, int* ValueIndex );
	void SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd );
	void GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 );
	void GetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* OutBlob );
	int GetSettingsDataInt ( struct FSettingsData* Data );
	float GetSettingsDataFloat ( struct FSettingsData* Data );
	struct FString GetSettingsDataString ( struct FSettingsData* Data );
	void EmptySettingsData ( struct FSettingsData* Data );
	void SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy );
	void SetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* InBlob );
	void SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data );
	void SetSettingsDataInt ( int InInt, struct FSettingsData* Data );
	void SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data );
	void SetSettingsDataString ( struct FString InString, struct FSettingsData* Data );
};

UClass* USettings::pClassPointer = NULL;

// Class Engine.OnlineGameSearch
// 0x008C (0x00F8 - 0x006C)
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                 		// 0x006C (0x0004) [0x0000000000000000]              
	struct FLocalizedStringSetting                     Query;                                            		// 0x0070 (0x000C) [0x0000000000000000]              
	unsigned long                                      bIsLanQuery : 1;                                  		// 0x007C (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x007C (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bIsSearchInProgress : 1;                          		// 0x007C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	class UClass*                                      GameSettingsClass;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	TArray< struct FOnlineGameSearchResult >           Results;                                          		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FOverrideSkill                              ManualSkillOverride;                              		// 0x0090 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedObjectProperty >              NamedProperties;                                  		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FOnlineGameSearchQuery                      FilterQuery;                                      		// 0x00C4 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AdditionalSearchCriteria;                         		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PingBucketSize;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                NumPingProbes;                                    		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                MaxPingBytes;                                     		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                NumSearchUsers;                                   		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 829 ];

		return pClassPointer;
	};

	void eventSortSearchResults ( );
	void SetSkillOverride ( int LeaderboardId, TArray< struct FUniqueNetId >* Players );
};

UClass* UOnlineGameSearch::pClassPointer = NULL;

// Class Engine.OnlineGameSettings
// 0x005C (0x00C8 - 0x006C)
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                             		// 0x006C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumPrivateConnections;                            		// 0x0070 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPublicConnections;                         		// 0x0074 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPrivateConnections;                        		// 0x0078 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FQWord                                      ServerNonce;                                      		// 0x007C (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShouldAdvertise : 1;                             		// 0x0084 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bIsLanMatch : 1;                                  		// 0x0084 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesStats : 1;                                   		// 0x0084 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinInProgress : 1;                         		// 0x0084 (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowInvites : 1;                                		// 0x0084 (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesPresence : 1;                                		// 0x0084 (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresence : 1;                        		// 0x0084 (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;             		// 0x0084 (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x0084 (0x0004) [0x0000000040000000] [0x00000100] ( CPF_EditInlineNotify )
	unsigned long                                      bAntiCheatProtected : 1;                          		// 0x0084 (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	unsigned long                                      bWasFromInvite : 1;                               		// 0x0084 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bIsDedicated : 1;                                 		// 0x0084 (0x0004) [0x0000000040000000] [0x00000800] ( CPF_EditInlineNotify )
	unsigned long                                      bHasSkillUpdateInProgress : 1;                    		// 0x0084 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bShouldShrinkArbitratedSessions : 1;              		// 0x0084 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	struct FString                                     OwningPlayerName;                                 		// 0x0088 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FUniqueNetId                                OwningPlayerId;                                   		// 0x0094 (0x0018) [0x0000000000000000]              
	int                                                PingInMs;                                         		// 0x00AC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              MatchQuality;                                     		// 0x00B0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      GameState;                                        		// 0x00B4 (0x0001) [0x0000000040000002]              ( CPF_Const | CPF_EditInlineNotify )
	int                                                BuildUniqueId;                                    		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     BuildUniqueString;                                		// 0x00BC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 831 ];

		return pClassPointer;
	};

	struct FString GetGameVersionString ( );
};

UClass* UOnlineGameSettings::pClassPointer = NULL;

// Class Engine.ShaderCache
// 0x00C0 (0x00FC - 0x003C)
class UShaderCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xC0 ];                            		// 0x003C (0x00C0) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 833 ];

		return pClassPointer;
	};

};

UClass* UShaderCache::pClassPointer = NULL;

// Class Engine.ShadowMap1D
// 0x0040 (0x007C - 0x003C)
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x40 ];                            		// 0x003C (0x0040) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 835 ];

		return pClassPointer;
	};

};

UClass* UShadowMap1D::pClassPointer = NULL;

// Class Engine.ShadowMap2D
// 0x0030 (0x006C - 0x003C)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                          		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateScale;                                  		// 0x0040 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateBias;                                   		// 0x0048 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightGuid;                                        		// 0x0050 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsShadowFactorTexture : 1;                       		// 0x0060 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	class UInstancedStaticMeshComponent*               Component;                                        		// 0x0064 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                InstanceIndex;                                    		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 837 ];

		return pClassPointer;
	};

};

UClass* UShadowMap2D::pClassPointer = NULL;

// Class Engine.SmokeTestCommandlet
// 0x0000 (0x007C - 0x007C)
class USmokeTestCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 839 ];

		return pClassPointer;
	};

};

UClass* USmokeTestCommandlet::pClassPointer = NULL;

// Class Engine.SnapshotInterface
// 0x0004 (0x0040 - 0x003C)
class USnapshotInterface : public UObject
{
public:
	unsigned long                                      bEnableInMultiplayer : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTracked : 1;                                     		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 841 ];

		return pClassPointer;
	};

};

UClass* USnapshotInterface::pClassPointer = NULL;

// Class Engine.SpeechRecognition
// 0x0088 (0x00C4 - 0x003C)
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                         		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ConfidenceThreshhold;                             		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRecogVocabulary >                  Vocabularies;                                     		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            VoiceData;                                        		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            WorkingVoiceData;                                 		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            UserData;                                         		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRecogUserData                              InstanceData[ 0x4 ];                              		// 0x007C (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bDirty : 1;                                       		// 0x00BC (0x0004) [0x0000000000202000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialised : 1;                                 		// 0x00BC (0x0004) [0x0000000000202000] [0x00000002] ( CPF_Transient )
	struct FPointer                                    FnxVoiceData;                                     		// 0x00C0 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 843 ];

		return pClassPointer;
	};

};

UClass* USpeechRecognition::pClassPointer = NULL;

// Class Engine.StaticMesh
// 0x00F4 (0x0130 - 0x003C)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x003C (0x000C) MISSED OFFSET
	TArray< struct FStaticMeshLODInfo >                LODInfo;                                          		// 0x0048 (0x000C) [0x0000000000001041]              ( CPF_Edit | CPF_EditConstArray | CPF_Native )
	float                                              LODDistanceRatio;                                 		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LODMaxRange;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapResolution;                               		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapCoordinateIndex;                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0x4C ];                            		// 0x0064 (0x004C) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                        		// 0x00B0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned char                                      UnknownData02[ 0x34 ];                            		// 0x00B4 (0x0034) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                       		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleBoxCollision : 1;                        		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                  		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ForceComplexRigidBodyCollisionPhysX : 1;          		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseFullPrecisionUVs : 1;                          		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsedForInstancing : 1;                           		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      DynamicShadowCastRelevance;                       		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCanBecomeDynamic : 1;                            		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData03[ 0x24 ];                            		// 0x010C (0x0024) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 845 ];

		return pClassPointer;
	};

};

UClass* UStaticMesh::pClassPointer = NULL;

// Class Engine.RB_BodySetup
// 0x004C (0x00CC - 0x0080)
class URB_BodySetup : public UKMeshProps
{
public:
	unsigned char                                      SleepFamily;                                      		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0084 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bFixed : 1;                                       		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoCollision : 1;                                 		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockZeroExtent : 1;                             		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBlockNonZeroExtent : 1;                          		// 0x008C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableContinuousCollisionDetection : 1;          		// 0x008C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAlwaysFullAnimWeight : 1;                        		// 0x008C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bConsiderForBounds : 1;                           		// 0x008C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassScale;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPointer >                          CollisionGeom;                                    		// 0x0098 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FVector >                           CollisionGeomScale3D;                             		// 0x00A4 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FVector >                           PreCachedPhysScale;                               		// 0x00B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FKCachedConvexData >                PreCachedPhysData;                                		// 0x00BC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                PreCachedPhysDataVersion;                         		// 0x00C8 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 871 ];

		return pClassPointer;
	};

};

UClass* URB_BodySetup::pClassPointer = NULL;

// Class Engine.Texture
// 0x001C (0x0058 - 0x003C)
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                         		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RGBE : 1;                                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsSourceArtUncompressed : 1;                     		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      CompressionNoAlpha : 1;                           		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      CompressionNone : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      CompressionNoMipmaps : 1;                         		// 0x003C (0x0004) [0x0000000020000000] [0x00000020] ( CPF_Deprecated )
	unsigned long                                      CompressionFullDynamicRange : 1;                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      DeferCompression : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      NeverStream : 1;                                  		// 0x003C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDitherMipMapAlpha : 1;                           		// 0x003C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPreserveBorderR : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPreserveBorderG : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPreserveBorderB : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bPreserveBorderA : 1;                             		// 0x003C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bNoTiling : 1;                                    		// 0x003C (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bForcePVRTC4 : 1;                                 		// 0x003C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;          		// 0x003C (0x0004) [0x0000000000002002] [0x00010000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseCinematicMipLevels : 1;                       		// 0x003C (0x0004) [0x0000000000002002] [0x00020000] ( CPF_Const | CPF_Transient )
	unsigned char                                      CompressionSettings;                              		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Filter;                                           		// 0x0041 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODGroup;                                         		// 0x0042 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MipGenSettings;                                   		// 0x0043 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBias;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CachedCombinedLODBias;                            		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumCinematicMipLevels;                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Resource;                                         		// 0x0050 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                InternalFormatLODBias;                            		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 873 ];

		return pClassPointer;
	};

};

UClass* UTexture::pClassPointer = NULL;

// Class Engine.Texture2D
// 0x0068 (0x00C0 - 0x0058)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x0058 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SizeX;                                            		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OriginalSizeX;                                    		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OriginalSizeY;                                    		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x0074 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x0075 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x0076 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsStreamable : 1;                                		// 0x0078 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasCancelationPending : 1;                       		// 0x0078 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;          		// 0x0078 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceMiplevelsToBeResident : 1;                  		// 0x0078 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;            		// 0x0078 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsCompositingSource : 1;                         		// 0x0078 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bGoreTexture : 1;                                 		// 0x0078 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              ForceMipLevelsToBeResidentTimestamp;              		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       TextureFileCacheName;                             		// 0x0080 (0x0008) [0x0000000000000000]              
	int                                                RequestedMips;                                    		// 0x0088 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResidentMips;                                     		// 0x008C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                    		// 0x0090 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            SystemMemoryData;                                 		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                           		// 0x00A0 (0x000C) [0x0000000001201002]              ( CPF_Const | CPF_Native )
	int                                                StreamingIndex;                                   		// 0x00AC (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )
	int                                                MipTailBaseIdx;                                   		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ResourceMem;                                      		// 0x00B4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FirstResourceMemMip;                              		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Timer;                                            		// 0x00BC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 875 ];

		return pClassPointer;
	};

	class UTexture2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat );
	void SetForceMipLevelsToBeResident ( float Seconds, int CinematicTextureGroups );
};

UClass* UTexture2D::pClassPointer = NULL;

// Class Engine.LightMapTexture2D
// 0x0004 (0x00C4 - 0x00C0)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C0 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 877 ];

		return pClassPointer;
	};

};

UClass* ULightMapTexture2D::pClassPointer = NULL;

// Class Engine.ShadowMapTexture2D
// 0x0004 (0x00C4 - 0x00C0)
class UShadowMapTexture2D : public UTexture2D
{
public:
	int                                                ShadowmapFlags;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 879 ];

		return pClassPointer;
	};

};

UClass* UShadowMapTexture2D::pClassPointer = NULL;

// Class Engine.TranslationContext
// 0x000C (0x0048 - 0x003C)
class UTranslationContext : public UObject
{
public:
	TArray< class UTranslatorTag* >                    TranslatorTags;                                   		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 881 ];

		return pClassPointer;
	};

	bool RegisterTranslatorTag ( class UTranslatorTag* InTagHandler );
};

UClass* UTranslationContext::pClassPointer = NULL;

// Class Engine.TranslatorTag
// 0x0008 (0x0044 - 0x003C)
class UTranslatorTag : public UObject
{
public:
	struct FName                                       Tag;                                              		// 0x003C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 883 ];

		return pClassPointer;
	};

	struct FString Translate ( struct FString InArgument );
};

UClass* UTranslatorTag::pClassPointer = NULL;

// Class Engine.StringsTag
// 0x0000 (0x0044 - 0x0044)
class UStringsTag : public UTranslatorTag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 885 ];

		return pClassPointer;
	};

	struct FString Translate ( struct FString InArgument );
};

UClass* UStringsTag::pClassPointer = NULL;

// Class Engine.UIRoot
// 0x000C (0x0048 - 0x003C)
class UUIRoot : public UObject
{
public:
	TArray< struct FString >                           BadCapsLocContexts;                               		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 887 ];

		return pClassPointer;
	};

	struct FString SafeCaps ( struct FString StringToCap );
	class UOnlinePlayerInterfaceEx* GetOnlinePlayerInterfaceEx ( );
	class UOnlinePlayerInterface* GetOnlinePlayerInterface ( );
	class UOnlineGameInterface* GetOnlineGameInterface ( );
	bool GetDataStoreStringValue ( struct FString InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue );
	bool GetDataStoreFieldValue ( struct FString InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue );
	bool SetDataStoreStringValue ( struct FString InDataStoreMarkup, struct FString InStringValue, class ULocalPlayer* OwnerPlayer );
	bool SetDataStoreFieldValue ( struct FString InDataStoreMarkup, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue );
	class UUIDataStore* StaticResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner );
	class UGameUISceneClient* GetSceneClient ( );
	class UUIInteraction* GetCurrentUIController ( );
	unsigned char GetInputPlatformType ( class ULocalPlayer* OwningPlayer );
};

UClass* UUIRoot::pClassPointer = NULL;

// Class Engine.Interaction
// 0x0030 (0x0078 - 0x0048)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;             		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;            		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;            		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInitialize__Delegate;                         		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 889 ];

		return pClassPointer;
	};

	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyGameSessionEnded ( );
	void Initialized ( );
	void OnInitialize ( );
	void Init ( );
	void eventPostRender ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	bool OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode );
	bool OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

UClass* UInteraction::pClassPointer = NULL;

// Class Engine.UIInteraction
// 0x00FC (0x0174 - 0x0078)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0078 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;            		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0080 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIManager*                                  UIManager;                                        		// 0x0084 (0x0004) [0x0000000000000000]              
	class UClass*                                      UIManagerClass;                                   		// 0x0088 (0x0004) [0x0000000000000000]              
	class UClass*                                      SceneClientClass;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	class UGameUISceneClient*                          SceneClient;                                      		// 0x0090 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FName >                             SupportedDoubleClickKeys;                         		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x00A0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                bProcessInput[ 0x4 ];                             		// 0x00A4 (0x0010) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              UIJoystickDeadZone;                               		// 0x00B4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              UIAxisMultiplier;                                 		// 0x00B8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              AxisRepeatDelay;                                  		// 0x00BC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MouseButtonRepeatDelay;                           		// 0x00C0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DoubleClickTriggerSeconds;                        		// 0x00C4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                DoubleClickPixelTolerance;                        		// 0x00C8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                            		// 0x00CC (0x0010) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FUIAxisEmulationDefinition >        ConfiguredAxisEmulationDefinitions;               		// 0x00DC (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00E8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	struct FUIAxisEmulationData                        AxisInputEmulation[ 0x4 ];                        		// 0x0124 (0x0050) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 891 ];

		return pClassPointer;
	};

	void NotifyGameSessionEnded ( );
	unsigned char eventGetNATType ( );
	bool eventCanCommunicate ( int ControllerId );
	int GetConnectedGamepadCount ( TArray< unsigned long > ControllerConnectionStatusOverrides );
	bool IsGamepadConnected ( int ControllerId );
	int GetNumGuestsLoggedIn ( );
	int GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	bool eventHasLinkConnection ( );
	unsigned char GetLowestLoginStatusOfControllers ( );
	unsigned char eventGetLoginStatus ( int ControllerId );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	class ULocalPlayer* GetLocalPlayer ( int PlayerIndex );
	class UDataStoreClient* GetDataStoreClient ( );
	int GetPlayerControllerId ( int PlayerIndex );
	int GetPlayerIndex ( int ControllerId );
	int GetPlayerCount ( );
};

UClass* UUIInteraction::pClassPointer = NULL;

// Class Engine.UIManager
// 0x0000 (0x003C - 0x003C)
class UUIManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 893 ];

		return pClassPointer;
	};

	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex );
	bool CanUnpauseInternalUI ( );
	class UUIManager* GetUIManager ( );
};

UClass* UUIManager::pClassPointer = NULL;

// Class Engine.Vertex
// 0x0020 (0x005C - 0x003C)
class UVertex : public UObject
{
public:
	class ULine*                                       ParentLine;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	struct FVector                                     Position;                                         		// 0x0040 (0x000C) [0x0000000000000000]              
	class UMaterial*                                   Material;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	class UMaterial*                                   Material_Selected;                                		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsSelected : 1;                                  		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FColor                                      cColor;                                           		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 895 ];

		return pClassPointer;
	};

};

UClass* UVertex::pClassPointer = NULL;

// Class Engine.WaveFormBase
// 0x0004 (0x0040 - 0x003C)
class UWaveFormBase : public UObject
{
public:
	class UForceFeedbackWaveform*                      TheWaveForm;                                      		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 897 ];

		return pClassPointer;
	};

};

UClass* UWaveFormBase::pClassPointer = NULL;

// Class Engine.World
// 0x02B8 (0x02F4 - 0x003C)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x2B8 ];                           		// 0x003C (0x02B8) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 899 ];

		return pClassPointer;
	};

};

UClass* UWorld::pClassPointer = NULL;

// Class Engine.EnvironmentVolume
// 0x000C (0x01C8 - 0x01BC)
class AEnvironmentVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;           		// 0x01BC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x01C0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bSplitNavMesh : 1;                                		// 0x01C4 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 901 ];

		return pClassPointer;
	};

	void SetSplitNavMesh ( unsigned long bNewValue );
};

UClass* AEnvironmentVolume::pClassPointer = NULL;

// Class Engine.TestSplittingVolume
// 0x0004 (0x01C0 - 0x01BC)
class ATestSplittingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x01BC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 903 ];

		return pClassPointer;
	};

};

UClass* ATestSplittingVolume::pClassPointer = NULL;

// Class Engine.AIController
// 0x0018 (0x0684 - 0x066C)
class AAIController : public AController
{
public:
	unsigned long                                      bAdjustFromWalls : 1;                             		// 0x066C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReverseScriptedRoute : 1;                        		// 0x066C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              Skill;                                            		// 0x0670 (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedMoveTarget;                               		// 0x0674 (0x0004) [0x0000000000000000]              
	class ARoute*                                      ScriptedRoute;                                    		// 0x0678 (0x0004) [0x0000000000000000]              
	int                                                ScriptedRouteIndex;                               		// 0x067C (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedFocus;                                    		// 0x0680 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 905 ];

		return pClassPointer;
	};

	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void GetPlayerViewPoint ( unsigned long bMustBeCurrent, struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSetTeam ( int inTeamIdx );
	void Reset ( );
	void eventPreBeginPlay ( );
};

UClass* AAIController::pClassPointer = NULL;

// Class Engine.PathTargetPoint
// 0x0000 (0x018C - 0x018C)
class APathTargetPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 907 ];

		return pClassPointer;
	};

	bool ShouldBeHiddenBySHOW_NavigationNodes ( );
};

UClass* APathTargetPoint::pClassPointer = NULL;

// Class Engine.NavMeshObstacle
// 0x0008 (0x0190 - 0x0188)
class ANavMeshObstacle : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;           		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bEnabled : 1;                                     		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPreserveInternalGeo : 1;                         		// 0x018C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 909 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ANavMeshObstacle_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavMeshObstacle_FCheckpointRecord* Record );
	void SetEnabled ( unsigned long bInEnabled );
	void OnToggle ( class USeqAct_Toggle* Action );
	void PostBeginPlay ( );
	void UnRegisterObstacle ( );
	void RegisterObstacle ( );
	bool eventGetObstacleBoudingShape ( TArray< struct FVector >* Shape );
};

UClass* ANavMeshObstacle::pClassPointer = NULL;

// Class Engine.PylonSeed
// 0x0008 (0x0190 - 0x0188)
class APylonSeed : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIGBXNavMeshSeed;                         		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 911 ];

		return pClassPointer;
	};

};

UClass* APylonSeed::pClassPointer = NULL;

// Class Engine.BlockingMeshActor
// 0x0018 (0x01A0 - 0x0188)
class ABlockingMeshActor : public AStaticMeshActorBase
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshObstacle;                     		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UBlockingMeshComponent*                      BlockingMeshComponent;                            		// 0x018C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          BlockingMeshMaterial;                             		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBlockNavMesh : 1;                                		// 0x0194 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UMaterialInstanceConstant*                   MatInstantConstant;                               		// 0x0198 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	class UMaterialInstanceConstant*                   MatInstantConstantNew;                            		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 913 ];

		return pClassPointer;
	};

};

UClass* ABlockingMeshActor::pClassPointer = NULL;

// Class Engine.BlockingMeshReplicatedActor
// 0x0004 (0x01A4 - 0x01A0)
class ABlockingMeshReplicatedActor : public ABlockingMeshActor
{
public:
	unsigned long                                      bIsEnabled : 1;                                   		// 0x01A0 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 915 ];

		return pClassPointer;
	};

	void eventUpdateBlockingMeshComponent ( );
	void OnInterpToggle ( int ShouldToggleOn );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ABlockingMeshReplicatedActor::pClassPointer = NULL;

// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 917 ];

		return pClassPointer;
	};

};

UClass* UCoverGroupRenderingComponent::pClassPointer = NULL;

// Class Engine.MeshComponent
// 0x000C (0x021C - 0x0210)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0210 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 919 ];

		return pClassPointer;
	};

	class UMaterialInstanceConstant* GetInstancedMaterialInstanceConstant ( int ElementIndex );
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant ( int ElementIndex );
	void Behavior_SetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** Value );
	void Behavior_SetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* Value );
	void Behavior_SetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* Value );
	void Behavior_SetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Value );
	bool Behavior_GetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* OutValue );
	bool Behavior_GetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* OutValue );
	bool Behavior_GetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** OutValue );
	bool Behavior_GetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* OutValue );
	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex );
	void PrestreamTextures ( float Seconds, unsigned long bPrioritizeCharacterTextures, int CinematicTextureGroups );
	int GetNumElements ( );
	void SetMaterial ( int ElementIndex, class UMaterialInterface* Material );
	class UMaterialInterface* GetMaterial ( int ElementIndex );
};

UClass* UMeshComponent::pClassPointer = NULL;

// Class Engine.StaticMeshComponent
// 0x002C (0x0248 - 0x021C)
class UStaticMeshComponent : public UMeshComponent
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x021C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverriddenLODMaxRange;                            		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseSubDivisions : 1;                             		// 0x0228 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bForceStaticDecals : 1;                           		// 0x0228 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCanHighlightSelectedSections : 1;                		// 0x0228 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNeverBecomeDynamic : 1;                          		// 0x0228 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;           		// 0x0228 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOverrideLightMapRes : 1;                         		// 0x0228 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoredByFXCoordinator : 1;                      		// 0x0228 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      BlockRigidBodyPhysX : 1;                          		// 0x0228 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x022C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FStaticMeshComponentLODInfo >       LODData;                                          		// 0x0238 (0x000C) [0x0000000080001002]              ( CPF_Const | CPF_Native | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	unsigned char                                      ViewZeroOffset;                                   		// 0x0244 (0x0001) [0x0000000000000000]              
	unsigned char                                      ViewOneOffset;                                    		// 0x0245 (0x0001) [0x0000000000000000]              
	unsigned char                                      ForcedLodModel;                                   		// 0x0246 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviousLODLevel;                                 		// 0x0247 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 921 ];

		return pClassPointer;
	};

	void SetViewportMaterialOffsets ( unsigned char view0, unsigned char view1 );
	bool CanBecomeDynamic ( );
	void SetForceStaticDecals ( unsigned long bInForceStaticDecals );
	void DisableRBCollisionWithSMC ( class UPrimitiveComponent* OtherSMC, unsigned long bDisabled );
	bool SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce );
};

UClass* UStaticMeshComponent::pClassPointer = NULL;

// Class Engine.CoverMeshComponent
// 0x0028 (0x0270 - 0x0248)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	TArray< struct FCoverMeshes >                      Meshes;                                           		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     LocationOffset;                                   		// 0x0254 (0x000C) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOn;                                     		// 0x0260 (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOff;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 Disabled;                                         		// 0x0268 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowWhenNotSelected : 1;                         		// 0x026C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 923 ];

		return pClassPointer;
	};

};

UClass* UCoverMeshComponent::pClassPointer = NULL;

// Class Engine.NavMeshRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 925 ];

		return pClassPointer;
	};

};

UClass* UNavMeshRenderingComponent::pClassPointer = NULL;

// Class Engine.PathRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 927 ];

		return pClassPointer;
	};

};

UClass* UPathRenderingComponent::pClassPointer = NULL;

// Class Engine.RouteRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 929 ];

		return pClassPointer;
	};

};

UClass* URouteRenderingComponent::pClassPointer = NULL;

// Class Engine.AutoNavMeshPathObstacleUnregister
// 0x0008 (0x0044 - 0x003C)
class UAutoNavMeshPathObstacleUnregister : public UObject
{
public:
	class UInterface_NavMeshPathObstacle*              PathObstacleRef;                                  		// 0x003C (0x0008) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 931 ];

		return pClassPointer;
	};

};

UClass* UAutoNavMeshPathObstacleUnregister::pClassPointer = NULL;

// Class Engine.GBXNavMeshPathFinder
// 0x000C (0x0048 - 0x003C)
class UGBXNavMeshPathFinder : public UObject
{
public:
	TArray< class UGBXNavMeshPathModifier* >           PathModifiers;                                    		// 0x003C (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 933 ];

		return pClassPointer;
	};

	bool FindPathToLocation ( struct FGBXNavMeshPath* Path, struct FNavMeshPathParams* PathParams, struct FVector* SrcLocation, struct FGBXNavMeshPolyRef* SrcPoly, struct FVector* DestLocation, struct FGBXNavMeshPolyRef* DestPoly );
	bool FindNavMeshPolyForPoint ( struct FVector Location, float MaxSearchDistance, unsigned long bAnyHeight, struct FGBXNavMeshPolyRef* FoundPolyRef, struct FVector* NearestPointOnPoly, struct FNavMeshPathParams* BlockedCheckPathParams );
};

UClass* UGBXNavMeshPathFinder::pClassPointer = NULL;

// Class Engine.IGBXNavMeshObstacle
// 0x0000 (0x003C - 0x003C)
class UIGBXNavMeshObstacle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 935 ];

		return pClassPointer;
	};

};

UClass* UIGBXNavMeshObstacle::pClassPointer = NULL;

// Class Engine.Interface_NavMeshPathObject
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 937 ];

		return pClassPointer;
	};

};

UClass* UInterface_NavMeshPathObject::pClassPointer = NULL;

// Class Engine.Interface_NavMeshPathSwitch
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathSwitch : public UInterface_NavMeshPathObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 939 ];

		return pClassPointer;
	};

	bool eventAIActivateSwitch ( class AAIController* AI );
};

UClass* UInterface_NavMeshPathSwitch::pClassPointer = NULL;

// Class Engine.Interface_NavMeshPathObstacle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObstacle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 941 ];

		return pClassPointer;
	};

};

UClass* UInterface_NavMeshPathObstacle::pClassPointer = NULL;

// Class Engine.NavigationHandle
// 0x0144 (0x0180 - 0x003C)
class UNavigationHandle : public UObject
{
public:
	class APylon*                                      AnchorPylon;                                      		// 0x003C (0x0004) [0x0000000000000000]              
	struct FPointer                                    AnchorPoly;                                       		// 0x0040 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPathStore                                  PathCache;                                        		// 0x0044 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    BestUnfinishedPathPoint;                          		// 0x005C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    CurrentEdge;                                      		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SubGoal_DestPoly;                                 		// 0x0064 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FBasedPosition                              FinalDestination;                                 		// 0x0068 (0x0034) [0x0000000000000000]              
	unsigned long                                      bSkipRouteCacheUpdates : 1;                       		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseORforEvaluateGoal : 1;                        		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebugConstraintsAndGoalEvals : 1;                		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUltraVerbosePathDebugging : 1;                   		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDebug_Breadcrumbs : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class UNavMeshPathConstraint*                      PathConstraintList;                               		// 0x00A0 (0x0004) [0x0000000000000000]              
	class UNavMeshPathGoalEvaluator*                   PathGoalList;                                     		// 0x00A4 (0x0004) [0x0000000000000000]              
	struct FNavMeshPathParams                          CachedPathParams;                                 		// 0x00A8 (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      LastPathError;                                    		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastPathFailTime;                                 		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Breadcrumbs[ 0xA ];                               		// 0x0100 (0x0078) [0x0000000000000000]              
	int                                                BreadCrumbMostRecentIdx;                          		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              BreadCrumbDistanceInterval;                       		// 0x017C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 943 ];

		return pClassPointer;
	};

	void DrawBreadCrumbs ( unsigned long bPersistent );
	bool StaticGetValidatedAnchorPosition ( struct FVector StartCheckBaseLocation, struct FVector Extent, struct FVector* out_NewAnchorLoc );
	bool GetValidatedAnchorPosition ( struct FVector OverrideStartLoc, struct FVector* out_NewAnchorLoc );
	bool GetAllCoverSlotsInRadius ( struct FVector FromLoc, float Radius, TArray< struct FCoverInfo >* out_CoverList );
	bool PopulatePathfindingParamCache ( );
	struct FVector MoveToDesiredHeightAboveMesh ( struct FVector Point, float Height );
	float CalculatePathDistance ( struct FVector FinalDest );
	struct FVector GetFirstMoveLocation ( );
	bool IsAnchorInescapable ( );
	void LimitPathCacheDistance ( float MaxDist );
	void GetValidPositionsForBox ( struct FVector pos, float Radius, struct FVector Extent, unsigned long bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, struct FVector ValidBoxAroundStartPos, TArray< struct FVector >* out_ValidPositions );
	void GetAllPolyCentersWithinBounds ( struct FVector pos, struct FVector Extent, TArray< struct FVector >* out_PolyCtrs );
	unsigned char GetCurrentEdgeType ( );
	void ClearCurrentEdge ( );
	struct FString GetCurrentEdgeDebugText ( );
	void PrintPathCacheDebugText ( );
	void DrawPathCache ( struct FVector DrawOffset, unsigned long bPersistent, struct FColor DrawColor );
	bool ActorReachable ( class AActor* A );
	bool PointReachable ( struct FVector Point, struct FVector OverrideStartPoint, unsigned long bAllowHitsInEndCollisionBox );
	bool PointCheck ( struct FVector Pt, struct FVector Extent );
	bool LineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal );
	bool ObstaclePointCheck ( struct FVector Pt, struct FVector Extent );
	bool ObstacleLineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLoc, struct FVector* out_HitNorm );
	bool SuggestMovePreparation ( class AController* C, struct FVector* MovePt );
	bool FindPath ( class AActor** out_DestActor, int* out_DestItem );
	bool ComputeValidFinalDestination ( struct FVector* out_ComputedPosition );
	bool SetFinalDestination ( struct FVector FinalDest );
	bool PullString ( struct FVector Start, struct FVector End, float Radius, TArray< struct FVector >* OutPoints );
	bool GetNextMoveLocation ( float ArrivalDistance, struct FVector* out_MoveDest );
	class APylon* GetPylonFromPos ( struct FVector Position );
	bool FindPylon ( );
	struct FVector GetBestUnfinishedPathPoint ( );
	bool PathCache_RemoveIndex ( int InIdx, int Count );
	struct FVector PathCache_GetGoalPoint ( );
	bool PathCache_Empty ( );
	int GetPathCacheLength ( );
	class UNavMeshPathGoalEvaluator* CreatePathGoalEvaluator ( class UClass* GoalEvalClass );
	class UNavMeshPathConstraint* CreatePathConstraint ( class UClass* ConstraintClass );
	bool DoesPylonAHaveAPathToPylonB ( class APylon* A, class APylon* B );
	void AddGoalEvaluator ( class UNavMeshPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UNavMeshPathConstraint* Constraint );
	void ClearConstraints ( );
	bool GetNextBreadCrumb ( struct FVector* out_BreadCrumbLoc );
	void UpdateBreadCrumbs ( struct FVector InLocation );
	bool MovePawnToLocation ( unsigned long bForcePathRedo, unsigned long DoPreciseArrival, struct FVector* GoalLoc );
};

UClass* UNavigationHandle::pClassPointer = NULL;

// Class Engine.NavMeshGoal_Filter
// 0x000C (0x0048 - 0x003C)
class UNavMeshGoal_Filter : public UObject
{
public:
	unsigned long                                      bShowDebug : 1;                                   		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                NumNodesThrownOut;                                		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumNodesProcessed;                                		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 945 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
};

UClass* UNavMeshGoal_Filter::pClassPointer = NULL;

// Class Engine.NavMeshGoalFilter_MinPathDistance
// 0x0004 (0x004C - 0x0048)
class UNavMeshGoalFilter_MinPathDistance : public UNavMeshGoal_Filter
{
public:
	int                                                MinDistancePathShouldBe;                          		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 947 ];

		return pClassPointer;
	};

	bool MustBeLongerPathThan ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, int InMinDistancePathShouldBe );
};

UClass* UNavMeshGoalFilter_MinPathDistance::pClassPointer = NULL;

// Class Engine.NavMeshGoalFilter_NotNearOtherAI
// 0x0004 (0x004C - 0x0048)
class UNavMeshGoalFilter_NotNearOtherAI : public UNavMeshGoal_Filter
{
public:
	float                                              DistanceToCheck;                                  		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 949 ];

		return pClassPointer;
	};

	bool NotNearOtherAI ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck );
};

UClass* UNavMeshGoalFilter_NotNearOtherAI::pClassPointer = NULL;

// Class Engine.NavMeshGoalFilter_OutOfViewFrom
// 0x0010 (0x0058 - 0x0048)
class UNavMeshGoalFilter_OutOfViewFrom : public UNavMeshGoal_Filter
{
public:
	struct FPointer                                    GoalPoly;                                         		// 0x0048 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     OutOfViewLocation;                                		// 0x004C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 951 ];

		return pClassPointer;
	};

	bool MustBeHiddenFromThisPoint ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InOutOfViewLocation );
};

UClass* UNavMeshGoalFilter_OutOfViewFrom::pClassPointer = NULL;

// Class Engine.NavMeshGoalFilter_OutSideOfDotProductWedge
// 0x001C (0x0064 - 0x0048)
class UNavMeshGoalFilter_OutSideOfDotProductWedge : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     Location;                                         		// 0x0048 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Rotation;                                         		// 0x0054 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              Epsilon;                                          		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 953 ];

		return pClassPointer;
	};

	bool OutsideOfDotProductWedge ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InLocation, struct FRotator InRotation, float InEpsilon );
};

UClass* UNavMeshGoalFilter_OutSideOfDotProductWedge::pClassPointer = NULL;

// Class Engine.NavMeshGoalFilter_PolyEncompassesAI
// 0x000C (0x0054 - 0x0048)
class UNavMeshGoalFilter_PolyEncompassesAI : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     OverrideExtentToCheck;                            		// 0x0048 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 955 ];

		return pClassPointer;
	};

	bool MakeSureAIFits ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InOverrideExtentToCheck );
};

UClass* UNavMeshGoalFilter_PolyEncompassesAI::pClassPointer = NULL;

// Class Engine.NavMeshPathConstraint
// 0x0014 (0x0050 - 0x003C)
class UNavMeshPathConstraint : public UObject
{
public:
	class UNavMeshPathConstraint*                      NextConstraint;                                   		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                NumNodesProcessed;                                		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                NumThrownOutNodes;                                		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              AddedDirectCost;                                  		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              AddedHeuristicCost;                               		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 957 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

UClass* UNavMeshPathConstraint::pClassPointer = NULL;

// Class Engine.NavMeshPath_AlongLine
// 0x000C (0x005C - 0x0050)
class UNavMeshPath_AlongLine : public UNavMeshPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x0050 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 959 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AlongLine ( class UNavigationHandle* NavHandle, struct FVector Dir );
};

UClass* UNavMeshPath_AlongLine::pClassPointer = NULL;

// Class Engine.NavMeshPath_EnforceTwoWayEdges
// 0x0000 (0x0050 - 0x0050)
class UNavMeshPath_EnforceTwoWayEdges : public UNavMeshPathConstraint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 961 ];

		return pClassPointer;
	};

	bool EnforceTwoWayEdges ( class UNavigationHandle* NavHandle );
};

UClass* UNavMeshPath_EnforceTwoWayEdges::pClassPointer = NULL;

// Class Engine.NavMeshPath_MinDistBetweenSpecsOfType
// 0x0018 (0x0068 - 0x0050)
class UNavMeshPath_MinDistBetweenSpecsOfType : public UNavMeshPathConstraint
{
public:
	float                                              MinDistBetweenEdgeTypes;                          		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FVector                                     InitLocation;                                     		// 0x0054 (0x000C) [0x0000000000000000]              
	unsigned char                                      EdgeType;                                         		// 0x0060 (0x0001) [0x0000000000000000]              
	float                                              Penalty;                                          		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 963 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool EnforceMinDist ( class UNavigationHandle* NavHandle, float InMinDist, unsigned char InEdgeType, struct FVector LastLocation, float InPenalty );
};

UClass* UNavMeshPath_MinDistBetweenSpecsOfType::pClassPointer = NULL;

// Class Engine.NavMeshPath_SameCoverLink
// 0x0004 (0x0054 - 0x0050)
class UNavMeshPath_SameCoverLink : public UNavMeshPathConstraint
{
public:
	class ACoverLink*                                  TestLink;                                         		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 965 ];

		return pClassPointer;
	};

	void Recycle ( );
	void SameCoverLink ( class UNavigationHandle* NavHandle, class ACoverLink* InLink );
};

UClass* UNavMeshPath_SameCoverLink::pClassPointer = NULL;

// Class Engine.NavMeshPath_Toward
// 0x0010 (0x0060 - 0x0050)
class UNavMeshPath_Toward : public UNavMeshPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FVector                                     GoalPoint;                                        		// 0x0054 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 967 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool TowardPoint ( class UNavigationHandle* NavHandle, struct FVector Point );
	bool TowardGoal ( class UNavigationHandle* NavHandle, class AActor* Goal );
};

UClass* UNavMeshPath_Toward::pClassPointer = NULL;

// Class Engine.NavMeshPath_WithinDistanceEnvelope
// 0x001C (0x006C - 0x0050)
class UNavMeshPath_WithinDistanceEnvelope : public UNavMeshPathConstraint
{
public:
	float                                              MaxDistance;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;          		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EnvelopeTestPoint;                                		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 969 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool StayWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave );
};

UClass* UNavMeshPath_WithinDistanceEnvelope::pClassPointer = NULL;

// Class Engine.NavMeshPath_WithinTraversalDist
// 0x000C (0x005C - 0x0050)
class UNavMeshPath_WithinTraversalDist : public UNavMeshPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 971 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool DontExceedMaxDist ( class UNavigationHandle* NavHandle, float InMaxTraversalDist, unsigned long bInSoft );
};

UClass* UNavMeshPath_WithinTraversalDist::pClassPointer = NULL;

// Class Engine.NavMeshPathGoalEvaluator
// 0x0014 (0x0050 - 0x003C)
class UNavMeshPathGoalEvaluator : public UObject
{
public:
	class UNavMeshPathGoalEvaluator*                   NextEvaluator;                                    		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxPathVisits;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAlwaysCallEvaluateGoal : 1;                      		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                NumNodesThrownOut;                                		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumNodesProcessed;                                		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 973 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

UClass* UNavMeshPathGoalEvaluator::pClassPointer = NULL;

// Class Engine.NavMeshGoal_At
// 0x0020 (0x0070 - 0x0050)
class UNavMeshGoal_At : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     Goal;                                             		// 0x0050 (0x000C) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWeightPartialByDist : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bGoalInSamePolyAsAnchor : 1;                      		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              PartialDistSq;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FPointer                                    GoalPoly;                                         		// 0x0068 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PartialGoal;                                      		// 0x006C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 975 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AtLocation ( class UNavigationHandle* NavHandle, struct FVector GoalLocation, float Dist, unsigned long bReturnPartial, unsigned long bInWeightPartialByDist );
	bool AtActor ( class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, unsigned long bReturnPartial, unsigned long bInWeightPartialByDist );
	void RecycleNative ( );
};

UClass* UNavMeshGoal_At::pClassPointer = NULL;

// Class Engine.NavMeshGoal_ClosestActorInList
// 0x004C (0x009C - 0x0050)
class UNavMeshGoal_ClosestActorInList : public UNavMeshPathGoalEvaluator
{
public:
	TArray< struct FBiasedGoalActor >                  GoalList;                                         		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            PolyToGoalActorMap;                               		// 0x005C (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    CachedAnchorPoly;                                 		// 0x0098 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 977 ];

		return pClassPointer;
	};

	void RecycleInternal ( );
	void eventRecycle ( );
	class UNavMeshGoal_ClosestActorInList* ClosestActorInList ( class UNavigationHandle* NavHandle, TArray< struct FBiasedGoalActor >* InGoalList );
};

UClass* UNavMeshGoal_ClosestActorInList::pClassPointer = NULL;

// Class Engine.NavMeshGoal_GenericFilterContainer
// 0x0014 (0x0064 - 0x0050)
class UNavMeshGoal_GenericFilterContainer : public UNavMeshPathGoalEvaluator
{
public:
	TArray< class UNavMeshGoal_Filter* >               GoalFilters;                                      		// 0x0050 (0x000C) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    SuccessfulGoal;                                   		// 0x005C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UNavigationHandle*                           MyNavigationHandle;                               		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 979 ];

		return pClassPointer;
	};

	void Recycle ( );
	struct FVector GetGoalPoint ( );
	class UNavMeshGoal_Filter* GetFilterOfType ( class UClass* Filter_Class );
	class UNavMeshGoal_GenericFilterContainer* CreateAndAddFilterToNavHandle ( class UNavigationHandle* NavHandle, int InMaxPathVisits );
};

UClass* UNavMeshGoal_GenericFilterContainer::pClassPointer = NULL;

// Class Engine.NavMeshGoal_Null
// 0x0004 (0x0054 - 0x0050)
class UNavMeshGoal_Null : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    PartialGoal;                                      		// 0x0050 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 981 ];

		return pClassPointer;
	};

	void Recycle ( );
	void RecycleNative ( );
	bool GoUntilBust ( class UNavigationHandle* NavHandle, int InMaxPathVisits );
};

UClass* UNavMeshGoal_Null::pClassPointer = NULL;

// Class Engine.NavMeshGoal_PolyEncompassesAI
// 0x000C (0x005C - 0x0050)
class UNavMeshGoal_PolyEncompassesAI : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     OverrideExtentToCheck;                            		// 0x0050 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 983 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool MakeSureAIFits ( class UNavigationHandle* NavHandle, struct FVector InOverrideExtentToCheck );
};

UClass* UNavMeshGoal_PolyEncompassesAI::pClassPointer = NULL;

// Class Engine.NavMeshGoal_Random
// 0x000C (0x005C - 0x0050)
class UNavMeshGoal_Random : public UNavMeshPathGoalEvaluator
{
public:
	int                                                MinDist;                                          		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              BestRating;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	struct FPointer                                    PartialGoal;                                      		// 0x0058 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 985 ];

		return pClassPointer;
	};

	void Recycle ( );
	void RecycleNative ( );
	bool FindRandom ( class UNavigationHandle* NavHandle, int InMinDist, int InMaxPathVisits );
};

UClass* UNavMeshGoal_Random::pClassPointer = NULL;

// Class Engine.NavMeshGoal_WithinDistanceEnvelope
// 0x0018 (0x0068 - 0x0050)
class UNavMeshGoal_WithinDistanceEnvelope : public UNavMeshPathGoalEvaluator
{
public:
	float                                              MaxDistance;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTraversalDist;                                 		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EnvelopeTestPoint;                                		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 987 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool GoalWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float InMinTraversalDist );
};

UClass* UNavMeshGoal_WithinDistanceEnvelope::pClassPointer = NULL;

// Class Engine.PathConstraint
// 0x0008 (0x0044 - 0x003C)
class UPathConstraint : public UObject
{
public:
	int                                                CacheIdx;                                         		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UPathConstraint*                             NextConstraint;                                   		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 989 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

UClass* UPathConstraint::pClassPointer = NULL;

// Class Engine.Path_AlongLine
// 0x000C (0x0050 - 0x0044)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x0044 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 991 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AlongLine ( class APawn* P, struct FVector Dir );
};

UClass* UPath_AlongLine::pClassPointer = NULL;

// Class Engine.Path_AvoidInEscapableNodes
// 0x0010 (0x0054 - 0x0044)
class UPath_AvoidInEscapableNodes : public UPathConstraint
{
public:
	int                                                Radius;                                           		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                Height;                                           		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                MaxFallSpeed;                                     		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                MoveFlags;                                        		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 993 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool DontGetStuck ( class APawn* P );
	void CachePawnReacFlags ( class APawn* P );
};

UClass* UPath_AvoidInEscapableNodes::pClassPointer = NULL;

// Class Engine.Path_MinDistBetweenSpecsOfType
// 0x0014 (0x0058 - 0x0044)
class UPath_MinDistBetweenSpecsOfType : public UPathConstraint
{
public:
	float                                              MinDistBetweenSpecTypes;                          		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FVector                                     InitLocation;                                     		// 0x0048 (0x000C) [0x0000000000000000]              
	class UClass*                                      ReachSpecClass;                                   		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 995 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool EnforceMinDist ( class APawn* P, float InMinDist, class UClass* InSpecClass, struct FVector LastLocation );
};

UClass* UPath_MinDistBetweenSpecsOfType::pClassPointer = NULL;

// Class Engine.Path_TowardGoal
// 0x0004 (0x0048 - 0x0044)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 997 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool TowardGoal ( class APawn* P, class AActor* Goal );
};

UClass* UPath_TowardGoal::pClassPointer = NULL;

// Class Engine.Path_TowardPoint
// 0x000C (0x0050 - 0x0044)
class UPath_TowardPoint : public UPathConstraint
{
public:
	struct FVector                                     GoalPoint;                                        		// 0x0044 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 999 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool TowardPoint ( class APawn* P, struct FVector Point );
};

UClass* UPath_TowardPoint::pClassPointer = NULL;

// Class Engine.Path_WithinDistanceEnvelope
// 0x001C (0x0060 - 0x0044)
class UPath_WithinDistanceEnvelope : public UPathConstraint
{
public:
	float                                              MaxDistance;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;          		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EnvelopeTestPoint;                                		// 0x0054 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1001 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool StayWithinEnvelopeToLoc ( class APawn* P, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave );
};

UClass* UPath_WithinDistanceEnvelope::pClassPointer = NULL;

// Class Engine.Path_WithinTraversalDist
// 0x000C (0x0050 - 0x0044)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1003 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft );
};

UClass* UPath_WithinTraversalDist::pClassPointer = NULL;

// Class Engine.PathGoalEvaluator
// 0x0010 (0x004C - 0x003C)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                    		// 0x003C (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            GeneratedGoal;                                    		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                MaxPathVisits;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                CacheIdx;                                         		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1005 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

UClass* UPathGoalEvaluator::pClassPointer = NULL;

// Class Engine.Goal_AtActor
// 0x000C (0x0058 - 0x004C)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                        		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1007 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial );
};

UClass* UGoal_AtActor::pClassPointer = NULL;

// Class Engine.Goal_Null
// 0x0000 (0x004C - 0x004C)
class UGoal_Null : public UPathGoalEvaluator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1009 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool GoUntilBust ( class APawn* P, int InMaxPathVisits );
};

UClass* UGoal_Null::pClassPointer = NULL;

// Class Engine.SkeletalMeshActor
// 0x0044 (0x01CC - 0x0188)
class ASkeletalMeshActor : public AActor
{
public:
	struct FPointer                                    VfTable_IIFaceFXActor;                            		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldDoAnimNotifies : 1;                        		// 0x018C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      FaceFXSpeechPending : 1;                          		// 0x018C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bForceSaveInCheckpoint : 1;                       		// 0x018C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCollideActors_OldValue : 1;                      		// 0x018C (0x0004) [0x0000000020000000] [0x00000010] ( CPF_Deprecated )
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;         		// 0x018C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0190 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0194 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x0198 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x019C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMaterialInterface*                          ReplicatedMaterial0;                              		// 0x01A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInterface*                          ReplicatedMaterial1;                              		// 0x01A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FSkelMeshActorControlTarget >       ControlTargets;                                   		// 0x01A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UInterpGroup* >                      InterpGroupList;                                  		// 0x01B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       SavedAnimSeqName;                                 		// 0x01C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              SavedCurrentTime;                                 		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1011 ];

		return pClassPointer;
	};

	void eventSetAudioCueOpenedByFaceFX ( unsigned long Opened );
	class UFaceFXAsset* eventGetFaceFXAsset ( );
	bool PlayFaceAnimation ( struct FString FaceFXGroupName, struct FString FaceFXAnimName, class USoundCue* SoundCueToPlay );
	bool eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData );
	void SkelMeshActorOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventShutDown ( );
	void eventOnSetSkelControlTarget ( class USeqAct_SetSkelControlTarget* Action );
	void eventOnUpdatePhysBonesFromAnim ( class USeqAct_UpdatePhysBonesFromAnim* Action );
	void eventOnSetMesh ( class USeqAct_SetMesh* Action );
	bool IsActorPlayingFaceFXAnim ( );
	class UObject* eventIGetActorFaceFXAsset ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateAnimSetList ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* ASkeletalMeshActor::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorBasedOnExtremeContent
// 0x0018 (0x01E4 - 0x01CC)
class ASkeletalMeshActorBasedOnExtremeContent : public ASkeletalMeshActor
{
public:
	TArray< struct FSkelMaterialSetterDatum >          ExtremeContent;                                   		// 0x01CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSkelMaterialSetterDatum >          NonExtremeContent;                                		// 0x01D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1013 ];

		return pClassPointer;
	};

	void SetMaterialBasedOnExtremeContent ( );
	void eventPostBeginPlay ( );
};

UClass* ASkeletalMeshActorBasedOnExtremeContent::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x01CC - 0x01CC)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1015 ];

		return pClassPointer;
	};

};

UClass* ASkeletalMeshActorSpawnable::pClassPointer = NULL;

// Class Engine.SkeletalMeshCinematicActor
// 0x0000 (0x01CC - 0x01CC)
class ASkeletalMeshCinematicActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1017 ];

		return pClassPointer;
	};

};

UClass* ASkeletalMeshCinematicActor::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorMAT
// 0x000C (0x01D8 - 0x01CC)
class ASkeletalMeshActorMAT : public ASkeletalMeshCinematicActor
{
public:
	TArray< class UAnimNodeSlot* >                     SlotNodes;                                        		// 0x01CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1019 ];

		return pClassPointer;
	};

	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void ClearAnimNodes ( );
	void CacheAnimNodes ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventDestroyed ( );
	void MAT_SetSkelControlStrength ( struct FName SkelControlName, float ControlStrength );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
};

UClass* ASkeletalMeshActorMAT::pClassPointer = NULL;

// Class Engine.HeadTrackingComponent
// 0x009F (0x00F8 - 0x0059)
class UHeadTrackingComponent : public UActorComponent
{
public:
	TArray< struct FName >                             TrackControllerName;                              		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LookAtActorRadius;                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              MaxLookAtTime;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtTime;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInterestTime;                                  		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ActorClassesToLookAt;                             		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TargetBoneNames;                                  		// 0x0088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0094 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.HeadTrackingComponent.CurrentActorMap
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                 		// 0x00D0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class USkelControlLookAt* >                TrackControls;                                    		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     RootMeshLocation;                                 		// 0x00E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    RootMeshRotation;                                 		// 0x00EC (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1021 ];

		return pClassPointer;
	};

};

UClass* UHeadTrackingComponent::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm
// 0x0012 (0x004E - 0x003C)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNeedsSkeleton : 1;                               		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      TranslationCompressionChoice;                     		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RotationCompressionChoice;                        		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1023 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_Automatic
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_Automatic : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxEndEffectorError;                              		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTryFixedBitwiseCompression : 1;                  		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTryPerTrackBitwiseCompression : 1;               		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTryLinearKeyRemovalCompression : 1;              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTryIntervalKeyRemoval : 1;                       		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRunCurrentDefaultCompressor : 1;                 		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAutoReplaceIfExistingErrorTooGreat : 1;          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRaiseMaxErrorToExisting : 1;                     		// 0x0054 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1025 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_Automatic::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1027 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_BitwiseCompressOnly::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_GBXCustom
// 0x0012 (0x0060 - 0x004E)
class UAnimationCompressionAlgorithm_GBXCustom : public UAnimationCompressionAlgorithm
{
public:
	int                                                MinKeys;                                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAtSecondKey : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKeepLastKey : 1;                                 		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MaxPosDiff;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1029 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_GBXCustom::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_LeastDestructive
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_LeastDestructive : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1031 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_LeastDestructive::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	int                                                MinKeys;                                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAtSecondKey : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1033 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RemoveEverySecondKey::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys
// 0x001E (0x006C - 0x004E)
class UAnimationCompressionAlgorithm_RemoveLinearKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxEffectorDiff;                                  		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinEffectorDiff;                                  		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectorDiffSocket;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParentKeyScale;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRetarget : 1;                                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActuallyFilterLinearKeys : 1;                    		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1035 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RemoveLinearKeys::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_PerTrackCompression
// 0x0050 (0x00BC - 0x006C)
class UAnimationCompressionAlgorithm_PerTrackCompression : public UAnimationCompressionAlgorithm_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                              		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPosDiffBitwise;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiffBitwise;                              		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            AllowedRotationFormats;                           		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            AllowedTranslationFormats;                        		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bResampleAnimation : 1;                           		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAdaptiveError : 1;                            		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseOverrideForEndEffectors : 1;                  		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseAdaptiveError2 : 1;                           		// 0x0090 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              ResampledFramerate;                               		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinKeysForResampling;                             		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TrackHeightBias;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParentingDivisor;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParentingDivisorExponent;                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationErrorSourceRatio;                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TranslationErrorSourceRatio;                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxErrorPerTrackRatio;                            		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PerturbationProbeSize;                            		// 0x00B4 (0x0004) [0x0000000000000000]              
	struct FPointer                                    PerReductionCachedData;                           		// 0x00B8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1037 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_PerTrackCompression::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1039 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RemoveTrivialKeys::pClassPointer = NULL;

// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1041 ];

		return pClassPointer;
	};

};

UClass* UAnimationCompressionAlgorithm_RevertToRaw::pClassPointer = NULL;

// Class Engine.AnimMetaData
// 0x0000 (0x003C - 0x003C)
class UAnimMetaData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1043 ];

		return pClassPointer;
	};

};

UClass* UAnimMetaData::pClassPointer = NULL;

// Class Engine.AnimMetaData_SkelControl
// 0x0018 (0x0054 - 0x003C)
class UAnimMetaData_SkelControl : public UAnimMetaData
{
public:
	TArray< struct FName >                             SkelControlNameList;                              		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bFullControlOverController : 1;                   		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       SkelControlName;                                  		// 0x004C (0x0008) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1045 ];

		return pClassPointer;
	};

};

UClass* UAnimMetaData_SkelControl::pClassPointer = NULL;

// Class Engine.AnimMetaData_SkelControlKeyFrame
// 0x000C (0x0060 - 0x0054)
class UAnimMetaData_SkelControlKeyFrame : public UAnimMetaData_SkelControl
{
public:
	TArray< struct FTimeModifier >                     KeyFrames;                                        		// 0x0054 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1047 ];

		return pClassPointer;
	};

};

UClass* UAnimMetaData_SkelControlKeyFrame::pClassPointer = NULL;

// Class Engine.AnimNotify
// 0x0000 (0x003C - 0x003C)
class UAnimNotify : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1049 ];

		return pClassPointer;
	};

	bool FindNextNotifyOfClass ( class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent );
};

UClass* UAnimNotify::pClassPointer = NULL;

// Class Engine.AnimNotify_AkEvent
// 0x0010 (0x004C - 0x003C)
class UAnimNotify_AkEvent : public UAnimNotify
{
public:
	class UAkEvent*                                    AkEvent;                                          		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1051 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_AkEvent::pClassPointer = NULL;

// Class Engine.AnimNotify_CameraEffect
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify_CameraEffect : public UAnimNotify
{
public:
	class UClass*                                      CameraLensEffect;                                 		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1053 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_CameraEffect::pClassPointer = NULL;

// Class Engine.AnimNotify_ClothingMaxDistanceScale
// 0x0010 (0x004C - 0x003C)
class UAnimNotify_ClothingMaxDistanceScale : public UAnimNotify
{
public:
	float                                              StartScale;                                       		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndScale;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScaleMode;                                        		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1055 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_ClothingMaxDistanceScale::pClassPointer = NULL;

// Class Engine.AnimNotify_Footstep
// 0x0008 (0x0044 - 0x003C)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFirstPerson : 1;                                 		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1057 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_Footstep::pClassPointer = NULL;

// Class Engine.AnimNotify_ForceField
// 0x0018 (0x0054 - 0x003C)
class UAnimNotify_ForceField : public UAnimNotify
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                              		// 0x003C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bAttach : 1;                                      		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1059 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_ForceField::pClassPointer = NULL;

// Class Engine.AnimNotify_Kismet
// 0x0008 (0x0044 - 0x003C)
class UAnimNotify_Kismet : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1061 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_Kismet::pClassPointer = NULL;

// Class Engine.AnimNotify_PlayParticleEffect
// 0x0024 (0x0060 - 0x003C)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsExtremeContent : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttach : 1;                                      		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPreview : 1;                                     		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                         		// 0x0040 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	class UParticleSystem*                             PSNonExtremeContentTemplate;                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneSocketModuleActorName;                        		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1063 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_PlayParticleEffect::pClassPointer = NULL;

// Class Engine.AnimNotify_Rumble
// 0x0010 (0x004C - 0x003C)
class UAnimNotify_Rumble : public UAnimNotify
{
public:
	class UClass*                                      PredefinedWaveForm;                               		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      WaveForm;                                         		// 0x0040 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      bCheckForBasedPlayer : 1;                         		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              EffectRadius;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1065 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_Rumble::pClassPointer = NULL;

// Class Engine.AnimNotify_Script
// 0x0018 (0x0054 - 0x003C)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NotifyTickName;                                   		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NotifyEndName;                                    		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1067 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_Script::pClassPointer = NULL;

// Class Engine.AnimNotify_Scripted
// 0x0000 (0x003C - 0x003C)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1069 ];

		return pClassPointer;
	};

	void eventNotifyEnd ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_Scripted::pClassPointer = NULL;

// Class Engine.AnimNotify_PawnMaterialParam
// 0x000C (0x0048 - 0x003C)
class UAnimNotify_PawnMaterialParam : public UAnimNotify_Scripted
{
public:
	TArray< struct FScalarParameterInterpStruct >      ScalarParameterInterpArray;                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1071 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_PawnMaterialParam::pClassPointer = NULL;

// Class Engine.AnimNotify_ViewShake
// 0x0050 (0x008C - 0x003C)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              Duration;                                         		// 0x003C (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     RotAmplitude;                                     		// 0x0040 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     RotFrequency;                                     		// 0x004C (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     LocAmplitude;                                     		// 0x0058 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     LocFrequency;                                     		// 0x0064 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	float                                              FOVAmplitude;                                     		// 0x0070 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	float                                              FOVFrequency;                                     		// 0x0074 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	unsigned long                                      bDoControllerVibration : 1;                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseBoneLocation : 1;                             		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              ShakeRadius;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                ShakeParams;                                      		// 0x0088 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1073 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_ViewShake::pClassPointer = NULL;

// Class Engine.AnimNotify_Sound
// 0x001C (0x0058 - 0x003C)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreIfActorHidden : 1;                         		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentToPlay;                                    		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMultiplier;                                 		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1075 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_Sound::pClassPointer = NULL;

// Class Engine.AnimNotify_SoundSpatial
// 0x0014 (0x0050 - 0x003C)
class UAnimNotify_SoundSpatial : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCueFirstPerson;                              		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCueThirdPerson;                              		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1077 ];

		return pClassPointer;
	};

};

UClass* UAnimNotify_SoundSpatial::pClassPointer = NULL;

// Class Engine.AnimNotify_Trails
// 0x0054 (0x0090 - 0x003C)
class UAnimNotify_Trails : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsExtremeContent : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPreview : 1;                                     		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                         		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bResampleRequired : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FName                                       FirstEdgeSocketName;                              		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ControlPointSocketName;                           		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SecondEdgeSocketName;                             		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastStartTime;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              EndTime;                                          		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              SampleTimeStep;                                   		// 0x0064 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	TArray< struct FTrailSamplePoint >                 TrailSampleData;                                  		// 0x0068 (0x000C) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	float                                              SamplesPerSecond;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTrailSample >                      TrailSampledData;                                 		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurrentTime;                                      		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeStep;                                         		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           AnimNodeSeq;                                      		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1079 ];

		return pClassPointer;
	};

	int GetNumSteps ( int InLastTrailIndex );
};

UClass* UAnimNotify_Trails::pClassPointer = NULL;

// Class Engine.AnimObject
// 0x0004 (0x0040 - 0x003C)
class UAnimObject : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x003C (0x0004) [0x000000000428200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1081 ];

		return pClassPointer;
	};

};

UClass* UAnimObject::pClassPointer = NULL;

// Class Engine.AnimNode
// 0x0074 (0x00B4 - 0x0040)
class UAnimNode : public UAnimObject
{
public:
	unsigned long                                      bRelevant : 1;                                    		// 0x0040 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bJustBecameRelevant : 1;                          		// 0x0040 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTickDuringPausedAnims : 1;                       		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEditorOnly : 1;                                  		// 0x0040 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisableCaching : 1;                              		// 0x0040 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCallScriptEventOnInit : 1;                       		// 0x0040 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCallScriptEventOnBecomeRelevant : 1;             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCallScriptEventOnCeaseRelevant : 1;              		// 0x0040 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                NodeTickTag;                                      		// 0x0044 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NodeInitTag;                                      		// 0x0048 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                TickArrayIndex;                                   		// 0x004C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NodeCachedAtomsTag;                               		// 0x0050 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeTotalWeight;                                  		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAnimNodeBlendBase* >                ParentNodes;                                      		// 0x0058 (0x000C) [0x0000000000600000]              ( CPF_NeedCtorLink )
	struct FName                                       NodeName;                                         		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBoneAtom >                         CachedBoneAtoms;                                  		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      CachedNumDesiredBones;                            		// 0x0078 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x7 ];                             		// 0x0079 (0x0007) MISSED OFFSET
	struct FBoneAtom                                   CachedRootMotionDelta;                            		// 0x0080 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	int                                                bCachedHasRootMotion;                             		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCurveKey >                         CachedCurveKeys;                                  		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SearchTag;                                        		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1083 ];

		return pClassPointer;
	};

	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
	void FindAllAnimNodes ( struct FName InNodeName, TArray< class UAnimNode* >* AnimNodeList );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	void eventOnInit ( );
};

UClass* UAnimNode::pClassPointer = NULL;

// Class Engine.AnimNodeBlendBase
// 0x0011 (0x00C5 - 0x00B4)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray< struct FAnimBlendChild >                   Children;                                         		// 0x00B4 (0x000C) [0x0000000004400048]              ( CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bFixNumChildren : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      BlendType;                                        		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1085 ];

		return pClassPointer;
	};

	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
};

UClass* UAnimNodeBlendBase::pClassPointer = NULL;

// Class Engine.AnimNode_MultiBlendPerBone
// 0x0014 (0x00D9 - 0x00C5)
class UAnimNode_MultiBlendPerBone : public UAnimNodeBlendBase
{
public:
	class APawn*                                       PawnOwner;                                        		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FPerBoneMaskInfo >                  MaskList;                                         		// 0x00CC (0x000C) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      RotationBlendType;                                		// 0x00D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1087 ];

		return pClassPointer;
	};

	void SetMaskWeight ( int MaskIndex, float DesiredWeight, float BlendTime );
};

UClass* UAnimNode_MultiBlendPerBone::pClassPointer = NULL;

// Class Engine.AnimNodeAimOffset
// 0x004B (0x0110 - 0x00C5)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceAimDir : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBakeFromAnimations : 1;                          		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSynchronizeNodesInEditor : 1;                    		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bBlendInLocalSpace : 1;                           		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bMoreAccurateAndMoreExpensive : 1;                		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	int                                                PassThroughAtOrAboveLOD;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForcedAimDir;                                     		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            AimCpntIndexLUT;                                  		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNodeAimOffset*                          TemplateNode;                                     		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAimOffsetProfile >                 Profiles;                                         		// 0x0100 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	int                                                CurrentProfileIndex;                              		// 0x010C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1089 ];

		return pClassPointer;
	};

	void SetActiveProfileByIndex ( int ProfileIndex );
	void SetActiveProfileByName ( struct FName ProfileName );
};

UClass* UAnimNodeAimOffset::pClassPointer = NULL;

// Class Engine.AnimNodeBlend
// 0x0013 (0x00D8 - 0x00C5)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                     		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              Child2WeightTarget;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1091 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

UClass* UAnimNodeBlend::pClassPointer = NULL;

// Class Engine.AnimNodeAdditiveBlending
// 0x0004 (0x00DC - 0x00D8)
class UAnimNodeAdditiveBlending : public UAnimNodeBlend
{
public:
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1093 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

UClass* UAnimNodeAdditiveBlending::pClassPointer = NULL;

// Class Engine.AnimNodeBlendPerBone
// 0x0028 (0x0100 - 0x00D8)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x00D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             BranchStartBoneName;                              		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    Child2PerBoneWeight;                              		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            LocalToCompReqBones;                              		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1095 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

UClass* UAnimNodeBlendPerBone::pClassPointer = NULL;

// Class Engine.AnimNodeCrossfader
// 0x0010 (0x00E8 - 0x00D8)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                               		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontBlendOutOneShot : 1;                         		// 0x00E0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              PendingBlendOutTimeOneShot;                       		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1097 ];

		return pClassPointer;
	};

	class UAnimNodeSequence* GetActiveChild ( );
	struct FName GetAnimName ( );
	void BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate );
	void PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate );
};

UClass* UAnimNodeCrossfader::pClassPointer = NULL;

// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x00E0 - 0x00D8)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CustomPendingBlendOutTime;                        		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1099 ];

		return pClassPointer;
	};

	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	void PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
};

UClass* UAnimNodePlayCustomAnim::pClassPointer = NULL;

// Class Engine.AnimNodeBlendDirectional
// 0x001F (0x00E4 - 0x00C5)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationOffset;                                   		// 0x00D4 (0x000C) [0x0000000000000000]              
	unsigned long                                      bUseAcceleration : 1;                             		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1101 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendDirectional::pClassPointer = NULL;

// Class Engine.AnimNodeBlendList
// 0x001F (0x00E4 - 0x00C5)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	TArray< float >                                    TargetWeight;                                     		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BlendTimeToGo;                                    		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayActiveChild : 1;                             		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              SliderPosition;                                   		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1103 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

UClass* UAnimNodeBlendList::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByBase
// 0x0018 (0x00FC - 0x00E4)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	unsigned char                                      Type;                                             		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ActorTag;                                         		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ActorClass;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CachedBase;                                       		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1105 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendByBase::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByPhysics
// 0x0014 (0x00F8 - 0x00E4)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:
	float                                              DelayBeforeStartingBlend;                         		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFlag                                       WaitingToDoBlend;                                 		// 0x00E8 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1107 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendByPhysics::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByPosture
// 0x0004 (0x00E8 - 0x00E4)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:
	unsigned long                                      bZeroPostSprintBlendWhenFiring : 1;               		// 0x00E4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1109 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendByPosture::pClassPointer = NULL;

// Class Engine.AnimNodeBlendByProperty
// 0x0038 (0x011C - 0x00E4)
class UAnimNodeBlendByProperty : public UAnimNodeBlendList
{
public:
	struct FName                                       PropertyName;                                     		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseOwnersBase : 1;                               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceUpdate : 1;                                 		// 0x00EC (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseSpecificBlendTimes : 1;                       		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSynchronizeNodesInEditor : 1;                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       CachedPropertyName;                               		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    CachedFloatProperty;                              		// 0x00F8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    CachedBoolProperty;                               		// 0x00FC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    CachedByteProperty;                               		// 0x0100 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class AActor*                                      CachedOwner;                                      		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatPropMin;                                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatPropMax;                                     		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendToChild1Time;                                		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendToChild2Time;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1111 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendByProperty::pClassPointer = NULL;

// Class Engine.AnimNodeBlendBySpeed
// 0x0030 (0x0114 - 0x00E4)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                            		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                LastChannel;                                      		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              BlendUpTime;                                      		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownPerc;                                    		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Constraints;                                      		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUseAcceleration : 1;                             		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseBaseSkelComponentOwner : 1;                   		// 0x0104 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreZ : 1;                                     		// 0x0104 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRestartChildrenOnBlendUpFromZero : 1;            		// 0x0104 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              BlendUpDelay;                                     		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownDelay;                                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDelayRemaining;                              		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1113 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendBySpeed::pClassPointer = NULL;

// Class Engine.AnimNodeRandom
// 0x0018 (0x00FC - 0x00E4)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray< struct FRandomAnimInfo >                   RandomInfo;                                       		// 0x00E4 (0x000C) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	class UAnimNodeSequence*                           PlayingSeqNode;                                   		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingChildIndex;                                		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPickedPendingChildIndex : 1;                     		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1115 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeRandom::pClassPointer = NULL;

// Class Engine.AnimNodeBlendMultiBone
// 0x001B (0x00E0 - 0x00C5)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	TArray< struct FChildBoneBlendInfo >               BlendTargetList;                                  		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            SourceRequiredBones;                              		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1117 ];

		return pClassPointer;
	};

	void SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease );
};

UClass* UAnimNodeBlendMultiBone::pClassPointer = NULL;

// Class Engine.AnimNodeMirror
// 0x0007 (0x00CC - 0x00C5)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bEnableMirroring : 1;                             		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1119 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeMirror::pClassPointer = NULL;

// Class Engine.AnimNodeScalePlayRate
// 0x0007 (0x00CC - 0x00C5)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                     		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1121 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeScalePlayRate::pClassPointer = NULL;

// Class Engine.AnimNodeScaleRateBySpeed
// 0x0008 (0x00D4 - 0x00CC)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseBaseSkelComponentOwner : 1;                   		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1123 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeScaleRateBySpeed::pClassPointer = NULL;

// Class Engine.AnimNodeSlot
// 0x0027 (0x00EC - 0x00C5)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x00C8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bEarlyAnimEndNotify : 1;                          		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAdditiveAnimationsOverrideSource : 1;            		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsBeingUsedByInterpGroup : 1;                    		// 0x00C8 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bReverseAnimSeqSearchOrder : 1;                   		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	float                                              PendingBlendOutTime;                              		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CustomChildIndex;                                 		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TargetChildIndex;                                 		// 0x00D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< float >                                    TargetWeight;                                     		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BlendTimeToGo;                                    		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x00E8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1125 ];

		return pClassPointer;
	};

	void TickChildWeights ( float DeltaSeconds );
	void AddToSynchGroup ( struct FName GroupName );
	void SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	struct FName GetPlayedAnimation ( );
	bool PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime, float EndTime );
};

UClass* UAnimNodeSlot::pClassPointer = NULL;

// Class Engine.AnimNodeSynch
// 0x000F (0x00D4 - 0x00C5)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	TArray< struct FSynchGroup >                       Groups;                                           		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1127 ];

		return pClassPointer;
	};

	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetRelativePosition ( struct FName GroupName );
	void ForceRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetMasterNodeOfGroup ( struct FName GroupName );
	void RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
	void AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
};

UClass* UAnimNodeSynch::pClassPointer = NULL;

// Class Engine.AnimTree
// 0x006B (0x0130 - 0x00C5)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnablePooling : 1;                               		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSavedPose : 1;                                		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBeingEdited : 1;                                 		// 0x00CC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bParentNodeArrayBuilt : 1;                        		// 0x00CC (0x0004) [0x0000000000200000] [0x00000008] 
	unsigned long                                      bRebuildAnimTickArray : 1;                        		// 0x00CC (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< struct FAnimGroup >                        AnimGroups;                                       		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             PrioritizedSkelBranches;                          		// 0x00DC (0x000C) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FName >                             ComposePrePassBoneNames;                          		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             ComposePostPassBoneNames;                         		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMorphNodeBase* >                    RootMorphNodes;                                   		// 0x0100 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FSkelControlListHead >              SkelControlLists;                                 		// 0x010C (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FBoneAtom >                         SavedPose;                                        		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimNode* >                         AnimTickArray;                                    		// 0x0124 (0x000C) [0x0000000000600000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1129 ];

		return pClassPointer;
	};

	int GetGroupIndex ( struct FName GroupName );
	float GetGroupRateScale ( struct FName GroupName );
	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetGroupRelativePosition ( struct FName GroupName );
	void ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetGroupNotifyMaster ( struct FName GroupName );
	class UAnimNodeSequence* GetGroupSynchMaster ( struct FName GroupName );
	bool SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound );
	void SetUseSavedPose ( unsigned long bUseSaved );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
};

UClass* UAnimTree::pClassPointer = NULL;

// Class Engine.AnimNodeSequence
// 0x0060 (0x0114 - 0x00B4)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                      		// 0x00B4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Rate;                                             		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlaying : 1;                                     		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimEnd : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimPlay : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bZeroRootRotation : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bZeroRootTranslation : 1;                         		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bReverseAnimSeqSearchOrder : 1;                   		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNoNotifies : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIsIssuingNotifies : 1;                           		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bForceAlwaysSlave : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSynchronize : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReverseSync : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowTimeLineSlider : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bDisableAnimNotifies : 1;                         		// 0x00C0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bLoopCameraAnim : 1;                              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bEditorOnlyAddRefPoseToAdditiveAnimation : 1;     		// 0x00C0 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	float                                              CurrentTime;                                      		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PreviousTime;                                     		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              EndTime;                                          		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimSequence*                               AnimSeq;                                          		// 0x00D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimLinkupIndex;                                  		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NotifyWeightThreshold;                            		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SynchGroupName;                                   		// 0x00DC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SynchPosOffset;                                   		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 CameraAnim;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                         		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraAnimScale;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimPlayRate;                               		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimBlendInTime;                            		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimBlendOutTime;                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneOption[ 0x3 ];                            		// 0x0100 (0x0003) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RootRotationOption[ 0x3 ];                        		// 0x0103 (0x0003) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class USkelControlBase* >                  MetaDataSkelControlList;                          		// 0x0108 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1131 ];

		return pClassPointer;
	};

	void SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	float GetTimeLeft ( );
	float GetAnimPlaybackLength ( );
	float GetGlobalPlayRate ( );
	float GetGroupRelativePosition ( );
	float FindGroupPosition ( float GroupRelativePosition );
	float FindGroupRelativePosition ( float GroupRelativePosition );
	float GetNormalizedPosition ( );
	void SetPosition ( float NewTime, unsigned long bFireNotifies );
	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void SetAnim ( struct FName Sequence );
};

UClass* UAnimNodeSequence::pClassPointer = NULL;

// Class Engine.AnimNodeSequenceBlendBase
// 0x000C (0x0120 - 0x0114)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	TArray< struct FAnimBlendInfo >                    Anims;                                            		// 0x0114 (0x000C) [0x0000000004400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1133 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeSequenceBlendBase::pClassPointer = NULL;

// Class Engine.AnimNodeSequenceBlendByAim
// 0x0070 (0x0190 - 0x0120)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   PreviousAim;                                      		// 0x0128 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   HorizontalRange;                                  		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   VerticalRange;                                    		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LU;                                      		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LC;                                      		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LD;                                      		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CU;                                      		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CC;                                      		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CD;                                      		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RU;                                      		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RC;                                      		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RD;                                      		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1135 ];

		return pClassPointer;
	};

	void CheckAnimsUpToDate ( );
};

UClass* UAnimNodeSequenceBlendByAim::pClassPointer = NULL;

// Class Engine.MorphNodeBase
// 0x000C (0x004C - 0x0040)
class UMorphNodeBase : public UAnimObject
{
public:
	struct FName                                       NodeName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawSlider : 1;                                  		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1137 ];

		return pClassPointer;
	};

};

UClass* UMorphNodeBase::pClassPointer = NULL;

// Class Engine.MorphNodeMultiPose
// 0x0024 (0x0070 - 0x004C)
class UMorphNodeMultiPose : public UMorphNodeBase
{
public:
	TArray< class UMorphTarget* >                      Targets;                                          		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             MorphNames;                                       		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    Weights;                                          		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1139 ];

		return pClassPointer;
	};

	bool UpdateMorphTarget ( class UMorphTarget* Target, float InWeight );
	void RemoveMorphTarget ( struct FName MorphTargetName );
	bool AddMorphTarget ( struct FName MorphTargetName, float InWeight );
};

UClass* UMorphNodeMultiPose::pClassPointer = NULL;

// Class Engine.MorphNodePose
// 0x0010 (0x005C - 0x004C)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                           		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MorphName;                                        		// 0x0050 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Weight;                                           		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1141 ];

		return pClassPointer;
	};

	void SetMorphTarget ( struct FName MorphTargetName );
};

UClass* UMorphNodePose::pClassPointer = NULL;

// Class Engine.MorphNodeWeightBase
// 0x000C (0x0058 - 0x004C)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray< struct FMorphNodeConn >                    NodeConns;                                        		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1143 ];

		return pClassPointer;
	};

};

UClass* UMorphNodeWeightBase::pClassPointer = NULL;

// Class Engine.MorphNodeWeight
// 0x0004 (0x005C - 0x0058)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1145 ];

		return pClassPointer;
	};

	void SetNodeWeight ( float NewWeight );
};

UClass* UMorphNodeWeight::pClassPointer = NULL;

// Class Engine.MorphNodeWeightByBoneAngle
// 0x003C (0x0094 - 0x0058)
class UMorphNodeWeightByBoneAngle : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                            		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeWeight;                                       		// 0x005C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       BaseBoneName;                                     		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BaseBoneAxis;                                     		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AngleBoneAxis;                                    		// 0x0069 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBaseBoneAxis : 1;                          		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertAngleBoneAxis : 1;                         		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bControlMaterialParameter : 1;                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       AngleBoneName;                                    		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialSlotId;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                         		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FBoneAngleMorph >                   WeightArray;                                      		// 0x0088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1147 ];

		return pClassPointer;
	};

};

UClass* UMorphNodeWeightByBoneAngle::pClassPointer = NULL;

// Class Engine.MorphNodeWeightByBoneRotation
// 0x0034 (0x008C - 0x0058)
class UMorphNodeWeightByBoneRotation : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                            		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeWeight;                                       		// 0x005C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       BoneName;                                         		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bControlMaterialParameter : 1;                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FBoneAngleMorph >                   WeightArray;                                      		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaterialSlotId;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                         		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1149 ];

		return pClassPointer;
	};

};

UClass* UMorphNodeWeightByBoneRotation::pClassPointer = NULL;

// Class Engine.SkelControlBase
// 0x005C (0x009C - 0x0040)
class USkelControlBase : public UAnimObject
{
public:
	struct FName                                       ControlName;                                      		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ControlStrength;                                  		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BlendType;                                        		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPostPhysicsController : 1;                       		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInitializedCachedNodeList : 1;                   		// 0x0058 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bControlledByAnimMetada : 1;                      		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvertMetadataWeight : 1;                        		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPropagateSetActive : 1;                          		// 0x0058 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIgnoreWhenNotRendered : 1;                       		// 0x0058 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShouldTickInScript : 1;                          		// 0x0058 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShouldTickOwner : 1;                             		// 0x0058 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bEnableEaseInOut : 1;                             		// 0x0058 (0x0004) [0x0000000020020001] [0x00000200] ( CPF_Edit | CPF_EditConst | CPF_Deprecated )
	float                                              StrengthTarget;                                   		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             StrengthAnimNodeNameList;                         		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimNode* >                         CachedNodeList;                                   		// 0x0070 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AnimMetadataWeight;                               		// 0x007C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimMetaDataUpdateTag;                            		// 0x0080 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              BoneScale;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ControlTickTag;                                   		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IgnoreAtOrAboveLOD;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlBase*                            NextControl;                                      		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                ControlPosX;                                      		// 0x0094 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                ControlPosY;                                      		// 0x0098 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1151 ];

		return pClassPointer;
	};

	float GetControlMetadataWeight ( );
	void eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp );
	void SetSkelControlStrength ( float NewStrength, float InBlendTime );
	void SetSkelControlActive ( unsigned long bInActive );
};

UClass* USkelControlBase::pClassPointer = NULL;

// Class Engine.SkelControl_CCD_IK
// 0x0048 (0x00E4 - 0x009C)
class USkelControl_CCD_IK : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                 		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EffectorTranslationFromBone;                      		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumBones;                                         		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPerBoneIterations;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IterationsCount;                                  		// 0x00C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Precision;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartFromTail : 1;                               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoTurnOptimization : 1;                          		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< float >                                    AngleConstraint;                                  		// 0x00D4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              MaxAngleSteps;                                    		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1153 ];

		return pClassPointer;
	};

};

UClass* USkelControl_CCD_IK::pClassPointer = NULL;

// Class Engine.SkelControl_Multiply
// 0x0004 (0x00A0 - 0x009C)
class USkelControl_Multiply : public USkelControlBase
{
public:
	float                                              Multiplier;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1155 ];

		return pClassPointer;
	};

};

UClass* USkelControl_Multiply::pClassPointer = NULL;

// Class Engine.SkelControl_TwistBone
// 0x000C (0x00A8 - 0x009C)
class USkelControl_TwistBone : public USkelControlBase
{
public:
	struct FName                                       SourceBoneName;                                   		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistAngleScale;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1157 ];

		return pClassPointer;
	};

};

UClass* USkelControl_TwistBone::pClassPointer = NULL;

// Class Engine.SkelControlLimb
// 0x0068 (0x0104 - 0x009C)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                 		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    EffectorRotation;                                 		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointTargetLocationSpace;                         		// 0x00B5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointOffsetSpace;                                 		// 0x00B6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x00B7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointAxis;                                        		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JointTargetLocation;                              		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JointTargetSpaceBoneName;                         		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JointOffset;                                      		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JointOffsetBoneName;                              		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertJointAxis : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRotateJoint : 1;                                 		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bMaintainEffectorRelRot : 1;                      		// 0x00EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;               		// 0x00EC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowStretching : 1;                             		// 0x00EC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SupportGearboxTwistBones : 1;                     		// 0x00EC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bTakeRotationFromEffectorRotation : 1;            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FVector2D                                   StretchLimits;                                    		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StretchRollBoneName;                              		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                CachedTwistBoneIndex;                             		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1159 ];

		return pClassPointer;
	};

};

UClass* USkelControlLimb::pClassPointer = NULL;

// Class Engine.SkelControlFootPlacement
// 0x0024 (0x0128 - 0x0104)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                       		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FootUpAxis;                                       		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    FootRotOffset;                                    		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertFootUpAxis : 1;                            		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientFootToGround : 1;                          		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                   		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              MaxUpAdjustment;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDownAdjustment;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjust;                              		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1161 ];

		return pClassPointer;
	};

};

UClass* USkelControlFootPlacement::pClassPointer = NULL;

// Class Engine.SkelControlLookAt
// 0x009C (0x0138 - 0x009C)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetLocationSpace;                              		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LookAtAxis;                                       		// 0x00A9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UpAxis;                                           		// 0x00AA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AllowRotationSpace;                               		// 0x00AB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetSpaceBoneName;                              		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertLookAtAxis : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDefineUpAxis : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInvertUpAxis : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLimit : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLimitBasedOnRefPose : 1;                         		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNotifyBeyondLimit : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowLimit : 1;                                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowRotationX : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowRotationY : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAllowRotationZ : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              TargetLocationInterpSpeed;                        		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DesiredTargetLocation;                            		// 0x00BC (0x000C) [0x0000000000000000]              
	struct FVector                                     ActorSpaceLookAtTarget;                           		// 0x00C8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MaxAngle;                                         		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterMaxAngle;                                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeadZoneAngle;                                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RotationAngleRangeX;                              		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RotationAngleRangeY;                              		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RotationAngleRangeZ;                              		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AllowRotationOtherBoneName;                       		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtAlpha;                                      		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaTarget;                                		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaBlendTimeToGo;                         		// 0x0108 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LimitLookDir;                                     		// 0x010C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseLookDir;                                      		// 0x0118 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseBonePos;                                      		// 0x0124 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastCalcTime;                                     		// 0x0130 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ControlBoneIndex;                                 		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1163 ];

		return pClassPointer;
	};

	bool CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst );
	void SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime );
	void InterpolateTargetLocation ( float DeltaTime );
	void SetTargetLocation ( struct FVector NewTargetLocation );
};

UClass* USkelControlLookAt::pClassPointer = NULL;

// Class Engine.SkelControlSingleBone
// 0x0030 (0x00CC - 0x009C)
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                            		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyRotation : 1;                               		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAddTranslation : 1;                              		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAddRotation : 1;                                 		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRemoveMeshRotation : 1;                          		// 0x009C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FVector                                     BoneTranslation;                                  		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneTranslationSpace;                             		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotationSpace;                                		// 0x00AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TranslationSpaceBoneName;                         		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    BoneRotation;                                     		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RotationSpaceBoneName;                            		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1165 ];

		return pClassPointer;
	};

};

UClass* USkelControlSingleBone::pClassPointer = NULL;

// Class Engine.SkelControlHandlebars
// 0x0014 (0x00E0 - 0x00CC)
class USkelControlHandlebars : public USkelControlSingleBone
{
public:
	unsigned char                                      WheelRollAxis;                                    		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HandlebarRotateAxis;                              		// 0x00CD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WheelBoneName;                                    		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertRotation : 1;                              		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                SteerWheelBoneIndex;                              		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1167 ];

		return pClassPointer;
	};

};

UClass* USkelControlHandlebars::pClassPointer = NULL;

// Class Engine.SkelControlWheel
// 0x0018 (0x00E4 - 0x00CC)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x00CC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WheelMaxRenderDisplacement;                       		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRoll;                                        		// 0x00D4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      WheelRollAxis;                                    		// 0x00D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WheelSteeringAxis;                                		// 0x00D9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSteering;                                    		// 0x00DC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1169 ];

		return pClassPointer;
	};

};

UClass* USkelControlWheel::pClassPointer = NULL;

// Class Engine.SkelControlSpline
// 0x0014 (0x00B0 - 0x009C)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SplineBoneAxis;                                   		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotMode;                                      		// 0x00A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertSplineBoneAxis : 1;                        		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              EndSplineTension;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartSplineTension;                               		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1171 ];

		return pClassPointer;
	};

};

UClass* USkelControlSpline::pClassPointer = NULL;

// Class Engine.SkelControlTrail
// 0x0074 (0x0110 - 0x009C)
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChainBoneAxis;                                    		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertChainBoneAxis : 1;                         		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLimitStretch : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActorSpaceFakeVel : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHadValidStrength : 1;                            		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              TrailRelaxation;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StretchLimit;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FakeVelocity;                                     		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThisTimstep;                                      		// 0x00BC (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           TrailBoneLocations;                               		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00CC (0x0004) MISSED OFFSET
	struct FMatrix                                     OldLocalToWorld;                                  		// 0x00D0 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1173 ];

		return pClassPointer;
	};

};

UClass* USkelControlTrail::pClassPointer = NULL;

// Class Engine.AnimSequence
// 0x00C8 (0x0104 - 0x003C)
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                     		// 0x003C (0x0008) [0x0000000000000000]              
	TArray< struct FAnimNotifyEvent >                  Notifies;                                         		// 0x0044 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAnimMetaData* >                     MetaData;                                         		// 0x0050 (0x000C) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FSkelControlModifier >              BoneControlModifiers;                             		// 0x005C (0x000C) [0x0000000024400000]              ( CPF_NeedCtorLink | CPF_EditInline | CPF_Deprecated )
	float                                              SequenceLength;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                NumFrames;                                        		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              RateScale;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoLoopingInterpolation : 1;                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsAdditive : 1;                                  		// 0x0074 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAdditiveBuiltLooping : 1;                        		// 0x0074 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoNotOverrideCompression : 1;                    		// 0x0074 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasBeenUsed : 1;                                 		// 0x0074 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	TArray< struct FRawAnimSequenceTrack >             RawAnimData;                                      		// 0x0078 (0x000C) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FRawAnimSequenceTrack >             RawAnimationData;                                 		// 0x0084 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTranslationTrack >                 TranslationData;                                  		// 0x0090 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRotationTrack >                    RotationData;                                     		// 0x009C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FCurveTrack >                       CurveData;                                        		// 0x00A8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      TranslationCompressionFormat;                     		// 0x00B4 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RotationCompressionFormat;                        		// 0x00B5 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      KeyEncodingFormat;                                		// 0x00B6 (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      CompressedTrackOffsets;                           		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            CompressedByteStream;                             		// 0x00C4 (0x000C) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    TranslationCodec;                                 		// 0x00D0 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    RotationCodec;                                    		// 0x00D4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         AdditiveRefPose;                                  		// 0x00D8 (0x000C) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FRawAnimSequenceTrack >             AdditiveBasePose;                                 		// 0x00E4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                EncodingPkgVersion;                               		// 0x00F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UseScore;                                         		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FDeltaTrackInfo >                   DeltaTrackCache;                                  		// 0x00F8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1175 ];

		return pClassPointer;
	};

	float GetNotifyTimeByClass ( class UClass* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify** out_Notify, float* out_Duration );
};

UClass* UAnimSequence::pClassPointer = NULL;

// Class Engine.AnimSet
// 0x00E0 (0x011C - 0x003C)
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                            		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FName >                             TrackBoneNames;                                   		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSequence* >                     Sequences;                                        		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0058 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.SequenceCache
	TArray< struct FAnimSetMeshLinkup >                LinkupCache;                                      		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00A0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.SkelMesh2LinkupCache
	TArray< unsigned char >                            BoneUseAnimTranslation;                           		// 0x00DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            ForceUseMeshTranslation;                          		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             UseTranslationBoneNames;                          		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             ForceMeshTranslationBoneNames;                    		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       PreviewSkelMeshName;                              		// 0x010C (0x0008) [0x0000000000000000]              
	struct FName                                       BestRatioSkelMeshName;                            		// 0x0114 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1177 ];

		return pClassPointer;
	};

};

UClass* UAnimSet::pClassPointer = NULL;

// Class Engine.MorphTarget
// 0x0018 (0x0054 - 0x003C)
class UMorphTarget : public UObject
{
public:
	TArray< int >                                      MorphLODModels;                                   		// 0x003C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaterialSlotId;                                   		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1179 ];

		return pClassPointer;
	};

};

UClass* UMorphTarget::pClassPointer = NULL;

// Class Engine.MorphTargetSet
// 0x001C (0x0058 - 0x003C)
class UMorphTargetSet : public UObject
{
public:
	TArray< class UMorphTarget* >                      Targets;                                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMesh*                               BaseSkelMesh;                                     		// 0x0048 (0x0004) [0x0000000000000000]              
	struct FArray_Mirror                               RawWedgePointIndices;                             		// 0x004C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1181 ];

		return pClassPointer;
	};

	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
};

UClass* UMorphTargetSet::pClassPointer = NULL;

// Class Engine.MorphWeightSequence
// 0x0000 (0x003C - 0x003C)
class UMorphWeightSequence : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1183 ];

		return pClassPointer;
	};

};

UClass* UMorphWeightSequence::pClassPointer = NULL;

// Class Engine.DecalActorBase
// 0x0004 (0x018C - 0x0188)
class ADecalActorBase : public AActor
{
public:
	class UDecalComponent*                             Decal;                                            		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1185 ];

		return pClassPointer;
	};

};

UClass* ADecalActorBase::pClassPointer = NULL;

// Class Engine.DecalActor
// 0x0000 (0x018C - 0x018C)
class ADecalActor : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1187 ];

		return pClassPointer;
	};

};

UClass* ADecalActor::pClassPointer = NULL;

// Class Engine.DecalActorMovable
// 0x0000 (0x018C - 0x018C)
class ADecalActorMovable : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1189 ];

		return pClassPointer;
	};

};

UClass* ADecalActorMovable::pClassPointer = NULL;

// Class Engine.DecalManager
// 0x0058 (0x01E0 - 0x0188)
class ADecalManager : public AActor
{
public:
	class UDecalComponent*                             DecalTemplate;                                    		// 0x0188 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UDecalComponent* >                   PoolDecals;                                       		// 0x018C (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxActiveDecals;                                  		// 0x0198 (0x0004) [0x0000000000000000]              
	int                                                MaxActiveDecalsLow;                               		// 0x019C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxActiveDecalsHigh;                              		// 0x01A0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxActiveDecalsSplitScreen;                       		// 0x01A4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              DecalLifeSpan;                                    		// 0x01A8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              DecalDepthBias;                                   		// 0x01AC (0x0004) [0x0000000000000000]              
	struct FVector2D                                   DecalBlendRange;                                  		// 0x01B0 (0x0008) [0x0000000000000000]              
	int                                                MaxFadingDecals;                                  		// 0x01B8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              FadingLifeSpan;                                   		// 0x01BC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       FadeParameterName;                                		// 0x01C0 (0x0008) [0x0000000000000000]              
	TArray< struct FActiveDecalInfo >                  ActiveDecals;                                     		// 0x01C8 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FActiveDecalInfo >                  FadingDecals;                                     		// 0x01D4 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1191 ];

		return pClassPointer;
	};

	void ClearAllPoolComponents ( );
	void ClearDecals ( );
	class UDecalComponent* eventSpawnDecal ( class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, struct FVector2D InBlendRange, unsigned long bDontAttach );
	class UDecalComponent* GetPooledComponent ( );
	void SetDecalParameters ( class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, struct FVector2D BlendRange );
	bool CanSpawnDecals ( );
	void eventDecalFinished ( class UDecalComponent* Decal );
	bool AreDynamicDecalsEnabled ( );
	void PostBeginPlay ( );
	void SetNumberOfDecals ( );
};

UClass* ADecalManager::pClassPointer = NULL;

// Class Engine.DecalComponent
// 0x0160 (0x0370 - 0x0210)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Width;                                            		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileX;                                            		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileY;                                            		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetX;                                          		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetY;                                          		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalRotation;                                    		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FieldOfView;                                      		// 0x0230 (0x0004) [0x0000000000000000]              
	float                                              NearPlane;                                        		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Location;                                         		// 0x023C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    Orientation;                                      		// 0x0248 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     HitLocation;                                      		// 0x0254 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitNormal;                                        		// 0x0260 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitTangent;                                       		// 0x026C (0x000C) [0x0000000000000000]              
	struct FVector                                     HitBinormal;                                      		// 0x0278 (0x000C) [0x0000000000000000]              
	unsigned long                                      bNoClip : 1;                                      		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStaticDecal : 1;                                 		// 0x0284 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bProjectOnBackfaces : 1;                          		// 0x0284 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bProjectOnHidden : 1;                             		// 0x0284 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bProjectOnBSP : 1;                                		// 0x0284 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bProjectOnStaticMeshes : 1;                       		// 0x0284 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x0284 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x0284 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bFlipBackfaceDirection : 1;                       		// 0x0284 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bMovableDecal : 1;                                		// 0x0284 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHasBeenAttached : 1;                             		// 0x0284 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDecalMaterialSetAtRunTime : 1;                   		// 0x0284 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	class UPrimitiveComponent*                         HitComponent;                                     		// 0x0288 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       HitBone;                                          		// 0x028C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitNodeIndex;                                     		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitLevelIndex;                                    		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FracturedStaticMeshComponentIndex;                		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      HitNodeIndices;                                   		// 0x02A0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDecalReceiver >                    DecalReceivers;                                   		// 0x02AC (0x000C) [0x0000000001680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FPointer >                          StaticReceivers;                                  		// 0x02B8 (0x000C) [0x0000000001203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x02C4 (0x0004) [0x0000000000203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPlane >                            Planes;                                           		// 0x02C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              DepthBias;                                        		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeScaleDepthBias;                              		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SortOrder;                                        		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackfaceAngle;                                    		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   BlendRange;                                       		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DecalTransform;                                   		// 0x02F0 (0x0001) [0x0000000000000000]              
	unsigned char                                      FilterMode;                                       		// 0x02F1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Filter;                                           		// 0x02F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UPrimitiveComponent* >               ReceiverImages;                                   		// 0x0300 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     ParentRelativeLocation;                           		// 0x030C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ParentRelativeOrientation;                        		// 0x0318 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0324 (0x000C) MISSED OFFSET
	struct FMatrix                                     ParentRelLocRotMatrix;                            		// 0x0330 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1193 ];

		return pClassPointer;
	};

	bool IsWaitingForResetToDefaultsToComplete ( );
	class UMaterialInterface* GetDecalMaterial ( );
	void SetDecalMaterial ( class UMaterialInterface* NewDecalMaterial );
	void ResetToDefaults ( );
};

UClass* UDecalComponent::pClassPointer = NULL;

// Class Engine.ActorFactoryDecal
// 0x0004 (0x0080 - 0x007C)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1195 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryDecal::pClassPointer = NULL;

// Class Engine.ActorFactoryDecalMovable
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryDecalMovable : public UActorFactoryDecal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1197 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryDecalMovable::pClassPointer = NULL;

// Class Engine.DecalMaterial
// 0x0000 (0x0378 - 0x0378)
class UDecalMaterial : public UMaterial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1199 ];

		return pClassPointer;
	};

};

UClass* UDecalMaterial::pClassPointer = NULL;

// Class Engine.FogVolumeDensityInfo
// 0x000C (0x0194 - 0x0188)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                 		// 0x0188 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        AutomaticMeshComponent;                           		// 0x018C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0190 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1201 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AFogVolumeDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x0194 - 0x0194)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1203 ];

		return pClassPointer;
	};

};

UClass* AFogVolumeConeDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x0194 - 0x0194)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1205 ];

		return pClassPointer;
	};

};

UClass* AFogVolumeConstantDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0194 - 0x0194)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1207 ];

		return pClassPointer;
	};

};

UClass* AFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x0194 - 0x0194)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1209 ];

		return pClassPointer;
	};

};

UClass* AFogVolumeSphericalDensityInfo::pClassPointer = NULL;

// Class Engine.ExponentialHeightFogComponent
// 0x002F (0x0088 - 0x0059)
class UExponentialHeightFogComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              FogHeight;                                        		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FogDensity;                                       		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FogHeightFalloff;                                 		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FogMaxOpacity;                                    		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartDistance;                                    		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightTerminatorAngle;                             		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OppositeLightBrightness;                          		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      OppositeLightColor;                               		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightInscatteringBrightness;                      		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightInscatteringColor;                           		// 0x0084 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1211 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};

UClass* UExponentialHeightFogComponent::pClassPointer = NULL;

// Class Engine.FogVolumeDensityComponent
// 0x0043 (0x009C - 0x0059)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          FogMaterial;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                         		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0064 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectsTranslucency : 1;                         		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyAffectsTranslucency : 1;                     		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FLinearColor                                SimpleLightColor;                                 		// 0x0068 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ApproxFogLightColor;                              		// 0x0078 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartDistance;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            FogVolumeActors;                                  		// 0x0090 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1213 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};

UClass* UFogVolumeDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeConeDensityComponent
// 0x0028 (0x00C4 - 0x009C)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeVertex;                                       		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeAxis;                                         		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeMaxAngle;                                     		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewCone;                                      		// 0x00C0 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1215 ];

		return pClassPointer;
	};

};

UClass* UFogVolumeConeDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x00A0 - 0x009C)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1217 ];

		return pClassPointer;
	};

};

UClass* UFogVolumeConstantDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0014 (0x00B0 - 0x009C)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPlane                                      HalfspacePlane;                                   		// 0x00A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1219 ];

		return pClassPointer;
	};

};

UClass* UFogVolumeLinearHalfspaceDensityComponent::pClassPointer = NULL;

// Class Engine.FogVolumeSphericalDensityComponent
// 0x0018 (0x00B4 - 0x009C)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SphereCenter;                                     		// 0x00A0 (0x000C) [0x0000000000000000]              
	float                                              SphereRadius;                                     		// 0x00AC (0x0004) [0x0000000000000000]              
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                              		// 0x00B0 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1221 ];

		return pClassPointer;
	};

};

UClass* UFogVolumeSphericalDensityComponent::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeConstantDensityInfo
// 0x0008 (0x0084 - 0x007C)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bNothingSelected : 1;                             		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1223 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryFogVolumeConstantDensityInfo::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0084 - 0x0084)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1225 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo
// 0x0000 (0x0084 - 0x0084)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1227 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryFogVolumeSphericalDensityInfo::pClassPointer = NULL;

// Class Engine.ApexDestructibleActor
// 0x006C (0x01F4 - 0x0188)
class AApexDestructibleActor : public AActor
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0188 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bFractureMaterialOverride : 1;                    		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UFractureMaterial* >                 FractureMaterials;                                		// 0x0190 (0x000C) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	class UApexStaticDestructibleComponent*            StaticDestructibleComponent;                      		// 0x019C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	TArray< unsigned char >                            VisibilityFactors;                                		// 0x01A0 (0x000C) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< class USoundCue* >                         FractureSounds;                                   		// 0x01AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UParticleSystem* >                   FractureParticleEffects;                          		// 0x01B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct F_ModifyHealthParams                        ModifyHealthParams;                               		// 0x01C4 (0x0030) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1229 ];

		return pClassPointer;
	};

	void eventModifyHealth ( unsigned long bHeal, float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition );
	void ModifyHealthExec ( unsigned long bHeal, float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void TakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* DamagePipeline );
	void eventPostBeginPlay ( );
	void CacheFractureEffects ( );
	void eventSpawnFractureEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FVector SpawnDirection );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AApexDestructibleActor::pClassPointer = NULL;

// Class Engine.ApexComponentBase
// 0x0014 (0x0230 - 0x021C)
class UApexComponentBase : public UMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                           		// 0x021C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x0220 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UApexAsset*                                  Asset;                                            		// 0x0224 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      WireframeColor;                                   		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAssetChanged : 1;                                		// 0x022C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1231 ];

		return pClassPointer;
	};

};

UClass* UApexComponentBase::pClassPointer = NULL;

// Class Engine.ApexDynamicComponent
// 0x0004 (0x0234 - 0x0230)
class UApexDynamicComponent : public UApexComponentBase
{
public:
	struct FPointer                                    ComponentDynamicResources;                        		// 0x0230 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1233 ];

		return pClassPointer;
	};

};

UClass* UApexDynamicComponent::pClassPointer = NULL;

// Class Engine.ApexStaticComponent
// 0x0000 (0x0230 - 0x0230)
class UApexStaticComponent : public UApexComponentBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1235 ];

		return pClassPointer;
	};

};

UClass* UApexStaticComponent::pClassPointer = NULL;

// Class Engine.ApexStaticDestructibleComponent
// 0x0014 (0x0244 - 0x0230)
class UApexStaticDestructibleComponent : public UApexStaticComponent
{
public:
	float                                              SleepEnergyThreshold;                             		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SleepDamping;                                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ApexDestructibleActor;                            		// 0x0238 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    ApexDestructiblePreview;                          		// 0x023C (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      bIsThumbnailComponent : 1;                        		// 0x0240 (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1237 ];

		return pClassPointer;
	};

};

UClass* UApexStaticDestructibleComponent::pClassPointer = NULL;

// Class Engine.BlockingMeshComponent
// 0x0004 (0x024C - 0x0248)
class UBlockingMeshComponent : public UStaticMeshComponent
{
public:
	unsigned long                                      bBlockPlayers : 1;                                		// 0x0248 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockVehicles : 1;                               		// 0x0248 (0x0004) [0x0000000020000002] [0x00000002] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bBlockRocketsAndGrenades : 1;                     		// 0x0248 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockBullets : 1;                                		// 0x0248 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockTossedItems : 1;                            		// 0x0248 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockEnemyPawns : 1;                             		// 0x0248 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockFriendlyPawns : 1;                          		// 0x0248 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockPlayerVehicles : 1;                         		// 0x0248 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockEnemyVehicles : 1;                          		// 0x0248 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x0248 (0x0004) [0x0000000000000000] [0x00000200] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1239 ];

		return pClassPointer;
	};

	void SetBlockingMeshComponentCollision ( );
};

UClass* UBlockingMeshComponent::pClassPointer = NULL;

// Class Engine.InstancedStaticMeshComponent
// 0x0030 (0x0278 - 0x0248)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray< struct FInstancedStaticMeshInstanceData >  PerInstanceData;                                  		// 0x0248 (0x000C) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FInstancedStaticMeshInstanceData >  PerInstanceSMData;                                		// 0x0254 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                NumPendingLightmaps;                              		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ComponentJoinKey;                                 		// 0x0264 (0x0004) [0x0000000000000000]              
	TArray< struct FInstancedStaticMeshMappingInfo >   CachedMappings;                                   		// 0x0268 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                InstancingRandomSeed;                             		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1241 ];

		return pClassPointer;
	};

};

UClass* UInstancedStaticMeshComponent::pClassPointer = NULL;

// Class Engine.SplineMeshComponent
// 0x0068 (0x02B0 - 0x0248)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                     		// 0x0248 (0x0058) [0x0000000000000000]              
	struct FVector                                     SplineXDir;                                       		// 0x02A0 (0x000C) [0x0000000000000000]              
	unsigned long                                      bSmoothInterpRollScale : 1;                       		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1243 ];

		return pClassPointer;
	};

};

UClass* USplineMeshComponent::pClassPointer = NULL;

// Class Engine.ApexAsset
// 0x0018 (0x0054 - 0x003C)
class UApexAsset : public UObject
{
public:
	struct FString                                     OriginalApexName;                                 		// 0x003C (0x000C) [0x0000000004400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UApexComponentBase* >                ApexComponents;                                   		// 0x0048 (0x000C) [0x000000000408300A]              ( CPF_Const | CPF_ExportObject | CPF_Native | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1245 ];

		return pClassPointer;
	};

};

UClass* UApexAsset::pClassPointer = NULL;

// Class Engine.ApexClothingAsset
// 0x002C (0x0080 - 0x0054)
class UApexClothingAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                       		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )
	class UApexGenericAsset*                           ApexClothingLibrary;                              		// 0x0058 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bUseHardwareCloth : 1;                            		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFallbackSkinning : 1;                            		// 0x005C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSlowStart : 1;                                   		// 0x005C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRecomputeNormals : 1;                            		// 0x005C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bResetAfterTeleport : 1;                          		// 0x005C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	int                                                UVChannelForTangentUpdate;                        		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxDistanceBlendTime;                             		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContinuousRotationThreshold;                      		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContinuousDistanceThreshold;                      		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsMaxDistance;                            		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsDistanceWeight;                         		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsBias;                                   		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsBenefitsBias;                           		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1247 ];

		return pClassPointer;
	};

};

UClass* UApexClothingAsset::pClassPointer = NULL;

// Class Engine.ApexDestructibleAsset
// 0x00C0 (0x0114 - 0x0054)
class UApexDestructibleAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                       		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0058 (0x000C) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	TArray< class UFractureMaterial* >                 FractureMaterials;                                		// 0x0064 (0x000C) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MDestructibleThumbnailComponent;                  		// 0x0074 (0x0004) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      bHasUniqueAssetMaterialNames : 1;                 		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDynamic : 1;                                     		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FString                                     CrumbleEmitterName;                               		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DustEmitterName;                                  		// 0x0088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FNxDestructibleParameters                   DestructibleParameters;                           		// 0x0094 (0x0080) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1249 ];

		return pClassPointer;
	};

};

UClass* UApexDestructibleAsset::pClassPointer = NULL;

// Class Engine.ApexGenericAsset
// 0x0004 (0x0058 - 0x0054)
class UApexGenericAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                       		// 0x0054 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1251 ];

		return pClassPointer;
	};

};

UClass* UApexGenericAsset::pClassPointer = NULL;

// Class Engine.InterpFilter
// 0x000C (0x0048 - 0x003C)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1253 ];

		return pClassPointer;
	};

};

UClass* UInterpFilter::pClassPointer = NULL;

// Class Engine.InterpFilter_Classes
// 0x0000 (0x0048 - 0x0048)
class UInterpFilter_Classes : public UInterpFilter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1255 ];

		return pClassPointer;
	};

};

UClass* UInterpFilter_Classes::pClassPointer = NULL;

// Class Engine.InterpFilter_Custom
// 0x0000 (0x0048 - 0x0048)
class UInterpFilter_Custom : public UInterpFilter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1257 ];

		return pClassPointer;
	};

};

UClass* UInterpFilter_Custom::pClassPointer = NULL;

// Class Engine.InterpGroup
// 0x002C (0x0068 - 0x003C)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UInterpTrack* >                      InterpTracks;                                     		// 0x0040 (0x000C) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	struct FName                                       GroupName;                                        		// 0x004C (0x0008) [0x0000000000000000]              
	struct FColor                                      GroupColor;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          GroupAnimSets;                                    		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCollapsed : 1;                                   		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVisible : 1;                                     		// 0x0064 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsFolder : 1;                                    		// 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsParented : 1;                                  		// 0x0064 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsSelected : 1;                                  		// 0x0064 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRunTracksWhenSkippingToLastFrame : 1;            		// 0x0064 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1259 ];

		return pClassPointer;
	};

};

UClass* UInterpGroup::pClassPointer = NULL;

// Class Engine.InterpGroupAI
// 0x0014 (0x007C - 0x0068)
class UInterpGroupAI : public UInterpGroup
{
public:
	struct FName                                       StageMarkGroup;                                   		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SnapToRootBoneLocationWhenFinished : 1;           		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoEncroachmentCheck : 1;                         		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableWorldCollision : 1;                       		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreLegacyHeightAdjust : 1;                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRecreatePreviewPawn : 1;                         		// 0x0070 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRefreshStageMarkGroup : 1;                       		// 0x0070 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bEnableAIWhenAllAnimsFinished : 1;                		// 0x0070 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseStageMarkerForInitialLocation : 1;            		// 0x0070 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bPutInDemiGod : 1;                                		// 0x0070 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned char                                      Alignment;                                        		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlignmentLerpTime;                                		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1261 ];

		return pClassPointer;
	};

};

UClass* UInterpGroupAI::pClassPointer = NULL;

// Class Engine.InterpGroupDirector
// 0x0008 (0x0070 - 0x0068)
class UInterpGroupDirector : public UInterpGroup
{
public:
	struct FName                                       AttachedGroupName;                                		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1263 ];

		return pClassPointer;
	};

};

UClass* UInterpGroupDirector::pClassPointer = NULL;

// Class Engine.InterpGroupInst
// 0x0018 (0x0054 - 0x003C)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                            		// 0x003C (0x0004) [0x0000000000000000]              
	class AActor*                                      GroupActor;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< class UInterpTrackInst* >                  TrackInst;                                        		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bWasNetworkRefreshed : 1;                         		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDeleteIfNoGroupActor : 1;                        		// 0x0050 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1265 ];

		return pClassPointer;
	};

};

UClass* UInterpGroupInst::pClassPointer = NULL;

// Class Engine.InterpGroupInstAI
// 0x0010 (0x0064 - 0x0054)
class UInterpGroupInstAI : public UInterpGroupInst
{
public:
	class UInterpGroupAI*                              AIGroup;                                          		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SavedPhysics;                                     		// 0x0058 (0x0001) [0x0000000000000000]              
	unsigned long                                      bSavedNoEncroachCheck : 1;                        		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSavedCollideActors : 1;                          		// 0x005C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSavedBlockActors : 1;                            		// 0x005C (0x0004) [0x0000000000000000] [0x00000004] 
	class AActor*                                      StageMarkActor;                                   		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1267 ];

		return pClassPointer;
	};

};

UClass* UInterpGroupInstAI::pClassPointer = NULL;

// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0054 - 0x0054)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1269 ];

		return pClassPointer;
	};

};

UClass* UInterpGroupInstDirector::pClassPointer = NULL;

// Class Engine.InterpTrackBoolProp
// 0x0014 (0x007C - 0x0068)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray< struct FBoolTrackKey >                     BoolTrack;                                        		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PropertyName;                                     		// 0x0074 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1271 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackBoolProp::pClassPointer = NULL;

// Class Engine.InterpTrackComment
// 0x0010 (0x0078 - 0x0068)
class UInterpTrackComment : public UInterpTrack
{
public:
	TArray< struct FCommentTrackKey >                  CommentTrack;                                     		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bOutputCommentsToScreen : 1;                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1273 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackComment::pClassPointer = NULL;

// Class Engine.InterpTrackDirector
// 0x0010 (0x0078 - 0x0068)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray< struct FDirectorTrackCut >                 CutTrack;                                         		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSimulateCameraCutsOnClients : 1;                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1275 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackDirector::pClassPointer = NULL;

// Class Engine.InterpTrackEvent
// 0x0010 (0x0078 - 0x0068)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray< struct FEventTrackKey >                    EventTrack;                                       		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1277 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackEvent::pClassPointer = NULL;

// Class Engine.InterpTrackFaceFX
// 0x0028 (0x0090 - 0x0068)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray< class UFaceFXAnimSet* >                    FaceFXAnimSets;                                   		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FFaceFXTrackKey >                   FaceFXSeqs;                                       		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFaceFXAsset*                                CachedActorFXAsset;                               		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFaceFXSoundCueKey >                FaceFXSoundCueKeys;                               		// 0x0084 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1279 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackFaceFX::pClassPointer = NULL;

// Class Engine.InterpTrackFloatBase
// 0x0014 (0x007C - 0x0068)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                       		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1281 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatBase::pClassPointer = NULL;

// Class Engine.InterpTrackAnimControl
// 0x0024 (0x00A0 - 0x007C)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       SlotName;                                         		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAnimControlTrackKey >              AnimSeqs;                                         		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bEnableRootMotion : 1;                            		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSkipAnimNotifiers : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1283 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackAnimControl::pClassPointer = NULL;

// Class Engine.InterpTrackFade
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FColor                                      FadeColor;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1285 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackFade::pClassPointer = NULL;

// Class Engine.InterpTrackFloatMaterialParam
// 0x001C (0x0098 - 0x007C)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray< struct FMaterialReferenceList >            Materials;                                        		// 0x007C (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	class UMaterialInterface*                          Material;                                         		// 0x0088 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FName                                       ParamName;                                        		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedsMaterialRefsUpdate : 1;                     		// 0x0094 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1287 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1289 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatParticleParam::pClassPointer = NULL;

// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x007C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1291 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackFloatProp::pClassPointer = NULL;

// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                    		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1293 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackMorphWeight::pClassPointer = NULL;

// Class Engine.InterpTrackMoveAxis
// 0x0010 (0x008C - 0x007C)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	unsigned char                                      MoveAxis;                                         		// 0x007C (0x0001) [0x0000000000000000]              
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1295 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackMoveAxis::pClassPointer = NULL;

// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1297 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackSkelControlScale::pClassPointer = NULL;

// Class Engine.InterpTrackSkelControlStrength
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackSkelControlStrength : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1299 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackSkelControlStrength::pClassPointer = NULL;

// Class Engine.InterpTrackSlomo
// 0x0000 (0x007C - 0x007C)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1301 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackSlomo::pClassPointer = NULL;

// Class Engine.InterpTrackHeadTracking
// 0x0044 (0x00AC - 0x0068)
class UInterpTrackHeadTracking : public UInterpTrack
{
public:
	TArray< struct FHeadTrackingKey >                  HeadTrackingTrack;                                		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             TrackControllerName;                              		// 0x0074 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LookAtActorRadius;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLookAtPawns : 1;                                 		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MaxLookAtTime;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtTime;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInterestTime;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ActorClassesToLookAt;                             		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TargetBoneNames;                                  		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1303 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackHeadTracking::pClassPointer = NULL;

// Class Engine.InterpTrackLinearColorBase
// 0x0014 (0x007C - 0x0068)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                 		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1305 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackLinearColorBase::pClassPointer = NULL;

// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x007C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1307 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackLinearColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackMove
// 0x0042 (0x00AA - 0x0068)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                         		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveVector                          EulerTrack;                                       		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       LookAtGroupName;                                  		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinCurveTension;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngCurveTension;                                  		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseQuatInterpolation : 1;                        		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowArrowAtKeys : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableMovement : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowTranslationOnCurveEd : 1;                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowRotationOnCurveEd : 1;                       		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHide3DTrack : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      MoveFrame;                                        		// 0x00A8 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      RotMode;                                          		// 0x00A9 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1309 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackMove::pClassPointer = NULL;

// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x0078 - 0x0068)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray< struct FParticleReplayTrackKey >           TrackKeys;                                        		// 0x0068 (0x000C) [0x0000000004400000]              ( CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bIsCapturingReplay : 1;                           		// 0x0074 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1311 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackParticleReplay::pClassPointer = NULL;

// Class Engine.InterpTrackTeleport
// 0x000C (0x0074 - 0x0068)
class UInterpTrackTeleport : public UInterpTrack
{
public:
	TArray< struct FTeleportKeyData >                  TeleportKeys;                                     		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1313 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackTeleport::pClassPointer = NULL;

// Class Engine.InterpTrackToggle
// 0x0010 (0x0078 - 0x0068)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray< struct FToggleTrackKey >                   ToggleTrack;                                      		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bActivateSystemEachUpdate : 1;                    		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActivateWithJustAttachedFlag : 1;                		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x0074 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0074 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1315 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackToggle::pClassPointer = NULL;

// Class Engine.InterpTrackVectorBase
// 0x0014 (0x007C - 0x0068)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                      		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1317 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackVectorBase::pClassPointer = NULL;

// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x007C - 0x007C)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1319 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackAudioMaster::pClassPointer = NULL;

// Class Engine.InterpTrackColorProp
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x007C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1321 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackColorScale
// 0x0000 (0x007C - 0x007C)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1323 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackColorScale::pClassPointer = NULL;

// Class Engine.InterpTrackSound
// 0x0010 (0x008C - 0x007C)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray< struct FSoundTrackKey >                    Sounds;                                           		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bPlayOnReverse : 1;                               		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTreatAsDialogue : 1;                             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1325 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackSound::pClassPointer = NULL;

// Class Engine.InterpTrackVectorMaterialParam
// 0x001C (0x0098 - 0x007C)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray< struct FMaterialReferenceList >            Materials;                                        		// 0x007C (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	class UMaterialInterface*                          Material;                                         		// 0x0088 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FName                                       ParamName;                                        		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedsMaterialRefsUpdate : 1;                     		// 0x0094 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1327 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackVectorMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0084 - 0x007C)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x007C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1329 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackVectorProp::pClassPointer = NULL;

// Class Engine.InterpTrackVisibility
// 0x0010 (0x0078 - 0x0068)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray< struct FVisibilityTrackKey >               VisibilityTrack;                                  		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1331 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackVisibility::pClassPointer = NULL;

// Class Engine.InterpTrackInst
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInst : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1333 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInst::pClassPointer = NULL;

// Class Engine.InterpTrackInstAnimControl
// 0x0020 (0x005C - 0x003C)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ResetLocation;                                    		// 0x0040 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ResetRotation;                                    		// 0x004C (0x000C) [0x0000000000000000]              
	unsigned long                                      bLastAnimFinished : 1;                            		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1335 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstAnimControl::pClassPointer = NULL;

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1337 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstAudioMaster::pClassPointer = NULL;

// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1339 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstColorScale::pClassPointer = NULL;

// Class Engine.InterpTrackInstComment
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstComment : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1341 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstComment::pClassPointer = NULL;

// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                    		// 0x003C (0x0004) [0x0000000000000000]              
	struct FRenderingPerformanceOverrides              OldRenderingOverrides;                            		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1343 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstDirector::pClassPointer = NULL;

// Class Engine.InterpTrackInstEvent
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1345 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstEvent::pClassPointer = NULL;

// Class Engine.InterpTrackInstFaceFX
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x003C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1347 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFaceFX::pClassPointer = NULL;

// Class Engine.InterpTrackInstFade
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1349 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFade::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0010 (0x004C - 0x003C)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray< struct FFloatMaterialParamMICData >        MICInfos;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                   		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1351 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFloatMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1353 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFloatParticleParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstHeadTracking
// 0x0054 (0x0090 - 0x003C)
class UInterpTrackInstHeadTracking : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0040 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.InterpTrackInstHeadTracking.CurrentActorMap
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x007C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class USkelControlLookAt* >                TrackControls;                                    		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastUpdatePosition;                               		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1355 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstHeadTracking::pClassPointer = NULL;

// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1357 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstMorphWeight::pClassPointer = NULL;

// Class Engine.InterpTrackInstMove
// 0x0074 (0x00B0 - 0x003C)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                    		// 0x003C (0x000C) [0x0000000000000000]              
	struct FRotator                                    ResetRotation;                                    		// 0x0048 (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0054 (0x000C) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                        		// 0x0060 (0x0040) [0x0000000000000000]              
	struct FQuat                                       InitialQuat;                                      		// 0x00A0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1359 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstMove::pClassPointer = NULL;

// Class Engine.InterpTrackInstParticleReplay
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1361 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstParticleReplay::pClassPointer = NULL;

// Class Engine.InterpTrackInstProperty
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                           		// 0x003C (0x0004) [0x0000000000000000]              
	class UObject*                                     PropertyOuterObjectInst;                          		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1363 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstProperty::pClassPointer = NULL;

// Class Engine.InterpTrackInstBoolProp
// 0x000C (0x0050 - 0x0044)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    BoolProp;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                BitMask;                                          		// 0x0048 (0x0004) [0x0000000000000000]              
	unsigned long                                      ResetBool : 1;                                    		// 0x004C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1365 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstBoolProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstColorProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FColor                                      ResetColor;                                       		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1367 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstFloatProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              ResetFloat;                                       		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1369 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstFloatProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstLinearColorProp
// 0x0014 (0x0058 - 0x0044)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                ResetColor;                                       		// 0x0048 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1371 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstLinearColorProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstVectorProp
// 0x0010 (0x0054 - 0x0044)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                       		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FVector                                     ResetVector;                                      		// 0x0048 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1373 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstVectorProp::pClassPointer = NULL;

// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1375 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstSkelControlScale::pClassPointer = NULL;

// Class Engine.InterpTrackInstSkelControlStrength
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstSkelControlStrength : public UInterpTrackInst
{
public:
	unsigned long                                      bSavedControlledByAnimMetaData : 1;               		// 0x003C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1377 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstSkelControlStrength::pClassPointer = NULL;

// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                  		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1379 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstSlomo::pClassPointer = NULL;

// Class Engine.InterpTrackInstSound
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x003C (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x0040 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1381 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstSound::pClassPointer = NULL;

// Class Engine.InterpTrackInstTeleport
// 0x001C (0x0058 - 0x003C)
class UInterpTrackInstTeleport : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                    		// 0x003C (0x000C) [0x0000000000000000]              
	struct FRotator                                    ResetRotation;                                    		// 0x0048 (0x000C) [0x0000000000000000]              
	float                                              LastUpdatePosition;                               		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1383 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstTeleport::pClassPointer = NULL;

// Class Engine.InterpTrackInstToggle
// 0x000C (0x0048 - 0x003C)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSavedActiveState : 1;                            		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1385 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstToggle::pClassPointer = NULL;

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0010 (0x004C - 0x003C)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray< struct FVectorMaterialParamMICData >       MICInfos;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                   		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1387 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstVectorMaterialParam::pClassPointer = NULL;

// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdatePosition;                               		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1389 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackInstVisibility::pClassPointer = NULL;

// Class Engine.MaterialExpressionAbs
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1391 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionAbs::pClassPointer = NULL;

// Class Engine.MaterialExpressionAdd
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1393 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionAdd::pClassPointer = NULL;

// Class Engine.MaterialExpressionAppendVector
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1395 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionAppendVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionArcCosine
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionArcCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1397 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionArcCosine::pClassPointer = NULL;

// Class Engine.MaterialExpressionArcSine
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionArcSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1399 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionArcSine::pClassPointer = NULL;

// Class Engine.MaterialExpressionArcTangent
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionArcTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1401 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionArcTangent::pClassPointer = NULL;

// Class Engine.MaterialExpressionArcTangent2
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionArcTangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            InputX;                                           		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            InputY;                                           		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1403 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionArcTangent2::pClassPointer = NULL;

// Class Engine.MaterialExpressionBlendModeBase
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionBlendModeBase : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Blend;                                            		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1405 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBlendModeBase::pClassPointer = NULL;

// Class Engine.MaterialExpressionzColorBurn
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzColorBurn : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1407 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzColorBurn::pClassPointer = NULL;

// Class Engine.MaterialExpressionzColorDodge
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzColorDodge : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1409 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzColorDodge::pClassPointer = NULL;

// Class Engine.MaterialExpressionzExclusion
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzExclusion : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1411 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzExclusion::pClassPointer = NULL;

// Class Engine.MaterialExpressionzHardLight
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzHardLight : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1413 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzHardLight::pClassPointer = NULL;

// Class Engine.MaterialExpressionzLinearBurn
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzLinearBurn : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1415 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzLinearBurn::pClassPointer = NULL;

// Class Engine.MaterialExpressionzLinearLight
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzLinearLight : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1417 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzLinearLight::pClassPointer = NULL;

// Class Engine.MaterialExpressionzOverlay
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzOverlay : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1419 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzOverlay::pClassPointer = NULL;

// Class Engine.MaterialExpressionzPinLight
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzPinLight : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1421 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzPinLight::pClassPointer = NULL;

// Class Engine.MaterialExpressionzScreen
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzScreen : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1423 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzScreen::pClassPointer = NULL;

// Class Engine.MaterialExpressionzSoftLight
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzSoftLight : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1425 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzSoftLight::pClassPointer = NULL;

// Class Engine.MaterialExpressionzVividLight
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionzVividLight : public UMaterialExpressionBlendModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1427 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionzVividLight::pClassPointer = NULL;

// Class Engine.MaterialExpressionBumpOffset
// 0x0040 (0x0084 - 0x0044)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Height;                                           		// 0x0060 (0x001C) [0x0000000000000000]              
	float                                              HeightRatio;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferencePlane;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1429 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBumpOffset::pClassPointer = NULL;

// Class Engine.MaterialExpressionBumpOffsetEx
// 0x0070 (0x00B4 - 0x0044)
class UMaterialExpressionBumpOffsetEx : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Height;                                           		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            HeightRatio;                                      		// 0x007C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            ReferencePlane;                                   		// 0x0098 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1431 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBumpOffsetEx::pClassPointer = NULL;

// Class Engine.MaterialExpressionBumpOffsetSloped
// 0x0030 (0x0074 - 0x0044)
class UMaterialExpressionBumpOffsetSloped : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0044 (0x001C) [0x0000000000000000]              
	class UTexture2D*                                  NormalTexture;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  HeightTexture;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightRatio;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferencePlane;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Iterations;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1433 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionBumpOffsetSloped::pClassPointer = NULL;

// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1435 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCameraVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1437 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCameraWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionCeil
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1439 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCeil::pClassPointer = NULL;

// Class Engine.MaterialExpressionClamp
// 0x0054 (0x0098 - 0x0044)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Min;                                              		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Max;                                              		// 0x007C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1441 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionClamp::pClassPointer = NULL;

// Class Engine.MaterialExpressionComment
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                             		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                PosY;                                             		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x004C (0x0004) [0x0000000000000000]              
	int                                                SizeY;                                            		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FString                                     Text;                                             		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1443 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionComment::pClassPointer = NULL;

// Class Engine.MaterialExpressionComponentMask
// 0x0020 (0x0064 - 0x0044)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	unsigned long                                      R : 1;                                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      G : 1;                                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      B : 1;                                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      A : 1;                                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1445 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionComponentMask::pClassPointer = NULL;

// Class Engine.MaterialExpressionCompound
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionCompound : public UMaterialExpression
{
public:
	TArray< class UMaterialExpression* >               MaterialExpressions;                              		// 0x0044 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Caption;                                          		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bExpanded : 1;                                    		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1447 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCompound::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1449 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x004C - 0x0044)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1451 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant2Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x0050 - 0x0044)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1453 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant3Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0054 - 0x0044)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              A;                                                		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1455 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstant4Vector::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0024 (0x0068 - 0x0044)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	float                                              Bias;                                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1457 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstantBiasScale::pClassPointer = NULL;

// Class Engine.MaterialExpressionConstantClamp
// 0x0024 (0x0068 - 0x0044)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	float                                              Min;                                              		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1459 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionConstantClamp::pClassPointer = NULL;

// Class Engine.MaterialExpressionCosine
// 0x0020 (0x0064 - 0x0044)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1461 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCosine::pClassPointer = NULL;

// Class Engine.MaterialExpressionCrossProduct
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1463 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCrossProduct::pClassPointer = NULL;

// Class Engine.MaterialExpressionCustom
// 0x0028 (0x006C - 0x0044)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                             		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      OutputType;                                       		// 0x0050 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Description;                                      		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCustomInput >                      Inputs;                                           		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1465 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCustom::pClassPointer = NULL;

// Class Engine.MaterialExpressionCustomTexture
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionCustomTexture : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1467 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionCustomTexture::pClassPointer = NULL;

// Class Engine.MaterialExpressionDdx
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionDdx : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1469 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDdx::pClassPointer = NULL;

// Class Engine.MaterialExpressionDdy
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionDdy : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1471 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDdy::pClassPointer = NULL;

// Class Engine.MaterialExpressionDegrees
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionDegrees : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1473 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDegrees::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0040 (0x0084 - 0x0044)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Alpha;                                            		// 0x004C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x0068 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1475 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDepthBiasedAlpha::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x005C (0x00A0 - 0x0044)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            RGB;                                              		// 0x004C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x0068 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x0084 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1477 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDepthBiasedBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0020 (0x0064 - 0x0044)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	unsigned char                                      FunctionValue;                                    		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Depth;                                            		// 0x0048 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1479 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDepthOfFieldFunction::pClassPointer = NULL;

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                             		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1481 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDeriveNormalZ::pClassPointer = NULL;

// Class Engine.MaterialExpressionDesaturation
// 0x0048 (0x008C - 0x0044)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Percent;                                          		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FLinearColor                                LuminanceFactors;                                 		// 0x007C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1483 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDesaturation::pClassPointer = NULL;

// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1485 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDestColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1487 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDestDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionDistance
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1489 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionDivide
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1491 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDivide::pClassPointer = NULL;

// Class Engine.MaterialExpressionDominantSkyLight
// 0x000C (0x0050 - 0x0044)
class UMaterialExpressionDominantSkyLight : public UMaterialExpression
{
public:
	unsigned long                                      bUseTimeOfDay : 1;                                		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              TimeOfDayMax;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOfDayMin;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1493 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDominantSkyLight::pClassPointer = NULL;

// Class Engine.MaterialExpressionDotProduct
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1495 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDotProduct::pClassPointer = NULL;

// Class Engine.MaterialExpressionDynamicParameter
// 0x000C (0x0050 - 0x0044)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray< struct FString >                           ParamNames;                                       		// 0x0044 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1497 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDynamicParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshEmitterDynamicParameter
// 0x0000 (0x0050 - 0x0050)
class UMaterialExpressionMeshEmitterDynamicParameter : public UMaterialExpressionDynamicParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1499 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMeshEmitterDynamicParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionExp
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionExp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1501 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionExp::pClassPointer = NULL;

// Class Engine.MaterialExpressionExp2
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionExp2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1503 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionExp2::pClassPointer = NULL;

// Class Engine.MaterialExpressionFloor
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1505 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFloor::pClassPointer = NULL;

// Class Engine.MaterialExpressionFluidNormal
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1507 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFluidNormal::pClassPointer = NULL;

// Class Engine.MaterialExpressionFmod
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1509 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFmod::pClassPointer = NULL;

// Class Engine.MaterialExpressionFoliageImpulseDirection
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionFoliageImpulseDirection : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1511 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFoliageImpulseDirection::pClassPointer = NULL;

// Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionFoliageNormalizedRotationAxisAndAngle : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1513 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFoliageNormalizedRotationAxisAndAngle::pClassPointer = NULL;

// Class Engine.MaterialExpressionFontSample
// 0x0008 (0x004C - 0x0044)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                             		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FontTexturePage;                                  		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1515 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFontSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0018 (0x0064 - 0x004C)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x0054 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1517 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFontSampleParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionFrac
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1519 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFrac::pClassPointer = NULL;

// Class Engine.MaterialExpressionFresnel
// 0x0020 (0x0064 - 0x0044)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Normal;                                           		// 0x0048 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1521 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFresnel::pClassPointer = NULL;

// Class Engine.MaterialExpressionGradient
// 0x0054 (0x0098 - 0x0044)
class UMaterialExpressionGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0044 (0x001C) [0x0000000000000000]              
	unsigned char                                      GradientStyle;                                    		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressX;                                         		// 0x0061 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x0062 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ForegroundColor;                                  		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                BackgroundColor;                                  		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ForegroundOffset;                                 		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   BackgroundOffset;                                 		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bReverse : 1;                                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSmoothInOut : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1523 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionGradient::pClassPointer = NULL;

// Class Engine.MaterialExpressionIf
// 0x008C (0x00D0 - 0x0044)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            AGreaterThanB;                                    		// 0x007C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            AEqualsB;                                         		// 0x0098 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            ALessThanB;                                       		// 0x00B4 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1525 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionIf::pClassPointer = NULL;

// Class Engine.MaterialExpressionLength
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionLength : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1527 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLength::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1529 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareIntensity::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1531 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareOcclusion::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1533 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareRadialDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1535 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareRayDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1537 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLensFlareSourceDistance::pClassPointer = NULL;

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1539 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLightmapUVs::pClassPointer = NULL;

// Class Engine.MaterialExpressionLightmassReplace
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                         		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Lightmass;                                        		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1541 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLightmassReplace::pClassPointer = NULL;

// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1543 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLightVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0054 (0x0098 - 0x0044)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x007C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1545 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLinearInterpolate::pClassPointer = NULL;

// Class Engine.MaterialExpressionLog
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionLog : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1547 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLog::pClassPointer = NULL;

// Class Engine.MaterialExpressionLog10
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionLog10 : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1549 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLog10::pClassPointer = NULL;

// Class Engine.MaterialExpressionLog2
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionLog2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1551 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionLog2::pClassPointer = NULL;

// Class Engine.MaterialExpressionMax
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1553 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMax::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1555 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMeshEmitterVertexColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionMin
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1557 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMin::pClassPointer = NULL;

// Class Engine.MaterialExpressionMultiply
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1559 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMultiply::pClassPointer = NULL;

// Class Engine.MaterialExpressionMultiplyAndAdd
// 0x0054 (0x0098 - 0x0044)
class UMaterialExpressionMultiplyAndAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            WeightB;                                          		// 0x007C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1561 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMultiplyAndAdd::pClassPointer = NULL;

// Class Engine.MaterialExpressionNormalize
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                      		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1563 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionNormalize::pClassPointer = NULL;

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1565 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionObjectOrientation::pClassPointer = NULL;

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1567 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionObjectRadius::pClassPointer = NULL;

// Class Engine.MaterialExpressionObjectWorldPosition
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionObjectWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1569 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionObjectWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionOcclusionPercentage
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionOcclusionPercentage : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1571 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionOcclusionPercentage::pClassPointer = NULL;

// Class Engine.MaterialExpressionOneMinus
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1573 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionOneMinus::pClassPointer = NULL;

// Class Engine.MaterialExpressionPanner
// 0x0040 (0x0084 - 0x0044)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0060 (0x001C) [0x0000000000000000]              
	float                                              SpeedX;                                           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedY;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1575 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPanner::pClassPointer = NULL;

// Class Engine.MaterialExpressionParameter
// 0x0018 (0x005C - 0x0044)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x004C (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1577 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionScalarParameter
// 0x0004 (0x0060 - 0x005C)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1579 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionScalarParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0024 (0x0080 - 0x005C)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                            		// 0x005C (0x001C) [0x0000000000000000]              
	unsigned long                                      DefaultR : 1;                                     		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DefaultG : 1;                                     		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      DefaultB : 1;                                     		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DefaultA : 1;                                     		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FPointer                                    InstanceOverride;                                 		// 0x007C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1581 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionStaticComponentMaskParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0040 (0x009C - 0x005C)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ExtendedCaptionDisplay : 1;                       		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FExpressionInput                            A;                                                		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x007C (0x001C) [0x0000000000000000]              
	struct FPointer                                    InstanceOverride;                                 		// 0x0098 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1583 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionStaticSwitchParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x006C - 0x005C)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                     		// 0x005C (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1585 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionVectorParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:
	unsigned long                                      bUseViewSpace : 1;                                		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1587 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionParticleMacroUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1589 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPerInstanceRandom::pClassPointer = NULL;

// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1591 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPixelDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionPower
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Exponent;                                         		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1593 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionPower::pClassPointer = NULL;

// Class Engine.MaterialExpressionRadians
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionRadians : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1595 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionRadians::pClassPointer = NULL;

// Class Engine.MaterialExpressionRecipSquareRoot
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionRecipSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1597 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionRecipSquareRoot::pClassPointer = NULL;

// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1599 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionReflectionVector::pClassPointer = NULL;

// Class Engine.MaterialExpressionRotate3D
// 0x0074 (0x00B8 - 0x0044)
class UMaterialExpressionRotate3D : public UMaterialExpression
{
public:
	struct FExpressionInput                            Vec;                                              		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            MatrixForward;                                    		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            MatrixRight;                                      		// 0x007C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            MatrixUp;                                         		// 0x0098 (0x001C) [0x0000000000000000]              
	unsigned long                                      bTranspose : 1;                                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1601 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionRotate3D::pClassPointer = NULL;

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0054 (0x0098 - 0x0044)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxisAndAngle;                   		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            PositionOnAxis;                                   		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Position;                                         		// 0x007C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1603 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionRotateAboutAxis::pClassPointer = NULL;

// Class Engine.MaterialExpressionRotator
// 0x0044 (0x0088 - 0x0044)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0060 (0x001C) [0x0000000000000000]              
	float                                              CenterX;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterY;                                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1605 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionRotator::pClassPointer = NULL;

// Class Engine.MaterialExpressionSaturate
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1607 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSaturate::pClassPointer = NULL;

// Class Engine.MaterialExpressionSceneDepth
// 0x0020 (0x0064 - 0x0044)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0044 (0x001C) [0x0000000000000000]              
	unsigned long                                      bNormalize : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1609 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSceneDepth::pClassPointer = NULL;

// Class Engine.MaterialExpressionSceneTexture
// 0x0024 (0x0068 - 0x0044)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0044 (0x001C) [0x0000000000000000]              
	unsigned char                                      SceneTextureType;                                 		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ScreenAlign : 1;                                  		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1611 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSceneTexture::pClassPointer = NULL;

// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                  		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1613 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionScreenPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionSine
// 0x0020 (0x0064 - 0x0044)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1615 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSine::pClassPointer = NULL;

// Class Engine.MaterialExpressionSphereMask
// 0x0078 (0x00BC - 0x0044)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Radius;                                           		// 0x007C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Hardness;                                         		// 0x0098 (0x001C) [0x0000000000000000]              
	float                                              AttenuationRadius;                                		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HardnessPercent;                                  		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1617 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSphereMask::pClassPointer = NULL;

// Class Engine.MaterialExpressionSPHFluidNormal
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionSPHFluidNormal : public UMaterialExpression
{
public:
	class UTexture*                                    DefaultTexture;                                   		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1619 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSPHFluidNormal::pClassPointer = NULL;

// Class Engine.MaterialExpressionSPHFluidThickness
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionSPHFluidThickness : public UMaterialExpression
{
public:
	class UTexture*                                    DefaultTexture;                                   		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1621 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSPHFluidThickness::pClassPointer = NULL;

// Class Engine.MaterialExpressionSPHFluidVertexColor
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionSPHFluidVertexColor : public UMaterialExpression
{
public:
	class UTexture*                                    DefaultTexture;                                   		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1623 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSPHFluidVertexColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionSquareRoot
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1625 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSquareRoot::pClassPointer = NULL;

// Class Engine.MaterialExpressionSteepParallaxOffset
// 0x0028 (0x006C - 0x0044)
class UMaterialExpressionSteepParallaxOffset : public UMaterialExpression
{
public:
	class UTexture2D*                                  ParallaxTexture;                                  		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSteps;                                         		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSmoothAndUnlit : 1;                              		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FExpressionInput                            HeightScaleInput;                                 		// 0x0050 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1627 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSteepParallaxOffset::pClassPointer = NULL;

// Class Engine.MaterialExpressionSubtract
// 0x0038 (0x007C - 0x0044)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1629 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSubtract::pClassPointer = NULL;

// Class Engine.MaterialExpressionSwizzle
// 0x0028 (0x006C - 0x0044)
class UMaterialExpressionSwizzle : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FString                                     SwizzleMask;                                      		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1631 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSwizzle::pClassPointer = NULL;

// Class Engine.MaterialExpressionTangent
// 0x001C (0x0060 - 0x0044)
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1633 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTangent::pClassPointer = NULL;

// Class Engine.MaterialExpressionTerrainLayerCoords
// 0x0014 (0x0058 - 0x0044)
class UMaterialExpressionTerrainLayerCoords : public UMaterialExpression
{
public:
	unsigned char                                      MappingType;                                      		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingScale;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingRotation;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanU;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanV;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1635 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTerrainLayerCoords::pClassPointer = NULL;

// Class Engine.MaterialExpressionTerrainLayerWeight
// 0x0058 (0x009C - 0x0044)
class UMaterialExpressionTerrainLayerWeight : public UMaterialExpression
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x0044 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FExpressionInput                            Base;                                             		// 0x0048 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Layer;                                            		// 0x0064 (0x001C) [0x0000000000000000]              
	struct FName                                       ParameterName;                                    		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewWeight;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x008C (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1637 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTerrainLayerWeight::pClassPointer = NULL;

// Class Engine.MaterialExpressionTerrainTextureCoordinate
// 0x0009 (0x004D - 0x0044)
class UMaterialExpressionTerrainTextureCoordinate : public UMaterialExpression
{
public:
	unsigned long                                      WeightMap : 1;                                    		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                LayerIndex;                                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LayerProjection;                                  		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1639 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTerrainTextureCoordinate::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0054 - 0x0044)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                  		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UTiling;                                          		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VTiling;                                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UnMirrorU : 1;                                    		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UnMirrorV : 1;                                    		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1641 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureCoordinate::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureDimensions
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionTextureDimensions : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1643 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureDimensions::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSample
// 0x0020 (0x0064 - 0x0044)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Coordinates;                                      		// 0x0048 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1645 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0024 (0x0088 - 0x0064)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Bias;                                             		// 0x006C (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1647 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionDepthBiasBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1649 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionFlipBookSample::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1651 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMeshSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionMeshSubUVBlend
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionMeshSubUVBlend : public UMaterialExpressionMeshSubUV
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1653 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionMeshSubUVBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x0064 - 0x0064)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1655 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionParticleSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0018 (0x007C - 0x0064)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x006C (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1657 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameter::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1659 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameter2D::pClassPointer = NULL;

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0005 (0x0081 - 0x007C)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Channel;                                          		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1661 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionAntialiasedTextureMask::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionTextureSampleParameterMeshSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1663 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterMeshSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionTextureSampleParameterMeshSubUVBlend : public UMaterialExpressionTextureSampleParameterMeshSubUV
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1665 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterMeshSubUVBlend::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1667 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterSubUV::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1669 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterCube::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x007C - 0x007C)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1671 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterMovie::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSampleParameterNormal
// 0x0004 (0x0080 - 0x007C)
class UMaterialExpressionTextureSampleParameterNormal : public UMaterialExpressionTextureSampleParameter
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x007C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1673 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSampleParameterNormal::pClassPointer = NULL;

// Class Engine.MaterialExpressionTextureSplat
// 0x005C (0x00A0 - 0x0044)
class UMaterialExpressionTextureSplat : public UMaterialExpression
{
public:
	class UTexture*                                    BackdropTexture;                                  		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    OverlayTexture;                                   		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            UVs;                                              		// 0x004C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Offset;                                           		// 0x0068 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            Scale;                                            		// 0x0084 (0x001C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1675 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTextureSplat::pClassPointer = NULL;

// Class Engine.MaterialExpressionTime
// 0x0004 (0x0048 - 0x0044)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                 		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1677 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTime::pClassPointer = NULL;

// Class Engine.MaterialExpressionTransform
// 0x001E (0x0062 - 0x0044)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	unsigned char                                      TransformSourceType;                              		// 0x0060 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      TransformType;                                    		// 0x0061 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1679 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTransform::pClassPointer = NULL;

// Class Engine.MaterialExpressionTransformPosition
// 0x001D (0x0061 - 0x0044)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0044 (0x001C) [0x0000000000000000]              
	unsigned char                                      TransformType;                                    		// 0x0060 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1681 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTransformPosition::pClassPointer = NULL;

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1683 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionTwoSidedSign::pClassPointer = NULL;

// Class Engine.MaterialExpressionVectorIf
// 0x0071 (0x00B5 - 0x0044)
class UMaterialExpressionVectorIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0044 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0060 (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            IfTrue;                                           		// 0x007C (0x001C) [0x0000000000000000]              
	struct FExpressionInput                            IfFalse;                                          		// 0x0098 (0x001C) [0x0000000000000000]              
	unsigned char                                      CompareFunc;                                      		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1685 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionVectorIf::pClassPointer = NULL;

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1687 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionVertexColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionWindDirectionAndSpeed
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionWindDirectionAndSpeed : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1689 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionWindDirectionAndSpeed::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldAmbientColor
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionWorldAmbientColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1691 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionWorldAmbientColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldLightColor
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionWorldLightColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1693 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionWorldLightColor::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldNormal
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionWorldNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1695 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionWorldNormal::pClassPointer = NULL;

// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x0044 - 0x0044)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1697 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionWorldPosition::pClassPointer = NULL;

// Class Engine.MaterialInstance
// 0x0057 (0x00A0 - 0x0049)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Parent;                                           		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  PhysMaterialMask;                                 		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PhysMaterialMaskUVChannel;                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                            		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHasStaticPermutationResource : 1;                		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStaticPermutationDirty : 1;                      		// 0x0064 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )
	unsigned long                                      ReentrantFlag : 1;                                		// 0x0064 (0x0004) [0x0000000000001002] [0x00000004] ( CPF_Const | CPF_Native )
	unsigned long                                      bNeedsMaterialFlattening : 1;                     		// 0x0064 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	struct FPointer                                    StaticParameters[ 0x2 ];                          		// 0x0068 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    StaticPermutationResources[ 0x2 ];                		// 0x0070 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Resources[ 0x3 ];                                 		// 0x0078 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x0084 (0x000C) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	struct FGuid                                       ParentLightingGuid;                               		// 0x0090 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1699 ];

		return pClassPointer;
	};

	bool IsInMapOrTransientPackage ( );
	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

UClass* UMaterialInstance::pClassPointer = NULL;

// Class Engine.MaterialInstanceConstant
// 0x0030 (0x00D0 - 0x00A0)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray< struct FFontParameterValue >               FontParameterValues;                              		// 0x00A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FScalarParameterValue >             ScalarParameterValues;                            		// 0x00AC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTextureParameterValue >            TextureParameterValues;                           		// 0x00B8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVectorParameterValue >             VectorParameterValues;                            		// 0x00C4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1701 ];

		return pClassPointer;
	};

	void Behavior_SetObjectParameterValue ( int* Section, struct FName* ParameterName, class UObject** Value );
	void Behavior_SetFloatParameterValue ( int* Section, struct FName* ParameterName, float* Value );
	void Behavior_SetColorParameterValue ( int* Section, struct FName* ParameterName, struct FLinearColor* Value );
	void Behavior_SetVectorParameterValue ( int* Section, struct FName* ParameterName, struct FVector* Value );
	bool Behavior_GetColorParameterValue ( int* Section, struct FName* ParameterName, struct FLinearColor* OutValue );
	bool Behavior_GetVectorParameterValue ( int* Section, struct FName* ParameterName, struct FVector* OutValue );
	bool Behavior_GetFloatParameterValue ( int* Section, struct FName* ParameterName, float* OutValue );
	bool Behavior_GetObjectParameterValue ( int* Section, struct FName* ParameterName, class UObject** OutValue );
	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

UClass* UMaterialInstanceConstant::pClassPointer = NULL;

// Class Engine.MaterialInstanceTimeVarying
// 0x0038 (0x00D8 - 0x00A0)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Duration;                                         		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFontParameterValueOverTime >       FontParameterValues;                              		// 0x00A8 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FScalarParameterValueOverTime >     ScalarParameterValues;                            		// 0x00B4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTextureParameterValueOverTime >    TextureParameterValues;                           		// 0x00C0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVectorParameterValueOverTime >     VectorParameterValues;                            		// 0x00CC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1703 ];

		return pClassPointer;
	};

	float GetMaxDurationFromAllParameters ( );
	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorStartTime ( struct FName ParameterName, float Value );
	void SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetDuration ( float Value );
	void SetScalarStartTime ( struct FName ParameterName, float Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

UClass* UMaterialInstanceTimeVarying::pClassPointer = NULL;

// Class Engine.Emitter
// 0x000C (0x0194 - 0x0188)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x018C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDestroyOnSystemFinish : 1;                       		// 0x0190 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPostUpdateTickGroup : 1;                         		// 0x0190 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAudioEnabled : 1;                                		// 0x0190 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0190 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1705 ];

		return pClassPointer;
	};

	void Behavior_Destroy ( );
	void HideSelf ( );
	void ApplyCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void ShutDown ( );
	void OnParticleEventGenerator ( class USeqAct_ParticleEventGenerator* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

UClass* AEmitter::pClassPointer = NULL;

// Class Engine.EmitterCameraLensEffectBase
// 0x0024 (0x01B8 - 0x0194)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                  		// 0x0194 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                 		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              BaseFOV;                                          		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              DistFromCamera;                                   		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowMultipleInstances : 1;                      		// 0x01A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< class UClass* >                            EmittersToTreatAsSame;                            		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACamera*                                     BaseCamera;                                       		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1707 ];

		return pClassPointer;
	};

	void UpdateLocation ( float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot );
	void ActivateLensEffect ( );
	void PostBeginPlay ( );
	void NotifyRetriggered ( );
	void RegisterCamera ( class ACamera* C );
	void Destroyed ( );
};

UClass* AEmitterCameraLensEffectBase::pClassPointer = NULL;

// Class Engine.ParticleEventManager
// 0x0000 (0x0188 - 0x0188)
class AParticleEventManager : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1709 ];

		return pClassPointer;
	};

	void eventHandleParticleModuleEventSendToGame ( class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName );
};

UClass* AParticleEventManager::pClassPointer = NULL;

// Class Engine.ParticleSystemComponent
// 0x0114 (0x0324 - 0x0210)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                         		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      LightEnvironmentClass;                            		// 0x0214 (0x0004) [0x0000000000000000]              
	class AActor*                                      LightEnvironmentSharedInstigator;                 		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxLightEnvironmentPooledReuses;                  		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPointer >                          EmitterInstances;                                 		// 0x0220 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UStaticMeshComponent* >              SMComponents;                                     		// 0x022C (0x000C) [0x000000000468200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInterface* >                SMMaterialInterfaces;                             		// 0x0238 (0x000C) [0x0000000000602002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USkeletalMeshComponent* >            SkelMeshComponents;                               		// 0x0244 (0x000C) [0x000000000468200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FViewParticleEmitterInstanceMotionBlurInfo > ViewMBInfoArray;                                  		// 0x0250 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bFullResolution : 1;                              		// 0x025C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoActivate : 1;                                		// 0x025C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bWasCompleted : 1;                                		// 0x025C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSuppressSpawning : 1;                            		// 0x025C (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bWasDeactivated : 1;                              		// 0x025C (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bResetOnDetach : 1;                               		// 0x025C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUpdateOnDedicatedServer : 1;                     		// 0x025C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bJustAttached : 1;                                		// 0x025C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bIsActive : 1;                                    		// 0x025C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bHasBeenActivated : 1;                            		// 0x025C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bWarmingUp : 1;                                   		// 0x025C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIsCachedInPool : 1;                              		// 0x025C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanBeReclaimedByPool : 1;                        		// 0x025C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bOverrideLODMethod : 1;                           		// 0x025C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;             		// 0x025C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bSkipBoundsUpdate : 1;                            		// 0x025C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bUpdateComponentInTick : 1;                       		// 0x025C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bDeferredBeamUpdate : 1;                          		// 0x025C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bIgnoreCollision : 1;                             		// 0x025C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bForcedInActive : 1;                              		// 0x025C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bIsWarmingUp : 1;                                 		// 0x025C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bIsViewRelevanceDirty : 1;                        		// 0x025C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bRecacheViewRelevance : 1;                        		// 0x025C (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bLODUpdatePending : 1;                            		// 0x025C (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bSkipSpawnCountCheck : 1;                         		// 0x025C (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      AudioEnabled : 1;                                 		// 0x025C (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bStartEventPlayed : 1;                            		// 0x025C (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bCheckForKillWhileIdle : 1;                       		// 0x025C (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x0260 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     OldPosition;                                      		// 0x026C (0x000C) [0x0000000000000000]              
	struct FVector                                     PartSysVelocity;                                  		// 0x0278 (0x000C) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                LODLevel;                                         		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SecondsBeforeInactive;                            		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeSinceLastForceUpdateTransform;                		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxTimeBeforeForceUpdateTransform;                		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              AccumTickTime;                                    		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LODMethod;                                        		// 0x029C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ReplayState;                                      		// 0x029D (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FMaterialViewRelevance >            CachedViewRelevanceFlags;                         		// 0x02A0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UParticleSystemReplay* >             ReplayClips;                                      		// 0x02AC (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	int                                                ReplayClipIDNumber;                               		// 0x02B8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ReplayFrameIndex;                                 		// 0x02BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              AccumLODDistanceCheckTime;                        		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FParticleEventSpawnData >           SpawnEvents;                                      		// 0x02C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventDeathData >           DeathEvents;                                      		// 0x02D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventCollideData >         CollisionEvents;                                  		// 0x02DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventTraceData >           TraceEvents;                                      		// 0x02E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventKismetData >          KismetEvents;                                     		// 0x02F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0300 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              CustomTimeDilation;                               		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDelay;                                     		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AudioEventDelay;                                  		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAkPlayingInfo                              LoopingAkPlayingInfo;                             		// 0x0310 (0x0008) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                     		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1711 ];

		return pClassPointer;
	};

	void Behavior_ChangeParticleSystemActiveState ( unsigned char ChangeType );
	void Behavior_SetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* Value );
	void Behavior_SetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Value );
	void Behavior_SetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** Value );
	void Behavior_SetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* Value );
	bool Behavior_GetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** Value );
	bool Behavior_GetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* Value );
	bool Behavior_GetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Value );
	bool Behavior_GetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* Value );
	void SetStopSpawning ( int InEmitterIndex, unsigned long bInStopSpawning );
	void ResetToDefaults ( );
	void SetActive ( unsigned long bNowActive, unsigned long bFlagAsJustAttached );
	void ClearParameter ( struct FName ParameterName, unsigned char ParameterType );
	bool GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial );
	bool GetActorParameter ( struct FName InName, class AActor** OutActor );
	bool GetColorParameter ( struct FName InName, struct FColor* OutColor );
	bool GetVectorParameter ( struct FName InName, struct FVector* OutVector );
	bool GetFloatParameter ( struct FName InName, float* OutFloat );
	void SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorRandParameter ( struct FName ParameterName, struct FVector* Param, struct FVector* ParamLow );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatRandParameter ( struct FName ParameterName, float Param, float ParamLow );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	int GetEditorLODLevel ( );
	int GetLODLevel ( );
	void SetEditorLODLevel ( int InLODLevel );
	void SetLODLevel ( int InLODLevel );
	bool SystemHasCompleted ( );
	float GetMaxLifespan ( );
	int DetermineLODLevelForLocation ( struct FVector* EffectLocation );
	void SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex );
	void SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex );
	void SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex );
	void SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex );
	void SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex );
	void SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex );
	void SetBeamDistance ( int EmitterIndex, float Distance );
	void SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint );
	void SetBeamTessellationFactor ( int EmitterIndex, float NewFactor );
	void SetBeamType ( int EmitterIndex, int NewMethod );
	void RewindEmitterInstances ( );
	void RewindEmitterInstance ( int EmitterIndex );
	void SetKillOnCompleted ( int EmitterIndex, unsigned long bKill );
	void SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill );
	bool GetSkipBoundsUpdate ( );
	void SetSkipBoundsUpdate ( unsigned long bInSkipBoundsUpdate );
	bool GetSkipUpdateDynamicDataDuringTick ( );
	void SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick );
	void KillParticlesInEmitter ( struct FName InEmitterName );
	void KillParticlesForced ( );
	void DeactivateSystem ( );
	void ActivateSystem ( unsigned long bFlagAsJustAttached );
	void SetTemplate ( class UParticleSystem* NewTemplate );
	void OnSystemFinished ( class UParticleSystemComponent* PSystem );
};

UClass* UParticleSystemComponent::pClassPointer = NULL;

// Class Engine.DistributionFloatParticleParameter
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1713 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatParticleParameter::pClassPointer = NULL;

// Class Engine.DistributionVectorParticleParameter
// 0x0001 (0x00A0 - 0x009F)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1715 ];

		return pClassPointer;
	};

};

UClass* UDistributionVectorParticleParameter::pClassPointer = NULL;

// Class Engine.ParticleEmitter
// 0x002C (0x0068 - 0x003C)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                      		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubUVDataOffset;                                  		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      EmitterRenderMode;                                		// 0x0048 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleLODLevel* >                 LODLevels;                                        		// 0x004C (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      ConvertedModules : 1;                             		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCollapsed : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsSoloing : 1;                                   		// 0x0058 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCookedOut : 1;                                   		// 0x0058 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                PeakActiveParticles;                              		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                InitialAllocationCount;                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MediumDetailSpawnRateScale;                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1717 ];

		return pClassPointer;
	};

	float GetMaxLifespan ( float InComponentDelay );
};

UClass* UParticleEmitter::pClassPointer = NULL;

// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x0068 - 0x0068)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1719 ];

		return pClassPointer;
	};

};

UClass* UParticleSpriteEmitter::pClassPointer = NULL;

// Class Engine.ParticleLODLevel
// 0x0064 (0x00A0 - 0x003C)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                            		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleModuleRequired*                     RequiredModule;                                   		// 0x0044 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleModule* >                   Modules;                                          		// 0x0048 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleModule*                             TypeDataModule;                                   		// 0x0054 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleSpawn*                        SpawnModule;                                      		// 0x0058 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleEventGenerator*               EventGenerator;                                   		// 0x005C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModuleSpawnBase* >          SpawningModules;                                  		// 0x0060 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   SpawnModules;                                     		// 0x006C (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   UpdateModules;                                    		// 0x0078 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleOrbit* >              OrbitModules;                                     		// 0x0084 (0x000C) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleEventReceiverBase* >  EventReceiverModules;                             		// 0x0090 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                PeakActiveParticles;                              		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1721 ];

		return pClassPointer;
	};

};

UClass* UParticleLODLevel::pClassPointer = NULL;

// Class Engine.ParticleModule
// 0x0005 (0x0041 - 0x003C)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateModule : 1;                                		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFinalUpdateModule : 1;                           		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCurvesAsColor : 1;                               		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      b3DDrawMode : 1;                                  		// 0x003C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSupported3DDrawMode : 1;                         		// 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bEnabled : 1;                                     		// 0x003C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEditable : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      LODDuplicate : 1;                                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bSupportsRandomSeed : 1;                          		// 0x003C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRequiresLoopingNotification : 1;                 		// 0x003C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned char                                      LODValidity;                                      		// 0x0040 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1723 ];

		return pClassPointer;
	};

};

UClass* UParticleModule::pClassPointer = NULL;

// Class Engine.ParticleModuleAccelerationBase
// 0x0007 (0x0048 - 0x0041)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned long                                      bAlwaysInWorldSpace : 1;                          		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1725 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleAccelerationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleAcceleration
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                     		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bApplyOwnerScale : 1;                             		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1727 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleAcceleration::pClassPointer = NULL;

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x001C (0x0064 - 0x0048)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                    		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1729 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleAccelerationOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1731 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorBase::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorLine
// 0x0050 (0x0094 - 0x0044)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                        		// 0x0044 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndPoint1;                                        		// 0x0050 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Range;                                            		// 0x005C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x0078 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1733 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorLine::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorParticle
// 0x004C (0x0090 - 0x0044)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0044 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	struct FRawDistributionFloat                       Range;                                            		// 0x004C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bStrengthByDistance : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenewSource : 1;                                 		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInheritSourceVel : 1;                            		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      SelectionMethod;                                  		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSelIndex;                                     		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1735 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorParticle::pClassPointer = NULL;

// Class Engine.ParticleModuleAttractorPoint
// 0x0058 (0x009C - 0x0044)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                         		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Range;                                            		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x007C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      StrengthByDistance : 1;                           		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideVelocity : 1;                            		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseWorldSpacePosition : 1;                       		// 0x0098 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1737 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleAttractorPoint::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleBeamBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1739 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamBase::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamModifier
// 0x0068 (0x00AC - 0x0044)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	unsigned char                                      ModifierType;                                     		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FBeamModifierOptions                        PositionOptions;                                  		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Position;                                         		// 0x004C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBeamModifierOptions                        TangentOptions;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Tangent;                                          		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsoluteTangent : 1;                             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FBeamModifierOptions                        StrengthOptions;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x0090 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1741 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamModifier::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamNoise
// 0x00AC (0x00F0 - 0x0044)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                             		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNRScaleEmitterTime : 1;                          		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSmooth : 1;                                      		// 0x0044 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoiseLock : 1;                                   		// 0x0044 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bOscillate : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseNoiseTangents : 1;                            		// 0x0044 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTargetNoise : 1;                                 		// 0x0044 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bApplyNoiseScale : 1;                             		// 0x0044 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                Frequency;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Frequency_LowRange;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      NoiseRange;                                       		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       NoiseRangeScale;                                  		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      NoiseSpeed;                                       		// 0x0088 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              NoiseLockRadius;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseLockTime;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseTension;                                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseTangentStrength;                             		// 0x00B0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                NoiseTessellation;                                		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyDistance;                                		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseScale;                                       		// 0x00D4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1743 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamNoise::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamSource
// 0x0064 (0x00A8 - 0x0044)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceTangentMethod;                              		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSourceAbsolute : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockSource : 1;                                  		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockSourceTangent : 1;                           		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x0050 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      Source;                                           		// 0x0054 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      SourceTangent;                                    		// 0x0070 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x008C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1745 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamSource::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamTarget
// 0x0068 (0x00AC - 0x0044)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	unsigned char                                      TargetMethod;                                     		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetTangentMethod;                              		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetName;                                       		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Target;                                           		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bTargetAbsolute : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockTarget : 1;                                  		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockTargetTangent : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockTargetStength : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      TargetTangent;                                    		// 0x0070 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x008C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              LockRadius;                                       		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1747 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamTarget::pClassPointer = NULL;

// Class Engine.ParticleModuleBeamTrace
// 0x0030 (0x00DC - 0x00AC)
class UParticleModuleBeamTrace : public UParticleModuleBeamTarget
{
public:
	struct FVector                                     TraceExtent;                                      		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    TraceRotation;                                    		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceMaxDistance;                                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateDelay;                                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTraceEvents;                                   		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTraceWorld : 1;                                  		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTraceActors : 1;                                 		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTraceBlockers : 1;                               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTraceMaterials : 1;                              		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTraceProjectiles : 1;                            		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bTracePhysicsVolumes : 1;                         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTraceComplexCollision : 1;                       		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              LastDistance;                                     		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdateTime;                                   		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1749 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleBeamTrace::pClassPointer = NULL;

// Class Engine.ParticleModuleCameraBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleCameraBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1751 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleCameraBase::pClassPointer = NULL;

// Class Engine.ParticleModuleCameraOffset
// 0x0021 (0x0065 - 0x0044)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                     		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bSpawnTimeOnly : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UpdateMethod;                                     		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1753 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleCameraOffset::pClassPointer = NULL;

// Class Engine.ParticleModuleCollisionBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1755 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleCollisionBase::pClassPointer = NULL;

// Class Engine.ParticleModuleCollision
// 0x00A0 (0x00E4 - 0x0044)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                    		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      DampingFactorRotation;                            		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       MaxCollisions;                                    		// 0x007C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      CollisionCompletionOption;                        		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyPhysics : 1;                                		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                    		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;           		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDropDetail : 1;                                  		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCollideOnlyIfVisible : 1;                        		// 0x009C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FRawDistributionFloat                       ParticleMass;                                     		// 0x00A0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              DirScalar;                                        		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalFudgeFactor;                              		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       DelayAmount;                                      		// 0x00C4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              MaxCollisionDistance;                             		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1757 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleCollision::pClassPointer = NULL;

// Class Engine.ParticleModuleCollisionActor
// 0x0010 (0x00F4 - 0x00E4)
class UParticleModuleCollisionActor : public UParticleModuleCollision
{
public:
	TArray< struct FName >                             ActorsToCollideWith;                              		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCheckPawnCollisions : 1;                         		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1759 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleCollisionActor::pClassPointer = NULL;

// Class Engine.ParticleModuleColorBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleColorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1761 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColorBase::pClassPointer = NULL;

// Class Engine.ParticleModuleColor
// 0x003C (0x0080 - 0x0044)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                       		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1763 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColor::pClassPointer = NULL;

// Class Engine.ParticleModuleColor_Seeded
// 0x0018 (0x0098 - 0x0080)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0080 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1765 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColor_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleColorByParameter
// 0x000C (0x0050 - 0x0044)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                       		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DefaultColor;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1767 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColorByParameter::pClassPointer = NULL;

// Class Engine.ParticleModuleColorByParameterDynamic
// 0x0044 (0x0088 - 0x0044)
class UParticleModuleColorByParameterDynamic : public UParticleModuleColorBase
{
public:
	struct FName                                       RatioParam;                                       		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultRatio;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorScale;                                       		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaScale;                                       		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1769 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColorByParameterDynamic::pClassPointer = NULL;

// Class Engine.ParticleModuleColorOverLife
// 0x003C (0x0080 - 0x0044)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1771 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColorOverLife::pClassPointer = NULL;

// Class Engine.ParticleModuleColorScaleOverDensity
// 0x0038 (0x007C - 0x0044)
class UParticleModuleColorScaleOverDensity : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverDensity;                            		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaScaleOverDensity;                            		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1773 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColorScaleOverDensity::pClassPointer = NULL;

// Class Engine.ParticleModuleColorScaleOverLife
// 0x003C (0x0080 - 0x0044)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bEmitterTime : 1;                                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1775 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleColorScaleOverLife::pClassPointer = NULL;

// Class Engine.ParticleModuleEventBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleEventBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1777 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleEventBase::pClassPointer = NULL;

// Class Engine.ParticleModuleEventGenerator
// 0x000C (0x0050 - 0x0044)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray< struct FParticleEvent_GenerateInfo >       Events;                                           		// 0x0044 (0x000C) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1779 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleEventGenerator::pClassPointer = NULL;

// Class Engine.ParticleModuleEventGeneratorDecal
// 0x0030 (0x0080 - 0x0050)
class UParticleModuleEventGeneratorDecal : public UParticleModuleEventGenerator
{
public:
	TArray< class UMaterialInterface* >                DecalMaterials;                                   		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DecalWidth;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalHeight;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SizeVariance;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalThickness;                                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalLifeSpan;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalDepthBias;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   DecalBlendRange;                                  		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoClip : 1;                                      		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1781 ];

		return pClassPointer;
	};

	void eventSpawnDecal ( class AActor* HitActor, class UPrimitiveComponent* HitComponent, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* UParticleModuleEventGeneratorDecal::pClassPointer = NULL;

// Class Engine.ParticleModuleEventReceiverBase
// 0x000C (0x0050 - 0x0044)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	unsigned char                                      EventGeneratorType;                               		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1783 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleEventReceiverBase::pClassPointer = NULL;

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0004 (0x0054 - 0x0050)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned long                                      bStopSpawning : 1;                                		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1785 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleEventReceiverKillParticles::pClassPointer = NULL;

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x003C (0x008C - 0x0050)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                       		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bUseParticleTime : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsePSysLocation : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInheritVelocity : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInheritRotation : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      InheritVelocityScale;                             		// 0x0070 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1787 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleEventReceiverSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleForceFieldBase
// 0x0007 (0x0048 - 0x0041)
class UParticleModuleForceFieldBase : public UParticleModule
{
public:
	class UNxForceFieldComponent*                      ForceField;                                       		// 0x0044 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1789 ];

		return pClassPointer;
	};

	class UNxForceFieldComponent* eventGetForceFieldInstance ( struct FVector Location );
};

UClass* UParticleModuleForceFieldBase::pClassPointer = NULL;

// Class Engine.ParticleModuleKillBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleKillBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1791 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleKillBase::pClassPointer = NULL;

// Class Engine.ParticleModuleKillBox
// 0x003C (0x0080 - 0x0044)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillInside : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1793 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleKillBox::pClassPointer = NULL;

// Class Engine.ParticleModuleKillHeight
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                           		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFloor : 1;                                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyPSysScale : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1795 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleKillHeight::pClassPointer = NULL;

// Class Engine.ParticleModuleLifetimeBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1797 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLifetimeBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLifetime
// 0x001C (0x0060 - 0x0044)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1799 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0018 (0x0078 - 0x0060)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0060 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1801 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLifetime_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleLocationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1803 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLocation
// 0x001C (0x0060 - 0x0044)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1805 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocation::pClassPointer = NULL;

// Class Engine.ParticleModuleLocation_Seeded
// 0x0018 (0x0078 - 0x0060)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0060 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1807 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocation_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0028 (0x006C - 0x0044)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	unsigned char                                      SourceType;                                       		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UniversalOffset;                                  		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLocationBoneSocketInfo >           SourceLocations;                                  		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUpdatePositionEachFrame : 1;                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientMeshEmitters : 1;                          		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FName                                       SkelMeshActorParamName;                           		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1809 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationBoneSocket::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationDirect
// 0x0070 (0x00B4 - 0x0044)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                         		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LocationOffset;                                   		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ScaleFactor;                                      		// 0x007C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      Direction;                                        		// 0x0098 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1811 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationEmitter
// 0x0018 (0x005C - 0x0044)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0044 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      SelectionMethod;                                  		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      InheritSourceVelocity : 1;                        		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritSourceRotation : 1;                       		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              InheritSourceVelocityScale;                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InheritSourceRotationScale;                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1813 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationEmitter::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x004C - 0x0044)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0044 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1815 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationEmitterDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x003C (0x0080 - 0x0044)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Positive_Y : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Positive_Z : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Negative_X : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      Negative_Y : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      Negative_Z : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SurfaceOnly : 1;                                  		// 0x0044 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      Velocity : 1;                                     		// 0x0044 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FRawDistributionFloat                       VelocityScale;                                    		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1817 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveBase::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x003D (0x00BD - 0x0080)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                               		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x0084 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartHeight;                                      		// 0x00A0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      HeightAxis;                                       		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1819 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveCylinder::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x001B (0x00D8 - 0x00BD)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x00C0 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1821 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveCylinder_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x001C (0x009C - 0x0080)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x0080 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1823 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveSphere::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0018 (0x00B4 - 0x009C)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x009C (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1825 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationPrimitiveSphere_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0048 (0x008C - 0x0044)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	unsigned char                                      SourceType;                                       		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UniversalOffset;                                  		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUpdatePositionEachFrame : 1;                     		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientMeshEmitters : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnforceNormalCheck : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       SkelMeshActorParamName;                           		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ValidAssociatedBones;                             		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     NormalToCompare;                                  		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckToleranceDegrees;                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckTolerance;                             		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< int >                                      ValidMaterialIndices;                             		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1827 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleLocationSkelVertSurface::pClassPointer = NULL;

// Class Engine.ParticleModuleSourceMovement
// 0x001C (0x0060 - 0x0044)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                              		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1829 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSourceMovement::pClassPointer = NULL;

// Class Engine.ParticleModuleMaterialBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1831 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMaterialBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMaterialByParameter
// 0x0018 (0x005C - 0x0044)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray< struct FName >                             MaterialParameters;                               		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                DefaultMaterials;                                 		// 0x0050 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1833 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMaterialByParameter::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshMaterial
// 0x000C (0x0050 - 0x0044)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray< class UMaterialInterface* >                MeshMaterials;                                    		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1835 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshMaterial::pClassPointer = NULL;

// Class Engine.ParticleModuleOrbitBase
// 0x0007 (0x0048 - 0x0041)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1837 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleOrbitBase::pClassPointer = NULL;

// Class Engine.ParticleModuleOrbit
// 0x0064 (0x00AC - 0x0048)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	unsigned char                                      ChainMode;                                        		// 0x0048 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      OffsetAmount;                                     		// 0x004C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               OffsetOptions;                                    		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationAmount;                                   		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               RotationOptions;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationRateAmount;                               		// 0x008C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               RotationRateOptions;                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1839 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleOrbit::pClassPointer = NULL;

// Class Engine.ParticleModuleOrientationBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1841 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleOrientationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0045 - 0x0044)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	unsigned char                                      LockAxisFlags;                                    		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1843 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleOrientationAxisLock::pClassPointer = NULL;

// Class Engine.ParticleModuleParameterBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleParameterBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1845 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleParameterBase::pClassPointer = NULL;

// Class Engine.ParticleModuleParameterDynamic
// 0x0014 (0x0058 - 0x0044)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray< struct FEmitterDynamicParameter >          DynamicParams;                                    		// 0x0044 (0x000C) [0x0000000000480041]              ( CPF_Edit | CPF_EditConstArray | CPF_Component | CPF_NeedCtorLink )
	int                                                UpdateFlags;                                      		// 0x0050 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUsesVelocity : 1;                                		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1847 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleParameterDynamic::pClassPointer = NULL;

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0018 (0x0070 - 0x0058)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0058 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1849 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleParameterDynamic_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleRequired
// 0x007F (0x00C0 - 0x0041)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScreenAlignment;                                  		// 0x0048 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SortMode;                                         		// 0x0049 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleBurstMethod;                              		// 0x004A (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpolationMethod;                              		// 0x004B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EmitterNormalsMode;                               		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillOnDeactivate : 1;                            		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRequiresSorting : 1;                             		// 0x0050 (0x0004) [0x0000000020000000] [0x00000008] ( CPF_Deprecated )
	unsigned long                                      bUseLegacyEmitterTime : 1;                        		// 0x0050 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEmitterDurationUseRange : 1;                     		// 0x0050 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDurationRecalcEachLoop : 1;                      		// 0x0050 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bEmitterDelayUseRange : 1;                        		// 0x0050 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDelayFirstLoopOnly : 1;                          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bScaleUV : 1;                                     		// 0x0050 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDirectUV : 1;                                    		// 0x0050 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bUseMaxDrawCount : 1;                             		// 0x0050 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	float                                              EmitterDuration;                                  		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDurationLow;                               		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EmitterLoops;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x0060 (0x001C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x007C (0x000C) [0x0000000002480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	float                                              EmitterDelay;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDelayLow;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Horizontal;                             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Vertical;                               		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomImageTime;                                  		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                RandomImageChanges;                               		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxDrawCount;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DownsampleThresholdScreenFraction;                		// 0x00A4 (0x0004) [0x0000000000000000]              
	struct FVector                                     NormalsSphereCenter;                              		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     NormalsCylinderDirection;                         		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1851 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRequired::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleRotationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1853 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotation
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1855 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotation::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0018 (0x007C - 0x0064)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0064 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1857 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotation_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleRotation
// 0x001C (0x0060 - 0x0044)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1859 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotation::pClassPointer = NULL;

// Class Engine.ParticleModuleRotation_Seeded
// 0x0018 (0x0078 - 0x0060)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0060 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1861 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotation_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                 		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Scale : 1;                                        		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncrement : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeTime : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1863 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRateBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1865 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationRateBase::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRate
// 0x001C (0x0060 - 0x0044)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1867 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotationRate::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0018 (0x0078 - 0x0060)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0060 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1869 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotationRate_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x001C (0x0060 - 0x0044)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1871 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotationRateMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                          		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bScaleRotRate : 1;                                		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1873 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleMeshRotationRateOverLife::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRate
// 0x001C (0x0060 - 0x0044)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1875 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationRate::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0018 (0x0078 - 0x0060)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0060 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1877 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationRate_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x001C (0x0060 - 0x0044)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                   		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1879 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleRotationRateMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleSizeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1881 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSize
// 0x001C (0x0060 - 0x0044)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                        		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1883 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSize::pClassPointer = NULL;

// Class Engine.ParticleModuleSize_Seeded
// 0x0018 (0x0078 - 0x0060)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0060 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1885 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSize_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1887 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeMultiplyLife::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                               		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1889 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeMultiplyVelocity::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeScale
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                        		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      EnableX : 1;                                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableY : 1;                                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableZ : 1;                                      		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1891 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeScale::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeScaleByTime
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleSizeScaleByTime : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleByTime;                                  		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bEnableX : 1;                                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableY : 1;                                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableZ : 1;                                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1893 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeScaleByTime::pClassPointer = NULL;

// Class Engine.ParticleModuleSizeScaleOverDensity
// 0x001C (0x0060 - 0x0044)
class UParticleModuleSizeScaleOverDensity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleOverDensity;                             		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1895 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSizeScaleOverDensity::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawnBase
// 0x0007 (0x0048 - 0x0041)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                            		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessBurstList : 1;                            		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1897 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSpawnBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawn
// 0x0048 (0x0090 - 0x0048)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                             		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       RateScale;                                        		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      ParticleBurstMethod;                              		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x0084 (0x000C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1899 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleSpawnPerUnit
// 0x002C (0x0074 - 0x0048)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnPerUnit;                                     		// 0x004C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                   		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreMovementAlongX : 1;                        		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreMovementAlongY : 1;                        		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreMovementAlongZ : 1;                        		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              MovementTolerance;                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFrameDistance;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1901 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSpawnPerUnit::pClassPointer = NULL;

// Class Engine.ParticleModuleStoreSpawnTimeBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleStoreSpawnTimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1903 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleStoreSpawnTimeBase::pClassPointer = NULL;

// Class Engine.ParticleModuleStoreSpawnTime
// 0x0000 (0x0044 - 0x0044)
class UParticleModuleStoreSpawnTime : public UParticleModuleStoreSpawnTimeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1905 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleStoreSpawnTime::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1907 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUVBase::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUV
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                    		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bUseRealTime : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1909 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUV::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVMovie
// 0x0024 (0x0088 - 0x0064)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       FrameRate;                                        		// 0x0068 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                StartingFrame;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1911 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUVMovie::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVDirect
// 0x0038 (0x007C - 0x0044)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                    		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      SubUVSize;                                        		// 0x0060 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1913 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUVDirect::pClassPointer = NULL;

// Class Engine.ParticleModuleSubUVSelect
// 0x001C (0x0060 - 0x0044)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                   		// 0x0044 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1915 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleSubUVSelect::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleTrailBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1917 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailBase::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailSource
// 0x003C (0x0080 - 0x0044)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritRotation : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                SourceOffsetCount;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           SourceOffsetDefaults;                             		// 0x0074 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1919 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailSource::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailSpawn
// 0x0008 (0x004C - 0x0044)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                 		// 0x0044 (0x0004) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	float                                              MinSpawnVelocity;                                 		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1921 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailSpawn::pClassPointer = NULL;

// Class Engine.ParticleModuleTrailTaper
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	unsigned char                                      TaperMethod;                                      		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1923 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTrailTaper::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBase
// 0x0003 (0x0044 - 0x0041)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1925 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataBase::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x001C (0x0060 - 0x0044)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	struct FName                                       ControlEdgeName;                                  		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SheetsPerTrail;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                      		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTangentRecalculationEveryFrame : 1;              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRenderGeometry : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRenderSpawnPoints : 1;                           		// 0x0050 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRenderTangents : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRenderTessellation : 1;                          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	float                                              TilingDistance;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceTessellationStepSize;                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentTessellationScalar;                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1927 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataAnimTrail::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataApex
// 0x0008 (0x004C - 0x0044)
class UParticleModuleTypeDataApex : public UParticleModuleTypeDataBase
{
public:
	class UApexGenericAsset*                           ApexIOFX;                                         		// 0x0044 (0x0004) [0x0000000000000000]              
	class UApexGenericAsset*                           ApexEmitter;                                      		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1929 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataApex::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBeam
// 0x009C (0x00E0 - 0x0044)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EndPointMethod;                                   		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      EndPoint;                                         		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                TessellationFactor;                               		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       EmitterStrength;                                  		// 0x0084 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00A0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      EndPointDirection;                                		// 0x00BC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                TextureTile;                                      		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x00DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1931 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataBeam::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataBeam2
// 0x0080 (0x00C4 - 0x0044)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TaperMethod;                                      		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextureTileDistance;                              		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxBeamCount;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InterpolationPoints;                              		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysOn : 1;                                    		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpawnPerUnitHack : 1;                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	int                                                UpVectorStepSize;                                 		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BranchParentName;                                 		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x0070 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x008C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperScale;                                       		// 0x00A8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1933 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataBeam2::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataMesh
// 0x0018 (0x005C - 0x0044)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                             		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CastShadows : 1;                                  		// 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      DoCollisions : 1;                                 		// 0x0048 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowMotionBlur : 1;                             		// 0x0048 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOverrideMaterial : 1;                            		// 0x0048 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCameraFacing : 1;                                		// 0x0048 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bApplyParticleRotationAsSpin : 1;                 		// 0x0048 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      MeshAlignment;                                    		// 0x004C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisLockOption;                                   		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CameraFacingUpAxisOption;                         		// 0x004E (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      CameraFacingOption;                               		// 0x004F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Pitch;                                            		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Roll;                                             		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Yaw;                                              		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1935 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataMesh::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0024 (0x0080 - 0x005C)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PhysXRotationMethod;                              		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidRotationCoefficient;                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0068 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZOffset;                                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SuppressIfLowGore : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1937 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataMeshPhysX::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataPhysX
// 0x0024 (0x0068 - 0x0044)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0048 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              SPHSmoothScreenRadius;                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SPHSmoothDepthRadius;                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SPHCutoffThickness;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SuppressIfLowGore : 1;                            		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1939 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataPhysX::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0028 (0x006C - 0x0044)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                  		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                SheetsPerTrail;                                   		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTrailCount;                                    		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                      		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnSourceLoss : 1;                      		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTangentRecalculationEveryFrame : 1;              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRenderGeometry : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRenderSpawnPoints : 1;                           		// 0x0054 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRenderTangents : 1;                              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bRenderTessellation : 1;                          		// 0x0054 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bEnableTangentDiffInterpScale : 1;                		// 0x0054 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned char                                      RenderAxis;                                       		// 0x0058 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentSpawningScalar;                            		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TilingDistance;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceTessellationStepSize;                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentTessellationScalar;                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1941 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataRibbon::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataTrail
// 0x0030 (0x0074 - 0x0044)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                               		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0044 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Tapered : 1;                                      		// 0x0044 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      SpawnByDistance : 1;                              		// 0x0044 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                TessellationFactor;                               		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Tension;                                          		// 0x004C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     SpawnDistance;                                    		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1943 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataTrail::pClassPointer = NULL;

// Class Engine.ParticleModuleTypeDataTrail2
// 0x0020 (0x0064 - 0x0044)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                               		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationFactorDistance;                       		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              TessellationStrength;                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                MaxTrailCount;                                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClearTangents : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1945 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleTypeDataTrail2::pClassPointer = NULL;

// Class Engine.ParticleModuleUberBase
// 0x000F (0x0050 - 0x0041)
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray< struct FName >                             RequiredModules;                                  		// 0x0044 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1947 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberBase::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCL
// 0x00A8 (0x00F8 - 0x0050)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0050 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x006C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0088 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00A4 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00C0 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00DC (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1949 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberLTISIVCL::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00C4 (0x0114 - 0x0050)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0050 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x006C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0088 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00A4 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00C0 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00DC (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x00F8 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1951 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberLTISIVCLIL::pClassPointer = NULL;

// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x011C (0x016C - 0x0050)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0050 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x006C (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0088 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00A4 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00C0 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00DC (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x00F8 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0114 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      SizeLifeMultiplier;                               		// 0x0130 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	unsigned long                                      SizeMultiplyX : 1;                                		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SizeMultiplyY : 1;                                		// 0x014C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      SizeMultiplyZ : 1;                                		// 0x014C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0150 (0x001C) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1953 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberLTISIVCLILIRSSBLIRR::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainDrops
// 0x0088 (0x00D8 - 0x0050)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMax;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMin;                                     		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMax;                                     		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMin;                                 		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMax;                                 		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMin;                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMax;                           		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ColorOverLife;                                    		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaOverLife;                                    		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	float                                              PC_VelocityScale;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PC_StartLocation;                                 		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartRadius;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartHeight;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PC_HeightAxis;                                    		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMin;                                 		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMax;                                 		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1955 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainDrops::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainImpacts
// 0x0120 (0x0170 - 0x0050)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0088 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00A8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_VelocityScale;                                 		// 0x00C4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      PC_StartLocation;                                 		// 0x00E0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartRadius;                                   		// 0x00FC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartHeight;                                   		// 0x0118 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      PC_HeightAxis;                                    		// 0x0134 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0138 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0154 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1957 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainImpacts::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainSplashA
// 0x00AC (0x00FC - 0x0050)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x0088 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00A8 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00C4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00E0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1959 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainSplashA::pClassPointer = NULL;

// Class Engine.ParticleModuleUberRainSplashB
// 0x00AC (0x00FC - 0x0050)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0050 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x006C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0088 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00A4 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00C0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x00E0 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1961 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleUberRainSplashB::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityBase
// 0x0007 (0x0048 - 0x0041)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned long                                      bInWorldSpace : 1;                                		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyOwnerScale : 1;                             		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1963 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocityBase::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocity
// 0x0038 (0x0080 - 0x0048)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0064 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1965 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocity::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0018 (0x0098 - 0x0080)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0080 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1967 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocity_Seeded::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityInheritParent
// 0x001C (0x0064 - 0x0048)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                            		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1969 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocityInheritParent::pClassPointer = NULL;

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                      		// 0x0048 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Absolute : 1;                                     		// 0x0064 (0x0004) [0x0000000000000009] [0x00000001] ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1971 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleVelocityOverLifetime::pClassPointer = NULL;

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x003C - 0x003C)
class UParticleModuleEventSendToGame : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1973 ];

		return pClassPointer;
	};

	void DoEvent ( struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName );
};

UClass* UParticleModuleEventSendToGame::pClassPointer = NULL;

// Class Engine.ParticleSystem
// 0x00B4 (0x00F0 - 0x003C)
class UParticleSystem : public UObject
{
public:
	unsigned char                                      SystemUpdateMode;                                 		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODMethod;                                        		// 0x003D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OcclusionBoundsMethod;                            		// 0x003E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_FPS;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_Delta;                                 		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAggressiveWithMemory : 1;                        		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLit : 1;                                         		// 0x004C (0x0004) [0x0000000020000002] [0x00000002] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bOrientZAxisTowardCamera : 1;                     		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFullResolution : 1;                              		// 0x004C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRegenerateLODDuplicate : 1;                      		// 0x004C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x004C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShouldResetPeakCounts : 1;                       		// 0x004C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bHasPhysics : 1;                                  		// 0x004C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bUseRealtimeThumbnail : 1;                        		// 0x004C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x004C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bSkipSpawnCountCheck : 1;                         		// 0x004C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bUseDelayRange : 1;                               		// 0x004C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseMobilePointSprites : 1;                       		// 0x004C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bLoadIfPhysXLevel0 : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bLoadIfPhysXLevel1 : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bLoadIfPhysXLevel2 : 1;                           		// 0x004C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	TArray< class UParticleEmitter* >                  Emitters;                                         		// 0x0050 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystemComponent*                    PreviewComponent;                                 		// 0x005C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x0060 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              LODDistanceCheckTime;                             		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    LODDistances;                                     		// 0x0068 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	float                                              MaxDrawDistance;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FParticleSystemLOD >                LODSettings;                                      		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x0084 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondsBeforeInactive;                            		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Delay;                                            		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayLow;                                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MacroUVPosition;                                  		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MacroUVRadius;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBox                                        CustomOcclusionBounds;                            		// 0x00BC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StartAudioEvent;                                  		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StopAudioEvent;                                   		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StartLoopingAudioEvent;                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    StopLoopingAudioEvent;                            		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAudioDelaySeconds;                               		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PhysxParticleSystemRef;                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1975 ];

		return pClassPointer;
	};

	float GetMaxLifespan ( float InComponentDelay );
	bool SetLODDistance ( int LODLevelIndex, float InDistance );
	void SetCurrentLODMethod ( unsigned char InMethod );
	float GetLODDistance ( int LODLevelIndex );
	int GetLODLevelCount ( );
	unsigned char GetCurrentLODMethod ( );
	class UParticleSystem* EffectiveParticleSystemAfterPhysXMutator ( );
};

UClass* UParticleSystem::pClassPointer = NULL;

// Class Engine.ParticleSystemReplay
// 0x0010 (0x004C - 0x003C)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                     		// 0x003C (0x0004) [0x0000000000001001]              ( CPF_Edit | CPF_Native )
	TArray< struct FParticleSystemReplayFrame >        Frames;                                           		// 0x0040 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1977 ];

		return pClassPointer;
	};

};

UClass* UParticleSystemReplay::pClassPointer = NULL;

// Class Engine.PhysXParticleSystem
// 0x006C (0x00A8 - 0x003C)
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles1;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticles2;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticles;                                     		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ParticleSpawnReserve;                             		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SimulationMethod;                                 		// 0x004D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PacketSizeMultiplier;                             		// 0x004E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                            		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CollisionDistance;                                		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithStaticShapes;                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithDynamicShapes;                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithStaticShapes;                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithDynamicShapes;                        		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StaticFrictionWithStaticShapes;                   		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StaticFrictionWithDynamicShapes;                  		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDynamicCollision : 1;                            		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableGravity : 1;                              		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStaticCollision : 1;                             		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTwoWayCollision : 1;                             		// 0x0070 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroy : 1;                                     		// 0x0070 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSyncFailed : 1;                                  		// 0x0070 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsInGame : 1;                                    		// 0x0070 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	float                                              MaxMotionDistance;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Damping;                                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ExternalAcceleration;                             		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestParticleDistance;                             		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestDensity;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KernelRadiusMultiplier;                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Stiffness;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Viscosity;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionResponseCoefficient;                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CascadeScene;                                     		// 0x00A0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PSys;                                             		// 0x00A4 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1979 ];

		return pClassPointer;
	};

};

UClass* UPhysXParticleSystem::pClassPointer = NULL;

// Class Engine.KActor
// 0x00C4 (0x0288 - 0x01C4)
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x01C4 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCurrentSlide : 1;                                		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSlideActive : 1;                                 		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLimitMaxPhysicsVelocity : 1;                     		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNeedsRBStateReplication : 1;                     		// 0x01C4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bDisableClientSidePawnInteractions : 1;           		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000080] 
	class UParticleSystemComponent*                    ImpactEffectComponent;                            		// 0x01C8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent;                             		// 0x01CC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent2;                            		// 0x01D0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastImpactTime;                                   		// 0x01D4 (0x0004) [0x0000000000000000]              
	struct FPhysEffectInfo                             ImpactEffectInfo;                                 		// 0x01D8 (0x0014) [0x0000000000000000]              
	class UParticleSystemComponent*                    SlideEffectComponent;                             		// 0x01EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SlideSoundComponent;                              		// 0x01F0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastSlideTime;                                    		// 0x01F4 (0x0004) [0x0000000000000000]              
	struct FPhysEffectInfo                             SlideEffectInfo;                                  		// 0x01F8 (0x0014) [0x0000000000000000]              
	float                                              StayUprightTorqueFactor;                          		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPhysicsVelocity;                               		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NetRelevantDistanceSquared;                       		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x021C (0x0004) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                          		// 0x0220 (0x0040) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x0260 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     ReplicatedDrawScale3D;                            		// 0x0264 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     InitialLocation;                                  		// 0x0270 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x027C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1981 ];

		return pClassPointer;
	};

	void Reset ( );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSpawnedByKismet ( );
	void SetPhysicalCollisionProperties ( );
	void eventDestroyed ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventPostBeginPlay ( );
	void ResolveRBState ( );
	class UPhysicalMaterial* GetKActorPhysMaterial ( );
};

UClass* AKActor::pClassPointer = NULL;

// Class Engine.KActorFromStatic
// 0x0008 (0x0290 - 0x0288)
class AKActorFromStatic : public AKActor
{
public:
	class AActor*                                      MyStaticMeshActor;                                		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              MaxImpulseSpeed;                                  		// 0x028C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1983 ];

		return pClassPointer;
	};

	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void ReceiveImpulse ( class APawn* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType );
	class AKActorFromStatic* MakeDynamic ( class UStaticMeshComponent* MovableMesh );
	void MakeStatic ( );
	void BecomeStatic ( );
	void eventOnWakeRBPhysics ( );
	void eventOnSleepRBPhysics ( );
	void DisablePrecomputedLighting ( );
};

UClass* AKActorFromStatic::pClassPointer = NULL;

// Class Engine.KActorSpawnable
// 0x0004 (0x028C - 0x0288)
class AKActorSpawnable : public AKActor
{
public:
	unsigned long                                      bRecycleScaleToZero : 1;                          		// 0x0288 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bScalingToZero : 1;                               		// 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x0288 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1985 ];

		return pClassPointer;
	};

	void ResetComponents ( );
	void eventRecycleInternal ( );
	void Recycle ( );
	void Initialize ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AKActorSpawnable::pClassPointer = NULL;

// Class Engine.KActorPizazz
// 0x0018 (0x02A4 - 0x028C)
class AKActorPizazz : public AKActorSpawnable
{
public:
	struct FImpulseData                                ReplicatedImpulse;                                		// 0x028C (0x0018) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1987 ];

		return pClassPointer;
	};

	void ApplyReplicatedImpulse ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AKActorPizazz::pClassPointer = NULL;

// Class Engine.KAsset
// 0x0010 (0x0198 - 0x0188)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x018C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockPawns : 1;                                  		// 0x018C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x0190 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UPhysicsAsset*                               ReplicatedPhysAsset;                              		// 0x0194 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1989 ];

		return pClassPointer;
	};

	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void eventReplicatedEvent ( struct FName VarName );
	void SetMeshAndPhysAsset ( class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset );
	void eventPostBeginPlay ( );
};

UClass* AKAsset::pClassPointer = NULL;

// Class Engine.Pawn
// 0x050C (0x0694 - 0x0188)
class APawn : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_Speaker;                       		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIKilledBehavior;                         		// 0x018C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IITargetable;                             		// 0x0190 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              MaxStepHeight;                                    		// 0x0194 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxJumpHeight;                                    		// 0x0198 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WalkableFloorZ;                                   		// 0x019C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LedgeCheckThreshold;                              		// 0x01A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     PartialLedgeMoveDir;                              		// 0x01A4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 Controller;                                       		// 0x01B0 (0x0004) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	class APawn*                                       NextPawn;                                         		// 0x01B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetRelevancyTime;                                 		// 0x01B8 (0x0004) [0x0000000000000000]              
	class APlayerController*                           LastRealViewer;                                   		// 0x01BC (0x0004) [0x0000000000000000]              
	class AActor*                                      LastViewer;                                       		// 0x01C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bScriptTickSpecial : 1;                           		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpAndOut : 1;                                    		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsWalking : 1;                                   		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bWantsToCrouch : 1;                               		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsCrouched : 1;                                  		// 0x01C4 (0x0004) [0x0000000000000022] [0x00000010] ( CPF_Const | CPF_Net )
	unsigned long                                      bTryToUncrouch : 1;                               		// 0x01C4 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bCanCrouch : 1;                                   		// 0x01C4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCrawler : 1;                                     		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bReducedSpeed : 1;                                		// 0x01C4 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bJumpCapable : 1;                                 		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanJump : 1;                                     		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanWalk : 1;                                     		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanSwim : 1;                                     		// 0x01C4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCanFly : 1;                                      		// 0x01C4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCanClimbLadders : 1;                             		// 0x01C4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCanStrafe : 1;                                   		// 0x01C4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bAvoidLedges : 1;                                 		// 0x01C4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bStopAtLedges : 1;                                		// 0x01C4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bAllowLedgeOverhang : 1;                          		// 0x01C4 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bPartiallyOverLedge : 1;                          		// 0x01C4 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bSimulateGravity : 1;                             		// 0x01C4 (0x0004) [0x0000000000000022] [0x00100000] ( CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreForces : 1;                                		// 0x01C4 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bCanWalkOffLedges : 1;                            		// 0x01C4 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x01C4 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bSimGravityDisabled : 1;                          		// 0x01C4 (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bDirectHitWall : 1;                               		// 0x01C4 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bPushesRigidBodies : 1;                           		// 0x01C4 (0x0004) [0x0000000000000002] [0x04000000] ( CPF_Const )
	unsigned long                                      bForceFloorCheck : 1;                             		// 0x01C4 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bForceKeepAnchor : 1;                             		// 0x01C4 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bIgnoreAllTraces : 1;                             		// 0x01C4 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bCanMantle : 1;                                   		// 0x01C4 (0x0004) [0x0000000000004000] [0x40000000] ( CPF_Config )
	unsigned long                                      bCanClimbUp : 1;                                  		// 0x01C4 (0x0004) [0x0000000000004000] [0x80000000] ( CPF_Config )
	unsigned long                                      bCanClimbCeilings : 1;                            		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanSwatTurn : 1;                                 		// 0x01C8 (0x0004) [0x0000000000004020] [0x00000002] ( CPF_Net | CPF_Config )
	unsigned long                                      bCanLeap : 1;                                     		// 0x01C8 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bCanCoverSlip : 1;                                		// 0x01C8 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bDisplayPathErrors : 1;                           		// 0x01C8 (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCanPickupInventory : 1;                          		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAmbientCreature : 1;                             		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bLOSHearing : 1;                                  		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bMuffledHearing : 1;                              		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDontPossess : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRollToDesired : 1;                               		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bStationary : 1;                                  		// 0x01C8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCachedRelevant : 1;                              		// 0x01C8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bNoWeaponFiring : 1;                              		// 0x01C8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bModifyReachSpecCost : 1;                         		// 0x01C8 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bModifyNavPointDest : 1;                          		// 0x01C8 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPathfindsAsVehicle : 1;                          		// 0x01C8 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bPrevBypassSimulatedClientPhysics : 1;            		// 0x01C8 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bRunPhysicsWithNoController : 1;                  		// 0x01C8 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x01C8 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bLimitFallAccel : 1;                              		// 0x01C8 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bReplicateHealthToAll : 1;                        		// 0x01C8 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x01C8 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bForceRegularVelocity : 1;                        		// 0x01C8 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bPlayedDeath : 1;                                 		// 0x01C8 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bDesiredRotationSet : 1;                          		// 0x01C8 (0x0004) [0x0000000000000002] [0x02000000] ( CPF_Const )
	unsigned long                                      bLockDesiredRotation : 1;                         		// 0x01C8 (0x0004) [0x0000000000000002] [0x04000000] ( CPF_Const )
	unsigned long                                      bUnlockWhenReached : 1;                           		// 0x01C8 (0x0004) [0x0000000000000002] [0x08000000] ( CPF_Const )
	unsigned long                                      bCanBeInjured : 1;                                		// 0x01C8 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bIsInjured : 1;                                   		// 0x01C8 (0x0004) [0x0000000000000020] [0x20000000] ( CPF_Net )
	unsigned long                                      bSpawnInFixedPosition : 1;                        		// 0x01C8 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsDead : 1;                                      		// 0x01C8 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bNeedsBaseTickedFirst : 1;                        		// 0x01CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUsedByMatinee : 1;                               		// 0x01CC (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bRootMotionFromInterpCurve : 1;                   		// 0x01CC (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bDebugShowCameraLocation : 1;                     		// 0x01CC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bFastAttachedMove : 1;                            		// 0x01CC (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      bSnapToTarget : 1;                                		// 0x01CC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAutoAimTarget : 1;                               		// 0x01CC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUnlockPreciseDestinationWhenReached : 1;         		// 0x01CC (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      ImmuneToFallingDamage : 1;                        		// 0x01CC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bSkipClientAdjustment : 1;                        		// 0x01CC (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	int                                                bIsSprinting;                                     		// 0x01D0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                bIsSprintingBaseValue;                            		// 0x01D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                bIsSprintingModifierStack;                        		// 0x01D8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      WalkingPhysics;                                   		// 0x01E4 (0x0001) [0x0000000000000000]              
	unsigned char                                      PathSearchType;                                   		// 0x01E5 (0x0001) [0x0000000000000000]              
	unsigned char                                      RemoteViewPitch;                                  		// 0x01E6 (0x0001) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned char                                      RemoteViewYaw;                                    		// 0x01E7 (0x0001) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned char                                      NextFlashLocationIdx;                             		// 0x01E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      FlashCount;                                       		// 0x01E9 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      OffHandFlashCount;                                		// 0x01EA (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      FiringMode;                                       		// 0x01EB (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      AutoAimProfile;                                   		// 0x01EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      bEnableWeaponFireSkillEvent;                      		// 0x01ED (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bEnableWeaponFireSkillEventBaseValue;             		// 0x01EE (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                bEnableWeaponFireSkillEventModifierStack;         		// 0x01F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              UncrouchTime;                                     		// 0x01FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CrouchHeight;                                     		// 0x0200 (0x0004) [0x0000000000000000]              
	float                                              CrouchRadius;                                     		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                FullHeight;                                       		// 0x0208 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NonPreferredVehiclePathMultiplier;                		// 0x020C (0x0004) [0x0000000000000000]              
	class UPathConstraint*                             PathConstraintList;                               		// 0x0210 (0x0004) [0x0000000000000000]              
	class UPathGoalEvaluator*                          PathGoalList;                                     		// 0x0214 (0x0004) [0x0000000000000000]              
	float                                              DesiredSpeed;                                     		// 0x0218 (0x0004) [0x0000000000000000]              
	float                                              MaxDesiredSpeed;                                  		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              HearingThreshold;                                 		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HearingThresholdBaseValue;                        		// 0x0224 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                HearingThresholdModifierStack;                    		// 0x0228 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              Alertness;                                        		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              SightRadius;                                      		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SightRadiusBaseValue;                             		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                SightRadiusModifierStack;                         		// 0x0240 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PeripheralVision;                                 		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PeripheralVisionBaseValue;                        		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PeripheralVisionModifierStack;                    		// 0x0254 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AvgPhysicsTime;                                   		// 0x0260 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Mass;                                             		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              Buoyancy;                                         		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              MeleeRange;                                       		// 0x026C (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            Anchor;                                           		// 0x0270 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                AnchorItem;                                       		// 0x0274 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            LastAnchor;                                       		// 0x0278 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FindAnchorFailedTime;                             		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              LastValidAnchorTime;                              		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              DestinationOffset;                                		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              NextPathRadius;                                   		// 0x0288 (0x0004) [0x0000000000000000]              
	struct FVector                                     SerpentineDir;                                    		// 0x028C (0x000C) [0x0000000000000000]              
	float                                              SerpentineDist;                                   		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              SerpentineTime;                                   		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              SpawnTime;                                        		// 0x02A0 (0x0004) [0x0000000000000000]              
	int                                                MaxPitchLimit;                                    		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              GroundSpeed;                                      		// 0x02A8 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              GroundSpeedBaseValue;                             		// 0x02AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                GroundSpeedModifierStack;                         		// 0x02B0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              WaterSpeed;                                       		// 0x02BC (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              AirSpeed;                                         		// 0x02C0 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              AirSpeedBaseValue;                                		// 0x02C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AirSpeedModifierStack;                            		// 0x02C8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LadderSpeed;                                      		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              AccelRate;                                        		// 0x02D8 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              AccelRateBaseValue;                               		// 0x02DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AccelRateModifierStack;                           		// 0x02E0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              JumpZ;                                            		// 0x02EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              JumpZBaseValue;                                   		// 0x02F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                JumpZModifierStack;                               		// 0x02F4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              OutofWaterZ;                                      		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              MaxOutOfWaterStepHeight;                          		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              AirControl;                                       		// 0x0308 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WalkingPct;                                       		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              MovementSpeedModifier;                            		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              CrouchedPct;                                      		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              SprintingPct;                                     		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              MaxFallSpeed;                                     		// 0x031C (0x0004) [0x0000000000000000]              
	float                                              TotalEncumbrance;                                 		// 0x0320 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              TotalEncumbranceBaseValue;                        		// 0x0324 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                TotalEncumbranceModifierStack;                    		// 0x0328 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              EncumbranceResistance;                            		// 0x0334 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              EncumbranceResistanceBaseValue;                   		// 0x0338 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                EncumbranceResistanceModifierStack;               		// 0x033C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AIMaxFallSpeedFactor;                             		// 0x0348 (0x0004) [0x0000000000000000]              
	float                                              AnalogMovePct;                                    		// 0x034C (0x0004) [0x0000000000000000]              
	float                                              BaseEyeHeight;                                    		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EyeHeight;                                        		// 0x0354 (0x0004) [0x0000000000000000]              
	struct FVector                                     Floor;                                            		// 0x0358 (0x000C) [0x0000000000000000]              
	float                                              SplashTime;                                       		// 0x0364 (0x0004) [0x0000000000000000]              
	class APhysicsVolume*                              HeadVolume;                                       		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HealthVar;                                        		// 0x036C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              HealthMaxVar;                                     		// 0x0370 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                LastHealthVar;                                    		// 0x0374 (0x0004) [0x0000000000000000]              
	int                                                LastHealthMaxVar;                                 		// 0x0378 (0x0004) [0x0000000000000000]              
	struct FResourcePoolReference                      HealthPool;                                       		// 0x037C (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              BreathTime;                                       		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              UnderWaterTime;                                   		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              LastPainTime;                                     		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              KismetDeathDelayTime;                             		// 0x0394 (0x0004) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x0398 (0x000C) [0x0000000000000000]              
	struct FVector                                     noise1spot;                                       		// 0x03A4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1time;                                       		// 0x03B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise1other;                                      		// 0x03B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1loudness;                                   		// 0x03B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     noise2spot;                                       		// 0x03BC (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2time;                                       		// 0x03C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise2other;                                      		// 0x03CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2loudness;                                   		// 0x03D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SoundDampening;                                   		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              DamageScaling;                                    		// 0x03D8 (0x0004) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x03DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      ControllerClass;                                  		// 0x03E8 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x03EC (0x0004) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	class ALadderVolume*                               OnLadder;                                         		// 0x03F0 (0x0004) [0x0000000000000000]              
	struct FName                                       LandMovementState;                                		// 0x03F4 (0x0008) [0x0000000000000000]              
	struct FName                                       WaterMovementState;                               		// 0x03FC (0x0008) [0x0000000000000000]              
	class APlayerStart*                                LastStartSpot;                                    		// 0x0404 (0x0004) [0x0000000000000000]              
	float                                              LastStartTime;                                    		// 0x0408 (0x0004) [0x0000000000000000]              
	struct FVector                                     TakeHitLocation;                                  		// 0x040C (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      HitDamageType;                                    		// 0x0418 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UDamageTypeDefinition*                       HitDamageTypeDefinition;                          		// 0x041C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UImpactDefinition*                           HitImpactDefinition;                              		// 0x0420 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     TearOffMomentum;                                  		// 0x0424 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0430 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0434 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RBPushRadius;                                     		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPushStrength;                                   		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVehicle*                                    DrivenVehicle;                                    		// 0x0440 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x0444 (0x0004) [0x0000000000000000]              
	float                                              VehicleCheckRadius;                               		// 0x0448 (0x0004) [0x0000000000000000]              
	class AController*                                 LastHitBy;                                        		// 0x044C (0x0004) [0x0000000000000000]              
	float                                              ViewPitchMin;                                     		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              ViewPitchMax;                                     		// 0x0454 (0x0004) [0x0000000000000000]              
	int                                                AllowedYawError;                                  		// 0x0458 (0x0004) [0x0000000000000000]              
	struct FRotator                                    DesiredRotation;                                  		// 0x045C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      InventoryManagerClass;                            		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInventoryManager*                           InvManager;                                       		// 0x046C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     Weapon;                                           		// 0x0470 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     OffHandWeapon;                                    		// 0x0474 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                FlashLocationWeaponID;                            		// 0x0478 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     FlashLocation[ 0xA ];                             		// 0x047C (0x0078) [0x0000000000000020]              ( CPF_Net )
	int                                                ShotCount;                                        		// 0x04F4 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                     		// 0x04F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPawnAllegiance*                             Allegiance;                                       		// 0x04FC (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	class UITargetable*                                AllegianceParent;                                 		// 0x0500 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0504 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< class UITargetable* >                      AllegianceChildren;                               		// 0x0508 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxBulletPenetrationCount;                        		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_BodyInstance*                            PhysicsPushBody;                                  		// 0x0518 (0x0004) [0x0000000000000000]              
	int                                                FailedLandingCount;                               		// 0x051C (0x0004) [0x0000000000000000]              
	TArray< class UAnimNodeSlot* >                     SlotNodes;                                        		// 0x0520 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UInterpGroup* >                      InterpGroupList;                                  		// 0x052C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x0538 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< struct FScalarParameterInterpStruct >      ScalarParameterInterpArray;                       		// 0x053C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRootMotionCurve                            RootMotionInterpCurve;                            		// 0x0548 (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RootMotionInterpRate;                             		// 0x0564 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RootMotionInterpCurrentTime;                      		// 0x0568 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     RootMotionInterpCurveLastValue;                   		// 0x056C (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              MaxPreciseDestinationSpeed;                       		// 0x0578 (0x0004) [0x0000000000000000]              
	float                                              HorizontalPreciseDestinationThreshold;            		// 0x057C (0x0004) [0x0000000000000000]              
	float                                              VerticalPreciseDestinationThreshold;              		// 0x0580 (0x0004) [0x0000000000000000]              
	float                                              NormalImpactDamageModifier;                       		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NormalImpactDamageModifierBaseValue;              		// 0x0588 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NormalImpactDamageModifierModifierStack;          		// 0x058C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              NormalStatusEffectDamageModifier;                 		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NormalStatusEffectDamageModifierBaseValue;        		// 0x059C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                NormalStatusEffectDamageModifierModifierStack;    		// 0x05A0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ExplosiveImpactDamageModifier;                    		// 0x05AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExplosiveImpactDamageModifierBaseValue;           		// 0x05B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExplosiveImpactDamageModifierModifierStack;       		// 0x05B4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ExplosiveStatusEffectDamageModifier;              		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExplosiveStatusEffectDamageModifierBaseValue;     		// 0x05C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ExplosiveStatusEffectDamageModifierModifierStack; 		// 0x05C8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShockImpactDamageModifier;                        		// 0x05D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockImpactDamageModifierBaseValue;               		// 0x05D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShockImpactDamageModifierModifierStack;           		// 0x05DC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ShockStatusEffectDamageModifier;                  		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockStatusEffectDamageModifierBaseValue;         		// 0x05EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ShockStatusEffectDamageModifierModifierStack;     		// 0x05F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CorrosiveImpactDamageModifier;                    		// 0x05FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CorrosiveImpactDamageModifierBaseValue;           		// 0x0600 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CorrosiveImpactDamageModifierModifierStack;       		// 0x0604 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CorrosiveStatusEffectDamageModifier;              		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CorrosiveStatusEffectDamageModifierBaseValue;     		// 0x0614 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                CorrosiveStatusEffectDamageModifierModifierStack; 		// 0x0618 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              IncendiaryImpactDamageModifier;                   		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              IncendiaryImpactDamageModifierBaseValue;          		// 0x0628 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IncendiaryImpactDamageModifierModifierStack;      		// 0x062C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              IncendiaryStatusEffectDamageModifier;             		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              IncendiaryStatusEffectDamageModifierBaseValue;    		// 0x063C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                IncendiaryStatusEffectDamageModifierModifierStack;		// 0x0640 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AmpImpactDamageModifier;                          		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AmpImpactDamageModifierBaseValue;                 		// 0x0650 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AmpImpactDamageModifierModifierStack;             		// 0x0654 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AmpStatusEffectDamageModifier;                    		// 0x0660 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AmpStatusEffectDamageModifierBaseValue;           		// 0x0664 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                AmpStatusEffectDamageModifierModifierStack;       		// 0x0668 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FRecentDamageTracker                        RecentDamage;                                     		// 0x0674 (0x000C) [0x0000000000000000]              
	struct FBalanceDefSpawnedActorState                BalanceDefinitionState;                           		// 0x0680 (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                YawLastFrame;                                     		// 0x068C (0x0004) [0x0000000000000000]              
	float                                              YawPerSecond;                                     		// 0x0690 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1991 ];

		return pClassPointer;
	};

	void OnHealthPoolMaxValueModified ( float NewMaxValue );
	bool IsVulnerableToFriendlyFire ( );
	void eventSetWeaponVisibility ( unsigned long bWeaponVisible );
	void ResetDefaultRotationRate ( );
	void SetPatsy ( class UITargetable* NewPatsy );
	class UITargetable* GetPatsy ( );
	bool IsBeingHealed ( );
	void SetBeingHealed ( unsigned long bNewBeingHealed );
	unsigned char GetDefaultRootMotionRotationMode ( );
	unsigned char GetDefaultRootMotionMode ( );
	bool OverrideDestroyInventoryContents ( unsigned long bDestroyContents );
	void TellOpportunityPawnIsDead ( unsigned long bKeepCorpse );
	struct FVector GetDamageVector ( );
	class UMeshComponent* GetRigidBodyMesh ( );
	void DestroyHealthPool ( );
	void SetHealthResourcePoolDefinition ( class UResourcePoolDefinition* Definition, class AResourcePoolManager** ResourcePoolManager );
	void Behavior_Killed ( class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType );
	void Behavior_CauseRadiusDamage ( float Radius, float DamageAmount, unsigned long bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, struct FVector Offset, class UIDamageCauser* DamageCauser, unsigned long bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray< class AActor* >* ActorsHurt );
	void Behavior_CauseDamage ( class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, class UIDamageCauser* DamageCauser, float BarrelSourceTime, float PlantSourceTime );
	float EvaluateAttributeInitialization ( struct FAttributeInitializationData InitData );
	class UAnimNode* FindAnimNode ( struct FName NodeName );
	void SetRotationRate ( struct FRotator NewRotationRate );
	float GetCollisionRadius ( );
	void Behavior_RegisterTargetable ( unsigned long bUnregister );
	void Behavior_SetCanTarget ( unsigned char ChangeStatus );
	int ShowSelfAsTarget ( unsigned long bControllersOnly );
	void eventGetTargetName ( struct FString* TargetName );
	void eventSpeak ( class USoundCue* Cue );
	void SetScalarParameterInterp ( struct FScalarParameterInterpStruct* ScalarParameterInterp );
	void SetRootMotionInterpCurrentTime ( float inTime, float DeltaTime, unsigned long bUpdateSkelPose );
	void SetCinematicMode ( unsigned long bInCinematicMode );
	void ZeroMovementVariables ( );
	void ClearPathStep ( );
	void DrawPathStep ( class UCanvas* C );
	void IncrementPathChild ( int Cnt, class UCanvas* C );
	void IncrementPathStep ( int Cnt, class UCanvas* C );
	class UPathGoalEvaluator* CreatePathGoalEvaluator ( class UClass* GoalEvalClass );
	class UPathConstraint* CreatePathConstraint ( class UClass* ConstraintClass );
	void AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UPathConstraint* Constraint );
	void ClearConstraints ( );
	void eventSoakPause ( );
	void eventBecomeViewTarget ( class APlayerController* PC );
	void eventMessagePlayer ( struct FString msg );
	bool HandleTeleport ( TArray< class UObject* > DestList, unsigned long bUpdateRotation, unsigned long bCheckOverlap, float TeleportDistance, TArray< class AVolume* > TeleportVolumes, int PreferredDestIndex );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	float GetDamageScaling ( );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventSpawnedByKismet ( );
	struct FVector GetCollisionExtent ( );
	float eventGetCollisionHeight ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void SetActiveWeapon ( class AWeapon* NewWeapon, unsigned long bOffHand );
	void TossInventory ( class AInventory* Inv, struct FVector ForceVelocity );
	void ThrowActiveWeapon ( unsigned long bDestroyWeap );
	void DrawHUD ( class AHUD* H );
	class AInventory* FindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	class AInventory* eventCreateInventory ( class UClass* NewInvClass, unsigned long bDoNotActivate );
	void AddDefaultInventory ( );
	void eventStopDriving ( class AVehicle* V );
	void eventStartDriving ( class AVehicle* V, unsigned long SkipAnim );
	bool CanThrowWeapon ( );
	void Suicide ( );
	class AVehicle* GetVehicleBase ( );
	void PlayLanded ( float ImpactVel );
	bool CannotJumpNow ( );
	void PlayFootStepSound ( int FootDown, unsigned long bFirstPerson );
	void eventTornOff ( );
	void PlayDying ( class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, struct FVector HitLoc );
	void SetDyingPhysics ( );
	void TurnOff ( );
	void PlayHealingHit ( class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	void PlayHit ( class APawn* SomePawn, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	bool PawnCheckPlayHitPreconditions ( class UDamagePipeline* Pipeline );
	void PlayDyingSound ( );
	bool DoJump ( unsigned long bUpdating );
	bool CanJump ( );
	bool CanStuckJump ( );
	bool CheckWaterJump ( struct FVector* WallNormal );
	void TakeDrowningDamage ( );
	void eventBreathTimer ( );
	bool TouchingWaterVolume ( );
	void eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume );
	void eventTickSpecial ( float DeltaTime );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void DelayTriggerDeath ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	bool PlayInjured ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ThrowWeaponOnDeath ( );
	bool eventIsSameTeam ( class APawn* Other );
	class ATeamInfo* GetTeam ( );
	unsigned char GetTeamNum ( );
	void TookDamageFromFriendly ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void TookDamageFromEnemy ( class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	void eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	bool IsDemigodMode ( );
	bool PawnCheckTakeDamagePreconditions ( );
	bool eventHandleHealthDepleted ( class AController* InstigatedBy, class UClass* DamageType, struct FVector HitLocation, class UIDamageCauser* DamageCauser, struct FTraceHitInfo HitInfo, class UDamagePipeline* Pipeline );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, float Damage, class UClass* DamageType, struct FVector Momentum, class UDamagePipeline* Pipeline );
	bool eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, TArray< struct FName > Bones, class UDamagePipeline* Pipeline );
	void PruneDamagedBoneList ( TArray< struct FName >* Bones );
	bool eventHealDamage ( float Amount, class AController* Healer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, unsigned long bIsShieldRestore );
	void HealthWasGained ( float Amount );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline, float* InDamage, float* DamageSeverityPercent, struct FVector* Momentum, struct FTraceHitInfo* HitInfo );
	void SetMovementPhysics ( );
	void Gasp ( );
	void OnAssignController ( class USeqAct_AssignController* inAction );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	void SpawnDefaultController ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void eventDestroyed ( );
	void DetachFromController ( unsigned long bDestroyController );
	void CrushedByActor ( class AActor* Other );
	void CrushedBy ( class APawn* OtherPawn );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void eventBaseChange ( );
	void eventStuckOnPawn ( class APawn* OtherPawn );
	void JumpOffPawn ( );
	void gibbedBy ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void eventUpdatePawnRotation ( struct FRotator NewRotation );
	void ClientSetRotation ( struct FRotator NewRotation );
	void ClientRestart ( );
	void Restart ( );
	float GetFallingDamageScale ( );
	void TakeFallingDamage ( );
	void KilledBy ( class APawn* EventInstigator );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo HitInfo );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void ShouldCrouch ( unsigned long bCrouch );
	void UnCrouch ( );
	bool eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventClientMessage ( struct FString S, struct FName Type );
	void HandlePickup ( class AInventory* Inv );
	bool LineOfSightTo ( class AActor* Other );
	void SetMoveTarget ( class AActor* NewTarget );
	bool InGodMode ( );
	void SetViewRotation ( struct FRotator NewRotation );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	bool InFreeCam ( );
	struct FRotator eventGetBaseAimRotation ( );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector GetPawnViewLocation ( );
	struct FRotator GetViewRotation ( );
	void GetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	bool IsFirstPerson ( );
	bool IsPlayerPawn ( );
	bool IsLocallyControlled ( );
	bool IsAIControlled ( );
	bool IsHumanControlled ( class AController* PawnController );
	void ClimbLadder ( class ALadderVolume* L );
	void EndClimbLadder ( class ALadderVolume* OldLadder );
	bool CanSplash ( );
	void eventSetSprinting ( unsigned long bNewIsSprinting );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	bool CanGrabLadder ( );
	void DropToGround ( );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void UnPossessed ( );
	void UpdateControllerOnPossess ( unsigned long bVehicleTransition );
	void UpdateWeaponOnPossess ( unsigned long bVehicleTransition );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void NotifyTeamChanged ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	struct FString GetHumanReadableName ( );
	bool NeedToTurn ( struct FVector targ );
	bool IsFiring ( );
	bool HasRangedAttack ( );
	bool FireOnRelease ( );
	bool TooCloseToAttack ( class AActor* Other );
	bool CanAttack ( class AActor* Other );
	bool BotFire ( unsigned long bFinished );
	void WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication, int Index );
	void ClearFlashLocation ( class AWeapon* InWeapon );
	void SetFlashLocation ( class AWeapon* InWeapon, unsigned char FireModeNum, struct FVector NewLoc );
	void ClearFlashCount ( class AWeapon* InWeapon );
	void FlashCountUpdated ( class AWeapon* InWeapon, unsigned char InFlashCount, unsigned long bViaReplication );
	void IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode );
	void FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication );
	void SetFiringMode ( class AWeapon* InWeapon, unsigned char FiringModeNum );
	unsigned char GetWeaponFiringMode ( class AWeapon* InWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool StopFiring ( );
	void Reset ( );
	void PlayerChangedTeam ( );
	void SetBaseEyeheight ( );
	bool IsDead ( );
	bool IsInjured ( );
	class AController* GetController ( );
	bool eventSpecialMoveThruEdge ( unsigned char Type, int Dir, struct FVector MoveStart, struct FVector MoveDest, class AActor* RelActor, int RelItem );
	bool SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	bool ReachedDesiredRotation ( );
	void SetPushesRigidBodies ( unsigned long NewPush );
	void UndoForceCrouch ( );
	void ForceCrouch ( );
	bool ReachedPoint ( struct FVector Point, class AActor* NewAnchor );
	bool ReachedDestination ( class AActor* Goal );
	class ANavigationPoint* GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist );
	void SetAnchor ( class ANavigationPoint* NewAnchor );
	void SetRemoteViewYaw ( int NewRemoteViewYaw );
	void SetRemoteViewPitch ( int NewRemoteViewPitch );
	bool IsInvisible ( );
	bool IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy );
	float GetFallDuration ( );
	bool SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, unsigned long bRequireFallLanding, struct FVector* JumpVelocity );
	bool ValidAnchor ( );
	struct FVector AdjustDestination ( class AActor* GoalActor, struct FVector Dest );
	bool IsAliveAndWell ( );
	void ApplyBalanceDefinitionCustomizations ( );
	void InitializeBalanceDefinitionState ( class UBaseBalanceDefinition* BalanceDefinition, int GradeIndex );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void FaceFXAudioFinished ( class UAudioComponent* AC );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventMAT_FinishAIGroup ( );
	void eventMAT_BeginAIGroup ( struct FVector StartLoc, struct FRotator StartRot, unsigned char AlignmentType, float LerpTime, unsigned long bDemiGod );
	void FinishAIGroup ( );
	void BeginAIGroup ( );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void LastMatineeAnimFinished ( );
	void MAT_SetSkelControlStrength ( struct FName SkelControlName, float ControlStrength );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	float GetDefaultMaxHealth ( );
	float GetDefaultHealth ( );
	float GetMaxHealth ( );
	float GetHealth ( );
	void SetMaxHealth ( float NewMaxHealth );
	void SetHealth ( float NewHealth );
	bool eventRestoreAnimSetsToDefault ( );
	void eventAnimSetListUpdated ( );
	void AddAnimSets ( TArray< class UAnimSet* >* CustomAnimSets );
	void eventBuildScriptAnimSetList ( );
	void UpdateAnimSetList ( );
	void ClearAnimNodes ( );
	void CacheAnimNodes ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	bool IsDesiredRotationLocked ( );
	bool IsDesiredRotationInUse ( );
	void CheckDesiredRotation ( );
	void ResetDesiredRotation ( );
	void LockDesiredRotation ( unsigned long Lock, unsigned long InUnlockWhenReached );
	bool SetDesiredRotation ( struct FRotator TargetDesiredRotation, unsigned long InLockDesiredRotation, unsigned long InUnlockWhenReached, float InterpolationTime, unsigned long bResetRotationRate );
	bool IsDamagePipelineDebugEnabled ( );
	void ToggleDamagePipelineDebug ( );
	void SetInfoBarVisibility ( unsigned long bVisible );
	bool HideTargetInfoOnHud ( class APawn* HUDOwner );
	bool IsChampion ( );
	bool IsBoss ( );
	bool DisplayParentInfo ( );
	void GetAllBarInfo ( TArray< struct FInfoBarData >* BarData );
	void GetExpInfo ( int* ExpLevelValue );
	bool PickWallAdjust ( struct FVector WallHitNormal, class AActor* HitActor );
	bool IsUsingWalkingPhysics ( );
	unsigned char GetAutoAimProfile ( );
	float GetMagnetismRange ( );
	struct FVector GetMagnetismOrigin ( );
	bool IsAutoAimTarget ( );
	bool HasHomingTargetComponents ( );
	bool IsValidHomingTarget ( );
	bool GetTargetableIsHidden ( );
	bool DoesTargetableTakeDamage ( );
	float GetTargetingModifier ( );
	bool IsInjuredDead ( );
	bool CanSnapZoom ( );
	struct FVector GetSnapLocation ( );
	struct FVector GetTargetableLocation ( );
	bool IsTargetableProxy ( );
	bool IsTargetable ( unsigned long bIgnoreCloakAbility );
	unsigned char GetOpinion ( class UObject* Other );
	void SetAllegiance ( class UPawnAllegiance* NewAllegiance );
	class UPawnAllegiance* GetDefaultAllegiance ( );
	class UPawnAllegiance* GetObjectAllegiance ( );
	bool IsSameAllegiance ( class UObject* anObject );
	bool IsNeutral ( class UObject* anObject );
	bool IsFriendly ( class UObject* anObject );
	bool IsEnemy ( class UObject* anObject );
	class AActor* GetTargetableActor ( );
};

UClass* APawn::pClassPointer = NULL;

// Class Engine.Vehicle
// 0x0074 (0x0708 - 0x0694)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                           		// 0x0694 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bDriving : 1;                                     		// 0x0698 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bDriverIsVisible : 1;                             		// 0x0698 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAttachDriver : 1;                                		// 0x0698 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x0698 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSeparateTurretFocus : 1;                         		// 0x0698 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFollowLookDir : 1;                               		// 0x0698 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasHandbrake : 1;                                		// 0x0698 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bScriptedRise : 1;                                		// 0x0698 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDuckObstacles : 1;                               		// 0x0698 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAvoidReversing : 1;                              		// 0x0698 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRetryPathfindingWithDriver : 1;                  		// 0x0698 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreStallZ : 1;                                		// 0x0698 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                   		// 0x0698 (0x0004) [0x0000000000000000] [0x00001000] 
	TArray< struct FVector >                           ExitPositions;                                    		// 0x069C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ExitRadius;                                       		// 0x06A8 (0x0004) [0x0000000000000000]              
	struct FVector                                     ExitOffset;                                       		// 0x06AC (0x000C) [0x0000000000000000]              
	float                                              Steering;                                         		// 0x06B8 (0x0004) [0x0000000000000000]              
	float                                              Throttle;                                         		// 0x06BC (0x0004) [0x0000000000000000]              
	float                                              Rise;                                             		// 0x06C0 (0x0004) [0x0000000000000000]              
	struct FVector                                     TargetLocationAdjustment;                         		// 0x06C4 (0x000C) [0x0000000000000000]              
	float                                              DriverDamageMult;                                 		// 0x06D0 (0x0004) [0x0000000000000000]              
	float                                              MomentumMult;                                     		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      CrushedDamageType;                                		// 0x06D8 (0x0004) [0x0000000000000000]              
	float                                              MinCrushSpeed;                                    		// 0x06DC (0x0004) [0x0000000000000000]              
	float                                              ForceCrushPenetration;                            		// 0x06E0 (0x0004) [0x0000000000000000]              
	unsigned char                                      StuckCount;                                       		// 0x06E4 (0x0001) [0x0000000000000000]              
	float                                              ThrottleTime;                                     		// 0x06E8 (0x0004) [0x0000000000000000]              
	float                                              StuckTime;                                        		// 0x06EC (0x0004) [0x0000000000000000]              
	float                                              OldSteering;                                      		// 0x06F0 (0x0004) [0x0000000000000000]              
	float                                              OnlySteeringStartTime;                            		// 0x06F4 (0x0004) [0x0000000000000000]              
	float                                              OldThrottle;                                      		// 0x06F8 (0x0004) [0x0000000000000000]              
	float                                              AIMoveCheckTime;                                  		// 0x06FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VehicleMovingTime;                                		// 0x0700 (0x0004) [0x0000000000000000]              
	float                                              TurnTime;                                         		// 0x0704 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1993 ];

		return pClassPointer;
	};

	class APawn* GetOccupantWhoCanPickup ( class UIPickupable* Pickup, class AController** OutController );
	void SwitchSeats ( );
	void ZeroMovementVariables ( );
	void SetCanTargetCheat ( unsigned long bCanTargetIn );
	bool CanTarget ( );
	void SetCanTarget ( unsigned long bCanTargetIn );
	void NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, float Damage, class UClass* DamageType, struct FVector Momentum, class UDamagePipeline* Pipeline );
	void eventReplicatedEvent ( struct FName VarName );
	void SetVehicleBlockingMeshCollision ( class APawn* DriverPawn );
	void eventDrivingStatusChanged ( );
	void SetDriving ( unsigned long B );
	struct FVector eventGetEntryLocation ( );
	void CrushedBy ( class APawn* OtherPawn );
	void PancakeOther ( class APawn* Other );
	bool eventEncroachingOn ( class AActor* Other );
	class AController* GetCollisionDamageInstigator ( );
	void eventEncroachedBy ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void PlayDying ( class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, struct FVector HitLoc );
	void DriverDied ( class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	void ThrowActiveWeapon ( unsigned long bDestroyWeap );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition );
	void UnPossessed ( );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool FindAutoExit ( class APawn* ExitingDriver );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	void DriverLeft ( );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	void NoFailSetDriverLocation ( class APawn* DriverPawn, struct FVector NewLocation );
	bool eventDriverLeave ( unsigned long bForceLeave, unsigned long SkipPawnPlacement );
	struct FVector GetDefaultExitLocation ( class APawn* ExitingDriver );
	struct FRotator GetExitRotation ( class AController* C );
	bool eventContinueOnFoot ( );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P, unsigned long SkipAnim );
	void EntryAnnouncement ( class AController* C );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool DriverEnter ( class APawn* P, unsigned long SkipAnim );
	bool TryToRide ( class APawn* P, unsigned long SkipAnim, int PreferredSeat );
	bool AnySeatAvailable ( );
	bool CanEnterVehicle ( class APawn* P );
	void Destroyed_HandleDriver ( );
	void eventDestroyed ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void eventPostBeginPlay ( );
	void SetBaseEyeheight ( );
	void PlayerChangedTeam ( );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	float GetMaxRiseForce ( );
	bool IsAttachedRiderSeat ( );
	class AController* GetDriverController ( );
	class AVehicle* GetVehicleBase ( );
	void Suicide ( );
	void NotifyTeamChanged ( );
};

UClass* AVehicle::pClassPointer = NULL;

// Class Engine.SVehicle
// 0x0120 (0x0828 - 0x0708)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                           		// 0x0708 (0x0004) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	TArray< class USVehicleWheel* >                    Wheels;                                           		// 0x070C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     COMOffset;                                        		// 0x0718 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InertiaTensorMultiplier;                          		// 0x0724 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStayUpright : 1;                                 		// 0x0730 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSuspensionAxis : 1;                           		// 0x0730 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUpdateWheelShapes : 1;                           		// 0x0730 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bVehicleOnGround : 1;                             		// 0x0730 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bVehicleOnWater : 1;                              		// 0x0730 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIsInverted : 1;                                  		// 0x0730 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bChassisTouchingGround : 1;                       		// 0x0730 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;            		// 0x0730 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bCanFlip : 1;                                     		// 0x0730 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bFlipRight : 1;                                   		// 0x0730 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsUprighting : 1;                                		// 0x0730 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOutputHandbrake : 1;                             		// 0x0730 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHoldingDownHandbrake : 1;                        		// 0x0730 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bAllowPhysFlying : 1;                             		// 0x0730 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	float                                              StayUprightRollResistAngle;                       		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightPitchResistAngle;                      		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightStiffness;                             		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightDamping;                               		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                       		// 0x0744 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                    		// 0x0748 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              HeavySuspensionShiftPercent;                      		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x0750 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              MaxAngularVelocity;                               		// 0x0754 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOffGround;                                    		// 0x0758 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UprightLiftStrength;                              		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTorqueStrength;                            		// 0x0760 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTime;                                      		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightStartTime;                                 		// 0x0768 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             EngineSound;                                      		// 0x076C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SquealSound;                                      		// 0x0770 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USoundCue*                                   CollisionSound;                                   		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnterVehicleSound;                                		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitVehicleSound;                                 		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionIntervalSecs;                            		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionThreshold;                               		// 0x0784 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SquealThreshold;                                  		// 0x0788 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SquealLatThreshold;                               		// 0x078C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LatAngleVolumeMult;                               		// 0x0790 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStartOffsetSecs;                            		// 0x0794 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStopOffsetSecs;                             		// 0x0798 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastCollisionSoundTime;                           		// 0x079C (0x0004) [0x0000000000000000]              
	float                                              OutputBrake;                                      		// 0x07A0 (0x0004) [0x0000000000000000]              
	float                                              OutputGas;                                        		// 0x07A4 (0x0004) [0x0000000000000000]              
	float                                              OutputSteering;                                   		// 0x07A8 (0x0004) [0x0000000000000000]              
	float                                              OutputRise;                                       		// 0x07AC (0x0004) [0x0000000000000000]              
	float                                              ForwardVel;                                       		// 0x07B0 (0x0004) [0x0000000000000000]              
	int                                                NumPoweredWheels;                                 		// 0x07B4 (0x0004) [0x0000000000000000]              
	struct FVector                                     BaseOffset;                                       		// 0x07B8 (0x000C) [0x0000000000000000]              
	float                                              CamDist;                                          		// 0x07C4 (0x0004) [0x0000000000000000]              
	int                                                DriverViewPitch;                                  		// 0x07C8 (0x0004) [0x0000000000000000]              
	int                                                DriverViewYaw;                                    		// 0x07CC (0x0004) [0x0000000000000000]              
	struct FVehicleState                               VState;                                           		// 0x07D0 (0x0050) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x0820 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              RadialImpulseScaling;                             		// 0x0824 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1995 ];

		return pClassPointer;
	};

	void GetSVehicleDebug ( TArray< struct FString >* DebugInfo );
	float HermiteEval ( float Slip );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventDrivingStatusChanged ( );
	void VehiclePlayExitSound ( );
	void VehiclePlayEnterSound ( );
	void StopEngineSoundTimed ( );
	void StopEngineSound ( );
	void StartEngineSoundTimed ( );
	void StartEngineSound ( );
	bool HasWheelsOnGround ( );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, class UDamagePipeline* Pipeline );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo HitInfo );
	void InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove, unsigned long bClearAnimTree );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class UIDamageCauser* DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline );
	void StopVehicleSounds ( );
	void TurnOff ( );
	void eventDestroyed ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	void SetWheelCollision ( int WheelNum, unsigned long bCollision );
	bool IsSleeping ( );
	void AddTorque ( struct FVector Torque );
	void AddImpulse ( struct FVector Impulse );
	void AddForce ( struct FVector Force );
};

UClass* ASVehicle::pClassPointer = NULL;

// Class Engine.RB_ConstraintActor
// 0x001C (0x01A4 - 0x0188)
class ARB_ConstraintActor : public ARigidBodyBase
{
public:
	class AActor*                                      ConstraintActor1;                                 		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ConstraintActor2;                                 		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_ConstraintSetup*                         ConstraintSetup;                                  		// 0x0190 (0x0004) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	class URB_ConstraintInstance*                      ConstraintInstance;                               		// 0x0194 (0x0004) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	unsigned long                                      bDisableCollision : 1;                            		// 0x0198 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateActor1RefFrame : 1;                        		// 0x0198 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUpdateActor2RefFrame : 1;                        		// 0x0198 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      PulleyPivotActor1;                                		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PulleyPivotActor2;                                		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1997 ];

		return pClassPointer;
	};

	void OnToggleConstraintDrive ( class USeqAct_ToggleConstraintDrive* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void TermConstraint ( );
	void InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold );
	void SetDisableCollision ( unsigned long NewDisableCollision );
};

UClass* ARB_ConstraintActor::pClassPointer = NULL;

// Class Engine.RB_LineImpulseActor
// 0x0011 (0x0199 - 0x0188)
class ARB_LineImpulseActor : public ARigidBodyBase
{
public:
	float                                              ImpulseStrength;                                  		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRange;                                     		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopAtFirstHit : 1;                              		// 0x0190 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x0190 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UArrowComponent*                             Arrow;                                            		// 0x0194 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      ImpulseCount;                                     		// 0x0198 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1999 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void FireLineImpulse ( );
};

UClass* ARB_LineImpulseActor::pClassPointer = NULL;

// Class Engine.RB_RadialImpulseActor
// 0x0009 (0x0191 - 0x0188)
class ARB_RadialImpulseActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0188 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                 		// 0x018C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      ImpulseCount;                                     		// 0x0190 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2001 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ARB_RadialImpulseActor::pClassPointer = NULL;

// Class Engine.RB_Thruster
// 0x0008 (0x0190 - 0x0188)
class ARB_Thruster : public ARigidBodyBase
{
public:
	unsigned long                                      bThrustEnabled : 1;                               		// 0x0188 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ThrustStrength;                                   		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2003 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* ARB_Thruster::pClassPointer = NULL;

// Class Engine.RB_ConstraintDrawComponent
// 0x0004 (0x0214 - 0x0210)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2005 ];

		return pClassPointer;
	};

};

UClass* URB_ConstraintDrawComponent::pClassPointer = NULL;

// Class Engine.RB_RadialImpulseComponent
// 0x0014 (0x0224 - 0x0210)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      ImpulseFalloff;                                   		// 0x0210 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseStrength;                                  		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRadius;                                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x021C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UDrawSphereComponent*                        PreviewSphere;                                    		// 0x0220 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2007 ];

		return pClassPointer;
	};

	void FireImpulse ( struct FVector Origin );
};

UClass* URB_RadialImpulseComponent::pClassPointer = NULL;

// Class Engine.RB_Handle
// 0x006B (0x00C4 - 0x0059)
class URB_Handle : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                 		// 0x005C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       GrabbedBoneName;                                  		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x0068 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInHardware : 1;                                  		// 0x006C (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bRotationConstrained : 1;                         		// 0x006C (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInterpolating : 1;                               		// 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FPointer                                    HandleData;                                       		// 0x0070 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    KinActorData;                                     		// 0x0074 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              LinearDamping;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearStiffness;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LinearStiffnessScale3D;                           		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LinearDampingScale3D;                             		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularStiffness;                                 		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Destination;                                      		// 0x00A0 (0x000C) [0x0000000000000000]              
	struct FVector                                     StepSize;                                         		// 0x00AC (0x000C) [0x0000000000000000]              
	struct FVector                                     Location;                                         		// 0x00B8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2009 ];

		return pClassPointer;
	};

	struct FQuat GetOrientation ( );
	void SetOrientation ( struct FQuat* NewOrientation );
	void UpdateSmoothLocation ( struct FVector* NewLocation );
	void SetSmoothLocation ( struct FVector NewLocation, float MoveTime );
	void SetLocation ( struct FVector NewLocation );
	void ReleaseComponent ( );
	void GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation );
};

UClass* URB_Handle::pClassPointer = NULL;

// Class Engine.RB_Spring
// 0x0053 (0x00AC - 0x0059)
class URB_Spring : public UActorComponent
{
public:
	class UPrimitiveComponent*                         Component1;                                       		// 0x005C (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName1;                                        		// 0x0060 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UPrimitiveComponent*                         Component2;                                       		// 0x0068 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName2;                                        		// 0x006C (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x0074 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x0078 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableForceMassRatio : 1;                        		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FPointer                                    SpringData;                                       		// 0x007C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TimeSinceActivation;                              		// 0x0080 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              MinBodyMass;                                      		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SpringSaturateDist;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringMaxForce;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForceMassRatio;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                          		// 0x0094 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DampSaturateVel;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampMaxForce;                                     		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2011 ];

		return pClassPointer;
	};

	void Clear ( );
	void SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 );
};

UClass* URB_Spring::pClassPointer = NULL;

// Class Engine.SVehicleSimBase
// 0x003B (0x0094 - 0x0059)
class USVehicleSimBase : public UActorComponent
{
public:
	float                                              WheelSuspensionStiffness;                         		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionDamping;                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionBias;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumSlip;                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumValue;                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteSlip;                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteValue;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumSlip;                             		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumValue;                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteSlip;                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteValue;                           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelInertia;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWheelSpeedOverride : 1;                          		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampedFrictionModel : 1;                        		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoDrive : 1;                                   		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              AutoDriveSteer;                                   		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2013 ];

		return pClassPointer;
	};

};

UClass* USVehicleSimBase::pClassPointer = NULL;

// Class Engine.SVehicleSimCar
// 0x0034 (0x00C8 - 0x0094)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                               		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                               		// 0x0098 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SteerSpeed;                                       		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseThrottle;                                  		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineBrakeFactor;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBrakeTorque;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsDriving : 1;                                   		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ActualSteering;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              TimeSinceThrottle;                                		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2015 ];

		return pClassPointer;
	};

};

UClass* USVehicleSimCar::pClassPointer = NULL;

// Class Engine.SVehicleSimTank
// 0x0030 (0x00F8 - 0x00C8)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                     		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              RightTrackVel;                                    		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              LeftTrackTorque;                                  		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              RightTrackTorque;                                 		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              MaxEngineTorque;                                  		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDamping;                                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InsideTrackTorqueFactor;                          		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringLatStiffnessFactor;                       		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceThrottle;                              		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnMaxGripReduction;                             		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnGripScaleRate;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTurnInPlaceOnSteer : 1;                          		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2017 ];

		return pClassPointer;
	};

};

UClass* USVehicleSimTank::pClassPointer = NULL;

// Class Engine.ActorFactoryApexClothing
// 0x0014 (0x00A0 - 0x008C)
class UActorFactoryApexClothing : public UActorFactorySkeletalMesh
{
public:
	TArray< class UApexClothingAsset* >                ClothingAssets;                                   		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ClothingRBChannel;                                		// 0x0098 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                ClothingRBCollideWithChannels;                    		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2019 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryApexClothing::pClassPointer = NULL;

// Class Engine.ApexDestructibleDamageParameters
// 0x000C (0x0048 - 0x003C)
class UApexDestructibleDamageParameters : public UObject
{
public:
	TArray< struct FDamagePair >                       DamageMap;                                        		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2021 ];

		return pClassPointer;
	};

};

UClass* UApexDestructibleDamageParameters::pClassPointer = NULL;

// Class Engine.FractureMaterial
// 0x0008 (0x0044 - 0x003C)
class UFractureMaterial : public UObject
{
public:
	class UParticleSystem*                             FractureEffect;                                   		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSound;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2023 ];

		return pClassPointer;
	};

};

UClass* UFractureMaterial::pClassPointer = NULL;

// Class Engine.PhysicalMaterial
// 0x006C (0x00A8 - 0x003C)
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                    		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Friction;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Restitution;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceConeFriction : 1;                           		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAnisotropicFriction : 1;                   		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     AnisoFrictionDir;                                 		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionV;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Density;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearDamping;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MagneticResponse;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindResponse;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactThreshold;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactReFireDelay;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactEffect;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideThreshold;                                   		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideReFireDelay;                                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SlideEffect;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SlideSound;                                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImpactDefinition*                           SlideImpactDefinition;                            		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundExplosion;                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundSingle;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           Parent;                                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                         		// 0x00A4 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2025 ];

		return pClassPointer;
	};

	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty ( class UClass* DesiredClass );
	void FindFractureSounds ( class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle );
	struct FPhysEffectInfo FindPhysEffectInfo ( unsigned char Type );
};

UClass* UPhysicalMaterial::pClassPointer = NULL;

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x003C - 0x003C)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2027 ];

		return pClassPointer;
	};

};

UClass* UPhysicalMaterialPropertyBase::pClassPointer = NULL;

// Class Engine.PhysicsAsset
// 0x0064 (0x00A0 - 0x003C)
class UPhysicsAsset : public UObject
{
public:
	TArray< class URB_BodySetup* >                     BodySetup;                                        		// 0x003C (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FMap_Mirror                                 BodySetupIndexMap;                                		// 0x0048 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      BoundsBodies;                                     		// 0x0084 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class URB_ConstraintSetup* >               ConstraintSetup;                                  		// 0x0090 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UPhysicsAssetInstance*                       DefaultInstance;                                  		// 0x009C (0x0004) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2029 ];

		return pClassPointer;
	};

	int FindBodyIndex ( struct FName BodyName );
};

UClass* UPhysicsAsset::pClassPointer = NULL;

// Class Engine.PhysicsAssetInstance
// 0x0078 (0x00B4 - 0x003C)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x003C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                RootBodyIndex;                                    		// 0x0040 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class URB_BodyInstance* >                  Bodies;                                           		// 0x0044 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class URB_ConstraintInstance* >            Constraints;                                      		// 0x0050 (0x000C) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FMap_Mirror                                 CollisionDisableTable;                            		// 0x005C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LinearSpringScale;                                		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearDampingScale;                               		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearForceLimitScale;                            		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularSpringScale;                               		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularDampingScale;                              		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularForceLimitScale;                           		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bInitBodies : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2031 ];

		return pClassPointer;
	};

	class URB_ConstraintInstance* FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset );
	class URB_BodyInstance* FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset );
	void SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh );
	void SetFullAnimWeightBlockRigidBody ( unsigned long bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh );
	void SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh );
	void SetNamedRBBoneSprings ( unsigned long bEnable, TArray< struct FName > BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp );
	void SetAllRBBoneSprings ( unsigned long bEnable, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp, unsigned long kSkipFullAnimWeightBodies );
	void SetNamedMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetAllMotorsAngularDriveTypeAndParams ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, unsigned char PositionDriveState, unsigned char VelocityDriveState, float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void ForceAllBodiesBelowUnfixed ( class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, unsigned long InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName );
	void SetNamedBodiesFixed ( unsigned long bNewFixed, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement, unsigned long bSkipFullAnimWeightBodies );
	void SetAllBodiesFixed ( unsigned long bNewFixed );
	float GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh );
	void SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale );
	void SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale );
};

UClass* UPhysicsAssetInstance::pClassPointer = NULL;

// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x0040 - 0x003C)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                               		// 0x003C (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2033 ];

		return pClassPointer;
	};

};

UClass* UPhysicsLODVerticalEmitter::pClassPointer = NULL;

// Class Engine.RB_BodyInstance
// 0x0060 (0x009C - 0x003C)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x003C (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                BodyIndex;                                        		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Velocity;                                         		// 0x0044 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviousVelocity;                                 		// 0x0050 (0x000C) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x005C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BodyData;                                         		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpring;                                       		// 0x0064 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpringKinActor;                               		// 0x0068 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableBoneSpringLinear : 1;                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableBoneSpringAngular : 1;                     		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableOnOverextension : 1;                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                  		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTeleportOnOverextension : 1;                     		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseKinActorForBoneSpring : 1;                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;          		// 0x006C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bOnlyCollideWithPawns : 1;                        		// 0x006C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableCollisionResponse : 1;                     		// 0x006C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPushBody : 1;                                    		// 0x006C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceUnfixed : 1;                                		// 0x006C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bInstanceAlwaysFullAnimWeight : 1;                		// 0x006C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	float                                              BoneLinearSpring;                                 		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneLinearDamping;                                		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularSpring;                                		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularDamping;                               		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverextensionThreshold;                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomGravityFactor;                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastEffectPlayedTime;                             		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContactReportForceThreshold;                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceMassScale;                                		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceDampingScale;                             		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2035 ];

		return pClassPointer;
	};

	void SetNotifyCollision ( unsigned long bNotify );
	void UpdateDampingProperties ( );
	void UpdateMassProperties ( class URB_BodySetup* Setup );
	void SetContactReportForceThreshold ( float Threshold );
	void EnableCollisionResponse ( unsigned long bEnableResponse );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	void SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget );
	void SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping );
	void EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget );
	struct FVector GetUnrealWorldVelocityAtPoint ( struct FVector Point );
	struct FVector GetUnrealWorldAngularVelocity ( );
	struct FVector GetUnrealWorldVelocity ( );
	struct FMatrix GetUnrealWorldTM ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	bool IsValidBodyInstance ( );
	bool IsFixed ( );
	void SetFixed ( unsigned long bNewFixed );
	float GetBodyMass ( );
};

UClass* URB_BodyInstance::pClassPointer = NULL;

// Class Engine.RB_ConstraintInstance
// 0x0070 (0x00AC - 0x003C)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x003C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x0040 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                ConstraintIndex;                                  		// 0x0044 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x0048 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x004C (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bLinearXPositionDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearXVelocityDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYPositionDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYVelocityDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZPositionDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZVelocityDrive : 1;                        		// 0x004C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingPositionDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingVelocityDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistPositionDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistVelocityDrive : 1;                          		// 0x004C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAngularSlerpDrive : 1;                           		// 0x004C (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTerminated : 1;                                  		// 0x004C (0x0004) [0x0000000000000000] [0x00001000] 
	struct FPointer                                    ConstraintData;                                   		// 0x0050 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     LinearPositionTarget;                             		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LinearVelocityTarget;                             		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveSpring;                                		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveDamping;                               		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveForceLimit;                            		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0078 (0x0008) MISSED OFFSET
	struct FQuat                                       AngularPositionTarget;                            		// 0x0080 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AngularVelocityTarget;                            		// 0x0090 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveSpring;                               		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveDamping;                              		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveForceLimit;                           		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    DummyKinActor;                                    		// 0x00A8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2037 ];

		return pClassPointer;
	};

	void MoveKinActorTransform ( struct FMatrix* NewTM );
	void SetLinearLimitSize ( float NewLimitSize );
	void SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup );
	void SetAngularDriveTypeAndParams ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, unsigned char PositionDriveState, unsigned char VelocityDriveState, float InSpring, float InDamping, float InForceLimit, class UPhysicsAssetInstance* PhysInst );
	void SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetAngularVelocityTarget ( struct FVector InVelTarget );
	void SetAngularPositionTarget ( struct FQuat* InPosTarget );
	void SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetLinearVelocityTarget ( struct FVector InVelTarget );
	void SetLinearPositionTarget ( struct FVector InPosTarget );
	void SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	void SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	struct FVector GetConstraintLocation ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	void TermConstraint ( );
	void InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Bone1Scale, float Bone2Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1, class UPhysicsAssetInstance* PhysInst );
};

UClass* URB_ConstraintInstance::pClassPointer = NULL;

// Class Engine.RB_ConstraintSetup
// 0x00C4 (0x0100 - 0x003C)
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                        		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ConstraintBone1;                                  		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ConstraintBone2;                                  		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Pos1;                                             		// 0x0054 (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis1;                                         		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis1;                                         		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     Pos2;                                             		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis2;                                         		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis2;                                         		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot1;                                     		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot2;                                     		// 0x00A8 (0x000C) [0x0000000000000000]              
	unsigned long                                      bEnableProjection : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLinearLimitSoft : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLinearBreakable : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSwingLimited : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTwistLimited : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSwingLimitSoft : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTwistLimitSoft : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAngularBreakable : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsPulley : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMaintainMinDistance : 1;                         		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	struct FLinearDOFSetup                             LinearXSetup;                                     		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearYSetup;                                     		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearZSetup;                                     		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitStiffness;                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitDamping;                               		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearBreakThreshold;                             		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing1LimitAngle;                                 		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing2LimitAngle;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitAngle;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitStiffness;                              		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitDamping;                                		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitStiffness;                              		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitDamping;                                		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularBreakThreshold;                            		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PulleyRatio;                                      		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2039 ];

		return pClassPointer;
	};

};

UClass* URB_ConstraintSetup::pClassPointer = NULL;

// Class Engine.RB_BSJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2041 ];

		return pClassPointer;
	};

};

UClass* URB_BSJointSetup::pClassPointer = NULL;

// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2043 ];

		return pClassPointer;
	};

};

UClass* URB_DistanceJointSetup::pClassPointer = NULL;

// Class Engine.RB_HingeSetup
// 0x0000 (0x0100 - 0x0100)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2045 ];

		return pClassPointer;
	};

};

UClass* URB_HingeSetup::pClassPointer = NULL;

// Class Engine.RB_PrismaticSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2047 ];

		return pClassPointer;
	};

};

UClass* URB_PrismaticSetup::pClassPointer = NULL;

// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2049 ];

		return pClassPointer;
	};

};

UClass* URB_PulleyJointSetup::pClassPointer = NULL;

// Class Engine.RB_SkelJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2051 ];

		return pClassPointer;
	};

};

UClass* URB_SkelJointSetup::pClassPointer = NULL;

// Class Engine.RB_StayUprightSetup
// 0x0000 (0x0100 - 0x0100)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2053 ];

		return pClassPointer;
	};

};

UClass* URB_StayUprightSetup::pClassPointer = NULL;

// Class Engine.SVehicleWheel
// 0x00D8 (0x0120 - 0x0048)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                            		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              MotorTorque;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              BrakeTorque;                                      		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              ChassisTorque;                                    		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPoweredWheel : 1;                                		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHoverWheel : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNoContactWheel : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCollidesVehicles : 1;                            		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCollidesPawns : 1;                               		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIsSquealing : 1;                                 		// 0x0058 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWheelOnGround : 1;                               		// 0x0058 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bForceWantsParticleComponent : 1;                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	float                                              SteerFactor;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SkelControlName;                                  		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlWheel*                           WheelControl;                                     		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoneOffset;                                       		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRadius;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravel;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionSpeed;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             WheelParticleSystem;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Side;                                             		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongSlipFactor;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatSlipFactor;                                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLongSlipFactor;                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLatSlipFactor;                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactorLat;                              		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactorLong;                             		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WheelPosition;                                    		// 0x00AC (0x000C) [0x0000000000000000]              
	float                                              SpinVel;                                          		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              LongSlipRatio;                                    		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              LatSlipAngle;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FVector                                     ContactNormal;                                    		// 0x00C4 (0x000C) [0x0000000000000000]              
	struct FVector                                     LongDirection;                                    		// 0x00D0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LatDirection;                                     		// 0x00DC (0x000C) [0x0000000000000000]              
	float                                              ContactForce;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              LongImpulse;                                      		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              LatImpulse;                                       		// 0x00F0 (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           ContactPhysMat;                                   		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              WaterContactZOffset;                              		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              DesiredSuspensionPosition;                        		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              SuspensionPosition;                               		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              CurrentRotation;                                  		// 0x0104 (0x0004) [0x0000000000000000]              
	struct FPointer                                    WheelShape;                                       		// 0x0108 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                WheelMaterialIndex;                               		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UClass*                                      WheelPSCClass;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    WheelParticleComp;                                		// 0x0114 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       SlipParticleParamName;                            		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2055 ];

		return pClassPointer;
	};

};

UClass* USVehicleWheel::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldBrush
// 0x00CC (0x0288 - 0x01BC)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int                                                ExcludeChannel;                                   		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x01C4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Coordinates;                                      		// 0x01C5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x01C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x01D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x01E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x01EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x01F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x0204 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x0210 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x021C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x0228 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0234 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0240 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x024C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ForceField;                                       		// 0x025C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x0260 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x026C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0278 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    LinearKernel;                                     		// 0x0284 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2057 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

UClass* ANxGenericForceFieldBrush::pClassPointer = NULL;

// Class Engine.RB_ForceFieldExcludeVolume
// 0x0004 (0x01C0 - 0x01BC)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2059 ];

		return pClassPointer;
	};

};

UClass* ARB_ForceFieldExcludeVolume::pClassPointer = NULL;

// Class Engine.NxForceField
// 0x0040 (0x01C8 - 0x0188)
class ANxForceField : public AActor
{
public:
	int                                                ExcludeChannel;                                   		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x018C (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0190 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x0194 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ForceField;                                       		// 0x0198 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x019C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x01A8 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x01B4 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    U2NRotation;                                      		// 0x01C0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x01C4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2061 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
	void DoInitRBPhys ( );
};

UClass* ANxForceField::pClassPointer = NULL;

// Class Engine.NxCylindricalForceField
// 0x002C (0x01F4 - 0x01C8)
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x01EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x01F0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2063 ];

		return pClassPointer;
	};

};

UClass* ANxCylindricalForceField::pClassPointer = NULL;

// Class Engine.NxCylindricalForceFieldCapsule
// 0x0004 (0x01F8 - 0x01F4)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x01F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2065 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};

UClass* ANxCylindricalForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxForceFieldGeneric
// 0x00B0 (0x0278 - 0x01C8)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x01C8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x01CC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RoughExtentX;                                     		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentY;                                     		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentZ;                                     		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x01DC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x01E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x01EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x01F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x0204 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x0210 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x021C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x0228 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x0234 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x0240 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x024C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0258 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0264 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x0274 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2067 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};

UClass* ANxForceFieldGeneric::pClassPointer = NULL;

// Class Engine.NxForceFieldRadial
// 0x001C (0x01E4 - 0x01C8)
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x01C8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x01CC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x01DC (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    Kernel;                                           		// 0x01E0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2069 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};

UClass* ANxForceFieldRadial::pClassPointer = NULL;

// Class Engine.NxForceFieldTornado
// 0x0038 (0x0200 - 0x01C8)
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x01C8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x01CC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x01FC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2071 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};

UClass* ANxForceFieldTornado::pClassPointer = NULL;

// Class Engine.NxGenericForceField
// 0x009C (0x0264 - 0x01C8)
class ANxGenericForceField : public ANxForceField
{
public:
	unsigned char                                      Coordinates;                                      		// 0x01C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x01CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x01D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x01E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x01F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x01FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x0208 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x0214 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x0220 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x022C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0238 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0244 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0250 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x0260 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2073 ];

		return pClassPointer;
	};

};

UClass* ANxGenericForceField::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldBox
// 0x0010 (0x0274 - 0x0264)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                                  		// 0x0264 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     BoxExtent;                                        		// 0x0268 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2075 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};

UClass* ANxGenericForceFieldBox::pClassPointer = NULL;

// Class Engine.NxGenericForceFieldCapsule
// 0x000C (0x0270 - 0x0264)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0264 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CapsuleHeight;                                    		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2077 ];

		return pClassPointer;
	};

};

UClass* ANxGenericForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxRadialForceField
// 0x0014 (0x01DC - 0x01C8)
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x01C8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x01D4 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    LinearKernel;                                     		// 0x01D8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2079 ];

		return pClassPointer;
	};

};

UClass* ANxRadialForceField::pClassPointer = NULL;

// Class Engine.NxRadialCustomForceField
// 0x0008 (0x01E4 - 0x01DC)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                             		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x01E0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2081 ];

		return pClassPointer;
	};

};

UClass* ANxRadialCustomForceField::pClassPointer = NULL;

// Class Engine.NxTornadoAngularForceField
// 0x0030 (0x01F8 - 0x01C8)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x01EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x01F4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2083 ];

		return pClassPointer;
	};

};

UClass* ANxTornadoAngularForceField::pClassPointer = NULL;

// Class Engine.NxTornadoAngularForceFieldCapsule
// 0x0004 (0x01FC - 0x01F8)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x01F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2085 ];

		return pClassPointer;
	};

};

UClass* ANxTornadoAngularForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxTornadoForceField
// 0x002C (0x01F4 - 0x01C8)
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x01EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x01F0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2087 ];

		return pClassPointer;
	};

};

UClass* ANxTornadoForceField::pClassPointer = NULL;

// Class Engine.NxTornadoForceFieldCapsule
// 0x0004 (0x01F8 - 0x01F4)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x01F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2089 ];

		return pClassPointer;
	};

};

UClass* ANxTornadoForceFieldCapsule::pClassPointer = NULL;

// Class Engine.NxForceFieldSpawnable
// 0x0004 (0x018C - 0x0188)
class ANxForceFieldSpawnable : public AActor
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                              		// 0x0188 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2091 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ANxForceFieldSpawnable::pClassPointer = NULL;

// Class Engine.RB_CylindricalForceActor
// 0x0030 (0x01B8 - 0x0188)
class ARB_CylindricalForceActor : public ARigidBodyBase
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                  		// 0x0188 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x01B0 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x01B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2093 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ARB_CylindricalForceActor::pClassPointer = NULL;

// Class Engine.RB_RadialForceActor
// 0x0020 (0x01A8 - 0x0188)
class ARB_RadialForceActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0188 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwirlStrength;                                    		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinTorque;                                       		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x019C (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	unsigned char                                      RadialForceMode;                                  		// 0x019D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x01A0 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x01A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x01A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x01A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x01A0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2095 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ARB_RadialForceActor::pClassPointer = NULL;

// Class Engine.NxForceFieldComponent
// 0x0050 (0x0260 - 0x0210)
class UNxForceFieldComponent : public UPrimitiveComponent
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0210 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x0214 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                ExcludeChannel;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDestroyWhenInactive : 1;                         		// 0x021C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0220 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Duration;                                         		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ForceField;                                       		// 0x0228 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x022C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x0238 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0244 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x0250 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ElapsedTime;                                      		// 0x0254 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         RenderComponent;                                  		// 0x0258 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPointer                                    RBPhysScene;                                      		// 0x025C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2097 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};

UClass* UNxForceFieldComponent::pClassPointer = NULL;

// Class Engine.NxForceFieldCylindricalComponent
// 0x002C (0x028C - 0x0260)
class UNxForceFieldCylindricalComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0288 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2099 ];

		return pClassPointer;
	};

};

UClass* UNxForceFieldCylindricalComponent::pClassPointer = NULL;

// Class Engine.NxForceFieldGenericComponent
// 0x00A8 (0x0308 - 0x0260)
class UNxForceFieldGenericComponent : public UNxForceFieldComponent
{
public:
	float                                              RoughExtentX;                                     		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentY;                                     		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentZ;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x026C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0270 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x0288 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x0294 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x02E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x02F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0304 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2101 ];

		return pClassPointer;
	};

};

UClass* UNxForceFieldGenericComponent::pClassPointer = NULL;

// Class Engine.NxForceFieldRadialComponent
// 0x0014 (0x0274 - 0x0260)
class UNxForceFieldRadialComponent : public UNxForceFieldComponent
{
public:
	float                                              ForceStrength;                                    		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x026C (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    Kernel;                                           		// 0x0270 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2103 ];

		return pClassPointer;
	};

};

UClass* UNxForceFieldRadialComponent::pClassPointer = NULL;

// Class Engine.NxForceFieldTornadoComponent
// 0x0030 (0x0290 - 0x0260)
class UNxForceFieldTornadoComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x028C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2105 ];

		return pClassPointer;
	};

};

UClass* UNxForceFieldTornadoComponent::pClassPointer = NULL;

// Class Engine.ForceFieldShape
// 0x0000 (0x003C - 0x003C)
class UForceFieldShape : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2107 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Dimension );
	void eventFillBySphere ( float Radius );
};

UClass* UForceFieldShape::pClassPointer = NULL;

// Class Engine.ForceFieldShapeBox
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                            		// 0x003C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2109 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	struct FVector eventGetRadii ( );
};

UClass* UForceFieldShapeBox::pClassPointer = NULL;

// Class Engine.ForceFieldShapeCapsule
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                            		// 0x003C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2111 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
	float eventGetHeight ( );
};

UClass* UForceFieldShapeCapsule::pClassPointer = NULL;

// Class Engine.ForceFieldShapeSphere
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                            		// 0x003C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2113 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
};

UClass* UForceFieldShapeSphere::pClassPointer = NULL;

// Class Engine.PrefabInstance
// 0x00C0 (0x0248 - 0x0188)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                   		// 0x0188 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TemplateVersion;                                  		// 0x018C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0190 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	class UPrefabSequence*                             SequenceInstance;                                 		// 0x01CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_PackageVersion;                                		// 0x01D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_LicenseePackageVersion;                        		// 0x01D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_GamePackageVersion;                            		// 0x01D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< unsigned char >                            PI_Bytes;                                         		// 0x01DC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_CompleteObjects;                               		// 0x01E8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_ReferencedObjects;                             		// 0x01F4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           PI_SavedNames;                                    		// 0x0200 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x020C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2115 ];

		return pClassPointer;
	};

};

UClass* APrefabInstance::pClassPointer = NULL;

// Class Engine.Prefab
// 0x0020 (0x005C - 0x003C)
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                    		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           PrefabArchetypes;                                 		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           RemovedArchetypes;                                		// 0x004C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UPrefabSequence*                             PrefabSequence;                                   		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2117 ];

		return pClassPointer;
	};

};

UClass* UPrefab::pClassPointer = NULL;

// Class Engine.SequenceObject
// 0x000C (0x0048 - 0x003C)
class USequenceObject : public UObject
{
public:
	int                                                ObjInstanceVersion;                               		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USequence*                                   ParentSequence;                                   		// 0x0040 (0x0004) [0x0000000001000002]              ( CPF_Const )
	unsigned long                                      bDeletable : 1;                                   		// 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDrawFirst : 1;                                   		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDrawLast : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOutputObjCommentToScreen : 1;                    		// 0x0044 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSuppressAutoComment : 1;                         		// 0x0044 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bShouldPersistWhenStreamedOut : 1;                		// 0x0044 (0x0004) [0x0000000000020001] [0x00000020] ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2119 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventIsPastingIntoLevelSequenceAllowed ( );
	bool eventIsValidLevelSequenceObject ( );
	class AWorldInfo* GetWorldInfo ( );
	void ScriptLog ( struct FString LogText, unsigned long bWarning );
};

UClass* USequenceObject::pClassPointer = NULL;

// Class Engine.SequenceOp
// 0x0044 (0x008C - 0x0048)
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bIsActivated : 1;                                 		// 0x0048 (0x0004) [0x0000000001202000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsCurrentDebuggerOp : 1;                         		// 0x0048 (0x0004) [0x0000000001202000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bActive : 1;                                      		// 0x0048 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bLatentExecution : 1;                             		// 0x0048 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bSupportsMultipleActivations : 1;                 		// 0x0048 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bAutoActivateOutputLinks : 1;                     		// 0x0048 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHaveMovingVarConnector : 1;                      		// 0x0048 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bHaveMovingInputConnector : 1;                    		// 0x0048 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bHaveMovingOutputConnector : 1;                   		// 0x0048 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bPendingVarConnectorRecalc : 1;                   		// 0x0048 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bPendingInputConnectorRecalc : 1;                 		// 0x0048 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bPendingOutputConnectorRecalc : 1;                		// 0x0048 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bIsBreakpointSet : 1;                             		// 0x0048 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIsHiddenBreakpointSet : 1;                       		// 0x0048 (0x0004) [0x0000000001202000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bFlipWidgetVertical : 1;                          		// 0x0048 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	TArray< struct FSeqOpInputLink >                   InputLinks;                                       		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqOpOutputLink >                  OutputLinks;                                      		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqVarLink >                       VariableLinks;                                    		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqEventLink >                     EventLinks;                                       		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerIndex;                                      		// 0x007C (0x0004) [0x0000000001002000]              ( CPF_Transient )
	unsigned char                                      GamepadID;                                        		// 0x0080 (0x0001) [0x0000000001002000]              ( CPF_Transient )
	int                                                ActivateCount;                                    		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SearchTag;                                        		// 0x0088 (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2121 ];

		return pClassPointer;
	};

	void ForceActivateOutput ( int OutputIdx );
	void ForceActivateInput ( int InputIdx );
	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateNamedOutputLink ( struct FString LinkDesc );
	bool ActivateOutputLink ( int OutputIdx );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars );
	void GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData );
	void GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};

UClass* USequenceOp::pClassPointer = NULL;

// Class Engine.SequenceEvent
// 0x0038 (0x00C4 - 0x008C)
class USequenceEvent : public USequenceOp
{
public:
	TArray< class USequenceEvent* >                    DuplicateEvts;                                    		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      Originator;                                       		// 0x0098 (0x0004) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              ActivationTime;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                TriggerCount;                                     		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                MaxTriggerCount;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReTriggerDelay;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAIOnly : 1;                                      		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRegistered : 1;                                  		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x00B0 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned char                                      Priority;                                         		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxWidth;                                         		// 0x00B8 (0x0004) [0x0000000000000000]              
	class UPawnAllegiance*                             RequiredAllegiance;                               		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USequenceEventCustomEnableCondition*         CustomEnableCondition;                            		// 0x00C0 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2123 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};

UClass* USequenceEvent::pClassPointer = NULL;

// Class Engine.SequenceEventCustomEnableCondition
// 0x0000 (0x003C - 0x003C)
class USequenceEventCustomEnableCondition : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2125 ];

		return pClassPointer;
	};

};

UClass* USequenceEventCustomEnableCondition::pClassPointer = NULL;

// Class Engine.SequenceFrame
// 0x0018 (0x0060 - 0x0048)
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                            		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SizeY;                                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BorderWidth;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawBox : 1;                                     		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFilled : 1;                                      		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTileFill : 1;                                    		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FColor                                      BorderColor;                                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FillColor;                                        		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2127 ];

		return pClassPointer;
	};

};

UClass* USequenceFrame::pClassPointer = NULL;

// Class Engine.SavingSequenceFrame
// 0x0000 (0x0060 - 0x0060)
class USavingSequenceFrame : public USequenceFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2129 ];

		return pClassPointer;
	};

};

UClass* USavingSequenceFrame::pClassPointer = NULL;

// Class Engine.SequenceFrameWrapped
// 0x0000 (0x0060 - 0x0060)
class USequenceFrameWrapped : public USequenceFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2131 ];

		return pClassPointer;
	};

};

UClass* USequenceFrameWrapped::pClassPointer = NULL;

// Class Engine.SeqDef_Base
// 0x0004 (0x0090 - 0x008C)
class USeqDef_Base : public USequenceOp
{
public:
	class UGBXDefinition*                              Definition;                                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2133 ];

		return pClassPointer;
	};

};

UClass* USeqDef_Base::pClassPointer = NULL;

// Class Engine.Sequence
// 0x005C (0x00E8 - 0x008C)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                          		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class USequenceObject* >                   SequenceObjects;                                  		// 0x0090 (0x000C) [0x000000000040000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink )
	TArray< class USequenceOp* >                       ActiveSequenceOps;                                		// 0x009C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USequence* >                         NestedSequences;                                  		// 0x00A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USequenceEvent* >                    UnregisteredEvents;                               		// 0x00B4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FActivateOp >                       DelayedActivatedOps;                              		// 0x00C0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FQueuedActivationInfo >             QueuedActivations;                                		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DefaultViewX;                                     		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                DefaultViewY;                                     		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              DefaultViewZoom;                                  		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2135 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bInEnabled );
	void Reset ( );
	void FindSeqObjectsByName ( struct FString SeqObjName, unsigned long bCheckComment, unsigned long bRecursive, unsigned long bUseFullLevelName, TArray< class USequenceObject* >* OutputObjects );
	void FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, TArray< class USequenceObject* >* OutputObjects );
};

UClass* USequence::pClassPointer = NULL;

// Class Engine.PrefabSequence
// 0x0004 (0x00EC - 0x00E8)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                      		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2137 ];

		return pClassPointer;
	};

	class APrefabInstance* GetOwnerPrefab ( );
	void SetOwnerPrefab ( class APrefabInstance* InOwner );
};

UClass* UPrefabSequence::pClassPointer = NULL;

// Class Engine.PrefabSequenceContainer
// 0x0000 (0x00E8 - 0x00E8)
class UPrefabSequenceContainer : public USequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2139 ];

		return pClassPointer;
	};

};

UClass* UPrefabSequenceContainer::pClassPointer = NULL;

// Class Engine.SequenceDefinition
// 0x0000 (0x00E8 - 0x00E8)
class USequenceDefinition : public USequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2141 ];

		return pClassPointer;
	};

};

UClass* USequenceDefinition::pClassPointer = NULL;

// Class Engine.SequenceAction
// 0x0018 (0x00A4 - 0x008C)
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                      		// 0x008C (0x0008) [0x0000000000000000]              
	unsigned long                                      bCallHandler : 1;                                 		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UObject* >                           Targets;                                          		// 0x0098 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2143 ];

		return pClassPointer;
	};

};

UClass* USequenceAction::pClassPointer = NULL;

// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2145 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ActivateRemoteEvent::pClassPointer = NULL;

// Class Engine.SeqAct_AndGate
// 0x001C (0x00C0 - 0x00A4)
class USeqAct_AndGate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< unsigned long >                            LinkedOutputFiredStatus;                          		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPointer >                          LinkedOutputs;                                    		// 0x00B4 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2147 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AndGate::pClassPointer = NULL;

// Class Engine.SeqAct_ApplyBehavior
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_ApplyBehavior : public USequenceAction
{
public:
	TArray< class UBehaviorBase* >                     Behaviors;                                        		// 0x00A4 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2149 ];

		return pClassPointer;
	};

	void eventApplyBehaviors ( class UObject* Context );
};

UClass* USeqAct_ApplyBehavior::pClassPointer = NULL;

// Class Engine.SeqAct_ApplySoundNode
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  ApplyNode;                                        		// 0x00A8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2151 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ApplySoundNode::pClassPointer = NULL;

// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                            		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2153 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AttachToEvent::pClassPointer = NULL;

// Class Engine.SeqAct_CameraFade
// 0x0028 (0x00CC - 0x00A4)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   FadeAlpha;                                        		// 0x00A8 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              FadeOpacity;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTime;                                         		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPersistFade : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              FadeTimeRemaining;                                		// 0x00BC (0x0004) [0x0000000000000000]              
	TArray< class APlayerController* >                 CachedPCs;                                        		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2155 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_CameraFade::pClassPointer = NULL;

// Class Engine.SeqAct_CameraLookAt
// 0x0034 (0x00D8 - 0x00A4)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysFocus : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAdjustCamera : 1;                                		// 0x00A4 (0x0004) [0x0000000020000000] [0x00000004] ( CPF_Deprecated )
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreTrace : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectHead : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRotatePlayerWithCamera : 1;                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bToggleGodMode : 1;                               		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bLeaveCameraRotation : 1;                         		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUsedTimer : 1;                                   		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCheckLineOfSight : 1;                            		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	struct FVector2D                                   InterpSpeedRange;                                 		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   InFocusFOV;                                       		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FocusBoneName;                                    		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TextDisplay;                                      		// 0x00C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TotalTime;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraFOV;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemainingTime;                                    		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2157 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_CameraLookAt::pClassPointer = NULL;

// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x00A9 - 0x00A4)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                               		// 0x00A4 (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bBlockActors : 1;                                 		// 0x00A4 (0x0004) [0x0000000000020003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x00A4 (0x0004) [0x0000000000020003] [0x00000004] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      CollisionType;                                    		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2159 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ChangeCollision::pClassPointer = NULL;

// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2161 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CommitMapChange::pClassPointer = NULL;

// Class Engine.SeqAct_ConsoleCommand
// 0x0018 (0x00BC - 0x00A4)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                          		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           Commands;                                         		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2163 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void VersionUpdated ( int OldVersion, int NewVersion );
};

UClass* USeqAct_ConsoleCommand::pClassPointer = NULL;

// Class Engine.SeqAct_ConvertToString
// 0x0014 (0x00B8 - 0x00A4)
class USeqAct_ConvertToString : public USequenceAction
{
public:
	unsigned long                                      bIncludeVarComment : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     VarSeparator;                                     		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumberOfInputs;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2165 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ConvertToString::pClassPointer = NULL;

// Class Engine.SeqAct_DrawText
// 0x003C (0x00E0 - 0x00A4)
class USeqAct_DrawText : public USequenceAction
{
public:
	float                                              DisplayTimeSeconds;                               		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisplayOnObject : 1;                             		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FKismetDrawTextInfo                         DrawTextInfo;                                     		// 0x00AC (0x0034) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2167 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_DrawText::pClassPointer = NULL;

// Class Engine.SeqAct_FinishSequence
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                      		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2169 ];

		return pClassPointer;
	};

};

UClass* USeqAct_FinishSequence::pClassPointer = NULL;

// Class Engine.SeqAct_Gate
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                AutoCloseCount;                                   		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentCloseCount;                                		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2171 ];

		return pClassPointer;
	};

};

UClass* USeqAct_Gate::pClassPointer = NULL;

// Class Engine.SeqAct_GetDistance
// 0x0005 (0x00A9 - 0x00A4)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                         		// 0x00A4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      Method;                                           		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2173 ];

		return pClassPointer;
	};

};

UClass* USeqAct_GetDistance::pClassPointer = NULL;

// Class Engine.SeqAct_GetLocationAndRotation
// 0x002C (0x00D0 - 0x00A4)
class USeqAct_GetLocationAndRotation : public USequenceAction
{
public:
	struct FVector                                     Location;                                         		// 0x00A4 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     RotationVector;                                   		// 0x00B0 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     Rotation;                                         		// 0x00BC (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FName                                       SocketOrBoneName;                                 		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2175 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_GetLocationAndRotation::pClassPointer = NULL;

// Class Engine.SeqAct_GetProperty
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                     		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2177 ];

		return pClassPointer;
	};

};

UClass* USeqAct_GetProperty::pClassPointer = NULL;

// Class Engine.SeqAct_GetVectorComponents
// 0x0018 (0x00BC - 0x00A4)
class USeqAct_GetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     InVector;                                         		// 0x00A4 (0x000C) [0x0000000000000000]              
	float                                              X;                                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              Y;                                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              Z;                                                		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2179 ];

		return pClassPointer;
	};

};

UClass* USeqAct_GetVectorComponents::pClassPointer = NULL;

// Class Engine.SeqAct_GetVelocity
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              VelocityMag;                                      		// 0x00A4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     VelocityVect;                                     		// 0x00A8 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2181 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_GetVelocity::pClassPointer = NULL;

// Class Engine.SeqAct_HeadTrackingControl
// 0x0080 (0x0124 - 0x00A4)
class USeqAct_HeadTrackingControl : public USequenceAction
{
public:
	TArray< struct FName >                             TrackControllerName;                              		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LookAtActorRadius;                                		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLookAtPawns : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MaxLookAtTime;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtTime;                                    		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInterestTime;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ActorClassesToLookAt;                             		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TargetBoneNames;                                  		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           LookAtTargets;                                    		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00E8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_HeadTrackingControl.ActorToComponentMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2183 ];

		return pClassPointer;
	};

	void eventActivated ( );
	int eventGetObjClassVersion ( );
};

UClass* USeqAct_HeadTrackingControl::pClassPointer = NULL;

// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bObjectFound : 1;                                 		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2185 ];

		return pClassPointer;
	};

};

UClass* USeqAct_IsInObjectList::pClassPointer = NULL;

// Class Engine.SeqAct_Latent
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_Latent : public USequenceAction
{
public:
	TArray< class AActor* >                            LatentActors;                                     		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAborted : 1;                                     		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2187 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void AbortFor ( class AActor* latentActor );
};

UClass* USeqAct_Latent::pClassPointer = NULL;

// Class Engine.SeqAct_ActorFactory
// 0x0044 (0x00F8 - 0x00B4)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsSpawning : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckSpawnCollision : 1;                         		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UActorFactory*                               Factory;                                          		// 0x00B8 (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      PointSelection;                                   		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x00C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SpawnLocations;                                   		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SpawnOrientations;                                		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                SpawnCount;                                       		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnDelay;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSpawnIdx;                                     		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                SpawnedCount;                                     		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              RemainingDelay;                                   		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2189 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ActorFactory::pClassPointer = NULL;

// Class Engine.SeqAct_ActorFactoryEx
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2191 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ActorFactoryEx::pClassPointer = NULL;

// Class Engine.SeqAct_ProjectileFactory
// 0x0014 (0x010C - 0x00F8)
class USeqAct_ProjectileFactory : public USeqAct_ActorFactory
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2193 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ProjectileFactory::pClassPointer = NULL;

// Class Engine.SeqAct_AIMoveToActor
// 0x001C (0x00D0 - 0x00B4)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                               		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFaceDestinationDirection : 1;                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPickClosest : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class AActor* >                            Destination;                                      		// 0x00B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MovementSpeedModifier;                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      LookAt;                                           		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastDestinationChoice;                            		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2195 ];

		return pClassPointer;
	};

	class AActor* PickDestination ( class AActor* Requestor );
	int eventGetObjClassVersion ( );
};

UClass* USeqAct_AIMoveToActor::pClassPointer = NULL;

// Class Engine.SeqAct_Delay
// 0x0014 (0x00C8 - 0x00B4)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStartWillRestart : 1;                            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              DefaultDuration;                                  		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Duration;                                         		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RemainingTime;                                    		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2197 ];

		return pClassPointer;
	};

	void ResetDelayActive ( );
	void Reset ( );
};

UClass* USeqAct_Delay::pClassPointer = NULL;

// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x00C4 - 0x00B4)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentIdx;                                       		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SwitchDelay;                                      		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextLinkTime;                                     		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2199 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DelaySwitch::pClassPointer = NULL;

// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x00B4 - 0x00B4)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2201 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ForceGarbageCollection::pClassPointer = NULL;

// Class Engine.SeqAct_Interp
// 0x00C4 (0x0178 - 0x00B4)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00B4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorTransforms
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00F0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorVisibilities
	float                                              PlayRate;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Position;                                         		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              ForceStartPosition;                               		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPaused : 1;                                      		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsBeingEdited : 1;                               		// 0x0138 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x0138 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRewindOnPlay : 1;                                		// 0x0138 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNoResetOnRewind : 1;                             		// 0x0138 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                      		// 0x0138 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bReversePlayback : 1;                             		// 0x0138 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bInterpForPathBuilding : 1;                       		// 0x0138 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bForceStartPos : 1;                               		// 0x0138 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDisableRadioFilter : 1;                          		// 0x0138 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x0138 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                      		// 0x0138 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIsSkippable : 1;                                 		// 0x0138 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bIsSkipped : 1;                                   		// 0x0138 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bShouldShowGore : 1;                              		// 0x0138 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      TestForInputActorsOnClient : 1;                   		// 0x0138 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpToLastFrame : 1;               		// 0x0138 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bFireCompleteEventWhenJumpToLastFrame : 1;        		// 0x0138 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bLastFrameEventFired : 1;                         		// 0x0138 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bSkipNextUpdate : 1;                              		// 0x0138 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bInitialReplication : 1;                          		// 0x0138 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	TArray< class ACoverLink* >                        LinkedCover;                                      		// 0x013C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UInterpData*                                 InterpData;                                       		// 0x0148 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UInterpGroupInst* >                  GroupInst;                                        		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      ReplicatedActorClass;                             		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AMatineeActor*                               ReplicatedActor;                                  		// 0x015C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                PreferredSplitScreenNum;                          		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCameraCutInfo >                    CameraCuts;                                       		// 0x0164 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TerminationTime;                                  		// 0x0170 (0x0004) [0x0000000000000000]              
	struct FRenderingPerformanceOverrides              RenderingOverrides;                               		// 0x0174 (0x0004) [0x0000000000044001]              ( CPF_Edit | CPF_Config | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2203 ];

		return pClassPointer;
	};

	bool IsNetworkReady ( );
	int eventGetObjClassVersion ( );
	void Reset ( );
	void AddPlayerToDirectorTracks ( class APlayerController* PC );
	void Stop ( );
	void SetPosition ( float NewPosition, unsigned long bJump );
};

UClass* USeqAct_Interp::pClassPointer = NULL;

// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x00B8 - 0x00B4)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                        		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2205 ];

		return pClassPointer;
	};

};

UClass* USeqAct_LevelStreamingBase::pClassPointer = NULL;

// Class Engine.SeqAct_LevelStreaming
// 0x0010 (0x00C8 - 0x00B8)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       LevelName;                                        		// 0x00BC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2207 ];

		return pClassPointer;
	};

};

UClass* USeqAct_LevelStreaming::pClassPointer = NULL;

// Class Engine.SeqAct_MultiLevelStreaming
// 0x0010 (0x00C8 - 0x00B8)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray< struct FLevelStreamingNameCombo >          Levels;                                           		// 0x00B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUnloadAllOtherLevels : 1;                        		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00C4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2209 ];

		return pClassPointer;
	};

};

UClass* USeqAct_MultiLevelStreaming::pClassPointer = NULL;

// Class Engine.SeqAct_LevelVisibility
// 0x0010 (0x00C4 - 0x00B4)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelName;                                        		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2211 ];

		return pClassPointer;
	};

};

UClass* USeqAct_LevelVisibility::pClassPointer = NULL;

// Class Engine.SeqAct_PlaySound
// 0x0020 (0x00D4 - 0x00B4)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraDelay;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundDuration;                                    		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeInTime;                                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMultiplier;                                 		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2213 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_PlaySound::pClassPointer = NULL;

// Class Engine.SeqAct_PrepareMapChange
// 0x0018 (0x00CC - 0x00B4)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                    		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             InitiallyLoadedSecondaryLevelNames;               		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsHighPriority : 1;                              		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTransitionToFakeEntry : 1;                       		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00C8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2215 ];

		return pClassPointer;
	};

	void SetSavedLevels ( TArray< struct FName > SavedLevels );
};

UClass* USeqAct_PrepareMapChange::pClassPointer = NULL;

// Class Engine.SeqAct_SetDOFParams
// 0x0058 (0x010C - 0x00B4)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                  		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBlurAmount;                                    		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              OldFalloffExponent;                               		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              OldBlurKernelSize;                                		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              OldMaxNearBlurAmount;                             		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              OldMinBlurAmount;                                 		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              OldMaxFarBlurAmount;                              		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              OldFocusInnerRadius;                              		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              OldFocusDistance;                                 		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FVector                                     OldFocusPosition;                                 		// 0x0100 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2217 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetDOFParams::pClassPointer = NULL;

// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x00C4 - 0x00B4)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                 		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              OldMotionBlurAmount;                              		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2219 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetMotionBlurParams::pClassPointer = NULL;

// Class Engine.SeqAct_StreamInTextures
// 0x0034 (0x00E8 - 0x00B4)
class USeqAct_StreamInTextures : public USeqAct_Latent
{
public:
	unsigned long                                      bLocationBased : 1;                               		// 0x00B4 (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned long                                      bStreamingActive : 1;                             		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bHasTriggeredAllLoaded : 1;                       		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	float                                              Seconds;                                          		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumWantingResourcesID;                            		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StopTimestamp;                                    		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           LocationActors;                                   		// 0x00C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                ForceMaterials;                                   		// 0x00D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FTextureGroupContainer                      CinematicTextureGroups;                           		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SelectedCinematicTextureGroups;                   		// 0x00E4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2221 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_StreamInTextures::pClassPointer = NULL;

// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0010 (0x00C4 - 0x00B4)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray< struct FName >                             LevelNames;                                       		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2223 ];

		return pClassPointer;
	};

	void eventActivated ( );
	bool CheckLevelsVisible ( );
};

UClass* USeqAct_WaitForLevelsVisible::pClassPointer = NULL;

// Class Engine.SeqAct_Log
// 0x0020 (0x00C4 - 0x00A4)
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncludeObjComment : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              TargetDuration;                                   		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetOffset;                                     		// 0x00AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LogMessage;                                       		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2225 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_Log::pClassPointer = NULL;

// Class Engine.SeqAct_ModifyCover
// 0x0014 (0x00B8 - 0x00A4)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray< int >                                      Slots;                                            		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ManualCoverType;                                  		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bManualAdjustPlayersOnly : 1;                     		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2227 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ModifyCover::pClassPointer = NULL;

// Class Engine.SeqAct_ModifyHealth
// 0x0020 (0x00C4 - 0x00A4)
class USeqAct_ModifyHealth : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDamageTypeDefinition*                       DamageTypeDefinition;                             		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UImpactDefinition*                           ImpactDefinition;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum;                                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Amount;                                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHeal : 1;                                        		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRadial : 1;                                      		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFalloff : 1;                                     		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2229 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ModifyHealth::pClassPointer = NULL;

// Class Engine.SeqAct_ParticleEventGenerator
// 0x0048 (0x00EC - 0x00A4)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseEmitterLocation : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           EventNames;                                       		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              EventTime;                                        		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventLocation;                                    		// 0x00BC (0x000C) [0x0000000000000000]              
	struct FVector                                     EventDirection;                                   		// 0x00C8 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x00D4 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x00E0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2231 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ParticleEventGenerator::pClassPointer = NULL;

// Class Engine.SeqAct_PhysXSwitch
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_PhysXSwitch : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2233 ];

		return pClassPointer;
	};

};

UClass* USeqAct_PhysXSwitch::pClassPointer = NULL;

// Class Engine.SeqAct_PlayCameraAnim
// 0x0020 (0x00C4 - 0x00A4)
class USeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 CameraAnim;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomStartTime : 1;                             		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rate;                                             		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntensityScale;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlaySpace;                                        		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      UserDefinedSpaceActor;                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2235 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_PlayCameraAnim::pClassPointer = NULL;

// Class Engine.SeqAct_PlayFaceFXAnim
// 0x0024 (0x00C8 - 0x00A4)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   SoundCueToPlay;                                   		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    AkEventToPlay;                                    		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2237 ];

		return pClassPointer;
	};

};

UClass* USeqAct_PlayFaceFXAnim::pClassPointer = NULL;

// Class Engine.SeqAct_PlayMusicTrack
// 0x0024 (0x00C8 - 0x00A4)
class USeqAct_PlayMusicTrack : public USequenceAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                       		// 0x00A4 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2239 ];

		return pClassPointer;
	};

};

UClass* USeqAct_PlayMusicTrack::pClassPointer = NULL;

// Class Engine.SeqAct_Possess
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                    		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bKillOldPawn : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTryToLeaveVehicle : 1;                           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBypassVehicleEntryAnimation : 1;                 		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2241 ];

		return pClassPointer;
	};

};

UClass* USeqAct_Possess::pClassPointer = NULL;

// Class Engine.SeqAct_SetApexClothingParam
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_SetApexClothingParam : public USequenceAction
{
public:
	unsigned long                                      bEnableApexClothingSimulation : 1;                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2243 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetApexClothingParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2245 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetBlockRigidBody::pClassPointer = NULL;

// Class Engine.SeqAct_SetCameraTarget
// 0x0014 (0x00B8 - 0x00A4)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                     		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FViewTargetTransitionParams                 TransitionParams;                                 		// 0x00A8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2247 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetCameraTarget::pClassPointer = NULL;

// Class Engine.SeqAct_SetMaterial
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialIndex;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2249 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetMaterial::pClassPointer = NULL;

// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2251 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetMatInstScalarParam::pClassPointer = NULL;

// Class Engine.SeqAct_SetMesh
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_SetMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MeshType;                                         		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsAllowedToMove : 1;                             		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowDecalsToReattach : 1;                       		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2253 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetMesh::pClassPointer = NULL;

// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00A5 - 0x00A4)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	unsigned char                                      newPhysics;                                       		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2255 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetPhysics::pClassPointer = NULL;

// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2257 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetRigidBodyIgnoreVehicles::pClassPointer = NULL;

// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2259 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetSequenceVariable::pClassPointer = NULL;

// Class Engine.SeqAct_AccessObjectList
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_AccessObjectList : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     OutputObject;                                     		// 0x00A4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ObjectIndex;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2261 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AccessObjectList::pClassPointer = NULL;

// Class Engine.SeqAct_AddFloat
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2263 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AddFloat::pClassPointer = NULL;

// Class Engine.SeqAct_AddInt
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2265 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AddInt::pClassPointer = NULL;

// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                            		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              FloatResult;                                      		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2267 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CastToFloat::pClassPointer = NULL;

// Class Engine.SeqAct_CastToInt
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Value;                                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2269 ];

		return pClassPointer;
	};

};

UClass* USeqAct_CastToInt::pClassPointer = NULL;

// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2271 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DivideFloat::pClassPointer = NULL;

// Class Engine.SeqAct_DivideInt
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2273 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DivideInt::pClassPointer = NULL;

// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                 		// 0x00A4 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2275 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ModifyObjectList::pClassPointer = NULL;

// Class Engine.SeqAct_MultiplyFloat
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2277 ];

		return pClassPointer;
	};

};

UClass* USeqAct_MultiplyFloat::pClassPointer = NULL;

// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2279 ];

		return pClassPointer;
	};

};

UClass* USeqAct_MultiplyInt::pClassPointer = NULL;

// Class Engine.SeqAct_SetBool
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2281 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetBool::pClassPointer = NULL;

// Class Engine.SeqAct_SetFloat
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                           		// 0x00A4 (0x0004) [0x0000000000000000]              
	TArray< float >                                    Value;                                            		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2283 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetFloat::pClassPointer = NULL;

// Class Engine.SeqAct_SetInt
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                           		// 0x00A4 (0x0004) [0x0000000000000000]              
	TArray< int >                                      Value;                                            		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2285 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetInt::pClassPointer = NULL;

// Class Engine.SeqAct_SetLocation
// 0x0020 (0x00C4 - 0x00A4)
class USeqAct_SetLocation : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bSetLocation : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetRotation : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     LocationValue;                                    		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationValue;                                    		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Target;                                           		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2287 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetLocation::pClassPointer = NULL;

// Class Engine.SeqAct_SetObject
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Value;                                            		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2289 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetObject::pClassPointer = NULL;

// Class Engine.SeqAct_SetString
// 0x0018 (0x00BC - 0x00A4)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                           		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Value;                                            		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2291 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetString::pClassPointer = NULL;

// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2293 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SubtractFloat::pClassPointer = NULL;

// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2295 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SubtractInt::pClassPointer = NULL;

// Class Engine.SeqAct_SetVectorComponents
// 0x0018 (0x00BC - 0x00A4)
class USeqAct_SetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     OutVector;                                        		// 0x00A4 (0x000C) [0x0000000000000000]              
	float                                              X;                                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              Y;                                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              Z;                                                		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2297 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetVectorComponents::pClassPointer = NULL;

// Class Engine.SeqAct_Switch
// 0x0018 (0x00BC - 0x00A4)
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IncrementAmount;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoDisableLinks : 1;                            		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< int >                                      Indices;                                          		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2299 ];

		return pClassPointer;
	};

};

UClass* USeqAct_Switch::pClassPointer = NULL;

// Class Engine.SeqAct_RandomSwitch
// 0x000C (0x00C8 - 0x00BC)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray< int >                                      AutoDisabledIndices;                              		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2301 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_RandomSwitch::pClassPointer = NULL;

// Class Engine.SeqAct_Timer
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                   		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Time;                                             		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2303 ];

		return pClassPointer;
	};

};

UClass* USeqAct_Timer::pClassPointer = NULL;

// Class Engine.SeqAct_Toggle
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_Toggle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2305 ];

		return pClassPointer;
	};

};

UClass* USeqAct_Toggle::pClassPointer = NULL;

// Class Engine.SeqAct_Trace
// 0x003C (0x00E0 - 0x00A4)
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTraceWorld : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     TraceExtent;                                      		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartOffset;                                      		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndOffset;                                        		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     HitObject;                                        		// 0x00CC (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              Distance;                                         		// 0x00D0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     HitLocation;                                      		// 0x00D4 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2307 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_Trace::pClassPointer = NULL;

// Class Engine.SequenceCondition
// 0x0000 (0x008C - 0x008C)
class USequenceCondition : public USequenceOp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2309 ];

		return pClassPointer;
	};

};

UClass* USequenceCondition::pClassPointer = NULL;

// Class Engine.SeqCond_CompareBool
// 0x0004 (0x0090 - 0x008C)
class USeqCond_CompareBool : public USequenceCondition
{
public:
	unsigned long                                      bResult : 1;                                      		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2311 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqCond_CompareBool::pClassPointer = NULL;

// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x0094 - 0x008C)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                           		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2313 ];

		return pClassPointer;
	};

};

UClass* USeqCond_CompareFloat::pClassPointer = NULL;

// Class Engine.SeqCond_CompareInt
// 0x0008 (0x0094 - 0x008C)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                           		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2315 ];

		return pClassPointer;
	};

};

UClass* USeqCond_CompareInt::pClassPointer = NULL;

// Class Engine.SeqCond_CompareObject
// 0x0000 (0x008C - 0x008C)
class USeqCond_CompareObject : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2317 ];

		return pClassPointer;
	};

};

UClass* USeqCond_CompareObject::pClassPointer = NULL;

// Class Engine.SeqCond_GetServerType
// 0x0000 (0x008C - 0x008C)
class USeqCond_GetServerType : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2319 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqCond_GetServerType::pClassPointer = NULL;

// Class Engine.SeqCond_Increment
// 0x000C (0x0098 - 0x008C)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueA;                                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2321 ];

		return pClassPointer;
	};

};

UClass* USeqCond_Increment::pClassPointer = NULL;

// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x0098 - 0x008C)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueA;                                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2323 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IncrementFloat::pClassPointer = NULL;

// Class Engine.SeqCond_IsAlive
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsAlive : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2325 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsAlive::pClassPointer = NULL;

// Class Engine.SeqCond_IsBenchmarking
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsBenchmarking : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2327 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqCond_IsBenchmarking::pClassPointer = NULL;

// Class Engine.SeqCond_IsConsole
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsConsole : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2329 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsConsole::pClassPointer = NULL;

// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2331 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsInCombat::pClassPointer = NULL;

// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x0090 - 0x008C)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2333 ];

		return pClassPointer;
	};

	bool eventCheckLogins ( );
};

UClass* USeqCond_IsLoggedIn::pClassPointer = NULL;

// Class Engine.SeqCond_IsPIE
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsPIE : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2335 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqCond_IsPIE::pClassPointer = NULL;

// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2337 ];

		return pClassPointer;
	};

};

UClass* USeqCond_IsSameTeam::pClassPointer = NULL;

// Class Engine.SeqCond_MatureLanguage
// 0x0000 (0x008C - 0x008C)
class USeqCond_MatureLanguage : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2339 ];

		return pClassPointer;
	};

};

UClass* USeqCond_MatureLanguage::pClassPointer = NULL;

// Class Engine.SeqCond_ShowGore
// 0x0000 (0x008C - 0x008C)
class USeqCond_ShowGore : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2341 ];

		return pClassPointer;
	};

};

UClass* USeqCond_ShowGore::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x008C - 0x008C)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2343 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

UClass* USeqCond_SwitchBase::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchClass
// 0x000C (0x0098 - 0x008C)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchClassInfo >                  ClassArray;                                       		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2345 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

UClass* USeqCond_SwitchClass::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchObject
// 0x000C (0x0098 - 0x008C)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchObjectCase >                 SupportedValues;                                  		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2347 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

UClass* USeqCond_SwitchObject::pClassPointer = NULL;

// Class Engine.SeqCond_SwitchPlatform
// 0x0000 (0x008C - 0x008C)
class USeqCond_SwitchPlatform : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2349 ];

		return pClassPointer;
	};

};

UClass* USeqCond_SwitchPlatform::pClassPointer = NULL;

// Class Engine.SeqEvent_AISeeEnemy
// 0x0004 (0x00C8 - 0x00C4)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2351 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_AISeeEnemy::pClassPointer = NULL;

// Class Engine.SeqEvent_AnimNotify
// 0x0008 (0x00CC - 0x00C4)
class USeqEvent_AnimNotify : public USequenceEvent
{
public:
	struct FName                                       NotifyName;                                       		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2353 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_AnimNotify::pClassPointer = NULL;

// Class Engine.SeqEvent_Console
// 0x0014 (0x00D8 - 0x00C4)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                 		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EventDesc;                                        		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2355 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_Console::pClassPointer = NULL;

// Class Engine.SeqEvent_ConstraintBroken
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2357 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_ConstraintBroken::pClassPointer = NULL;

// Class Engine.SeqEvent_Destroyed
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2359 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_Destroyed::pClassPointer = NULL;

// Class Engine.SeqEvent_LevelLoaded
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2361 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqEvent_LevelLoaded::pClassPointer = NULL;

// Class Engine.SeqEvent_Mover
// 0x0004 (0x00C8 - 0x00C4)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                     		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2363 ];

		return pClassPointer;
	};

	void NotifyFinishedOpen ( );
	void NotifyDetached ( class AActor* Other );
	void NotifyAttached ( class AActor* Other );
	void NotifyEncroachingOn ( class AActor* Hit );
	void eventRegisterEvent ( );
};

UClass* USeqEvent_Mover::pClassPointer = NULL;

// Class Engine.SeqEvent_ParticleEvent
// 0x0034 (0x00F8 - 0x00C4)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	unsigned char                                      EventType;                                        		// 0x00C4 (0x0001) [0x0000000000000000]              
	struct FVector                                     EventPosition;                                    		// 0x00C8 (0x000C) [0x0000000000000000]              
	float                                              EventEmitterTime;                                 		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              EventParticleTime;                                		// 0x00E4 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x00E8 (0x000C) [0x0000000000000000]              
	unsigned long                                      UseRelfectedImpactVector : 1;                     		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2365 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqEvent_ParticleEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_ProjectileLanded
// 0x0004 (0x00C8 - 0x00C4)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2367 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_ProjectileLanded::pClassPointer = NULL;

// Class Engine.SeqEvent_RemoteEvent
// 0x000C (0x00D0 - 0x00C4)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                        		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2369 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqEvent_RemoteEvent::pClassPointer = NULL;

// Class Engine.SeqEvent_RigidBodyCollision
// 0x0004 (0x00C8 - 0x00C4)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2371 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_RigidBodyCollision::pClassPointer = NULL;

// Class Engine.SeqEvent_SeeDeath
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2373 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_SeeDeath::pClassPointer = NULL;

// Class Engine.SeqEvent_SequenceActivated
// 0x000C (0x00D0 - 0x00C4)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                       		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2375 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_SequenceActivated::pClassPointer = NULL;

// Class Engine.SeqEvent_TakeDamage
// 0x0040 (0x0104 - 0x00C4)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                  		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageThreshold;                                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageTypes;                                      		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDamageTypeDefinition* >             DamageTypeDefinitions;                            		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoreDamageTypes;                                		// 0x00E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDamageTypeDefinition* >             IgnoreDamageTypeDefinitions;                      		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CurrentDamage;                                    		// 0x00FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bResetDamageOnToggle : 1;                         		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2377 ];

		return pClassPointer;
	};

	void eventToggled ( );
	int eventGetObjClassVersion ( );
	void Reset ( );
	void eventHandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, class UDamageTypeDefinition* inDamageTypeDefinition, float inAmount );
	bool IsValidDamageTypeDefinition ( class UDamageTypeDefinition* inDamageTypeDefinition );
	bool IsValidDamageType ( class UClass* inDamageType );
};

UClass* USeqEvent_TakeDamage::pClassPointer = NULL;

// Class Engine.SeqEvent_Touch
// 0x0034 (0x00F8 - 0x00C4)
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            ArchetypeFilter;                                  		// 0x00D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bForceOverlapping : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseInstigator : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowDeadPawns : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class AActor* >                            TouchedList;                                      		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2379 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void NotifyTouchingPawnDied ( class APawn* P );
	void eventToggled ( );
	bool CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
	bool CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
};

UClass* USeqEvent_Touch::pClassPointer = NULL;

// Class Engine.SeqEvent_Used
// 0x0030 (0x00F4 - 0x00C4)
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                               		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseInteractDistance : 1;                         		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              InteractDistance;                                 		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     InteractText;                                     		// 0x00CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  InteractIcon;                                     		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x00DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2381 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_Used::pClassPointer = NULL;

// Class Engine.SequenceVariable
// 0x0010 (0x0058 - 0x0048)
class USequenceVariable : public USequenceObject
{
public:
	struct FName                                       VarName;                                          		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLinkToAttribute : 1;                             		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UAttributeDefinition*                        OptionalAttributeDefinition;                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2383 ];

		return pClassPointer;
	};

};

UClass* USequenceVariable::pClassPointer = NULL;

// Class Engine.InterpData
// 0x0034 (0x008C - 0x0058)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                     		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              PathBuildTime;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	TArray< class UInterpGroup* >                      InterpGroups;                                     		// 0x0060 (0x000C) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x006C (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              EdSectionStart;                                   		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              EdSectionEnd;                                     		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShouldBakeAndPrune : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FAnimSetBakeAndPruneStatus >        BakeAndPruneStatus;                               		// 0x007C (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	class UInterpGroupDirector*                        CachedDirectorGroup;                              		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2385 ];

		return pClassPointer;
	};

};

UClass* UInterpData::pClassPointer = NULL;

// Class Engine.SeqVar_Bool
// 0x0004 (0x005C - 0x0058)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                           		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2387 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Bool::pClassPointer = NULL;

// Class Engine.SeqVar_External
// 0x0010 (0x0068 - 0x0058)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     VariableLabel;                                    		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2389 ];

		return pClassPointer;
	};

};

UClass* USeqVar_External::pClassPointer = NULL;

// Class Engine.SeqVar_Float
// 0x0004 (0x005C - 0x0058)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2391 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Float::pClassPointer = NULL;

// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x0064 - 0x005C)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                              		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2393 ];

		return pClassPointer;
	};

};

UClass* USeqVar_RandomFloat::pClassPointer = NULL;

// Class Engine.SeqVar_Int
// 0x0004 (0x005C - 0x0058)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2395 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Int::pClassPointer = NULL;

// Class Engine.SeqVar_RandomInt
// 0x0008 (0x0064 - 0x005C)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                              		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Max;                                              		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2397 ];

		return pClassPointer;
	};

};

UClass* USeqVar_RandomInt::pClassPointer = NULL;

// Class Engine.SeqVar_Named
// 0x0010 (0x0068 - 0x0058)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FindVarName;                                      		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2399 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Named::pClassPointer = NULL;

// Class Engine.SeqVar_Object
// 0x0010 (0x0068 - 0x0058)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                         		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ActorLocation;                                    		// 0x005C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2401 ];

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

UClass* USeqVar_Object::pClassPointer = NULL;

// Class Engine.SeqVar_Character
// 0x0004 (0x006C - 0x0068)
class USeqVar_Character : public USeqVar_Object
{
public:
	class UClass*                                      PawnClass;                                        		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2403 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Character::pClassPointer = NULL;

// Class Engine.SeqVar_Group
// 0x0018 (0x0080 - 0x0068)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                        		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCachedList : 1;                                  		// 0x0070 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class UObject* >                           Actors;                                           		// 0x0074 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2405 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Group::pClassPointer = NULL;

// Class Engine.SeqVar_ObjectList
// 0x000C (0x0074 - 0x0068)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray< class UObject* >                           ObjList;                                          		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2407 ];

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

UClass* USeqVar_ObjectList::pClassPointer = NULL;

// Class Engine.SeqVar_ObjectVolume
// 0x0020 (0x0088 - 0x0068)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                   		// 0x0068 (0x0004) [0x0000000000000000]              
	TArray< class UObject* >                           ContainedObjects;                                 		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            ExcludeClassList;                                 		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCollidingOnly : 1;                               		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2409 ];

		return pClassPointer;
	};

};

UClass* USeqVar_ObjectVolume::pClassPointer = NULL;

// Class Engine.SeqVar_Player
// 0x0014 (0x007C - 0x0068)
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray< class UObject* >                           Players;                                          		// 0x0068 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bAllPlayers : 1;                                  		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                PlayerIdx;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2411 ];

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
	void UpdatePlayersList ( );
};

UClass* USeqVar_Player::pClassPointer = NULL;

// Class Engine.SeqVar_String
// 0x000C (0x0064 - 0x0058)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                         		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2413 ];

		return pClassPointer;
	};

};

UClass* USeqVar_String::pClassPointer = NULL;

// Class Engine.SeqVar_Vector
// 0x000C (0x0064 - 0x0058)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                        		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2415 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Vector::pClassPointer = NULL;

// Class Engine.AmbientSound
// 0x0008 (0x0194 - 0x018C)
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                    		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x018C (0x0004) [0x0000000000000000] [0x00000002] 
	class UAudioComponent*                             AudioComponent;                                   		// 0x0190 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2417 ];

		return pClassPointer;
	};

};

UClass* AAmbientSound::pClassPointer = NULL;

// Class Engine.DistributionFloatSoundParameter
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2419 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatSoundParameter::pClassPointer = NULL;

// Class Engine.SoundNode
// 0x0010 (0x004C - 0x003C)
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                   		// 0x003C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USoundNode* >                        ChildNodes;                                       		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2421 ];

		return pClassPointer;
	};

};

UClass* USoundNode::pClassPointer = NULL;

// Class Engine.SoundNodeWave
// 0x012C (0x0178 - 0x004C)
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceRealTimeDecompression : 1;                  		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoopingSound : 1;                                		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDynamicResource : 1;                             		// 0x0050 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseTTS : 1;                                      		// 0x0050 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bProcedural : 1;                                  		// 0x0050 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bStreamable : 1;                                  		// 0x0050 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bLoopedOnPS3 : 1;                                 		// 0x0050 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bMature : 1;                                      		// 0x0050 (0x0004) [0x0000000000008003] [0x00000080] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned long                                      bManualWordWrap : 1;                              		// 0x0050 (0x0004) [0x0000000000008003] [0x00000100] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned long                                      bSingleLine : 1;                                  		// 0x0050 (0x0004) [0x0000000000008003] [0x00000200] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned char                                      TTSSpeaker;                                       		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DecompressionType;                                		// 0x0055 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     SpokenText;                                       		// 0x0058 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              Volume;                                           		// 0x0064 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Pitch;                                            		// 0x0068 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Duration;                                         		// 0x006C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                NumChannels;                                      		// 0x0070 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                SampleRate;                                       		// 0x0074 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FUntypedBulkData_Mirror                     RawData;                                          		// 0x0078 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VorbisDecompressor;                               		// 0x00AC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    RawPCMData;                                       		// 0x00B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                RawPCMDataSize;                                   		// 0x00B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                 		// 0x00B8 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                            		// 0x00EC (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                		// 0x0120 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ResourceID;                                       		// 0x0154 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResourceSize;                                     		// 0x0158 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ResourceData;                                     		// 0x015C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSubtitleCue >                      Subtitles;                                        		// 0x0160 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FLocalizedSubtitle >                LocalizedSubtitles;                               		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2423 ];

		return pClassPointer;
	};

	void eventGeneratePCMData ( int SamplesNeeded, TArray< unsigned char >* Buffer );
};

UClass* USoundNodeWave::pClassPointer = NULL;

// Class Engine.LandscapeProxy
// 0x009C (0x0224 - 0x0188)
class ALandscapeProxy : public AInfo
{
public:
	TArray< class ULandscapeComponent* >               LandscapeComponents;                              		// 0x0188 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class ULandscapeHeightfieldCollisionComponent* > CollisionComponents;                              		// 0x0194 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01A0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeProxy.MaterialInstanceConstantMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x01DC (0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeProxy.WeightmapUsageMap
	float                                              StaticLightingResolution;                         		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ALandscape*                                  LandscapeActor;                                   		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsProxy : 1;                                     		// 0x0220 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2425 ];

		return pClassPointer;
	};

};

UClass* ALandscapeProxy::pClassPointer = NULL;

// Class Engine.Landscape
// 0x0124 (0x0348 - 0x0224)
class ALandscape : public ALandscapeProxy
{
public:
	class UMaterialInterface*                          LandscapeMaterial;                                		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxLODLevel;                                      		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             LayerNames;                                       		// 0x022C (0x000C) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FLandscapeLayerInfo >               LayerInfos;                                       		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              StreamingDistanceMultiplier;                      		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0248 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Landscape.XYtoComponentMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0284 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Landscape.XYtoCollisionComponentMap
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x02C0 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Landscape.XYtoAddCollisionMap
	struct FPointer                                    DataInterface;                                    		// 0x02FC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ComponentSizeQuads;                               		// 0x0300 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SubsectionSizeQuads;                              		// 0x0304 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSubsections;                                   		// 0x0308 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FSet_Mirror                                 Proxies;                                          		// 0x030C (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2427 ];

		return pClassPointer;
	};

};

UClass* ALandscape::pClassPointer = NULL;

// Class Engine.Terrain
// 0x00D0 (0x0258 - 0x0188)
class ATerrain : public AInfo
{
public:
	TArray< struct FTerrainHeight >                    Heights;                                          		// 0x0188 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainInfoData >                  InfoData;                                         		// 0x0194 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainLayer >                     Layers;                                           		// 0x01A0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                NormalMapLayer;                                   		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainDecoLayer >                 DecoLayers;                                       		// 0x01B0 (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FAlphaMap >                         AlphaMaps;                                        		// 0x01BC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTerrainComponent* >                 TerrainComponents;                                		// 0x01C8 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                NumSectionsX;                                     		// 0x01D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSectionsY;                                     		// 0x01D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct ATerrain_FTerrainWeightedMaterial > WeightedMaterials;                                		// 0x01DC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTerrainWeightMapTexture* >          WeightedTextureMaps;                              		// 0x01E8 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaxTesselationLevel;                              		// 0x01F4 (0x0004) [0x0000000000000000]              
	unsigned char                                      WeightmapQuadAlphaThreshold;                      		// 0x01F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeightmapTexelAlphaThreshold;                     		// 0x01F9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeightmapQuadMaxLayers;                           		// 0x01FA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeightmapTexelMaxLayers;                          		// 0x01FB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeightmapTesselationLevel;                        		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousWeightmapTesselationLevel;                		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[ 0x2 ];                    		// 0x0204 (0x0018) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UMaterial*                                   TerrainMaterialGBX;                               		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    TerrainMaterialResourceGBX;                       		// 0x0220 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                NumPatchesX;                                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousNumPatchesX;                              		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumPatchesY;                                      		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousNumPatchesY;                              		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxComponentSize;                                 		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StaticLightingResolution;                         		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsOverridingLightResolution : 1;                 		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;            		// 0x023C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCastShadow : 1;                                  		// 0x023C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x023C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x023C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSpecular : 1;                              		// 0x023C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x023C (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                    		// 0x023C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x023C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLocked : 1;                                      		// 0x023C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHeightmapLocked : 1;                             		// 0x023C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bUseWorldOriginTextureUVs : 1;                    		// 0x023C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bAllowDuplication : 1;                            		// 0x023C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bBlockUnreal : 1;                                 		// 0x023C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	class UPhysicalMaterial*                           TerrainPhysMaterialOverride;                      		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0244 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0248 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSelectedTerrainVertex >            SelectedVertices;                                 		// 0x024C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2429 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ATerrain::pClassPointer = NULL;

// Class Engine.LandscapeComponent
// 0x00B0 (0x02C0 - 0x0210)
class ULandscapeComponent : public UPrimitiveComponent
{
public:
	int                                                SectionBaseX;                                     		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x0214 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ComponentSizeQuads;                               		// 0x0218 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SubsectionSizeQuads;                              		// 0x021C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSubsections;                                   		// 0x0220 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInstanceConstant*                   MaterialInstance;                                 		// 0x0224 (0x0004) [0x0000000000000000]              
	TArray< struct FWeightmapLayerAllocationInfo >     WeightmapLayerAllocations;                        		// 0x0228 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        WeightmapTextures;                                		// 0x0234 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FVector4                                    WeightmapScaleBias;                               		// 0x0240 (0x0010) [0x0000000000000000]              
	float                                              WeightmapSubsectionOffset;                        		// 0x0250 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0254 (0x000C) MISSED OFFSET
	struct FVector4                                    HeightmapScaleBias;                               		// 0x0260 (0x0010) [0x0000000000000000]              
	class UTexture2D*                                  HeightmapTexture;                                 		// 0x0270 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                            		// 0x0274 (0x001C) [0x0000000000000002]              ( CPF_Const )
	int                                                StaticLightingResolution;                         		// 0x0290 (0x0004) [0x0000000000000000]              
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x0294 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x02A0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FLightMapRef                                LightMap;                                         		// 0x02AC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    EditToolRenderData;                               		// 0x02B0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                CollisionMipLevel;                                		// 0x02B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    PlatformData;                                     		// 0x02B8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                PlatformDataSize;                                 		// 0x02BC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2431 ];

		return pClassPointer;
	};

};

UClass* ULandscapeComponent::pClassPointer = NULL;

// Class Engine.LandscapeHeightfieldCollisionComponent
// 0x007C (0x028C - 0x0210)
class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
{
public:
	struct FUntypedBulkData_Mirror                     CollisionHeightData;                              		// 0x0210 (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SectionBaseX;                                     		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CollisionSizeQuads;                               		// 0x024C (0x0004) [0x0000000000000000]              
	float                                              CollisionScale;                                   		// 0x0250 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            CollisionQuadFlags;                               		// 0x0254 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UPhysicalMaterial* >                 PhysicalMaterials;                                		// 0x0260 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    RBHeightfield;                                    		// 0x026C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                            		// 0x0270 (0x001C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2433 ];

		return pClassPointer;
	};

};

UClass* ULandscapeHeightfieldCollisionComponent::pClassPointer = NULL;

// Class Engine.TerrainComponent
// 0x0068 (0x0278 - 0x0210)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x0210 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x021C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    TerrainObject;                                    		// 0x0228 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    TerrainRenderResources;                           		// 0x022C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SectionBaseX;                                     		// 0x0230 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x0234 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeX;                                     		// 0x0238 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeY;                                     		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeX;                                 		// 0x0240 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	int                                                TrueSectionSizeY;                                 		// 0x0244 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FPointer                                    LightMap;                                         		// 0x0248 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      BatchMaterials;                                   		// 0x024C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FullBatch;                                        		// 0x0258 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTerrainBVTree                              GameBVTree;                                       		// 0x025C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTerrainBVTree                              EditorBVTree;                                     		// 0x0268 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    RBHeightfield;                                    		// 0x0274 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2435 ];

		return pClassPointer;
	};

};

UClass* UTerrainComponent::pClassPointer = NULL;

// Class Engine.TerrainWeightMapTexture
// 0x0000 (0x00C0 - 0x00C0)
class UTerrainWeightMapTexture : public UTexture2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2437 ];

		return pClassPointer;
	};

};

UClass* UTerrainWeightMapTexture::pClassPointer = NULL;

// Class Engine.TerrainLayerSetup
// 0x000C (0x0048 - 0x003C)
class UTerrainLayerSetup : public UObject
{
public:
	TArray< struct FTerrainFilteredMaterial >          Materials;                                        		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2439 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* UTerrainLayerSetup::pClassPointer = NULL;

// Class Engine.TerrainMaterial
// 0x0070 (0x00AC - 0x003C)
class UTerrainMaterial : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x003C (0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToMapping;                                   		// 0x0040 (0x0040) [0x0000000000000000]              
	unsigned char                                      MappingType;                                      		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingScale;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingRotation;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanU;                                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanV;                                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DisplacementMap;                                  		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplacementScale;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainFoliageMesh >               FoliageMeshes;                                    		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2441 ];

		return pClassPointer;
	};

};

UClass* UTerrainMaterial::pClassPointer = NULL;

// Class Engine.DataStoreClient
// 0x003C (0x0084 - 0x0048)
class UDataStoreClient : public UUIRoot
{
public:
	TArray< struct FString >                           GlobalDataStoreClasses;                           		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UUIDataStore* >                      GlobalDataStores;                                 		// 0x0054 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           PlayerDataStoreClassNames;                        		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            PlayerDataStoreClasses;                           		// 0x006C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPlayerDataStoreGroup >             PlayerDataStores;                                 		// 0x0078 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2443 ];

		return pClassPointer;
	};

	void DebugDumpDataStoreInfo ( unsigned long bVerbose );
	void eventNotifyGameSessionEnded ( );
	class UClass* FindDataStoreClass ( class UClass* RequiredMetaClass );
	void GetPlayerDataStoreClasses ( TArray< class UClass* >* out_DataStoreClasses );
	int FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner );
	bool UnregisterDataStore ( class UUIDataStore* DataStore );
	bool RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner );
	class UUIDataStore* CreateDataStore ( class UClass* DataStoreClass );
	class UUIDataStore* FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner );
};

UClass* UDataStoreClient::pClassPointer = NULL;

// Class Engine.Console
// 0x0158 (0x01D0 - 0x0078)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x007C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FName                                       ConsoleKey;                                       		// 0x0084 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       TypeKey;                                          		// 0x008C (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxScrollbackSize;                                		// 0x0094 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FString >                           Scrollback;                                       		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SBHead;                                           		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                SBPos;                                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                HistoryTop;                                       		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryBot;                                       		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryCur;                                       		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     History[ 0x10 ];                                  		// 0x00B8 (0x00C0) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bNavigatingHistory : 1;                           		// 0x0178 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCaptureKeyInput : 1;                             		// 0x0178 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x0178 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnableUI : 1;                                    		// 0x0178 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bAutoCompleteLocked : 1;                          		// 0x0178 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRequireCtrlToNavigateAutoComplete : 1;           		// 0x0178 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bIsRuntimeAutoCompleteUpToDate : 1;               		// 0x0178 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	struct FString                                     TypedStr;                                         		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TypedStrPos;                                      		// 0x0188 (0x0004) [0x0000000000000000]              
	TArray< struct FAutoCompleteCommand >              ManualAutoCompleteList;                           		// 0x018C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAutoCompleteCommand >              AutoCompleteList;                                 		// 0x0198 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                AutoCompleteIndex;                                		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAutoCompleteNode                           AutoCompleteTree;                                 		// 0x01A8 (0x001C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      AutoCompleteIndices;                              		// 0x01C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2445 ];

		return pClassPointer;
	};

	void UpdateCompleteIndices ( );
	void BuildRuntimeAutoCompleteList ( unsigned long bForce );
	void AppendInputText ( struct FString Text );
	bool ProcessControlKey ( struct FName Key, unsigned char Event );
	void FlushPlayerInput ( );
	bool InputChar ( int ControllerId, struct FString Unicode );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	void StartTyping ( struct FString Text );
	void eventOutputText ( struct FString Text );
	void OutputTextLine ( struct FString Text );
	void ClearOutput ( );
	void eventConsoleCommand ( struct FString Command );
	void ShippingConsoleCommand ( struct FString Command );
	void PurgeCommandFromHistory ( struct FString Command );
	void SetCursorPos ( int Position );
	void SetInputText ( struct FString Text );
	void Initialized ( );
};

UClass* UConsole::pClassPointer = NULL;

// Class Engine.Input
// 0x006C (0x00E4 - 0x0078)
class UInput : public UInteraction
{
public:
	TArray< struct FKeyBind >                          Bindings;                                         		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             PressedKeys;                                      		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      CurrentEvent;                                     		// 0x0090 (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDelta;                                     		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDeltaTime;                                 		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x009C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	TArray< struct FPointer >                          AxisArray;                                        		// 0x00D8 (0x000C) [0x0000000000101002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2447 ];

		return pClassPointer;
	};

	void SetBind ( struct FString Command, struct FName* BindName );
	struct FString GetBind ( struct FName* Key );
	void ResetInput ( );
};

UClass* UInput::pClassPointer = NULL;

// Class Engine.PlayerInput
// 0x0098 (0x017C - 0x00E4)
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                		// 0x00E4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bInvertGamepad : 1;                               		// 0x00E4 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInvertMouse : 1;                                 		// 0x00E4 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInvertTurn : 1;                                  		// 0x00E4 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInvertGamepadTurn : 1;                           		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bInvertGamepadMove : 1;                           		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bInvertGamepadStrafe : 1;                         		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bWasForward : 1;                                  		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bWasBack : 1;                                     		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bWasLeft : 1;                                     		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bWasRight : 1;                                    		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bEdgeForward : 1;                                 		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bEdgeBack : 1;                                    		// 0x00E4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bEdgeLeft : 1;                                    		// 0x00E4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bEdgeRight : 1;                                   		// 0x00E4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bEnableMouseSmoothing : 1;                        		// 0x00E4 (0x0004) [0x0000000000044000] [0x00008000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableFOVScaling : 1;                            		// 0x00E4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bLockTurnUntilRelease : 1;                        		// 0x00E4 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	struct FName                                       LastAxisKeyName;                                  		// 0x00E8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              DoubleClickTimer;                                 		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              DoubleClickTime;                                  		// 0x00F4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MouseSensitivity;                                 		// 0x00F8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              aBaseX;                                           		// 0x00FC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseY;                                           		// 0x0100 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseZ;                                           		// 0x0104 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseX;                                          		// 0x0108 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseY;                                          		// 0x010C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aForward;                                         		// 0x0110 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aTurn;                                            		// 0x0114 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aStrafe;                                          		// 0x0118 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aUp;                                              		// 0x011C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLookUp;                                          		// 0x0120 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aRightAnalogTrigger;                              		// 0x0124 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLeftAnalogTrigger;                               		// 0x0128 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelX;                                       		// 0x012C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelY;                                       		// 0x0130 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelZ;                                       		// 0x0134 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3Gyro;                                         		// 0x0138 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              RawJoyUp;                                         		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyRight;                                      		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookRight;                                  		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookUp;                                     		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveForwardSpeed;                                 		// 0x014C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MoveStrafeSpeed;                                  		// 0x0150 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookRightScale;                                   		// 0x0154 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookUpScale;                                      		// 0x0158 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      bStrafe;                                          		// 0x015C (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bXAxis;                                           		// 0x015D (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bYAxis;                                           		// 0x015E (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              ZeroTime[ 0x2 ];                                  		// 0x0160 (0x0008) [0x0000000000000000]              
	float                                              SmoothedMouse[ 0x2 ];                             		// 0x0168 (0x0008) [0x0000000000000000]              
	int                                                MouseSamples;                                     		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              MouseSamplingTotal;                               		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              AutoUnlockTurnTime;                               		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2449 ];

		return pClassPointer;
	};

	void PreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void ClientInitInputSystem ( );
	void InitInputSystem ( );
	float SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );
	void ClearSmoothing ( );
	void SmartJump ( );
	void Jump ( );
	void ProcessInputMatching ( float DeltaTime );
	unsigned char CheckForDoubleClickMove ( float DeltaTime );
	void CatchDoubleClickInput ( );
	void eventPlayerInput ( float DeltaTime );
	void PIProcessInput ( float DeltaTime );
	void PIPostAdjustInput ( float DeltaTime, float FOVScale );
	void AdjustMouseSensitivity ( float FOVScale );
	void PostProcessInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void DrawHUD ( class AHUD* H );
	void SetSensitivity ( float F );
	bool InvertTurn ( );
	bool InvertGamepad ( );
	bool InvertMouse ( );
};

UClass* UPlayerInput::pClassPointer = NULL;

// Class Engine.PlayerManagerInteraction
// 0x0000 (0x0078 - 0x0078)
class UPlayerManagerInteraction : public UInteraction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2451 ];

		return pClassPointer;
	};

};

UClass* UPlayerManagerInteraction::pClassPointer = NULL;

// Class Engine.UISceneClient
// 0x00A0 (0x00E8 - 0x0048)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0048 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    RenderViewport;                                   		// 0x004C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FIntPoint                                   MousePosition;                                    		// 0x0050 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x005C (0x0004) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                   		// 0x0060 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     InvCanvasToScreen;                                		// 0x00A0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPostProcessChain*                           UIScenePostProcess;                               		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2453 ];

		return pClassPointer;
	};

	void eventInitializeSceneClient ( );
	struct FMatrix GetInverseCanvasToScreen ( );
	struct FMatrix GetCanvasToScreen ( );
	bool IsUIActive ( int Flags );
};

UClass* UUISceneClient::pClassPointer = NULL;

// Class Engine.UISoundTheme
// 0x000C (0x0048 - 0x003C)
class UUISoundTheme : public UObject
{
public:
	TArray< struct FSoundEventMapping >                SoundEventBindings;                               		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2455 ];

		return pClassPointer;
	};

	void eventProcessSoundEvent ( struct FName SoundEventName, class APlayerController* SoundOwner );
};

UClass* UUISoundTheme::pClassPointer = NULL;

// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x003C - 0x003C)
class UUIDataStoreSubscriber : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2457 ];

		return pClassPointer;
	};

	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
};

UClass* UUIDataStoreSubscriber::pClassPointer = NULL;

// Class Engine.UIDataStorePublisher
// 0x0000 (0x003C - 0x003C)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2459 ];

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
};

UClass* UUIDataStorePublisher::pClassPointer = NULL;

// Class Engine.UIListElementCellProvider
// 0x0000 (0x003C - 0x003C)
class UUIListElementCellProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2461 ];

		return pClassPointer;
	};

};

UClass* UUIListElementCellProvider::pClassPointer = NULL;

// Class Engine.UIListElementProvider
// 0x0000 (0x003C - 0x003C)
class UUIListElementProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2463 ];

		return pClassPointer;
	};

};

UClass* UUIListElementProvider::pClassPointer = NULL;

// Class Engine.UIDataProvider
// 0x001C (0x0064 - 0x0048)
class UUIDataProvider : public UUIRoot
{
public:
	unsigned char                                      WriteAccessType;                                  		// 0x0048 (0x0001) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   ProviderChangedNotifies;                          		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataProviderPropertyChange__Delegate;         		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2465 ];

		return pClassPointer;
	};

	int ParseTagArrayDelimiter ( struct FName* FieldName );
	bool RemovePropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate );
	bool AddPropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate, unsigned long bAllowDuplicates );
	void eventNotifyPropertyChanged ( struct FName PropTag );
	bool eventIsCollectionDataType ( unsigned char FieldType );
	bool eventIsProviderDisabled ( );
	struct FString eventGenerateFillerData ( struct FString DataTag );
	struct FString eventGenerateScriptMarkupString ( struct FName DataTag );
	bool eventSetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventGetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventAllowPublishingToField ( struct FString FieldName, int ArrayIndex );
	void eventGetSupportedScriptFields ( TArray< struct FUIDataProviderField >* out_Fields );
	int ParseArrayDelimiter ( struct FString* DataTag );
	bool GetProviderFieldType ( struct FString DataTag, unsigned char* out_ProviderFieldType );
	void OnDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
};

UClass* UUIDataProvider::pClassPointer = NULL;

// Class Engine.UIConfigProvider
// 0x0000 (0x0064 - 0x0064)
class UUIConfigProvider : public UUIDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2467 ];

		return pClassPointer;
	};

};

UClass* UUIConfigProvider::pClassPointer = NULL;

// Class Engine.UIConfigFileProvider
// 0x0018 (0x007C - 0x0064)
class UUIConfigFileProvider : public UUIConfigProvider
{
public:
	TArray< class UUIConfigSectionProvider* >          Sections;                                         		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ConfigFileName;                                   		// 0x0070 (0x000C) [0x0000000000C02000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2469 ];

		return pClassPointer;
	};

};

UClass* UUIConfigFileProvider::pClassPointer = NULL;

// Class Engine.UIConfigSectionProvider
// 0x000C (0x0070 - 0x0064)
class UUIConfigSectionProvider : public UUIConfigProvider
{
public:
	struct FString                                     SectionName;                                      		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2471 ];

		return pClassPointer;
	};

};

UClass* UUIConfigSectionProvider::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlinePlayerDataBase
// 0x0004 (0x0068 - 0x0064)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	int                                                PlayerControllerId;                               		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2473 ];

		return pClassPointer;
	};

	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlinePlayerDataBase::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineFriendMessages
// 0x0058 (0x00C0 - 0x0068)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FOnlineFriendMessage >              Messages;                                         		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SendingPlayerNameCol;                             		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsFriendInviteCol;                               		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasAcceptedCol;                                  		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasDeniedCol;                                    		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessageCol;                                       		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LastInviteFrom;                                   		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2475 ];

		return pClassPointer;
	};

	void OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	void ReadMessages ( );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlineFriendMessages::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineFriends
// 0x00D0 (0x0138 - 0x0068)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FOnlineFriend >                     FriendsList;                                      		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NickNameCol;                                      		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PresenceInfoCol;                                  		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendStateCol;                                   		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsOnlineCol;                                     		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingCol;                                    		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingThisGameCol;                            		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsJoinableCol;                                   		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasVoiceSupportCol;                              		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHaveInvitedCol;                                  		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasInvitedYouCol;                                		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHaveRequestedCol;                                		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasRequestedYouCol;                              		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OfflineText;                                      		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OnlineText;                                       		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AwayText;                                         		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BusyText;                                         		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2477 ];

		return pClassPointer;
	};

	void eventRefreshFriendsList ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnFriendsReadComplete ( unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlineFriends::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlinePartyChatList
// 0x0070 (0x00D8 - 0x0068)
class UUIDataProvider_OnlinePartyChatList : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FOnlinePartyMember >                PartyMembersList;                                 		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           NatTypes;                                         		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NickNameCol;                                      		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NatTypeCol;                                       		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsLocalCol;                                       		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsInPartyVoiceCol;                                		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsTalkingCol;                                     		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsInGameSessionCol;                               		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsPlayingThisGameCol;                             		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2479 ];

		return pClassPointer;
	};

	void eventRefreshMembersList ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

UClass* UUIDataProvider_OnlinePartyChatList::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlinePlayerStorage
// 0x0020 (0x0088 - 0x0068)
class UUIDataProvider_OnlinePlayerStorage : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlinePlayerStorage*                        Profile;                                          		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FName                                       ProviderName;                                     		// 0x006C (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bWasErrorLastRead : 1;                            		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedsDeferredRefresh : 1;                        		// 0x0074 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FPlayerStorageArrayProvider >       PlayerStorageArrayProviders;                      		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DeviceStorageSizeNeeded;                          		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2481 ];

		return pClassPointer;
	};

	void OnExternalUIChange ( unsigned long bIsOpening );
	void OnStorageDeviceChange ( );
	void OnSettingValueUpdated ( struct FName SettingName );
	void ArrayProviderPropertyChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	void ShowDeviceSelection ( );
	void RefreshStorageData ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnReadStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	void AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool GetData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
	bool ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
};

UClass* UUIDataProvider_OnlinePlayerStorage::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlineProfileSettings
// 0x0000 (0x0088 - 0x0088)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerStorage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2483 ];

		return pClassPointer;
	};

	void RefreshStorageData ( );
	void ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	void AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool GetData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
	bool ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
};

UClass* UUIDataProvider_OnlineProfileSettings::pClassPointer = NULL;

// Class Engine.UIDataProvider_PlayerAchievements
// 0x0010 (0x0078 - 0x0068)
class UUIDataProvider_PlayerAchievements : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FAchievementDetails >               Achievements;                                     		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2485 ];

		return pClassPointer;
	};

	void UpdateAchievements ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void OnPlayerAchievementUnlocked ( unsigned long bWasSuccessful );
	void OnPlayerAchievementsChanged ( int TitleId );
	void GetAchievementDetails ( int AchievementId, struct FAchievementDetails* OutAchievementDetails );
	struct FString GetAchievementIconPathName ( int AchievementId, unsigned long bReturnLockedIcon );
	void PopulateAchievementIcons ( );
	int GetMaxTotalGamerScore ( );
	int GetTotalGamerScore ( );
};

UClass* UUIDataProvider_PlayerAchievements::pClassPointer = NULL;

// Class Engine.UIDataProvider_OnlinePlayerStorageArray
// 0x0030 (0x0094 - 0x0064)
class UUIDataProvider_OnlinePlayerStorageArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UOnlinePlayerStorage*                        PlayerStorage;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                PlayerStorageId;                                  		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FName                                       PlayerStorageName;                                		// 0x0074 (0x0008) [0x0000000000000000]              
	struct FString                                     ColumnHeaderText;                                 		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             Values;                                           		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2487 ];

		return pClassPointer;
	};

};

UClass* UUIDataProvider_OnlinePlayerStorageArray::pClassPointer = NULL;

// Class Engine.UIDataProvider_SettingsArray
// 0x0030 (0x0094 - 0x0064)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USettings*                                   Settings;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                SettingsId;                                       		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FName                                       SettingsName;                                     		// 0x0074 (0x0008) [0x0000000000000000]              
	struct FString                                     ColumnHeaderText;                                 		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FIdToStringMapping >                Values;                                           		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2489 ];

		return pClassPointer;
	};

};

UClass* UUIDataProvider_SettingsArray::pClassPointer = NULL;

// Class Engine.UIDataStore
// 0x0020 (0x0084 - 0x0064)
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                              		// 0x0064 (0x0008) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   RefreshSubscriberNotifies;                        		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;              		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2491 ];

		return pClassPointer;
	};

	class UDataStoreClient* GetDataStoreClient ( );
	void OnCommit ( );
	void eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool NotifyGameSessionEnded ( );
	void eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber );
	void eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
};

UClass* UUIDataStore::pClassPointer = NULL;

// Class Engine.UIDataStore_DynamicResource
// 0x0054 (0x00D8 - 0x0084)
class UUIDataStore_DynamicResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIDataStore_GameResource*                   GameResourceDataStore;                            		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDynamicResourceProviderDefinition > ResourceProviderDefinitions;                      		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            ResourceProviders;                                		// 0x009C (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2493 ];

		return pClassPointer;
	};

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnLoginChange ( unsigned char LocalUserNum );
	int FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor );
	bool GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue );
	bool GetResourceProviderFields ( struct FName ProviderTag, TArray< struct FName >* ProviderFieldTags );
	bool GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceCombinationProvider* >* out_Providers );
	int GetProviderCount ( struct FName ProviderTag );
	struct FName GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex );
	int FindProviderTypeIndex ( struct FName ProviderTag );
};

UClass* UUIDataStore_DynamicResource::pClassPointer = NULL;

// Class Engine.UIDataStore_Fonts
// 0x0000 (0x0084 - 0x0084)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2495 ];

		return pClassPointer;
	};

};

UClass* UUIDataStore_Fonts::pClassPointer = NULL;

// Class Engine.UIDataStore_GameResource
// 0x004C (0x00D0 - 0x0084)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FGameResourceDataProvider >         ElementProviderTypes;                             		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            ListElementProviders;                             		// 0x0094 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2497 ];

		return pClassPointer;
	};

	int FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor );
	bool GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue );
	bool GetResourceProviderFields ( struct FName ProviderTag, TArray< struct FName >* ProviderFieldTags );
	bool GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceDataProvider* >* out_Providers );
	int GetProviderCount ( struct FName ProviderTag );
	struct FName GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex );
	int FindProviderTypeIndex ( struct FName ProviderTag );
};

UClass* UUIDataStore_GameResource::pClassPointer = NULL;

// Class Engine.UIDataStore_MenuItems
// 0x0050 (0x0120 - 0x00D0)
class UUIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
	struct FName                                       CurrentGameSettingsTag;                           		// 0x00D0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FMultiMap_Mirror                            OptionProviders;                                  		// 0x00D8 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UUIDataProvider_MenuItem* >          DynamicProviders;                                 		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2499 ];

		return pClassPointer;
	};

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnGameSettingsChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void GetSet ( struct FName SetName, TArray< class UUIDataProvider_MenuItem* >* OutProviders );
	void AppendToSet ( struct FName SetName, int NumOptions );
	void ClearSet ( struct FName SetName );
};

UClass* UUIDataStore_MenuItems::pClassPointer = NULL;

// Class Engine.UIDataStore_GameState
// 0x000C (0x0090 - 0x0084)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;              		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2501 ];

		return pClassPointer;
	};

	bool NotifyGameSessionEnded ( );
	void OnRefreshDataFieldValue ( );
};

UClass* UUIDataStore_GameState::pClassPointer = NULL;

// Class Engine.UIDataStore_Registry
// 0x0004 (0x0088 - 0x0084)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class UUIDynamicFieldProvider*                     RegistryDataProvider;                             		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2503 ];

		return pClassPointer;
	};

	class UUIDynamicFieldProvider* GetDataProvider ( );
};

UClass* UUIDataStore_Registry::pClassPointer = NULL;

// Class Engine.UIDataStore_Remote
// 0x0000 (0x0084 - 0x0084)
class UUIDataStore_Remote : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2505 ];

		return pClassPointer;
	};

};

UClass* UUIDataStore_Remote::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlineGameSearch
// 0x0030 (0x00B4 - 0x0084)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0088 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FName                                       SearchResultsName;                                		// 0x008C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0094 (0x0004) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0098 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x009C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FGameSearchCfg >                    GameSearchCfgList;                                		// 0x00A0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                SelectedIndex;                                    		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                ActiveSearchIndex;                                		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2507 ];

		return pClassPointer;
	};

	void ClearAllSearchResults ( );
	void eventMoveToPrevious ( unsigned long bInvalidateExistingSearchResults );
	void eventMoveToNext ( unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByName ( struct FName SearchName, unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByIndex ( int NewIndex, unsigned long bInvalidateExistingSearchResults );
	int FindSearchConfigurationIndex ( struct FName SearchTag );
	class UOnlineGameSearch* eventGetActiveGameSearch ( );
	class UOnlineGameSearch* eventGetCurrentGameSearch ( );
	void BuildSearchResults ( );
	bool eventShowHostGamercard ( unsigned char ControllerIndex, int ListIndex );
	bool eventGetSearchResultFromIndex ( int ListIndex, struct FOnlineGameSearchResult* Result );
	void OnSearchComplete ( unsigned long bWasSuccessful );
	bool OverrideQuerySubmission ( unsigned char ControllerId, class UOnlineGameSearch* Search );
	bool eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults );
	bool InvalidateCurrentSearchResults ( );
	void eventInit ( );
};

UClass* UUIDataStore_OnlineGameSearch::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlinePlayerData
// 0x00AC (0x0130 - 0x0084)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                  		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                PlayerControllerId;                               		// 0x008C (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerNick;                                       		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ProfileSettingsClassName;                         		// 0x009C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      ProfileSettingsClass;                             		// 0x00A8 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FString                                     ProfileProviderClassName;                         		// 0x00B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      ProfileProviderClass;                             		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerStorageClassName;                           		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      PlayerStorageClass;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlinePlayerStorage*         StorageProvider;                                  		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FString                                     StorageProviderClassName;                         		// 0x00D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      StorageProviderClass;                             		// 0x00E0 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                           		// 0x00E4 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_PlayerAchievements*          AchievementsProvider;                             		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FString                                     FriendsProviderClassName;                         		// 0x00EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      FriendsProviderClass;                             		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FString                                     FriendMessagesProviderClassName;                  		// 0x00FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      FriendMessagesProviderClass;                      		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FString                                     AchievementsProviderClassName;                    		// 0x010C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      AchievementsProviderClass;                        		// 0x0118 (0x0004) [0x0000000000000000]              
	struct FString                                     PartyChatProviderClassName;                       		// 0x011C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      PartyChatProviderClass;                           		// 0x0128 (0x0004) [0x0000000000000000]              
	class UUIDataProvider_OnlinePartyChatList*         PartyChatProvider;                                		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2509 ];

		return pClassPointer;
	};

	class UOnlinePlayerStorage* eventGetCachedPlayerStorage ( int ControllerId );
	class UOnlineProfileSettings* eventGetCachedPlayerProfile ( int ControllerId );
	void ClearDelegates ( );
	void RegisterDelegates ( );
	void OnPlayerDataChange ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void OnSettingProviderChanged ( class UUIDataProvider* SourceProvider, struct FName SettingsName );
};

UClass* UUIDataStore_OnlinePlayerData::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlineStats
// 0x0070 (0x00F4 - 0x0084)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0088 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UClass* >                            StatsReadClasses;                                 		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       StatsReadName;                                    		// 0x0098 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPlayerNickMetaData                         PlayerNickData;                                   		// 0x00A0 (0x0014) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FRankMetaData                               RankNameMetaData;                                 		// 0x00B4 (0x0014) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FName                                       TotalRowsName;                                    		// 0x00C8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UOnlineStatsRead* >                  StatsReadObjects;                                 		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineStatsRead*                            StatsRead;                                        		// 0x00DC (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentReadType;                                  		// 0x00E0 (0x0001) [0x0000000000000000]              
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x00E4 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x00EC (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2511 ];

		return pClassPointer;
	};

	void SortResultsByRank ( class UOnlineStatsRead* StatsToSort );
	void OnReadComplete ( unsigned long bWasSuccessful );
	bool eventShowGamercard ( unsigned char ConrollerIndex, int ListIndex );
	bool eventRefreshStats ( unsigned char ControllerIndex );
	void SetStatsReadInfo ( );
	void eventInit ( );
};

UClass* UUIDataStore_OnlineStats::pClassPointer = NULL;

// Class Engine.UIDataStore_Settings
// 0x0000 (0x0084 - 0x0084)
class UUIDataStore_Settings : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2513 ];

		return pClassPointer;
	};

};

UClass* UUIDataStore_Settings::pClassPointer = NULL;

// Class Engine.UIDataStore_OnlineGameSettings
// 0x0014 (0x0098 - 0x0084)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	TArray< struct FGameSettingsCfg >                  GameSettingsCfgList;                              		// 0x0084 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      SettingsProviderClass;                            		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SelectedIndex;                                    		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2515 ];

		return pClassPointer;
	};

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void eventMoveToPrevious ( );
	void eventMoveToNext ( );
	void eventSetCurrentByName ( struct FName SettingsName );
	void eventSetCurrentByIndex ( int NewIndex );
	class UUIDataProvider_Settings* eventGetCurrentProvider ( );
	class UOnlineGameSettings* eventGetCurrentGameSettings ( );
	bool eventCreateGame ( unsigned char ControllerIndex );
	void OnSettingProviderChanged ( class UUIDataProvider* SourceProvider, struct FName SettingsName );
};

UClass* UUIDataStore_OnlineGameSettings::pClassPointer = NULL;

// Class Engine.UIDataStore_StringBase
// 0x0000 (0x0084 - 0x0084)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2517 ];

		return pClassPointer;
	};

};

UClass* UUIDataStore_StringBase::pClassPointer = NULL;

// Class Engine.UIDataStore_InputAlias
// 0x0048 (0x00CC - 0x0084)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIDataStoreInputAlias >            InputAliases;                                     		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0090 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIDataStore_InputAlias.InputAliasLookupMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2519 ];

		return pClassPointer;
	};

	bool HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform );
	int FindInputAliasIndex ( struct FName DesiredAlias );
	bool GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	bool GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	struct FName GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FName GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform );
};

UClass* UUIDataStore_InputAlias::pClassPointer = NULL;

// Class Engine.UIDataStore_StringAliasMap
// 0x004C (0x00D0 - 0x0084)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIMenuInputMap >                   MenuInputMapArray;                                		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMap_Mirror                                 MenuInputSets;                                    		// 0x0090 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                PlayerIndex;                                      		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2521 ];

		return pClassPointer;
	};

	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
	int FindMappingWithFieldName ( struct FString FieldName, struct FString SetName );
	class ULocalPlayer* GetPlayerOwner ( );
};

UClass* UUIDataStore_StringAliasMap::pClassPointer = NULL;

// Class Engine.UIDataStore_Strings
// 0x000C (0x0090 - 0x0084)
class UUIDataStore_Strings : public UUIDataStore_StringBase
{
public:
	TArray< class UUIConfigFileProvider* >             LocFileProviders;                                 		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2523 ];

		return pClassPointer;
	};

};

UClass* UUIDataStore_Strings::pClassPointer = NULL;

// Class Engine.UIDynamicFieldProvider
// 0x0090 (0x00F4 - 0x0064)
class UUIDynamicFieldProvider : public UUIDataProvider
{
public:
	TArray< struct FUIProviderScriptFieldValue >       PersistentDataFields;                             		// 0x0064 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FUIProviderScriptFieldValue >       RuntimeDataFields;                                		// 0x0070 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FMap_Mirror                                 PersistentCollectionData;                         		// 0x007C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 RuntimeCollectionData;                            		// 0x00B8 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2525 ];

		return pClassPointer;
	};

	int FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind );
	bool GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value );
	bool ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag );
	bool ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue );
	bool ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue );
	bool RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag );
	bool RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove );
	bool InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue );
	bool SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* CollectionValues );
	bool GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, TArray< struct FString >* out_DataValueArray );
	bool GetCollectionValueSchema ( struct FName FieldName, unsigned long bPersistent, TArray< struct FName >* out_CellTagArray );
	void SavePersistentProviderData ( );
	bool SetField ( struct FName FieldName, unsigned long bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue );
	bool GetField ( struct FName FieldName, struct FUIProviderScriptFieldValue* out_Field );
	bool ClearFields ( unsigned long bReinitializeRuntimeFields );
	int FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields );
	bool RemoveField ( struct FName FieldName );
	bool AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition );
	void InitializeRuntimeFields ( );
};

UClass* UUIDynamicFieldProvider::pClassPointer = NULL;

// Class Engine.UIPropertyDataProvider
// 0x0018 (0x007C - 0x0064)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	TArray< class UClass* >                            ComplexPropertyTypes;                             		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;        		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2527 ];

		return pClassPointer;
	};

	bool eventGetCustomPropertyValue ( int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue );
	bool CanSupportComplexPropertyType ( class UProperty* UnsupportedProperty );
};

UClass* UUIPropertyDataProvider::pClassPointer = NULL;

// Class Engine.UIDynamicDataProvider
// 0x000C (0x0088 - 0x007C)
class UUIDynamicDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      DataClass;                                        		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UObject*                                     DataSource;                                       		// 0x0084 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2529 ];

		return pClassPointer;
	};

	bool CleanupDataProvider ( );
	class UObject* GetDataSource ( );
	bool eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass );
	void eventProviderInstanceUnbound ( class UObject* DataSourceInstance );
	void eventProviderInstanceBound ( class UObject* DataSourceInstance );
	bool UnbindProviderInstance ( );
	bool BindProviderInstance ( class UObject* DataSourceInstance );
};

UClass* UUIDynamicDataProvider::pClassPointer = NULL;

// Class Engine.UIDataProvider_Settings
// 0x0014 (0x009C - 0x0088)
class UUIDataProvider_Settings : public UUIDynamicDataProvider
{
public:
	class USettings*                                   Settings;                                         		// 0x0088 (0x0004) [0x0000000000000000]              
	TArray< struct FSettingsArrayProvider >            SettingsArrayProviders;                           		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsAListRow : 1;                                  		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2531 ];

		return pClassPointer;
	};

	void OnSettingValueUpdated ( struct FName SettingName );
	void ArrayProviderPropertyChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
};

UClass* UUIDataProvider_Settings::pClassPointer = NULL;

// Class Engine.UIResourceDataProvider
// 0x000C (0x0088 - 0x007C)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x007C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0080 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bDataBindingPropertiesOnly : 1;                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSkipDuringEnumeration : 1;                       		// 0x0084 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2533 ];

		return pClassPointer;
	};

	void eventInitializeProvider ( unsigned long bIsEditor );
};

UClass* UUIResourceDataProvider::pClassPointer = NULL;

// Class Engine.UIDataProvider_MenuItem
// 0x0088 (0x0110 - 0x0088)
class UUIDataProvider_MenuItem : public UUIResourceDataProvider
{
public:
	unsigned char                                      OptionType;                                       		// 0x0088 (0x0001) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             OptionSet;                                        		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DataStoreMarkup;                                  		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DescriptionMarkup;                                		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       RequiredGameMode;                                 		// 0x00B0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     FriendlyName;                                     		// 0x00B8 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomFriendlyName;                               		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00D0 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bEditableCombo : 1;                               		// 0x00DC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bNumericCombo : 1;                                		// 0x00DC (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bKeyboardOrMouseOption : 1;                       		// 0x00DC (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bOnlineOnly : 1;                                  		// 0x00DC (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bOfflineOnly : 1;                                 		// 0x00DC (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bSearchAllInis : 1;                               		// 0x00DC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRemoveOn360 : 1;                                 		// 0x00DC (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bRemoveOnPC : 1;                                  		// 0x00DC (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bRemoveOnPS3 : 1;                                 		// 0x00DC (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	int                                                EditBoxMaxLength;                                 		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FUIRangeData                                RangeData;                                        		// 0x00E4 (0x0014) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             SchemaCellFields;                                 		// 0x00F8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     IniName;                                          		// 0x0104 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2535 ];

		return pClassPointer;
	};

	bool IsFiltered ( );
};

UClass* UUIDataProvider_MenuItem::pClassPointer = NULL;

// Class Engine.UIMapSummary
// 0x0030 (0x00B8 - 0x0088)
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                          		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ScreenshotPathName;                               		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DisplayName;                                      		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2537 ];

		return pClassPointer;
	};

};

UClass* UUIMapSummary::pClassPointer = NULL;

// Class Engine.UIResourceCombinationProvider
// 0x0010 (0x0074 - 0x0064)
class UUIResourceCombinationProvider : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0064 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x0068 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIResourceDataProvider*                     StaticDataProvider;                               		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2539 ];

		return pClassPointer;
	};

	bool ReplaceProviderCollection ( struct FName TargetFieldTag, TArray< struct FUIDataProviderField >* out_Fields, TArray< class UUIDataProvider* >* ReplacementProviders );
	bool ReplaceProviderValue ( struct FName TargetFieldTag, class UUIDataProvider* ReplacementProvider, TArray< struct FUIDataProviderField >* out_Fields );
	void ClearProviderReferences ( );
	bool eventGetCellFieldValue ( struct FName FieldName, struct FName CellTag, int ListIndex, int ArrayIndex, struct FUIProviderFieldValue* out_FieldValue );
	bool eventGetCellFieldType ( struct FName FieldName, struct FName CellTag, unsigned char* FieldType );
	void eventGetElementCellTags ( struct FName FieldName, TArray< struct FName >* CellFieldTags, TArray< struct FString >* ColumnHeaderDisplayText );
	bool eventGetElementCellValueProvider ( struct FName FieldName, int ListIndex, class UUIListElementCellProvider** out_ValueProvider );
	bool eventGetElementCellSchemaProvider ( struct FName FieldName, class UUIListElementCellProvider** out_SchemaProvider );
	bool eventIsElementEnabled ( struct FName FieldName, int CollectionIndex );
	bool eventGetListElements ( struct FName FieldName, TArray< int >* out_Elements );
	int eventGetElementCount ( struct FName FieldName );
	TArray< struct FName > eventGetElementProviderTags ( );
	void eventInitializeProvider ( unsigned long bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider );
};

UClass* UUIResourceCombinationProvider::pClassPointer = NULL;

// Class Engine.GameUISceneClient
// 0x006C (0x0154 - 0x00E8)
class UGameUISceneClient : public UUISceneClient
{
public:
	float                                              LatestDeltaTime;                                  		// 0x00E8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FDouble                                     DoubleClickStartTime;                             		// 0x00EC (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FIntPoint                                   DoubleClickStartPosition;                         		// 0x00F4 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMap_Mirror                                 InitialPressedKeys;                               		// 0x00FC (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bUpdateInputProcessingStatus : 1;                 		// 0x0138 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateSceneViewportSizes : 1;                    		// 0x0138 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableDebugInput : 1;                            		// 0x0138 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bRenderDebugInfo : 1;                             		// 0x0138 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bCaptureUnprocessedInput : 1;                     		// 0x0138 (0x0004) [0x0000000000004002] [0x00000010] ( CPF_Const | CPF_Config )
	TArray< struct FName >                             NavAliases;                                       		// 0x013C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             AxisInputKeys;                                    		// 0x0148 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2541 ];

		return pClassPointer;
	};

	int FindLocalPlayerIndex ( class UPlayer* P );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyGameSessionEnded ( );
	void NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex );
	bool CanUnpauseInternalUI ( );
	void RequestInputProcessingUpdate ( );
	unsigned char GetCurrentNetMode ( );
};

UClass* UGameUISceneClient::pClassPointer = NULL;

// Class Engine.Scene
// 0x0000 (0x003C - 0x003C)
class UScene : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2543 ];

		return pClassPointer;
	};

};

UClass* UScene::pClassPointer = NULL;

// Class Engine.FoliageFactory
// 0x0028 (0x01E4 - 0x01BC)
class AFoliageFactory : public AVolume
{
public:
	TArray< struct FFoliageMesh >                      Meshes;                                           		// 0x01BC (0x000C) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	float                                              VolumeFalloffRadius;                              		// 0x01C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VolumeFalloffExponent;                            		// 0x01CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityUpFacing;                           		// 0x01D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityDownFacing;                         		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensitySideFacing;                         		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FacingFalloffExponent;                            		// 0x01DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxInstanceCount;                                 		// 0x01E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2545 ];

		return pClassPointer;
	};

};

UClass* AFoliageFactory::pClassPointer = NULL;

// Class Engine.InstancedFoliageActor
// 0x003C (0x01C4 - 0x0188)
class AInstancedFoliageActor : public AActor
{
public:
	struct FMap_Mirror                                 FoliageMeshes;                                    		// 0x0188 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2547 ];

		return pClassPointer;
	};

};

UClass* AInstancedFoliageActor::pClassPointer = NULL;

// Class Engine.InteractiveFoliageActor
// 0x0058 (0x01E8 - 0x0190)
class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0190 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     TouchingActorEntryPosition;                       		// 0x0194 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliageVelocity;                                  		// 0x01A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliageForce;                                     		// 0x01AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliagePosition;                                  		// 0x01B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              FoliageDamageImpulseScale;                        		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageTouchImpulseScale;                         		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageStiffness;                                 		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageStiffnessQuadratic;                        		// 0x01D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageDamping;                                   		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamageImpulse;                                 		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTouchImpulse;                                  		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForce;                                         		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Mass;                                             		// 0x01E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2549 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
};

UClass* AInteractiveFoliageActor::pClassPointer = NULL;

// Class Engine.FoliageComponent
// 0x006C (0x027C - 0x0210)
class UFoliageComponent : public UPrimitiveComponent
{
public:
	TArray< struct FStoredFoliageInstance >            LitInstances;                                     		// 0x0210 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             StaticallyRelevantLights;                         		// 0x021C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             StaticallyIrrelevantLights;                       		// 0x0228 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              DirectionalStaticLightingScale[ 0x3 ];            		// 0x0234 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SimpleStaticLightingScale[ 0x3 ];                 		// 0x0240 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UStaticMesh*                                 InstanceStaticMesh;                               		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          Material;                                         		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDrawRadius;                                    		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              MinTransitionRadius;                              		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              MinThinningRadius;                                		// 0x025C (0x0004) [0x0000000000000000]              
	struct FVector                                     MinScale;                                         		// 0x0260 (0x000C) [0x0000000000000000]              
	struct FVector                                     MaxScale;                                         		// 0x026C (0x000C) [0x0000000000000000]              
	float                                              SwayScale;                                        		// 0x0278 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2551 ];

		return pClassPointer;
	};

};

UClass* UFoliageComponent::pClassPointer = NULL;

// Class Engine.InteractiveFoliageComponent
// 0x0004 (0x024C - 0x0248)
class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    FoliageSceneProxy;                                		// 0x0248 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2553 ];

		return pClassPointer;
	};

};

UClass* UInteractiveFoliageComponent::pClassPointer = NULL;

// Class Engine.ActorFactoryInteractiveFoliage
// 0x0000 (0x008C - 0x008C)
class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2555 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryInteractiveFoliage::pClassPointer = NULL;

// Class Engine.FluidInfluenceActor
// 0x0010 (0x0198 - 0x0188)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                    		// 0x0188 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            Sprite;                                           		// 0x018C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFluidInfluenceComponent*                    InfluenceComponent;                               		// 0x0190 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bActive : 1;                                      		// 0x0194 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bToggled : 1;                                     		// 0x0194 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2557 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* AFluidInfluenceActor::pClassPointer = NULL;

// Class Engine.FluidSurfaceActor
// 0x0008 (0x0190 - 0x0188)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                   		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjectileEntryEffect;                            		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2559 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class UIDamageCauser* DamageCauser, class UDamagePipeline* Pipeline );
};

UClass* AFluidSurfaceActor::pClassPointer = NULL;

// Class Engine.FluidSurfaceActorMovable
// 0x0000 (0x0190 - 0x0190)
class AFluidSurfaceActorMovable : public AFluidSurfaceActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2561 ];

		return pClassPointer;
	};

};

UClass* AFluidSurfaceActorMovable::pClassPointer = NULL;

// Class Engine.FluidInfluenceComponent
// 0x0060 (0x0270 - 0x0210)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x0210 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RaindropFillEntireFluid : 1;                      		// 0x0210 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsToggleTriggered : 1;                           		// 0x0210 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class AFluidSurfaceActor*                          FluidActor;                                       		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InfluenceType;                                    		// 0x0218 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveStrength;                                     		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveFrequency;                                    		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WavePhase;                                        		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveRadius;                                       		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropAreaRadius;                               		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRadius;                                   		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropStrength;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRate;                                     		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSpeed;                                        		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlowNumRipples;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSideMotionRadius;                             		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowWaveRadius;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowStrength;                                     		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowFrequency;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereOuterRadius;                                		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereInnerRadius;                                		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereStrength;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentAngle;                                     		// 0x0264 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentTimer;                                     		// 0x0268 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class AFluidSurfaceActor*                          CurrentFluidActor;                                		// 0x026C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2563 ];

		return pClassPointer;
	};

};

UClass* UFluidInfluenceComponent::pClassPointer = NULL;

// Class Engine.FluidSurfaceComponent
// 0x00C4 (0x02D4 - 0x0210)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapResolution;                               		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableSimulation : 1;                             		// 0x0218 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableDetail : 1;                                 		// 0x0218 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTiling : 1;                                      		// 0x0218 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPause : 1;                                       		// 0x0218 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationNormals : 1;                       		// 0x0218 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationPosition : 1;                      		// 0x0218 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShowDetailNormals : 1;                           		// 0x0218 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowDetailPosition : 1;                          		// 0x0218 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bShowFluidSimulation : 1;                         		// 0x0218 (0x0004) [0x0000000000002001] [0x00000100] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowFluidDetail : 1;                             		// 0x0218 (0x0004) [0x0000000000002001] [0x00000200] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bTestRipple : 1;                                  		// 0x0218 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bTestRippleCenterOnDetail : 1;                    		// 0x0218 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	int                                                SimulationQuadsX;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SimulationQuadsY;                                 		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GridSpacing;                                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GridSpacingLowRes;                                		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetSimulation;                                 		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GPUTessellationFactor;                            		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidDamping;                                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidTravelSpeed;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidHeightScale;                                 		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidUpdateRate;                                  		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceImpact;                                      		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceContinuous;                                  		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightingContrast;                                 		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetDetail;                                     		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivationDistance;                             		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DetailResolution;                                 		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailSize;                                       		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailDamping;                                    		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTravelSpeed;                                		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTransfer;                                   		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailHeightScale;                                		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailUpdateRate;                                 		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalLength;                                     		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleSpeed;                                  		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleFrequency;                              		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleRadius;                                 		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidWidth;                                       		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              FluidHeight;                                      		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              TestRippleTime;                                   		// 0x028C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              TestRippleAngle;                                  		// 0x0290 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              DeactivationTimer;                                		// 0x0294 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              ViewDistance;                                     		// 0x0298 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     SimulationPosition;                               		// 0x029C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     DetailPosition;                                   		// 0x02A8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< unsigned char >                            ClampMap;                                         		// 0x02B4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x02C0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FLightMapRef                                LightMap;                                         		// 0x02CC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    FluidSimulation;                                  		// 0x02D0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2565 ];

		return pClassPointer;
	};

	void SetSimulationPosition ( struct FVector WorldPos );
	void SetDetailPosition ( struct FVector WorldPos );
	void ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse );
};

UClass* UFluidSurfaceComponent::pClassPointer = NULL;

// Class Engine.LensFlareSource
// 0x0008 (0x0190 - 0x0188)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x018C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2567 ];

		return pClassPointer;
	};

	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FLinearColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventPostBeginPlay ( );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

UClass* ALensFlareSource::pClassPointer = NULL;

// Class Engine.LensFlareComponent
// 0x004C (0x025C - 0x0210)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                         		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0214 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0218 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightRadiusComponent*                   PreviewRadius;                                    		// 0x021C (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bAutoActivate : 1;                                		// 0x0220 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsActive : 1;                                    		// 0x0220 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasTranslucency : 1;                             		// 0x0220 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasUnlitTranslucency : 1;                        		// 0x0220 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasUnlitDistortion : 1;                          		// 0x0220 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x0220 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bHasSeparateTranslucency : 1;                     		// 0x0220 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bUseTrueConeCalculation : 1;                      		// 0x0220 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bVisibleForMobile : 1;                            		// 0x0220 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              OuterCone;                                        		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InnerCone;                                        		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConeFudgeFactor;                                  		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Radius;                                           		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinStrength;                                      		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SourceColor;                                      		// 0x0238 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLensFlareElementMaterials >        Materials;                                        		// 0x0248 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0254 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              NextTraceTime;                                    		// 0x0258 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2569 ];

		return pClassPointer;
	};

	void SetIsActive ( unsigned long bInIsActive );
	void SetSourceColor ( struct FLinearColor InSourceColor );
	void SetTemplate ( class ULensFlare* NewTemplate, unsigned long bForceSet );
};

UClass* ULensFlareComponent::pClassPointer = NULL;

// Class Engine.LensFlare
// 0x01C4 (0x0200 - 0x003C)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                    		// 0x003C (0x0144) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMesh*                                 SourceMesh;                                       		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceDPG;                                        		// 0x0184 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ReflectionsDPG;                                   		// 0x0185 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FLensFlareElement >                 Reflections;                                      		// 0x0188 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              OuterCone;                                        		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerCone;                                        		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeFudgeFactor;                                  		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTrueConeCalculation : 1;                      		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderDebugLines : 1;                            		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              MinStrength;                                      		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ScreenPercentageMap;                              		// 0x01AC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x01C8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x01E4 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                ReflectionCount;                                  		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x01EC (0x000C) [0x0000000000000000]              
	float                                              ThumbnailDistance;                                		// 0x01F8 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x01FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2571 ];

		return pClassPointer;
	};

};

UClass* ULensFlare::pClassPointer = NULL;

// Class Engine.TextureFlipBook
// 0x0040 (0x0100 - 0x00C0)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x00C0 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              TimeIntoMovie;                                    		// 0x00C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeSinceLastFrame;                               		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              HorizontalScale;                                  		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              VerticalScale;                                    		// 0x00D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bPaused : 1;                                      		// 0x00D4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStopped : 1;                                     		// 0x00D4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bLooping : 1;                                     		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoPlay : 1;                                    		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                HorizontalImages;                                 		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VerticalImages;                                   		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FBMethod;                                         		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameTime;                                        		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                CurrentRow;                                       		// 0x00EC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentColumn;                                    		// 0x00F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetU;                                    		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetV;                                    		// 0x00F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x00FC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2573 ];

		return pClassPointer;
	};

	void SetCurrentFrame ( int Row, int Col );
	void Stop ( );
	void Pause ( );
	void Play ( );
};

UClass* UTextureFlipBook::pClassPointer = NULL;

// Class Engine.Texture2DComposite
// 0x0010 (0x0068 - 0x0058)
class UTexture2DComposite : public UTexture
{
public:
	TArray< struct FSourceTexture2DRegion >            SourceRegions;                                    		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxTextureSize;                                   		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2575 ];

		return pClassPointer;
	};

	void ResetSourceRegions ( );
	void UpdateCompositeTexture ( int NumMipsToGenerate );
	bool SourceTexturesFullyStreamedIn ( );
};

UClass* UTexture2DComposite::pClassPointer = NULL;

// Class Engine.Texture2DDynamic
// 0x0014 (0x006C - 0x0058)
class UTexture2DDynamic : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x0058 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                SizeY;                                            		// 0x005C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x0060 (0x0001) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                NumMips;                                          		// 0x0064 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bIsResolveTarget : 1;                             		// 0x0068 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2577 ];

		return pClassPointer;
	};

	class UTexture2DDynamic* Create ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
	void Init ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
};

UClass* UTexture2DDynamic::pClassPointer = NULL;

// Class Engine.TextureCube
// 0x002C (0x0084 - 0x0058)
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SizeY;                                            		// 0x005C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x0060 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NumMips;                                          		// 0x0064 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsCubemapValid : 1;                              		// 0x0068 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	class UTexture2D*                                  FacePosX;                                         		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegX;                                         		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosY;                                         		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegY;                                         		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosZ;                                         		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegZ;                                         		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2579 ];

		return pClassPointer;
	};

};

UClass* UTextureCube::pClassPointer = NULL;

// Class Engine.TextureMovie
// 0x005C (0x00B4 - 0x0058)
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x0060 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x0061 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x0062 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovieStreamSource;                                		// 0x0063 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DecoderClass;                                     		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCodecMovie*                                 Decoder;                                          		// 0x0068 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      Paused : 1;                                       		// 0x006C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      Stopped : 1;                                      		// 0x006C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      GamePaused : 1;                                   		// 0x006C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      Looping : 1;                                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      ResetOnLastFrame : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      AutoPlay : 1;                                     		// 0x006C (0x0004) [0x0000000000002001] [0x00000020] ( CPF_Edit | CPF_Transient )
	struct FString                                     MovieName;                                        		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FUntypedBulkData_Mirror                     Data;                                             		// 0x007C (0x0034) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ReleaseCodecFence;                                		// 0x00B0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2581 ];

		return pClassPointer;
	};

	void Stop ( );
	void Pause ( unsigned long bIsGamePaused );
	void Play ( unsigned long bUnpauseGamePaused );
};

UClass* UTextureMovie::pClassPointer = NULL;

// Class Engine.TextureRenderTarget
// 0x0008 (0x0060 - 0x0058)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                             		// 0x0058 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedsTwoCopies : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderOnce : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              TargetGamma;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2583 ];

		return pClassPointer;
	};

};

UClass* UTextureRenderTarget::pClassPointer = NULL;

// Class Engine.TextureRenderTarget2D
// 0x0020 (0x0080 - 0x0060)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SizeY;                                            		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Format;                                           		// 0x0068 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x0069 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x006A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ClearColor;                                       		// 0x006C (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bForceLinearGamma : 1;                            		// 0x007C (0x0004) [0x0000000000002003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2585 ];

		return pClassPointer;
	};

	class UTextureRenderTarget2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce );
};

UClass* UTextureRenderTarget2D::pClassPointer = NULL;

// Class Engine.ScriptedTexture
// 0x0010 (0x0090 - 0x0080)
class UScriptedTexture : public UTextureRenderTarget2D
{
public:
	unsigned long                                      bNeedsUpdate : 1;                                 		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSkipNextClear : 1;                               		// 0x0080 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __Render__Delegate;                               		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2587 ];

		return pClassPointer;
	};

	void Render ( class UCanvas* C );
};

UClass* UScriptedTexture::pClassPointer = NULL;

// Class Engine.TextureRenderTargetCube
// 0x0005 (0x0065 - 0x0060)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Format;                                           		// 0x0064 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2589 ];

		return pClassPointer;
	};

};

UClass* UTextureRenderTargetCube::pClassPointer = NULL;

// Class Engine.AudioDevice
// 0x0284 (0x02C4 - 0x0040)
class UAudioDevice : public USubsystem
{
public:
	int                                                MaxChannels;                                      		// 0x0040 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                CommonAudioPoolSize;                              		// 0x0044 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              LowPassFilterResonance;                           		// 0x0048 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      WorkAroundXDKRegression : 1;                      		// 0x004C (0x0004) [0x0000000000004002] [0x00000001] ( CPF_Const | CPF_Config )
	unsigned long                                      bUsesVirtualVoices : 1;                           		// 0x004C (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	unsigned long                                      bGameWasTicking : 1;                              		// 0x004C (0x0004) [0x0000000000001002] [0x00000004] ( CPF_Const | CPF_Native )
	float                                              MinCompressedDurationEditor;                      		// 0x0050 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MinCompressedDurationGame;                        		// 0x0054 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     ChirpInSoundNodeWaveName;                         		// 0x0058 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class USoundNodeWave*                              ChirpInSoundNodeWave;                             		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ChirpOutSoundNodeWaveName;                        		// 0x0068 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class USoundNodeWave*                              ChirpOutSoundNodeWave;                            		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    CommonAudioPool;                                  		// 0x0078 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CommonAudioPoolFreeBytes;                         		// 0x007C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UAudioComponent* >                   AudioComponents;                                  		// 0x0080 (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FPointer >                          Sources;                                          		// 0x008C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FPointer >                          FreeSources;                                      		// 0x0098 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x00A4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.WaveInstanceSourceMap
	TArray< struct FListener >                         Listeners;                                        		// 0x00E0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FQWord                                      CurrentTick;                                      		// 0x00EC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00F4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundClasses
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x0130 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SourceSoundClasses
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x016C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.CurrentSoundClasses
	unsigned char                                      UnknownData04[ 0x3C ];                            		// 0x01A8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.DestinationSoundClasses
	unsigned char                                      UnknownData05[ 0x3C ];                            		// 0x01E4 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundModes
	struct FPointer                                    Effects;                                          		// 0x0220 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FName                                       BaseSoundModeName;                                		// 0x0224 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USoundMode*                                  CurrentMode;                                      		// 0x022C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeStartTime;                               		// 0x0230 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInStartTime;                         		// 0x0238 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInEndTime;                           		// 0x0240 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeEndTime;                                 		// 0x0248 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ListenerVolumeIndex;                              		// 0x0250 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FInteriorSettings                           ListenerInteriorSettings;                         		// 0x0254 (0x0024) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorStartTime;                                		// 0x0278 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorEndTime;                                  		// 0x0280 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorEndTime;                                  		// 0x0288 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorLPFEndTime;                               		// 0x0290 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorLPFEndTime;                               		// 0x0298 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorVolumeInterp;                             		// 0x02A0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorLPFInterp;                                		// 0x02A4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorVolumeInterp;                             		// 0x02A8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorLPFInterp;                                		// 0x02AC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UAudioComponent*                             TestAudioComponent;                               		// 0x02B0 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPointer                                    TextToSpeech;                                     		// 0x02B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      DebugState;                                       		// 0x02B8 (0x0001) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TransientMasterVolume;                            		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdateTime;                                   		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2591 ];

		return pClassPointer;
	};

	class USoundClass* FindSoundClass ( struct FName SoundClassName );
	bool SetSoundMode ( struct FName NewMode );
};

UClass* UAudioDevice::pClassPointer = NULL;

// Class Engine.SoundClass
// 0x006C (0x00A8 - 0x003C)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                       		// 0x003C (0x0020) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ChildClassNames;                                  		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsChild : 1;                                     		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x006C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundClass.EditorData

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2593 ];

		return pClassPointer;
	};

};

UClass* USoundClass::pClassPointer = NULL;

// Class Engine.SoundMode
// 0x0044 (0x0080 - 0x003C)
class USoundMode : public UObject
{
public:
	unsigned long                                      bApplyEQ : 1;                                     		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FAudioEQEffect                              EQSettings;                                       		// 0x0040 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSoundClassAdjuster >               SoundClassEffects;                                		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InitialDelay;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2595 ];

		return pClassPointer;
	};

};

UClass* USoundMode::pClassPointer = NULL;

// Class Engine.DebugCameraController
// 0x0030 (0x0920 - 0x08F0)
class ADebugCameraController : public APlayerController
{
public:
	struct FName                                       PrimaryKey;                                       		// 0x08F0 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       SecondaryKey;                                     		// 0x08F8 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       UnselectKey;                                      		// 0x0900 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowSelectedInfo : 1;                            		// 0x0908 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bIsFrozenRendering : 1;                           		// 0x0908 (0x0004) [0x0000000000000000] [0x00000002] 
	class APlayerController*                           OryginalControllerRef;                            		// 0x090C (0x0004) [0x0000000000000000]              
	class UPlayer*                                     OryginalPlayer;                                   		// 0x0910 (0x0004) [0x0000000000000000]              
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0914 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AActor*                                      SelectedActor;                                    		// 0x0918 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         SelectedComponent;                                		// 0x091C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2597 ];

		return pClassPointer;
	};

	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ShowDebugSelectedInfo ( );
	bool NativeInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void DisableDebugCamera ( );
	void NormalSpeed ( );
	void MoreSpeed ( );
	void SetFreezeRendering ( );
	void OnDeactivate ( class APlayerController* PC );
	void OnActivate ( class APlayerController* PC );
	void eventPostBeginPlay ( );
	void Unselect ( );
	void SecondarySelect ( struct FVector HitLoc, struct FVector HitNormal, struct FTraceHitInfo HitInfo );
	void PrimarySelect ( struct FVector HitLoc, struct FVector HitNormal, struct FTraceHitInfo HitInfo );
};

UClass* ADebugCameraController::pClassPointer = NULL;

// Class Engine.MatineePawn
// 0x0000 (0x0694 - 0x0694)
class AMatineePawn : public APawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2599 ];

		return pClassPointer;
	};

};

UClass* AMatineePawn::pClassPointer = NULL;

// Class Engine.Scout
// 0x0090 (0x0724 - 0x0694)
class AScout : public APawn
{
public:
	TArray< struct FPathSizeInfo >                     PathSizes;                                        		// 0x0694 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TestJumpZ;                                        		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              TestGroundSpeed;                                  		// 0x06A4 (0x0004) [0x0000000000000000]              
	float                                              TestMaxFallSpeed;                                 		// 0x06A8 (0x0004) [0x0000000000000000]              
	float                                              TestFallSpeed;                                    		// 0x06AC (0x0004) [0x0000000000000000]              
	float                                              MaxLandingVelocity;                               		// 0x06B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MinNumPlayerStarts;                               		// 0x06B4 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultReachSpecClass;                            		// 0x06B8 (0x0004) [0x0000000000000000]              
	TArray< struct FColor >                            EdgePathColors;                                   		// 0x06BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              NavMeshGen_StepSize;                              		// 0x06C8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_EntityHalfHeight;                      		// 0x06CC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_StartingHeightOffset;                  		// 0x06D0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxDropHeight;                         		// 0x06D4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxStepHeight;                         		// 0x06D8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_VertZDeltaSnapThresh;                  		// 0x06DC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinPolyArea;                           		// 0x06E0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_BorderBackfill_CheckDist;              		// 0x06E4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotAreaThreshold;              		// 0x06E8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotSmallArea;                  		// 0x06EC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotLargeArea;                  		// 0x06F0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxPolyHeight;                         		// 0x06F4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_HeightMergeThreshold;                  		// 0x06F8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_EdgeMaxDelta;                          		// 0x06FC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxGroundCheckSize;                    		// 0x0700 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinEdgeLength;                         		// 0x0704 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinConcaveMergeDot;                    		// 0x0708 (0x0004) [0x0000000000000000]              
	unsigned long                                      NavMeshGen_ExpansionDoObstacleMeshSimplification : 1;		// 0x070C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHightlightOneWayReachSpecs : 1;                  		// 0x070C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MinMantleFallDist;                                		// 0x0710 (0x0004) [0x0000000000000000]              
	float                                              MaxMantleFallDist;                                		// 0x0714 (0x0004) [0x0000000000000000]              
	float                                              MinMantleLateralDist;                             		// 0x0718 (0x0004) [0x0000000000000000]              
	float                                              MaxMantleLateralDist;                             		// 0x071C (0x0004) [0x0000000000000000]              
	float                                              MaxMantleFallTime;                                		// 0x0720 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2601 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};

UClass* AScout::pClassPointer = NULL;

// Class Engine.Light
// 0x0008 (0x0190 - 0x0188)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                   		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x018C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2603 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ALight::pClassPointer = NULL;

// Class Engine.DirectionalLight
// 0x0000 (0x0190 - 0x0190)
class ADirectionalLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2605 ];

		return pClassPointer;
	};

};

UClass* ADirectionalLight::pClassPointer = NULL;

// Class Engine.DirectionalLightToggleable
// 0x0000 (0x0190 - 0x0190)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2607 ];

		return pClassPointer;
	};

};

UClass* ADirectionalLightToggleable::pClassPointer = NULL;

// Class Engine.DominantDirectionalLight
// 0x0000 (0x0190 - 0x0190)
class ADominantDirectionalLight : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2609 ];

		return pClassPointer;
	};

};

UClass* ADominantDirectionalLight::pClassPointer = NULL;

// Class Engine.DominantDirectionalLightMovable
// 0x0000 (0x0190 - 0x0190)
class ADominantDirectionalLightMovable : public ADominantDirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2611 ];

		return pClassPointer;
	};

};

UClass* ADominantDirectionalLightMovable::pClassPointer = NULL;

// Class Engine.LightShafts
// 0x0000 (0x0190 - 0x0190)
class ALightShafts : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2613 ];

		return pClassPointer;
	};

};

UClass* ALightShafts::pClassPointer = NULL;

// Class Engine.PointLight
// 0x0000 (0x0190 - 0x0190)
class APointLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2615 ];

		return pClassPointer;
	};

};

UClass* APointLight::pClassPointer = NULL;

// Class Engine.DominantPointLight
// 0x0000 (0x0190 - 0x0190)
class ADominantPointLight : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2617 ];

		return pClassPointer;
	};

};

UClass* ADominantPointLight::pClassPointer = NULL;

// Class Engine.PointLightMovable
// 0x0000 (0x0190 - 0x0190)
class APointLightMovable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2619 ];

		return pClassPointer;
	};

};

UClass* APointLightMovable::pClassPointer = NULL;

// Class Engine.PointLightToggleable
// 0x0000 (0x0190 - 0x0190)
class APointLightToggleable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2621 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
};

UClass* APointLightToggleable::pClassPointer = NULL;

// Class Engine.SkyLight
// 0x0000 (0x0190 - 0x0190)
class ASkyLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2623 ];

		return pClassPointer;
	};

};

UClass* ASkyLight::pClassPointer = NULL;

// Class Engine.SkyLightToggleable
// 0x0000 (0x0190 - 0x0190)
class ASkyLightToggleable : public ASkyLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2625 ];

		return pClassPointer;
	};

};

UClass* ASkyLightToggleable::pClassPointer = NULL;

// Class Engine.SpotLight
// 0x0000 (0x0190 - 0x0190)
class ASpotLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2627 ];

		return pClassPointer;
	};

};

UClass* ASpotLight::pClassPointer = NULL;

// Class Engine.DominantSpotLight
// 0x0000 (0x0190 - 0x0190)
class ADominantSpotLight : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2629 ];

		return pClassPointer;
	};

};

UClass* ADominantSpotLight::pClassPointer = NULL;

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x0190 - 0x0190)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2631 ];

		return pClassPointer;
	};

};

UClass* AGeneratedMeshAreaLight::pClassPointer = NULL;

// Class Engine.SpotLightMovable
// 0x0000 (0x0190 - 0x0190)
class ASpotLightMovable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2633 ];

		return pClassPointer;
	};

};

UClass* ASpotLightMovable::pClassPointer = NULL;

// Class Engine.SpotLightToggleable
// 0x0000 (0x0190 - 0x0190)
class ASpotLightToggleable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2635 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
};

UClass* ASpotLightToggleable::pClassPointer = NULL;

// Class Engine.StaticLightCollectionActor
// 0x0010 (0x01A0 - 0x0190)
class AStaticLightCollectionActor : public ALight
{
public:
	TArray< class ULightComponent* >                   LightComponents;                                  		// 0x0190 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxLightComponents;                               		// 0x019C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2637 ];

		return pClassPointer;
	};

};

UClass* AStaticLightCollectionActor::pClassPointer = NULL;

// Class Engine.LightComponent
// 0x010B (0x0164 - 0x0059)
class ULightComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                        		// 0x005C (0x0004) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     WorldToLight;                                     		// 0x0060 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     LightToWorld;                                     		// 0x00A0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       LightGuid;                                        		// 0x00E0 (0x0010) [0x0000000000200002]              ( CPF_Const )
	struct FGuid                                       LightmapGuid;                                     		// 0x00F0 (0x0010) [0x0000000000200002]              ( CPF_Const )
	float                                              Brightness;                                       		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ULightFunction*                              Function;                                         		// 0x0108 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x010C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastShadows : 1;                                  		// 0x010C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastStaticShadows : 1;                            		// 0x010C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastDynamicShadows : 1;                           		// 0x010C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x010C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectCompositeShadowDirection : 1;              		// 0x010C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNonModulatedSelfShadowing : 1;                   		// 0x010C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSelfShadowOnly : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowPreShadow : 1;                              		// 0x010C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bForceDynamicLight : 1;                           		// 0x010C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      UseDirectLightMap : 1;                            		// 0x010C (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;           		// 0x010C (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;		// 0x010C (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bAllowProjectedShadowing : 1;                     		// 0x010C (0x0004) [0x0000000000020002] [0x00002000] ( CPF_Const | CPF_EditConst )
	unsigned long                                      bRenderLightShafts : 1;                           		// 0x010C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bPrecomputedLightingIsValid : 1;                  		// 0x010C (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bExplicitlyAssignedLight : 1;                     		// 0x010C (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bAllowCompositingIntoDLE : 1;                     		// 0x010C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0110 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      LightAffectsClassification;                       		// 0x0118 (0x0001) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      LightShadowMode;                                  		// 0x0119 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ModShadowColor;                                   		// 0x011C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutTime;                             		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              ModShadowFadeoutExponent;                         		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                LightListIndex;                                   		// 0x0134 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      ShadowProjectionTechnique;                        		// 0x0138 (0x0001) [0x0000000000000000]              
	unsigned char                                      ShadowFilterQuality;                              		// 0x0139 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinShadowResolution;                              		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxShadowResolution;                              		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShadowFadeResolution;                             		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionDepthRange;                              		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScale;                                       		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomThreshold;                                   		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScreenBlendThreshold;                        		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloomTint;                                        		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurPercent;                                		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionMaskDarkness;                            		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2639 ];

		return pClassPointer;
	};

	void Behavior_ChangeVisibility ( unsigned long bVisible );
	void Behavior_ToggleVisibility ( );
	void OnUpdatePropertyLightColor ( );
	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyOcclusionMaskDarkness ( );
	void OnUpdatePropertyBloomTint ( );
	void OnUpdatePropertyBloomScale ( );
	void UpdateLightShaftParameters ( );
	void UpdateColorAndBrightness ( );
	struct FVector GetDirection ( );
	struct FVector GetOrigin ( );
	void SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction );
	void SetEnabled ( unsigned long bSetEnabled );
};

UClass* ULightComponent::pClassPointer = NULL;

// Class Engine.DirectionalLightComponent
// 0x0020 (0x0184 - 0x0164)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                    		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WholeSceneDynamicShadowRadius;                    		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumWholeSceneDynamicShadowCascades;               		// 0x016C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CascadeDistributionExponent;                      		// 0x0170 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                		// 0x0174 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2641 ];

		return pClassPointer;
	};

	void OnUpdatePropertyLightEnv_BouncedLightBrightness ( );
	void OnUpdatePropertyLightEnv_BouncedModulationColor ( );
	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
};

UClass* UDirectionalLightComponent::pClassPointer = NULL;

// Class Engine.DominantDirectionalLightComponent
// 0x00D8 (0x025C - 0x0184)
class UDominantDirectionalLightComponent : public UDirectionalLightComponent
{
public:
	float                                              DominantLightmassBrightness;                      		// 0x0184 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TimeOfDayDiffuseBrightness;                       		// 0x0188 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      TimeOfDayDiffuseColor;                            		// 0x018C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TimeOfDaySpecularBrightness;                      		// 0x0190 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      TimeOfDaySpecularColor;                           		// 0x0194 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0198 (0x0008) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                          		// 0x01A0 (0x00B0) [0x0000000000000002]              ( CPF_Const )
	struct FArray_Mirror                               DominantLightShadowMap;                           		// 0x0250 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2643 ];

		return pClassPointer;
	};

	void OnUpdatePropertyTimeOfDaySpecularColor ( );
	void OnUpdatePropertyTimeOfDaySpecularBrightness ( );
	void OnUpdatePropertyTimeOfDayDiffuseColor ( );
	void OnUpdatePropertyTimeOfDayDiffuseBrightness ( );
};

UClass* UDominantDirectionalLightComponent::pClassPointer = NULL;

// Class Engine.LightShaftComponent
// 0x000C (0x0170 - 0x0164)
class ULightShaftComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                    		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightShaftType;                                   		// 0x0168 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2645 ];

		return pClassPointer;
	};

};

UClass* ULightShaftComponent::pClassPointer = NULL;

// Class Engine.PointLightComponent
// 0x0094 (0x01F8 - 0x0164)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                           		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              Radius;                                           		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FalloffExponent;                                  		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowFalloffExponent;                            		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinShadowFalloffRadius;                           		// 0x0174 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0178 (0x0008) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x0180 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Translation;                                      		// 0x01C0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x01CC (0x0004) MISSED OFFSET
	struct FPlane                                      ShadowPlane;                                      		// 0x01D0 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                               		// 0x01E0 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLightmassPointLightSettings                LightmassSettings;                                		// 0x01E4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightRadiusComponent*                   PreviewLightSourceRadius;                         		// 0x01F4 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2647 ];

		return pClassPointer;
	};

	void OnUpdatePropertyLightEnv_BouncedLightBrightness ( );
	void OnUpdatePropertyLightEnv_BouncedModulationColor ( );
	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
	void SetTranslation ( struct FVector NewTranslation );
};

UClass* UPointLightComponent::pClassPointer = NULL;

// Class Engine.DominantPointLightComponent
// 0x0000 (0x01F8 - 0x01F8)
class UDominantPointLightComponent : public UPointLightComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2649 ];

		return pClassPointer;
	};

};

UClass* UDominantPointLightComponent::pClassPointer = NULL;

// Class Engine.SpotLightComponent
// 0x0020 (0x0218 - 0x01F8)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                   		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterConeAngle;                                   		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightShaftConeAngle;                              		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0204 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0208 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FRotator                                    Rotation;                                         		// 0x020C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2651 ];

		return pClassPointer;
	};

	void SetRotation ( struct FRotator NewRotation );
};

UClass* USpotLightComponent::pClassPointer = NULL;

// Class Engine.DominantSpotLightComponent
// 0x00C4 (0x02DC - 0x0218)
class UDominantSpotLightComponent : public USpotLightComponent
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0218 (0x0008) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                          		// 0x0220 (0x00B0) [0x0000000000000002]              ( CPF_Const )
	struct FArray_Mirror                               DominantLightShadowMap;                           		// 0x02D0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2653 ];

		return pClassPointer;
	};

};

UClass* UDominantSpotLightComponent::pClassPointer = NULL;

// Class Engine.SkyLightComponent
// 0x0008 (0x016C - 0x0164)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                  		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LowerColor;                                       		// 0x0168 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2655 ];

		return pClassPointer;
	};

	void OnUpdatePropertyLowerBrightness ( );
	void OnUpdatePropertyLowerColor ( );
	void OnUpdatePropertyLightEnv_BouncedLightBrightness ( );
	void OnUpdatePropertyLightEnv_BouncedModulationColor ( );
	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
};

UClass* USkyLightComponent::pClassPointer = NULL;

// Class Engine.SphericalHarmonicLightComponent
// 0x00BC (0x0220 - 0x0164)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0164 (0x000C) MISSED OFFSET
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                       		// 0x0170 (0x0090) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                IndirectColor;                                    		// 0x0200 (0x0010) [0x0000000000000000]              
	struct FVector                                     IndirectDirection;                                		// 0x0210 (0x000C) [0x0000000000000000]              
	unsigned long                                      bRenderBeforeModShadows : 1;                      		// 0x021C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2657 ];

		return pClassPointer;
	};

};

UClass* USphericalHarmonicLightComponent::pClassPointer = NULL;

// Class Engine.LightEnvironmentComponent
// 0x001B (0x0074 - 0x0059)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x005C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceNonCompositeDynamicLights : 1;              		// 0x005C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowDynamicShadowsOnTranslucency : 1;           		// 0x005C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAllowPreShadow : 1;                              		// 0x005C (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTranslucencyShadowed : 1;                        		// 0x005C (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	float                                              DominantShadowFactor;                             		// 0x0060 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ULightComponent*                             AffectingDominantLight;                           		// 0x0064 (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UPrimitiveComponent* >               AffectedComponents;                               		// 0x0068 (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2659 ];

		return pClassPointer;
	};

	bool IsEnabled ( );
	void SetEnabled ( unsigned long bNewEnabled );
};

UClass* ULightEnvironmentComponent::pClassPointer = NULL;

// Class Engine.DynamicLightEnvironmentComponent
// 0x00A8 (0x011C - 0x0074)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                            		// 0x0074 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              InvisibleUpdateTime;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              MinTimeBetweenFullUpdates;                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VelocityUpdateTimeScale;                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowInterpolationSpeed;                         		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                NumVolumeVisibilitySamples;                       		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightingBoundsScale;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x0090 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x00A0 (0x000C) [0x0000000000000000]              
	struct FLinearColor                                AmbientGlow;                                      		// 0x00AC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightDistance;                                    		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              ShadowDistance;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCastShadows : 1;                                 		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCompositeShadowsFromDynamicLights : 1;           		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceCompositeAllLights : 1;                     		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;              		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bShadowFromEnvironment : 1;                       		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDynamic : 1;                                     		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSynthesizeDirectionalLight : 1;                  		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRequiresNonLatentUpdates : 1;                    		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bTraceFromClosestBoundsPoint : 1;                 		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIsCharacterLightEnvironment : 1;                 		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bOverrideOwnerLightingChannels : 1;               		// 0x00C4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bAlwaysInfluencedByDominantDirectionalLight : 1;  		// 0x00C4 (0x0004) [0x0000000000000000] [0x00002000] 
	float                                              ModShadowFadeoutTime;                             		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              ModShadowFadeoutExponent;                         		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FLinearColor                                MaxModulatedShadowColor;                          		// 0x00D0 (0x0010) [0x0000000000000000]              
	float                                              DominantShadowTransitionStartDistance;            		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              DominantShadowTransitionEndDistance;              		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              MinShadowAngle;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned char                                      BoundsMethod;                                     		// 0x00EC (0x0001) [0x0000000000000000]              
	struct FBoxSphereBounds                            OverriddenBounds;                                 		// 0x00F0 (0x001C) [0x0000000000000000]              
	struct FLightingChannelContainer                   OverriddenLightingChannels;                       		// 0x010C (0x0004) [0x0000000000000000]              
	TArray< class ULightComponent* >                   OverriddenLightComponents;                        		// 0x0110 (0x000C) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2661 ];

		return pClassPointer;
	};

	void ResetEnvironment ( );
};

UClass* UDynamicLightEnvironmentComponent::pClassPointer = NULL;

// Class Engine.ParticleLightEnvironmentComponent
// 0x0014 (0x0130 - 0x011C)
class UParticleLightEnvironmentComponent : public UDynamicLightEnvironmentComponent
{
public:
	int                                                ReferenceCount;                                   		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NumPooledReuses;                                  		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AActor*                                      SharedInstigator;                                 		// 0x0124 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UParticleSystem*                             SharedParticleSystem;                             		// 0x0128 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAllowDLESharing : 1;                             		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2663 ];

		return pClassPointer;
	};

};

UClass* UParticleLightEnvironmentComponent::pClassPointer = NULL;

// Class Engine.DrawLightConeComponent
// 0x0000 (0x0220 - 0x0220)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2665 ];

		return pClassPointer;
	};

};

UClass* UDrawLightConeComponent::pClassPointer = NULL;

// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x0224 - 0x0224)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2667 ];

		return pClassPointer;
	};

};

UClass* UDrawLightRadiusComponent::pClassPointer = NULL;

// Class Engine.LightFunction
// 0x0014 (0x0050 - 0x003C)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                   		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale;                                            		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisabledBrightness;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2669 ];

		return pClassPointer;
	};

};

UClass* ULightFunction::pClassPointer = NULL;

// Class Engine.SkeletalMeshComponent
// 0x0490 (0x06AC - 0x021C)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	struct FPointer                                    VfTable_IIAnimBehavior;                           		// 0x021C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                          		// 0x0224 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FGestaltDataContainer                       GestaltData;                                      		// 0x0228 (0x0054) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x027C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNode*                                   Animations;                                       		// 0x0280 (0x0004) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAnimNode* >                         AnimTickArray;                                    		// 0x0284 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNode* >                         AnimAlwaysTickArray;                              		// 0x0290 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      AnimTickRelevancyArray;                           		// 0x029C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    AnimTickWeightsArray;                             		// 0x02A8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USkelControlBase* >                  SkelControlTickArray;                             		// 0x02B4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x02C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                             		// 0x02C4 (0x0004) [0x000000000440200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    ApexClothing;                                     		// 0x02C8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              PhysicsWeight;                                    		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalAnimRateScale;                              		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MeshObject;                                       		// 0x02D8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         SpaceBases;                                       		// 0x02DC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         LocalAtoms;                                       		// 0x02E8 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         CachedLocalAtoms;                                 		// 0x02F4 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         CachedSpaceBases;                                 		// 0x0300 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                LowUpdateFrameRate;                               		// 0x030C (0x0004) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x0310 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            ComposeOrderedRequiredBones;                      		// 0x031C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class USkeletalMeshComponent*                      ParentAnimComponent;                              		// 0x0328 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< int >                                      ParentBoneMap;                                    		// 0x032C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0338 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          TemporarySavedAnimSets;                           		// 0x0344 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UMorphTargetSet* >                   MorphSets;                                        		// 0x0350 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FActiveMorph >                      ActiveMorphs;                                     		// 0x035C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FActiveMorph >                      ActiveCurveMorphs;                                		// 0x0368 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0374 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMeshComponent.MorphTargetIndexMap
	TArray< struct FAttachment >                       Attachments;                                      		// 0x03B0 (0x000C) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< unsigned char >                            SkelControlIndex;                                 		// 0x03BC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            PostPhysSkelControlIndex;                         		// 0x03C8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ForcedLodModel;                                   		// 0x03D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinLodModel;                                      		// 0x03D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PredictedLODLevel;                                		// 0x03DC (0x0004) [0x0000000000000000]              
	int                                                OldPredictedLODLevel;                             		// 0x03E0 (0x0004) [0x0000000000000000]              
	float                                              AnimationLODDistanceFactor;                       		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AnimationLODFrameRate;                            		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistanceFactor;                                		// 0x03EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bForceWireframe;                                  		// 0x03F0 (0x0004) [0x0000000000000000]              
	int                                                bForceRefpose;                                    		// 0x03F4 (0x0004) [0x0000000000000000]              
	int                                                bOldForceRefPose;                                 		// 0x03F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoSkeletonUpdate : 1;                            		// 0x03FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                bDisplayBones;                                    		// 0x0400 (0x0004) [0x0000000000000000]              
	int                                                bShowPrePhysBones;                                		// 0x0404 (0x0004) [0x0000000000000000]              
	int                                                bHideSkin;                                        		// 0x0408 (0x0004) [0x0000000000000000]              
	int                                                bForceRawOffset;                                  		// 0x040C (0x0004) [0x0000000000000000]              
	int                                                bIgnoreControllers;                               		// 0x0410 (0x0004) [0x0000000000000000]              
	int                                                bTransformFromAnimParent;                         		// 0x0414 (0x0004) [0x0000000000000000]              
	int                                                TickTag;                                          		// 0x0418 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                InitTag;                                          		// 0x041C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CachedAtomsTag;                                   		// 0x0420 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                bUseSingleBodyPhysics;                            		// 0x0424 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bRequiredBonesUpToDate;                           		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistFactorForKinematicUpdate;                  		// 0x042C (0x0004) [0x0000000000000000]              
	int                                                FramesPhysicsAsleep;                              		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHasValidBodies : 1;                              		// 0x0434 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;              		// 0x0434 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bComponentUseFixedSkelBounds : 1;                 		// 0x0434 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseBoundsFromParentAnimComponent : 1;            		// 0x0434 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDoKinematicUpdatePostFence : 1;                  		// 0x0434 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bConsiderAllBodiesForBounds : 1;                  		// 0x0434 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                   		// 0x0434 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;            		// 0x0434 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bTickAnimNodesWhenNotRendered : 1;                		// 0x0434 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;           		// 0x0434 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bForceDiscardRootMotion : 1;                      		// 0x0434 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bNotifyRootMotionProcessed : 1;                   		// 0x0434 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bRootMotionModeChangeNotify : 1;                  		// 0x0434 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bRootMotionExtractedNotify : 1;                   		// 0x0434 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bProcessingRootMotion : 1;                        		// 0x0434 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;       		// 0x0434 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bDisableFaceFX : 1;                               		// 0x0434 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bAnimTreeInitialised : 1;                         		// 0x0434 (0x0004) [0x0000000000002002] [0x00020000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceMeshObjectUpdate : 1;                       		// 0x0434 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bHasPhysicsAssetInstance : 1;                     		// 0x0434 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;           		// 0x0434 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bUpdateJointsFromAnimation : 1;                   		// 0x0434 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bSkelCompFixed : 1;                               		// 0x0434 (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                      		// 0x0434 (0x0004) [0x0000000000000002] [0x00800000] ( CPF_Const )
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                		// 0x0434 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                  		// 0x0434 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bPerBoneVolumeEffects : 1;                        		// 0x0434 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bPerBoneMotionBlur : 1;                           		// 0x0434 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;            		// 0x0434 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bUseRawData : 1;                                  		// 0x0434 (0x0004) [0x0000000000000002] [0x20000000] ( CPF_Const )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x0434 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;           		// 0x0434 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bNeedsToDeleteHitMask : 1;                        		// 0x0438 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPauseAnims : 1;                                  		// 0x0438 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bChartDistanceFactor : 1;                         		// 0x0438 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnableLineCheckWithBounds : 1;                   		// 0x0438 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCanHighlightSelectedSections : 1;                		// 0x0438 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIgnorePitchRollForRootRotation : 1;              		// 0x0438 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIgnoredByFXCoordinator : 1;                      		// 0x0438 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSkipUpdateSkelPose : 1;                          		// 0x0438 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNonThreadedSkelUpdate : 1;                  		// 0x0438 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bWaitingForThreadedAnimResults : 1;               		// 0x0438 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	struct FVector                                     LineCheckBoundsScale;                             		// 0x043C (0x000C) [0x0000000000000000]              
	unsigned long                                      bEnableClothSimulation : 1;                       		// 0x0448 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableClothCollision : 1;                       		// 0x0448 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothFrozen : 1;                                 		// 0x0448 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;              		// 0x0448 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bResetWhenInactive : 1;                           		// 0x0448 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bClothAwakeOnStartup : 1;                         		// 0x0448 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bClothBaseVelClamp : 1;                           		// 0x0448 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bClothBaseVelInterp : 1;                          		// 0x0448 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                  		// 0x0448 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIsClothOnStaticObject : 1;                       		// 0x0448 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUpdatedFixedClothVerts : 1;                      		// 0x0448 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bClothPositionalDampening : 1;                    		// 0x0448 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bClothWindRelativeToOwner : 1;                    		// 0x0448 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRecentlyRendered : 1;                            		// 0x0448 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bCacheAnimSequenceNodes : 1;                      		// 0x0448 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bIsGestaltAccessoryMesh : 1;                      		// 0x0448 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                   		// 0x0448 (0x0004) [0x0000000000002002] [0x00010000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                    		// 0x0448 (0x0004) [0x0000000000002002] [0x00020000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateComposeSkeletonPasses : 1;                 		// 0x0448 (0x0004) [0x0000000000002002] [0x00040000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bValidTemporarySavedAnimSets : 1;                 		// 0x0448 (0x0004) [0x0000000000003002] [0x00080000] ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBonePair >                         InstanceVertexWeightBones;                        		// 0x044C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FSkelMeshComponentLODInfo >         LODInfo;                                          		// 0x0458 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     FrozenLocalToWorldPos;                            		// 0x0464 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    FrozenLocalToWorldRot;                            		// 0x0470 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     ClothExternalForce;                               		// 0x047C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ClothWind;                                        		// 0x0488 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ClothBaseVelClampRange;                           		// 0x0494 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendWeight;                                 		// 0x04A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothDynamicBlendWeight;                          		// 0x04A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClothBlendMinDistanceFactor;                      		// 0x04A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendMaxDistanceFactor;                      		// 0x04AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinPosDampRange;                                  		// 0x04B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxPosDampRange;                                  		// 0x04BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinPosDampScale;                                  		// 0x04C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxPosDampScale;                                  		// 0x04D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ClothSim;                                         		// 0x04E0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x04E4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshPosData;                                 		// 0x04E8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVector >                           ClothMeshNormalData;                              		// 0x04F4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ClothMeshIndexData;                               		// 0x0500 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshVerts;                                		// 0x050C (0x0004) [0x0000000000000000]              
	int                                                NumClothMeshIndices;                              		// 0x0510 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ClothMeshParentData;                              		// 0x0514 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshParentIndices;                        		// 0x0520 (0x0004) [0x0000000000000000]              
	int                                                LastClothHitVertexId;                             		// 0x0524 (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           ClothMeshWeldedPosData;                           		// 0x0528 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshWeldedNormalData;                        		// 0x0534 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothMeshWeldedIndexData;                         		// 0x0540 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ClothDirtyBufferFlag;                             		// 0x054C (0x0004) [0x0000000000000000]              
	unsigned char                                      ClothRBChannel;                                   		// 0x0550 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                       		// 0x0554 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothForceScale;                                  		// 0x0558 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothImpulseScale;                                		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothAttachmentTearFactor;                        		// 0x0560 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothUseCompartment : 1;                         		// 0x0564 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              MinDistanceForClothReset;                         		// 0x0568 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LastClothLocation;                                		// 0x056C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      ApexClothingRBChannel;                            		// 0x0578 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                ApexClothingRBCollideWithChannels;                		// 0x057C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ApexClothingCollisionRBChannel;                   		// 0x0580 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeApexClothingWhenNotRendered : 1;       		// 0x0584 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLocalSpaceWind : 1;                              		// 0x0584 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     WindVelocity;                                     		// 0x0588 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindVelocityBlendTime;                            		// 0x0594 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSkipInitClothing : 1;                            		// 0x0598 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	struct FPointer                                    SoftBodySim;                                      		// 0x059C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SoftBodySceneIndex;                               		// 0x05A0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bEnableSoftBodySimulation : 1;                    		// 0x05A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FVector >                           SoftBodyTetraPosData;                             		// 0x05A8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodyTetraIndexData;                           		// 0x05B4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumSoftBodyTetraVerts;                            		// 0x05C0 (0x0004) [0x0000000000000000]              
	int                                                NumSoftBodyTetraIndices;                          		// 0x05C4 (0x0004) [0x0000000000000000]              
	float                                              SoftBodyImpulseScale;                             		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftBodyFrozen : 1;                              		// 0x05CC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;           		// 0x05CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                      		// 0x05CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSoftBodyUseCompartment : 1;                      		// 0x05CC (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      SoftBodyRBChannel;                                		// 0x05D0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                SoftBodyRBCollideWithChannels;                    		// 0x05D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    SoftBodyASVPlane;                                 		// 0x05D8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UMaterial*                                   LimitMaterial;                                    		// 0x05DC (0x0004) [0x0000000000000000]              
	struct FBoneAtom                                   RootMotionDelta;                                  		// 0x05E0 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RootMotionVelocity;                               		// 0x0600 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RootBoneTranslation;                              		// 0x060C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionAccelScale;                             		// 0x0618 (0x000C) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x0624 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviousRMM;                                      		// 0x0625 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      PendingRMM;                                       		// 0x0626 (0x0001) [0x0000000000000000]              
	unsigned char                                      OldPendingRMM;                                    		// 0x0627 (0x0001) [0x0000000000000000]              
	int                                                bRMMOneFrameDelay;                                		// 0x0628 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RootMotionRotationMode;                           		// 0x062C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AnimRotationOnly;                                 		// 0x062D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                bRemoveRootBoneScale;                             		// 0x0630 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bOverrideRootMotionSpace : 1;                     		// 0x0634 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	struct FRotator                                    RootMotionSpace;                                  		// 0x0638 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      FaceFXBlendMode;                                  		// 0x0644 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    FaceFXActorInstance;                              		// 0x0648 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UAudioComponent*                             CachedFaceFXAudioComp;                            		// 0x064C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< unsigned char >                            BoneVisibilityStates;                             		// 0x0650 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UAkEvent*                                    CachedFaceFxAkEvent;                              		// 0x065C (0x0004) [0x0000000000000000]              
	float                                              FaceFXPlayTime;                                   		// 0x0660 (0x0004) [0x0000000000000000]              
	struct FAkPlayingInfo                              CachedPlayingInfo;                                		// 0x0664 (0x0008) [0x0000000000080000]              ( CPF_Component )
	class UFaceFXAnimSet*                              PlayingFXAnimSet;                                 		// 0x066C (0x0004) [0x0000000000000000]              
	struct FBoneAtom                                   LocalToWorldBoneAtom;                             		// 0x0670 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              ProgressiveDrawingFraction;                       		// 0x0690 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CustomSortAlternateIndexMode;                     		// 0x0694 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ViewZeroOffset;                                   		// 0x0695 (0x0001) [0x0000000000000000]              
	unsigned char                                      ViewOneOffset;                                    		// 0x0696 (0x0001) [0x0000000000000000]              
	class UMorphNodeWeight*                            BlendMorphNode;                                   		// 0x0698 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MorphWeightTarget;                                		// 0x069C (0x0004) [0x0000000000000000]              
	float                                              MorphWeightStart;                                 		// 0x06A0 (0x0004) [0x0000000000000000]              
	float                                              MorphBlendTime;                                   		// 0x06A4 (0x0004) [0x0000000000000000]              
	float                                              MorphBlendCurr;                                   		// 0x06A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2671 ];

		return pClassPointer;
	};

	void Behavior_ChangeBoneVisibility ( struct FName InBoneName, unsigned long bVisible );
	void Behavior_ToggleBoneVisibility ( struct FName InBoneName );
	void Behavior_InstanceVertexWeight ( struct FName InBoneName );
	void SetViewportMaterialOffsets ( unsigned char view0, unsigned char view1 );
	void SetForceDiscardRootMotion ( unsigned long bDiscardRootMotion );
	void Behavior_SetMorphNodeWeight ( struct FName NodeName, float NewWeight, float WeightBlendTime );
	void SetRootMotionSpaceOverride ( unsigned long bInOverrideRootMotionSpace, struct FRotator NewRootMotionSpace );
	void SetRemoveRootBoneScale ( unsigned long bNewRemoveRootBoneScale );
	bool GetAnimTreeNodes ( struct FName NodeName, class UClass* NodeClass, TArray< class UAnimNode* >* AnimNodeList );
	void Behavior_SetSkelControlStrength ( struct FName SkelControlName, unsigned long bActive );
	struct FRotator GetRotation ( );
	struct FVector GetPosition ( );
	void BreakConstraint ( struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName, unsigned long bVelChange );
	void SkelMeshCompOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	bool eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData );
	void StopAnim ( );
	void PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying, float StartTime, unsigned long bPlayBackwards );
	void Blink ( float CloseTime, float OpenTime );
	void ShowMaterialSection ( int MaterialID, unsigned long bShow, int LODIndex );
	void UpdateMeshForBrokenConstraints ( );
	void InitBoneVisibilityStates ( );
	void UnHideBoneByName ( struct FName BoneName );
	void HideBoneByName ( struct FName BoneName, unsigned char PhysBodyOption );
	bool IsBoneHidden ( int BoneIndex );
	void UnHideBone ( int BoneIndex );
	void HideBone ( int BoneIndex, unsigned char PhysBodyOption );
	void SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration );
	void SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration );
	float GetFaceFXRegister ( struct FString RegName );
	void DeclareFaceFXRegister ( struct FString RegName );
	bool IsPlayingFaceFXAnim ( );
	void StopFaceFXAnim ( );
	bool PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay, struct FAkPlayingInfo AkPlayingInfo );
	void ToggleInstanceVertexWeights ( unsigned long bEnable, int LODIdx );
	void UpdateInstanceVertexWeightBones ( TArray< struct FBonePair > BonePairs );
	int FindInstanceVertexweightBonePair ( struct FBonePair Bones );
	void RemoveInstanceVertexWeightBoneParented ( struct FName BoneName );
	void AddInstanceVertexWeightBoneParented ( struct FName BoneName, unsigned long bPairWithParent );
	bool GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, TArray< struct FName >* out_Bones );
	void UpdateAnimations ( );
	void ForceSkelUpdate ( );
	void UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport );
	void SetHasPhysicsAssetInstance ( unsigned long bHasInstance, unsigned long bUseCurrentPosition );
	class URB_BodyInstance* FindBodyInstanceNamed ( struct FName BoneName );
	struct FName FindConstraintBoneName ( int ConstraintIndex );
	int FindConstraintIndex ( struct FName ConstraintName );
	void InitMorphTargets ( );
	void InitSkelControls ( );
	void UpdateParentBoneMap ( );
	void SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp );
	void SetAnimTreeTemplate ( class UAnimTree* NewTemplate );
	struct FVector GetClosestCollidingBoneLocation ( struct FVector TestLocation, unsigned long bCheckZeroExtent, unsigned long bCheckNonZeroExtent );
	struct FName FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation );
	void TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	void TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	struct FVector GetBoneAxis ( struct FName BoneName, unsigned char Axis );
	struct FVector GetRefPosePosition ( int BoneIndex );
	bool BoneIsChildOf ( struct FName BoneName, struct FName ParentBoneName );
	void GetBoneNames ( TArray< struct FName >* BoneNames );
	struct FName GetParentBone ( struct FName BoneName );
	struct FMatrix GetBoneMatrix ( int BoneIndex );
	struct FName GetBoneName ( int BoneIndex );
	int MatchRefBone ( struct FName BoneName );
	struct FRotator GetBoneRotation ( struct FName BoneName );
	struct FVector GetBoneLocationEx ( struct FName BoneName, int Space, unsigned char* Found );
	struct FVector GetBoneLocation ( struct FName BoneName, int Space );
	struct FQuat GetBoneQuaternion ( struct FName BoneName, int Space );
	void DrawAnimDebug ( class UCanvas* Canvas, struct FName StartingPoint );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
	void AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
	float GetAnimLength ( struct FName AnimSeqName );
	float GetAnimRateByDuration ( struct FName AnimSeqName, float Duration );
	void RestoreSavedAnimSets ( );
	void SaveAnimSets ( );
	class UAnimSequence* FindAnimSequence ( struct FName AnimSeqName, unsigned long bReverseSearchOrder );
	void WakeSoftBody ( );
	void SetSoftBodyFrozen ( unsigned long bNewFrozen );
	void UpdateSoftBodyParams ( );
	void SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax );
	void EnableClothValidBounds ( unsigned long IfEnableClothValidBounds );
	void AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable );
	void SetClothVelocity ( struct FVector VelocityOffSet );
	void SetClothPosition ( struct FVector ClothOffSet );
	void SetClothSleep ( unsigned long IfClothSleep );
	void SetClothThickness ( float ClothThickness );
	void SetClothTearFactor ( float ClothTearFactor );
	void SetClothStretchingStiffness ( float ClothStretchingStiffness );
	void SetClothSolverIterations ( int ClothSolverIterations );
	void SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity );
	void SetClothPressure ( float ClothPressure );
	void SetClothFriction ( float ClothFriction );
	void SetClothFlags ( int ClothFlags );
	void SetClothDampingCoefficient ( float ClothDampingCoefficient );
	void SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient );
	void SetClothBendingStiffness ( float ClothBendingStiffness );
	void SetClothAttachmentTearFactor ( float ClothAttachTearFactor );
	void SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient );
	float GetClothThickness ( );
	float GetClothTearFactor ( );
	float GetClothStretchingStiffness ( );
	int GetClothSolverIterations ( );
	float GetClothSleepLinearVelocity ( );
	float GetClothPressure ( );
	float GetClothFriction ( );
	int GetClothFlags ( );
	float GetClothDampingCoefficient ( );
	float GetClothCollisionResponseCoefficient ( );
	float GetClothBendingStiffness ( );
	float GetClothAttachmentTearFactor ( );
	float GetClothAttachmentResponseCoefficient ( );
	void ForceApexClothingTeleport ( );
	void ForceApexClothingTeleportAndReset ( );
	void AddImpulseAtClothPos ( struct FVector Position, struct FVector Impulse, float Radius );
	void ResetClothVertsToRefPose ( );
	void SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts );
	void SetClothExternalForce ( struct FVector InForce );
	void UpdateClothParams ( );
	void SetEnableClothingSimulation ( unsigned long bInEnable );
	void SetClothFrozen ( unsigned long bNewFrozen );
	void SetEnableClothSimulation ( unsigned long bInEnable );
	void SetForceRefPose ( unsigned long bNewForceRefPose );
	void SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit );
	void InitGestaltMeshDataFromOther ( class USkeletalMeshComponent* ComponentToCopyFrom );
	void SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases );
	struct FMatrix GetTransformMatrix ( );
	void AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	bool IsComponentAttached ( class UActorComponent* Component, struct FName BoneName );
	class UActorComponent* FindComponentAttachedToBone ( struct FName InBoneName );
	struct FName GetSocketBoneName ( struct FName InSocketName );
	class USkeletalMeshSocket* GetSocketByName ( struct FName InSocketName );
	bool GetBoneOrSocketMeshDeltaTransform ( struct FName AnimSeqName, struct FName InBoneOrSocketName, float StartOffset, float EndOffset, struct FVector* OutDeltaLocation, struct FRotator* OutDeltaRotation );
	bool GetBoneOrSocketMeshTransformAtTime ( struct FName AnimSeqName, float FrameTime, struct FName InBoneOrSocketName, struct FVector* OutLocation, struct FRotator* OutRotation );
	bool GetSocketWorldLocationAndRotation ( struct FName InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation );
	void AttachComponentToSocket ( class UActorComponent* Component, struct FName SocketName );
	void DetachComponent ( class UActorComponent* Component );
	void AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale );
};

UClass* USkeletalMeshComponent::pClassPointer = NULL;

// Class Engine.SkeletalMesh
// 0x0378 (0x03B4 - 0x003C)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                           		// 0x003C (0x001C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0058 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< class UApexClothingAsset* >                ClothingAssets;                                   		// 0x0064 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FVector                                     Origin;                                           		// 0x0070 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FRotator                                    RotOrigin;                                        		// 0x007C (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< int >                                      RefSkeleton;                                      		// 0x0088 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SkeletalDepth;                                    		// 0x0094 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0098 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                        		// 0x00D4 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FBoneAtom >                         RefBasesInvMatrix;                                		// 0x00E0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FBoxSphereBounds                            ReferencePoseBounds;                              		// 0x00EC (0x001C) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FBoneMirrorInfo >                   SkelMirrorTable;                                  		// 0x0108 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	unsigned char                                      SkelMirrorAxis;                                   		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SkelMirrorFlipAxis;                               		// 0x0115 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USkeletalMeshSocket* >               Sockets;                                          		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           BoneBreakNames;                                   		// 0x0124 (0x000C) [0x0000000000021003]              ( CPF_Edit | CPF_Const | CPF_Native | CPF_EditConst )
	TArray< unsigned char >                            BoneBreakOptions;                                 		// 0x0130 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< struct FSkeletalMeshLODInfo >              LODInfo;                                          		// 0x013C (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	TArray< struct FName >                             PerPolyCollisionBones;                            		// 0x0148 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             AddToParentPerPolyCollisionBone;                  		// 0x0154 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      PerPolyBoneKDOPs;                                 		// 0x0160 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                     		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSimpleLineCollision : 1;                      		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSimpleBoxCollision : 1;                       		// 0x016C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x016C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFullPrecisionUVs : 1;                         		// 0x016C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	class UFaceFXAsset*                                FaceFXAsset;                                      		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPC;                                        		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPS3;                                       		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasXbox360;                                   		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPointer >                          ClothMesh;                                        		// 0x0180 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    ClothMeshScale;                                   		// 0x018C (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothToGraphicsVertMap;                           		// 0x0198 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< float >                                    ClothMovementScale;                               		// 0x01A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      ClothMovementScaleGenMode;                        		// 0x01B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothToAnimMeshMaxDist;                           		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLimitClothToAnimMesh : 1;                        		// 0x01B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< int >                                      ClothWeldingMap;                                  		// 0x01BC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                ClothWeldingDomain;                               		// 0x01C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothWeldedIndices;                               		// 0x01CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bForceNoWelding : 1;                              		// 0x01D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                NumFreeClothVerts;                                		// 0x01DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothIndexBuffer;                                 		// 0x01E0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             ClothBones;                                       		// 0x01EC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                ClothHierarchyLevels;                             		// 0x01F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothBendConstraints : 1;                  		// 0x01FC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothDamping : 1;                          		// 0x01FC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseClothCOMDamping : 1;                          		// 0x01FC (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              ClothStretchStiffness;                            		// 0x0200 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothBendStiffness;                               		// 0x0204 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDensity;                                     		// 0x0208 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothThickness;                                   		// 0x020C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDamping;                                     		// 0x0210 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothIterations;                                  		// 0x0214 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothHierarchicalIterations;                      		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothFriction;                                    		// 0x021C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothRelativeGridSpacing;                         		// 0x0220 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothPressure;                                    		// 0x0224 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothCollisionResponseCoefficient;                		// 0x0228 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentResponseCoefficient;               		// 0x022C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentTearFactor;                        		// 0x0230 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothSleepLinearVelocity;                         		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HardStretchLimitFactor;                           		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bHardStretchLimit : 1;                            		// 0x023C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;             		// 0x023C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothSelfCollision : 1;                    		// 0x023C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothPressure : 1;                         		// 0x023C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTwoWayCollision : 1;                  		// 0x023C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	TArray< struct FClothSpecialBoneInfo >             ClothSpecialBones;                                		// 0x0240 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnableClothLineChecks : 1;                       		// 0x024C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothMetal : 1;                                  		// 0x024C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	float                                              ClothMetalImpulseThreshold;                       		// 0x0250 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalPenetrationDepth;                       		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalMaxDeformationDistance;                 		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTearing : 1;                          		// 0x025C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              ClothTearFactor;                                  		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothTearReserve;                                 		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableValidBounds : 1;                           		// 0x0268 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector                                     ValidBoundsMin;                                   		// 0x026C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ValidBoundsMax;                                   		// 0x0278 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FMap_Mirror                                 ClothTornTriMap;                                  		// 0x0284 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      SoftBodySurfaceToGraphicsVertMap;                 		// 0x02C0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodySurfaceIndices;                           		// 0x02CC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVector >                           SoftBodyTetraVertsUnscaled;                       		// 0x02D8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodyTetraIndices;                             		// 0x02E4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSoftBodyTetraLink >                SoftBodyTetraLinks;                               		// 0x02F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPointer >                          CachedSoftBodyMeshes;                             		// 0x02FC (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    CachedSoftBodyMeshScales;                         		// 0x0308 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FName >                             SoftBodyBones;                                    		// 0x0314 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSoftBodySpecialBoneInfo >          SoftBodySpecialBones;                             		// 0x0320 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              SoftBodyVolumeStiffness;                          		// 0x032C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyStretchingStiffness;                      		// 0x0330 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDensity;                                  		// 0x0334 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyParticleRadius;                           		// 0x0338 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDamping;                                  		// 0x033C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySolverIterations;                         		// 0x0340 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyFriction;                                 		// 0x0344 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyRelativeGridSpacing;                      		// 0x0348 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodySleepLinearVelocity;                      		// 0x034C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                 		// 0x0350 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentResponse;                       		// 0x0354 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyCollisionResponse;                        		// 0x0358 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDetailLevel;                              		// 0x035C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySubdivisionLevel;                         		// 0x0360 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSoftBodyIsoSurface : 1;                          		// 0x0364 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyDamping : 1;                       		// 0x0364 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                       		// 0x0364 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentThreshold;                      		// 0x0368 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;               		// 0x036C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentTearFactor;                     		// 0x0370 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                    		// 0x0374 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasVertexColors : 1;                             		// 0x0374 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< unsigned long >                            GraphicsIndexIsCloth;                             		// 0x0378 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< float >                                    CachedStreamingTextureFactors;                    		// 0x0384 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              StreamingDistanceMultiplier;                      		// 0x0390 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ReleaseResourcesFence;                            		// 0x0394 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FQWord                                      SkelMeshRUID;                                     		// 0x0398 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FBoneAtom >                         CachedRefBoneAtoms;                               		// 0x03A0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FName                                       CachedAnimSetLinkupName;                          		// 0x03AC (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2673 ];

		return pClassPointer;
	};

};

UClass* USkeletalMesh::pClassPointer = NULL;

// Class Engine.SkeletalMeshSocket
// 0x0034 (0x0070 - 0x003C)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                       		// 0x003C (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FName                                       BoneName;                                         		// 0x0044 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     RelativeLocation;                                 		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0058 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeScale;                                    		// 0x0064 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2675 ];

		return pClassPointer;
	};

};

UClass* USkeletalMeshSocket::pClassPointer = NULL;

// Class Engine.SplineActor
// 0x0050 (0x01D8 - 0x0188)
class ASplineActor : public AActor
{
public:
	TArray< struct FSplineConnection >                 Connections;                                      		// 0x0188 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     SplineActorTangent;                               		// 0x0194 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SplineColor;                                      		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableDestination : 1;                          		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x01A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< class ASplineActor* >                      LinksFrom;                                        		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASplineActor*                                nextOrdered;                                      		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASplineActor*                                prevOrdered;                                      		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASplineActor*                                previousPath;                                     		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                bestPathWeight;                                   		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                visitedWeight;                                    		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInterpCurveFloat                           SplineVelocityOverTime;                           		// 0x01C8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2677 ];

		return pClassPointer;
	};

	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void GetAllConnectedSplineActors ( TArray< class ASplineActor* >* OutSet );
	bool FindSplinePathTo ( class ASplineActor* Goal, TArray< class ASplineActor* >* OutRoute );
	class ASplineActor* GetBestConnectionInDirection ( struct FVector DesiredDir, unsigned long bUseLinksFrom );
	class ASplineActor* GetRandomConnection ( unsigned long bUseLinksFrom );
	void BreakAllConnectionsFrom ( );
	void BreakAllConnections ( );
	void BreakConnectionTo ( class ASplineActor* NextActor );
	class ASplineActor* FindTargetForComponent ( class USplineComponent* SplineComp );
	class USplineComponent* FindSplineComponentTo ( class ASplineActor* NextActor );
	bool IsConnectedTo ( class ASplineActor* NextActor, unsigned long bCheckForDisableDestination );
	void AddConnectionTo ( class ASplineActor* NextActor );
	void UpdateConnectedSplineComponents ( unsigned long bFinish );
	void UpdateSplineComponents ( );
	struct FVector GetWorldSpaceTangent ( );
};

UClass* ASplineActor::pClassPointer = NULL;

// Class Engine.SplineLoftActor
// 0x0048 (0x0220 - 0x01D8)
class ASplineLoftActor : public ASplineActor
{
public:
	float                                              ScaleX;                                           		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleY;                                           		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USplineMeshComponent* >              SplineMeshComps;                                  		// 0x01E0 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMesh*                                 DeformMesh;                                       		// 0x01EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMaterialInterface* >                DeformMeshMaterials;                              		// 0x01F0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              Roll;                                             		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldXDir;                                        		// 0x0200 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   Offset;                                           		// 0x020C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSmoothInterpRollAndScale : 1;                    		// 0x0214 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0214 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           MeshLightEnvironment;                             		// 0x0218 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	float                                              MeshMaxDrawDistance;                              		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2679 ];

		return pClassPointer;
	};

	void UpdateSplineParams ( );
	void ClearLoftMesh ( );
};

UClass* ASplineLoftActor::pClassPointer = NULL;

// Class Engine.SplineLoftActorMovable
// 0x0000 (0x0220 - 0x0220)
class ASplineLoftActorMovable : public ASplineLoftActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2681 ];

		return pClassPointer;
	};

};

UClass* ASplineLoftActorMovable::pClassPointer = NULL;

// Class Engine.SplineComponent
// 0x0034 (0x0244 - 0x0210)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                       		// 0x0210 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SplineCurviness;                                  		// 0x0220 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FColor                                      SplineColor;                                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplineDrawRes;                                    		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplineArrowSize;                                  		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSplineDisabled : 1;                              		// 0x0230 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FInterpCurveFloat                           SplineReparamTable;                               		// 0x0234 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2683 ];

		return pClassPointer;
	};

	struct FVector GetTangentAtDistanceAlongSpline ( float Distance );
	struct FVector GetLocationAtDistanceAlongSpline ( float Distance );
	float GetSplineLength ( );
	void UpdateSplineReparamTable ( );
	void UpdateSplineCurviness ( );
};

UClass* USplineComponent::pClassPointer = NULL;

// Class Engine.ReplicationInfo
// 0x0000 (0x0188 - 0x0188)
class AReplicationInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2685 ];

		return pClassPointer;
	};

};

UClass* AReplicationInfo::pClassPointer = NULL;

// Class Engine.GameReplicationInfo
// 0x0064 (0x01EC - 0x0188)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	struct FPointer                                    VfTable_IIResourcePoolProvider;                   		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      GameClass;                                        		// 0x018C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bStopCountDown : 1;                               		// 0x0190 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bMatchHasBegun : 1;                               		// 0x0190 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bMatchIsOver : 1;                                 		// 0x0190 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bAllInCinematicMode : 1;                          		// 0x0190 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIgnoreMoveInput : 1;                             		// 0x0190 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIgnoreLookInput : 1;                             		// 0x0190 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIgnoreButtonInput : 1;                           		// 0x0190 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	int                                                RemainingTime;                                    		// 0x0194 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ElapsedTime;                                      		// 0x0198 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                RemainingMinute;                                  		// 0x019C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GoalScore;                                        		// 0x01A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TimeLimit;                                        		// 0x01A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class ATeamInfo* >                         Teams;                                            		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ServerName;                                       		// 0x01B4 (0x000C) [0x0000000000444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AActor*                                      Winner;                                           		// 0x01C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class APlayerReplicationInfo* >            PRIArray;                                         		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AResourcePoolManager*                        ResourcePoolManager;                              		// 0x01DC (0x0004) [0x0000000000000000]              
	struct FMusicStateInfo                             MusicInfo;                                        		// 0x01E0 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2687 ];

		return pClassPointer;
	};

	struct FResourcePoolReference GetResourcePoolForResourceDefinition ( class UResourceDefinition* Resource, unsigned long bCreatePoolIfOneDoesntExist );
	bool eventShouldShowGore ( );
	bool IsCoopMultiplayerGame ( );
	bool IsMultiplayerGame ( );
	void EndGame ( );
	void StartMatch ( );
	void SetTeam ( int Index, class ATeamInfo* TI );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	bool OnSameTeam ( class AActor* A, class AActor* B );
	void eventTimer ( );
	void eventDestroyed ( );
	void Reset ( );
	void ReceivedGameClass ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AGameReplicationInfo::pClassPointer = NULL;

// Class Engine.PlayerReplicationInfo
// 0x00CC (0x0254 - 0x0188)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                            		// 0x0188 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                Deaths;                                           		// 0x018C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Ping;                                             		// 0x0190 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      TTSSpeaker;                                       		// 0x0191 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumLives;                                         		// 0x0194 (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerName;                                       		// 0x0198 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FString                                     PlayerNameHTML;                                   		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OldName;                                          		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerID;                                         		// 0x01BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATeamInfo*                                   Team;                                             		// 0x01C0 (0x0004) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	unsigned long                                      bAdmin : 1;                                       		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bIsSpectator : 1;                                 		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bOnlySpectator : 1;                               		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bWaitingPlayer : 1;                               		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bReadyToPlay : 1;                                 		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bOutOfLives : 1;                                  		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bBot : 1;                                         		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bHasBeenWelcomed : 1;                             		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsInactive : 1;                                  		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      bFromPreviousLevel : 1;                           		// 0x01C4 (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	int                                                StartTime;                                        		// 0x01C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     StringSpectating;                                 		// 0x01CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringUnknown;                                    		// 0x01D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                Kills;                                            		// 0x01E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      GameMessageClass;                                 		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              ExactPing;                                        		// 0x01EC (0x0004) [0x0000000000000000]              
	struct FString                                     SavedNetworkAddress;                              		// 0x01F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUniqueNetId                                UniqueId;                                         		// 0x01FC (0x0018) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       SessionName;                                      		// 0x0214 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FAutomatedTestingDatum                      AutomatedTestingData;                             		// 0x021C (0x0008) [0x0000000000000000]              
	int                                                StatConnectionCounts;                             		// 0x0224 (0x0004) [0x0000000000000000]              
	int                                                StatPingTotals;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                StatPingMin;                                      		// 0x022C (0x0004) [0x0000000000000000]              
	int                                                StatPingMax;                                      		// 0x0230 (0x0004) [0x0000000000000000]              
	int                                                StatPKLTotal;                                     		// 0x0234 (0x0004) [0x0000000000000000]              
	int                                                StatPKLMin;                                       		// 0x0238 (0x0004) [0x0000000000000000]              
	int                                                StatPKLMax;                                       		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                StatMaxInBPS;                                     		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                StatAvgInBPS;                                     		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                StatMaxOutBPS;                                    		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                StatAvgOutBPS;                                    		// 0x024C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  Avatar;                                           		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2689 ];

		return pClassPointer;
	};

	void HandlePlayerJoinWithValidName ( );
	void UnregisterPlayerFromSession ( );
	void RegisterPlayerWithSession ( );
	bool IsInvalidName ( );
	unsigned char GetTeamNum ( );
	void SetUniqueId ( struct FUniqueNetId PlayerUniqueId );
	void SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI );
	void IncrementDeaths ( int Amt );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OverrideWith ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* Duplicate ( );
	void SetWaitingPlayer ( unsigned long B );
	void eventSetPlayerName ( struct FString S );
	struct FString eventGetHumanReadableHTMLName ( );
	struct FString GetHumanReadableName ( );
	void Reset ( );
	void eventDestroyed ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	void UpdatePing ( float TimeStamp );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void ClientInitialize ( class AController* C );
	void eventPostBeginPlay ( );
};

UClass* APlayerReplicationInfo::pClassPointer = NULL;

// Class Engine.TeamInfo
// 0x001C (0x01A4 - 0x0188)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                         		// 0x0188 (0x000C) [0x0000000000408022]              ( CPF_Const | CPF_Net | CPF_Localized | CPF_NeedCtorLink )
	int                                                Size;                                             		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              Score;                                            		// 0x0198 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TeamIndex;                                        		// 0x019C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      TeamColor;                                        		// 0x01A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2691 ];

		return pClassPointer;
	};

	unsigned char GetTeamNum ( );
	struct FString GetHumanReadableName ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void eventDestroyed ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ATeamInfo::pClassPointer = NULL;

// Class Engine.Camera
// 0x0274 (0x03FC - 0x0188)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                          		// 0x0188 (0x0004) [0x0000000000000000]              
	struct FName                                       CameraStyle;                                      		// 0x018C (0x0008) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x0194 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLockedFOV : 1;                                   		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0198 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableFading : 1;                                		// 0x0198 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bForceDisableTemporalAA : 1;                      		// 0x0198 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEnableColorScaling : 1;                          		// 0x0198 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnableColorScaleInterp : 1;                      		// 0x0198 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bUseClientSideCameraUpdates : 1;                  		// 0x0198 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDebugClientSideCamera : 1;                       		// 0x0198 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShouldSendClientSideCameraUpdate : 1;            		// 0x0198 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              LockedFOV;                                        		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              ConstrainedAspectRatio;                           		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              DefaultAspectRatio;                               		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              OffAxisYawAngle;                                  		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              OffAxisPitchAngle;                                		// 0x01AC (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              FadeAmount;                                       		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              CamOverridePostProcessAlpha;                      		// 0x01B8 (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CamPostProcessSettings;                           		// 0x01BC (0x00E8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRenderingPerformanceOverrides              RenderingOverrides;                               		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FVector                                     ColorScale;                                       		// 0x02A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredColorScale;                                		// 0x02B4 (0x000C) [0x0000000000000000]              
	struct FVector                                     OriginalColorScale;                               		// 0x02C0 (0x000C) [0x0000000000000000]              
	float                                              ColorScaleInterpDuration;                         		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              ColorScaleInterpStartTime;                        		// 0x02D0 (0x0004) [0x0000000000000000]              
	struct FTCameraCache                               CameraCache;                                      		// 0x02D4 (0x0020) [0x0000000000000000]              
	struct FTCameraCache                               LastFrameCameraCache;                             		// 0x02F4 (0x0020) [0x0000000000000000]              
	struct FTViewTarget                                ViewTarget;                                       		// 0x0314 (0x002C) [0x0000000000000000]              
	struct FTViewTarget                                PendingViewTarget;                                		// 0x0340 (0x002C) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x036C (0x0004) [0x0000000000000000]              
	struct FViewTargetTransitionParams                 BlendParams;                                      		// 0x0370 (0x0010) [0x0000000000000000]              
	TArray< class UCameraModifier* >                   ModifierList;                                     		// 0x0380 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              FreeCamDistance;                                  		// 0x038C (0x0004) [0x0000000000000000]              
	struct FVector                                     FreeCamOffset;                                    		// 0x0390 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   FadeAlpha;                                        		// 0x039C (0x0008) [0x0000000000000000]              
	float                                              FadeTime;                                         		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              FadeTimeRemaining;                                		// 0x03A8 (0x0004) [0x0000000000000000]              
	TArray< class AEmitterCameraLensEffectBase* >      CameraLensEffects;                                		// 0x03AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCameraModifier_CameraShake*                 CameraShakeCamMod;                                		// 0x03B8 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      CameraShakeCamModClass;                           		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             AnimInstPool[ 0x8 ];                              		// 0x03C0 (0x0020) [0x0000000000000000]              
	TArray< class UCameraAnimInst* >                   ActiveAnims;                                      		// 0x03E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UCameraAnimInst* >                   FreeAnims;                                        		// 0x03EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ADynamicCameraActor*                         AnimCameraActor;                                  		// 0x03F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2693 ];

		return pClassPointer;
	};

	void StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate );
	void StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate );
	void StopAllCameraAnims ( unsigned long bImmediate );
	class UCameraAnimInst* PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance );
	void ClearAllCameraShakes ( );
	void PlayWorldCameraShake ( class UCameraShake* Shake, class AActor* ShakeInstigator, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, unsigned long bTryForceFeedback, unsigned long bOrientShakeTowardsEpicenter );
	float CalcRadialShakeScale ( class ACamera* Cam, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff );
	void StopCameraShake ( class UCameraShake* Shake );
	void PlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void ClearCameraLensEffects ( );
	void RemoveCameraLensEffect ( class AEmitterCameraLensEffectBase* Emitter );
	void AddCameraLensEffect ( class UClass* LensEffectEmitterClass );
	class AEmitterCameraLensEffectBase* FindCameraLensEffect ( class UClass* LensEffectEmitterClass );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void CheckViewTarget ( struct FTViewTarget* VT );
	void FillCameraCache ( struct FTPOV* NewPOV );
	struct FTPOV BlendViewTargets ( float Alpha, struct FTViewTarget* A, struct FTViewTarget* B );
	void DoUpdateCamera ( float DeltaTime );
	void eventUpdateCamera ( float DeltaTime );
	void SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime );
	struct FRotator GetCameraRotation ( );
	void GetCameraViewPoint ( struct FVector* OutCamLoc, struct FRotator* OutCamRot );
	void SetFOV ( float NewFOV );
	float GetFOVAngle ( );
	void InitializeFor ( class APlayerController* PC );
	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	class UCameraModifier* CreateCameraModifier ( class UClass* ModifierClass );
};

UClass* ACamera::pClassPointer = NULL;

// Class Engine.CameraActor
// 0x0100 (0x0288 - 0x0188)
class ACameraActor : public AActor
{
public:
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0188 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x0188 (0x0004) [0x0000000020000000] [0x00000002] ( CPF_Deprecated )
	float                                              AspectRatio;                                      		// 0x018C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              FOVAngle;                                         		// 0x0190 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              CamOverridePostProcessAlpha;                      		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x0198 (0x00E8) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0280 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        MeshComp;                                         		// 0x0284 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2695 ];

		return pClassPointer;
	};

	void GetCameraView ( float DeltaTime, struct FTPOV* OutPOV );
};

UClass* ACameraActor::pClassPointer = NULL;

// Class Engine.DynamicCameraActor
// 0x0000 (0x0288 - 0x0288)
class ADynamicCameraActor : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2697 ];

		return pClassPointer;
	};

};

UClass* ADynamicCameraActor::pClassPointer = NULL;

// Class Engine.CameraAnim
// 0x0114 (0x0150 - 0x003C)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              AnimLength;                                       		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FBox                                        BoundingBox;                                      		// 0x0044 (0x001C) [0x0000000000000002]              ( CPF_Const )
	struct FPostProcessSettings                        BasePPSettings;                                   		// 0x0060 (0x00E8) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              BasePPSettingsAlpha;                              		// 0x0148 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BaseFOV;                                          		// 0x014C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2699 ];

		return pClassPointer;
	};

};

UClass* UCameraAnim::pClassPointer = NULL;

// Class Engine.CameraAnimInst
// 0x017C (0x01B8 - 0x003C)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                          		// 0x003C (0x0004) [0x0000000000000000]              
	class UInterpGroupInst*                            InterpGroupInst;                                  		// 0x0040 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CurTime;                                          		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x0048 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFinished : 1;                                    		// 0x0048 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAutoReleaseWhenFinished : 1;                     		// 0x0048 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBlendingIn : 1;                                  		// 0x0048 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x0048 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              BlendOutTime;                                     		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              CurBlendInTime;                                   		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurBlendOutTime;                                  		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              BasePlayScale;                                    		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              TransientScaleModifier;                           		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              CurrentBlendWeight;                               		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              RemainingTime;                                    		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           SourceAnimNode;                                   		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PlaySpace;                                        		// 0x007C (0x0001) [0x0000000000000000]              
	unsigned char                                      MirrorAxes;                                       		// 0x007D (0x0001) [0x0000000000000000]              
	struct FMatrix                                     UserPlaySpaceMatrix;                              		// 0x0080 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FPostProcessSettings                        LastPPSettings;                                   		// 0x00C0 (0x00E8) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastPPSettingsAlpha;                              		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCameraLoc;                                    		// 0x01AC (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2701 ];

		return pClassPointer;
	};

	void ApplyMirroring ( struct FVector* Loc, struct FRotator* Rot );
	void SetPlaySpace ( unsigned char NewSpace, struct FRotator UserPlaySpace );
	void ApplyTransientScaling ( float Scalar );
	void Stop ( unsigned long bImmediate );
	void AdvanceAnim ( float DeltaTime, unsigned long bJump );
	void Update ( float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration );
	void Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration, unsigned char InMirrorAxes );
};

UClass* UCameraAnimInst::pClassPointer = NULL;

// Class Engine.CameraModifier
// 0x001C (0x0058 - 0x003C)
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingDisable : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bExclusive : 1;                                   		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDebug : 1;                                       		// 0x003C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class ACamera*                                     CameraOwner;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	unsigned char                                      Priority;                                         		// 0x0044 (0x0001) [0x0000000000000000]              
	float                                              AlphaInTime;                                      		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              AlphaOutTime;                                     		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              Alpha;                                            		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetAlpha;                                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2703 ];

		return pClassPointer;
	};

	void UpdateAlpha ( class ACamera* Camera, float DeltaTime );
	bool ProcessViewRotation ( class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ToggleModifier ( );
	void EnableModifier ( );
	void eventDisableModifier ( unsigned long bImmediate );
	bool RemoveCameraModifier ( class ACamera* Camera );
	bool AddCameraModifier ( class ACamera* Camera );
	bool IsDisabled ( );
	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void Init ( );
};

UClass* UCameraModifier::pClassPointer = NULL;

// Class Engine.CameraModifier_CameraShake
// 0x0010 (0x0068 - 0x0058)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray< struct FCameraShakeInstance >              ActiveShakes;                                     		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SplitScreenShakeScale;                            		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2705 ];

		return pClassPointer;
	};

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateCameraShake ( float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV );
	void RemoveAllCameraShakes ( );
	void RemoveCameraShake ( class UCameraShake* Shake );
	void AddCameraShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	struct FCameraShakeInstance InitializeShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void ReinitShake ( int ActiveShakeIdx, float Scale );
	float InitializeOffset ( struct FFOscillator* Param );
};

UClass* UCameraModifier_CameraShake::pClassPointer = NULL;

// Class Engine.CameraShake
// 0x007C (0x00B8 - 0x003C)
class UCameraShake : public UObject
{
public:
	unsigned long                                      bSingleInstance : 1;                              		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomAnimSegment : 1;                           		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              OscillationDuration;                              		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OscillationBlendInTime;                           		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OscillationBlendOutTime;                          		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FROscillator                                RotOscillation;                                   		// 0x004C (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FVOscillator                                LocOscillation;                                   		// 0x0070 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FFOscillator                                FOVOscillation;                                   		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 Anim;                                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimPlayRate;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimScale;                                        		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendInTime;                                  		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendOutTime;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomAnimSegmentDuration;                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2707 ];

		return pClassPointer;
	};

	float GetLocOscillationMagnitude ( );
	float GetRotOscillationMagnitude ( );
};

UClass* UCameraShake::pClassPointer = NULL;

// Class Engine.ResourcePoolManager
// 0x0300 (0x0488 - 0x0188)
class AResourcePoolManager : public AReplicationInfo
{
public:
	class UResourcePool*                               ResourcePools[ 0x10 ];                            		// 0x0188 (0x0040) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01C8 (0x003C) UNKNOWN PROPERTY: MapProperty Engine.ResourcePoolManager.ResourcePoolMap
	unsigned char                                      NextPoolGUID;                                     		// 0x0204 (0x0001) [0x0000000000000000]              
	struct FResourcePoolIdentityState                  ReplicatedPoolIdentities[ 0x10 ];                 		// 0x0208 (0x0080) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedCurrentValues[ 0x10 ];                  		// 0x0288 (0x0040) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedMinValues[ 0x10 ];                      		// 0x02C8 (0x0040) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedMaxValues[ 0x10 ];                      		// 0x0308 (0x0040) [0x0000000000000020]              ( CPF_Net )
	struct FRarelyChangedPoolState                     ReplicatedRarelyChangedState[ 0x10 ];             		// 0x0348 (0x0140) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2709 ];

		return pClassPointer;
	};

	void CreateResourcePoolManagerIfNecessary ( class AActor* ActorOwner, class AResourcePoolManager** Mgr );
	void DeletePoolAtIndex ( int Index );
	class UResourcePool* InternalCreatePoolAtIndex ( class UResourcePoolDefinition* PoolDefinition, int Index, unsigned char PoolGUID );
	class UResourcePool* CreatePoolAtIndex ( class AActor* ActorOwner, class UResourcePoolDefinition* PoolDefinition, int Index, unsigned char PoolGUID, class AResourcePoolManager** Mgr );
	void GetDebugInfo ( TArray< struct FString >* DebugInfo );
	int GetNumberOfPoolsInUse ( );
	void RecalculateBaseValues ( class AResourcePoolManager* Mgr );
	struct FResourcePoolReference GetResourcePoolForResourceDefinition ( class AActor* ActorOwner, class UResourceDefinition* Resource, class AResourcePoolManager** Mgr );
	bool HasResourcePoolForResourceDefinition ( class UResourceDefinition* Resource );
	void DeletePoolByReference ( struct FResourcePoolReference* PoolReference );
	void DeletePool ( class AResourcePoolManager* Mgr, struct FResourcePoolReference PoolReference );
	void DeleteAllPools ( class AResourcePoolManager* Mgr );
	struct FResourcePoolReference CreatePool ( class AActor* ActorOwner, class UResourcePoolDefinition* PoolDefinition, unsigned long bReinitializeExistingPool, class AResourcePoolManager** Mgr );
	void eventDestroyed ( );
	void ShutDown ( );
	void AllResourcePools ( class AResourcePoolManager* Mgr, class UResourcePool** Pool, class UResourcePoolDefinition** PoolDefinition );
};

UClass* AResourcePoolManager::pClassPointer = NULL;

// Class Engine.WorldSoundManager
// 0x0014 (0x019C - 0x0188)
class AWorldSoundManager : public AInfo
{
public:
	TArray< struct FWorldEventSource >                 EventSources;                                     		// 0x0188 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class UAkComponent*                                UIAkComponent;                                    		// 0x0194 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bHasTicked : 1;                                   		// 0x0198 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2711 ];

		return pClassPointer;
	};

	int GetWorldSoundCount ( );
	struct FAkPlayingInfo StaticPlayUIAkEvent ( class UAkEvent* InEvent );
	bool StaticUnregisterEventSource ( class AActor* inActor, class UAkEvent* InEvent, class AActor* GroupActor );
	bool StaticRegisterEventSource ( class AActor* inActor, class UAkEvent* InEvent, class AActor* GroupActor );
	void StaticSetState ( class UAkState* InState );
	void StaticSetGlobalRTPCValue ( class UAkRtpc* InRtpc, float TargetValue );
	void StaticStopWorldAkEvents ( );
	struct FAkPlayingInfo StaticHearWorldAkEvent ( class UAkEvent* InEvent, struct FVector SoundLocation );
	struct FAkPlayingInfo StaticPlayWorldAkEvent ( class UAkEvent* InSoundCue, struct FVector SoundLocation, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bNoRepToRelevant, class UAkSwitch* InSwitch );
};

UClass* AWorldSoundManager::pClassPointer = NULL;

// Class Engine.ComponentLifetimeManagerComponent
// 0x0013 (0x006C - 0x0059)
class UComponentLifetimeManagerComponent : public UActorComponent
{
public:
	TArray< class UActorComponent* >                   ManagedComponents;                                		// 0x005C (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              ManagedComponentsLifeSpan;                        		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2713 ];

		return pClassPointer;
	};

	void RemoveManagedComponent ( class UActorComponent* ComponentToRemove );
	void AddManagedComponent ( class UActorComponent* NewComponent );
};

UClass* UComponentLifetimeManagerComponent::pClassPointer = NULL;

// Class Engine.AttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UAttributeContextResolver : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2715 ];

		return pClassPointer;
	};

	class UObject* eventGetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UAttributeContextResolver::pClassPointer = NULL;

// Class Engine.BalancedActorAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UBalancedActorAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2717 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UBalancedActorAttributeContextResolver::pClassPointer = NULL;

// Class Engine.CharacterClassAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UCharacterClassAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2719 ];

		return pClassPointer;
	};

};

UClass* UCharacterClassAttributeContextResolver::pClassPointer = NULL;

// Class Engine.ControllerAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UControllerAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2721 ];

		return pClassPointer;
	};

};

UClass* UControllerAttributeContextResolver::pClassPointer = NULL;

// Class Engine.GameInfoAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UGameInfoAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2723 ];

		return pClassPointer;
	};

};

UClass* UGameInfoAttributeContextResolver::pClassPointer = NULL;

// Class Engine.OffHandWeaponAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UOffHandWeaponAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2725 ];

		return pClassPointer;
	};

};

UClass* UOffHandWeaponAttributeContextResolver::pClassPointer = NULL;

// Class Engine.PawnAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UPawnAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2727 ];

		return pClassPointer;
	};

};

UClass* UPawnAttributeContextResolver::pClassPointer = NULL;

// Class Engine.ResourcePoolAttributeContextResolver
// 0x0004 (0x0040 - 0x003C)
class UResourcePoolAttributeContextResolver : public UAttributeContextResolver
{
public:
	class UResourceDefinition*                         Resource;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2729 ];

		return pClassPointer;
	};

};

UClass* UResourcePoolAttributeContextResolver::pClassPointer = NULL;

// Class Engine.WeaponAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UWeaponAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2731 ];

		return pClassPointer;
	};

};

UClass* UWeaponAttributeContextResolver::pClassPointer = NULL;

// Class Engine.WeaponResourcePoolAttributeContextResolver
// 0x0008 (0x0044 - 0x003C)
class UWeaponResourcePoolAttributeContextResolver : public UAttributeContextResolver
{
public:
	class UResourceDefinition*                         PrimaryHandResource;                              		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         OffHandResource;                                  		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2733 ];

		return pClassPointer;
	};

};

UClass* UWeaponResourcePoolAttributeContextResolver::pClassPointer = NULL;

// Class Engine.AttributeEffect
// 0x0000 (0x003C - 0x003C)
class UAttributeEffect : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2735 ];

		return pClassPointer;
	};

	void RemoveAttributeEffects ( class AActor* Owner, TArray< struct FAppliedAttributeEffect >* EffectModifiers );
	void ApplyAttributeEffects ( class AActor* ContextSource, class UObject* OptionalOverrideContextSource, TArray< struct FAttributeEffectData >* InAttributeEffects, TArray< struct FAppliedAttributeEffect >* OutModifiers );
};

UClass* UAttributeEffect::pClassPointer = NULL;

// Class Engine.AttributeExpression
// 0x0000 (0x003C - 0x003C)
class UAttributeExpression : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2737 ];

		return pClassPointer;
	};

	class UAkEvent* SelectAkEvent ( class UObject* ContextSource, TArray< struct FConditionalSoundData >* SoundList );
	class USoundCue* SelectSoundCue ( class UObject* ContextSource, TArray< struct FConditionalSoundData >* SoundList );
	bool EvaluateExpression ( class UObject* ContextSource, class UObject* OptionalOverrideContextSource, struct FAttributeExpressionData* Expression );
	bool EvaluateExpressions ( unsigned char Mode, class UObject* ContextSource, class UObject* OptionalOverrideContextSource, TArray< struct FAttributeExpressionData >* Expressions );
};

UClass* UAttributeExpression::pClassPointer = NULL;

// Class Engine.AttributeMultiContextResolver
// 0x0000 (0x003C - 0x003C)
class UAttributeMultiContextResolver : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2739 ];

		return pClassPointer;
	};

};

UClass* UAttributeMultiContextResolver::pClassPointer = NULL;

// Class Engine.WeaponAttributeMultiContextResolver
// 0x0000 (0x003C - 0x003C)
class UWeaponAttributeMultiContextResolver : public UAttributeMultiContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2741 ];

		return pClassPointer;
	};

};

UClass* UWeaponAttributeMultiContextResolver::pClassPointer = NULL;

// Class Engine.AttributeValueResolver
// 0x0000 (0x003C - 0x003C)
class UAttributeValueResolver : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2743 ];

		return pClassPointer;
	};

};

UClass* UAttributeValueResolver::pClassPointer = NULL;

// Class Engine.ObjectPropertyAttributeValueResolver
// 0x000C (0x0048 - 0x003C)
class UObjectPropertyAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FName                                       PropertyName;                                     		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UProperty*                                   CachedProperty;                                   		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2745 ];

		return pClassPointer;
	};

};

UClass* UObjectPropertyAttributeValueResolver::pClassPointer = NULL;

// Class Engine.ReadOnlyObjectPropertyAttributeValueResolver
// 0x0000 (0x0048 - 0x0048)
class UReadOnlyObjectPropertyAttributeValueResolver : public UObjectPropertyAttributeValueResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2747 ];

		return pClassPointer;
	};

};

UClass* UReadOnlyObjectPropertyAttributeValueResolver::pClassPointer = NULL;

// Class Engine.BehaviorBase
// 0x0010 (0x004C - 0x003C)
class UBehaviorBase : public UObject
{
public:
	struct FBehaviorContextData                        Context;                                          		// 0x003C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2749 ];

		return pClassPointer;
	};

	bool IsBehaviorDebugEnabled ( );
	void ToggleBehaviorDebug ( );
	int GetParameterIndex ( struct FBehaviorParameters EventData, struct FName ValueName );
	bool StaticGetAllBehaviorContexts ( class UObject* DebugCaller, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, TArray< class UObject* >* Contexts, struct FBehaviorContextData* ContextData, struct FBehaviorParameters* EventData );
	class UObject* StaticGetBehaviorContext ( class UObject* DebugCaller, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorContextData* ContextData, struct FBehaviorParameters* EventData );
	class UObject* GetBehaviorContext ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorContextData* ContextData, struct FBehaviorParameters* EventData );
	class UInterface* GetBehaviorContextInterface ( class UClass* InterfaceClass, struct FBehaviorContextData ContextData, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, class UObject** ContextObject );
	void eventApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	void eventApplyBehavior ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	struct FImpactInfo GetImpactInfoParameter ( struct FBehaviorParameters EventData, struct FName ValueName );
	class AActor* GetActorParameter ( struct FBehaviorParameters EventData, struct FName ValueName );
	struct FVector GetVectorParameter ( struct FBehaviorParameters EventData, struct FName ValueName );
	void SetImpactInfoParameter ( struct FName ValueName, struct FImpactInfo Value, struct FBehaviorParameters* EventData );
	void SetActorParameter ( struct FName ValueName, class AActor* Value, struct FBehaviorParameters* EventData );
	void SetVectorParameter ( struct FName ValueName, struct FVector Value, struct FBehaviorParameters* EventData );
	class AWorldInfo* GetWorldInfo ( );
	void RunBehaviors ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, TArray< class UBehaviorBase* >* Behaviors );
};

UClass* UBehaviorBase::pClassPointer = NULL;

// Class Engine.Behavior_Kill
// 0x0018 (0x0064 - 0x004C)
class UBehavior_Kill : public UBehaviorBase
{
public:
	unsigned char                                      DeathType;                                        		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDamageTypeDefinition*                       DamageType;                                       		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        TargetContext;                                    		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2751 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Kill::pClassPointer = NULL;

// Class Engine.Behavior_PlaySound
// 0x0008 (0x0054 - 0x004C)
class UBehavior_PlaySound : public UBehaviorBase
{
public:
	class UAkEvent*                                    Sound;                                            		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicateSound : 1;                              		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2753 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_PlaySound::pClassPointer = NULL;

// Class Engine.Behavior_RemoteEvent
// 0x000C (0x0058 - 0x004C)
class UBehavior_RemoteEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                        		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2755 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RemoteEvent::pClassPointer = NULL;

// Class Engine.ExpressionEvaluator
// 0x0000 (0x003C - 0x003C)
class UExpressionEvaluator : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2757 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UExpressionEvaluator::pClassPointer = NULL;

// Class Engine.ExpressionTree
// 0x0004 (0x0040 - 0x003C)
class UExpressionTree : public UExpressionEvaluator
{
public:
	class UExpressionEvaluator*                        RootChild;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2759 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UExpressionTree::pClassPointer = NULL;

// Class Engine.AttributeDefinitionBase
// 0x0020 (0x005C - 0x003C)
class UAttributeDefinitionBase : public UGBXDefinition
{
public:
	unsigned long                                      bIsSimpleAttribute : 1;                           		// 0x003C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      AttributeDataType;                                		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UAttributeContextResolver* >         ContextResolverChain;                             		// 0x0044 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAttributeValueResolver* >           ValueResolverChain;                               		// 0x0050 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2761 ];

		return pClassPointer;
	};

	bool SetAttributeBaseValue ( class UObject* ContextSource, float BaseValue, unsigned long bSuppressNotify );
	bool RemoveAttributeModifier ( class UObject* Context, class UAttributeModifier* Modifier, unsigned long bSuppressNotify );
	bool AddAttributeModifier ( class UObject* Context, class UAttributeModifier* Modifier, unsigned long bSuppressNotify );
	struct FString GetDescriptorFromContext ( class UObject* Context );
	float GetBaseValueFromContext ( class UObject* Context );
	float GetValueFromContext ( class UObject* Context );
	void ResolveContexts ( class UObject* ContextSource, TArray< class UObject* >* ResolvedContexts );
	class UObject* ResolveContext ( class UObject* ContextSource );
};

UClass* UAttributeDefinitionBase::pClassPointer = NULL;

// Class Engine.AttributeDefinition
// 0x0000 (0x005C - 0x005C)
class UAttributeDefinition : public UAttributeDefinitionBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2763 ];

		return pClassPointer;
	};

	struct FString GetDescriptor ( class UObject* ContextSource, class UObject* OptionalOverrideContextSource, class UObject** ResolvedContext );
	float GetBaseValue ( class UObject* ContextSource, class UObject* OptionalOverrideContextSource, class UObject** ResolvedContext );
	float GetValue ( class UObject* ContextSource, class UObject* OptionalOverrideContextSource, class UObject** ResolvedContext );
	float StaticGetAttributeValueOrDefault ( class UAttributeDefinition* Definition, class UObject* ContextSource, float DefaultValue, class UObject* OptionalOverrideContextSource );
};

UClass* UAttributeDefinition::pClassPointer = NULL;

// Class Engine.NestedAttributeDefinition
// 0x0008 (0x0064 - 0x005C)
class UNestedAttributeDefinition : public UAttributeDefinition
{
public:
	class UAttributeDefinition*                        OuterContextAttributeDefinition;                  		// 0x005C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UAttributeDefinition*                        InnerContextAttributeDefinition;                  		// 0x0060 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2765 ];

		return pClassPointer;
	};

};

UClass* UNestedAttributeDefinition::pClassPointer = NULL;

// Class Engine.AttributeDefinitionMultiContext
// 0x0004 (0x0060 - 0x005C)
class UAttributeDefinitionMultiContext : public UAttributeDefinitionBase
{
public:
	class UAttributeMultiContextResolver*              MultiContextResolver;                             		// 0x005C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2767 ];

		return pClassPointer;
	};

	void GetDescriptors ( class UObject* ContextSource, class UObject* OptionalOverrideContextSource, TArray< struct FString >* Descriptors, TArray< class UObject* >* ResolvedContexts );
	void GetBaseValues ( class UObject* ContextSource, class UObject* OptionalOverrideContextSource, TArray< float >* BaseValues, TArray< class UObject* >* ResolvedContexts );
	void GetValues ( class UObject* ContextSource, class UObject* OptionalOverrideContextSource, TArray< float >* Values, TArray< class UObject* >* ResolvedContexts );
	void StaticGetAttributeValues ( class UAttributeDefinitionMultiContext* Definition, class UObject* ContextSource, TArray< float >* Values );
	void ResolveContexts ( class UObject* ContextSource, TArray< class UObject* >* ResolvedContexts );
};

UClass* UAttributeDefinitionMultiContext::pClassPointer = NULL;

// Class Engine.AttributeInitializationDefinition
// 0x00B4 (0x00F0 - 0x003C)
class UAttributeInitializationDefinition : public UGBXDefinition
{
public:
	unsigned char                                      BaseValueMode;                                    		// 0x003C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RoundingMode;                                     		// 0x003D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FBalanceFormula                             ValueFormula;                                     		// 0x0040 (0x0044) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FConditionalInitializationExpressions       ConditionalInitialization;                        		// 0x0084 (0x0020) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FVariance                                   RandomVariance;                                   		// 0x00A4 (0x0024) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRange                                      RangeRestriction;                                 		// 0x00C8 (0x0028) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2769 ];

		return pClassPointer;
	};

	bool SetBaseValue ( class UAttributeDefinition* DestAttribute, class UObject* ValueContextSource, class UObject* AttributeContextSource, struct FAttributeInitializationData* BaseValue );
	float EvaluateInitializationData ( struct FAttributeInitializationData InitializationData, class UObject* ContextSource, class UObject* OptionalOverrideContextSource );
};

UClass* UAttributeInitializationDefinition::pClassPointer = NULL;

// Class Engine.BaseBalanceDefinition
// 0x0000 (0x003C - 0x003C)
class UBaseBalanceDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2771 ];

		return pClassPointer;
	};

	bool ApplyGradeCustomizations ( class AActor* BalanceDefSpawnedActor, int GradeIndex );
	bool DoesSpawnChampion ( );
	struct FString GetDisplayNameAtGrade ( int GradeIndex );
	float GetSpawnProbabilityModifier ( int GameStage, int AwesomeLevel );
	bool IsGameStageSupported ( int GameStage, int AwesomeLevel );
	int SelectGradeIndex ( int GameStage, int AwesomeLevel );
};

UClass* UBaseBalanceDefinition::pClassPointer = NULL;

// Class Engine.CharacterClassDefinition
// 0x011C (0x0158 - 0x003C)
class UCharacterClassDefinition : public UGBXDefinition
{
public:
	float                                              GroundSpeed;                                      		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AirSpeed;                                         		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WalkingPct;                                       		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SprintingPct;                                     		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              JumpZ;                                            		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CrouchedPct;                                      		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseEncumbranceResistance;                        		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxFallSpeed;                                     		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     HealthPoolDefinition;                             		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     ShieldPoolDefinition;                             		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     AccuracyPoolDefinition;                           		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     OffHandAccuracyPoolDefinition;                    		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UResourcePoolDefinition* >           ResourcePools;                                    		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bDealsLocationalDamage : 1;                       		// 0x0084 (0x0004) [0x0000000020000002] [0x00000001] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      CanHarmSelf : 1;                                  		// 0x0084 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoDisableAttractorOnDeath : 1;                 		// 0x0084 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseArmor;                                        		// 0x0088 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       BaseNormalDamageModifiers;                        		// 0x0098 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       BaseExplosiveDamageModifiers;                     		// 0x00B8 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       BaseShockDamageModifiers;                         		// 0x00D8 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       BaseCorrosiveDamageModifiers;                     		// 0x00F8 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       BaseIncendiaryDamageModifiers;                    		// 0x0118 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FDamageTypeResistance                       BaseAmpDamageModifiers;                           		// 0x0138 (0x0020) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2773 ];

		return pClassPointer;
	};

};

UClass* UCharacterClassDefinition::pClassPointer = NULL;

// Class Engine.ExpressionEvaluatorDefinition
// 0x0004 (0x0040 - 0x003C)
class UExpressionEvaluatorDefinition : public UGBXDefinition
{
public:
	class UExpressionEvaluator*                        Expression;                                       		// 0x003C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2775 ];

		return pClassPointer;
	};

	bool Evaluate ( class UObject* ContextSource );
};

UClass* UExpressionEvaluatorDefinition::pClassPointer = NULL;

// Class Engine.GestaltPartMatricesCollectionDefinition
// 0x000C (0x0048 - 0x003C)
class UGestaltPartMatricesCollectionDefinition : public UGBXDefinition
{
public:
	TArray< struct FGPMCollection >                    Collection;                                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2777 ];

		return pClassPointer;
	};

};

UClass* UGestaltPartMatricesCollectionDefinition::pClassPointer = NULL;

// Class Engine.ImpactDefinition
// 0x0000 (0x003C - 0x003C)
class UImpactDefinition : public UGBXDefinition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2779 ];

		return pClassPointer;
	};

	void HandleRigidBodyImpact ( class AActor* Instigator, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, unsigned long bReplicateEffect, struct FCollisionImpactData* RigidCollisionData );
};

UClass* UImpactDefinition::pClassPointer = NULL;

// Class Engine.ResourceDefinition
// 0x001C (0x0058 - 0x003C)
class UResourceDefinition : public UGBXDefinition
{
public:
	struct FString                                     ResourceName;                                     		// 0x003C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIntegerOnlyUpdates : 1;                          		// 0x0048 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSerializeInSaveGame : 1;                         		// 0x0048 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	class UClass*                                      DefaultResourcePoolClass;                         		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourcePoolDefinition*                     DefaultResourcePoolDefinition;                    		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAttributeContextResolver*                   ResourceContextResolver;                          		// 0x0054 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2781 ];

		return pClassPointer;
	};

};

UClass* UResourceDefinition::pClassPointer = NULL;

// Class Engine.ResourcePoolDefinition
// 0x0090 (0x00CC - 0x003C)
class UResourcePoolDefinition : public UGBXDefinition
{
public:
	class UResourceDefinition*                         Resource;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      NetRelevancy;                                     		// 0x0040 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UResourceDefinition*                         RegenerationResource;                             		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseMinValue;                                     		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                BaseMaxValue;                                     		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartingValue;                                    		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      StartWithMinValue : 1;                            		// 0x0060 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      StartWithMaxValue : 1;                            		// 0x0060 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateCurrentValueOnExtremaChange : 1;           		// 0x0060 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPulseBasedOnRegenRate : 1;                       		// 0x0060 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPulseWhenLow : 1;                                		// 0x0060 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	float                                              BaseConsumptionRate;                              		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseActiveRegenerationRate;                       		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BasePassiveRegenerationRate;                      		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseOnIdleRegenerationRate;                       		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseOnIdleRegenerationDelay;                      		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RecentImpulseTimer;                               		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PercBarPulseSpeed;                                		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PercPulseResourceLow;                             		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UBehaviorBase* >                     OnResourceDepleted;                               		// 0x0084 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnResourceNotDepleted;                            		// 0x0090 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnResourceRegenerated;                            		// 0x009C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UBehaviorBase* >                     OnResourceNotRegenerated;                         		// 0x00A8 (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	class UAttributeDefinition*                        UpgradeLevelAttribute;                            		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TotalUpgradeCount;                                		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MaxValueUpgrade;                                  		// 0x00BC (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2783 ];

		return pClassPointer;
	};

};

UClass* UResourcePoolDefinition::pClassPointer = NULL;

// Class Engine.GestaltPartMatrices
// 0x0020 (0x005C - 0x003C)
class UGestaltPartMatrices : public UObject
{
public:
	TArray< struct FGestaltAccessoryMeshEntry >        GestaltAccessoryMeshList;                         		// 0x003C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FMatrix >                           Matrices;                                         		// 0x0048 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FName                                       ArchetypeName;                                    		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2785 ];

		return pClassPointer;
	};

};

UClass* UGestaltPartMatrices::pClassPointer = NULL;

// Class Engine.ICounterBehavior
// 0x0000 (0x003C - 0x003C)
class UICounterBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2787 ];

		return pClassPointer;
	};

	bool SetCounterState ( unsigned char CounterId, struct FBehaviorCounterState CounterState );
	bool GetCounterState ( unsigned char CounterId, struct FBehaviorCounterState* CounterState );
	void OnCounterEvent ( unsigned char EventType, struct FBehaviorParameters EventData );
};

UClass* UICounterBehavior::pClassPointer = NULL;

// Class Engine.IInstanceData
// 0x0000 (0x003C - 0x003C)
class UIInstanceData : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2789 ];

		return pClassPointer;
	};

	bool GetReplicatedInstanceDataState ( struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState );
	bool GetInstanceDataState ( struct FInstanceDataSet* OutInstanceDataState );
	void DestroyOwnedInstanceData ( );
	bool eventRemoveInstanceDataObject ( class UObject* InstanceDataObject );
	bool eventRemoveInstanceData ( struct FName DataName );
	bool eventGetInstanceData ( struct FName DataName, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceData ( struct FInstanceDataUnion InstanceData, unsigned long bAllowDuplicateNames );
};

UClass* UIInstanceData::pClassPointer = NULL;

// Class Engine.InstanceDataHelper
// 0x0000 (0x003C - 0x003C)
class UInstanceDataHelper : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2791 ];

		return pClassPointer;
	};

	void DestroyOwnedInstanceData ( struct FInstanceDataSet DataSet );
	void ForceDetachDelegate ( class UActorComponent* ComponentToDetach );
	void TickInstanceDataAttachment ( class UPrimitiveComponent* Component );
	bool HACK_FirstPersonMeshAttachment ( class UObject* ContextObject, unsigned long bAllowDuplicateNames, struct FInstanceDataSet* InstanceDataState, struct FInstanceDataUnion* InstanceData );
	void SetBodyInstanceDataRemovalState ( class AActor* Owner, int BodyCompositionIndex, unsigned long bHasBeenRemoved );
	bool RemoveInstanceDataObject ( class UIInstanceData* InstanceDataConsumer, class UObject* InstanceDataObject, unsigned long bPermanent );
	bool RemoveInstanceDataState ( struct FName DataName, struct FInstanceDataSet* InstanceDataState );
	struct FName GetInstanceDataNameForObject ( class UObject* InstanceDataObject, struct FInstanceDataSet* InstanceDataState );
	struct FName GetInstanceDataNameForComponent ( class UActorComponent* InstanceDataComponent, struct FInstanceDataSet* InstanceDataState );
	bool GetInstanceDataState ( struct FName DataName, struct FInstanceDataSet* InstanceDataState, TArray< struct FInstanceDataUnion >* InstanceData );
	bool SetInstanceDataState ( class UObject* ContextObject, unsigned long bAllowDuplicateNames, struct FInstanceDataSet* InstanceDataState, struct FInstanceDataUnion* InstanceData );
	class UObject* GetFirstInstanceDataObject ( class UObject* ContextObj, struct FName DataName, class UObject* DefaultValue );
	bool GetAllInstanceDataObjects ( class UObject* ContextObj, struct FName DataName, TArray< class UObject* >* InstanceDataObjects );
	bool ApplyReplicatedInstanceDataState ( class AActor* Owner, struct FReplicatedInstanceDataState* ReplicatedInstanceDataState, struct FBodyCompositionData* BodyComposition, struct FInstanceDataSet* InstanceDataSet );
	void DestroyInstanceDataAtIndex ( class AActor* Owner, int InstanceDataIndex, struct FInstanceDataSet* InstanceDataState, struct FReplicatedInstanceDataState* ReplicatedInstanceDataState );
	void UpdateBodyComposition ( class AActor* Owner, unsigned char Mode, struct FInstanceDataSet* InstanceDataState, struct FReplicatedInstanceDataState* ReplicatedInstanceDataState );
	void InitializeBodyComposition ( class AActor* Owner, unsigned char Mode, struct FBodyCompositionData* BodyComposition, struct FInstanceDataSet* InstanceDataSet, struct FReplicatedInstanceDataState* ReplicatedInstanceDataState );
};

UClass* UInstanceDataHelper::pClassPointer = NULL;

// Class Engine.PackageReferencer
// 0x000C (0x0048 - 0x003C)
class UPackageReferencer : public UObject
{
public:
	TArray< struct FString >                           PackageNames;                                     		// 0x003C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2793 ];

		return pClassPointer;
	};

};

UClass* UPackageReferencer::pClassPointer = NULL;

// Class Engine.PersistentGameDataManager
// 0x000C (0x0048 - 0x003C)
class UPersistentGameDataManager : public UObject
{
public:
	TArray< class UPersistentSequenceData* >           SequencesWithPersistentData;                      		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2795 ];

		return pClassPointer;
	};

};

UClass* UPersistentGameDataManager::pClassPointer = NULL;

// Class Engine.PersistentSequenceData
// 0x004C (0x0088 - 0x003C)
class UPersistentSequenceData : public UObject
{
public:
	struct FName                                       LevelPackageName;                                 		// 0x003C (0x0008) [0x0000000000000000]              
	struct FName                                       SequenceName;                                     		// 0x0044 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x004C (0x003C) UNKNOWN PROPERTY: MapProperty Engine.PersistentSequenceData.SavedSubsequenceData

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2797 ];

		return pClassPointer;
	};

};

UClass* UPersistentSequenceData::pClassPointer = NULL;

// Class Engine.ResourcePool
// 0x00DC (0x0118 - 0x003C)
class UResourcePool : public UObject
{
public:
	class UResourcePoolDefinition*                     Definition;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned char                                      PoolGUID;                                         		// 0x0040 (0x0001) [0x0000000000000000]              
	float                                              MinValue;                                         		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinValueBaseValue;                                		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MinValueModifierStack;                            		// 0x004C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              MaxValue;                                         		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxValueBaseValue;                                		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                MaxValueModifierStack;                            		// 0x0060 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CurrentValue;                                     		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              ConsumptionRate;                                  		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConsumptionRateBaseValue;                         		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ConsumptionRateModifierStack;                     		// 0x0078 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ActiveRegenerationRate;                           		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ActiveRegenerationRateBaseValue;                  		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                ActiveRegenerationRateModifierStack;              		// 0x008C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              OnIdleRegenerationRate;                           		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OnIdleRegenerationRateBaseValue;                  		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                OnIdleRegenerationRateModifierStack;              		// 0x00A0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              OnIdleRegenerationDelay;                          		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OnIdleRegenerationDelayBaseValue;                 		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                OnIdleRegenerationDelayModifierStack;             		// 0x00B4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PassiveRegenerationRate;                          		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PassiveRegenerationRateBaseValue;                 		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PassiveRegenerationRateModifierStack;             		// 0x00C8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastMinValue;                                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              LastMaxValue;                                     		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              LastCurrentValue;                                 		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              PoolIdleDelayStartTime;                           		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              RateRemainder;                                    		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                RecentImpulseCount;                               		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                RegenerationDisabled;                             		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RegenerationDisabledBaseValue;                    		// 0x00F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                RegenerationDisabledModifierStack;                		// 0x00F4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ResetRecentImpulseCountTime;                      		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsAuthoritative : 1;                             		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsBeingInitialized : 1;                          		// 0x0104 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHasPoolBeenFullSinceLastBeingDepleted : 1;       		// 0x0104 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDisallowReinitialization : 1;                    		// 0x0104 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHideHUDDisplay : 1;                              		// 0x0104 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCreatedAndNotModified : 1;                       		// 0x0104 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      WasRegenerating : 1;                              		// 0x0104 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	class UObject*                                     AssociatedProvider;                               		// 0x0108 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   HUDMaterialInstance;                              		// 0x010C (0x0004) [0x0000000000000000]              
	class UResourcePool*                               RegenerationPool;                                 		// 0x0110 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                IsRegenerating;                                   		// 0x0114 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2799 ];

		return pClassPointer;
	};

	bool IsResourcePoolInState ( unsigned char ResourcePoolState );
	bool WasCreatedAndNotModified ( );
	bool IsAuthoritative ( );
	void SetAuthoritative ( unsigned long B );
	float GetTimeSeconds ( );
	struct FString GetMinimalDebugText ( );
	void GetDebugText ( TArray< struct FString >* DebugText );
	void RefillPercentage ( float Percentage, float MaxPercentage );
	bool HasIdleDelayPassed ( float CurrentTime );
	void ResetIdleTimer ( );
	void UpdateCreatedAndNotModified ( );
	void UpdateLastValues ( );
	void SetMaxValueFromProfile ( float Value );
	void PoolIsNowFull ( );
	float GetMinValue ( );
	float GetMaxValue ( unsigned long bWantBaseValue );
	float GetTotalRegenRate ( );
	float GetCurrentPulseSpeed ( );
	float GetCurrentValue ( );
	void SetCurrentValue ( float Value );
	void AddCurrentValueImpulse ( float Delta );
	bool IsResourcePoolForResourceDefinition ( class UResourceDefinition* Resource );
	void UpdateCurrentValueOnExtremaChange ( );
	void eventCalculateBaseValues ( unsigned long bOnlyCalculateAttributeInitializedState );
	void ApplyUpgrades ( );
	bool SetUpgradeLevel ( int NewUpgradeLevel );
	int GetUpgradeLevel ( );
	void eventReinitialize ( );
	void ClearAttributeModifierStacks ( );
	void eventShutDown ( );
	void eventInitializeAuthoritative ( class UResourcePoolDefinition* InDefinition, class UObject* ProviderToAssociatePoolWith );
};

UClass* UResourcePool::pClassPointer = NULL;

// Class Engine.HealthResourcePool
// 0x0000 (0x0118 - 0x0118)
class UHealthResourcePool : public UResourcePool
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2801 ];

		return pClassPointer;
	};

};

UClass* UHealthResourcePool::pClassPointer = NULL;

// Class Engine.TargetableList
// 0x0048 (0x0084 - 0x003C)
class UTargetableList : public UObject
{
public:
	struct FMultiMap_Mirror                            TargetableAllegianceMap;                          		// 0x003C (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UITargetable* >                      FullTargetableList;                               		// 0x0078 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2803 ];

		return pClassPointer;
	};

	void GetDebugInfo ( TArray< struct FString >* DebugInfo );
	void ResetAllegiance ( class UITargetable* Subject );
	class UITargetable* GetNext ( struct FSearchState* out_State );
	class UITargetable* StartSearch ( class UITargetable* Subject, unsigned char Type, struct FSearchState* out_State );
	void UnRegisterTargetable ( class UITargetable* Targetable );
	void RegisterTargetable ( class UITargetable* Targetable );
};

UClass* UTargetableList::pClassPointer = NULL;

// Class Engine.HybridNavigationArea
// 0x0010 (0x0198 - 0x0188)
class AHybridNavigationArea : public AInfo
{
public:
	struct FName                                       CustomAreaName;                                   		// 0x0188 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      AreaColor;                                        		// 0x0190 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowArea : 1;                                    		// 0x0194 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2805 ];

		return pClassPointer;
	};

	struct FName GetAreaName ( );
};

UClass* AHybridNavigationArea::pClassPointer = NULL;

// Class Engine.PickupableMeshActor
// 0x0010 (0x0198 - 0x0188)
class APickupableMeshActor : public AActor
{
public:
	class AActor*                                      MyTarget;                                         		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              MoveSpeed;                                        		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                RotateSpeed;                                      		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              PawnEyeHeightAdjustment;                          		// 0x0194 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2807 ];

		return pClassPointer;
	};

	void SetTarget ( class AActor* TargetActor );
};

UClass* APickupableMeshActor::pClassPointer = NULL;

// Class Engine.HybridNavigationAreaDebugRenderingComponent
// 0x0004 (0x0214 - 0x0210)
class UHybridNavigationAreaDebugRenderingComponent : public UPrimitiveComponent
{
public:
	float                                              DebugSphereRadius;                                		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2809 ];

		return pClassPointer;
	};

};

UClass* UHybridNavigationAreaDebugRenderingComponent::pClassPointer = NULL;

// Class Engine.HybridNavigationVisualizationComponent
// 0x005C (0x026C - 0x0210)
class UHybridNavigationVisualizationComponent : public UPrimitiveComponent
{
public:
	TArray< class ANavigationPoint* >                  AllNavPoints;                                     		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ANavigationPoint* >                  NavPointsToRepresent;                             		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NextNavPointToProcess;                            		// 0x0228 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsVisualizationInProgress : 1;                   		// 0x022C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsVisualizationReady : 1;                        		// 0x022C (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FHybridNavVisualizationVertsForNavPoint > VisualizationVertsByNavPoint;                     		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      VisualizationColor;                               		// 0x023C (0x0004) [0x0000000000000000]              
	struct FHybridNavVisualizationPerfStats            VisualizationStats;                               		// 0x0240 (0x002C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2811 ];

		return pClassPointer;
	};

};

UClass* UHybridNavigationVisualizationComponent::pClassPointer = NULL;

// Class Engine.InventoryCardPresentationDefinition
// 0x0024 (0x0060 - 0x003C)
class UInventoryCardPresentationDefinition : public UGBXDefinition
{
public:
	struct FString                                     ZippyFrame;                                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ItemFrame;                                        		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DescriptionLocReference;                          		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2813 ];

		return pClassPointer;
	};

};

UClass* UInventoryCardPresentationDefinition::pClassPointer = NULL;

// Class Engine.ManufacturerDefinition
// 0x0028 (0x0064 - 0x003C)
class UManufacturerDefinition : public UGBXDefinition
{
public:
	TArray< struct FManufacturerGradeData >            Grades;                                           		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     FlashLabelName;                                   		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                IconX;                                            		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                IconY;                                            		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       StatId;                                           		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2815 ];

		return pClassPointer;
	};

	struct FString GetManufacturerGradeDisplayName ( int GradeIndex );
};

UClass* UManufacturerDefinition::pClassPointer = NULL;

// Class Engine.LevelStreamingDomino
// 0x000C (0x00A4 - 0x0098)
class ULevelStreamingDomino : public ULevelStreamingKismet
{
public:
	TArray< struct FName >                             TilePossibilities;                                		// 0x0098 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2817 ];

		return pClassPointer;
	};

};

UClass* ULevelStreamingDomino::pClassPointer = NULL;

// Class Engine.LocalMessage
// 0x000D (0x0049 - 0x003C)
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                   		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsUnique : 1;                                    		// 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsPartiallyUnique : 1;                           		// 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsConsoleMessage : 1;                            		// 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBeep : 1;                                        		// 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCountInstances : 1;                              		// 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              Lifetime;                                         		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	unsigned char                                      MsgType;                                          		// 0x0048 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2819 ];

		return pClassPointer;
	};

	bool PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 );
	bool IsConsoleMessage ( int Switch );
	float GetLifeTime ( int Switch );
	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	unsigned char GetMsgType ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* ULocalMessage::pClassPointer = NULL;

// Class Engine.EdgeDetectionPostProcessEffect
// 0x0023 (0x0084 - 0x0061)
class UEdgeDetectionPostProcessEffect : public UPostProcessEffect
{
public:
	float                                              HFilterAxisCoeff;                                 		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HFilterDiagCoeff;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VFilterAxisCoeff;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VFilterDiagCoeff;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarDist;                                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearDist;                                         		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SobelPower;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TexelOffset;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2821 ];

		return pClassPointer;
	};

};

UClass* UEdgeDetectionPostProcessEffect::pClassPointer = NULL;

// Class Engine.DroppedPickup
// 0x003C (0x01C4 - 0x0188)
class ADroppedPickup : public AActor
{
public:
	struct FPointer                                    VfTable_IIPickupable;                             		// 0x0188 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class AWillowInventory*                            Inventory;                                        		// 0x018C (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ANavigationPoint*                            PickupCache;                                      		// 0x0190 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFadeOut : 1;                                     		// 0x0194 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bUseRBPhysics : 1;                                		// 0x0194 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsDiscovered : 1;                                		// 0x0194 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bClientIsDiscovered : 1;                          		// 0x0194 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTorque : 1;                                      		// 0x0194 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bTorqueTemporary : 1;                             		// 0x0194 (0x0004) [0x0000000000000000] [0x00000020] 
	class UManufacturerDefinition*                     Manufacturer;                                     		// 0x0198 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FBoxSphereBounds                            MeshBounds;                                       		// 0x019C (0x001C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     Torque;                                           		// 0x01B8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2823 ];

		return pClassPointer;
	};

	struct FVector GetTouchTraceLocation ( );
	bool TouchPickupTrace ( struct FVector EndLoc, struct FVector StartLoc );
	class APickupableMeshActor* GetPickupableMeshActor ( );
	void SetInteractionIcon ( class UEngineInteractionIconDefinition* Icon );
	void MarkAsDiscovered ( );
	bool IsDiscovered ( );
	bool DenyPickupAttempt ( class APlayerController* PC );
	bool Pickupable_IsEnabled ( );
	class UWillowInventoryDefinition* GetPickupableInventoryDefinition ( );
	class AWillowInventory* GetPickupableInventory ( );
	bool IsPickupableInventoryAutomaticallyPickedUp ( );
	void RecheckValidTouch ( );
	void FailedPickup ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P, unsigned long bReady );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	float DetourWeight ( class APawn* Other, float PathWeight );
	void eventEncroachedBy ( class AActor* Other );
	void eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void InitializeFromInventory ( class AWillowInventory* InInv, class APawn* InInstigator, unsigned long bEnablePickup );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
	void RemoveFromNavigation ( );
	void AddToNavigation ( );
};

UClass* ADroppedPickup::pClassPointer = NULL;

// Class Engine.Inventory
// 0x0040 (0x01C8 - 0x0188)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                        		// 0x0188 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AInventoryManager*                           InvManager;                                       		// 0x018C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     ItemName;                                         		// 0x0190 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDropOnDeath : 1;                                 		// 0x019C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReadied : 1;                                     		// 0x019C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x019C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPredictRespawns : 1;                             		// 0x019C (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              RespawnTime;                                      		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDesireability;                                 		// 0x01A4 (0x0004) [0x0000000000000000]              
	struct FString                                     PickupMessage;                                    		// 0x01A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      MessageClass;                                     		// 0x01B4 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   PickupSound;                                      		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DroppedPickupClass;                               		// 0x01BC (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         DroppedPickupMesh;                                		// 0x01C0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPrimitiveComponent*                         PickupFactoryMesh;                                		// 0x01C4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2825 ];

		return pClassPointer;
	};

	void Unreadied ( );
	void Readied ( );
	void Unready ( unsigned long PlaceInBackpack );
	void Ready ( );
	bool eventCanBeUsedBy ( class APawn* Other );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	class ADroppedPickup* DropFrom ( struct FVector StartLocation, struct FVector StartVelocity, unsigned long bForceNoRBPhysics, unsigned long bTorque, struct FVector Torque );
	bool DenyPickupQuery ( class UIPickupable* Pickup );
	void ItemRemovedFromInvManager ( );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void GivenTo ( class APawn* thisPawn, unsigned long bReady, unsigned long bDoNotActivate );
	void PlayPickupSound ( class APawn* Other, unsigned long bEquipped );
	void AnnouncePickup ( class APawn* Other );
	void eventGiveTo ( class APawn* Other, unsigned long bReady, unsigned long bPlayPickupSound );
	float DetourWeight ( class APawn* Other, float PathWeight );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	void eventDestroyed ( );
	struct FString GetHumanReadableName ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AInventory::pClassPointer = NULL;

// Class Engine.WillowInventory
// 0x06D0 (0x0898 - 0x01C8)
class AWillowInventory : public AInventory
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                          		// 0x01C8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IIAttributeSlotEffectProvider;            		// 0x01CC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                MonetaryValue;                                    		// 0x01D0 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              MonetaryValueModifierTotal;                       		// 0x01D4 (0x0004) [0x0000000000000000]              
	int                                                Quantity;                                         		// 0x01D8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                RarityLevel;                                      		// 0x01DC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ExpLevel;                                         		// 0x01E0 (0x0004) [0x0000000000000000]              
	int                                                GameStage;                                        		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AwesomeLevel;                                     		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UObject*                                     AdditionalQueryInterfaceSource;                   		// 0x01EC (0x0004) [0x0000000000000000]              
	float                                              ClonedForSharing;                                 		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastCanBeUsedByResult;                            		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       ZippyFrame;                                       		// 0x01F8 (0x0008) [0x0000000000000000]              
	struct FString                                     ItemFrame;                                        		// 0x0200 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ElementalFrame;                                   		// 0x020C (0x0008) [0x0000000000000000]              
	struct FName                                       SourceDefinitionName;                             		// 0x0214 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SourceResponsibleName;                            		// 0x021C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ItemLocation;                                     		// 0x0224 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      Mark;                                             		// 0x0225 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bShopsHaveInfiniteQuantity : 1;                   		// 0x0228 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bOnlyCompareStatsForMatchingAttributes : 1;       		// 0x0228 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	struct FAttributeSlotData                          AttributeSlots[ 0x13 ];                           		// 0x022C (0x05F0) [0x0000000000000002]              ( CPF_Const )
	float                                              ReplicatedAttributeSlotModifierValues[ 0x13 ];    		// 0x081C (0x004C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class UGBXDefinition*                              RuntimeAttributeSlotSkill;                        		// 0x0868 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TempStatModifier;                                 		// 0x086C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TempStatModifierBaseValue;                        		// 0x0870 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                TempStatModifierModifierStack;                    		// 0x0874 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAppliedAttributeEffect >           AppliedAttributeSlotEffects;                      		// 0x0880 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class AActor* >                            ExternalLikenessConsumers;                        		// 0x088C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2827 ];

		return pClassPointer;
	};

	bool TryConsume ( );
	void Consume ( );
	bool IsReadied ( );
	unsigned char GetHolsteredGearLikenessType ( );
	void RemoveExternalLikenessConsumer ( class AActor* LikenessActor );
	void AddExternalLikenessConsumer ( class AActor* LikenessActor );
	int GetRarityLevel ( );
	void eventSetMark ( unsigned char NewMark );
	unsigned char eventGetMark ( );
	void eventLogInventoryDebug ( );
	void ResetTempStatModifier ( float NewBaseValue );
	float GetAttributeSlotModifierValue ( struct FName SlotName );
	int GetAttributeSlotGrade ( struct FName SlotName );
	void CloneAttributeSlotData ( class AWillowInventory* NewInventory );
	void InitializeAttributeSlotsForNameParts ( );
	void InitializeAttributeSlots ( unsigned long bIncludeNameParts );
	int GetAttributeSlotIndex ( struct FName SlotName );
	bool IsFindMissingAttributeSlotPresentationsDebugEnabled ( );
	void ToggleFindMissingAttributeSlotPresentationsDebugEnabled ( );
	struct FString eventGetElementalFrame ( );
	struct FString eventGetZippyFrame ( );
	struct FName eventGetCategoryKey ( );
	class UMeshComponent* eventClonePrimaryMeshForUI ( );
	class USkeletalMeshComponent* CloneInventorySkelMeshComponent ( class AActor* CloneOwner, class USkeletalMeshComponent* SourceMeshComponent, float SourceMeshScale, class USkeletalMeshComponent* DestMeshComponent );
	void eventCloneAppearance ( class AActor* CloneOwner, class USkeletalMeshComponent* ClonedPrimaryMeshComponent, TArray< class UPrimitiveComponent* >* ClonedComponentsAttachedToPrimaryMesh, class UMaterialInstance** ClonedMeshMaterial );
	class UMeshComponent* ClonePrimaryMesh ( );
	void AttachMeshToPickup ( class AActor* Pickup );
	struct FString GetModelName ( );
	class UImpactDefinition* GetDroppedImpactDefinition ( );
	int CompareUIStat ( int StatIdx, class AWillowInventory* CompareTo );
	bool CanBeReadiedOnPickup ( class APawn* Other );
	bool HandlePickupQuery ( class APawn* Other, class UIPickupable* Pickup );
	bool CanBeUsedBy ( class APawn* Other );
	bool IsConsumable ( );
	bool IsDLCRequirementMet ( class APlayerController* Other );
	struct FString GetDLCRestrictedMessage ( class APlayerController* Other, unsigned long bShort );
	class APlayerController* GetPawnController ( class APawn* Other );
	void eventTranslateUseFailure ( class APawn* Other, int FailureFlag, struct FString* Output );
	struct FString GetUseFailureOPLevelMessage ( );
	struct FString GetLastCanBeUsedByResult ( class APawn* Other );
	bool eventIsLevelRequirementMet ( class AController* C, int* RequiredLevel );
	int GetControllerPlayerExpLevelRequiredToUse ( class AController* OtherController );
	int GetPlayerExpLevelRequiredToUse ( class APawn* Other );
	class AWillowInventory* CreateClone ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bReady, unsigned long bDoNotActivate );
	bool eventIsItemAutoUsedBy ( class APawn* Other );
	int GetInventorySpaceRequirement ( );
	void ClientSoldTo ( unsigned long bSoldAll );
	void RemoveFromShop ( );
	void SoldTo ( class APawn* Buyer, int SellQuantity, unsigned long bReady );
	bool MissionDenyPickup ( );
	class ADroppedPickup* CreatePickup ( unsigned long bDroppedPickup, unsigned long bEnablePickup, struct FVector StartLocation );
	class ADroppedPickup* GetPickup ( unsigned long bDisableRigidBody, unsigned long bEnablePickup );
	class ADroppedPickup* eventDropFromNative ( struct FVector StartLocation, struct FVector StartVelocity, unsigned long bForceNoRBPhysics, unsigned long bTorque, struct FVector Torque );
	class ADroppedPickup* DropFrom ( struct FVector StartLocation, struct FVector StartVelocity, unsigned long bForceNoRBPhysics, unsigned long bTorque, struct FVector Torque );
	struct FRotator GetDroppedPickupRotation ( );
	void PickupDisassociated ( class ADroppedPickup* Pickup );
	void PickupAssociated ( class ADroppedPickup* Pickup );
	class ADroppedPickup* eventSpawnPickup ( );
	class UMeshComponent* eventInitConstructPreview ( class UMeshComponent* PreviewComponent, class UWillowInventoryDefinition* InvDef );
	void PlayPickupSound ( class APawn* Other, unsigned long bEquipped );
	void AnnouncePickup ( class APawn* Other );
	struct FString GetTemplateString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ConsumeItem ( );
	struct FString eventGetHumanReadableNameNativeHook ( );
	struct FString eventGetInventoryCardString ( unsigned long bIncludeManufacturer, unsigned long bIncludeModelName, unsigned long bIncludePrefixTitle );
	class UInventoryCardPresentationDefinition* GetPresentationDefinition ( );
	struct FString eventGetShortHumanReadableName ( );
	struct FString GetHumanReadableName ( );
	bool CanThrow ( );
	bool CanInventoryBeSoldOrStoredByOwner ( );
	bool CanInventoryBeDroppedByOwner ( );
	bool PassesDroppabilityCheck ( unsigned char MaxDroppability );
	class USkeletalMesh* StaticCreateCompositeMesh ( TArray< class USkeletalMesh* >* PartMeshes );
	void OverrideMonetaryValue ( int NewMonetaryValue );
	int ComputeMonetaryValue ( );
	int GetCappedCurrencyAmount ( unsigned char FormOfCurrency, int Amount );
	int GetMonetaryValueInCurrency ( unsigned char FormOfCurrency );
	int GetMonetaryValue ( );
	unsigned char GetCurrencyTypeInventoryIsValuedIn ( );
	void ClientInitializeInventoryFromDefinition ( );
	void eventInitializeInventory ( class UBaseBalanceDefinition* InBalanceDef, class UManufacturerDefinition* InManufacturer, int InGradeIndex, class UObject* InAdditionalQueryInterfaceSource );
	int GetUniqueID ( );
	int GenerateUniqueID ( );
	struct FName GetBalancedActorTypeIdentifier ( );
	void SetExpLevel ( int NewExpLevel );
	void SetAwesomeLevel ( int NewAwesomeLevel );
	void SetGameStage ( int NewGameStage );
	int GetExpLevelForEquip ( );
	int GetExpLevel ( );
	int GetAwesomeLevel ( );
	int GetGameStage ( );
	void ApplyExternalSlotEffectModifiers ( class AController* ContextSource, int MaxSlotsActivated, class UObject* OverrideContextSource, TArray< struct FAppliedAttributeEffect >* AttributeModifiers );
	void ApplyInternalSlotEffectModifiers ( unsigned long bBackupSlotEffectsApplied, int MaxSlotsActivated, TArray< struct FAppliedAttributeEffect >* AttributeModifiers );
	int GetManufacturerGradeIndex ( );
	class UManufacturerDefinition* GetManufacturer ( );
	class UWillowInventoryDefinition* GetInventoryDefinition ( );
	bool IsLevelRequirementsDebugEnabled ( );
	void ToggleLevelRequirementsDebug ( );
	int GetAttributeSlotIndexByAttributeDef ( class UAttributeDefinition* AttributeDef );
	struct FName GetEquippedStat ( );
	void ResetSerialNumber ( struct FInventorySerialNumber* SerialNumber );
	bool IsSKULoaded ( struct FInventorySerialNumber SerialNumber );
	bool IsSerialNumberNone ( struct FInventorySerialNumber SerialNumber );
	bool PeekIsItem ( struct FInventorySerialNumber SerialNumber );
	bool PeekIsWeapon ( struct FInventorySerialNumber SerialNumber );
	struct FString GetSerialNumberString ( );
	struct FInventorySerialNumber CreateSerialNumber ( );
	class AWillowInventory* CreateInventoryFromSerialNumberString ( class UObject* InAdditionalQueryInterfaceSource, struct FString* SerialNumberString );
	class AWillowInventory* CreateInventoryFromSerialNumber ( class UObject* InAdditionalQueryInterfaceSource, struct FInventorySerialNumber* SerialNumber );
};

UClass* AWillowInventory::pClassPointer = NULL;

// Class Engine.Weapon
// 0x0114 (0x09AC - 0x0898)
class AWeapon : public AWillowInventory
{
public:
	unsigned char                                      CurrentFireMode;                                  		// 0x0898 (0x0001) [0x0000000000000000]              
	unsigned char                                      bOffHand;                                         		// 0x0899 (0x0001) [0x0000000000000000]              
	TArray< struct FName >                             FiringStatesArray;                                		// 0x089C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            WeaponFireTypes;                                  		// 0x08A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            WeaponProjectiles;                                		// 0x08B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FireInterval;                                     		// 0x08C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              FireIntervalBaseValue;                            		// 0x08C4 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                FireIntervalModifierStack;                        		// 0x08C8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              Spread;                                           		// 0x08D4 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              SpreadBaseValue;                                  		// 0x08D8 (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                SpreadModifierStack;                              		// 0x08DC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstantHitDamage;                                 		// 0x08E8 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              InstantHitDamageBaseValue;                        		// 0x08EC (0x0004) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	TArray< class UAttributeModifier* >                InstantHitDamageModifierStack;                    		// 0x08F0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              InstantHitMomentum;                               		// 0x08FC (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              InstantHitMomentumBaseValue;                      		// 0x0900 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                InstantHitMomentumModifierStack;                  		// 0x0904 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            InstantHitDamageTypes;                            		// 0x0910 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UDamageTypeDefinition* >             InstantHitDamageTypeDefinitions;                  		// 0x091C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UImpactDefinition* >                 InstantHitImpactDefinitions;                      		// 0x0928 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              EquipTime;                                        		// 0x0934 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              EquipTimeBaseValue;                               		// 0x0938 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                EquipTimeModifierStack;                           		// 0x093C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              PutDownTime;                                      		// 0x0948 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              PutDownTimeBaseValue;                             		// 0x094C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                PutDownTimeModifierStack;                         		// 0x0950 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     FireOffset;                                       		// 0x095C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWeaponPutDown : 1;                               		// 0x0968 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanThrow : 1;                                    		// 0x0968 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWasOptionalSet : 1;                              		// 0x0968 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWasDoNotActivate : 1;                            		// 0x0968 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInstantHit : 1;                                  		// 0x0968 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMeleeWeapon : 1;                                 		// 0x0968 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsFiringWeapon : 1;                              		// 0x0968 (0x0004) [0x0000000000000000] [0x00000040] 
	float                                              WeaponRange;                                      		// 0x096C (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              WeaponRangeBaseValue;                             		// 0x0970 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAttributeModifier* >                WeaponRangeModifierStack;                         		// 0x0974 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              ClothImpulseRadius;                               		// 0x0980 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothImpulseScale;                                		// 0x0984 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      FirstPersonMesh;                                  		// 0x0988 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              DefaultAnimSpeed;                                 		// 0x098C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x0990 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AAIController*                               AIController;                                     		// 0x0994 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            ShouldFireOnRelease;                              		// 0x0998 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AIRating;                                         		// 0x09A4 (0x0004) [0x0000000000000000]              
	float                                              CachedMaxRange;                                   		// 0x09A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2829 ];

		return pClassPointer;
	};

	void Unreadied ( );
	void Readied ( );
	float GetTargetDistance ( );
	void CacheAIController ( );
	void UninitializeAfterPutDown ( );
	void WeaponIsDown ( );
	bool StillFiring ( unsigned char FireMode );
	bool ShouldRefire ( );
	void NotifyWeaponFinishedFiring ( unsigned char FireMode );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	void TryPutDownEx ( );
	bool TryPutDown ( );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector AimDir );
	struct FVector eventGetMuzzleLoc ( );
	void CustomFire ( );
	class AProjectile* ProjectileFire ( );
	void eventProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, unsigned long bIsPurposefulMiss, int NumHits );
	void InstantFire ( );
	bool PassThroughDamage ( class AActor* HitActor );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, unsigned long bTestTrace, TArray< struct FImpactInfo >* ImpactList );
	class AActor* GetTraceOwner ( );
	float eventGetTraceRange ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	void FireAmmunition ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void SetCurrentFireMode ( unsigned char FiringModeNum );
	void SendToFiringState ( unsigned char FireModeNum );
	void ForceEndFire ( );
	void EndFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void ServerStartFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void DetachWeapon ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ClearFlashCount ( );
	void IncrementFlashCount ( );
	void WeaponEmpty ( );
	bool DenyPickupQuery ( class UIPickupable* Pickup );
	void PutDownWeapon ( );
	void Activate ( unsigned long bEquipInOffHand );
	void TimeWeaponEquipping ( );
	float GetEquipTime ( );
	void eventTimeWeaponPutDown ( );
	float GetPutDownTime ( );
	void RefireCheckTimer ( );
	void TimeWeaponFiring ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void StopWeaponAnimation ( );
	void PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh );
	void WeaponPlayAkEvent ( class UAkEvent* Event, unsigned long bReplicate );
	class UAnimNodeSequence* GetWeaponAnimNodeSeq ( );
	bool FireOnRelease ( );
	bool CanAttack ( class AActor* Other );
	float GetWeaponRating ( );
	float GetAIRating ( );
	float MaxRange ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	class UClass* GetProjectileClass ( );
	void ClearPendingFire ( int FireMode );
	void SetPendingFire ( int FireMode );
	bool PendingFire ( int FireMode );
	int GetPendingFireLength ( );
	bool HasAnyAmmo ( );
	bool HasActiveAmmo ( unsigned char FireModeNum, int Amount );
	bool eventHasAmmo ( unsigned char FireModeNum, int Amount );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	bool DenyClientWeaponSet ( );
	bool eventIsFiring ( );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	class ADroppedPickup* DropFrom ( struct FVector StartLocation, struct FVector StartVelocity, unsigned long bForceNoRBPhysics, unsigned long bTorque, struct FVector Torque );
	bool DoOverridePrevWeapon ( );
	bool DoOverrideNextWeapon ( );
	void HolderDied ( );
	void ItemRemovedFromInvManager ( );
	void eventDestroyed ( );
	bool ForceWeaponToBeEquipped ( );
};

UClass* AWeapon::pClassPointer = NULL;

// Class Engine.InventoryManager
// 0x002C (0x01B4 - 0x0188)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                   		// 0x0188 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     PendingWeapon;                                    		// 0x018C (0x0004) [0x0000000000000000]              
	class AWeapon*                                     PendingOffHandWeapon;                             		// 0x0190 (0x0004) [0x0000000000000000]              
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                      		// 0x0194 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMustHoldWeapon : 1;                              		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x0198 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bForceOwnedItemsToBeRelevantToAll : 1;            		// 0x0198 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< int >                                      PendingFire;                                      		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      OffHandPendingFire;                               		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2831 ];

		return pClassPointer;
	};

	void ClientConditionalIncrementPickupStats ( class AInventory* InvObject );
	void ClearInventoryReferences ( class AInventory* TheItem );
	bool ShouldSwitchToBestWeapon ( );
	void UpdateController ( );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ChangedWeapon ( unsigned long bEquipInOffHand );
	void ClearPendingWeapon ( unsigned long bOffHand );
	bool CancelWeaponChange ( );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon, unsigned long bEquipInOffHand );
	void InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon, unsigned long bEquipInOffHand );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon, unsigned long bEquipInOffHand );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon, unsigned long bEquipInOffHand );
	void NextWeapon ( );
	void PrevWeapon ( );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	class AWeapon* GetBestWeapon ( unsigned long bForceADifferentWeapon );
	float GetWeaponRatingFor ( class AWeapon* W );
	void eventDrawHUD ( class AHUD* H );
	void OwnerDied ( );
	void eventDiscardInventory ( unsigned long bDestroyContents );
	void InventoryUnreadied ( class AInventory* Inv, unsigned long PlaceInBackpack );
	void InventoryReadied ( class AInventory* Inv );
	void RemoveFromInventory ( class AInventory* ItemToRemove, unsigned long bCanDrop );
	bool AddInventory ( class AInventory* NewItem, unsigned long bReady, unsigned long bDoNotActivate, unsigned long bPlayPickupSound );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bReady, unsigned long bDoNotActivate );
	class AInventory* eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	bool eventHandlePickupQuery ( class UIPickupable* Pickup );
	void eventDestroyed ( );
	void SetupFor ( class APawn* P );
	void InventoryActors ( class UClass* BaseClass, unsigned long bOnlyReadied, class AInventory** Inv );
	void ClearAllPendingFire ( class AWeapon* InWeapon, unsigned long bOffHand );
	bool IsPendingFire ( class AWeapon* InWeapon, int InFiringMode, unsigned long bOffHand );
	void ClearPendingFire ( class AWeapon* InWeapon, int InFiringMode, unsigned long bOffHand );
	void SetPendingFire ( class AWeapon* InWeapon, int InFiringMode, unsigned long bOffHand );
	int GetPendingFireLength ( class AWeapon* InWeapon, unsigned long bOffHand );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AInventoryManager::pClassPointer = NULL;

// Class Engine.GearboxCalloutDefinition
// 0x0010 (0x004C - 0x003C)
class UGearboxCalloutDefinition : public UGBXDefinition
{
public:
	float                                              MaxCallOutDistance;                               		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinCallOutDistance;                               		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bCheckRarity : 1;                                 		// 0x0044 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                MinRarityCallOutLevel;                            		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2833 ];

		return pClassPointer;
	};

};

UClass* UGearboxCalloutDefinition::pClassPointer = NULL;

// Class Engine.WillowInventoryDefinition
// 0x0144 (0x0180 - 0x003C)
class UWillowInventoryDefinition : public UGBXDefinition
{
public:
	class UClass*                                      InventoryClass;                                   		// 0x003C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bAutomaticallyPickup : 1;                         		// 0x0040 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPickupInBulk : 1;                                		// 0x0040 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisallowAIFromGrabbingPickup : 1;                		// 0x0040 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDuplicatePickupJustAddsQuantity : 1;             		// 0x0040 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSuppressPickupCard : 1;                          		// 0x0040 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTorque : 1;                                      		// 0x0040 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bNeverDisplayPickupMessage : 1;                   		// 0x0040 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShopsHaveInfiniteQuantity : 1;                   		// 0x0040 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanCompare : 1;                                  		// 0x0040 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsesPlayerLevelRequirement : 1;                  		// 0x0040 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUIMeshRotationNeedsTransformFixup : 1;           		// 0x0040 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIsConsumable : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bAllowInventoryDefToModifyPartWeight : 1;         		// 0x0040 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned char                                      PlayerDroppability;                               		// 0x0044 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      FormOfCurrency;                                   		// 0x0045 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OnUseConstraintsMode;                             		// 0x0046 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      AttributeSlotEffectMode;                          		// 0x0047 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupLifeSpan;                                   		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PickupFlagScale;                                  		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  PickupFlagIcon;                                   		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PickupFlagOffset;                                 		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Torque;                                           		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ThirdPersonMeshScale;                             		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FConditionalSoundData >             PickupSounds;                                     		// 0x0070 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FConditionalSoundData >             PickupAndEquipSounds;                             		// 0x007C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      MaterialClass;                                    		// 0x0088 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x008C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     PickupMessage;                                    		// 0x0090 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UseFailureLevelMessage;                           		// 0x009C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UseFailureConstraintsMessage;                     		// 0x00A8 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoManufacturerName;                               		// 0x00B4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FAttributeInitializationData                BaseRarity;                                       		// 0x00C0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                MonetaryValue;                                    		// 0x00D0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BaseMonetaryValueModifier;                        		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                PlayerUseLevelBonus;                              		// 0x00E4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeExpressionData >          OnUseConstraints;                                 		// 0x00F4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FUIStatData >                       UIStatList;                                       		// 0x0100 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FRotator                                    UIMeshRotation;                                   		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UInventoryCardPresentationDefinition*        Presentation;                                     		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGearboxCalloutDefinition*                   CalloutDefinition;                                		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       PickedUpStatID;                                   		// 0x0120 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       PurchasedStatID;                                  		// 0x0128 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FocusRadius;                                      		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     FocusOffset;                                      		// 0x0134 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                AttributeSlotEffectSkillDuration;                 		// 0x0140 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                AttributeSlotBaseGrade;                           		// 0x0150 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                AttributeSlotMaxActivated;                        		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FAttributeSlotEffectData >          AttributeSlotEffects;                             		// 0x0164 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeSlotUpgradeData >         AttributeSlotUpgrades;                            		// 0x0170 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FColor                                      LootBeamColorOverride;                            		// 0x017C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2835 ];

		return pClassPointer;
	};

	bool CanPickupInBulk ( );
	bool ShouldPlayerAutomaticallyPickup ( class APlayerController* PC );
	int GetAttributeSlotMaxActivated ( );
	struct FString GetLocalizedInventoryName ( );
	int GetInventorySpaceRequirement ( );
	int GetBaseRarityLevel ( );
};

UClass* UWillowInventoryDefinition::pClassPointer = NULL;

// Class Engine.WillowInventoryPartDefinition
// 0x005C (0x0098 - 0x003C)
class UWillowInventoryPartDefinition : public UGBXDefinition
{
public:
	class UMaterialInstanceConstant*                   Material;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsGestaltMode : 1;                               		// 0x0040 (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FName                                       GestaltModeSkeletalMeshName;                      		// 0x0044 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class USkeletalMesh*                               NongestaltSkeletalMesh;                           		// 0x004C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FName                                       AdditionalGestaltModeSkeletalMeshNames[ 0x2 ];    		// 0x0050 (0x0010) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	TArray< struct FAttributeSlotEffectData >          AttributeSlotEffects;                             		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FAttributeSlotUpgradeData >         AttributeSlotUpgrades;                            		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UAttributeDefinition*                        MonetaryValueMod;                                 		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FAttributeInitializationData                Rarity;                                           		// 0x007C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FVectorParameterValue >             MaterialVectorParameterValues;                    		// 0x008C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2837 ];

		return pClassPointer;
	};

	void ApplyMaterialModifiers ( class UMaterialInstance* MatInst );
	class USkeletalMesh* GetSkeletalMesh ( );
	void AddAdditionalGestaltMeshNames ( TArray< struct FName >* PartMeshNames );
	struct FName GetSkeletalMeshName ( );
	int GetRarityLevel ( );
};

UClass* UWillowInventoryPartDefinition::pClassPointer = NULL;

// Class Engine.IPickupable
// 0x0000 (0x003C - 0x003C)
class UIPickupable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2839 ];

		return pClassPointer;
	};

	void SetInteractionIcon ( class UEngineInteractionIconDefinition* Icon );
	void MarkAsDiscovered ( );
	bool IsDiscovered ( );
	void FailedPickup ( );
	bool DenyPickupAttempt ( class APlayerController* PC );
	bool Pickupable_IsEnabled ( );
	class UWillowInventoryDefinition* GetPickupableInventoryDefinition ( );
	class AWillowInventory* GetPickupableInventory ( );
	class APickupableMeshActor* GetPickupableMeshActor ( );
	void GiveTo ( class APawn* P, unsigned long bReady );
};

UClass* UIPickupable::pClassPointer = NULL;

// Class Engine.SeqEvent_HitWall
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_HitWall : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7260 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_HitWall::pClassPointer = NULL;

// Class Engine.SeqAct_Destroy
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_Destroy : public USequenceAction
{
public:
	unsigned long                                      bDestroyBasedActors : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            IgnoreBasedClasses;                               		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7900 ];

		return pClassPointer;
	};

};

UClass* USeqAct_Destroy::pClassPointer = NULL;

// Class Engine.SeqAct_Teleport
// 0x001C (0x00C0 - 0x00A4)
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckOverlap : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipHoldingCell : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTurnOffCinematicModeAfterTeleport : 1;           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHideTeleportEffect : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              TeleportDistance;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AVolume* >                           TeleportVolumes;                                  		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UObject*                                     Source;                                           		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ResurrectStation;                                 		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7945 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	class AActor* GetFirstValidActorFromObjectInput ( struct FString InputName );
	class AActor* GetTeleportHoldingCell ( );
	class AActor* GetTeleportDestination ( );
	bool ShouldTeleport ( class AActor* TestActor, struct FVector TeleportLocation, float TeleportDist, TArray< class AVolume* > Volumes );
};

UClass* USeqAct_Teleport::pClassPointer = NULL;

// Class Engine.SeqAct_SetVelocity
// 0x0014 (0x00B8 - 0x00A4)
class USeqAct_SetVelocity : public USequenceAction
{
public:
	struct FVector                                     VelocityDir;                                      		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              VelocityMag;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityRelativeToActorRotation : 1;             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7960 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_SetVelocity::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleHidden
// 0x0010 (0x00B4 - 0x00A4)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleBasedActors : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            IgnoreBasedClasses;                               		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7986 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ToggleHidden::pClassPointer = NULL;

// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x00C8 - 0x00A4)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseConstructAttachment : 1;                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeOffset;                                   		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7993 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_AttachToActor::pClassPointer = NULL;

// Class Engine.IConsoleCommandBehavior
// 0x0000 (0x003C - 0x003C)
class UIConsoleCommandBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8469 ];

		return pClassPointer;
	};

	void Behavior_ClientConsoleCommand ( struct FString Command );
	void Behavior_ConsoleCommand ( struct FString Command );
};

UClass* UIConsoleCommandBehavior::pClassPointer = NULL;

// Class Engine.IAppearanceBehavior
// 0x0000 (0x003C - 0x003C)
class UIAppearanceBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8470 ];

		return pClassPointer;
	};

	void Behavior_ChangeVisibility ( unsigned long bVisible );
	void Behavior_ToggleVisibility ( );
};

UClass* UIAppearanceBehavior::pClassPointer = NULL;

// Class Engine.IPhysicsBehavior
// 0x0000 (0x003C - 0x003C)
class UIPhysicsBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8471 ];

		return pClassPointer;
	};

	struct FVector GetDamageVector ( );
	class UMeshComponent* GetRigidBodyMesh ( );
};

UClass* UIPhysicsBehavior::pClassPointer = NULL;

// Class Engine.IChangeCollisionBehavior
// 0x0000 (0x003C - 0x003C)
class UIChangeCollisionBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8472 ];

		return pClassPointer;
	};

	void Behavior_ChangeCollisionSize ( float NewCollisionRadius, float NewCollisionHeight );
	void Behavior_ChangeCollision ( unsigned char NewCollisionType );
};

UClass* UIChangeCollisionBehavior::pClassPointer = NULL;

// Class Engine.IDestroyBehavior
// 0x0000 (0x003C - 0x003C)
class UIDestroyBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8473 ];

		return pClassPointer;
	};

	void Behavior_Destroy ( );
};

UClass* UIDestroyBehavior::pClassPointer = NULL;

// Class Engine.ISoundBehavior
// 0x0000 (0x003C - 0x003C)
class UISoundBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8474 ];

		return pClassPointer;
	};

	struct FAkPlayingInfo Behavior_PostAkEvent ( class UAkEvent* Event, unsigned long bReplicateEvent );
	void Behavior_PlaySoundForListener ( class USoundCue* Sound, class AActor* Source, class APlayerController* Listener );
	void Behavior_StopSound ( class USoundCue* Sound, unsigned long bReplicateSound, float FadeOutTime );
	void Behavior_PlaySound ( class USoundCue* Sound, unsigned long bReplicateSound );
};

UClass* UISoundBehavior::pClassPointer = NULL;

// Class Engine.OnlineAuthInterface
// 0x0084 (0x00C0 - 0x003C)
class UOnlineAuthInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnAuthReady__Delegate;                          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthRequestClient__Delegate;                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthRequestServer__Delegate;                  		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthBlobReceivedClient__Delegate;             		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthBlobReceivedServer__Delegate;             		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthCompleteClient__Delegate;                 		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthCompleteServer__Delegate;                 		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthKillClient__Delegate;                     		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAuthRetryServer__Delegate;                    		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClientConnectionClose__Delegate;              		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnServerConnectionClose__Delegate;              		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8809 ];

		return pClassPointer;
	};

	bool GetServerAddr ( int* OutServerIP, int* OutServerPort );
	bool GetServerUniqueId ( struct FUniqueNetId* OutServerUID );
	void EndRemoteServerAuthSession ( struct FUniqueNetId ServerUID, int ServerIP );
	void EndLocalServerAuthSession ( struct FUniqueNetId ClientUID, int ClientIP );
	bool VerifyServerAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int AuthBlobUID );
	bool CreateServerAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int* OutAuthBlobUID );
	void EndRemoteClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP );
	void EndLocalClientAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort );
	bool VerifyClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int AuthBlobUID );
	bool CreateClientAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure, int* OutAuthBlobUID );
	bool SendAuthRetryServer ( );
	bool SendAuthKillClient ( class UPlayer* ClientConnection );
	bool SendAuthBlobServer ( class UPlayer* ClientConnection, int AuthBlobUID );
	bool SendAuthBlobClient ( int AuthBlobUID );
	bool SendAuthRequestServer ( struct FUniqueNetId ServerUID );
	bool SendAuthRequestClient ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID );
	void ClearServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate );
	void AddServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate );
	void OnServerConnectionClose ( class UPlayer* ServerConnection );
	void ClearClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate );
	void AddClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate );
	void OnClientConnectionClose ( class UPlayer* ClientConnection );
	void ClearAuthRetryServerDelegate ( struct FScriptDelegate AuthRetryServerDelegate );
	void AddAuthRetryServerDelegate ( struct FScriptDelegate AuthRetryServerDelegate );
	void OnAuthRetryServer ( class UPlayer* ClientConnection );
	void ClearAuthKillClientDelegate ( struct FScriptDelegate AuthKillClientDelegate );
	void AddAuthKillClientDelegate ( struct FScriptDelegate AuthKillClientDelegate );
	void OnAuthKillClient ( class UPlayer* ServerConnection );
	void ClearAuthCompleteServerDelegate ( struct FScriptDelegate AuthCompleteServerDelegate );
	void AddAuthCompleteServerDelegate ( struct FScriptDelegate AuthCompleteServerDelegate );
	void OnAuthCompleteServer ( unsigned long bSuccess, struct FUniqueNetId ServerUID, class UPlayer* ServerConnection, struct FString ExtraInfo );
	void ClearAuthCompleteClientDelegate ( struct FScriptDelegate AuthCompleteClientDelegate );
	void AddAuthCompleteClientDelegate ( struct FScriptDelegate AuthCompleteClientDelegate );
	void OnAuthCompleteClient ( unsigned long bSuccess, struct FUniqueNetId ClientUID, class UPlayer* ClientConnection, struct FString ExtraInfo );
	void ClearAuthBlobReceivedServerDelegate ( struct FScriptDelegate AuthBlobReceivedServerDelegate );
	void AddAuthBlobReceivedServerDelegate ( struct FScriptDelegate AuthBlobReceivedServerDelegate );
	void OnAuthBlobReceivedServer ( struct FUniqueNetId ServerUID, int ServerIP, int AuthBlobUID );
	void ClearAuthBlobReceivedClientDelegate ( struct FScriptDelegate AuthBlobReceivedClientDelegate );
	void AddAuthBlobReceivedClientDelegate ( struct FScriptDelegate AuthBlobReceivedClientDelegate );
	void OnAuthBlobReceivedClient ( struct FUniqueNetId ClientUID, int ClientIP, int AuthBlobUID );
	void ClearAuthRequestServerDelegate ( struct FScriptDelegate AuthRequestServerDelegate );
	void AddAuthRequestServerDelegate ( struct FScriptDelegate AuthRequestServerDelegate );
	void OnAuthRequestServer ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID, int ClientIP, int ClientPort );
	void ClearAuthRequestClientDelegate ( struct FScriptDelegate AuthRequestClientDelegate );
	void AddAuthRequestClientDelegate ( struct FScriptDelegate AuthRequestClientDelegate );
	void OnAuthRequestClient ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure );
	void ClearAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate );
	void AddAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate );
	void OnAuthReady ( );
	bool IsReady ( );
};

UClass* UOnlineAuthInterface::pClassPointer = NULL;

// Class Engine.OnlineTitleFileInterface
// 0x0018 (0x0054 - 0x003C)
class UOnlineTitleFileInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnShareTitleFileComplete__Delegate;             		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8814 ];

		return pClassPointer;
	};

	void ClearShareTitleFileCompleteDelegate ( struct FScriptDelegate ShareTitleFileCompleteDelegate );
	void AddShareTitleFileCompleteDelegate ( struct FScriptDelegate ShareTitleFileCompleteDelegate );
	bool ShareTitleFile ( struct FString FileToShare );
	bool ClearDownloadedFile ( struct FString Filename );
	bool ClearDownloadedFiles ( );
	unsigned char GetTitleFileState ( struct FString Filename );
	bool GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents );
	void ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	bool ReadTitleFile ( unsigned char LocalUserNum, struct FString FileToRead );
	void OnShareTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename, struct FString UGCHandle );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
};

UClass* UOnlineTitleFileInterface::pClassPointer = NULL;

// Class Engine.OnlinePartyChatInterface
// 0x0024 (0x0060 - 0x003C)
class UOnlinePartyChatInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnSendPartyGameInvitesComplete__Delegate;       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPartyMemberListChanged__Delegate;             		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPartyMembersInfoChanged__Delegate;            		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8819 ];

		return pClassPointer;
	};

	bool IsInPartyChat ( unsigned char LocalUserNum );
	bool ShowCommunitySessionsUI ( unsigned char LocalUserNum );
	bool ShowVoiceChannelUI ( unsigned char LocalUserNum );
	bool ShowPartyUI ( unsigned char LocalUserNum );
	int GetPartyBandwidth ( );
	bool SetPartyMemberCustomData ( unsigned char LocalUserNum, int Data1, int Data2, int Data3, int Data4 );
	void ClearPartyMembersInfoChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMembersInfoChangedDelegate );
	void AddPartyMembersInfoChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMembersInfoChangedDelegate );
	void OnPartyMembersInfoChanged ( struct FString PlayerName, struct FUniqueNetId PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4 );
	void ClearPartyMemberListChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMemberListChangedDelegate );
	void AddPartyMemberListChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMemberListChangedDelegate );
	void OnPartyMemberListChanged ( unsigned long bJoinedOrLeft, struct FString PlayerName, struct FUniqueNetId PlayerID );
	bool GetPartyMemberInformation ( struct FUniqueNetId MemberId, struct FOnlinePartyMember* PartyMember );
	bool GetPartyMembersInformation ( TArray< struct FOnlinePartyMember >* PartyMembers );
	void ClearSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate );
	void AddSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate );
	void OnSendPartyGameInvitesComplete ( unsigned long bWasSuccessful );
	bool SendPartyGameInvites ( unsigned char LocalUserNum );
};

UClass* UOnlinePartyChatInterface::pClassPointer = NULL;

// Class Engine.OnlineNewsInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineNewsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadNewsCompleted__Delegate;                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8824 ];

		return pClassPointer;
	};

	struct FString GetNews ( unsigned char LocalUserNum, unsigned char NewsType );
	void ClearReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void AddReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void OnReadNewsCompleted ( unsigned long bWasSuccessful, unsigned char NewsType );
	bool ReadNews ( unsigned char LocalUserNum, unsigned char NewsType );
};

UClass* UOnlineNewsInterface::pClassPointer = NULL;

// Class Engine.OnlineStatsInterface
// 0x0024 (0x0060 - 0x003C)
class UOnlineStatsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadOnlineStatsComplete__Delegate;            		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFlushOnlineStatsComplete__Delegate;           		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRegisterHostStatGuidComplete__Delegate;       		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8829 ];

		return pClassPointer;
	};

	void CalcAggregateSkill ( TArray< struct FDouble > Mus, TArray< struct FDouble > Sigmas, struct FDouble* OutAggregateMu, struct FDouble* OutAggregateSigma );
	bool RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid );
	struct FString GetClientStatGuid ( );
	void ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	bool RegisterHostStatGuid ( struct FString* HostStatGuid );
	struct FString GetHostStatGuid ( );
	bool WriteOnlinePlayerScores ( struct FName SessionName, int LeaderboardId, TArray< struct FOnlinePlayerScore >* PlayerScores );
	void ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool FlushOnlineStats ( struct FName SessionName );
	bool WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite );
	void FreeStats ( class UOnlineStatsRead* StatsRead );
	void ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void OnReadOnlineStatsComplete ( unsigned long bWasSuccessful );
	bool ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows );
	bool ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead );
	bool ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead );
	bool ReadOnlineStats ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players );
};

UClass* UOnlineStatsInterface::pClassPointer = NULL;

// Class Engine.OnlineVoiceInterface
// 0x0018 (0x0054 - 0x003C)
class UOnlineVoiceInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnPlayerTalkingStateChange__Delegate;           		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8834 ];

		return pClassPointer;
	};

	bool SetVoiceVolume ( unsigned char VolType, float VolumeParam );
	bool UnmuteAll ( unsigned char LocalUserNum );
	bool MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends );
	bool SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj );
	bool SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId );
	void ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void OnRecognitionComplete ( );
	bool GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words );
	bool StopSpeechRecognition ( unsigned char LocalUserNum );
	bool StartSpeechRecognition ( unsigned char LocalUserNum );
	void StopNetworkedVoice ( unsigned char LocalUserNum );
	void StartNetworkedVoice ( unsigned char LocalUserNum );
	void ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void OnPlayerTalkingStateChange ( struct FUniqueNetId Player, unsigned long bIsTalking );
	bool UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide );
	bool MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide );
	bool SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority );
	bool IsHeadsetPresent ( unsigned char LocalUserNum );
	bool IsRemotePlayerTalking ( struct FUniqueNetId PlayerID );
	bool IsLocalPlayerTalking ( unsigned char LocalUserNum );
	bool UnregisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool RegisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool UnregisterLocalTalker ( unsigned char LocalUserNum );
	bool RegisterLocalTalker ( unsigned char LocalUserNum );
};

UClass* UOnlineVoiceInterface::pClassPointer = NULL;

// Class Engine.OnlineContentInterface
// 0x0090 (0x00CC - 0x003C)
class UOnlineContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnContentChange__Delegate;                      		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadContentComplete__Delegate;                		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadCrossTitleContentComplete__Delegate;      		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadCrossTitleSaveGameDataComplete__Delegate; 		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueryAvailableDownloadsComplete__Delegate;    		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadSaveGameDataComplete__Delegate;           		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWriteSaveGameDataComplete__Delegate;          		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadSaveGamesComplete__Delegate;              		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadDownloadableContentListComplete__Delegate;		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadHiddenDownloadableContentListComplete__Delegate;		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadCriticalDownloadableContentListComplete__Delegate;		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCheckDownloadableContentList__Delegate;       		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8839 ];

		return pClassPointer;
	};

	void ClearCheckDownloadableContentListDelegate ( unsigned char LocalUserNum, struct FScriptDelegate CheckDownloadableContentListDelegate );
	void AddCheckDownloadableContentListDelegate ( unsigned char LocalUserNum, struct FScriptDelegate CheckDownloadableContentListDelegate );
	bool CheckDownloadableContentList ( unsigned char LocalUserNum );
	void OnCheckDownloadableContentList ( unsigned char LocalUserNum, unsigned long bDownloadableContentListAvailable );
	unsigned char GetCriticalDownloadableContentList ( unsigned char LocalUserNum, TArray< struct FMarketplaceContent >* DLCList );
	bool ReadCriticalDownloadableContentList ( unsigned char LocalUserNum, int CategoryMask );
	void ClearReadCriticalDownloadableContentListComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadCriticalDownloadableContentListCompleteDelegate );
	void AddReadCriticalDownloadableContentListComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadCriticalDownloadableContentListCompleteDelegate );
	void OnReadCriticalDownloadableContentListComplete ( unsigned long bWasSuccessful );
	unsigned char GetHiddenDownloadableContentList ( unsigned char LocalUserNum, TArray< struct FMarketplaceContent >* DLCList );
	bool ReadHiddenDownloadableContentList ( unsigned char LocalUserNum, TArray< int > OfferIds );
	void ClearReadHiddenDownloadableContentListComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadHiddenDownloadableContentListCompleteDelegate );
	void AddReadHiddenDownloadableContentListComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadHiddenDownloadableContentListCompleteDelegate );
	void OnReadHiddenDownloadableContentListComplete ( unsigned long bWasSuccessful );
	unsigned char GetDownloadableContentList ( unsigned char LocalUserNum, TArray< struct FMarketplaceContent >* DLCList );
	bool ReadDownloadableContentList ( unsigned char LocalUserNum, int CategoryMask );
	void ClearReadDownloadableContentListComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadDownloadableContentListCompleteDelegate );
	void AddReadDownloadableContentListComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadDownloadableContentListCompleteDelegate );
	void OnReadDownloadableContentListComplete ( unsigned long bWasSuccessful );
	unsigned char GetSaveGamesList ( unsigned char LocalUserNum, TArray< struct FOnlineContent >* SaveGamesList );
	bool ReadSaveGamesList ( unsigned char LocalUserNum, int DeviceID, struct FString SaveFilePrefix );
	void ClearReadSaveGamesComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGamesCompleteDelegate );
	void AddReadSaveGamesComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGamesCompleteDelegate );
	void OnReadSaveGamesComplete ( unsigned long bWasSuccessful );
	bool ClearSaveGames ( unsigned char LocalUserNum );
	bool DeleteSaveGame ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename );
	void ClearWriteSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate WriteSaveGameDataCompleteDelegate );
	void AddWriteSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate WriteSaveGameDataCompleteDelegate );
	void OnWriteSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	bool WriteSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, TArray< unsigned char >* SaveGameData );
	void ClearReadSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void AddReadSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void OnReadSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	bool GetSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, unsigned char* bIsValid, TArray< unsigned char >* SaveGameData );
	bool ReadSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	void GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads );
	void ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful );
	bool QueryAvailableDownloads ( unsigned char LocalUserNum, int CategoryMask );
	bool ClearCrossTitleSaveGames ( unsigned char LocalUserNum );
	void ClearReadCrossTitleSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void AddReadCrossTitleSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void OnReadCrossTitleSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	bool GetCrossTitleSaveGameData ( unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, unsigned char* bIsValid, TArray< unsigned char >* SaveGameData );
	bool ReadCrossTitleSaveGameData ( unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	void ClearReadCrossTitleContentCompleteDelegate ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void AddReadCrossTitleContentCompleteDelegate ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void OnReadCrossTitleContentComplete ( unsigned long bWasSuccessful );
	unsigned char GetCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType, TArray< struct FOnlineCrossTitleContent >* ContentList );
	void ClearCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType );
	bool ReadCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType, int TitleId, int DeviceID );
	unsigned char GetContentList ( unsigned char LocalUserNum, unsigned char ContentType, TArray< struct FOnlineContent >* ContentList );
	void ClearContentList ( unsigned char LocalUserNum, unsigned char ContentType );
	bool ReadContentList ( unsigned char LocalUserNum, unsigned char ContentType, int DeviceID );
	void ClearReadContentComplete ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void AddReadContentComplete ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void OnReadContentComplete ( unsigned long bWasSuccessful );
	void ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void OnContentChange ( );
};

UClass* UOnlineContentInterface::pClassPointer = NULL;

// Class Engine.OnlineGameInterface
// 0x00CC (0x0108 - 0x003C)
class UOnlineGameInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineGameComplete__Delegate;           		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateOnlineGameComplete__Delegate;           		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDestroyOnlineGameComplete__Delegate;          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFindOnlineGamesComplete__Delegate;            		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCancelFindOnlineGamesComplete__Delegate;      		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQosStatusChanged__Delegate;                   		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinOnlineGameComplete__Delegate;             		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRegisterPlayerComplete__Delegate;             		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnregisterPlayerComplete__Delegate;           		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStartOnlineGameComplete__Delegate;            		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnEndOnlineGameComplete__Delegate;              		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnArbitrationRegistrationComplete__Delegate;    		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGameInviteAccepted__Delegate;                 		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGameInviteProcessingStarted__Delegate;        		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRecalculateSkillRatingComplete__Delegate;     		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMigrateOnlineGameComplete__Delegate;          		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinMigratedOnlineGameComplete__Delegate;     		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8844 ];

		return pClassPointer;
	};

	bool HasPendingBootInvite ( );
	void CancelNATNegotiation ( );
	void ClearJoinMigratedOnlineGameCompleteDelegate ( struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate );
	void AddJoinMigratedOnlineGameCompleteDelegate ( struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate );
	void OnJoinMigratedOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool JoinMigratedOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame );
	void ClearMigrateOnlineGameCompleteDelegate ( struct FScriptDelegate MigrateOnlineGameCompleteDelegate );
	void AddMigrateOnlineGameCompleteDelegate ( struct FScriptDelegate MigrateOnlineGameCompleteDelegate );
	void OnMigrateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool MigrateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName );
	void ClearRecalculateSkillRatingCompleteDelegate ( struct FScriptDelegate RecalculateSkillRatingGameCompleteDelegate );
	void AddRecalculateSkillRatingCompleteDelegate ( struct FScriptDelegate RecalculateSkillRatingCompleteDelegate );
	void OnRecalculateSkillRatingComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RecalculateSkillRating ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	void ClearGameInviteProcessingStartedDelegate ( struct FScriptDelegate GameInviteProcessingStartedDelegate );
	void AddGameInviteProcessingStartedDelegate ( struct FScriptDelegate GameInviteProcessingStartedDelegate );
	void OnGameInviteProcessingStarted ( );
	bool AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName );
	void ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	TArray< struct FOnlineArbitrationRegistrant > GetArbitratedPlayers ( struct FName SessionName );
	void ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RegisterForArbitration ( struct FName SessionName );
	void ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool EndOnlineGame ( struct FName SessionName );
	void ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool StartOnlineGame ( struct FName SessionName );
	void ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void OnUnregisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool UnregisterPlayers ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	bool UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID );
	void ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void OnRegisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool RegisterPlayers ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	bool RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited );
	bool GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo );
	void ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame );
	bool QueryNonAdvertisedData ( int StartAt, int NumberToQuery );
	bool FreeSearchResults ( class UOnlineGameSearch* Search );
	class UOnlineGameSearch* GetGameSearch ( );
	bool BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo );
	void ClearQosStatusChangedDelegate ( struct FScriptDelegate QosStatusChangedDelegate );
	void AddQosStatusChangedDelegate ( struct FScriptDelegate QosStatusChangedDelegate );
	void OnQosStatusChanged ( int NumComplete, int NumTotal );
	void ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool CancelFindOnlineGames ( );
	void ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void OnFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings );
	void ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool DestroyOnlineGame ( struct FName SessionName );
	class UOnlineGameSettings* GetGameSettings ( struct FName SessionName );
	void ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData );
	void ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings );
};

UClass* UOnlineGameInterface::pClassPointer = NULL;

// Class Engine.OnlineSystemInterface
// 0x0048 (0x0084 - 0x003C)
class UOnlineSystemInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLinkStatusChange__Delegate;                   		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnExternalUIChange__Delegate;                   		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnControllerChange__Delegate;                   		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnConnectionStatusChange__Delegate;             		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStorageDeviceChange__Delegate;                		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnContentChange__Delegate;                      		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8849 ];

		return pClassPointer;
	};

	void ClearContentChangeDelegateEx ( struct FScriptDelegate ContentDelegate );
	void AddContentChangeDelegateEx ( struct FScriptDelegate ContentDelegate );
	void OnContentChange ( );
	int GetLocale ( );
	void ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void OnStorageDeviceChange ( );
	unsigned char GetNATType ( );
	void ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	bool IsControllerConnected ( int ControllerId );
	void ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void OnControllerChange ( int ControllerId, unsigned long bIsConnected );
	void SetNetworkNotificationPosition ( unsigned char NewPos );
	unsigned char GetNetworkNotificationPosition ( );
	void ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void OnExternalUIChange ( unsigned long bIsOpening );
	void ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void OnLinkStatusChange ( unsigned long bIsConnected );
	bool HasLinkConnection ( );
};

UClass* UOnlineSystemInterface::pClassPointer = NULL;

// Class Engine.OnlinePlayerInterfaceEx
// 0x0030 (0x006C - 0x003C)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:
	struct FScriptDelegate                             __OnDeviceSelectionComplete__Delegate;            		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProfileDataChanged__Delegate;                 		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadCrossTitleProfileSettingsComplete__Delegate;		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnlockAvatarAwardComplete__Delegate;          		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8854 ];

		return pClassPointer;
	};

	bool ShowRedeemCodeUI ( unsigned char LocalUserNum );
	void ClearUnlockAvatarAwardCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAvatarAwardCompleteDelegate );
	void AddUnlockAvatarAwardCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAvatarAwardCompleteDelegate );
	void OnUnlockAvatarAwardComplete ( unsigned long bWasSuccessful );
	bool ShowCustomMessageUI ( unsigned char LocalUserNum, struct FString MessageTitle, struct FString NonEditableMessage, struct FString EditableMessage, TArray< struct FUniqueNetId >* Recipients );
	void ClearCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId );
	class UOnlineProfileSettings* GetCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId );
	void ClearReadCrossTitleProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void AddReadCrossTitleProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void OnReadCrossTitleProfileSettingsComplete ( unsigned char LocalUserNum, int TitleId, unsigned long bWasSuccessful );
	bool ReadCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId, class UOnlineProfileSettings* ProfileSettings );
	bool UnlockAvatarAward ( unsigned char LocalUserNum, int AvatarItemId );
	bool ShowCustomPlayersUI ( unsigned char LocalUserNum, struct FString Title, struct FString Description, TArray< struct FUniqueNetId >* Players );
	bool ShowPlayersUI ( unsigned char LocalUserNum );
	bool ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	void ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void OnProfileDataChanged ( );
	bool UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId );
	bool IsDeviceValid ( int DeviceID, int SizeNeeded );
	int GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName );
	void ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	bool ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShow, unsigned long bManageStorage );
	bool ShowMembershipMarketplaceUI ( unsigned char LocalUserNum );
	bool ShowContentPurchaseWebPage ( unsigned char LocalUserNum, struct FString OfferURL );
	bool ShowContentPurchaseUI ( unsigned char LocalUserNum, struct FString Offer, unsigned long bCheckOut, unsigned long bPreOrder );
	bool ShowContentMarketplaceUI ( unsigned char LocalUserNum, int CategoryMask, int OfferId );
	bool ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText );
	bool ShowAchievementsUI ( unsigned char LocalUserNum );
	bool ShowMessagesUI ( unsigned char LocalUserNum );
	bool ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
};

UClass* UOnlinePlayerInterfaceEx::pClassPointer = NULL;

// Class Engine.OnlinePlayerInterface
// 0x0114 (0x0150 - 0x003C)
class UOnlinePlayerInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLoginChange__Delegate;                        		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginCancelled__Delegate;                     		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMutingChange__Delegate;                       		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendsChange__Delegate;                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginFailed__Delegate;                        		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLogoutCompleted__Delegate;                    		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetUserAgeGroup__Delegate;                    		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginStatusChange__Delegate;                  		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;        		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;       		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadPlayerStorageComplete__Delegate;          		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadPlayerStorageForNetIdComplete__Delegate;  		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWritePlayerStorageComplete__Delegate;         		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadFriendsComplete__Delegate;                		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnKeyboardInputComplete__Delegate;              		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddFriendByNameComplete__Delegate;            		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendInviteReceived__Delegate;               		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSentGameInvite__Delegate;                     		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedGameInvite__Delegate;                 		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinFriendGameComplete__Delegate;             		// 0x0120 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendMessageReceived__Delegate;              		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnlockAchievementComplete__Delegate;          		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadAchievementsComplete__Delegate;           		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8859 ];

		return pClassPointer;
	};

	unsigned char GetAchievements ( unsigned char LocalUserNum, int TitleId, TArray< struct FAchievementDetails >* Achievements );
	void ClearReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void AddReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void OnReadAchievementsComplete ( int TitleId );
	bool ReadAchievements ( unsigned char LocalUserNum, int TitleId, unsigned long bShouldReadText, unsigned long bShouldReadImages );
	void ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void OnUnlockAchievementComplete ( unsigned long bWasSuccessful );
	bool UnlockAchievement ( unsigned char LocalUserNum, int AchievementId );
	bool DeleteMessage ( unsigned char LocalUserNum, int MessageIndex );
	void ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void GetFriendMessages ( unsigned char LocalUserNum, TArray< struct FOnlineFriendMessage >* FriendMessages );
	void ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void OnJoinFriendGameComplete ( unsigned long bWasSuccessful );
	bool JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend );
	void ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName );
	void ClearSentGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SentGameInviteDelegate );
	void AddSentGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SentGameInviteDelegate );
	void OnSentGameInvite ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool SendGameInviteToFriends ( unsigned char LocalUserNum, TArray< struct FUniqueNetId > Friends, struct FString Text );
	bool SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text );
	bool SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message );
	void ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	bool RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend );
	bool DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	bool AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	void ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void OnAddFriendByNameComplete ( unsigned long bWasSuccessful );
	bool AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message );
	bool AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message );
	struct FString GetKeyboardInputResults ( unsigned char* bWasCanceled );
	void ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void OnKeyboardInputComplete ( unsigned long bWasSuccessful );
	bool ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned char KeyboardType, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength );
	void SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, TArray< struct FLocalizedStringSetting >* LocalizedStringSettings, TArray< struct FSettingsProperty >* Properties );
	unsigned char GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, TArray< struct FOnlineFriend >* Friends );
	void ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void OnReadFriendsComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt );
	void ClearWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	void AddWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	void OnWritePlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool WritePlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID );
	class UOnlinePlayerStorage* GetPlayerStorage ( unsigned char LocalUserNum );
	void ClearReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate );
	void AddReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate );
	void OnReadPlayerStorageForNetIdComplete ( struct FUniqueNetId NetId, unsigned long bWasSuccessful );
	bool ReadPlayerStorageForNetId ( unsigned char LocalUserNum, struct FUniqueNetId NetId, class UOnlinePlayerStorage* PlayerStorage );
	void ClearReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void AddReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void OnReadPlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool ReadPlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID );
	void ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	class UOnlineProfileSettings* GetProfileSettings ( unsigned char LocalUserNum );
	void ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	void ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void ClearLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum );
	void AddLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum );
	void OnLoginStatusChange ( unsigned char NewStatus, struct FUniqueNetId NewId );
	void ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate );
	void AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate );
	bool ShowFriendsUI ( unsigned char LocalUserNum );
	bool IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool AreAnyFriends ( unsigned char LocalUserNum, TArray< struct FFriendsQuery >* Query );
	bool IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	unsigned char CanShowPresenceInformation ( unsigned char LocalUserNum );
	unsigned char CanViewPlayerProfiles ( unsigned char LocalUserNum );
	unsigned char CanPurchaseContent ( unsigned char LocalUserNum );
	unsigned char CanDownloadUserContent ( unsigned char LocalUserNum );
	unsigned char CanCommunicate ( unsigned char LocalUserNum );
	unsigned char CanPlayOnline ( unsigned char LocalUserNum );
	void ClearGetUserAgeGroupDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GetUserAgeGroupDelegate );
	void AddGetUserAgeGroupDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GetUserAgeGroupDelegate );
	bool GetUserAgeGroup ( unsigned char LocalUserNum );
	void OnGetUserAgeGroup ( unsigned char LocalUserNum, unsigned char UserAgeGroup );
	bool IsLocalLogin ( unsigned char LocalUserNum );
	bool IsGuestLogin ( unsigned char LocalUserNum );
	struct FString GetPlayerNickname ( unsigned char LocalUserNum );
	bool GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID );
	unsigned char GetLoginStatus ( unsigned char LocalUserNum );
	void ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	bool Logout ( unsigned char LocalUserNum );
	void ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	bool AutoLogin ( );
	bool Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly );
	bool ShowLoginUI ( unsigned long bShowOnlineOnly, int NumLoginOverride, unsigned long bAddUser );
	void OnFriendsChange ( );
	void OnMutingChange ( );
	void OnLoginCancelled ( );
	void OnLoginChange ( unsigned char LocalUserNum );
};

UClass* UOnlinePlayerInterface::pClassPointer = NULL;

// Class Engine.OnlineAccountInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineAccountInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineAccountCompleted__Delegate;       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8864 ];

		return pClassPointer;
	};

	bool GetLocalAccountNames ( TArray< struct FString >* Accounts );
	bool DeleteLocalAccount ( struct FString UserName, struct FString Password );
	bool RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password );
	bool CreateLocalAccount ( struct FString UserName, struct FString Password );
	void ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus );
	bool CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey );
};

UClass* UOnlineAccountInterface::pClassPointer = NULL;

// Class Engine.AccessControl
// 0x0110 (0x0298 - 0x0188)
class AAccessControl : public AInfo
{
public:
	TArray< struct FString >                           IPPolicies;                                       		// 0x0188 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      BannedIDs;                                        		// 0x0194 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     IPBanned;                                         		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WrongPassword;                                    		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NeedPassword;                                     		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SessionBanned;                                    		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickedMsg;                                        		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultKickReason;                                		// 0x01DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IdleKickReason;                                   		// 0x01E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AuthenticationFailed;                             		// 0x01F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      AdminClass;                                       		// 0x0200 (0x0004) [0x0000000000000000]              
	struct FString                                     AdminPassword;                                    		// 0x0204 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     GamePassword;                                     		// 0x0210 (0x000C) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ACDisplayText[ 0x3 ];                             		// 0x021C (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ACDescText[ 0x3 ];                                		// 0x0240 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bDontAddDefaultAdmin : 1;                         		// 0x0264 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingPostSeamlessInit : 1;                     		// 0x0264 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAuthenticateClients : 1;                         		// 0x0264 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAuthenticateServer : 1;                          		// 0x0264 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAuthenticateListenHost : 1;                      		// 0x0264 (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bPendingListenAuth : 1;                           		// 0x0264 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                MaxAuthRetryCount;                                		// 0x0268 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                AuthRetryDelay;                                   		// 0x026C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0270 (0x0004) [0x0000000000000000]              
	class UOnlineAuthInterfaceBaseImpl*                CachedAuthInt;                                    		// 0x0274 (0x0004) [0x0000000000000000]              
	TArray< struct FPendingClientAuth >                ClientsPendingAuth;                               		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FServerAuthRetry >                  ServerAuthRetries;                                		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ListenAuthBlobUID;                                		// 0x0290 (0x0004) [0x0000000000000000]              
	int                                                ListenAuthRetryCount;                             		// 0x0294 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9253 ];

		return pClassPointer;
	};

	void ShutdownAuth ( );
	void InitAuth ( );
	bool IsPendingAuth ( struct FUniqueNetId PlayerUID );
	void Cleanup ( unsigned long bExit );
	void NotifyExit ( );
	void NotifyGameEnding ( );
	void NotifyTravel ( unsigned long bSeamless );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StaticOnClientConnectionClose ( class UPlayer* ClientConnection );
	void OnClientConnectionClose ( class UPlayer* ClientConnection );
	void ListenHostAuthTimeout ( );
	void EndListenHostAuth ( );
	void ContinueListenHostAuth ( );
	void BeginListenHostAuth ( );
	void NotifyStartOnlineGame ( );
	void OnAuthRetryServer ( class UPlayer* ClientConnection );
	void OnAuthRequestServer ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID, int ClientIP, int ClientPort );
	void OnAuthCompleteClient ( unsigned long bSuccess, struct FUniqueNetId ClientUID, class UPlayer* ClientConnection, struct FString ExtraInfo );
	void OnAuthBlobReceivedClient ( struct FUniqueNetId ClientUID, int ClientIP, int AuthBlobUID );
	void OnAuthReady ( );
	void PendingAuthTimer ( );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, unsigned long bSpectator, struct FString* OutError );
	bool IsIDBanned ( struct FUniqueNetId* NetId );
	bool CheckIPPolicy ( struct FString Address );
	bool ValidLogin ( struct FString UserName, struct FString Password );
	bool ParseAdminOptions ( struct FString Options );
	void AdminExited ( class APlayerController* P );
	void AdminEntered ( class APlayerController* P );
	bool AdminLogout ( class APlayerController* P );
	bool AdminLogin ( class APlayerController* P, struct FString Password );
	bool KickPlayer ( class APlayerController* C, struct FString KickReason );
	bool ForceKickPlayer ( class APlayerController* C, struct FString KickReason );
	void KickBan ( struct FString Target );
	void Kick ( struct FString Target );
	class AController* GetControllerFromString ( struct FString Target );
	bool RequiresPassword ( );
	void SetGamePassword ( struct FString P );
	bool SetAdminPassword ( struct FString P );
	bool IsAdmin ( class APlayerController* P );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* AAccessControl::pClassPointer = NULL;

// Class Engine.Admin
// 0x0000 (0x08F0 - 0x08F0)
class AAdmin : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9281 ];

		return pClassPointer;
	};

	void ServerSwitch ( struct FString URL );
	void Switch ( struct FString URL );
	void ServerRestartMap ( );
	void RestartMap ( );
	void PlayerList ( );
	void ServerKick ( struct FString S );
	void Kick ( struct FString S );
	void ServerKickBan ( struct FString S );
	void KickBan ( struct FString S );
	void ServerAdmin ( struct FString CommandLine );
	void Admin ( struct FString CommandLine );
	void eventPostBeginPlay ( );
};

UClass* AAdmin::pClassPointer = NULL;

// Class Engine.IScaleBehavior
// 0x0000 (0x003C - 0x003C)
class UIScaleBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9870 ];

		return pClassPointer;
	};

	void Behavior_ChangeScale ( float InScale );
};

UClass* UIScaleBehavior::pClassPointer = NULL;

// Class Engine.ApexDestructibleActorSpawnable
// 0x0000 (0x01F4 - 0x01F4)
class AApexDestructibleActorSpawnable : public AApexDestructibleActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9879 ];

		return pClassPointer;
	};

};

UClass* AApexDestructibleActorSpawnable::pClassPointer = NULL;

// Class Engine.EmitterSpawnable
// 0x0004 (0x0198 - 0x0194)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x0194 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9891 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

UClass* AEmitterSpawnable::pClassPointer = NULL;

// Class Engine.KAssetSpawnable
// 0x0000 (0x0198 - 0x0198)
class AKAssetSpawnable : public AKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9906 ];

		return pClassPointer;
	};

};

UClass* AKAssetSpawnable::pClassPointer = NULL;

// Class Engine.ActorFactorySkeletalMeshCinematic
// 0x0000 (0x008C - 0x008C)
class UActorFactorySkeletalMeshCinematic : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9917 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySkeletalMeshCinematic::pClassPointer = NULL;

// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x008C - 0x008C)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9919 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySkeletalMeshMAT::pClassPointer = NULL;

// Class Engine.SeqEvent_Death
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_Death : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 10293 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_Death::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 10608 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ToggleGodMode::pClassPointer = NULL;

// Class Engine.SeqAct_ControlMovieTexture
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 11279 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ControlMovieTexture::pClassPointer = NULL;

// Class Engine.IParameterBehavior
// 0x0000 (0x003C - 0x003C)
class UIParameterBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 11358 ];

		return pClassPointer;
	};

	void Behavior_SetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Value );
	void Behavior_SetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* Value );
	void Behavior_SetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** Value );
	void Behavior_SetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* Value );
	bool Behavior_GetColorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FLinearColor* OutValue );
	bool Behavior_GetFloatParameterValue ( int* SectionIndex, struct FName* ParameterName, float* OutValue );
	bool Behavior_GetObjectParameterValue ( int* SectionIndex, struct FName* ParameterName, class UObject** OutValue );
	bool Behavior_GetVectorParameterValue ( int* SectionIndex, struct FName* ParameterName, struct FVector* OutValue );
};

UClass* UIParameterBehavior::pClassPointer = NULL;

// Class Engine.CoverReplicator
// 0x000C (0x0194 - 0x0188)
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray< struct FCoverReplicationInfo >             CoverReplicationData;                             		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12229 ];

		return pClassPointer;
	};

	void ClientReceiveLinkDisabledState ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled );
	void ServerSendLinkDisabledState ( int Index );
	void NotifyLinkDisabledStateChange ( class ACoverLink* Link );
	void ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendManualCoverTypeSlots ( int Index );
	void NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, TArray< int >* SlotIndices );
	void ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone );
	void ServerSendAdjustedSlots ( int Index );
	void NotifyAutoAdjustSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone );
	void ServerSendDisabledSlots ( int Index );
	void NotifyDisabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone );
	void ServerSendEnabledSlots ( int Index );
	void NotifyEnabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendInitialCoverReplicationInfo ( int Index );
	void ClientSetOwner ( class APlayerController* PC );
	void ReplicateInitialCoverInfo ( );
	void PurgeOldEntries ( );
};

UClass* ACoverReplicator::pClassPointer = NULL;

// Class Engine.GameMessage
// 0x0117 (0x0160 - 0x0049)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                               		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeftMessage;                                      		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedTeamMessage;                                		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedPlaceMessage;                               		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedSpawnMessage;                               		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnteredMessage;                                   		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxedOutMessage;                                  		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ArbitrationMessage;                               		// 0x00A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OvertimeMessage;                                  		// 0x00AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GlobalNameChange;                                 		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessage;                                   		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessageTrailer;                            		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoNameChange;                                     		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteStarted;                                      		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VotePassed;                                       		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MustHaveStats;                                    		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBeSpectator;                                  		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBePlayer;                                     		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BecameSpectator;                                  		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewPlayerMessage;                                 		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickWarning;                                      		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewSpecMessage;                                   		// 0x0148 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpecEnteredMessage;                               		// 0x0154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12358 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* UGameMessage::pClassPointer = NULL;

// Class Engine.DmgType_Suicided
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Suicided : public UKillZDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12616 ];

		return pClassPointer;
	};

};

UClass* UDmgType_Suicided::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggleTurning : 1;                               		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 13595 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ToggleInput::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleHUD
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 13670 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ToggleHUD::pClassPointer = NULL;

// Class Engine.SeqAct_ForceFeedback
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x00A4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      PredefinedWaveForm;                               		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 13706 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ForceFeedback::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                             		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableTurning : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHidePlayer : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHideHUD : 1;                                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableGodMode : 1;                               		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableNoTarget : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPauseDialog : 1;                                 		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bCinematicSplitScreen : 1;                        		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 13730 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ToggleCinematicMode::pClassPointer = NULL;

// Class Engine.SeqAct_FlyThroughHasEnded
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 14090 ];

		return pClassPointer;
	};

};

UClass* USeqAct_FlyThroughHasEnded::pClassPointer = NULL;

// Class Engine.SeqAct_SetSoundMode
// 0x0008 (0x00AC - 0x00A4)
class USeqAct_SetSoundMode : public USequenceAction
{
public:
	class USoundMode*                                  SoundMode;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTopPriority : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 14133 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

UClass* USeqAct_SetSoundMode::pClassPointer = NULL;

// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x002C (0x0068 - 0x003C)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     GroupName;                                        		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AnimName;                                         		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   SoundCueToPlay;                                   		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    AkEventToPlay;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverridePlayingAnim : 1;                         		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PlayFrequency;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 16170 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_PlayFaceFXAnim::pClassPointer = NULL;

// Class Engine.Behavior_ChangeAllegiance
// 0x0008 (0x0054 - 0x004C)
class UBehavior_ChangeAllegiance : public UBehaviorBase
{
public:
	unsigned long                                      bResetAllegiance : 1;                             		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	class UPawnAllegiance*                             Allegiance;                                       		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17140 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeAllegiance::pClassPointer = NULL;

// Class Engine.Behavior_ChangeBoneVisibility
// 0x000C (0x0058 - 0x004C)
class UBehavior_ChangeBoneVisibility : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       BoneName;                                         		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17152 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeBoneVisibility::pClassPointer = NULL;

// Class Engine.Behavior_ChangeCollision
// 0x0001 (0x004D - 0x004C)
class UBehavior_ChangeCollision : public UBehaviorBase
{
public:
	unsigned char                                      NewCollisionType;                                 		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17164 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeCollision::pClassPointer = NULL;

// Class Engine.Behavior_ChangeCollisionSize
// 0x0008 (0x0054 - 0x004C)
class UBehavior_ChangeCollisionSize : public UBehaviorBase
{
public:
	float                                              Radius;                                           		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Height;                                           		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17175 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeCollisionSize::pClassPointer = NULL;

// Class Engine.Behavior_ChangeCounter
// 0x0014 (0x0060 - 0x004C)
class UBehavior_ChangeCounter : public UBehaviorBase
{
public:
	unsigned char                                      CounterId;                                        		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                CounterAdjustment;                                		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetNewCounterValue : 1;                          		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSetNewCounterTarget : 1;                         		// 0x0054 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	int                                                NewCounterValue;                                  		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NewCounterTarget;                                 		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17209 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeCounter::pClassPointer = NULL;

// Class Engine.Behavior_ChangeParticleSystemActiveState
// 0x0001 (0x004D - 0x004C)
class UBehavior_ChangeParticleSystemActiveState : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17227 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeParticleSystemActiveState::pClassPointer = NULL;

// Class Engine.IParticleSystemBehavior
// 0x0000 (0x003C - 0x003C)
class UIParticleSystemBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17231 ];

		return pClassPointer;
	};

	void Behavior_ChangeParticleSystemActiveState ( unsigned char ChangeType );
};

UClass* UIParticleSystemBehavior::pClassPointer = NULL;

// Class Engine.Behavior_ChangeScale
// 0x0004 (0x0050 - 0x004C)
class UBehavior_ChangeScale : public UBehaviorBase
{
public:
	float                                              Scale;                                            		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17239 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeScale::pClassPointer = NULL;

// Class Engine.Behavior_ChangeSpin
// 0x0010 (0x005C - 0x004C)
class UBehavior_ChangeSpin : public UBehaviorBase
{
public:
	unsigned long                                      bApplyRandomScaleToSpin : 1;                      		// 0x004C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bInheritInstigatorRotation : 1;                   		// 0x004C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	int                                                YawRate;                                          		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                PitchRate;                                        		// 0x0054 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                RollRate;                                         		// 0x0058 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17250 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeSpin::pClassPointer = NULL;

// Class Engine.IBasicBehavior
// 0x0000 (0x003C - 0x003C)
class UIBasicBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17259 ];

		return pClassPointer;
	};

	float EvaluateAttributeInitialization ( struct FAttributeInitializationData InitData );
	class UAnimNode* FindAnimNode ( struct FName NodeName );
	void SetRotationRate ( struct FRotator NewRotationRate );
	float GetCollisionRadius ( );
};

UClass* UIBasicBehavior::pClassPointer = NULL;

// Class Engine.Behavior_ChangeVisibility
// 0x0001 (0x004D - 0x004C)
class UBehavior_ChangeVisibility : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17269 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ChangeVisibility::pClassPointer = NULL;

// Class Engine.Behavior_ClientConsoleCommand
// 0x000C (0x0058 - 0x004C)
class UBehavior_ClientConsoleCommand : public UBehaviorBase
{
public:
	struct FString                                     Command;                                          		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17280 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ClientConsoleCommand::pClassPointer = NULL;

// Class Engine.Behavior_ConsoleCommand
// 0x000C (0x0058 - 0x004C)
class UBehavior_ConsoleCommand : public UBehaviorBase
{
public:
	struct FString                                     Command;                                          		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17291 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ConsoleCommand::pClassPointer = NULL;

// Class Engine.Behavior_CustomAnimation
// 0x0028 (0x0074 - 0x004C)
class UBehavior_CustomAnimation : public UBehaviorBase
{
public:
	unsigned char                                      Reaction;                                         		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       CustomAnimNodeName;                               		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       AnimName;                                         		// 0x0058 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AnimDuration;                                     		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendInTime;                                      		// 0x0064 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendOutTime;                                     		// 0x0068 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AnimRate;                                         		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bLooping : 1;                                     		// 0x0070 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17302 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_CustomAnimation::pClassPointer = NULL;

// Class Engine.Behavior_Destroy
// 0x0000 (0x004C - 0x004C)
class UBehavior_Destroy : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17324 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_Destroy::pClassPointer = NULL;

// Class Engine.Behavior_FollowAllegiance
// 0x0014 (0x0060 - 0x004C)
class UBehavior_FollowAllegiance : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                           		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        AllegianceParent;                                 		// 0x0050 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17334 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_FollowAllegiance::pClassPointer = NULL;

// Class Engine.Behavior_RandomlyRunBehaviors
// 0x0024 (0x0070 - 0x004C)
class UBehavior_RandomlyRunBehaviors : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ProbabilityContext;                               		// 0x004C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ProbabilityLowerBound;                            		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ProbabilityUpperBound;                            		// 0x0060 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FIndependentSelectionData >         Possibilities;                                    		// 0x0064 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17376 ];

		return pClassPointer;
	};

	void ApplyBehavior ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RandomlyRunBehaviors::pClassPointer = NULL;

// Class Engine.Behavior_RunBehaviorCollection
// 0x001C (0x0068 - 0x004C)
class UBehavior_RunBehaviorCollection : public UBehaviorBase
{
public:
	class UBehaviorCollectionDefinition*               CollectionDefinition;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       OverrideName;                                     		// 0x0050 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBehaviorContextData                        OverrideContext;                                  		// 0x0058 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17403 ];

		return pClassPointer;
	};

	void RunBehaviorCollection ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
	void ApplyBehavior ( class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_RunBehaviorCollection::pClassPointer = NULL;

// Class Engine.BehaviorCollectionDefinition
// 0x000C (0x0048 - 0x003C)
class UBehaviorCollectionDefinition : public UGBXDefinition
{
public:
	TArray< class UBehaviorBase* >                     Behaviors;                                        		// 0x003C (0x000C) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17407 ];

		return pClassPointer;
	};

};

UClass* UBehaviorCollectionDefinition::pClassPointer = NULL;

// Class Engine.Behavior_SetMaterialParameters
// 0x0038 (0x0084 - 0x004C)
class UBehavior_SetMaterialParameters : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        AttributeContext;                                 		// 0x004C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                MeshSection;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FScalarMaterialParameter >          ScalarParameterValues;                            		// 0x0060 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVectorMaterialParameter >          VectorParameterValues;                            		// 0x006C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTextureMaterialParameter >         TextureParameterValues;                           		// 0x0078 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17431 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetMaterialParameters::pClassPointer = NULL;

// Class Engine.IMaterialBehavior
// 0x0000 (0x003C - 0x003C)
class UIMaterialBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17434 ];

		return pClassPointer;
	};

	void Behavior_SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void Behavior_SetScalarParameterValue ( struct FName ParameterName, float Value );
	void Behavior_SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value );
	bool Behavior_GetScalarParameterValue ( struct FName ParameterName, float* OutValue );
	bool Behavior_GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
};

UClass* UIMaterialBehavior::pClassPointer = NULL;

// Class Engine.Behavior_SetParticleSystemParameters
// 0x004C (0x0098 - 0x004C)
class UBehavior_SetParticleSystemParameters : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        AttributeContext;                                 		// 0x004C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FScalarParticleSystemParameter >    ScalarParameterValues;                            		// 0x005C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVectorParticleSystemParameter >    VectorParameterValues;                            		// 0x0068 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FColorParticleSystemParameter >     ColorParameterValues;                             		// 0x0074 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FMaterialParticleSystemParameter >  MaterialParameterValues;                          		// 0x0080 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FActorParticleSystemParameter >     ActorParameterValues;                             		// 0x008C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17465 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetParticleSystemParameters::pClassPointer = NULL;

// Class Engine.Behavior_SetPhysics
// 0x0003 (0x004F - 0x004C)
class UBehavior_SetPhysics : public UBehaviorBase
{
public:
	unsigned char                                      Physics;                                          		// 0x004C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      BodyAction;                                       		// 0x004D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SimulationAction;                                 		// 0x004E (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17509 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetPhysics::pClassPointer = NULL;

// Class Engine.Behavior_SetSkelControlActive
// 0x000C (0x0058 - 0x004C)
class UBehavior_SetSkelControlActive : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x004C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bActive : 1;                                      		// 0x0054 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17531 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_SetSkelControlActive::pClassPointer = NULL;

// Class Engine.Behavior_ToggleVisibility
// 0x0000 (0x004C - 0x004C)
class UBehavior_ToggleVisibility : public UBehaviorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17543 ];

		return pClassPointer;
	};

	void ApplyBehaviorToContext ( class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, struct FBehaviorParameters EventData, struct FBehaviorKernelInfo* KernelInfo );
};

UClass* UBehavior_ToggleVisibility::pClassPointer = NULL;

// Class Engine.BroadcastHandler
// 0x0008 (0x0190 - 0x0188)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                         		// 0x0188 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMuteSpectators : 1;                              		// 0x018C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 17640 ];

		return pClassPointer;
	};

	void eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void Broadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type );
	bool AllowsBroadcast ( class AActor* broadcaster, int InLen );
	void UpdateSentText ( );
};

UClass* ABroadcastHandler::pClassPointer = NULL;

// Class Engine.ColorScaleVolume
// 0x0010 (0x01CC - 0x01BC)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                       		// 0x01BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpTime;                                       		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18289 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AColorScaleVolume::pClassPointer = NULL;

// Class Engine.DebugCameraHUD
// 0x0000 (0x0224 - 0x0224)
class ADebugCameraHUD : public AHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 19237 ];

		return pClassPointer;
	};

	void eventPostRender ( );
	bool DisplayMaterials ( float X, float DY, class UMeshComponent* MeshComp, float* Y );
	void eventPostBeginPlay ( );
};

UClass* ADebugCameraHUD::pClassPointer = NULL;

// Class Engine.DebugCameraInput
// 0x0000 (0x017C - 0x017C)
class UDebugCameraInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 19269 ];

		return pClassPointer;
	};

	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
};

UClass* UDebugCameraInput::pClassPointer = NULL;

// Class Engine.VolumeTimer
// 0x0004 (0x018C - 0x0188)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                		// 0x0188 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 19841 ];

		return pClassPointer;
	};

	void eventTimer ( );
	void eventPostBeginPlay ( );
};

UClass* AVolumeTimer::pClassPointer = NULL;

// Class Engine.SeqAct_SetDamageInstigator
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                 		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 19873 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetDamageInstigator::pClassPointer = NULL;

// Class Engine.DmgType_Crushed
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Crushed : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20007 ];

		return pClassPointer;
	};

};

UClass* UDmgType_Crushed::pClassPointer = NULL;

// Class Engine.DmgType_Fell
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Fell : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20009 ];

		return pClassPointer;
	};

};

UClass* UDmgType_Fell::pClassPointer = NULL;

// Class Engine.DmgType_Telefragged
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Telefragged : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20012 ];

		return pClassPointer;
	};

};

UClass* UDmgType_Telefragged::pClassPointer = NULL;

// Class Engine.DynamicPhysicsVolume
// 0x0004 (0x0208 - 0x0204)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0204 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20494 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ADynamicPhysicsVolume::pClassPointer = NULL;

// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x01C4 - 0x01C4)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20545 ];

		return pClassPointer;
	};

};

UClass* ADynamicSMActor_Spawnable::pClassPointer = NULL;

// Class Engine.DynamicTriggerVolume
// 0x0004 (0x01C0 - 0x01BC)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x01BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20554 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ADynamicTriggerVolume::pClassPointer = NULL;

// Class Engine.SeqAct_SetParticleSysParam
// 0x0014 (0x00B8 - 0x00A4)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x00A4 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bOverrideScalar : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20895 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetParticleSysParam::pClassPointer = NULL;

// Class Engine.ExponentialHeightFog
// 0x0008 (0x0190 - 0x0188)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                        		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x018C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 21386 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AExponentialHeightFog::pClassPointer = NULL;

// Class Engine.FailedConnect
// 0x0033 (0x007C - 0x0049)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[ 0x4 ];                               		// 0x004C (0x0030) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 21480 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFailSwitch ( struct FString FailString );
};

UClass* UFailedConnect::pClassPointer = NULL;

// Class Engine.SeqEvent_PlayerSpawned
// 0x0004 (0x00C8 - 0x00C4)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 22189 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_PlayerSpawned::pClassPointer = NULL;

// Class Engine.GameReplicationInfoAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UGameReplicationInfoAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 23027 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UGameReplicationInfoAttributeContextResolver::pClassPointer = NULL;

// Class Engine.HoldingAreaDestination
// 0x0000 (0x019C - 0x019C)
class AHoldingAreaDestination : public ATeleporterDestination
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 23422 ];

		return pClassPointer;
	};

};

UClass* AHoldingAreaDestination::pClassPointer = NULL;

// Class Engine.HeightFog
// 0x0008 (0x0190 - 0x0188)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                        		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x018C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 24226 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* AHeightFog::pClassPointer = NULL;

// Class Engine.IChangeBehaviorSetStateBehavior
// 0x0000 (0x003C - 0x003C)
class UIChangeBehaviorSetStateBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 24379 ];

		return pClassPointer;
	};

	void Behavior_ChangeBehaviorSet ( struct FName BehaviorSetName, unsigned char ChangeStatus );
};

UClass* UIChangeBehaviorSetStateBehavior::pClassPointer = NULL;

// Class Engine.IDamageBehavior
// 0x0000 (0x003C - 0x003C)
class UIDamageBehavior : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 24395 ];

		return pClassPointer;
	};

	void Behavior_CauseRadiusDamage ( float Radius, float DamageAmount, unsigned long bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, struct FVector Offset, class UIDamageCauser* DamageCauser, unsigned long bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray< class AActor* >* ActorsHurt );
	void Behavior_CauseDamage ( class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, unsigned long bCanDamageFriendlies, class UIDamageCauser* DamageCauser, float BarrelSourceTime, float PlantSourceTime );
};

UClass* UIDamageBehavior::pClassPointer = NULL;

// Class Engine.InterpActor_ForCinematic
// 0x0000 (0x01F4 - 0x01F4)
class AInterpActor_ForCinematic : public AInterpActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 24837 ];

		return pClassPointer;
	};

};

UClass* AInterpActor_ForCinematic::pClassPointer = NULL;

// Class Engine.MaterialInstanceTimeVaryingActor
// 0x0004 (0x018C - 0x0188)
class AMaterialInstanceTimeVaryingActor : public AActor
{
public:
	class UMaterialInstanceTimeVarying*                MatInst;                                          		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 26762 ];

		return pClassPointer;
	};

};

UClass* AMaterialInstanceTimeVaryingActor::pClassPointer = NULL;

// Class Engine.SeqAct_AssignController
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27250 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AssignController::pClassPointer = NULL;

// Class Engine.OnlineCommunityContentInterface
// 0x003C (0x0078 - 0x003C)
class UOnlineCommunityContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadContentListComplete__Delegate;            		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadFriendsContentListComplete__Delegate;     		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUploadContentComplete__Delegate;              		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDownloadContentComplete__Delegate;            		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetContentPayloadComplete__Delegate;          		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28638 ];

		return pClassPointer;
	};

	void RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate );
	void ClearGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void AddGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void OnGetContentPayloadComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, TArray< unsigned char >* Payload );
	bool GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded );
	void ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded );
	bool DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload );
	void ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile );
	bool UploadContent ( unsigned char PlayerNum, TArray< unsigned char >* Payload, struct FCommunityContentMetadata* MetaData );
	bool GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void OnReadFriendsContentListComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, TArray< struct FOnlineFriend >* Friends );
	bool GetContentList ( unsigned char PlayerNum, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void OnReadContentListComplete ( unsigned long bWasSuccessful );
	bool ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead );
	void Exit ( );
	bool Init ( );
};

UClass* UOnlineCommunityContentInterface::pClassPointer = NULL;

// Class Engine.OnlineEventsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineEventsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28988 ];

		return pClassPointer;
	};

	bool UpdatePlaylistPopulation ( int PlaylistId, int NumPlayers );
	bool UploadGameplayEventsData ( struct FUniqueNetId UniqueId, TArray< unsigned char >* Payload );
	bool UploadPlayerData ( struct FUniqueNetId UniqueId, struct FString PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage );
};

UClass* UOnlineEventsInterface::pClassPointer = NULL;

// Class Engine.OnlinePlaylistGameTypeProvider
// 0x0024 (0x00AC - 0x0088)
class UOnlinePlaylistGameTypeProvider : public UUIResourceDataProvider
{
public:
	struct FName                                       PlaylistGameTypeName;                             		// 0x0088 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     DisplayName;                                      		// 0x0090 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x009C (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	int                                                GameTypeId;                                       		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30069 ];

		return pClassPointer;
	};

};

UClass* UOnlinePlaylistGameTypeProvider::pClassPointer = NULL;

// Class Engine.OnlineRecentPlayersList
// 0x0058 (0x0094 - 0x003C)
class UOnlineRecentPlayersList : public UObject
{
public:
	TArray< struct FUniqueNetId >                      RecentPlayers;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRecentParty >                      RecentParties;                                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRecentParty                                LastParty;                                        		// 0x0054 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxRecentPlayers;                                 		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxRecentParties;                                 		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RecentPlayersAddIndex;                            		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                RecentPartiesAddIndex;                            		// 0x0084 (0x0004) [0x0000000000000000]              
	TArray< struct FCurrentPlayerMet >                 CurrentPlayers;                                   		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30118 ];

		return pClassPointer;
	};

	int GetCurrentPlayersListCount ( );
	void SetCurrentPlayersList ( TArray< struct FCurrentPlayerMet > Players );
	bool ShowCurrentPlayersList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowLastPartyPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPartiesPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	void SetLastParty ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers );
	int GetTeamForCurrentPlayer ( struct FUniqueNetId Player );
	int GetSkillForCurrentPlayer ( struct FUniqueNetId Player );
	void GetPlayersFromCurrentPlayers ( TArray< struct FUniqueNetId >* Players );
	void GetPlayersFromRecentParties ( TArray< struct FUniqueNetId >* Players );
	void ClearRecentParties ( );
	void AddPartyToRecentParties ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers );
	void ClearRecentPlayers ( );
	void AddPlayerToRecentPlayers ( struct FUniqueNetId NewPlayer );
};

UClass* UOnlineRecentPlayersList::pClassPointer = NULL;

// Class Engine.OnlineSuppliedUIInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineSuppliedUIInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnShowOnlineStatsUIComplete__Delegate;          		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30363 ];

		return pClassPointer;
	};

	bool ShowMatchmakingUI ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings );
	void ClearShowOnlineStatsUICompleteDelegate ( struct FScriptDelegate ShowOnlineStatsUICompleteDelegate );
	void AddShowOnlineStatsUICompleteDelegate ( struct FScriptDelegate ShowOnlineStatsUICompleteDelegate );
	bool ShowOnlineStatsUI ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players );
	void OnShowOnlineStatsUIComplete ( );
};

UClass* UOnlineSuppliedUIInterface::pClassPointer = NULL;

// Class Engine.OwnerAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UOwnerAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30551 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UOwnerAttributeContextResolver::pClassPointer = NULL;

// Class Engine.ParameterBehaviorBase
// 0x000C (0x0058 - 0x004C)
class UParameterBehaviorBase : public UBehaviorBase
{
public:
	struct FName                                       ParameterName;                                    		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SectionIndex;                                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30559 ];

		return pClassPointer;
	};

};

UClass* UParameterBehaviorBase::pClassPointer = NULL;

// Class Engine.ParticleModuleForceFieldCylindrical
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleForceFieldCylindrical : public UParticleModuleForceFieldBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30874 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleForceFieldCylindrical::pClassPointer = NULL;

// Class Engine.ParticleModuleForceFieldGeneric
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleForceFieldGeneric : public UParticleModuleForceFieldBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30877 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleForceFieldGeneric::pClassPointer = NULL;

// Class Engine.ParticleModuleForceFieldRadial
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleForceFieldRadial : public UParticleModuleForceFieldBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30880 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleForceFieldRadial::pClassPointer = NULL;

// Class Engine.ParticleModuleForceFieldTornado
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleForceFieldTornado : public UParticleModuleForceFieldBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30883 ];

		return pClassPointer;
	};

};

UClass* UParticleModuleForceFieldTornado::pClassPointer = NULL;

// Class Engine.PathNode_Dynamic
// 0x0000 (0x0244 - 0x0244)
class APathNode_Dynamic : public APathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31619 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
};

UClass* APathNode_Dynamic::pClassPointer = NULL;

// Class Engine.SeqEvent_PickupStatusChange
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31896 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_PickupStatusChange::pClassPointer = NULL;

// Class Engine.ProjectileAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UProjectileAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32313 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UProjectileAttributeContextResolver::pClassPointer = NULL;

// Class Engine.RadialBlurActor
// 0x0004 (0x018C - 0x0188)
class ARadialBlurActor : public AActor
{
public:
	class URadialBlurComponent*                        RadialBlur;                                       		// 0x0188 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32345 ];

		return pClassPointer;
	};

};

UClass* ARadialBlurActor::pClassPointer = NULL;

// Class Engine.SeqAct_ToggleConstraintDrive
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_ToggleConstraintDrive : public USequenceAction
{
public:
	unsigned long                                      bEnableAngularPositionDrive : 1;                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAngularVelocityDrive : 1;                  		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableLinearPositionDrive : 1;                   		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLinearvelocityDrive : 1;                   		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32563 ];

		return pClassPointer;
	};

};

UClass* USeqAct_ToggleConstraintDrive::pClassPointer = NULL;

// Class Engine.RB_BSJointActor
// 0x0000 (0x01A4 - 0x01A4)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32606 ];

		return pClassPointer;
	};

};

UClass* ARB_BSJointActor::pClassPointer = NULL;

// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x01A4 - 0x01A4)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32611 ];

		return pClassPointer;
	};

};

UClass* ARB_ConstraintActorSpawnable::pClassPointer = NULL;

// Class Engine.RB_HingeActor
// 0x0000 (0x01A4 - 0x01A4)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32671 ];

		return pClassPointer;
	};

};

UClass* ARB_HingeActor::pClassPointer = NULL;

// Class Engine.RB_PrismaticActor
// 0x0000 (0x01A4 - 0x01A4)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32688 ];

		return pClassPointer;
	};

};

UClass* ARB_PrismaticActor::pClassPointer = NULL;

// Class Engine.RB_PulleyJointActor
// 0x0000 (0x01A4 - 0x01A4)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32693 ];

		return pClassPointer;
	};

};

UClass* ARB_PulleyJointActor::pClassPointer = NULL;

// Class Engine.ReverbVolumeToggleable
// 0x0000 (0x0208 - 0x0208)
class AReverbVolumeToggleable : public AReverbVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32847 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};

UClass* AReverbVolumeToggleable::pClassPointer = NULL;

// Class Engine.SeqAct_AddRemoveFaceFXAnimSet
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_AddRemoveFaceFXAnimSet : public USequenceAction
{
public:
	TArray< class UFaceFXAnimSet* >                    FaceFXAnimSets;                                   		// 0x00A4 (0x000C) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33073 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AddRemoveFaceFXAnimSet::pClassPointer = NULL;

// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33077 ];

		return pClassPointer;
	};

};

UClass* USeqAct_AIAbortMoveToActor::pClassPointer = NULL;

// Class Engine.SeqAct_MITV_Activate
// 0x0004 (0x00A8 - 0x00A4)
class USeqAct_MITV_Activate : public USequenceAction
{
public:
	float                                              DurationOfMITV;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33289 ];

		return pClassPointer;
	};

	void eventActivated ( );
	int eventGetObjClassVersion ( );
};

UClass* USeqAct_MITV_Activate::pClassPointer = NULL;

// Class Engine.SeqAct_SetSkelControlTarget
// 0x0014 (0x00B8 - 0x00A4)
class USeqAct_SetSkelControlTarget : public USequenceAction
{
public:
	struct FName                                       SkelControlName;                                  		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           TargetActors;                                     		// 0x00AC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33431 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SetSkelControlTarget::pClassPointer = NULL;

// Class Engine.SeqAct_SetVector
// 0x000C (0x00B0 - 0x00A4)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                     		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33445 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetVector::pClassPointer = NULL;

// Class Engine.SeqAct_UpdatePhysBonesFromAnim
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_UpdatePhysBonesFromAnim : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33525 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_UpdatePhysBonesFromAnim::pClassPointer = NULL;

// Class Engine.SeqEvent_AIReachedRouteActor
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_AIReachedRouteActor : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33614 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_AIReachedRouteActor::pClassPointer = NULL;

// Class Engine.SeqEvent_LOS
// 0x000C (0x00D0 - 0x00C4)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TriggerDistance;                                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33622 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqEvent_LOS::pClassPointer = NULL;

// Class Engine.SeqVar_Byte
// 0x0000 (0x0058 - 0x0058)
class USeqVar_Byte : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33724 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Byte::pClassPointer = NULL;

// Class Engine.SeqVar_Name
// 0x0000 (0x0058 - 0x0058)
class USeqVar_Name : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33738 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Name::pClassPointer = NULL;

// Class Engine.SeqVar_Union
// 0x0000 (0x0058 - 0x0058)
class USeqVar_Union : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33767 ];

		return pClassPointer;
	};

};

UClass* USeqVar_Union::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x01D8 - 0x01D8)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 34340 ];

		return pClassPointer;
	};

};

UClass* ASkeletalMeshActorMATSpawnable::pClassPointer = NULL;

// Class Engine.SkeletalMeshActorMATWalkable
// 0x0000 (0x01D8 - 0x01D8)
class ASkeletalMeshActorMATWalkable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 34345 ];

		return pClassPointer;
	};

};

UClass* ASkeletalMeshActorMATWalkable::pClassPointer = NULL;

// Class Engine.Trigger_Dynamic
// 0x0000 (0x0194 - 0x0194)
class ATrigger_Dynamic : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 35484 ];

		return pClassPointer;
	};

};

UClass* ATrigger_Dynamic::pClassPointer = NULL;

// Class Engine.Trigger_LOS
// 0x000C (0x01A0 - 0x0194)
class ATrigger_LOS : public ATrigger
{
public:
	TArray< class APlayerController* >                 PCsWithLOS;                                       		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 35488 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* ATrigger_LOS::pClassPointer = NULL;

// Class Engine.TriggeredPath
// 0x0008 (0x024C - 0x0244)
class ATriggeredPath : public ANavigationPoint
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      MyTrigger;                                        		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 35504 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

UClass* ATriggeredPath::pClassPointer = NULL;

// Class Engine.TriggerStreamingLevel
// 0x000C (0x01A0 - 0x0194)
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray< struct FLevelStreamingData >               Levels;                                           		// 0x0194 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 35517 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ATriggerStreamingLevel::pClassPointer = NULL;

// Class Engine.UICharacterSummary
// 0x0028 (0x00B0 - 0x0088)
class UUICharacterSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                    		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CharacterName;                                    		// 0x0094 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CharacterBio;                                     		// 0x00A0 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00AC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 35560 ];

		return pClassPointer;
	};

	bool eventIsProviderDisabled ( );
};

UClass* UUICharacterSummary::pClassPointer = NULL;

// Class Engine.UIGameInfoSummary
// 0x004C (0x00D4 - 0x0088)
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassName;                                        		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameAcronym;                                      		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MapPrefix;                                        		// 0x00A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bIsTeamGame : 1;                                  		// 0x00AC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00AC (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	struct FString                                     GameSettingsClassName;                            		// 0x00B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameName;                                         		// 0x00BC (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00C8 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36361 ];

		return pClassPointer;
	};

	bool eventIsProviderDisabled ( );
};

UClass* UUIGameInfoSummary::pClassPointer = NULL;

// Class Engine.UIWeaponSummary
// 0x0028 (0x00B0 - 0x0088)
class UUIWeaponSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                    		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x0094 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponDescription;                                		// 0x00A0 (0x000C) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00AC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36542 ];

		return pClassPointer;
	};

	bool eventIsProviderDisabled ( );
};

UClass* UUIWeaponSummary::pClassPointer = NULL;

// Class Engine.VehicleAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UVehicleAttributeContextResolver : public UAttributeContextResolver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36550 ];

		return pClassPointer;
	};

	class UObject* GetAttributeContext ( class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource );
};

UClass* UVehicleAttributeContextResolver::pClassPointer = NULL;

// Class Engine.WaterVolume
// 0x0010 (0x0214 - 0x0204)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                       		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      EntryActor;                                       		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitSound;                                        		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ExitActor;                                        		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 36569 ];

		return pClassPointer;
	};

	void PlayExitSplash ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void PlayEntrySplash ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AWaterVolume::pClassPointer = NULL;

// Class Engine.WindDirectionalSource
// 0x0004 (0x018C - 0x0188)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                        		// 0x0188 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 37399 ];

		return pClassPointer;
	};

};

UClass* AWindDirectionalSource::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif